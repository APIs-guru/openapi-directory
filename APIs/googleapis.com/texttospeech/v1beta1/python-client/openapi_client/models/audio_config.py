# coding: utf-8

"""
    Cloud Text-to-Speech API

    Synthesizes natural-sounding speech by applying powerful neural network models.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AudioConfig(BaseModel):
    """
    Description of audio data to be synthesized.
    """ # noqa: E501
    audio_encoding: Optional[StrictStr] = Field(default=None, description="Required. The format of the audio byte stream.", alias="audioEncoding")
    effects_profile_id: Optional[List[StrictStr]] = Field(default=None, description="Optional. Input only. An identifier which selects 'audio effects' profiles that are applied on (post synthesized) text to speech. Effects are applied on top of each other in the order they are given. See [audio profiles](https://cloud.google.com/text-to-speech/docs/audio-profiles) for current supported profile ids.", alias="effectsProfileId")
    pitch: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional. Input only. Speaking pitch, in the range [-20.0, 20.0]. 20 means increase 20 semitones from the original pitch. -20 means decrease 20 semitones from the original pitch.")
    sample_rate_hertz: Optional[StrictInt] = Field(default=None, description="Optional. The synthesis sample rate (in hertz) for this audio. When this is specified in SynthesizeSpeechRequest, if this is different from the voice's natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality), unless the specified sample rate is not supported for the encoding chosen, in which case it will fail the request and return google.rpc.Code.INVALID_ARGUMENT.", alias="sampleRateHertz")
    speaking_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional. Input only. Speaking rate/speed, in the range [0.25, 4.0]. 1.0 is the normal native speed supported by the specific voice. 2.0 is twice as fast, and 0.5 is half as fast. If unset(0.0), defaults to the native 1.0 speed. Any other values < 0.25 or > 4.0 will return an error.", alias="speakingRate")
    volume_gain_db: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional. Input only. Volume gain (in dB) of the normal native volume supported by the specific voice, in the range [-96.0, 16.0]. If unset, or set to a value of 0.0 (dB), will play at normal native signal amplitude. A value of -6.0 (dB) will play at approximately half the amplitude of the normal native signal amplitude. A value of +6.0 (dB) will play at approximately twice the amplitude of the normal native signal amplitude. Strongly recommend not to exceed +10 (dB) as there's usually no effective increase in loudness for any value greater than that.", alias="volumeGainDb")
    __properties: ClassVar[List[str]] = ["audioEncoding", "effectsProfileId", "pitch", "sampleRateHertz", "speakingRate", "volumeGainDb"]

    @field_validator('audio_encoding')
    def audio_encoding_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AUDIO_ENCODING_UNSPECIFIED', 'LINEAR16', 'MP3', 'MP3_64_KBPS', 'OGG_OPUS', 'MULAW', 'ALAW']):
            raise ValueError("must be one of enum values ('AUDIO_ENCODING_UNSPECIFIED', 'LINEAR16', 'MP3', 'MP3_64_KBPS', 'OGG_OPUS', 'MULAW', 'ALAW')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AudioConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AudioConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audioEncoding": obj.get("audioEncoding"),
            "effectsProfileId": obj.get("effectsProfileId"),
            "pitch": obj.get("pitch"),
            "sampleRateHertz": obj.get("sampleRateHertz"),
            "speakingRate": obj.get("speakingRate"),
            "volumeGainDb": obj.get("volumeGainDb")
        })
        return _obj



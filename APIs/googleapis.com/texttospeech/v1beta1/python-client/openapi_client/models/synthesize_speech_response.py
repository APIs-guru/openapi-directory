# coding: utf-8

"""
    Cloud Text-to-Speech API

    Synthesizes natural-sounding speech by applying powerful neural network models.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.audio_config import AudioConfig
from openapi_client.models.timepoint import Timepoint
from typing import Optional, Set
from typing_extensions import Self

class SynthesizeSpeechResponse(BaseModel):
    """
    The message returned to the client by the `SynthesizeSpeech` method.
    """ # noqa: E501
    audio_config: Optional[AudioConfig] = Field(default=None, alias="audioConfig")
    audio_content: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The audio data bytes encoded as specified in the request, including the header for encodings that are wrapped in containers (e.g. MP3, OGG_OPUS). For LINEAR16 audio, we include the WAV header. Note: as with all bytes fields, protobuffers use a pure binary representation, whereas JSON representations use base64.", alias="audioContent")
    timepoints: Optional[List[Timepoint]] = Field(default=None, description="A link between a position in the original request input and a corresponding time in the output audio. It's only supported via `` of SSML input.")
    __properties: ClassVar[List[str]] = ["audioConfig", "audioContent", "timepoints"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SynthesizeSpeechResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of audio_config
        if self.audio_config:
            _dict['audioConfig'] = self.audio_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in timepoints (list)
        _items = []
        if self.timepoints:
            for _item_timepoints in self.timepoints:
                if _item_timepoints:
                    _items.append(_item_timepoints.to_dict())
            _dict['timepoints'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SynthesizeSpeechResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audioConfig": AudioConfig.from_dict(obj["audioConfig"]) if obj.get("audioConfig") is not None else None,
            "audioContent": obj.get("audioContent"),
            "timepoints": [Timepoint.from_dict(_item) for _item in obj["timepoints"]] if obj.get("timepoints") is not None else None
        })
        return _obj



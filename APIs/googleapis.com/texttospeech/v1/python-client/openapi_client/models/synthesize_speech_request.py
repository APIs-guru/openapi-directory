# coding: utf-8

"""
    Cloud Text-to-Speech API

    Synthesizes natural-sounding speech by applying powerful neural network models.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.audio_config import AudioConfig
from openapi_client.models.synthesis_input import SynthesisInput
from openapi_client.models.voice_selection_params import VoiceSelectionParams
from typing import Optional, Set
from typing_extensions import Self

class SynthesizeSpeechRequest(BaseModel):
    """
    The top-level message sent by the client for the `SynthesizeSpeech` method.
    """ # noqa: E501
    audio_config: Optional[AudioConfig] = Field(default=None, alias="audioConfig")
    input: Optional[SynthesisInput] = None
    voice: Optional[VoiceSelectionParams] = None
    __properties: ClassVar[List[str]] = ["audioConfig", "input", "voice"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SynthesizeSpeechRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of audio_config
        if self.audio_config:
            _dict['audioConfig'] = self.audio_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of input
        if self.input:
            _dict['input'] = self.input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of voice
        if self.voice:
            _dict['voice'] = self.voice.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SynthesizeSpeechRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audioConfig": AudioConfig.from_dict(obj["audioConfig"]) if obj.get("audioConfig") is not None else None,
            "input": SynthesisInput.from_dict(obj["input"]) if obj.get("input") is not None else None,
            "voice": VoiceSelectionParams.from_dict(obj["voice"]) if obj.get("voice") is not None else None
        })
        return _obj



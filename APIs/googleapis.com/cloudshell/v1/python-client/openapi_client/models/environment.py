# coding: utf-8

"""
    Cloud Shell API

    Allows users to start, configure, and connect to interactive shell sessions running in the cloud. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Environment(BaseModel):
    """
    A Cloud Shell environment, which is defined as the combination of a Docker image specifying what is installed on the environment and a home directory containing the user's data that will remain across sessions. Each user has at least an environment with the ID \"default\".
    """ # noqa: E501
    docker_image: Optional[StrictStr] = Field(default=None, description="Required. Immutable. Full path to the Docker image used to run this environment, e.g. \"gcr.io/dev-con/cloud-devshell:latest\".", alias="dockerImage")
    id: Optional[StrictStr] = Field(default=None, description="Output only. The environment's identifier, unique among the user's environments.")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. Full name of this resource, in the format `users/{owner_email}/environments/{environment_id}`. `{owner_email}` is the email address of the user to whom this environment belongs, and `{environment_id}` is the identifier of this environment. For example, `users/someone@example.com/environments/default`.")
    public_keys: Optional[List[StrictStr]] = Field(default=None, description="Output only. Public keys associated with the environment. Clients can connect to this environment via SSH only if they possess a private key corresponding to at least one of these public keys. Keys can be added to or removed from the environment using the AddPublicKey and RemovePublicKey methods.", alias="publicKeys")
    ssh_host: Optional[StrictStr] = Field(default=None, description="Output only. Host to which clients can connect to initiate SSH sessions with the environment.", alias="sshHost")
    ssh_port: Optional[StrictInt] = Field(default=None, description="Output only. Port to which clients can connect to initiate SSH sessions with the environment.", alias="sshPort")
    ssh_username: Optional[StrictStr] = Field(default=None, description="Output only. Username that clients should use when initiating SSH sessions with the environment.", alias="sshUsername")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Current execution state of this environment.")
    web_host: Optional[StrictStr] = Field(default=None, description="Output only. Host to which clients can connect to initiate HTTPS or WSS connections with the environment.", alias="webHost")
    __properties: ClassVar[List[str]] = ["dockerImage", "id", "name", "publicKeys", "sshHost", "sshPort", "sshUsername", "state", "webHost"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'SUSPENDED', 'PENDING', 'RUNNING', 'DELETING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'SUSPENDED', 'PENDING', 'RUNNING', 'DELETING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Environment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "public_keys",
            "ssh_host",
            "ssh_port",
            "ssh_username",
            "state",
            "web_host",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Environment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dockerImage": obj.get("dockerImage"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "publicKeys": obj.get("publicKeys"),
            "sshHost": obj.get("sshHost"),
            "sshPort": obj.get("sshPort"),
            "sshUsername": obj.get("sshUsername"),
            "state": obj.get("state"),
            "webHost": obj.get("webHost")
        })
        return _obj



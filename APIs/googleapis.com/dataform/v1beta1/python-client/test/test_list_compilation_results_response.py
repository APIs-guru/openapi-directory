# coding: utf-8

"""
    Dataform API

    Service to develop, version control, and operationalize SQL pipelines in BigQuery.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_compilation_results_response import ListCompilationResultsResponse

class TestListCompilationResultsResponse(unittest.TestCase):
    """ListCompilationResultsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListCompilationResultsResponse:
        """Test ListCompilationResultsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListCompilationResultsResponse`
        """
        model = ListCompilationResultsResponse()
        if include_optional:
            return ListCompilationResultsResponse(
                compilation_results = [
                    openapi_client.models.compilation_result.CompilationResult(
                        code_compilation_config = openapi_client.models.code_compilation_config.CodeCompilationConfig(
                            assertion_schema = '', 
                            database_suffix = '', 
                            default_database = '', 
                            default_location = '', 
                            default_schema = '', 
                            schema_suffix = '', 
                            table_prefix = '', 
                            vars = {
                                'key' : ''
                                }, ), 
                        compilation_errors = [
                            openapi_client.models.compilation_error.CompilationError(
                                action_target = openapi_client.models.target.Target(
                                    database = '', 
                                    name = '', 
                                    schema = '', ), 
                                message = '', 
                                path = '', 
                                stack = '', )
                            ], 
                        dataform_core_version = '', 
                        git_commitish = '', 
                        name = '', 
                        release_config = '', 
                        resolved_git_commit_sha = '', 
                        workspace = '', )
                    ],
                next_page_token = '',
                unreachable = [
                    ''
                    ]
            )
        else:
            return ListCompilationResultsResponse(
        )
        """

    def testListCompilationResultsResponse(self):
        """Test ListCompilationResultsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

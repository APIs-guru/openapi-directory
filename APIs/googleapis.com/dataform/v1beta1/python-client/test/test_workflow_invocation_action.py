# coding: utf-8

"""
    Dataform API

    Service to develop, version control, and operationalize SQL pipelines in BigQuery.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.workflow_invocation_action import WorkflowInvocationAction

class TestWorkflowInvocationAction(unittest.TestCase):
    """WorkflowInvocationAction unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WorkflowInvocationAction:
        """Test WorkflowInvocationAction
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WorkflowInvocationAction`
        """
        model = WorkflowInvocationAction()
        if include_optional:
            return WorkflowInvocationAction(
                bigquery_action = openapi_client.models.big_query_action.BigQueryAction(
                    sql_script = '', ),
                canonical_target = openapi_client.models.target.Target(
                    database = '', 
                    name = '', 
                    schema = '', ),
                failure_reason = '',
                invocation_timing = openapi_client.models.interval.Interval(
                    end_time = '', 
                    start_time = '', ),
                state = 'PENDING',
                target = openapi_client.models.target.Target(
                    database = '', 
                    name = '', 
                    schema = '', )
            )
        else:
            return WorkflowInvocationAction(
        )
        """

    def testWorkflowInvocationAction(self):
        """Test WorkflowInvocationAction"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

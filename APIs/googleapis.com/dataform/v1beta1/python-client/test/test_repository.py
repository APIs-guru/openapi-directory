# coding: utf-8

"""
    Dataform API

    Service to develop, version control, and operationalize SQL pipelines in BigQuery.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.repository import Repository

class TestRepository(unittest.TestCase):
    """Repository unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Repository:
        """Test Repository
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Repository`
        """
        model = Repository()
        if include_optional:
            return Repository(
                create_time = '',
                display_name = '',
                git_remote_settings = openapi_client.models.git_remote_settings.GitRemoteSettings(
                    authentication_token_secret_version = '', 
                    default_branch = '', 
                    ssh_authentication_config = openapi_client.models.ssh_authentication_config.SshAuthenticationConfig(
                        host_public_key = '', 
                        user_private_key_secret_version = '', ), 
                    token_status = 'TOKEN_STATUS_UNSPECIFIED', 
                    url = '', ),
                labels = {
                    'key' : ''
                    },
                name = '',
                npmrc_environment_variables_secret_version = '',
                service_account = '',
                set_authenticated_user_admin = True,
                workspace_compilation_overrides = openapi_client.models.workspace_compilation_overrides.WorkspaceCompilationOverrides(
                    default_database = '', 
                    schema_suffix = '', 
                    table_prefix = '', )
            )
        else:
            return Repository(
        )
        """

    def testRepository(self):
        """Test Repository"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Dataform API

    Service to develop, version control, and operationalize SQL pipelines in BigQuery.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.commit_repository_changes_request import CommitRepositoryChangesRequest

class TestCommitRepositoryChangesRequest(unittest.TestCase):
    """CommitRepositoryChangesRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CommitRepositoryChangesRequest:
        """Test CommitRepositoryChangesRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CommitRepositoryChangesRequest`
        """
        model = CommitRepositoryChangesRequest()
        if include_optional:
            return CommitRepositoryChangesRequest(
                commit_metadata = openapi_client.models.commit_metadata.CommitMetadata(
                    author = openapi_client.models.commit_author.CommitAuthor(
                        email_address = '', 
                        name = '', ), 
                    commit_message = '', ),
                file_operations = {
                    'key' : openapi_client.models.file_operation.FileOperation(
                        delete_file = openapi_client.models.delete_file.DeleteFile(), 
                        write_file = openapi_client.models.write_file.WriteFile(
                            contents = 'YQ==', ), )
                    },
                required_head_commit_sha = ''
            )
        else:
            return CommitRepositoryChangesRequest(
        )
        """

    def testCommitRepositoryChangesRequest(self):
        """Test CommitRepositoryChangesRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

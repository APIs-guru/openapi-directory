# coding: utf-8

"""
    Dataform API

    Service to develop, version control, and operationalize SQL pipelines in BigQuery.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.compilation_result_action import CompilationResultAction

class TestCompilationResultAction(unittest.TestCase):
    """CompilationResultAction unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CompilationResultAction:
        """Test CompilationResultAction
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CompilationResultAction`
        """
        model = CompilationResultAction()
        if include_optional:
            return CompilationResultAction(
                assertion = openapi_client.models.assertion.Assertion(
                    dependency_targets = [
                        openapi_client.models.target.Target(
                            database = '', 
                            name = '', 
                            schema = '', )
                        ], 
                    disabled = True, 
                    parent_action = openapi_client.models.target.Target(
                        database = '', 
                        name = '', 
                        schema = '', ), 
                    relation_descriptor = openapi_client.models.relation_descriptor.RelationDescriptor(
                        bigquery_labels = {
                            'key' : ''
                            }, 
                        columns = [
                            openapi_client.models.column_descriptor.ColumnDescriptor(
                                bigquery_policy_tags = [
                                    ''
                                    ], 
                                description = '', 
                                path = [
                                    ''
                                    ], )
                            ], 
                        description = '', ), 
                    select_query = '', 
                    tags = [
                        ''
                        ], ),
                canonical_target = openapi_client.models.target.Target(
                    database = '', 
                    name = '', 
                    schema = '', ),
                declaration = openapi_client.models.declaration.Declaration(
                    relation_descriptor = openapi_client.models.relation_descriptor.RelationDescriptor(
                        bigquery_labels = {
                            'key' : ''
                            }, 
                        columns = [
                            openapi_client.models.column_descriptor.ColumnDescriptor(
                                bigquery_policy_tags = [
                                    ''
                                    ], 
                                description = '', 
                                path = [
                                    ''
                                    ], )
                            ], 
                        description = '', ), ),
                file_path = '',
                operations = openapi_client.models.operations.Operations(
                    dependency_targets = [
                        openapi_client.models.target.Target(
                            database = '', 
                            name = '', 
                            schema = '', )
                        ], 
                    disabled = True, 
                    has_output = True, 
                    queries = [
                        ''
                        ], 
                    relation_descriptor = openapi_client.models.relation_descriptor.RelationDescriptor(
                        bigquery_labels = {
                            'key' : ''
                            }, 
                        columns = [
                            openapi_client.models.column_descriptor.ColumnDescriptor(
                                bigquery_policy_tags = [
                                    ''
                                    ], 
                                description = '', 
                                path = [
                                    ''
                                    ], )
                            ], 
                        description = '', ), 
                    tags = [
                        ''
                        ], ),
                relation = openapi_client.models.relation.Relation(
                    additional_options = {
                        'key' : ''
                        }, 
                    cluster_expressions = [
                        ''
                        ], 
                    dependency_targets = [
                        openapi_client.models.target.Target(
                            database = '', 
                            name = '', 
                            schema = '', )
                        ], 
                    disabled = True, 
                    incremental_table_config = openapi_client.models.incremental_table_config.IncrementalTableConfig(
                        incremental_post_operations = [
                            ''
                            ], 
                        incremental_pre_operations = [
                            ''
                            ], 
                        incremental_select_query = '', 
                        refresh_disabled = True, 
                        unique_key_parts = [
                            ''
                            ], 
                        update_partition_filter = '', ), 
                    partition_expiration_days = 56, 
                    partition_expression = '', 
                    post_operations = [
                        ''
                        ], 
                    pre_operations = [
                        ''
                        ], 
                    relation_descriptor = openapi_client.models.relation_descriptor.RelationDescriptor(
                        bigquery_labels = {
                            'key' : ''
                            }, 
                        columns = [
                            openapi_client.models.column_descriptor.ColumnDescriptor(
                                bigquery_policy_tags = [
                                    ''
                                    ], 
                                description = '', 
                                path = [
                                    ''
                                    ], )
                            ], 
                        description = '', ), 
                    relation_type = 'RELATION_TYPE_UNSPECIFIED', 
                    require_partition_filter = True, 
                    select_query = '', 
                    tags = [
                        ''
                        ], ),
                target = openapi_client.models.target.Target(
                    database = '', 
                    name = '', 
                    schema = '', )
            )
        else:
            return CompilationResultAction(
        )
        """

    def testCompilationResultAction(self):
        """Test CompilationResultAction"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

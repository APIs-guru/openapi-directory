# coding: utf-8

"""
    Dataform API

    Service to develop, version control, and operationalize SQL pipelines in BigQuery.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ssh_authentication_config import SshAuthenticationConfig
from typing import Optional, Set
from typing_extensions import Self

class GitRemoteSettings(BaseModel):
    """
    Controls Git remote configuration for a repository.
    """ # noqa: E501
    authentication_token_secret_version: Optional[StrictStr] = Field(default=None, description="Optional. The name of the Secret Manager secret version to use as an authentication token for Git operations. Must be in the format `projects/*/secrets/*/versions/*`.", alias="authenticationTokenSecretVersion")
    default_branch: Optional[StrictStr] = Field(default=None, description="Required. The Git remote's default branch name.", alias="defaultBranch")
    ssh_authentication_config: Optional[SshAuthenticationConfig] = Field(default=None, alias="sshAuthenticationConfig")
    token_status: Optional[StrictStr] = Field(default=None, description="Output only. Deprecated: The field does not contain any token status information. Instead use https://cloud.google.com/dataform/reference/rest/v1beta1/projects.locations.repositories/computeAccessTokenStatus", alias="tokenStatus")
    url: Optional[StrictStr] = Field(default=None, description="Required. The Git remote's URL.")
    __properties: ClassVar[List[str]] = ["authenticationTokenSecretVersion", "defaultBranch", "sshAuthenticationConfig", "tokenStatus", "url"]

    @field_validator('token_status')
    def token_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TOKEN_STATUS_UNSPECIFIED', 'NOT_FOUND', 'INVALID', 'VALID']):
            raise ValueError("must be one of enum values ('TOKEN_STATUS_UNSPECIFIED', 'NOT_FOUND', 'INVALID', 'VALID')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GitRemoteSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "token_status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ssh_authentication_config
        if self.ssh_authentication_config:
            _dict['sshAuthenticationConfig'] = self.ssh_authentication_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GitRemoteSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authenticationTokenSecretVersion": obj.get("authenticationTokenSecretVersion"),
            "defaultBranch": obj.get("defaultBranch"),
            "sshAuthenticationConfig": SshAuthenticationConfig.from_dict(obj["sshAuthenticationConfig"]) if obj.get("sshAuthenticationConfig") is not None else None,
            "tokenStatus": obj.get("tokenStatus"),
            "url": obj.get("url")
        })
        return _obj



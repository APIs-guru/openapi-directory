# coding: utf-8

"""
    Dataform API

    Service to develop, version control, and operationalize SQL pipelines in BigQuery.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.git_remote_settings import GitRemoteSettings
from openapi_client.models.workspace_compilation_overrides import WorkspaceCompilationOverrides
from typing import Optional, Set
from typing_extensions import Self

class Repository(BaseModel):
    """
    Represents a Dataform Git repository.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp of when the repository was created.", alias="createTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Optional. The repository's user-friendly name.", alias="displayName")
    git_remote_settings: Optional[GitRemoteSettings] = Field(default=None, alias="gitRemoteSettings")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Repository user labels.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The repository's name.")
    npmrc_environment_variables_secret_version: Optional[StrictStr] = Field(default=None, description="Optional. The name of the Secret Manager secret version to be used to interpolate variables into the .npmrc file for package installation operations. Must be in the format `projects/*/secrets/*/versions/*`. The file itself must be in a JSON format.", alias="npmrcEnvironmentVariablesSecretVersion")
    service_account: Optional[StrictStr] = Field(default=None, description="Optional. The service account to run workflow invocations under.", alias="serviceAccount")
    set_authenticated_user_admin: Optional[StrictBool] = Field(default=None, description="Optional. Input only. If set to true, the authenticated user will be granted the roles/dataform.admin role on the created repository. To modify access to the created repository later apply setIamPolicy from https://cloud.google.com/dataform/reference/rest#rest-resource:-v1beta1.projects.locations.repositories", alias="setAuthenticatedUserAdmin")
    workspace_compilation_overrides: Optional[WorkspaceCompilationOverrides] = Field(default=None, alias="workspaceCompilationOverrides")
    __properties: ClassVar[List[str]] = ["createTime", "displayName", "gitRemoteSettings", "labels", "name", "npmrcEnvironmentVariablesSecretVersion", "serviceAccount", "setAuthenticatedUserAdmin", "workspaceCompilationOverrides"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Repository from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of git_remote_settings
        if self.git_remote_settings:
            _dict['gitRemoteSettings'] = self.git_remote_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workspace_compilation_overrides
        if self.workspace_compilation_overrides:
            _dict['workspaceCompilationOverrides'] = self.workspace_compilation_overrides.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Repository from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "displayName": obj.get("displayName"),
            "gitRemoteSettings": GitRemoteSettings.from_dict(obj["gitRemoteSettings"]) if obj.get("gitRemoteSettings") is not None else None,
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "npmrcEnvironmentVariablesSecretVersion": obj.get("npmrcEnvironmentVariablesSecretVersion"),
            "serviceAccount": obj.get("serviceAccount"),
            "setAuthenticatedUserAdmin": obj.get("setAuthenticatedUserAdmin"),
            "workspaceCompilationOverrides": WorkspaceCompilationOverrides.from_dict(obj["workspaceCompilationOverrides"]) if obj.get("workspaceCompilationOverrides") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Dataform API

    Service to develop, version control, and operationalize SQL pipelines in BigQuery.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IncrementalTableConfig(BaseModel):
    """
    Contains settings for relations of type `INCREMENTAL_TABLE`.
    """ # noqa: E501
    incremental_post_operations: Optional[List[StrictStr]] = Field(default=None, description="SQL statements to be executed after inserting new rows into the relation.", alias="incrementalPostOperations")
    incremental_pre_operations: Optional[List[StrictStr]] = Field(default=None, description="SQL statements to be executed before inserting new rows into the relation.", alias="incrementalPreOperations")
    incremental_select_query: Optional[StrictStr] = Field(default=None, description="The SELECT query which returns rows which should be inserted into the relation if it already exists and is not being refreshed.", alias="incrementalSelectQuery")
    refresh_disabled: Optional[StrictBool] = Field(default=None, description="Whether this table should be protected from being refreshed.", alias="refreshDisabled")
    unique_key_parts: Optional[List[StrictStr]] = Field(default=None, description="A set of columns or SQL expressions used to define row uniqueness. If any duplicates are discovered (as defined by `unique_key_parts`), only the newly selected rows (as defined by `incremental_select_query`) will be included in the relation.", alias="uniqueKeyParts")
    update_partition_filter: Optional[StrictStr] = Field(default=None, description="A SQL expression conditional used to limit the set of existing rows considered for a merge operation (see `unique_key_parts` for more information).", alias="updatePartitionFilter")
    __properties: ClassVar[List[str]] = ["incrementalPostOperations", "incrementalPreOperations", "incrementalSelectQuery", "refreshDisabled", "uniqueKeyParts", "updatePartitionFilter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IncrementalTableConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IncrementalTableConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "incrementalPostOperations": obj.get("incrementalPostOperations"),
            "incrementalPreOperations": obj.get("incrementalPreOperations"),
            "incrementalSelectQuery": obj.get("incrementalSelectQuery"),
            "refreshDisabled": obj.get("refreshDisabled"),
            "uniqueKeyParts": obj.get("uniqueKeyParts"),
            "updatePartitionFilter": obj.get("updatePartitionFilter")
        })
        return _obj



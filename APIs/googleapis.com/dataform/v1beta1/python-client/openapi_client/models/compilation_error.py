# coding: utf-8

"""
    Dataform API

    Service to develop, version control, and operationalize SQL pipelines in BigQuery.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.target import Target
from typing import Optional, Set
from typing_extensions import Self

class CompilationError(BaseModel):
    """
    An error encountered when attempting to compile a Dataform project.
    """ # noqa: E501
    action_target: Optional[Target] = Field(default=None, alias="actionTarget")
    message: Optional[StrictStr] = Field(default=None, description="Output only. The error's top level message.")
    path: Optional[StrictStr] = Field(default=None, description="Output only. The path of the file where this error occurred, if available, relative to the project root.")
    stack: Optional[StrictStr] = Field(default=None, description="Output only. The error's full stack trace.")
    __properties: ClassVar[List[str]] = ["actionTarget", "message", "path", "stack"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompilationError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "message",
            "path",
            "stack",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of action_target
        if self.action_target:
            _dict['actionTarget'] = self.action_target.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompilationError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionTarget": Target.from_dict(obj["actionTarget"]) if obj.get("actionTarget") is not None else None,
            "message": obj.get("message"),
            "path": obj.get("path"),
            "stack": obj.get("stack")
        })
        return _obj



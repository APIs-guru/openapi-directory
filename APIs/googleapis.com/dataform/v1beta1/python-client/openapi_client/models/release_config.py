# coding: utf-8

"""
    Dataform API

    Service to develop, version control, and operationalize SQL pipelines in BigQuery.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.code_compilation_config import CodeCompilationConfig
from openapi_client.models.scheduled_release_record import ScheduledReleaseRecord
from typing import Optional, Set
from typing_extensions import Self

class ReleaseConfig(BaseModel):
    """
    Represents a Dataform release configuration.
    """ # noqa: E501
    code_compilation_config: Optional[CodeCompilationConfig] = Field(default=None, alias="codeCompilationConfig")
    cron_schedule: Optional[StrictStr] = Field(default=None, description="Optional. Optional schedule (in cron format) for automatic creation of compilation results.", alias="cronSchedule")
    disabled: Optional[StrictBool] = Field(default=None, description="Optional. Disables automatic creation of compilation results.")
    git_commitish: Optional[StrictStr] = Field(default=None, description="Required. Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`", alias="gitCommitish")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The release config's name.")
    recent_scheduled_release_records: Optional[List[ScheduledReleaseRecord]] = Field(default=None, description="Output only. Records of the 10 most recent scheduled release attempts, ordered in in descending order of `release_time`. Updated whenever automatic creation of a compilation result is triggered by cron_schedule.", alias="recentScheduledReleaseRecords")
    release_compilation_result: Optional[StrictStr] = Field(default=None, description="Optional. The name of the currently released compilation result for this release config. This value is updated when a compilation result is automatically created from this release config (using cron_schedule), or when this resource is updated by API call (perhaps to roll back to an earlier release). The compilation result must have been created using this release config. Must be in the format `projects/*/locations/*/repositories/*/compilationResults/*`.", alias="releaseCompilationResult")
    time_zone: Optional[StrictStr] = Field(default=None, description="Optional. Specifies the time zone to be used when interpreting cron_schedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). If left unspecified, the default is UTC.", alias="timeZone")
    __properties: ClassVar[List[str]] = ["codeCompilationConfig", "cronSchedule", "disabled", "gitCommitish", "name", "recentScheduledReleaseRecords", "releaseCompilationResult", "timeZone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReleaseConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "recent_scheduled_release_records",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of code_compilation_config
        if self.code_compilation_config:
            _dict['codeCompilationConfig'] = self.code_compilation_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in recent_scheduled_release_records (list)
        _items = []
        if self.recent_scheduled_release_records:
            for _item_recent_scheduled_release_records in self.recent_scheduled_release_records:
                if _item_recent_scheduled_release_records:
                    _items.append(_item_recent_scheduled_release_records.to_dict())
            _dict['recentScheduledReleaseRecords'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReleaseConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "codeCompilationConfig": CodeCompilationConfig.from_dict(obj["codeCompilationConfig"]) if obj.get("codeCompilationConfig") is not None else None,
            "cronSchedule": obj.get("cronSchedule"),
            "disabled": obj.get("disabled"),
            "gitCommitish": obj.get("gitCommitish"),
            "name": obj.get("name"),
            "recentScheduledReleaseRecords": [ScheduledReleaseRecord.from_dict(_item) for _item in obj["recentScheduledReleaseRecords"]] if obj.get("recentScheduledReleaseRecords") is not None else None,
            "releaseCompilationResult": obj.get("releaseCompilationResult"),
            "timeZone": obj.get("timeZone")
        })
        return _obj



# coding: utf-8

"""
    Dataform API

    Service to develop, version control, and operationalize SQL pipelines in BigQuery.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CodeCompilationConfig(BaseModel):
    """
    Configures various aspects of Dataform code compilation.
    """ # noqa: E501
    assertion_schema: Optional[StrictStr] = Field(default=None, description="Optional. The default schema (BigQuery dataset ID) for assertions.", alias="assertionSchema")
    database_suffix: Optional[StrictStr] = Field(default=None, description="Optional. The suffix that should be appended to all database (Google Cloud project ID) names.", alias="databaseSuffix")
    default_database: Optional[StrictStr] = Field(default=None, description="Optional. The default database (Google Cloud project ID).", alias="defaultDatabase")
    default_location: Optional[StrictStr] = Field(default=None, description="Optional. The default BigQuery location to use. Defaults to \"US\". See the BigQuery docs for a full list of locations: https://cloud.google.com/bigquery/docs/locations.", alias="defaultLocation")
    default_schema: Optional[StrictStr] = Field(default=None, description="Optional. The default schema (BigQuery dataset ID).", alias="defaultSchema")
    schema_suffix: Optional[StrictStr] = Field(default=None, description="Optional. The suffix that should be appended to all schema (BigQuery dataset ID) names.", alias="schemaSuffix")
    table_prefix: Optional[StrictStr] = Field(default=None, description="Optional. The prefix that should be prepended to all table names.", alias="tablePrefix")
    vars: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. User-defined variables that are made available to project code during compilation.")
    __properties: ClassVar[List[str]] = ["assertionSchema", "databaseSuffix", "defaultDatabase", "defaultLocation", "defaultSchema", "schemaSuffix", "tablePrefix", "vars"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CodeCompilationConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CodeCompilationConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assertionSchema": obj.get("assertionSchema"),
            "databaseSuffix": obj.get("databaseSuffix"),
            "defaultDatabase": obj.get("defaultDatabase"),
            "defaultLocation": obj.get("defaultLocation"),
            "defaultSchema": obj.get("defaultSchema"),
            "schemaSuffix": obj.get("schemaSuffix"),
            "tablePrefix": obj.get("tablePrefix"),
            "vars": obj.get("vars")
        })
        return _obj



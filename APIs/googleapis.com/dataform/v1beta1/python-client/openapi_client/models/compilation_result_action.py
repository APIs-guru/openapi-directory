# coding: utf-8

"""
    Dataform API

    Service to develop, version control, and operationalize SQL pipelines in BigQuery.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.assertion import Assertion
from openapi_client.models.declaration import Declaration
from openapi_client.models.operations import Operations
from openapi_client.models.relation import Relation
from openapi_client.models.target import Target
from typing import Optional, Set
from typing_extensions import Self

class CompilationResultAction(BaseModel):
    """
    Represents a single Dataform action in a compilation result.
    """ # noqa: E501
    assertion: Optional[Assertion] = None
    canonical_target: Optional[Target] = Field(default=None, alias="canonicalTarget")
    declaration: Optional[Declaration] = None
    file_path: Optional[StrictStr] = Field(default=None, description="The full path including filename in which this action is located, relative to the workspace root.", alias="filePath")
    operations: Optional[Operations] = None
    relation: Optional[Relation] = None
    target: Optional[Target] = None
    __properties: ClassVar[List[str]] = ["assertion", "canonicalTarget", "declaration", "filePath", "operations", "relation", "target"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompilationResultAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of assertion
        if self.assertion:
            _dict['assertion'] = self.assertion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of canonical_target
        if self.canonical_target:
            _dict['canonicalTarget'] = self.canonical_target.to_dict()
        # override the default output from pydantic by calling `to_dict()` of declaration
        if self.declaration:
            _dict['declaration'] = self.declaration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operations
        if self.operations:
            _dict['operations'] = self.operations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of relation
        if self.relation:
            _dict['relation'] = self.relation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target
        if self.target:
            _dict['target'] = self.target.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompilationResultAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assertion": Assertion.from_dict(obj["assertion"]) if obj.get("assertion") is not None else None,
            "canonicalTarget": Target.from_dict(obj["canonicalTarget"]) if obj.get("canonicalTarget") is not None else None,
            "declaration": Declaration.from_dict(obj["declaration"]) if obj.get("declaration") is not None else None,
            "filePath": obj.get("filePath"),
            "operations": Operations.from_dict(obj["operations"]) if obj.get("operations") is not None else None,
            "relation": Relation.from_dict(obj["relation"]) if obj.get("relation") is not None else None,
            "target": Target.from_dict(obj["target"]) if obj.get("target") is not None else None
        })
        return _obj



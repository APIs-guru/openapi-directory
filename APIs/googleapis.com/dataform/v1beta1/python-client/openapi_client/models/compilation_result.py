# coding: utf-8

"""
    Dataform API

    Service to develop, version control, and operationalize SQL pipelines in BigQuery.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.code_compilation_config import CodeCompilationConfig
from openapi_client.models.compilation_error import CompilationError
from typing import Optional, Set
from typing_extensions import Self

class CompilationResult(BaseModel):
    """
    Represents the result of compiling a Dataform project.
    """ # noqa: E501
    code_compilation_config: Optional[CodeCompilationConfig] = Field(default=None, alias="codeCompilationConfig")
    compilation_errors: Optional[List[CompilationError]] = Field(default=None, description="Output only. Errors encountered during project compilation.", alias="compilationErrors")
    dataform_core_version: Optional[StrictStr] = Field(default=None, description="Output only. The version of `@dataform/core` that was used for compilation.", alias="dataformCoreVersion")
    git_commitish: Optional[StrictStr] = Field(default=None, description="Immutable. Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`", alias="gitCommitish")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The compilation result's name.")
    release_config: Optional[StrictStr] = Field(default=None, description="Immutable. The name of the release config to compile. Must be in the format `projects/*/locations/*/repositories/*/releaseConfigs/*`.", alias="releaseConfig")
    resolved_git_commit_sha: Optional[StrictStr] = Field(default=None, description="Output only. The fully resolved Git commit SHA of the code that was compiled. Not set for compilation results whose source is a workspace.", alias="resolvedGitCommitSha")
    workspace: Optional[StrictStr] = Field(default=None, description="Immutable. The name of the workspace to compile. Must be in the format `projects/*/locations/*/repositories/*/workspaces/*`.")
    __properties: ClassVar[List[str]] = ["codeCompilationConfig", "compilationErrors", "dataformCoreVersion", "gitCommitish", "name", "releaseConfig", "resolvedGitCommitSha", "workspace"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompilationResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "compilation_errors",
            "dataform_core_version",
            "name",
            "resolved_git_commit_sha",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of code_compilation_config
        if self.code_compilation_config:
            _dict['codeCompilationConfig'] = self.code_compilation_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in compilation_errors (list)
        _items = []
        if self.compilation_errors:
            for _item_compilation_errors in self.compilation_errors:
                if _item_compilation_errors:
                    _items.append(_item_compilation_errors.to_dict())
            _dict['compilationErrors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompilationResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "codeCompilationConfig": CodeCompilationConfig.from_dict(obj["codeCompilationConfig"]) if obj.get("codeCompilationConfig") is not None else None,
            "compilationErrors": [CompilationError.from_dict(_item) for _item in obj["compilationErrors"]] if obj.get("compilationErrors") is not None else None,
            "dataformCoreVersion": obj.get("dataformCoreVersion"),
            "gitCommitish": obj.get("gitCommitish"),
            "name": obj.get("name"),
            "releaseConfig": obj.get("releaseConfig"),
            "resolvedGitCommitSha": obj.get("resolvedGitCommitSha"),
            "workspace": obj.get("workspace")
        })
        return _obj



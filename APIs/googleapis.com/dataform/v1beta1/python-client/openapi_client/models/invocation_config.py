# coding: utf-8

"""
    Dataform API

    Service to develop, version control, and operationalize SQL pipelines in BigQuery.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.target import Target
from typing import Optional, Set
from typing_extensions import Self

class InvocationConfig(BaseModel):
    """
    Includes various configuration options for a workflow invocation. If both `included_targets` and `included_tags` are unset, all actions will be included.
    """ # noqa: E501
    fully_refresh_incremental_tables_enabled: Optional[StrictBool] = Field(default=None, description="Optional. When set to true, any incremental tables will be fully refreshed.", alias="fullyRefreshIncrementalTablesEnabled")
    included_tags: Optional[List[StrictStr]] = Field(default=None, description="Optional. The set of tags to include.", alias="includedTags")
    included_targets: Optional[List[Target]] = Field(default=None, description="Optional. The set of action identifiers to include.", alias="includedTargets")
    service_account: Optional[StrictStr] = Field(default=None, description="Optional. The service account to run workflow invocations under.", alias="serviceAccount")
    transitive_dependencies_included: Optional[StrictBool] = Field(default=None, description="Optional. When set to true, transitive dependencies of included actions will be executed.", alias="transitiveDependenciesIncluded")
    transitive_dependents_included: Optional[StrictBool] = Field(default=None, description="Optional. When set to true, transitive dependents of included actions will be executed.", alias="transitiveDependentsIncluded")
    __properties: ClassVar[List[str]] = ["fullyRefreshIncrementalTablesEnabled", "includedTags", "includedTargets", "serviceAccount", "transitiveDependenciesIncluded", "transitiveDependentsIncluded"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvocationConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in included_targets (list)
        _items = []
        if self.included_targets:
            for _item_included_targets in self.included_targets:
                if _item_included_targets:
                    _items.append(_item_included_targets.to_dict())
            _dict['includedTargets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvocationConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fullyRefreshIncrementalTablesEnabled": obj.get("fullyRefreshIncrementalTablesEnabled"),
            "includedTags": obj.get("includedTags"),
            "includedTargets": [Target.from_dict(_item) for _item in obj["includedTargets"]] if obj.get("includedTargets") is not None else None,
            "serviceAccount": obj.get("serviceAccount"),
            "transitiveDependenciesIncluded": obj.get("transitiveDependenciesIncluded"),
            "transitiveDependentsIncluded": obj.get("transitiveDependentsIncluded")
        })
        return _obj



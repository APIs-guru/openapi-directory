# coding: utf-8

"""
    Dataform API

    Service to develop, version control, and operationalize SQL pipelines in BigQuery.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.incremental_table_config import IncrementalTableConfig
from openapi_client.models.relation_descriptor import RelationDescriptor
from openapi_client.models.target import Target
from typing import Optional, Set
from typing_extensions import Self

class Relation(BaseModel):
    """
    Represents a database relation.
    """ # noqa: E501
    additional_options: Optional[Dict[str, StrictStr]] = Field(default=None, description="Additional options that will be provided as key/value pairs into the options clause of a create table/view statement. See https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language for more information on which options are supported.", alias="additionalOptions")
    cluster_expressions: Optional[List[StrictStr]] = Field(default=None, description="A list of columns or SQL expressions used to cluster the table.", alias="clusterExpressions")
    dependency_targets: Optional[List[Target]] = Field(default=None, description="A list of actions that this action depends on.", alias="dependencyTargets")
    disabled: Optional[StrictBool] = Field(default=None, description="Whether this action is disabled (i.e. should not be run).")
    incremental_table_config: Optional[IncrementalTableConfig] = Field(default=None, alias="incrementalTableConfig")
    partition_expiration_days: Optional[StrictInt] = Field(default=None, description="Sets the partition expiration in days.", alias="partitionExpirationDays")
    partition_expression: Optional[StrictStr] = Field(default=None, description="The SQL expression used to partition the relation.", alias="partitionExpression")
    post_operations: Optional[List[StrictStr]] = Field(default=None, description="SQL statements to be executed after creating the relation.", alias="postOperations")
    pre_operations: Optional[List[StrictStr]] = Field(default=None, description="SQL statements to be executed before creating the relation.", alias="preOperations")
    relation_descriptor: Optional[RelationDescriptor] = Field(default=None, alias="relationDescriptor")
    relation_type: Optional[StrictStr] = Field(default=None, description="The type of this relation.", alias="relationType")
    require_partition_filter: Optional[StrictBool] = Field(default=None, description="Specifies whether queries on this table must include a predicate filter that filters on the partitioning column.", alias="requirePartitionFilter")
    select_query: Optional[StrictStr] = Field(default=None, description="The SELECT query which returns rows which this relation should contain.", alias="selectQuery")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Arbitrary, user-defined tags on this action.")
    __properties: ClassVar[List[str]] = ["additionalOptions", "clusterExpressions", "dependencyTargets", "disabled", "incrementalTableConfig", "partitionExpirationDays", "partitionExpression", "postOperations", "preOperations", "relationDescriptor", "relationType", "requirePartitionFilter", "selectQuery", "tags"]

    @field_validator('relation_type')
    def relation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RELATION_TYPE_UNSPECIFIED', 'TABLE', 'VIEW', 'INCREMENTAL_TABLE', 'MATERIALIZED_VIEW']):
            raise ValueError("must be one of enum values ('RELATION_TYPE_UNSPECIFIED', 'TABLE', 'VIEW', 'INCREMENTAL_TABLE', 'MATERIALIZED_VIEW')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Relation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dependency_targets (list)
        _items = []
        if self.dependency_targets:
            for _item_dependency_targets in self.dependency_targets:
                if _item_dependency_targets:
                    _items.append(_item_dependency_targets.to_dict())
            _dict['dependencyTargets'] = _items
        # override the default output from pydantic by calling `to_dict()` of incremental_table_config
        if self.incremental_table_config:
            _dict['incrementalTableConfig'] = self.incremental_table_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of relation_descriptor
        if self.relation_descriptor:
            _dict['relationDescriptor'] = self.relation_descriptor.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Relation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalOptions": obj.get("additionalOptions"),
            "clusterExpressions": obj.get("clusterExpressions"),
            "dependencyTargets": [Target.from_dict(_item) for _item in obj["dependencyTargets"]] if obj.get("dependencyTargets") is not None else None,
            "disabled": obj.get("disabled"),
            "incrementalTableConfig": IncrementalTableConfig.from_dict(obj["incrementalTableConfig"]) if obj.get("incrementalTableConfig") is not None else None,
            "partitionExpirationDays": obj.get("partitionExpirationDays"),
            "partitionExpression": obj.get("partitionExpression"),
            "postOperations": obj.get("postOperations"),
            "preOperations": obj.get("preOperations"),
            "relationDescriptor": RelationDescriptor.from_dict(obj["relationDescriptor"]) if obj.get("relationDescriptor") is not None else None,
            "relationType": obj.get("relationType"),
            "requirePartitionFilter": obj.get("requirePartitionFilter"),
            "selectQuery": obj.get("selectQuery"),
            "tags": obj.get("tags")
        })
        return _obj



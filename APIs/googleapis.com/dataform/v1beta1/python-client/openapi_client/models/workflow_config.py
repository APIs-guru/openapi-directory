# coding: utf-8

"""
    Dataform API

    Service to develop, version control, and operationalize SQL pipelines in BigQuery.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.invocation_config import InvocationConfig
from openapi_client.models.scheduled_execution_record import ScheduledExecutionRecord
from typing import Optional, Set
from typing_extensions import Self

class WorkflowConfig(BaseModel):
    """
    Represents a Dataform workflow configuration.
    """ # noqa: E501
    cron_schedule: Optional[StrictStr] = Field(default=None, description="Optional. Optional schedule (in cron format) for automatic execution of this workflow config.", alias="cronSchedule")
    invocation_config: Optional[InvocationConfig] = Field(default=None, alias="invocationConfig")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The workflow config's name.")
    recent_scheduled_execution_records: Optional[List[ScheduledExecutionRecord]] = Field(default=None, description="Output only. Records of the 10 most recent scheduled execution attempts, ordered in in descending order of `execution_time`. Updated whenever automatic creation of a workflow invocation is triggered by cron_schedule.", alias="recentScheduledExecutionRecords")
    release_config: Optional[StrictStr] = Field(default=None, description="Required. The name of the release config whose release_compilation_result should be executed. Must be in the format `projects/*/locations/*/repositories/*/releaseConfigs/*`.", alias="releaseConfig")
    time_zone: Optional[StrictStr] = Field(default=None, description="Optional. Specifies the time zone to be used when interpreting cron_schedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). If left unspecified, the default is UTC.", alias="timeZone")
    __properties: ClassVar[List[str]] = ["cronSchedule", "invocationConfig", "name", "recentScheduledExecutionRecords", "releaseConfig", "timeZone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "recent_scheduled_execution_records",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of invocation_config
        if self.invocation_config:
            _dict['invocationConfig'] = self.invocation_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in recent_scheduled_execution_records (list)
        _items = []
        if self.recent_scheduled_execution_records:
            for _item_recent_scheduled_execution_records in self.recent_scheduled_execution_records:
                if _item_recent_scheduled_execution_records:
                    _items.append(_item_recent_scheduled_execution_records.to_dict())
            _dict['recentScheduledExecutionRecords'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cronSchedule": obj.get("cronSchedule"),
            "invocationConfig": InvocationConfig.from_dict(obj["invocationConfig"]) if obj.get("invocationConfig") is not None else None,
            "name": obj.get("name"),
            "recentScheduledExecutionRecords": [ScheduledExecutionRecord.from_dict(_item) for _item in obj["recentScheduledExecutionRecords"]] if obj.get("recentScheduledExecutionRecords") is not None else None,
            "releaseConfig": obj.get("releaseConfig"),
            "timeZone": obj.get("timeZone")
        })
        return _obj



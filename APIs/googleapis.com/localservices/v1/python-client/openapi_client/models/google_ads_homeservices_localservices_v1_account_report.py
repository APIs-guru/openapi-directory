# coding: utf-8

"""
    Local Services API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_ads_homeservices_localservices_v1_aggregator_info import GoogleAdsHomeservicesLocalservicesV1AggregatorInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsHomeservicesLocalservicesV1AccountReport(BaseModel):
    """
    An Account Report of a GLS account identified by their account id containing aggregate data gathered from a particular date range. Next ID: 18
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the GLS account.", alias="accountId")
    aggregator_info: Optional[GoogleAdsHomeservicesLocalservicesV1AggregatorInfo] = Field(default=None, alias="aggregatorInfo")
    average_five_star_rating: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average review rating score from 1-5 stars.", alias="averageFiveStarRating")
    average_weekly_budget: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average weekly budget in the currency code of the account.", alias="averageWeeklyBudget")
    business_name: Optional[StrictStr] = Field(default=None, description="Business name of the account.", alias="businessName")
    currency_code: Optional[StrictStr] = Field(default=None, description="Currency code of the account.", alias="currencyCode")
    current_period_charged_leads: Optional[StrictStr] = Field(default=None, description="Number of charged leads the account received in current specified period.", alias="currentPeriodChargedLeads")
    current_period_connected_phone_calls: Optional[StrictStr] = Field(default=None, description="Number of connected phone calls (duration over 30s) in current specified period.", alias="currentPeriodConnectedPhoneCalls")
    current_period_phone_calls: Optional[StrictStr] = Field(default=None, description="Number of phone calls in current specified period, including both connected and unconnected calls.", alias="currentPeriodPhoneCalls")
    current_period_total_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total cost of the account in current specified period in the account's specified currency.", alias="currentPeriodTotalCost")
    impressions_last_two_days: Optional[StrictStr] = Field(default=None, description="Number of impressions that customers have had in the past 2 days.", alias="impressionsLastTwoDays")
    phone_lead_responsiveness: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Phone lead responsiveness of the account for the past 90 days from current date. This is computed by taking the total number of connected calls from charged phone leads and dividing by the total number of calls received.", alias="phoneLeadResponsiveness")
    previous_period_charged_leads: Optional[StrictStr] = Field(default=None, description="Number of charged leads the account received in previous specified period.", alias="previousPeriodChargedLeads")
    previous_period_connected_phone_calls: Optional[StrictStr] = Field(default=None, description="Number of connected phone calls (duration over 30s) in previous specified period.", alias="previousPeriodConnectedPhoneCalls")
    previous_period_phone_calls: Optional[StrictStr] = Field(default=None, description="Number of phone calls in previous specified period, including both connected and unconnected calls.", alias="previousPeriodPhoneCalls")
    previous_period_total_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total cost of the account in previous specified period in the account's specified currency.", alias="previousPeriodTotalCost")
    total_review: Optional[StrictInt] = Field(default=None, description="Total number of reviews the account has up to current date.", alias="totalReview")
    __properties: ClassVar[List[str]] = ["accountId", "aggregatorInfo", "averageFiveStarRating", "averageWeeklyBudget", "businessName", "currencyCode", "currentPeriodChargedLeads", "currentPeriodConnectedPhoneCalls", "currentPeriodPhoneCalls", "currentPeriodTotalCost", "impressionsLastTwoDays", "phoneLeadResponsiveness", "previousPeriodChargedLeads", "previousPeriodConnectedPhoneCalls", "previousPeriodPhoneCalls", "previousPeriodTotalCost", "totalReview"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsHomeservicesLocalservicesV1AccountReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aggregator_info
        if self.aggregator_info:
            _dict['aggregatorInfo'] = self.aggregator_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsHomeservicesLocalservicesV1AccountReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "aggregatorInfo": GoogleAdsHomeservicesLocalservicesV1AggregatorInfo.from_dict(obj["aggregatorInfo"]) if obj.get("aggregatorInfo") is not None else None,
            "averageFiveStarRating": obj.get("averageFiveStarRating"),
            "averageWeeklyBudget": obj.get("averageWeeklyBudget"),
            "businessName": obj.get("businessName"),
            "currencyCode": obj.get("currencyCode"),
            "currentPeriodChargedLeads": obj.get("currentPeriodChargedLeads"),
            "currentPeriodConnectedPhoneCalls": obj.get("currentPeriodConnectedPhoneCalls"),
            "currentPeriodPhoneCalls": obj.get("currentPeriodPhoneCalls"),
            "currentPeriodTotalCost": obj.get("currentPeriodTotalCost"),
            "impressionsLastTwoDays": obj.get("impressionsLastTwoDays"),
            "phoneLeadResponsiveness": obj.get("phoneLeadResponsiveness"),
            "previousPeriodChargedLeads": obj.get("previousPeriodChargedLeads"),
            "previousPeriodConnectedPhoneCalls": obj.get("previousPeriodConnectedPhoneCalls"),
            "previousPeriodPhoneCalls": obj.get("previousPeriodPhoneCalls"),
            "previousPeriodTotalCost": obj.get("previousPeriodTotalCost"),
            "totalReview": obj.get("totalReview")
        })
        return _obj



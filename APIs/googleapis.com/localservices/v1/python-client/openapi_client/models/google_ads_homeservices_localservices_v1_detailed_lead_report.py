# coding: utf-8

"""
    Local Services API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_ads_homeservices_localservices_v1_aggregator_info import GoogleAdsHomeservicesLocalservicesV1AggregatorInfo
from openapi_client.models.google_ads_homeservices_localservices_v1_booking_lead import GoogleAdsHomeservicesLocalservicesV1BookingLead
from openapi_client.models.google_ads_homeservices_localservices_v1_message_lead import GoogleAdsHomeservicesLocalservicesV1MessageLead
from openapi_client.models.google_ads_homeservices_localservices_v1_phone_lead import GoogleAdsHomeservicesLocalservicesV1PhoneLead
from openapi_client.models.google_type_time_zone import GoogleTypeTimeZone
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsHomeservicesLocalservicesV1DetailedLeadReport(BaseModel):
    """
    A Detailed Lead Report of a lead identified by their lead id and contains consumer, account, monetization, and lead data.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Identifies account that received the lead.", alias="accountId")
    aggregator_info: Optional[GoogleAdsHomeservicesLocalservicesV1AggregatorInfo] = Field(default=None, alias="aggregatorInfo")
    booking_lead: Optional[GoogleAdsHomeservicesLocalservicesV1BookingLead] = Field(default=None, alias="bookingLead")
    business_name: Optional[StrictStr] = Field(default=None, description="Business name associated to the account.", alias="businessName")
    charge_status: Optional[StrictStr] = Field(default=None, description="Whether the lead has been charged.", alias="chargeStatus")
    currency_code: Optional[StrictStr] = Field(default=None, description="Currency code.", alias="currencyCode")
    dispute_status: Optional[StrictStr] = Field(default=None, description="Dispute status related to the lead.", alias="disputeStatus")
    geo: Optional[StrictStr] = Field(default=None, description="Location of the associated account's home city.")
    google_ads_lead_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of a Detailed Lead Report.", alias="googleAdsLeadId")
    lead_category: Optional[StrictStr] = Field(default=None, description="Lead category (e.g. hvac, plumber)", alias="leadCategory")
    lead_creation_timestamp: Optional[StrictStr] = Field(default=None, description="Timestamp of when the lead was created.", alias="leadCreationTimestamp")
    lead_id: Optional[StrictStr] = Field(default=None, description="Deprecated in favor of google_ads_lead_id. Unique identifier of a Detailed Lead Report.", alias="leadId")
    lead_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Price of the lead (available only after it has been charged).", alias="leadPrice")
    lead_type: Optional[StrictStr] = Field(default=None, description="Lead type.", alias="leadType")
    message_lead: Optional[GoogleAdsHomeservicesLocalservicesV1MessageLead] = Field(default=None, alias="messageLead")
    phone_lead: Optional[GoogleAdsHomeservicesLocalservicesV1PhoneLead] = Field(default=None, alias="phoneLead")
    timezone: Optional[GoogleTypeTimeZone] = None
    __properties: ClassVar[List[str]] = ["accountId", "aggregatorInfo", "bookingLead", "businessName", "chargeStatus", "currencyCode", "disputeStatus", "geo", "googleAdsLeadId", "leadCategory", "leadCreationTimestamp", "leadId", "leadPrice", "leadType", "messageLead", "phoneLead", "timezone"]

    @field_validator('charge_status')
    def charge_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHARGE_STATUS_UNSPECIFIED', 'CHARGED', 'NOT_CHARGED']):
            raise ValueError("must be one of enum values ('CHARGE_STATUS_UNSPECIFIED', 'CHARGED', 'NOT_CHARGED')")
        return value

    @field_validator('lead_type')
    def lead_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LEAD_TYPE_UNSPECIFIED', 'MESSAGE', 'PHONE_CALL', 'BOOKING']):
            raise ValueError("must be one of enum values ('LEAD_TYPE_UNSPECIFIED', 'MESSAGE', 'PHONE_CALL', 'BOOKING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsHomeservicesLocalservicesV1DetailedLeadReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aggregator_info
        if self.aggregator_info:
            _dict['aggregatorInfo'] = self.aggregator_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of booking_lead
        if self.booking_lead:
            _dict['bookingLead'] = self.booking_lead.to_dict()
        # override the default output from pydantic by calling `to_dict()` of message_lead
        if self.message_lead:
            _dict['messageLead'] = self.message_lead.to_dict()
        # override the default output from pydantic by calling `to_dict()` of phone_lead
        if self.phone_lead:
            _dict['phoneLead'] = self.phone_lead.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timezone
        if self.timezone:
            _dict['timezone'] = self.timezone.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsHomeservicesLocalservicesV1DetailedLeadReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "aggregatorInfo": GoogleAdsHomeservicesLocalservicesV1AggregatorInfo.from_dict(obj["aggregatorInfo"]) if obj.get("aggregatorInfo") is not None else None,
            "bookingLead": GoogleAdsHomeservicesLocalservicesV1BookingLead.from_dict(obj["bookingLead"]) if obj.get("bookingLead") is not None else None,
            "businessName": obj.get("businessName"),
            "chargeStatus": obj.get("chargeStatus"),
            "currencyCode": obj.get("currencyCode"),
            "disputeStatus": obj.get("disputeStatus"),
            "geo": obj.get("geo"),
            "googleAdsLeadId": obj.get("googleAdsLeadId"),
            "leadCategory": obj.get("leadCategory"),
            "leadCreationTimestamp": obj.get("leadCreationTimestamp"),
            "leadId": obj.get("leadId"),
            "leadPrice": obj.get("leadPrice"),
            "leadType": obj.get("leadType"),
            "messageLead": GoogleAdsHomeservicesLocalservicesV1MessageLead.from_dict(obj["messageLead"]) if obj.get("messageLead") is not None else None,
            "phoneLead": GoogleAdsHomeservicesLocalservicesV1PhoneLead.from_dict(obj["phoneLead"]) if obj.get("phoneLead") is not None else None,
            "timezone": GoogleTypeTimeZone.from_dict(obj["timezone"]) if obj.get("timezone") is not None else None
        })
        return _obj



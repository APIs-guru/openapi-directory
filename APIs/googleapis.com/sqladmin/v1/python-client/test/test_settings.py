# coding: utf-8

"""
    Cloud SQL Admin API

    API for Cloud SQL database instance management

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.settings import Settings

class TestSettings(unittest.TestCase):
    """Settings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Settings:
        """Test Settings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Settings`
        """
        model = Settings()
        if include_optional:
            return Settings(
                activation_policy = 'SQL_ACTIVATION_POLICY_UNSPECIFIED',
                active_directory_config = openapi_client.models.sql_active_directory_config.SqlActiveDirectoryConfig(
                    domain = '', 
                    kind = '', ),
                advanced_machine_features = openapi_client.models.advanced_machine_features.AdvancedMachineFeatures(
                    threads_per_core = 56, ),
                authorized_gae_applications = [
                    ''
                    ],
                availability_type = 'SQL_AVAILABILITY_TYPE_UNSPECIFIED',
                backup_configuration = openapi_client.models.backup_configuration.BackupConfiguration(
                    backup_retention_settings = openapi_client.models.backup_retention_settings.BackupRetentionSettings(
                        retained_backups = 56, 
                        retention_unit = 'RETENTION_UNIT_UNSPECIFIED', ), 
                    binary_log_enabled = True, 
                    enabled = True, 
                    kind = '', 
                    location = '', 
                    point_in_time_recovery_enabled = True, 
                    replication_log_archiving_enabled = True, 
                    start_time = '', 
                    transaction_log_retention_days = 56, ),
                collation = '',
                connector_enforcement = 'CONNECTOR_ENFORCEMENT_UNSPECIFIED',
                crash_safe_replication_enabled = True,
                data_cache_config = openapi_client.models.data_cache_config.DataCacheConfig(
                    data_cache_enabled = True, ),
                data_disk_size_gb = '',
                data_disk_type = 'SQL_DATA_DISK_TYPE_UNSPECIFIED',
                database_flags = [
                    openapi_client.models.database_flags.DatabaseFlags(
                        name = '', 
                        value = '', )
                    ],
                database_replication_enabled = True,
                deletion_protection_enabled = True,
                deny_maintenance_periods = [
                    openapi_client.models.deny_maintenance_period.DenyMaintenancePeriod(
                        end_date = '', 
                        start_date = '', 
                        time = '', )
                    ],
                edition = 'EDITION_UNSPECIFIED',
                insights_config = openapi_client.models.insights_config.InsightsConfig(
                    query_insights_enabled = True, 
                    query_plans_per_minute = 56, 
                    query_string_length = 56, 
                    record_application_tags = True, 
                    record_client_address = True, ),
                ip_configuration = openapi_client.models.ip_configuration.IpConfiguration(
                    allocated_ip_range = '', 
                    authorized_networks = [
                        openapi_client.models.acl_entry.AclEntry(
                            expiration_time = '', 
                            kind = '', 
                            name = '', 
                            value = '', )
                        ], 
                    enable_private_path_for_google_cloud_services = True, 
                    ipv4_enabled = True, 
                    private_network = '', 
                    psc_config = openapi_client.models.psc_config.PscConfig(
                        allowed_consumer_projects = [
                            ''
                            ], 
                        psc_enabled = True, ), 
                    require_ssl = True, 
                    ssl_mode = 'SSL_MODE_UNSPECIFIED', ),
                kind = '',
                location_preference = openapi_client.models.location_preference.LocationPreference(
                    follow_gae_application = '', 
                    kind = '', 
                    secondary_zone = '', 
                    zone = '', ),
                maintenance_window = openapi_client.models.maintenance_window.MaintenanceWindow(
                    day = 56, 
                    hour = 56, 
                    kind = '', 
                    update_track = 'SQL_UPDATE_TRACK_UNSPECIFIED', ),
                password_validation_policy = openapi_client.models.password_validation_policy.PasswordValidationPolicy(
                    complexity = 'COMPLEXITY_UNSPECIFIED', 
                    disallow_compromised_credentials = True, 
                    disallow_username_substring = True, 
                    enable_password_policy = True, 
                    min_length = 56, 
                    password_change_interval = '', 
                    reuse_interval = 56, ),
                pricing_plan = 'SQL_PRICING_PLAN_UNSPECIFIED',
                replication_type = 'SQL_REPLICATION_TYPE_UNSPECIFIED',
                settings_version = '',
                sql_server_audit_config = openapi_client.models.sql_server_audit_config.SqlServerAuditConfig(
                    bucket = '', 
                    kind = '', 
                    retention_interval = '', 
                    upload_interval = '', ),
                storage_auto_resize = True,
                storage_auto_resize_limit = '',
                tier = '',
                time_zone = '',
                user_labels = {
                    'key' : ''
                    }
            )
        else:
            return Settings(
        )
        """

    def testSettings(self):
        """Test Settings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

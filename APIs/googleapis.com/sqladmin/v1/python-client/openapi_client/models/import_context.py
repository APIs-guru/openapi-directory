# coding: utf-8

"""
    Cloud SQL Admin API

    API for Cloud SQL database instance management

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.import_context_bak_import_options import ImportContextBakImportOptions
from openapi_client.models.import_context_csv_import_options import ImportContextCsvImportOptions
from typing import Optional, Set
from typing_extensions import Self

class ImportContext(BaseModel):
    """
    Database instance import context.
    """ # noqa: E501
    bak_import_options: Optional[ImportContextBakImportOptions] = Field(default=None, alias="bakImportOptions")
    csv_import_options: Optional[ImportContextCsvImportOptions] = Field(default=None, alias="csvImportOptions")
    database: Optional[StrictStr] = Field(default=None, description="The target database for the import. If `fileType` is `SQL`, this field is required only if the import file does not specify a database, and is overridden by any database specification in the import file. If `fileType` is `CSV`, one database must be specified.")
    file_type: Optional[StrictStr] = Field(default=None, description="The file type for the specified uri.\\`SQL`: The file contains SQL statements. \\`CSV`: The file contains CSV data.", alias="fileType")
    import_user: Optional[StrictStr] = Field(default=None, description="The PostgreSQL user for this import operation. PostgreSQL instances only.", alias="importUser")
    kind: Optional[StrictStr] = Field(default=None, description="This is always `sql#importContext`.")
    uri: Optional[StrictStr] = Field(default=None, description="Path to the import file in Cloud Storage, in the form `gs://bucketName/fileName`. Compressed gzip files (.gz) are supported when `fileType` is `SQL`. The instance must have write permissions to the bucket and read access to the file.")
    __properties: ClassVar[List[str]] = ["bakImportOptions", "csvImportOptions", "database", "fileType", "importUser", "kind", "uri"]

    @field_validator('file_type')
    def file_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SQL_FILE_TYPE_UNSPECIFIED', 'SQL', 'CSV', 'BAK']):
            raise ValueError("must be one of enum values ('SQL_FILE_TYPE_UNSPECIFIED', 'SQL', 'CSV', 'BAK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImportContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bak_import_options
        if self.bak_import_options:
            _dict['bakImportOptions'] = self.bak_import_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of csv_import_options
        if self.csv_import_options:
            _dict['csvImportOptions'] = self.csv_import_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImportContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bakImportOptions": ImportContextBakImportOptions.from_dict(obj["bakImportOptions"]) if obj.get("bakImportOptions") is not None else None,
            "csvImportOptions": ImportContextCsvImportOptions.from_dict(obj["csvImportOptions"]) if obj.get("csvImportOptions") is not None else None,
            "database": obj.get("database"),
            "fileType": obj.get("fileType"),
            "importUser": obj.get("importUser"),
            "kind": obj.get("kind"),
            "uri": obj.get("uri")
        })
        return _obj



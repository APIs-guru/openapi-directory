# coding: utf-8

"""
    Cloud SQL Admin API

    API for Cloud SQL database instance management

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.api_warning import ApiWarning
from openapi_client.models.backup_context import BackupContext
from openapi_client.models.export_context import ExportContext
from openapi_client.models.import_context import ImportContext
from openapi_client.models.operation_errors import OperationErrors
from typing import Optional, Set
from typing_extensions import Self

class Operation(BaseModel):
    """
    An Operation resource. For successful operations that return an Operation resource, only the fields relevant to the operation are populated in the resource.
    """ # noqa: E501
    api_warning: Optional[ApiWarning] = Field(default=None, alias="apiWarning")
    backup_context: Optional[BackupContext] = Field(default=None, alias="backupContext")
    end_time: Optional[StrictStr] = Field(default=None, description="The time this operation finished in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.", alias="endTime")
    error: Optional[OperationErrors] = None
    export_context: Optional[ExportContext] = Field(default=None, alias="exportContext")
    import_context: Optional[ImportContext] = Field(default=None, alias="importContext")
    insert_time: Optional[StrictStr] = Field(default=None, description="The time this operation was enqueued in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.", alias="insertTime")
    kind: Optional[StrictStr] = Field(default=None, description="This is always `sql#operation`.")
    name: Optional[StrictStr] = Field(default=None, description="An identifier that uniquely identifies the operation. You can use this identifier to retrieve the Operations resource that has information about the operation.")
    operation_type: Optional[StrictStr] = Field(default=None, description="The type of the operation. Valid values are: * `CREATE` * `DELETE` * `UPDATE` * `RESTART` * `IMPORT` * `EXPORT` * `BACKUP_VOLUME` * `RESTORE_VOLUME` * `CREATE_USER` * `DELETE_USER` * `CREATE_DATABASE` * `DELETE_DATABASE`", alias="operationType")
    self_link: Optional[StrictStr] = Field(default=None, description="The URI of this resource.", alias="selfLink")
    start_time: Optional[StrictStr] = Field(default=None, description="The time this operation actually started in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.", alias="startTime")
    status: Optional[StrictStr] = Field(default=None, description="The status of an operation.")
    target_id: Optional[StrictStr] = Field(default=None, description="Name of the database instance related to this operation.", alias="targetId")
    target_link: Optional[StrictStr] = Field(default=None, alias="targetLink")
    target_project: Optional[StrictStr] = Field(default=None, description="The project ID of the target instance related to this operation.", alias="targetProject")
    user: Optional[StrictStr] = Field(default=None, description="The email address of the user who initiated this operation.")
    __properties: ClassVar[List[str]] = ["apiWarning", "backupContext", "endTime", "error", "exportContext", "importContext", "insertTime", "kind", "name", "operationType", "selfLink", "startTime", "status", "targetId", "targetLink", "targetProject", "user"]

    @field_validator('operation_type')
    def operation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SQL_OPERATION_TYPE_UNSPECIFIED', 'IMPORT', 'EXPORT', 'CREATE', 'UPDATE', 'DELETE', 'RESTART', 'BACKUP', 'SNAPSHOT', 'BACKUP_VOLUME', 'DELETE_VOLUME', 'RESTORE_VOLUME', 'INJECT_USER', 'CLONE', 'STOP_REPLICA', 'START_REPLICA', 'PROMOTE_REPLICA', 'CREATE_REPLICA', 'CREATE_USER', 'DELETE_USER', 'UPDATE_USER', 'CREATE_DATABASE', 'DELETE_DATABASE', 'UPDATE_DATABASE', 'FAILOVER', 'DELETE_BACKUP', 'RECREATE_REPLICA', 'TRUNCATE_LOG', 'DEMOTE_MASTER', 'MAINTENANCE', 'ENABLE_PRIVATE_IP', 'DEFER_MAINTENANCE', 'CREATE_CLONE', 'RESCHEDULE_MAINTENANCE', 'START_EXTERNAL_SYNC', 'LOG_CLEANUP', 'AUTO_RESTART', 'REENCRYPT', 'SWITCHOVER']):
            raise ValueError("must be one of enum values ('SQL_OPERATION_TYPE_UNSPECIFIED', 'IMPORT', 'EXPORT', 'CREATE', 'UPDATE', 'DELETE', 'RESTART', 'BACKUP', 'SNAPSHOT', 'BACKUP_VOLUME', 'DELETE_VOLUME', 'RESTORE_VOLUME', 'INJECT_USER', 'CLONE', 'STOP_REPLICA', 'START_REPLICA', 'PROMOTE_REPLICA', 'CREATE_REPLICA', 'CREATE_USER', 'DELETE_USER', 'UPDATE_USER', 'CREATE_DATABASE', 'DELETE_DATABASE', 'UPDATE_DATABASE', 'FAILOVER', 'DELETE_BACKUP', 'RECREATE_REPLICA', 'TRUNCATE_LOG', 'DEMOTE_MASTER', 'MAINTENANCE', 'ENABLE_PRIVATE_IP', 'DEFER_MAINTENANCE', 'CREATE_CLONE', 'RESCHEDULE_MAINTENANCE', 'START_EXTERNAL_SYNC', 'LOG_CLEANUP', 'AUTO_RESTART', 'REENCRYPT', 'SWITCHOVER')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SQL_OPERATION_STATUS_UNSPECIFIED', 'PENDING', 'RUNNING', 'DONE']):
            raise ValueError("must be one of enum values ('SQL_OPERATION_STATUS_UNSPECIFIED', 'PENDING', 'RUNNING', 'DONE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Operation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of api_warning
        if self.api_warning:
            _dict['apiWarning'] = self.api_warning.to_dict()
        # override the default output from pydantic by calling `to_dict()` of backup_context
        if self.backup_context:
            _dict['backupContext'] = self.backup_context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of export_context
        if self.export_context:
            _dict['exportContext'] = self.export_context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of import_context
        if self.import_context:
            _dict['importContext'] = self.import_context.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Operation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiWarning": ApiWarning.from_dict(obj["apiWarning"]) if obj.get("apiWarning") is not None else None,
            "backupContext": BackupContext.from_dict(obj["backupContext"]) if obj.get("backupContext") is not None else None,
            "endTime": obj.get("endTime"),
            "error": OperationErrors.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "exportContext": ExportContext.from_dict(obj["exportContext"]) if obj.get("exportContext") is not None else None,
            "importContext": ImportContext.from_dict(obj["importContext"]) if obj.get("importContext") is not None else None,
            "insertTime": obj.get("insertTime"),
            "kind": obj.get("kind"),
            "name": obj.get("name"),
            "operationType": obj.get("operationType"),
            "selfLink": obj.get("selfLink"),
            "startTime": obj.get("startTime"),
            "status": obj.get("status"),
            "targetId": obj.get("targetId"),
            "targetLink": obj.get("targetLink"),
            "targetProject": obj.get("targetProject"),
            "user": obj.get("user")
        })
        return _obj



# coding: utf-8

"""
    Cloud SQL Admin API

    API for Cloud SQL database instance management

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.backup_retention_settings import BackupRetentionSettings
from typing import Optional, Set
from typing_extensions import Self

class BackupConfiguration(BaseModel):
    """
    Database instance backup configuration.
    """ # noqa: E501
    backup_retention_settings: Optional[BackupRetentionSettings] = Field(default=None, alias="backupRetentionSettings")
    binary_log_enabled: Optional[StrictBool] = Field(default=None, description="(MySQL only) Whether binary log is enabled. If backup configuration is disabled, binarylog must be disabled as well.", alias="binaryLogEnabled")
    enabled: Optional[StrictBool] = Field(default=None, description="Whether this configuration is enabled.")
    kind: Optional[StrictStr] = Field(default=None, description="This is always `sql#backupConfiguration`.")
    location: Optional[StrictStr] = Field(default=None, description="Location of the backup")
    point_in_time_recovery_enabled: Optional[StrictBool] = Field(default=None, description="Whether point in time recovery is enabled.", alias="pointInTimeRecoveryEnabled")
    replication_log_archiving_enabled: Optional[StrictBool] = Field(default=None, description="Reserved for future use.", alias="replicationLogArchivingEnabled")
    start_time: Optional[StrictStr] = Field(default=None, description="Start time for the daily backup configuration in UTC timezone in the 24 hour format - `HH:MM`.", alias="startTime")
    transaction_log_retention_days: Optional[StrictInt] = Field(default=None, description="The number of days of transaction logs we retain for point in time restore, from 1-7.", alias="transactionLogRetentionDays")
    __properties: ClassVar[List[str]] = ["backupRetentionSettings", "binaryLogEnabled", "enabled", "kind", "location", "pointInTimeRecoveryEnabled", "replicationLogArchivingEnabled", "startTime", "transactionLogRetentionDays"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackupConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of backup_retention_settings
        if self.backup_retention_settings:
            _dict['backupRetentionSettings'] = self.backup_retention_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackupConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupRetentionSettings": BackupRetentionSettings.from_dict(obj["backupRetentionSettings"]) if obj.get("backupRetentionSettings") is not None else None,
            "binaryLogEnabled": obj.get("binaryLogEnabled"),
            "enabled": obj.get("enabled"),
            "kind": obj.get("kind"),
            "location": obj.get("location"),
            "pointInTimeRecoveryEnabled": obj.get("pointInTimeRecoveryEnabled"),
            "replicationLogArchivingEnabled": obj.get("replicationLogArchivingEnabled"),
            "startTime": obj.get("startTime"),
            "transactionLogRetentionDays": obj.get("transactionLogRetentionDays")
        })
        return _obj



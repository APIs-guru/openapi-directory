# coding: utf-8

"""
    Cloud SQL Admin API

    API for Cloud SQL database instance management

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.import_context_bak_import_options_encryption_options import ImportContextBakImportOptionsEncryptionOptions
from typing import Optional, Set
from typing_extensions import Self

class ImportContextBakImportOptions(BaseModel):
    """
    Import parameters specific to SQL Server .BAK files
    """ # noqa: E501
    bak_type: Optional[StrictStr] = Field(default=None, description="Type of the bak content, FULL or DIFF", alias="bakType")
    encryption_options: Optional[ImportContextBakImportOptionsEncryptionOptions] = Field(default=None, alias="encryptionOptions")
    no_recovery: Optional[StrictBool] = Field(default=None, description="Whether or not the backup importing will restore database with NORECOVERY option Applies only to Cloud SQL for SQL Server.", alias="noRecovery")
    recovery_only: Optional[StrictBool] = Field(default=None, description="Whether or not the backup importing request will just bring database online without downloading Bak content only one of \"no_recovery\" and \"recovery_only\" can be true otherwise error will return. Applies only to Cloud SQL for SQL Server.", alias="recoveryOnly")
    stop_at: Optional[StrictStr] = Field(default=None, description="Optional. The timestamp when the import should stop. This timestamp is in the [RFC 3339](https://tools.ietf.org/html/rfc3339) format (for example, `2023-10-01T16:19:00.094`). This field is equivalent to the STOPAT keyword and applies to Cloud SQL for SQL Server only.", alias="stopAt")
    stop_at_mark: Optional[StrictStr] = Field(default=None, description="Optional. The marked transaction where the import should stop. This field is equivalent to the STOPATMARK keyword and applies to Cloud SQL for SQL Server only.", alias="stopAtMark")
    striped: Optional[StrictBool] = Field(default=None, description="Whether or not the backup set being restored is striped. Applies only to Cloud SQL for SQL Server.")
    __properties: ClassVar[List[str]] = ["bakType", "encryptionOptions", "noRecovery", "recoveryOnly", "stopAt", "stopAtMark", "striped"]

    @field_validator('bak_type')
    def bak_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BAK_TYPE_UNSPECIFIED', 'FULL', 'DIFF', 'TLOG']):
            raise ValueError("must be one of enum values ('BAK_TYPE_UNSPECIFIED', 'FULL', 'DIFF', 'TLOG')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImportContextBakImportOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption_options
        if self.encryption_options:
            _dict['encryptionOptions'] = self.encryption_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImportContextBakImportOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bakType": obj.get("bakType"),
            "encryptionOptions": ImportContextBakImportOptionsEncryptionOptions.from_dict(obj["encryptionOptions"]) if obj.get("encryptionOptions") is not None else None,
            "noRecovery": obj.get("noRecovery"),
            "recoveryOnly": obj.get("recoveryOnly"),
            "stopAt": obj.get("stopAt"),
            "stopAtMark": obj.get("stopAtMark"),
            "striped": obj.get("striped")
        })
        return _obj



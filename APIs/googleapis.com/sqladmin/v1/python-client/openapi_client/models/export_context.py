# coding: utf-8

"""
    Cloud SQL Admin API

    API for Cloud SQL database instance management

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.export_context_bak_export_options import ExportContextBakExportOptions
from openapi_client.models.export_context_csv_export_options import ExportContextCsvExportOptions
from openapi_client.models.export_context_sql_export_options import ExportContextSqlExportOptions
from typing import Optional, Set
from typing_extensions import Self

class ExportContext(BaseModel):
    """
    Database instance export context.
    """ # noqa: E501
    bak_export_options: Optional[ExportContextBakExportOptions] = Field(default=None, alias="bakExportOptions")
    csv_export_options: Optional[ExportContextCsvExportOptions] = Field(default=None, alias="csvExportOptions")
    databases: Optional[List[StrictStr]] = Field(default=None, description="Databases to be exported. `MySQL instances:` If `fileType` is `SQL` and no database is specified, all databases are exported, except for the `mysql` system database. If `fileType` is `CSV`, you can specify one database, either by using this property or by using the `csvExportOptions.selectQuery` property, which takes precedence over this property. `PostgreSQL instances:` You must specify one database to be exported. If `fileType` is `CSV`, this database must match the one specified in the `csvExportOptions.selectQuery` property. `SQL Server instances:` You must specify one database to be exported, and the `fileType` must be `BAK`.")
    file_type: Optional[StrictStr] = Field(default=None, description="The file type for the specified uri.", alias="fileType")
    kind: Optional[StrictStr] = Field(default=None, description="This is always `sql#exportContext`.")
    offload: Optional[StrictBool] = Field(default=None, description="Option for export offload.")
    sql_export_options: Optional[ExportContextSqlExportOptions] = Field(default=None, alias="sqlExportOptions")
    uri: Optional[StrictStr] = Field(default=None, description="The path to the file in Google Cloud Storage where the export will be stored. The URI is in the form `gs://bucketName/fileName`. If the file already exists, the request succeeds, but the operation fails. If `fileType` is `SQL` and the filename ends with .gz, the contents are compressed.")
    __properties: ClassVar[List[str]] = ["bakExportOptions", "csvExportOptions", "databases", "fileType", "kind", "offload", "sqlExportOptions", "uri"]

    @field_validator('file_type')
    def file_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SQL_FILE_TYPE_UNSPECIFIED', 'SQL', 'CSV', 'BAK']):
            raise ValueError("must be one of enum values ('SQL_FILE_TYPE_UNSPECIFIED', 'SQL', 'CSV', 'BAK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExportContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bak_export_options
        if self.bak_export_options:
            _dict['bakExportOptions'] = self.bak_export_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of csv_export_options
        if self.csv_export_options:
            _dict['csvExportOptions'] = self.csv_export_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sql_export_options
        if self.sql_export_options:
            _dict['sqlExportOptions'] = self.sql_export_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExportContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bakExportOptions": ExportContextBakExportOptions.from_dict(obj["bakExportOptions"]) if obj.get("bakExportOptions") is not None else None,
            "csvExportOptions": ExportContextCsvExportOptions.from_dict(obj["csvExportOptions"]) if obj.get("csvExportOptions") is not None else None,
            "databases": obj.get("databases"),
            "fileType": obj.get("fileType"),
            "kind": obj.get("kind"),
            "offload": obj.get("offload"),
            "sqlExportOptions": ExportContextSqlExportOptions.from_dict(obj["sqlExportOptions"]) if obj.get("sqlExportOptions") is not None else None,
            "uri": obj.get("uri")
        })
        return _obj



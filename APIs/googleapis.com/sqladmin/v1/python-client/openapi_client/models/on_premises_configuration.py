# coding: utf-8

"""
    Cloud SQL Admin API

    API for Cloud SQL database instance management

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.instance_reference import InstanceReference
from typing import Optional, Set
from typing_extensions import Self

class OnPremisesConfiguration(BaseModel):
    """
    On-premises instance configuration.
    """ # noqa: E501
    ca_certificate: Optional[StrictStr] = Field(default=None, description="PEM representation of the trusted CA's x509 certificate.", alias="caCertificate")
    client_certificate: Optional[StrictStr] = Field(default=None, description="PEM representation of the replica's x509 certificate.", alias="clientCertificate")
    client_key: Optional[StrictStr] = Field(default=None, description="PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.", alias="clientKey")
    dump_file_path: Optional[StrictStr] = Field(default=None, description="The dump file to create the Cloud SQL replica.", alias="dumpFilePath")
    host_port: Optional[StrictStr] = Field(default=None, description="The host and port of the on-premises instance in host:port format", alias="hostPort")
    kind: Optional[StrictStr] = Field(default=None, description="This is always `sql#onPremisesConfiguration`.")
    password: Optional[StrictStr] = Field(default=None, description="The password for connecting to on-premises instance.")
    source_instance: Optional[InstanceReference] = Field(default=None, alias="sourceInstance")
    username: Optional[StrictStr] = Field(default=None, description="The username for connecting to on-premises instance.")
    __properties: ClassVar[List[str]] = ["caCertificate", "clientCertificate", "clientKey", "dumpFilePath", "hostPort", "kind", "password", "sourceInstance", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OnPremisesConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source_instance
        if self.source_instance:
            _dict['sourceInstance'] = self.source_instance.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OnPremisesConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "caCertificate": obj.get("caCertificate"),
            "clientCertificate": obj.get("clientCertificate"),
            "clientKey": obj.get("clientKey"),
            "dumpFilePath": obj.get("dumpFilePath"),
            "hostPort": obj.get("hostPort"),
            "kind": obj.get("kind"),
            "password": obj.get("password"),
            "sourceInstance": InstanceReference.from_dict(obj["sourceInstance"]) if obj.get("sourceInstance") is not None else None,
            "username": obj.get("username")
        })
        return _obj



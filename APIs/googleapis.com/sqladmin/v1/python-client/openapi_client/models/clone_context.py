# coding: utf-8

"""
    Cloud SQL Admin API

    API for Cloud SQL database instance management

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.bin_log_coordinates import BinLogCoordinates
from typing import Optional, Set
from typing_extensions import Self

class CloneContext(BaseModel):
    """
    Database instance clone context.
    """ # noqa: E501
    allocated_ip_range: Optional[StrictStr] = Field(default=None, description="The name of the allocated ip range for the private ip Cloud SQL instance. For example: \"google-managed-services-default\". If set, the cloned instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://tools.ietf.org/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression [a-z]([-a-z0-9]*[a-z0-9])?. Reserved for future use.", alias="allocatedIpRange")
    bin_log_coordinates: Optional[BinLogCoordinates] = Field(default=None, alias="binLogCoordinates")
    database_names: Optional[List[StrictStr]] = Field(default=None, description="(SQL Server only) Clone only the specified databases from the source instance. Clone all databases if empty.", alias="databaseNames")
    destination_instance_name: Optional[StrictStr] = Field(default=None, description="Name of the Cloud SQL instance to be created as a clone.", alias="destinationInstanceName")
    kind: Optional[StrictStr] = Field(default=None, description="This is always `sql#cloneContext`.")
    pitr_timestamp_ms: Optional[StrictStr] = Field(default=None, description="Reserved for future use.", alias="pitrTimestampMs")
    point_in_time: Optional[StrictStr] = Field(default=None, description="Timestamp, if specified, identifies the time to which the source instance is cloned.", alias="pointInTime")
    preferred_zone: Optional[StrictStr] = Field(default=None, description="Optional. (Point-in-time recovery for PostgreSQL only) Clone to an instance in the specified zone. If no zone is specified, clone to the same zone as the source instance.", alias="preferredZone")
    __properties: ClassVar[List[str]] = ["allocatedIpRange", "binLogCoordinates", "databaseNames", "destinationInstanceName", "kind", "pitrTimestampMs", "pointInTime", "preferredZone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloneContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bin_log_coordinates
        if self.bin_log_coordinates:
            _dict['binLogCoordinates'] = self.bin_log_coordinates.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloneContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allocatedIpRange": obj.get("allocatedIpRange"),
            "binLogCoordinates": BinLogCoordinates.from_dict(obj["binLogCoordinates"]) if obj.get("binLogCoordinates") is not None else None,
            "databaseNames": obj.get("databaseNames"),
            "destinationInstanceName": obj.get("destinationInstanceName"),
            "kind": obj.get("kind"),
            "pitrTimestampMs": obj.get("pitrTimestampMs"),
            "pointInTime": obj.get("pointInTime"),
            "preferredZone": obj.get("preferredZone")
        })
        return _obj



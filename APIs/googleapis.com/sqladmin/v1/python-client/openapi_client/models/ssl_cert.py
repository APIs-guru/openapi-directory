# coding: utf-8

"""
    Cloud SQL Admin API

    API for Cloud SQL database instance management

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SslCert(BaseModel):
    """
    SslCerts Resource
    """ # noqa: E501
    cert: Optional[StrictStr] = Field(default=None, description="PEM representation.")
    cert_serial_number: Optional[StrictStr] = Field(default=None, description="Serial number, as extracted from the certificate.", alias="certSerialNumber")
    common_name: Optional[StrictStr] = Field(default=None, description="User supplied name. Constrained to [a-zA-Z.-_ ]+.", alias="commonName")
    create_time: Optional[StrictStr] = Field(default=None, description="The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`", alias="createTime")
    expiration_time: Optional[StrictStr] = Field(default=None, description="The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.", alias="expirationTime")
    instance: Optional[StrictStr] = Field(default=None, description="Name of the database instance.")
    kind: Optional[StrictStr] = Field(default=None, description="This is always `sql#sslCert`.")
    self_link: Optional[StrictStr] = Field(default=None, description="The URI of this resource.", alias="selfLink")
    sha1_fingerprint: Optional[StrictStr] = Field(default=None, description="Sha1 Fingerprint.", alias="sha1Fingerprint")
    __properties: ClassVar[List[str]] = ["cert", "certSerialNumber", "commonName", "createTime", "expirationTime", "instance", "kind", "selfLink", "sha1Fingerprint"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SslCert from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SslCert from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cert": obj.get("cert"),
            "certSerialNumber": obj.get("certSerialNumber"),
            "commonName": obj.get("commonName"),
            "createTime": obj.get("createTime"),
            "expirationTime": obj.get("expirationTime"),
            "instance": obj.get("instance"),
            "kind": obj.get("kind"),
            "selfLink": obj.get("selfLink"),
            "sha1Fingerprint": obj.get("sha1Fingerprint")
        })
        return _obj



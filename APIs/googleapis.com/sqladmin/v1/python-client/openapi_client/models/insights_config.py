# coding: utf-8

"""
    Cloud SQL Admin API

    API for Cloud SQL database instance management

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class InsightsConfig(BaseModel):
    """
    Insights configuration. This specifies when Cloud SQL Insights feature is enabled and optional configuration.
    """ # noqa: E501
    query_insights_enabled: Optional[StrictBool] = Field(default=None, description="Whether Query Insights feature is enabled.", alias="queryInsightsEnabled")
    query_plans_per_minute: Optional[StrictInt] = Field(default=None, description="Number of query execution plans captured by Insights per minute for all queries combined. Default is 5.", alias="queryPlansPerMinute")
    query_string_length: Optional[StrictInt] = Field(default=None, description="Maximum query length stored in bytes. Default value: 1024 bytes. Range: 256-4500 bytes. Query length more than this field value will be truncated to this value. When unset, query length will be the default value. Changing query length will restart the database.", alias="queryStringLength")
    record_application_tags: Optional[StrictBool] = Field(default=None, description="Whether Query Insights will record application tags from query when enabled.", alias="recordApplicationTags")
    record_client_address: Optional[StrictBool] = Field(default=None, description="Whether Query Insights will record client address when enabled.", alias="recordClientAddress")
    __properties: ClassVar[List[str]] = ["queryInsightsEnabled", "queryPlansPerMinute", "queryStringLength", "recordApplicationTags", "recordClientAddress"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InsightsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InsightsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "queryInsightsEnabled": obj.get("queryInsightsEnabled"),
            "queryPlansPerMinute": obj.get("queryPlansPerMinute"),
            "queryStringLength": obj.get("queryStringLength"),
            "recordApplicationTags": obj.get("recordApplicationTags"),
            "recordClientAddress": obj.get("recordClientAddress")
        })
        return _obj



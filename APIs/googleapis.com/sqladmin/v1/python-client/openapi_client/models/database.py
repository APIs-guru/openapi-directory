# coding: utf-8

"""
    Cloud SQL Admin API

    API for Cloud SQL database instance management

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sql_server_database_details import SqlServerDatabaseDetails
from typing import Optional, Set
from typing_extensions import Self

class Database(BaseModel):
    """
    Represents a SQL database on the Cloud SQL instance.
    """ # noqa: E501
    charset: Optional[StrictStr] = Field(default=None, description="The Cloud SQL charset value.")
    collation: Optional[StrictStr] = Field(default=None, description="The Cloud SQL collation value.")
    etag: Optional[StrictStr] = Field(default=None, description="This field is deprecated and will be removed from a future version of the API.")
    instance: Optional[StrictStr] = Field(default=None, description="The name of the Cloud SQL instance. This does not include the project ID.")
    kind: Optional[StrictStr] = Field(default=None, description="This is always `sql#database`.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the database in the Cloud SQL instance. This does not include the project ID or instance name.")
    project: Optional[StrictStr] = Field(default=None, description="The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable.")
    self_link: Optional[StrictStr] = Field(default=None, description="The URI of this resource.", alias="selfLink")
    sqlserver_database_details: Optional[SqlServerDatabaseDetails] = Field(default=None, alias="sqlserverDatabaseDetails")
    __properties: ClassVar[List[str]] = ["charset", "collation", "etag", "instance", "kind", "name", "project", "selfLink", "sqlserverDatabaseDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Database from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sqlserver_database_details
        if self.sqlserver_database_details:
            _dict['sqlserverDatabaseDetails'] = self.sqlserver_database_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Database from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "charset": obj.get("charset"),
            "collation": obj.get("collation"),
            "etag": obj.get("etag"),
            "instance": obj.get("instance"),
            "kind": obj.get("kind"),
            "name": obj.get("name"),
            "project": obj.get("project"),
            "selfLink": obj.get("selfLink"),
            "sqlserverDatabaseDetails": SqlServerDatabaseDetails.from_dict(obj["sqlserverDatabaseDetails"]) if obj.get("sqlserverDatabaseDetails") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Web Security Scanner API

    Scans your Compute and App Engine apps for common web vulnerabilities.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ScanRun(BaseModel):
    """
    A ScanRun is a output-only resource representing an actual run of the scan.
    """ # noqa: E501
    end_time: Optional[StrictStr] = Field(default=None, description="The time at which the ScanRun reached termination state - that the ScanRun is either finished or stopped by user.", alias="endTime")
    execution_state: Optional[StrictStr] = Field(default=None, description="The execution state of the ScanRun.", alias="executionState")
    has_vulnerabilities: Optional[StrictBool] = Field(default=None, description="Whether the scan run has found any vulnerabilities.", alias="hasVulnerabilities")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the ScanRun. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}'. The ScanRun IDs are generated by the system.")
    progress_percent: Optional[StrictInt] = Field(default=None, description="The percentage of total completion ranging from 0 to 100. If the scan is in queue, the value is 0. If the scan is running, the value ranges from 0 to 100. If the scan is finished, the value is 100.", alias="progressPercent")
    result_state: Optional[StrictStr] = Field(default=None, description="The result state of the ScanRun. This field is only available after the execution state reaches \"FINISHED\".", alias="resultState")
    start_time: Optional[StrictStr] = Field(default=None, description="The time at which the ScanRun started.", alias="startTime")
    urls_crawled_count: Optional[StrictStr] = Field(default=None, description="The number of URLs crawled during this ScanRun. If the scan is in progress, the value represents the number of URLs crawled up to now.", alias="urlsCrawledCount")
    urls_tested_count: Optional[StrictStr] = Field(default=None, description="The number of URLs tested during this ScanRun. If the scan is in progress, the value represents the number of URLs tested up to now. The number of URLs tested is usually larger than the number URLS crawled because typically a crawled URL is tested with multiple test payloads.", alias="urlsTestedCount")
    __properties: ClassVar[List[str]] = ["endTime", "executionState", "hasVulnerabilities", "name", "progressPercent", "resultState", "startTime", "urlsCrawledCount", "urlsTestedCount"]

    @field_validator('execution_state')
    def execution_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXECUTION_STATE_UNSPECIFIED', 'QUEUED', 'SCANNING', 'FINISHED']):
            raise ValueError("must be one of enum values ('EXECUTION_STATE_UNSPECIFIED', 'QUEUED', 'SCANNING', 'FINISHED')")
        return value

    @field_validator('result_state')
    def result_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RESULT_STATE_UNSPECIFIED', 'SUCCESS', 'ERROR', 'KILLED']):
            raise ValueError("must be one of enum values ('RESULT_STATE_UNSPECIFIED', 'SUCCESS', 'ERROR', 'KILLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScanRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScanRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endTime": obj.get("endTime"),
            "executionState": obj.get("executionState"),
            "hasVulnerabilities": obj.get("hasVulnerabilities"),
            "name": obj.get("name"),
            "progressPercent": obj.get("progressPercent"),
            "resultState": obj.get("resultState"),
            "startTime": obj.get("startTime"),
            "urlsCrawledCount": obj.get("urlsCrawledCount"),
            "urlsTestedCount": obj.get("urlsTestedCount")
        })
        return _obj



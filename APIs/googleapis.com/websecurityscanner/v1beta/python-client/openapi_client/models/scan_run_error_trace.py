# coding: utf-8

"""
    Web Security Scanner API

    Scans your Compute and App Engine apps for common web vulnerabilities.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.scan_config_error import ScanConfigError
from typing import Optional, Set
from typing_extensions import Self

class ScanRunErrorTrace(BaseModel):
    """
    Output only. Defines an error trace message for a ScanRun.
    """ # noqa: E501
    code: Optional[StrictStr] = Field(default=None, description="Indicates the error reason code.")
    most_common_http_error_code: Optional[StrictInt] = Field(default=None, description="If the scan encounters TOO_MANY_HTTP_ERRORS, this field indicates the most common HTTP error code, if such is available. For example, if this code is 404, the scan has encountered too many NOT_FOUND responses.", alias="mostCommonHttpErrorCode")
    scan_config_error: Optional[ScanConfigError] = Field(default=None, alias="scanConfigError")
    __properties: ClassVar[List[str]] = ["code", "mostCommonHttpErrorCode", "scanConfigError"]

    @field_validator('code')
    def code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CODE_UNSPECIFIED', 'INTERNAL_ERROR', 'SCAN_CONFIG_ISSUE', 'AUTHENTICATION_CONFIG_ISSUE', 'TIMED_OUT_WHILE_SCANNING', 'TOO_MANY_REDIRECTS', 'TOO_MANY_HTTP_ERRORS', 'STARTING_URLS_CRAWL_HTTP_ERRORS']):
            raise ValueError("must be one of enum values ('CODE_UNSPECIFIED', 'INTERNAL_ERROR', 'SCAN_CONFIG_ISSUE', 'AUTHENTICATION_CONFIG_ISSUE', 'TIMED_OUT_WHILE_SCANNING', 'TOO_MANY_REDIRECTS', 'TOO_MANY_HTTP_ERRORS', 'STARTING_URLS_CRAWL_HTTP_ERRORS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScanRunErrorTrace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of scan_config_error
        if self.scan_config_error:
            _dict['scanConfigError'] = self.scan_config_error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScanRunErrorTrace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "mostCommonHttpErrorCode": obj.get("mostCommonHttpErrorCode"),
            "scanConfigError": ScanConfigError.from_dict(obj["scanConfigError"]) if obj.get("scanConfigError") is not None else None
        })
        return _obj



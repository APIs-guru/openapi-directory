# coding: utf-8

"""
    Web Security Scanner API

    Scans your Compute and App Engine apps for common web vulnerabilities.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.form import Form
from openapi_client.models.outdated_library import OutdatedLibrary
from openapi_client.models.violating_resource import ViolatingResource
from openapi_client.models.vulnerable_headers import VulnerableHeaders
from openapi_client.models.vulnerable_parameters import VulnerableParameters
from openapi_client.models.xss import Xss
from openapi_client.models.xxe import Xxe
from typing import Optional, Set
from typing_extensions import Self

class Finding(BaseModel):
    """
    A Finding resource represents a vulnerability instance identified during a ScanRun.
    """ # noqa: E501
    body: Optional[StrictStr] = Field(default=None, description="The body of the request that triggered the vulnerability.")
    description: Optional[StrictStr] = Field(default=None, description="The description of the vulnerability.")
    final_url: Optional[StrictStr] = Field(default=None, description="The URL where the browser lands when the vulnerability is detected.", alias="finalUrl")
    finding_type: Optional[StrictStr] = Field(default=None, description="The type of the Finding. Detailed and up-to-date information on findings can be found here: https://cloud.google.com/security-command-center/docs/how-to-remediate-web-security-scanner", alias="findingType")
    form: Optional[Form] = None
    frame_url: Optional[StrictStr] = Field(default=None, description="If the vulnerability was originated from nested IFrame, the immediate parent IFrame is reported.", alias="frameUrl")
    fuzzed_url: Optional[StrictStr] = Field(default=None, description="The URL produced by the server-side fuzzer and used in the request that triggered the vulnerability.", alias="fuzzedUrl")
    http_method: Optional[StrictStr] = Field(default=None, description="The http method of the request that triggered the vulnerability, in uppercase.", alias="httpMethod")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the Finding. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}/scanruns/{scanRunId}/findings/{findingId}'. The finding IDs are generated by the system.")
    outdated_library: Optional[OutdatedLibrary] = Field(default=None, alias="outdatedLibrary")
    reproduction_url: Optional[StrictStr] = Field(default=None, description="The URL containing human-readable payload that user can leverage to reproduce the vulnerability.", alias="reproductionUrl")
    severity: Optional[StrictStr] = Field(default=None, description="The severity level of the reported vulnerability.")
    tracking_id: Optional[StrictStr] = Field(default=None, description="The tracking ID uniquely identifies a vulnerability instance across multiple ScanRuns.", alias="trackingId")
    violating_resource: Optional[ViolatingResource] = Field(default=None, alias="violatingResource")
    vulnerable_headers: Optional[VulnerableHeaders] = Field(default=None, alias="vulnerableHeaders")
    vulnerable_parameters: Optional[VulnerableParameters] = Field(default=None, alias="vulnerableParameters")
    xss: Optional[Xss] = None
    xxe: Optional[Xxe] = None
    __properties: ClassVar[List[str]] = ["body", "description", "finalUrl", "findingType", "form", "frameUrl", "fuzzedUrl", "httpMethod", "name", "outdatedLibrary", "reproductionUrl", "severity", "trackingId", "violatingResource", "vulnerableHeaders", "vulnerableParameters", "xss", "xxe"]

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SEVERITY_UNSPECIFIED', 'CRITICAL', 'HIGH', 'MEDIUM', 'LOW']):
            raise ValueError("must be one of enum values ('SEVERITY_UNSPECIFIED', 'CRITICAL', 'HIGH', 'MEDIUM', 'LOW')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Finding from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of form
        if self.form:
            _dict['form'] = self.form.to_dict()
        # override the default output from pydantic by calling `to_dict()` of outdated_library
        if self.outdated_library:
            _dict['outdatedLibrary'] = self.outdated_library.to_dict()
        # override the default output from pydantic by calling `to_dict()` of violating_resource
        if self.violating_resource:
            _dict['violatingResource'] = self.violating_resource.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vulnerable_headers
        if self.vulnerable_headers:
            _dict['vulnerableHeaders'] = self.vulnerable_headers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vulnerable_parameters
        if self.vulnerable_parameters:
            _dict['vulnerableParameters'] = self.vulnerable_parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of xss
        if self.xss:
            _dict['xss'] = self.xss.to_dict()
        # override the default output from pydantic by calling `to_dict()` of xxe
        if self.xxe:
            _dict['xxe'] = self.xxe.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Finding from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "body": obj.get("body"),
            "description": obj.get("description"),
            "finalUrl": obj.get("finalUrl"),
            "findingType": obj.get("findingType"),
            "form": Form.from_dict(obj["form"]) if obj.get("form") is not None else None,
            "frameUrl": obj.get("frameUrl"),
            "fuzzedUrl": obj.get("fuzzedUrl"),
            "httpMethod": obj.get("httpMethod"),
            "name": obj.get("name"),
            "outdatedLibrary": OutdatedLibrary.from_dict(obj["outdatedLibrary"]) if obj.get("outdatedLibrary") is not None else None,
            "reproductionUrl": obj.get("reproductionUrl"),
            "severity": obj.get("severity"),
            "trackingId": obj.get("trackingId"),
            "violatingResource": ViolatingResource.from_dict(obj["violatingResource"]) if obj.get("violatingResource") is not None else None,
            "vulnerableHeaders": VulnerableHeaders.from_dict(obj["vulnerableHeaders"]) if obj.get("vulnerableHeaders") is not None else None,
            "vulnerableParameters": VulnerableParameters.from_dict(obj["vulnerableParameters"]) if obj.get("vulnerableParameters") is not None else None,
            "xss": Xss.from_dict(obj["xss"]) if obj.get("xss") is not None else None,
            "xxe": Xxe.from_dict(obj["xxe"]) if obj.get("xxe") is not None else None
        })
        return _obj



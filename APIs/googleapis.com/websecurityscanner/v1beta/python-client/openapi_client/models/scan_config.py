# coding: utf-8

"""
    Web Security Scanner API

    Scans your Compute and App Engine apps for common web vulnerabilities.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.authentication import Authentication
from openapi_client.models.scan_run import ScanRun
from openapi_client.models.schedule import Schedule
from typing import Optional, Set
from typing_extensions import Self

class ScanConfig(BaseModel):
    """
    A ScanConfig resource contains the configurations to launch a scan.
    """ # noqa: E501
    authentication: Optional[Authentication] = None
    blacklist_patterns: Optional[List[StrictStr]] = Field(default=None, description="The excluded URL patterns as described in https://cloud.google.com/security-command-center/docs/how-to-use-web-security-scanner#excluding_urls", alias="blacklistPatterns")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The user provided display name of the ScanConfig.", alias="displayName")
    export_to_security_command_center: Optional[StrictStr] = Field(default=None, description="Controls export of scan configurations and results to Security Command Center.", alias="exportToSecurityCommandCenter")
    ignore_http_status_errors: Optional[StrictBool] = Field(default=None, description="Whether to keep scanning even if most requests return HTTP error codes.", alias="ignoreHttpStatusErrors")
    latest_run: Optional[ScanRun] = Field(default=None, alias="latestRun")
    managed_scan: Optional[StrictBool] = Field(default=None, description="Whether the scan config is managed by Web Security Scanner, output only.", alias="managedScan")
    max_qps: Optional[StrictInt] = Field(default=None, description="The maximum QPS during scanning. A valid value ranges from 5 to 20 inclusively. If the field is unspecified or its value is set 0, server will default to 15. Other values outside of [5, 20] range will be rejected with INVALID_ARGUMENT error.", alias="maxQps")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the ScanConfig. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}'. The ScanConfig IDs are generated by the system.")
    risk_level: Optional[StrictStr] = Field(default=None, description="The risk level selected for the scan", alias="riskLevel")
    schedule: Optional[Schedule] = None
    starting_urls: Optional[List[StrictStr]] = Field(default=None, description="Required. The starting URLs from which the scanner finds site pages.", alias="startingUrls")
    static_ip_scan: Optional[StrictBool] = Field(default=None, description="Whether the scan configuration has enabled static IP address scan feature. If enabled, the scanner will access applications from static IP addresses.", alias="staticIpScan")
    target_platforms: Optional[List[StrictStr]] = Field(default=None, description="Set of Google Cloud platforms targeted by the scan. If empty, APP_ENGINE will be used as a default.", alias="targetPlatforms")
    user_agent: Optional[StrictStr] = Field(default=None, description="The user agent used during scanning.", alias="userAgent")
    __properties: ClassVar[List[str]] = ["authentication", "blacklistPatterns", "displayName", "exportToSecurityCommandCenter", "ignoreHttpStatusErrors", "latestRun", "managedScan", "maxQps", "name", "riskLevel", "schedule", "startingUrls", "staticIpScan", "targetPlatforms", "userAgent"]

    @field_validator('export_to_security_command_center')
    def export_to_security_command_center_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXPORT_TO_SECURITY_COMMAND_CENTER_UNSPECIFIED', 'ENABLED', 'DISABLED']):
            raise ValueError("must be one of enum values ('EXPORT_TO_SECURITY_COMMAND_CENTER_UNSPECIFIED', 'ENABLED', 'DISABLED')")
        return value

    @field_validator('risk_level')
    def risk_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RISK_LEVEL_UNSPECIFIED', 'NORMAL', 'LOW']):
            raise ValueError("must be one of enum values ('RISK_LEVEL_UNSPECIFIED', 'NORMAL', 'LOW')")
        return value

    @field_validator('target_platforms')
    def target_platforms_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['TARGET_PLATFORM_UNSPECIFIED', 'APP_ENGINE', 'COMPUTE', 'CLOUD_RUN', 'CLOUD_FUNCTIONS']):
                raise ValueError("each list item must be one of ('TARGET_PLATFORM_UNSPECIFIED', 'APP_ENGINE', 'COMPUTE', 'CLOUD_RUN', 'CLOUD_FUNCTIONS')")
        return value

    @field_validator('user_agent')
    def user_agent_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['USER_AGENT_UNSPECIFIED', 'CHROME_LINUX', 'CHROME_ANDROID', 'SAFARI_IPHONE']):
            raise ValueError("must be one of enum values ('USER_AGENT_UNSPECIFIED', 'CHROME_LINUX', 'CHROME_ANDROID', 'SAFARI_IPHONE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScanConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of authentication
        if self.authentication:
            _dict['authentication'] = self.authentication.to_dict()
        # override the default output from pydantic by calling `to_dict()` of latest_run
        if self.latest_run:
            _dict['latestRun'] = self.latest_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['schedule'] = self.schedule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScanConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authentication": Authentication.from_dict(obj["authentication"]) if obj.get("authentication") is not None else None,
            "blacklistPatterns": obj.get("blacklistPatterns"),
            "displayName": obj.get("displayName"),
            "exportToSecurityCommandCenter": obj.get("exportToSecurityCommandCenter"),
            "ignoreHttpStatusErrors": obj.get("ignoreHttpStatusErrors"),
            "latestRun": ScanRun.from_dict(obj["latestRun"]) if obj.get("latestRun") is not None else None,
            "managedScan": obj.get("managedScan"),
            "maxQps": obj.get("maxQps"),
            "name": obj.get("name"),
            "riskLevel": obj.get("riskLevel"),
            "schedule": Schedule.from_dict(obj["schedule"]) if obj.get("schedule") is not None else None,
            "startingUrls": obj.get("startingUrls"),
            "staticIpScan": obj.get("staticIpScan"),
            "targetPlatforms": obj.get("targetPlatforms"),
            "userAgent": obj.get("userAgent")
        })
        return _obj



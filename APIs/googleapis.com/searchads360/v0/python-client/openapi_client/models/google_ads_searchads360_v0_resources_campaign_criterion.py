# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_ads_searchads360_v0_common_age_range_info import GoogleAdsSearchads360V0CommonAgeRangeInfo
from openapi_client.models.google_ads_searchads360_v0_common_device_info import GoogleAdsSearchads360V0CommonDeviceInfo
from openapi_client.models.google_ads_searchads360_v0_common_gender_info import GoogleAdsSearchads360V0CommonGenderInfo
from openapi_client.models.google_ads_searchads360_v0_common_keyword_info import GoogleAdsSearchads360V0CommonKeywordInfo
from openapi_client.models.google_ads_searchads360_v0_common_language_info import GoogleAdsSearchads360V0CommonLanguageInfo
from openapi_client.models.google_ads_searchads360_v0_common_location_group_info import GoogleAdsSearchads360V0CommonLocationGroupInfo
from openapi_client.models.google_ads_searchads360_v0_common_location_info import GoogleAdsSearchads360V0CommonLocationInfo
from openapi_client.models.google_ads_searchads360_v0_common_user_list_info import GoogleAdsSearchads360V0CommonUserListInfo
from openapi_client.models.google_ads_searchads360_v0_common_webpage_info import GoogleAdsSearchads360V0CommonWebpageInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0ResourcesCampaignCriterion(BaseModel):
    """
    A campaign criterion.
    """ # noqa: E501
    age_range: Optional[GoogleAdsSearchads360V0CommonAgeRangeInfo] = Field(default=None, alias="ageRange")
    bid_modifier: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The modifier for the bids when the criterion matches. The modifier must be in the range: 0.1 - 10.0. Most targetable criteria types support modifiers. Use 0 to opt out of a Device type.", alias="bidModifier")
    criterion_id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the criterion. This field is ignored during mutate.", alias="criterionId")
    device: Optional[GoogleAdsSearchads360V0CommonDeviceInfo] = None
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. The display name of the criterion. This field is ignored for mutates.", alias="displayName")
    gender: Optional[GoogleAdsSearchads360V0CommonGenderInfo] = None
    keyword: Optional[GoogleAdsSearchads360V0CommonKeywordInfo] = None
    language: Optional[GoogleAdsSearchads360V0CommonLanguageInfo] = None
    last_modified_time: Optional[StrictStr] = Field(default=None, description="Output only. The datetime when this campaign criterion was last modified. The datetime is in the customer's time zone and in \"yyyy-MM-dd HH:mm:ss.ssssss\" format.", alias="lastModifiedTime")
    location: Optional[GoogleAdsSearchads360V0CommonLocationInfo] = None
    location_group: Optional[GoogleAdsSearchads360V0CommonLocationGroupInfo] = Field(default=None, alias="locationGroup")
    negative: Optional[StrictBool] = Field(default=None, description="Immutable. Whether to target (`false`) or exclude (`true`) the criterion.")
    resource_name: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of the campaign criterion. Campaign criterion resource names have the form: `customers/{customer_id}/campaignCriteria/{campaign_id}~{criterion_id}`", alias="resourceName")
    status: Optional[StrictStr] = Field(default=None, description="The status of the criterion.")
    type: Optional[StrictStr] = Field(default=None, description="Output only. The type of the criterion.")
    user_list: Optional[GoogleAdsSearchads360V0CommonUserListInfo] = Field(default=None, alias="userList")
    webpage: Optional[GoogleAdsSearchads360V0CommonWebpageInfo] = None
    __properties: ClassVar[List[str]] = ["ageRange", "bidModifier", "criterionId", "device", "displayName", "gender", "keyword", "language", "lastModifiedTime", "location", "locationGroup", "negative", "resourceName", "status", "type", "userList", "webpage"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'PAUSED', 'REMOVED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'PAUSED', 'REMOVED')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'KEYWORD', 'PLACEMENT', 'MOBILE_APP_CATEGORY', 'MOBILE_APPLICATION', 'DEVICE', 'LOCATION', 'LISTING_GROUP', 'AD_SCHEDULE', 'AGE_RANGE', 'GENDER', 'INCOME_RANGE', 'PARENTAL_STATUS', 'YOUTUBE_VIDEO', 'YOUTUBE_CHANNEL', 'USER_LIST', 'PROXIMITY', 'TOPIC', 'LISTING_SCOPE', 'LANGUAGE', 'IP_BLOCK', 'CONTENT_LABEL', 'CARRIER', 'USER_INTEREST', 'WEBPAGE', 'OPERATING_SYSTEM_VERSION', 'APP_PAYMENT_MODEL', 'MOBILE_DEVICE', 'CUSTOM_AFFINITY', 'CUSTOM_INTENT', 'LOCATION_GROUP', 'CUSTOM_AUDIENCE', 'COMBINED_AUDIENCE', 'KEYWORD_THEME', 'AUDIENCE', 'LOCAL_SERVICE_ID', 'BRAND', 'BRAND_LIST']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'KEYWORD', 'PLACEMENT', 'MOBILE_APP_CATEGORY', 'MOBILE_APPLICATION', 'DEVICE', 'LOCATION', 'LISTING_GROUP', 'AD_SCHEDULE', 'AGE_RANGE', 'GENDER', 'INCOME_RANGE', 'PARENTAL_STATUS', 'YOUTUBE_VIDEO', 'YOUTUBE_CHANNEL', 'USER_LIST', 'PROXIMITY', 'TOPIC', 'LISTING_SCOPE', 'LANGUAGE', 'IP_BLOCK', 'CONTENT_LABEL', 'CARRIER', 'USER_INTEREST', 'WEBPAGE', 'OPERATING_SYSTEM_VERSION', 'APP_PAYMENT_MODEL', 'MOBILE_DEVICE', 'CUSTOM_AFFINITY', 'CUSTOM_INTENT', 'LOCATION_GROUP', 'CUSTOM_AUDIENCE', 'COMBINED_AUDIENCE', 'KEYWORD_THEME', 'AUDIENCE', 'LOCAL_SERVICE_ID', 'BRAND', 'BRAND_LIST')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesCampaignCriterion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "criterion_id",
            "display_name",
            "last_modified_time",
            "type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of age_range
        if self.age_range:
            _dict['ageRange'] = self.age_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of device
        if self.device:
            _dict['device'] = self.device.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gender
        if self.gender:
            _dict['gender'] = self.gender.to_dict()
        # override the default output from pydantic by calling `to_dict()` of keyword
        if self.keyword:
            _dict['keyword'] = self.keyword.to_dict()
        # override the default output from pydantic by calling `to_dict()` of language
        if self.language:
            _dict['language'] = self.language.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location_group
        if self.location_group:
            _dict['locationGroup'] = self.location_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_list
        if self.user_list:
            _dict['userList'] = self.user_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of webpage
        if self.webpage:
            _dict['webpage'] = self.webpage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesCampaignCriterion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ageRange": GoogleAdsSearchads360V0CommonAgeRangeInfo.from_dict(obj["ageRange"]) if obj.get("ageRange") is not None else None,
            "bidModifier": obj.get("bidModifier"),
            "criterionId": obj.get("criterionId"),
            "device": GoogleAdsSearchads360V0CommonDeviceInfo.from_dict(obj["device"]) if obj.get("device") is not None else None,
            "displayName": obj.get("displayName"),
            "gender": GoogleAdsSearchads360V0CommonGenderInfo.from_dict(obj["gender"]) if obj.get("gender") is not None else None,
            "keyword": GoogleAdsSearchads360V0CommonKeywordInfo.from_dict(obj["keyword"]) if obj.get("keyword") is not None else None,
            "language": GoogleAdsSearchads360V0CommonLanguageInfo.from_dict(obj["language"]) if obj.get("language") is not None else None,
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "location": GoogleAdsSearchads360V0CommonLocationInfo.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "locationGroup": GoogleAdsSearchads360V0CommonLocationGroupInfo.from_dict(obj["locationGroup"]) if obj.get("locationGroup") is not None else None,
            "negative": obj.get("negative"),
            "resourceName": obj.get("resourceName"),
            "status": obj.get("status"),
            "type": obj.get("type"),
            "userList": GoogleAdsSearchads360V0CommonUserListInfo.from_dict(obj["userList"]) if obj.get("userList") is not None else None,
            "webpage": GoogleAdsSearchads360V0CommonWebpageInfo.from_dict(obj["webpage"]) if obj.get("webpage") is not None else None
        })
        return _obj



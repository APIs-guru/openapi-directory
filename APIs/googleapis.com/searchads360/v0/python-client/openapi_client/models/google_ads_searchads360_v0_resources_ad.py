# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_ads_searchads360_v0_common_search_ads360_expanded_dynamic_search_ad_info import GoogleAdsSearchads360V0CommonSearchAds360ExpandedDynamicSearchAdInfo
from openapi_client.models.google_ads_searchads360_v0_common_search_ads360_expanded_text_ad_info import GoogleAdsSearchads360V0CommonSearchAds360ExpandedTextAdInfo
from openapi_client.models.google_ads_searchads360_v0_common_search_ads360_responsive_search_ad_info import GoogleAdsSearchads360V0CommonSearchAds360ResponsiveSearchAdInfo
from openapi_client.models.google_ads_searchads360_v0_common_search_ads360_text_ad_info import GoogleAdsSearchads360V0CommonSearchAds360TextAdInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0ResourcesAd(BaseModel):
    """
    An ad.
    """ # noqa: E501
    display_url: Optional[StrictStr] = Field(default=None, description="The URL that appears in the ad description for some ad formats.", alias="displayUrl")
    expanded_dynamic_search_ad: Optional[GoogleAdsSearchads360V0CommonSearchAds360ExpandedDynamicSearchAdInfo] = Field(default=None, alias="expandedDynamicSearchAd")
    expanded_text_ad: Optional[GoogleAdsSearchads360V0CommonSearchAds360ExpandedTextAdInfo] = Field(default=None, alias="expandedTextAd")
    final_urls: Optional[List[StrictStr]] = Field(default=None, description="The list of possible final URLs after all cross-domain redirects for the ad.", alias="finalUrls")
    id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the ad.")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The name of the ad. This is only used to be able to identify the ad. It does not need to be unique and does not affect the served ad. The name field is currently only supported for DisplayUploadAd, ImageAd, ShoppingComparisonListingAd and VideoAd.")
    product_ad: Optional[Dict[str, Any]] = Field(default=None, description="A Search Ads 360 product ad.", alias="productAd")
    resource_name: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of the ad. Ad resource names have the form: `customers/{customer_id}/ads/{ad_id}`", alias="resourceName")
    responsive_search_ad: Optional[GoogleAdsSearchads360V0CommonSearchAds360ResponsiveSearchAdInfo] = Field(default=None, alias="responsiveSearchAd")
    text_ad: Optional[GoogleAdsSearchads360V0CommonSearchAds360TextAdInfo] = Field(default=None, alias="textAd")
    type: Optional[StrictStr] = Field(default=None, description="Output only. The type of ad.")
    __properties: ClassVar[List[str]] = ["displayUrl", "expandedDynamicSearchAd", "expandedTextAd", "finalUrls", "id", "name", "productAd", "resourceName", "responsiveSearchAd", "textAd", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'TEXT_AD', 'EXPANDED_TEXT_AD', 'CALL_ONLY_AD', 'EXPANDED_DYNAMIC_SEARCH_AD', 'HOTEL_AD', 'SHOPPING_SMART_AD', 'SHOPPING_PRODUCT_AD', 'VIDEO_AD', 'GMAIL_AD', 'IMAGE_AD', 'RESPONSIVE_SEARCH_AD', 'LEGACY_RESPONSIVE_DISPLAY_AD', 'APP_AD', 'LEGACY_APP_INSTALL_AD', 'RESPONSIVE_DISPLAY_AD', 'LOCAL_AD', 'HTML5_UPLOAD_AD', 'DYNAMIC_HTML5_AD', 'APP_ENGAGEMENT_AD', 'SHOPPING_COMPARISON_LISTING_AD', 'VIDEO_BUMPER_AD', 'VIDEO_NON_SKIPPABLE_IN_STREAM_AD', 'VIDEO_OUTSTREAM_AD', 'VIDEO_TRUEVIEW_DISCOVERY_AD', 'VIDEO_TRUEVIEW_IN_STREAM_AD', 'VIDEO_RESPONSIVE_AD', 'SMART_CAMPAIGN_AD', 'APP_PRE_REGISTRATION_AD', 'DISCOVERY_MULTI_ASSET_AD', 'DISCOVERY_CAROUSEL_AD', 'TRAVEL_AD', 'DISCOVERY_VIDEO_RESPONSIVE_AD']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'TEXT_AD', 'EXPANDED_TEXT_AD', 'CALL_ONLY_AD', 'EXPANDED_DYNAMIC_SEARCH_AD', 'HOTEL_AD', 'SHOPPING_SMART_AD', 'SHOPPING_PRODUCT_AD', 'VIDEO_AD', 'GMAIL_AD', 'IMAGE_AD', 'RESPONSIVE_SEARCH_AD', 'LEGACY_RESPONSIVE_DISPLAY_AD', 'APP_AD', 'LEGACY_APP_INSTALL_AD', 'RESPONSIVE_DISPLAY_AD', 'LOCAL_AD', 'HTML5_UPLOAD_AD', 'DYNAMIC_HTML5_AD', 'APP_ENGAGEMENT_AD', 'SHOPPING_COMPARISON_LISTING_AD', 'VIDEO_BUMPER_AD', 'VIDEO_NON_SKIPPABLE_IN_STREAM_AD', 'VIDEO_OUTSTREAM_AD', 'VIDEO_TRUEVIEW_DISCOVERY_AD', 'VIDEO_TRUEVIEW_IN_STREAM_AD', 'VIDEO_RESPONSIVE_AD', 'SMART_CAMPAIGN_AD', 'APP_PRE_REGISTRATION_AD', 'DISCOVERY_MULTI_ASSET_AD', 'DISCOVERY_CAROUSEL_AD', 'TRAVEL_AD', 'DISCOVERY_VIDEO_RESPONSIVE_AD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesAd from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of expanded_dynamic_search_ad
        if self.expanded_dynamic_search_ad:
            _dict['expandedDynamicSearchAd'] = self.expanded_dynamic_search_ad.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expanded_text_ad
        if self.expanded_text_ad:
            _dict['expandedTextAd'] = self.expanded_text_ad.to_dict()
        # override the default output from pydantic by calling `to_dict()` of responsive_search_ad
        if self.responsive_search_ad:
            _dict['responsiveSearchAd'] = self.responsive_search_ad.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_ad
        if self.text_ad:
            _dict['textAd'] = self.text_ad.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesAd from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayUrl": obj.get("displayUrl"),
            "expandedDynamicSearchAd": GoogleAdsSearchads360V0CommonSearchAds360ExpandedDynamicSearchAdInfo.from_dict(obj["expandedDynamicSearchAd"]) if obj.get("expandedDynamicSearchAd") is not None else None,
            "expandedTextAd": GoogleAdsSearchads360V0CommonSearchAds360ExpandedTextAdInfo.from_dict(obj["expandedTextAd"]) if obj.get("expandedTextAd") is not None else None,
            "finalUrls": obj.get("finalUrls"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "productAd": obj.get("productAd"),
            "resourceName": obj.get("resourceName"),
            "responsiveSearchAd": GoogleAdsSearchads360V0CommonSearchAds360ResponsiveSearchAdInfo.from_dict(obj["responsiveSearchAd"]) if obj.get("responsiveSearchAd") is not None else None,
            "textAd": GoogleAdsSearchads360V0CommonSearchAds360TextAdInfo.from_dict(obj["textAd"]) if obj.get("textAd") is not None else None,
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_ads_searchads360_v0_common_call_to_action_asset import GoogleAdsSearchads360V0CommonCallToActionAsset
from openapi_client.models.google_ads_searchads360_v0_common_image_asset import GoogleAdsSearchads360V0CommonImageAsset
from openapi_client.models.google_ads_searchads360_v0_common_mobile_app_asset import GoogleAdsSearchads360V0CommonMobileAppAsset
from openapi_client.models.google_ads_searchads360_v0_common_text_asset import GoogleAdsSearchads360V0CommonTextAsset
from openapi_client.models.google_ads_searchads360_v0_common_unified_call_asset import GoogleAdsSearchads360V0CommonUnifiedCallAsset
from openapi_client.models.google_ads_searchads360_v0_common_unified_callout_asset import GoogleAdsSearchads360V0CommonUnifiedCalloutAsset
from openapi_client.models.google_ads_searchads360_v0_common_unified_location_asset import GoogleAdsSearchads360V0CommonUnifiedLocationAsset
from openapi_client.models.google_ads_searchads360_v0_common_unified_page_feed_asset import GoogleAdsSearchads360V0CommonUnifiedPageFeedAsset
from openapi_client.models.google_ads_searchads360_v0_common_unified_sitelink_asset import GoogleAdsSearchads360V0CommonUnifiedSitelinkAsset
from openapi_client.models.google_ads_searchads360_v0_common_youtube_video_asset import GoogleAdsSearchads360V0CommonYoutubeVideoAsset
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0ResourcesAsset(BaseModel):
    """
    Asset is a part of an ad which can be shared across multiple ads. It can be an image (ImageAsset), a video (YoutubeVideoAsset), etc. Assets are immutable and cannot be removed. To stop an asset from serving, remove the asset from the entity that is using it.
    """ # noqa: E501
    call_asset: Optional[GoogleAdsSearchads360V0CommonUnifiedCallAsset] = Field(default=None, alias="callAsset")
    call_to_action_asset: Optional[GoogleAdsSearchads360V0CommonCallToActionAsset] = Field(default=None, alias="callToActionAsset")
    callout_asset: Optional[GoogleAdsSearchads360V0CommonUnifiedCalloutAsset] = Field(default=None, alias="calloutAsset")
    creation_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when this asset was created. The timestamp is in the customer's time zone and in \"yyyy-MM-dd HH:mm:ss\" format.", alias="creationTime")
    engine_status: Optional[StrictStr] = Field(default=None, description="Output only. The Engine Status for an asset.", alias="engineStatus")
    final_urls: Optional[List[StrictStr]] = Field(default=None, description="A list of possible final URLs after all cross domain redirects.", alias="finalUrls")
    id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the asset.")
    image_asset: Optional[GoogleAdsSearchads360V0CommonImageAsset] = Field(default=None, alias="imageAsset")
    last_modified_time: Optional[StrictStr] = Field(default=None, description="Output only. The datetime when this asset was last modified. The datetime is in the customer's time zone and in \"yyyy-MM-dd HH:mm:ss.ssssss\" format.", alias="lastModifiedTime")
    location_asset: Optional[GoogleAdsSearchads360V0CommonUnifiedLocationAsset] = Field(default=None, alias="locationAsset")
    mobile_app_asset: Optional[GoogleAdsSearchads360V0CommonMobileAppAsset] = Field(default=None, alias="mobileAppAsset")
    name: Optional[StrictStr] = Field(default=None, description="Optional name of the asset.")
    page_feed_asset: Optional[GoogleAdsSearchads360V0CommonUnifiedPageFeedAsset] = Field(default=None, alias="pageFeedAsset")
    resource_name: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of the asset. Asset resource names have the form: `customers/{customer_id}/assets/{asset_id}`", alias="resourceName")
    sitelink_asset: Optional[GoogleAdsSearchads360V0CommonUnifiedSitelinkAsset] = Field(default=None, alias="sitelinkAsset")
    status: Optional[StrictStr] = Field(default=None, description="Output only. The status of the asset.")
    text_asset: Optional[GoogleAdsSearchads360V0CommonTextAsset] = Field(default=None, alias="textAsset")
    tracking_url_template: Optional[StrictStr] = Field(default=None, description="URL template for constructing a tracking URL.", alias="trackingUrlTemplate")
    type: Optional[StrictStr] = Field(default=None, description="Output only. Type of the asset.")
    youtube_video_asset: Optional[GoogleAdsSearchads360V0CommonYoutubeVideoAsset] = Field(default=None, alias="youtubeVideoAsset")
    __properties: ClassVar[List[str]] = ["callAsset", "callToActionAsset", "calloutAsset", "creationTime", "engineStatus", "finalUrls", "id", "imageAsset", "lastModifiedTime", "locationAsset", "mobileAppAsset", "name", "pageFeedAsset", "resourceName", "sitelinkAsset", "status", "textAsset", "trackingUrlTemplate", "type", "youtubeVideoAsset"]

    @field_validator('engine_status')
    def engine_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'SERVING', 'SERVING_LIMITED', 'DISAPPROVED', 'DISABLED', 'REMOVED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'SERVING', 'SERVING_LIMITED', 'DISAPPROVED', 'DISABLED', 'REMOVED')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'REMOVED', 'ARCHIVED', 'PENDING_SYSTEM_GENERATED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'REMOVED', 'ARCHIVED', 'PENDING_SYSTEM_GENERATED')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'YOUTUBE_VIDEO', 'MEDIA_BUNDLE', 'IMAGE', 'TEXT', 'LEAD_FORM', 'BOOK_ON_GOOGLE', 'PROMOTION', 'CALLOUT', 'STRUCTURED_SNIPPET', 'SITELINK', 'PAGE_FEED', 'DYNAMIC_EDUCATION', 'MOBILE_APP', 'HOTEL_CALLOUT', 'CALL', 'PRICE', 'CALL_TO_ACTION', 'DYNAMIC_REAL_ESTATE', 'DYNAMIC_CUSTOM', 'DYNAMIC_HOTELS_AND_RENTALS', 'DYNAMIC_FLIGHTS', 'DISCOVERY_CAROUSEL_CARD', 'DYNAMIC_TRAVEL', 'DYNAMIC_LOCAL', 'DYNAMIC_JOBS', 'LOCATION', 'HOTEL_PROPERTY']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'YOUTUBE_VIDEO', 'MEDIA_BUNDLE', 'IMAGE', 'TEXT', 'LEAD_FORM', 'BOOK_ON_GOOGLE', 'PROMOTION', 'CALLOUT', 'STRUCTURED_SNIPPET', 'SITELINK', 'PAGE_FEED', 'DYNAMIC_EDUCATION', 'MOBILE_APP', 'HOTEL_CALLOUT', 'CALL', 'PRICE', 'CALL_TO_ACTION', 'DYNAMIC_REAL_ESTATE', 'DYNAMIC_CUSTOM', 'DYNAMIC_HOTELS_AND_RENTALS', 'DYNAMIC_FLIGHTS', 'DISCOVERY_CAROUSEL_CARD', 'DYNAMIC_TRAVEL', 'DYNAMIC_LOCAL', 'DYNAMIC_JOBS', 'LOCATION', 'HOTEL_PROPERTY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesAsset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creation_time",
            "engine_status",
            "id",
            "last_modified_time",
            "status",
            "type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of call_asset
        if self.call_asset:
            _dict['callAsset'] = self.call_asset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of call_to_action_asset
        if self.call_to_action_asset:
            _dict['callToActionAsset'] = self.call_to_action_asset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of callout_asset
        if self.callout_asset:
            _dict['calloutAsset'] = self.callout_asset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_asset
        if self.image_asset:
            _dict['imageAsset'] = self.image_asset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location_asset
        if self.location_asset:
            _dict['locationAsset'] = self.location_asset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mobile_app_asset
        if self.mobile_app_asset:
            _dict['mobileAppAsset'] = self.mobile_app_asset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of page_feed_asset
        if self.page_feed_asset:
            _dict['pageFeedAsset'] = self.page_feed_asset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sitelink_asset
        if self.sitelink_asset:
            _dict['sitelinkAsset'] = self.sitelink_asset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_asset
        if self.text_asset:
            _dict['textAsset'] = self.text_asset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of youtube_video_asset
        if self.youtube_video_asset:
            _dict['youtubeVideoAsset'] = self.youtube_video_asset.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesAsset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "callAsset": GoogleAdsSearchads360V0CommonUnifiedCallAsset.from_dict(obj["callAsset"]) if obj.get("callAsset") is not None else None,
            "callToActionAsset": GoogleAdsSearchads360V0CommonCallToActionAsset.from_dict(obj["callToActionAsset"]) if obj.get("callToActionAsset") is not None else None,
            "calloutAsset": GoogleAdsSearchads360V0CommonUnifiedCalloutAsset.from_dict(obj["calloutAsset"]) if obj.get("calloutAsset") is not None else None,
            "creationTime": obj.get("creationTime"),
            "engineStatus": obj.get("engineStatus"),
            "finalUrls": obj.get("finalUrls"),
            "id": obj.get("id"),
            "imageAsset": GoogleAdsSearchads360V0CommonImageAsset.from_dict(obj["imageAsset"]) if obj.get("imageAsset") is not None else None,
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "locationAsset": GoogleAdsSearchads360V0CommonUnifiedLocationAsset.from_dict(obj["locationAsset"]) if obj.get("locationAsset") is not None else None,
            "mobileAppAsset": GoogleAdsSearchads360V0CommonMobileAppAsset.from_dict(obj["mobileAppAsset"]) if obj.get("mobileAppAsset") is not None else None,
            "name": obj.get("name"),
            "pageFeedAsset": GoogleAdsSearchads360V0CommonUnifiedPageFeedAsset.from_dict(obj["pageFeedAsset"]) if obj.get("pageFeedAsset") is not None else None,
            "resourceName": obj.get("resourceName"),
            "sitelinkAsset": GoogleAdsSearchads360V0CommonUnifiedSitelinkAsset.from_dict(obj["sitelinkAsset"]) if obj.get("sitelinkAsset") is not None else None,
            "status": obj.get("status"),
            "textAsset": GoogleAdsSearchads360V0CommonTextAsset.from_dict(obj["textAsset"]) if obj.get("textAsset") is not None else None,
            "trackingUrlTemplate": obj.get("trackingUrlTemplate"),
            "type": obj.get("type"),
            "youtubeVideoAsset": GoogleAdsSearchads360V0CommonYoutubeVideoAsset.from_dict(obj["youtubeVideoAsset"]) if obj.get("youtubeVideoAsset") is not None else None
        })
        return _obj



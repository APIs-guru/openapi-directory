# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0CommonSearchAds360ExpandedTextAdInfo(BaseModel):
    """
    A Search Ads 360 expanded text ad.
    """ # noqa: E501
    ad_tracking_id: Optional[StrictStr] = Field(default=None, description="The tracking id of the ad.", alias="adTrackingId")
    description1: Optional[StrictStr] = Field(default=None, description="The first line of the ad's description.")
    description2: Optional[StrictStr] = Field(default=None, description="The second line of the ad's description.")
    headline: Optional[StrictStr] = Field(default=None, description="The headline of the ad.")
    headline2: Optional[StrictStr] = Field(default=None, description="The second headline of the ad.")
    headline3: Optional[StrictStr] = Field(default=None, description="The third headline of the ad.")
    path1: Optional[StrictStr] = Field(default=None, description="Text appended to the auto-generated visible URL with a delimiter.")
    path2: Optional[StrictStr] = Field(default=None, description="Text appended to path1 with a delimiter.")
    __properties: ClassVar[List[str]] = ["adTrackingId", "description1", "description2", "headline", "headline2", "headline3", "path1", "path2"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0CommonSearchAds360ExpandedTextAdInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0CommonSearchAds360ExpandedTextAdInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adTrackingId": obj.get("adTrackingId"),
            "description1": obj.get("description1"),
            "description2": obj.get("description2"),
            "headline": obj.get("headline"),
            "headline2": obj.get("headline2"),
            "headline3": obj.get("headline3"),
            "path1": obj.get("path1"),
            "path2": obj.get("path2")
        })
        return _obj



# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0ResourcesVisit(BaseModel):
    """
    A visit.
    """ # noqa: E501
    ad_id: Optional[StrictStr] = Field(default=None, description="Output only. Ad ID. A value of 0 indicates that the ad is unattributed.", alias="adId")
    asset_field_type: Optional[StrictStr] = Field(default=None, description="Output only. Asset field type of the visit event.", alias="assetFieldType")
    asset_id: Optional[StrictStr] = Field(default=None, description="Output only. ID of the asset which was interacted with during the visit event.", alias="assetId")
    click_id: Optional[StrictStr] = Field(default=None, description="Output only. A unique string for each visit that is passed to the landing page as the click id URL parameter.", alias="clickId")
    criterion_id: Optional[StrictStr] = Field(default=None, description="Output only. Search Ads 360 keyword ID. A value of 0 indicates that the keyword is unattributed.", alias="criterionId")
    id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the visit.")
    merchant_id: Optional[StrictStr] = Field(default=None, description="Output only. The Search Ads 360 inventory account ID containing the product that was clicked on. Search Ads 360 generates this ID when you link an inventory account in Search Ads 360.", alias="merchantId")
    product_channel: Optional[StrictStr] = Field(default=None, description="Output only. The sales channel of the product that was clicked on: Online or Local.", alias="productChannel")
    product_country_code: Optional[StrictStr] = Field(default=None, description="Output only. The country (ISO-3166 format) registered for the inventory feed that contains the product clicked on.", alias="productCountryCode")
    product_id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the product clicked on.", alias="productId")
    product_language_code: Optional[StrictStr] = Field(default=None, description="Output only. The language (ISO-639-1) that has been set for the Merchant Center feed containing data about the product.", alias="productLanguageCode")
    product_store_id: Optional[StrictStr] = Field(default=None, description="Output only. The store in the Local Inventory Ad that was clicked on. This should match the store IDs used in your local products feed.", alias="productStoreId")
    resource_name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the visit. Visit resource names have the form: `customers/{customer_id}/visits/{ad_group_id}~{criterion_id}~{ds_visit_id}`", alias="resourceName")
    visit_date_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp of the visit event. The timestamp is in the customer's time zone and in \"yyyy-MM-dd HH:mm:ss\" format.", alias="visitDateTime")
    __properties: ClassVar[List[str]] = ["adId", "assetFieldType", "assetId", "clickId", "criterionId", "id", "merchantId", "productChannel", "productCountryCode", "productId", "productLanguageCode", "productStoreId", "resourceName", "visitDateTime"]

    @field_validator('asset_field_type')
    def asset_field_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'HEADLINE', 'DESCRIPTION', 'MANDATORY_AD_TEXT', 'MARKETING_IMAGE', 'MEDIA_BUNDLE', 'YOUTUBE_VIDEO', 'BOOK_ON_GOOGLE', 'LEAD_FORM', 'PROMOTION', 'CALLOUT', 'STRUCTURED_SNIPPET', 'SITELINK', 'MOBILE_APP', 'HOTEL_CALLOUT', 'CALL', 'PRICE', 'LONG_HEADLINE', 'BUSINESS_NAME', 'SQUARE_MARKETING_IMAGE', 'PORTRAIT_MARKETING_IMAGE', 'LOGO', 'LANDSCAPE_LOGO', 'VIDEO', 'CALL_TO_ACTION_SELECTION', 'AD_IMAGE', 'BUSINESS_LOGO', 'HOTEL_PROPERTY']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'HEADLINE', 'DESCRIPTION', 'MANDATORY_AD_TEXT', 'MARKETING_IMAGE', 'MEDIA_BUNDLE', 'YOUTUBE_VIDEO', 'BOOK_ON_GOOGLE', 'LEAD_FORM', 'PROMOTION', 'CALLOUT', 'STRUCTURED_SNIPPET', 'SITELINK', 'MOBILE_APP', 'HOTEL_CALLOUT', 'CALL', 'PRICE', 'LONG_HEADLINE', 'BUSINESS_NAME', 'SQUARE_MARKETING_IMAGE', 'PORTRAIT_MARKETING_IMAGE', 'LOGO', 'LANDSCAPE_LOGO', 'VIDEO', 'CALL_TO_ACTION_SELECTION', 'AD_IMAGE', 'BUSINESS_LOGO', 'HOTEL_PROPERTY')")
        return value

    @field_validator('product_channel')
    def product_channel_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'ONLINE', 'LOCAL']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'ONLINE', 'LOCAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesVisit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "ad_id",
            "asset_field_type",
            "asset_id",
            "click_id",
            "criterion_id",
            "id",
            "merchant_id",
            "product_channel",
            "product_country_code",
            "product_id",
            "product_language_code",
            "product_store_id",
            "resource_name",
            "visit_date_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesVisit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adId": obj.get("adId"),
            "assetFieldType": obj.get("assetFieldType"),
            "assetId": obj.get("assetId"),
            "clickId": obj.get("clickId"),
            "criterionId": obj.get("criterionId"),
            "id": obj.get("id"),
            "merchantId": obj.get("merchantId"),
            "productChannel": obj.get("productChannel"),
            "productCountryCode": obj.get("productCountryCode"),
            "productId": obj.get("productId"),
            "productLanguageCode": obj.get("productLanguageCode"),
            "productStoreId": obj.get("productStoreId"),
            "resourceName": obj.get("resourceName"),
            "visitDateTime": obj.get("visitDateTime")
        })
        return _obj



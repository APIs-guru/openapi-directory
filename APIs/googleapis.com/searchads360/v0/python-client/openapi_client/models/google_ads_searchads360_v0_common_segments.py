# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_ads_searchads360_v0_common_asset_interaction_target import GoogleAdsSearchads360V0CommonAssetInteractionTarget
from openapi_client.models.google_ads_searchads360_v0_common_keyword import GoogleAdsSearchads360V0CommonKeyword
from openapi_client.models.google_ads_searchads360_v0_common_value import GoogleAdsSearchads360V0CommonValue
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0CommonSegments(BaseModel):
    """
    Segment only fields.
    """ # noqa: E501
    ad_network_type: Optional[StrictStr] = Field(default=None, description="Ad network type.", alias="adNetworkType")
    asset_interaction_target: Optional[GoogleAdsSearchads360V0CommonAssetInteractionTarget] = Field(default=None, alias="assetInteractionTarget")
    conversion_action: Optional[StrictStr] = Field(default=None, description="Resource name of the conversion action.", alias="conversionAction")
    conversion_action_category: Optional[StrictStr] = Field(default=None, description="Conversion action category.", alias="conversionActionCategory")
    conversion_action_name: Optional[StrictStr] = Field(default=None, description="Conversion action name.", alias="conversionActionName")
    conversion_custom_dimensions: Optional[List[GoogleAdsSearchads360V0CommonValue]] = Field(default=None, description="The conversion custom dimensions.", alias="conversionCustomDimensions")
    var_date: Optional[StrictStr] = Field(default=None, description="Date to which metrics apply. yyyy-MM-dd format, for example, 2018-04-17.", alias="date")
    day_of_week: Optional[StrictStr] = Field(default=None, description="Day of the week, for example, MONDAY.", alias="dayOfWeek")
    device: Optional[StrictStr] = Field(default=None, description="Device to which metrics apply.")
    keyword: Optional[GoogleAdsSearchads360V0CommonKeyword] = None
    month: Optional[StrictStr] = Field(default=None, description="Month as represented by the date of the first day of a month. Formatted as yyyy-MM-dd.")
    product_bidding_category_level1: Optional[StrictStr] = Field(default=None, description="Bidding category (level 1) of the product.", alias="productBiddingCategoryLevel1")
    product_bidding_category_level2: Optional[StrictStr] = Field(default=None, description="Bidding category (level 2) of the product.", alias="productBiddingCategoryLevel2")
    product_bidding_category_level3: Optional[StrictStr] = Field(default=None, description="Bidding category (level 3) of the product.", alias="productBiddingCategoryLevel3")
    product_bidding_category_level4: Optional[StrictStr] = Field(default=None, description="Bidding category (level 4) of the product.", alias="productBiddingCategoryLevel4")
    product_bidding_category_level5: Optional[StrictStr] = Field(default=None, description="Bidding category (level 5) of the product.", alias="productBiddingCategoryLevel5")
    product_brand: Optional[StrictStr] = Field(default=None, description="Brand of the product.", alias="productBrand")
    product_channel: Optional[StrictStr] = Field(default=None, description="Channel of the product.", alias="productChannel")
    product_channel_exclusivity: Optional[StrictStr] = Field(default=None, description="Channel exclusivity of the product.", alias="productChannelExclusivity")
    product_condition: Optional[StrictStr] = Field(default=None, description="Condition of the product.", alias="productCondition")
    product_country: Optional[StrictStr] = Field(default=None, description="Resource name of the geo target constant for the country of sale of the product.", alias="productCountry")
    product_custom_attribute0: Optional[StrictStr] = Field(default=None, description="Custom attribute 0 of the product.", alias="productCustomAttribute0")
    product_custom_attribute1: Optional[StrictStr] = Field(default=None, description="Custom attribute 1 of the product.", alias="productCustomAttribute1")
    product_custom_attribute2: Optional[StrictStr] = Field(default=None, description="Custom attribute 2 of the product.", alias="productCustomAttribute2")
    product_custom_attribute3: Optional[StrictStr] = Field(default=None, description="Custom attribute 3 of the product.", alias="productCustomAttribute3")
    product_custom_attribute4: Optional[StrictStr] = Field(default=None, description="Custom attribute 4 of the product.", alias="productCustomAttribute4")
    product_item_id: Optional[StrictStr] = Field(default=None, description="Item ID of the product.", alias="productItemId")
    product_language: Optional[StrictStr] = Field(default=None, description="Resource name of the language constant for the language of the product.", alias="productLanguage")
    product_sold_bidding_category_level1: Optional[StrictStr] = Field(default=None, description="Bidding category (level 1) of the product sold.", alias="productSoldBiddingCategoryLevel1")
    product_sold_bidding_category_level2: Optional[StrictStr] = Field(default=None, description="Bidding category (level 2) of the product sold.", alias="productSoldBiddingCategoryLevel2")
    product_sold_bidding_category_level3: Optional[StrictStr] = Field(default=None, description="Bidding category (level 3) of the product sold.", alias="productSoldBiddingCategoryLevel3")
    product_sold_bidding_category_level4: Optional[StrictStr] = Field(default=None, description="Bidding category (level 4) of the product sold.", alias="productSoldBiddingCategoryLevel4")
    product_sold_bidding_category_level5: Optional[StrictStr] = Field(default=None, description="Bidding category (level 5) of the product sold.", alias="productSoldBiddingCategoryLevel5")
    product_sold_brand: Optional[StrictStr] = Field(default=None, description="Brand of the product sold.", alias="productSoldBrand")
    product_sold_condition: Optional[StrictStr] = Field(default=None, description="Condition of the product sold.", alias="productSoldCondition")
    product_sold_custom_attribute0: Optional[StrictStr] = Field(default=None, description="Custom attribute 0 of the product sold.", alias="productSoldCustomAttribute0")
    product_sold_custom_attribute1: Optional[StrictStr] = Field(default=None, description="Custom attribute 1 of the product sold.", alias="productSoldCustomAttribute1")
    product_sold_custom_attribute2: Optional[StrictStr] = Field(default=None, description="Custom attribute 2 of the product sold.", alias="productSoldCustomAttribute2")
    product_sold_custom_attribute3: Optional[StrictStr] = Field(default=None, description="Custom attribute 3 of the product sold.", alias="productSoldCustomAttribute3")
    product_sold_custom_attribute4: Optional[StrictStr] = Field(default=None, description="Custom attribute 4 of the product sold.", alias="productSoldCustomAttribute4")
    product_sold_item_id: Optional[StrictStr] = Field(default=None, description="Item ID of the product sold.", alias="productSoldItemId")
    product_sold_title: Optional[StrictStr] = Field(default=None, description="Title of the product sold.", alias="productSoldTitle")
    product_sold_type_l1: Optional[StrictStr] = Field(default=None, description="Type (level 1) of the product sold.", alias="productSoldTypeL1")
    product_sold_type_l2: Optional[StrictStr] = Field(default=None, description="Type (level 2) of the product sold.", alias="productSoldTypeL2")
    product_sold_type_l3: Optional[StrictStr] = Field(default=None, description="Type (level 3) of the product sold.", alias="productSoldTypeL3")
    product_sold_type_l4: Optional[StrictStr] = Field(default=None, description="Type (level 4) of the product sold.", alias="productSoldTypeL4")
    product_sold_type_l5: Optional[StrictStr] = Field(default=None, description="Type (level 5) of the product sold.", alias="productSoldTypeL5")
    product_store_id: Optional[StrictStr] = Field(default=None, description="Store ID of the product.", alias="productStoreId")
    product_title: Optional[StrictStr] = Field(default=None, description="Title of the product.", alias="productTitle")
    product_type_l1: Optional[StrictStr] = Field(default=None, description="Type (level 1) of the product.", alias="productTypeL1")
    product_type_l2: Optional[StrictStr] = Field(default=None, description="Type (level 2) of the product.", alias="productTypeL2")
    product_type_l3: Optional[StrictStr] = Field(default=None, description="Type (level 3) of the product.", alias="productTypeL3")
    product_type_l4: Optional[StrictStr] = Field(default=None, description="Type (level 4) of the product.", alias="productTypeL4")
    product_type_l5: Optional[StrictStr] = Field(default=None, description="Type (level 5) of the product.", alias="productTypeL5")
    quarter: Optional[StrictStr] = Field(default=None, description="Quarter as represented by the date of the first day of a quarter. Uses the calendar year for quarters, for example, the second quarter of 2018 starts on 2018-04-01. Formatted as yyyy-MM-dd.")
    raw_event_conversion_dimensions: Optional[List[GoogleAdsSearchads360V0CommonValue]] = Field(default=None, description="The raw event conversion dimensions.", alias="rawEventConversionDimensions")
    week: Optional[StrictStr] = Field(default=None, description="Week as defined as Monday through Sunday, and represented by the date of Monday. Formatted as yyyy-MM-dd.")
    year: Optional[StrictInt] = Field(default=None, description="Year, formatted as yyyy.")
    __properties: ClassVar[List[str]] = ["adNetworkType", "assetInteractionTarget", "conversionAction", "conversionActionCategory", "conversionActionName", "conversionCustomDimensions", "date", "dayOfWeek", "device", "keyword", "month", "productBiddingCategoryLevel1", "productBiddingCategoryLevel2", "productBiddingCategoryLevel3", "productBiddingCategoryLevel4", "productBiddingCategoryLevel5", "productBrand", "productChannel", "productChannelExclusivity", "productCondition", "productCountry", "productCustomAttribute0", "productCustomAttribute1", "productCustomAttribute2", "productCustomAttribute3", "productCustomAttribute4", "productItemId", "productLanguage", "productSoldBiddingCategoryLevel1", "productSoldBiddingCategoryLevel2", "productSoldBiddingCategoryLevel3", "productSoldBiddingCategoryLevel4", "productSoldBiddingCategoryLevel5", "productSoldBrand", "productSoldCondition", "productSoldCustomAttribute0", "productSoldCustomAttribute1", "productSoldCustomAttribute2", "productSoldCustomAttribute3", "productSoldCustomAttribute4", "productSoldItemId", "productSoldTitle", "productSoldTypeL1", "productSoldTypeL2", "productSoldTypeL3", "productSoldTypeL4", "productSoldTypeL5", "productStoreId", "productTitle", "productTypeL1", "productTypeL2", "productTypeL3", "productTypeL4", "productTypeL5", "quarter", "rawEventConversionDimensions", "week", "year"]

    @field_validator('ad_network_type')
    def ad_network_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'SEARCH', 'SEARCH_PARTNERS', 'CONTENT', 'YOUTUBE_SEARCH', 'YOUTUBE_WATCH', 'MIXED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'SEARCH', 'SEARCH_PARTNERS', 'CONTENT', 'YOUTUBE_SEARCH', 'YOUTUBE_WATCH', 'MIXED')")
        return value

    @field_validator('conversion_action_category')
    def conversion_action_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'DEFAULT', 'PAGE_VIEW', 'PURCHASE', 'SIGNUP', 'LEAD', 'DOWNLOAD', 'ADD_TO_CART', 'BEGIN_CHECKOUT', 'SUBSCRIBE_PAID', 'PHONE_CALL_LEAD', 'IMPORTED_LEAD', 'SUBMIT_LEAD_FORM', 'BOOK_APPOINTMENT', 'REQUEST_QUOTE', 'GET_DIRECTIONS', 'OUTBOUND_CLICK', 'CONTACT', 'ENGAGEMENT', 'STORE_VISIT', 'STORE_SALE', 'QUALIFIED_LEAD', 'CONVERTED_LEAD']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'DEFAULT', 'PAGE_VIEW', 'PURCHASE', 'SIGNUP', 'LEAD', 'DOWNLOAD', 'ADD_TO_CART', 'BEGIN_CHECKOUT', 'SUBSCRIBE_PAID', 'PHONE_CALL_LEAD', 'IMPORTED_LEAD', 'SUBMIT_LEAD_FORM', 'BOOK_APPOINTMENT', 'REQUEST_QUOTE', 'GET_DIRECTIONS', 'OUTBOUND_CLICK', 'CONTACT', 'ENGAGEMENT', 'STORE_VISIT', 'STORE_SALE', 'QUALIFIED_LEAD', 'CONVERTED_LEAD')")
        return value

    @field_validator('day_of_week')
    def day_of_week_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY')")
        return value

    @field_validator('device')
    def device_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'MOBILE', 'TABLET', 'DESKTOP', 'CONNECTED_TV', 'OTHER']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'MOBILE', 'TABLET', 'DESKTOP', 'CONNECTED_TV', 'OTHER')")
        return value

    @field_validator('product_channel')
    def product_channel_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'ONLINE', 'LOCAL']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'ONLINE', 'LOCAL')")
        return value

    @field_validator('product_channel_exclusivity')
    def product_channel_exclusivity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'SINGLE_CHANNEL', 'MULTI_CHANNEL']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'SINGLE_CHANNEL', 'MULTI_CHANNEL')")
        return value

    @field_validator('product_condition')
    def product_condition_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'OLD', 'NEW', 'REFURBISHED', 'USED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'OLD', 'NEW', 'REFURBISHED', 'USED')")
        return value

    @field_validator('product_sold_condition')
    def product_sold_condition_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'OLD', 'NEW', 'REFURBISHED', 'USED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'OLD', 'NEW', 'REFURBISHED', 'USED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0CommonSegments from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of asset_interaction_target
        if self.asset_interaction_target:
            _dict['assetInteractionTarget'] = self.asset_interaction_target.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in conversion_custom_dimensions (list)
        _items = []
        if self.conversion_custom_dimensions:
            for _item_conversion_custom_dimensions in self.conversion_custom_dimensions:
                if _item_conversion_custom_dimensions:
                    _items.append(_item_conversion_custom_dimensions.to_dict())
            _dict['conversionCustomDimensions'] = _items
        # override the default output from pydantic by calling `to_dict()` of keyword
        if self.keyword:
            _dict['keyword'] = self.keyword.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in raw_event_conversion_dimensions (list)
        _items = []
        if self.raw_event_conversion_dimensions:
            for _item_raw_event_conversion_dimensions in self.raw_event_conversion_dimensions:
                if _item_raw_event_conversion_dimensions:
                    _items.append(_item_raw_event_conversion_dimensions.to_dict())
            _dict['rawEventConversionDimensions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0CommonSegments from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adNetworkType": obj.get("adNetworkType"),
            "assetInteractionTarget": GoogleAdsSearchads360V0CommonAssetInteractionTarget.from_dict(obj["assetInteractionTarget"]) if obj.get("assetInteractionTarget") is not None else None,
            "conversionAction": obj.get("conversionAction"),
            "conversionActionCategory": obj.get("conversionActionCategory"),
            "conversionActionName": obj.get("conversionActionName"),
            "conversionCustomDimensions": [GoogleAdsSearchads360V0CommonValue.from_dict(_item) for _item in obj["conversionCustomDimensions"]] if obj.get("conversionCustomDimensions") is not None else None,
            "date": obj.get("date"),
            "dayOfWeek": obj.get("dayOfWeek"),
            "device": obj.get("device"),
            "keyword": GoogleAdsSearchads360V0CommonKeyword.from_dict(obj["keyword"]) if obj.get("keyword") is not None else None,
            "month": obj.get("month"),
            "productBiddingCategoryLevel1": obj.get("productBiddingCategoryLevel1"),
            "productBiddingCategoryLevel2": obj.get("productBiddingCategoryLevel2"),
            "productBiddingCategoryLevel3": obj.get("productBiddingCategoryLevel3"),
            "productBiddingCategoryLevel4": obj.get("productBiddingCategoryLevel4"),
            "productBiddingCategoryLevel5": obj.get("productBiddingCategoryLevel5"),
            "productBrand": obj.get("productBrand"),
            "productChannel": obj.get("productChannel"),
            "productChannelExclusivity": obj.get("productChannelExclusivity"),
            "productCondition": obj.get("productCondition"),
            "productCountry": obj.get("productCountry"),
            "productCustomAttribute0": obj.get("productCustomAttribute0"),
            "productCustomAttribute1": obj.get("productCustomAttribute1"),
            "productCustomAttribute2": obj.get("productCustomAttribute2"),
            "productCustomAttribute3": obj.get("productCustomAttribute3"),
            "productCustomAttribute4": obj.get("productCustomAttribute4"),
            "productItemId": obj.get("productItemId"),
            "productLanguage": obj.get("productLanguage"),
            "productSoldBiddingCategoryLevel1": obj.get("productSoldBiddingCategoryLevel1"),
            "productSoldBiddingCategoryLevel2": obj.get("productSoldBiddingCategoryLevel2"),
            "productSoldBiddingCategoryLevel3": obj.get("productSoldBiddingCategoryLevel3"),
            "productSoldBiddingCategoryLevel4": obj.get("productSoldBiddingCategoryLevel4"),
            "productSoldBiddingCategoryLevel5": obj.get("productSoldBiddingCategoryLevel5"),
            "productSoldBrand": obj.get("productSoldBrand"),
            "productSoldCondition": obj.get("productSoldCondition"),
            "productSoldCustomAttribute0": obj.get("productSoldCustomAttribute0"),
            "productSoldCustomAttribute1": obj.get("productSoldCustomAttribute1"),
            "productSoldCustomAttribute2": obj.get("productSoldCustomAttribute2"),
            "productSoldCustomAttribute3": obj.get("productSoldCustomAttribute3"),
            "productSoldCustomAttribute4": obj.get("productSoldCustomAttribute4"),
            "productSoldItemId": obj.get("productSoldItemId"),
            "productSoldTitle": obj.get("productSoldTitle"),
            "productSoldTypeL1": obj.get("productSoldTypeL1"),
            "productSoldTypeL2": obj.get("productSoldTypeL2"),
            "productSoldTypeL3": obj.get("productSoldTypeL3"),
            "productSoldTypeL4": obj.get("productSoldTypeL4"),
            "productSoldTypeL5": obj.get("productSoldTypeL5"),
            "productStoreId": obj.get("productStoreId"),
            "productTitle": obj.get("productTitle"),
            "productTypeL1": obj.get("productTypeL1"),
            "productTypeL2": obj.get("productTypeL2"),
            "productTypeL3": obj.get("productTypeL3"),
            "productTypeL4": obj.get("productTypeL4"),
            "productTypeL5": obj.get("productTypeL5"),
            "quarter": obj.get("quarter"),
            "rawEventConversionDimensions": [GoogleAdsSearchads360V0CommonValue.from_dict(_item) for _item in obj["rawEventConversionDimensions"]] if obj.get("rawEventConversionDimensions") is not None else None,
            "week": obj.get("week"),
            "year": obj.get("year")
        })
        return _obj



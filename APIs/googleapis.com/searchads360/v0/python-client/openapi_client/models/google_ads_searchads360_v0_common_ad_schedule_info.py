# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0CommonAdScheduleInfo(BaseModel):
    """
    Represents an AdSchedule criterion. AdSchedule is specified as the day of the week and a time interval within which ads will be shown. No more than six AdSchedules can be added for the same day.
    """ # noqa: E501
    day_of_week: Optional[StrictStr] = Field(default=None, description="Day of the week the schedule applies to. This field is required for CREATE operations and is prohibited on UPDATE operations.", alias="dayOfWeek")
    end_hour: Optional[StrictInt] = Field(default=None, description="Ending hour in 24 hour time; 24 signifies end of the day. This field must be between 0 and 24, inclusive. This field is required for CREATE operations and is prohibited on UPDATE operations.", alias="endHour")
    end_minute: Optional[StrictStr] = Field(default=None, description="Minutes after the end hour at which this schedule ends. The schedule is exclusive of the end minute. This field is required for CREATE operations and is prohibited on UPDATE operations.", alias="endMinute")
    start_hour: Optional[StrictInt] = Field(default=None, description="Starting hour in 24 hour time. This field must be between 0 and 23, inclusive. This field is required for CREATE operations and is prohibited on UPDATE operations.", alias="startHour")
    start_minute: Optional[StrictStr] = Field(default=None, description="Minutes after the start hour at which this schedule starts. This field is required for CREATE operations and is prohibited on UPDATE operations.", alias="startMinute")
    __properties: ClassVar[List[str]] = ["dayOfWeek", "endHour", "endMinute", "startHour", "startMinute"]

    @field_validator('day_of_week')
    def day_of_week_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY')")
        return value

    @field_validator('end_minute')
    def end_minute_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'ZERO', 'FIFTEEN', 'THIRTY', 'FORTY_FIVE']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'ZERO', 'FIFTEEN', 'THIRTY', 'FORTY_FIVE')")
        return value

    @field_validator('start_minute')
    def start_minute_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'ZERO', 'FIFTEEN', 'THIRTY', 'FORTY_FIVE']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'ZERO', 'FIFTEEN', 'THIRTY', 'FORTY_FIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0CommonAdScheduleInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0CommonAdScheduleInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dayOfWeek": obj.get("dayOfWeek"),
            "endHour": obj.get("endHour"),
            "endMinute": obj.get("endMinute"),
            "startHour": obj.get("startHour"),
            "startMinute": obj.get("startMinute")
        })
        return _obj



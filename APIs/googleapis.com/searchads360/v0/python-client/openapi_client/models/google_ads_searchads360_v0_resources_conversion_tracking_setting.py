# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0ResourcesConversionTrackingSetting(BaseModel):
    """
    A collection of customer-wide settings related to Search Ads 360 Conversion Tracking.
    """ # noqa: E501
    accepted_customer_data_terms: Optional[StrictBool] = Field(default=None, description="Output only. Whether the customer has accepted customer data terms. If using cross-account conversion tracking, this value is inherited from the manager. This field is read-only. For more information, see https://support.google.com/adspolicy/answer/7475709.", alias="acceptedCustomerDataTerms")
    conversion_tracking_id: Optional[StrictStr] = Field(default=None, description="Output only. The conversion tracking id used for this account. This id doesn't indicate whether the customer uses conversion tracking (conversion_tracking_status does). This field is read-only.", alias="conversionTrackingId")
    conversion_tracking_status: Optional[StrictStr] = Field(default=None, description="Output only. Conversion tracking status. It indicates whether the customer is using conversion tracking, and who is the conversion tracking owner of this customer. If this customer is using cross-account conversion tracking, the value returned will differ based on the `login-customer-id` of the request.", alias="conversionTrackingStatus")
    cross_account_conversion_tracking_id: Optional[StrictStr] = Field(default=None, description="Output only. The conversion tracking id of the customer's manager. This is set when the customer is opted into cross-account conversion tracking, and it overrides conversion_tracking_id.", alias="crossAccountConversionTrackingId")
    enhanced_conversions_for_leads_enabled: Optional[StrictBool] = Field(default=None, description="Output only. Whether the customer is opted-in for enhanced conversions for leads. If using cross-account conversion tracking, this value is inherited from the manager. This field is read-only.", alias="enhancedConversionsForLeadsEnabled")
    google_ads_conversion_customer: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the customer where conversions are created and managed. This field is read-only.", alias="googleAdsConversionCustomer")
    google_ads_cross_account_conversion_tracking_id: Optional[StrictStr] = Field(default=None, description="Output only. The conversion tracking id of the customer's manager. This is set when the customer is opted into conversion tracking, and it overrides conversion_tracking_id. This field can only be managed through the Google Ads UI. This field is read-only.", alias="googleAdsCrossAccountConversionTrackingId")
    __properties: ClassVar[List[str]] = ["acceptedCustomerDataTerms", "conversionTrackingId", "conversionTrackingStatus", "crossAccountConversionTrackingId", "enhancedConversionsForLeadsEnabled", "googleAdsConversionCustomer", "googleAdsCrossAccountConversionTrackingId"]

    @field_validator('conversion_tracking_status')
    def conversion_tracking_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'NOT_CONVERSION_TRACKED', 'CONVERSION_TRACKING_MANAGED_BY_SELF', 'CONVERSION_TRACKING_MANAGED_BY_THIS_MANAGER', 'CONVERSION_TRACKING_MANAGED_BY_ANOTHER_MANAGER']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'NOT_CONVERSION_TRACKED', 'CONVERSION_TRACKING_MANAGED_BY_SELF', 'CONVERSION_TRACKING_MANAGED_BY_THIS_MANAGER', 'CONVERSION_TRACKING_MANAGED_BY_ANOTHER_MANAGER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesConversionTrackingSetting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "accepted_customer_data_terms",
            "conversion_tracking_id",
            "conversion_tracking_status",
            "cross_account_conversion_tracking_id",
            "enhanced_conversions_for_leads_enabled",
            "google_ads_conversion_customer",
            "google_ads_cross_account_conversion_tracking_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesConversionTrackingSetting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acceptedCustomerDataTerms": obj.get("acceptedCustomerDataTerms"),
            "conversionTrackingId": obj.get("conversionTrackingId"),
            "conversionTrackingStatus": obj.get("conversionTrackingStatus"),
            "crossAccountConversionTrackingId": obj.get("crossAccountConversionTrackingId"),
            "enhancedConversionsForLeadsEnabled": obj.get("enhancedConversionsForLeadsEnabled"),
            "googleAdsConversionCustomer": obj.get("googleAdsConversionCustomer"),
            "googleAdsCrossAccountConversionTrackingId": obj.get("googleAdsCrossAccountConversionTrackingId")
        })
        return _obj



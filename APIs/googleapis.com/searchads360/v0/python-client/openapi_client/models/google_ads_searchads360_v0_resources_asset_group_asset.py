# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0ResourcesAssetGroupAsset(BaseModel):
    """
    AssetGroupAsset is the link between an asset and an asset group. Adding an AssetGroupAsset links an asset with an asset group.
    """ # noqa: E501
    asset: Optional[StrictStr] = Field(default=None, description="Immutable. The asset which this asset group asset is linking.")
    asset_group: Optional[StrictStr] = Field(default=None, description="Immutable. The asset group which this asset group asset is linking.", alias="assetGroup")
    field_type: Optional[StrictStr] = Field(default=None, description="The description of the placement of the asset within the asset group. For example: HEADLINE, YOUTUBE_VIDEO etc", alias="fieldType")
    resource_name: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of the asset group asset. Asset group asset resource name have the form: `customers/{customer_id}/assetGroupAssets/{asset_group_id}~{asset_id}~{field_type}`", alias="resourceName")
    status: Optional[StrictStr] = Field(default=None, description="The status of the link between an asset and asset group.")
    __properties: ClassVar[List[str]] = ["asset", "assetGroup", "fieldType", "resourceName", "status"]

    @field_validator('field_type')
    def field_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'HEADLINE', 'DESCRIPTION', 'MANDATORY_AD_TEXT', 'MARKETING_IMAGE', 'MEDIA_BUNDLE', 'YOUTUBE_VIDEO', 'BOOK_ON_GOOGLE', 'LEAD_FORM', 'PROMOTION', 'CALLOUT', 'STRUCTURED_SNIPPET', 'SITELINK', 'MOBILE_APP', 'HOTEL_CALLOUT', 'CALL', 'PRICE', 'LONG_HEADLINE', 'BUSINESS_NAME', 'SQUARE_MARKETING_IMAGE', 'PORTRAIT_MARKETING_IMAGE', 'LOGO', 'LANDSCAPE_LOGO', 'VIDEO', 'CALL_TO_ACTION_SELECTION', 'AD_IMAGE', 'BUSINESS_LOGO', 'HOTEL_PROPERTY']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'HEADLINE', 'DESCRIPTION', 'MANDATORY_AD_TEXT', 'MARKETING_IMAGE', 'MEDIA_BUNDLE', 'YOUTUBE_VIDEO', 'BOOK_ON_GOOGLE', 'LEAD_FORM', 'PROMOTION', 'CALLOUT', 'STRUCTURED_SNIPPET', 'SITELINK', 'MOBILE_APP', 'HOTEL_CALLOUT', 'CALL', 'PRICE', 'LONG_HEADLINE', 'BUSINESS_NAME', 'SQUARE_MARKETING_IMAGE', 'PORTRAIT_MARKETING_IMAGE', 'LOGO', 'LANDSCAPE_LOGO', 'VIDEO', 'CALL_TO_ACTION_SELECTION', 'AD_IMAGE', 'BUSINESS_LOGO', 'HOTEL_PROPERTY')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'REMOVED', 'PAUSED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'REMOVED', 'PAUSED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesAssetGroupAsset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesAssetGroupAsset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asset": obj.get("asset"),
            "assetGroup": obj.get("assetGroup"),
            "fieldType": obj.get("fieldType"),
            "resourceName": obj.get("resourceName"),
            "status": obj.get("status")
        })
        return _obj



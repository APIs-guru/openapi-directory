# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_ads_searchads360_v0_resources_conversion_action_attribution_model_settings import GoogleAdsSearchads360V0ResourcesConversionActionAttributionModelSettings
from openapi_client.models.google_ads_searchads360_v0_resources_conversion_action_floodlight_settings import GoogleAdsSearchads360V0ResourcesConversionActionFloodlightSettings
from openapi_client.models.google_ads_searchads360_v0_resources_conversion_action_value_settings import GoogleAdsSearchads360V0ResourcesConversionActionValueSettings
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0ResourcesConversionAction(BaseModel):
    """
    A conversion action.
    """ # noqa: E501
    app_id: Optional[StrictStr] = Field(default=None, description="App ID for an app conversion action.", alias="appId")
    attribution_model_settings: Optional[GoogleAdsSearchads360V0ResourcesConversionActionAttributionModelSettings] = Field(default=None, alias="attributionModelSettings")
    category: Optional[StrictStr] = Field(default=None, description="The category of conversions reported for this conversion action.")
    click_through_lookback_window_days: Optional[StrictStr] = Field(default=None, description="The maximum number of days that may elapse between an interaction (for example, a click) and a conversion event.", alias="clickThroughLookbackWindowDays")
    creation_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp of the Floodlight activity's creation, formatted in ISO 8601.", alias="creationTime")
    floodlight_settings: Optional[GoogleAdsSearchads360V0ResourcesConversionActionFloodlightSettings] = Field(default=None, alias="floodlightSettings")
    id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the conversion action.")
    include_in_client_account_conversions_metric: Optional[StrictBool] = Field(default=None, description="Whether this conversion action should be included in the \"client_account_conversions\" metric.", alias="includeInClientAccountConversionsMetric")
    include_in_conversions_metric: Optional[StrictBool] = Field(default=None, description="Output only. Whether this conversion action should be included in the \"conversions\" metric.", alias="includeInConversionsMetric")
    name: Optional[StrictStr] = Field(default=None, description="The name of the conversion action. This field is required and should not be empty when creating new conversion actions.")
    owner_customer: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the conversion action owner customer, or null if this is a system-defined conversion action.", alias="ownerCustomer")
    primary_for_goal: Optional[StrictBool] = Field(default=None, description="If a conversion action's primary_for_goal bit is false, the conversion action is non-biddable for all campaigns regardless of their customer conversion goal or campaign conversion goal. However, custom conversion goals do not respect primary_for_goal, so if a campaign has a custom conversion goal configured with a primary_for_goal = false conversion action, that conversion action is still biddable. By default, primary_for_goal will be true if not set. In V9, primary_for_goal can only be set to false after creation through an 'update' operation because it's not declared as optional.", alias="primaryForGoal")
    resource_name: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of the conversion action. Conversion action resource names have the form: `customers/{customer_id}/conversionActions/{conversion_action_id}`", alias="resourceName")
    status: Optional[StrictStr] = Field(default=None, description="The status of this conversion action for conversion event accrual.")
    type: Optional[StrictStr] = Field(default=None, description="Immutable. The type of this conversion action.")
    value_settings: Optional[GoogleAdsSearchads360V0ResourcesConversionActionValueSettings] = Field(default=None, alias="valueSettings")
    __properties: ClassVar[List[str]] = ["appId", "attributionModelSettings", "category", "clickThroughLookbackWindowDays", "creationTime", "floodlightSettings", "id", "includeInClientAccountConversionsMetric", "includeInConversionsMetric", "name", "ownerCustomer", "primaryForGoal", "resourceName", "status", "type", "valueSettings"]

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'DEFAULT', 'PAGE_VIEW', 'PURCHASE', 'SIGNUP', 'LEAD', 'DOWNLOAD', 'ADD_TO_CART', 'BEGIN_CHECKOUT', 'SUBSCRIBE_PAID', 'PHONE_CALL_LEAD', 'IMPORTED_LEAD', 'SUBMIT_LEAD_FORM', 'BOOK_APPOINTMENT', 'REQUEST_QUOTE', 'GET_DIRECTIONS', 'OUTBOUND_CLICK', 'CONTACT', 'ENGAGEMENT', 'STORE_VISIT', 'STORE_SALE', 'QUALIFIED_LEAD', 'CONVERTED_LEAD']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'DEFAULT', 'PAGE_VIEW', 'PURCHASE', 'SIGNUP', 'LEAD', 'DOWNLOAD', 'ADD_TO_CART', 'BEGIN_CHECKOUT', 'SUBSCRIBE_PAID', 'PHONE_CALL_LEAD', 'IMPORTED_LEAD', 'SUBMIT_LEAD_FORM', 'BOOK_APPOINTMENT', 'REQUEST_QUOTE', 'GET_DIRECTIONS', 'OUTBOUND_CLICK', 'CONTACT', 'ENGAGEMENT', 'STORE_VISIT', 'STORE_SALE', 'QUALIFIED_LEAD', 'CONVERTED_LEAD')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'REMOVED', 'HIDDEN']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'REMOVED', 'HIDDEN')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'AD_CALL', 'CLICK_TO_CALL', 'GOOGLE_PLAY_DOWNLOAD', 'GOOGLE_PLAY_IN_APP_PURCHASE', 'UPLOAD_CALLS', 'UPLOAD_CLICKS', 'WEBPAGE', 'WEBSITE_CALL', 'STORE_SALES_DIRECT_UPLOAD', 'STORE_SALES', 'FIREBASE_ANDROID_FIRST_OPEN', 'FIREBASE_ANDROID_IN_APP_PURCHASE', 'FIREBASE_ANDROID_CUSTOM', 'FIREBASE_IOS_FIRST_OPEN', 'FIREBASE_IOS_IN_APP_PURCHASE', 'FIREBASE_IOS_CUSTOM', 'THIRD_PARTY_APP_ANALYTICS_ANDROID_FIRST_OPEN', 'THIRD_PARTY_APP_ANALYTICS_ANDROID_IN_APP_PURCHASE', 'THIRD_PARTY_APP_ANALYTICS_ANDROID_CUSTOM', 'THIRD_PARTY_APP_ANALYTICS_IOS_FIRST_OPEN', 'THIRD_PARTY_APP_ANALYTICS_IOS_IN_APP_PURCHASE', 'THIRD_PARTY_APP_ANALYTICS_IOS_CUSTOM', 'ANDROID_APP_PRE_REGISTRATION', 'ANDROID_INSTALLS_ALL_OTHER_APPS', 'FLOODLIGHT_ACTION', 'FLOODLIGHT_TRANSACTION', 'GOOGLE_HOSTED', 'LEAD_FORM_SUBMIT', 'SALESFORCE', 'SEARCH_ADS_360', 'SMART_CAMPAIGN_AD_CLICKS_TO_CALL', 'SMART_CAMPAIGN_MAP_CLICKS_TO_CALL', 'SMART_CAMPAIGN_MAP_DIRECTIONS', 'SMART_CAMPAIGN_TRACKED_CALLS', 'STORE_VISITS', 'WEBPAGE_CODELESS', 'UNIVERSAL_ANALYTICS_GOAL', 'UNIVERSAL_ANALYTICS_TRANSACTION', 'GOOGLE_ANALYTICS_4_CUSTOM', 'GOOGLE_ANALYTICS_4_PURCHASE']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'AD_CALL', 'CLICK_TO_CALL', 'GOOGLE_PLAY_DOWNLOAD', 'GOOGLE_PLAY_IN_APP_PURCHASE', 'UPLOAD_CALLS', 'UPLOAD_CLICKS', 'WEBPAGE', 'WEBSITE_CALL', 'STORE_SALES_DIRECT_UPLOAD', 'STORE_SALES', 'FIREBASE_ANDROID_FIRST_OPEN', 'FIREBASE_ANDROID_IN_APP_PURCHASE', 'FIREBASE_ANDROID_CUSTOM', 'FIREBASE_IOS_FIRST_OPEN', 'FIREBASE_IOS_IN_APP_PURCHASE', 'FIREBASE_IOS_CUSTOM', 'THIRD_PARTY_APP_ANALYTICS_ANDROID_FIRST_OPEN', 'THIRD_PARTY_APP_ANALYTICS_ANDROID_IN_APP_PURCHASE', 'THIRD_PARTY_APP_ANALYTICS_ANDROID_CUSTOM', 'THIRD_PARTY_APP_ANALYTICS_IOS_FIRST_OPEN', 'THIRD_PARTY_APP_ANALYTICS_IOS_IN_APP_PURCHASE', 'THIRD_PARTY_APP_ANALYTICS_IOS_CUSTOM', 'ANDROID_APP_PRE_REGISTRATION', 'ANDROID_INSTALLS_ALL_OTHER_APPS', 'FLOODLIGHT_ACTION', 'FLOODLIGHT_TRANSACTION', 'GOOGLE_HOSTED', 'LEAD_FORM_SUBMIT', 'SALESFORCE', 'SEARCH_ADS_360', 'SMART_CAMPAIGN_AD_CLICKS_TO_CALL', 'SMART_CAMPAIGN_MAP_CLICKS_TO_CALL', 'SMART_CAMPAIGN_MAP_DIRECTIONS', 'SMART_CAMPAIGN_TRACKED_CALLS', 'STORE_VISITS', 'WEBPAGE_CODELESS', 'UNIVERSAL_ANALYTICS_GOAL', 'UNIVERSAL_ANALYTICS_TRANSACTION', 'GOOGLE_ANALYTICS_4_CUSTOM', 'GOOGLE_ANALYTICS_4_PURCHASE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesConversionAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creation_time",
            "id",
            "include_in_conversions_metric",
            "owner_customer",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attribution_model_settings
        if self.attribution_model_settings:
            _dict['attributionModelSettings'] = self.attribution_model_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of floodlight_settings
        if self.floodlight_settings:
            _dict['floodlightSettings'] = self.floodlight_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of value_settings
        if self.value_settings:
            _dict['valueSettings'] = self.value_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesConversionAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appId": obj.get("appId"),
            "attributionModelSettings": GoogleAdsSearchads360V0ResourcesConversionActionAttributionModelSettings.from_dict(obj["attributionModelSettings"]) if obj.get("attributionModelSettings") is not None else None,
            "category": obj.get("category"),
            "clickThroughLookbackWindowDays": obj.get("clickThroughLookbackWindowDays"),
            "creationTime": obj.get("creationTime"),
            "floodlightSettings": GoogleAdsSearchads360V0ResourcesConversionActionFloodlightSettings.from_dict(obj["floodlightSettings"]) if obj.get("floodlightSettings") is not None else None,
            "id": obj.get("id"),
            "includeInClientAccountConversionsMetric": obj.get("includeInClientAccountConversionsMetric"),
            "includeInConversionsMetric": obj.get("includeInConversionsMetric"),
            "name": obj.get("name"),
            "ownerCustomer": obj.get("ownerCustomer"),
            "primaryForGoal": obj.get("primaryForGoal"),
            "resourceName": obj.get("resourceName"),
            "status": obj.get("status"),
            "type": obj.get("type"),
            "valueSettings": GoogleAdsSearchads360V0ResourcesConversionActionValueSettings.from_dict(obj["valueSettings"]) if obj.get("valueSettings") is not None else None
        })
        return _obj



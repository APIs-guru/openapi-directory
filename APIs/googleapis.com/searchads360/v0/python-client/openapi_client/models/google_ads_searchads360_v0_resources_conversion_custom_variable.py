# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_ads_searchads360_v0_resources_conversion_custom_variable_floodlight_conversion_custom_variable_info import GoogleAdsSearchads360V0ResourcesConversionCustomVariableFloodlightConversionCustomVariableInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0ResourcesConversionCustomVariable(BaseModel):
    """
    A conversion custom variable. See \"About custom Floodlight metrics and dimensions in the new Search Ads 360\" at https://support.google.com/sa360/answer/13567857
    """ # noqa: E501
    cardinality: Optional[StrictStr] = Field(default=None, description="Output only. Cardinality of the conversion custom variable.")
    custom_column_ids: Optional[List[StrictStr]] = Field(default=None, description="Output only. The IDs of custom columns that use this conversion custom variable.", alias="customColumnIds")
    family: Optional[StrictStr] = Field(default=None, description="Output only. Family of the conversion custom variable.")
    floodlight_conversion_custom_variable_info: Optional[GoogleAdsSearchads360V0ResourcesConversionCustomVariableFloodlightConversionCustomVariableInfo] = Field(default=None, alias="floodlightConversionCustomVariableInfo")
    id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the conversion custom variable.")
    name: Optional[StrictStr] = Field(default=None, description="Required. The name of the conversion custom variable. Name should be unique. The maximum length of name is 100 characters. There should not be any extra spaces before and after.")
    owner_customer: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the customer that owns the conversion custom variable.", alias="ownerCustomer")
    resource_name: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of the conversion custom variable. Conversion custom variable resource names have the form: `customers/{customer_id}/conversionCustomVariables/{conversion_custom_variable_id}`", alias="resourceName")
    status: Optional[StrictStr] = Field(default=None, description="The status of the conversion custom variable for conversion event accrual.")
    tag: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The tag of the conversion custom variable. Tag should be unique and consist of a \"u\" character directly followed with a number less than ormequal to 100. For example: \"u4\".")
    __properties: ClassVar[List[str]] = ["cardinality", "customColumnIds", "family", "floodlightConversionCustomVariableInfo", "id", "name", "ownerCustomer", "resourceName", "status", "tag"]

    @field_validator('cardinality')
    def cardinality_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'BELOW_ALL_LIMITS', 'EXCEEDS_SEGMENTATION_LIMIT_BUT_NOT_STATS_LIMIT', 'APPROACHES_STATS_LIMIT', 'EXCEEDS_STATS_LIMIT']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'BELOW_ALL_LIMITS', 'EXCEEDS_SEGMENTATION_LIMIT_BUT_NOT_STATS_LIMIT', 'APPROACHES_STATS_LIMIT', 'EXCEEDS_STATS_LIMIT')")
        return value

    @field_validator('family')
    def family_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'STANDARD', 'FLOODLIGHT']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'STANDARD', 'FLOODLIGHT')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'ACTIVATION_NEEDED', 'ENABLED', 'PAUSED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'ACTIVATION_NEEDED', 'ENABLED', 'PAUSED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesConversionCustomVariable from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "cardinality",
            "custom_column_ids",
            "family",
            "id",
            "owner_customer",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of floodlight_conversion_custom_variable_info
        if self.floodlight_conversion_custom_variable_info:
            _dict['floodlightConversionCustomVariableInfo'] = self.floodlight_conversion_custom_variable_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesConversionCustomVariable from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cardinality": obj.get("cardinality"),
            "customColumnIds": obj.get("customColumnIds"),
            "family": obj.get("family"),
            "floodlightConversionCustomVariableInfo": GoogleAdsSearchads360V0ResourcesConversionCustomVariableFloodlightConversionCustomVariableInfo.from_dict(obj["floodlightConversionCustomVariableInfo"]) if obj.get("floodlightConversionCustomVariableInfo") is not None else None,
            "id": obj.get("id"),
            "name": obj.get("name"),
            "ownerCustomer": obj.get("ownerCustomer"),
            "resourceName": obj.get("resourceName"),
            "status": obj.get("status"),
            "tag": obj.get("tag")
        })
        return _obj



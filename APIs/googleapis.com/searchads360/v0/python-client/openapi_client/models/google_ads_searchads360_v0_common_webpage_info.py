# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_ads_searchads360_v0_common_webpage_condition_info import GoogleAdsSearchads360V0CommonWebpageConditionInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0CommonWebpageInfo(BaseModel):
    """
    Represents a criterion for targeting webpages of an advertiser's website.
    """ # noqa: E501
    conditions: Optional[List[GoogleAdsSearchads360V0CommonWebpageConditionInfo]] = Field(default=None, description="Conditions, or logical expressions, for webpage targeting. The list of webpage targeting conditions are and-ed together when evaluated for targeting. An empty list of conditions indicates all pages of the campaign's website are targeted. This field is required for CREATE operations and is prohibited on UPDATE operations.")
    coverage_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Website criteria coverage percentage. This is the computed percentage of website coverage based on the website target, negative website target and negative keywords in the ad group and campaign. For instance, when coverage returns as 1, it indicates it has 100% coverage. This field is read-only.", alias="coveragePercentage")
    criterion_name: Optional[StrictStr] = Field(default=None, description="The name of the criterion that is defined by this parameter. The name value will be used for identifying, sorting and filtering criteria with this type of parameters. This field is required for CREATE operations and is prohibited on UPDATE operations.", alias="criterionName")
    __properties: ClassVar[List[str]] = ["conditions", "coveragePercentage", "criterionName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0CommonWebpageInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item_conditions in self.conditions:
                if _item_conditions:
                    _items.append(_item_conditions.to_dict())
            _dict['conditions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0CommonWebpageInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conditions": [GoogleAdsSearchads360V0CommonWebpageConditionInfo.from_dict(_item) for _item in obj["conditions"]] if obj.get("conditions") is not None else None,
            "coveragePercentage": obj.get("coveragePercentage"),
            "criterionName": obj.get("criterionName")
        })
        return _obj



# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_ads_searchads360_v0_services_conversion_custom_dimension_header import GoogleAdsSearchads360V0ServicesConversionCustomDimensionHeader
from openapi_client.models.google_ads_searchads360_v0_services_conversion_custom_metric_header import GoogleAdsSearchads360V0ServicesConversionCustomMetricHeader
from openapi_client.models.google_ads_searchads360_v0_services_custom_column_header import GoogleAdsSearchads360V0ServicesCustomColumnHeader
from openapi_client.models.google_ads_searchads360_v0_services_raw_event_conversion_dimension_header import GoogleAdsSearchads360V0ServicesRawEventConversionDimensionHeader
from openapi_client.models.google_ads_searchads360_v0_services_raw_event_conversion_metric_header import GoogleAdsSearchads360V0ServicesRawEventConversionMetricHeader
from openapi_client.models.google_ads_searchads360_v0_services_search_ads360_row import GoogleAdsSearchads360V0ServicesSearchAds360Row
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0ServicesSearchSearchAds360Response(BaseModel):
    """
    Response message for SearchAds360Service.Search.
    """ # noqa: E501
    conversion_custom_dimension_headers: Optional[List[GoogleAdsSearchads360V0ServicesConversionCustomDimensionHeader]] = Field(default=None, description="The headers of the conversion custom dimensions in the results.", alias="conversionCustomDimensionHeaders")
    conversion_custom_metric_headers: Optional[List[GoogleAdsSearchads360V0ServicesConversionCustomMetricHeader]] = Field(default=None, description="The headers of the conversion custom metrics in the results.", alias="conversionCustomMetricHeaders")
    custom_column_headers: Optional[List[GoogleAdsSearchads360V0ServicesCustomColumnHeader]] = Field(default=None, description="The headers of the custom columns in the results.", alias="customColumnHeaders")
    field_mask: Optional[StrictStr] = Field(default=None, description="FieldMask that represents what fields were requested by the user.", alias="fieldMask")
    next_page_token: Optional[StrictStr] = Field(default=None, description="Pagination token used to retrieve the next page of results. Pass the content of this string as the `page_token` attribute of the next request. `next_page_token` is not returned for the last page.", alias="nextPageToken")
    raw_event_conversion_dimension_headers: Optional[List[GoogleAdsSearchads360V0ServicesRawEventConversionDimensionHeader]] = Field(default=None, description="The headers of the raw event conversion dimensions in the results.", alias="rawEventConversionDimensionHeaders")
    raw_event_conversion_metric_headers: Optional[List[GoogleAdsSearchads360V0ServicesRawEventConversionMetricHeader]] = Field(default=None, description="The headers of the raw event conversion metrics in the results.", alias="rawEventConversionMetricHeaders")
    results: Optional[List[GoogleAdsSearchads360V0ServicesSearchAds360Row]] = Field(default=None, description="The list of rows that matched the query.")
    summary_row: Optional[GoogleAdsSearchads360V0ServicesSearchAds360Row] = Field(default=None, alias="summaryRow")
    total_results_count: Optional[StrictStr] = Field(default=None, description="Total number of results that match the query ignoring the LIMIT clause.", alias="totalResultsCount")
    __properties: ClassVar[List[str]] = ["conversionCustomDimensionHeaders", "conversionCustomMetricHeaders", "customColumnHeaders", "fieldMask", "nextPageToken", "rawEventConversionDimensionHeaders", "rawEventConversionMetricHeaders", "results", "summaryRow", "totalResultsCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ServicesSearchSearchAds360Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in conversion_custom_dimension_headers (list)
        _items = []
        if self.conversion_custom_dimension_headers:
            for _item_conversion_custom_dimension_headers in self.conversion_custom_dimension_headers:
                if _item_conversion_custom_dimension_headers:
                    _items.append(_item_conversion_custom_dimension_headers.to_dict())
            _dict['conversionCustomDimensionHeaders'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in conversion_custom_metric_headers (list)
        _items = []
        if self.conversion_custom_metric_headers:
            for _item_conversion_custom_metric_headers in self.conversion_custom_metric_headers:
                if _item_conversion_custom_metric_headers:
                    _items.append(_item_conversion_custom_metric_headers.to_dict())
            _dict['conversionCustomMetricHeaders'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_column_headers (list)
        _items = []
        if self.custom_column_headers:
            for _item_custom_column_headers in self.custom_column_headers:
                if _item_custom_column_headers:
                    _items.append(_item_custom_column_headers.to_dict())
            _dict['customColumnHeaders'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in raw_event_conversion_dimension_headers (list)
        _items = []
        if self.raw_event_conversion_dimension_headers:
            for _item_raw_event_conversion_dimension_headers in self.raw_event_conversion_dimension_headers:
                if _item_raw_event_conversion_dimension_headers:
                    _items.append(_item_raw_event_conversion_dimension_headers.to_dict())
            _dict['rawEventConversionDimensionHeaders'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in raw_event_conversion_metric_headers (list)
        _items = []
        if self.raw_event_conversion_metric_headers:
            for _item_raw_event_conversion_metric_headers in self.raw_event_conversion_metric_headers:
                if _item_raw_event_conversion_metric_headers:
                    _items.append(_item_raw_event_conversion_metric_headers.to_dict())
            _dict['rawEventConversionMetricHeaders'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        _items = []
        if self.results:
            for _item_results in self.results:
                if _item_results:
                    _items.append(_item_results.to_dict())
            _dict['results'] = _items
        # override the default output from pydantic by calling `to_dict()` of summary_row
        if self.summary_row:
            _dict['summaryRow'] = self.summary_row.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ServicesSearchSearchAds360Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conversionCustomDimensionHeaders": [GoogleAdsSearchads360V0ServicesConversionCustomDimensionHeader.from_dict(_item) for _item in obj["conversionCustomDimensionHeaders"]] if obj.get("conversionCustomDimensionHeaders") is not None else None,
            "conversionCustomMetricHeaders": [GoogleAdsSearchads360V0ServicesConversionCustomMetricHeader.from_dict(_item) for _item in obj["conversionCustomMetricHeaders"]] if obj.get("conversionCustomMetricHeaders") is not None else None,
            "customColumnHeaders": [GoogleAdsSearchads360V0ServicesCustomColumnHeader.from_dict(_item) for _item in obj["customColumnHeaders"]] if obj.get("customColumnHeaders") is not None else None,
            "fieldMask": obj.get("fieldMask"),
            "nextPageToken": obj.get("nextPageToken"),
            "rawEventConversionDimensionHeaders": [GoogleAdsSearchads360V0ServicesRawEventConversionDimensionHeader.from_dict(_item) for _item in obj["rawEventConversionDimensionHeaders"]] if obj.get("rawEventConversionDimensionHeaders") is not None else None,
            "rawEventConversionMetricHeaders": [GoogleAdsSearchads360V0ServicesRawEventConversionMetricHeader.from_dict(_item) for _item in obj["rawEventConversionMetricHeaders"]] if obj.get("rawEventConversionMetricHeaders") is not None else None,
            "results": [GoogleAdsSearchads360V0ServicesSearchAds360Row.from_dict(_item) for _item in obj["results"]] if obj.get("results") is not None else None,
            "summaryRow": GoogleAdsSearchads360V0ServicesSearchAds360Row.from_dict(obj["summaryRow"]) if obj.get("summaryRow") is not None else None,
            "totalResultsCount": obj.get("totalResultsCount")
        })
        return _obj



# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_ads_searchads360_v0_common_maximize_conversion_value import GoogleAdsSearchads360V0CommonMaximizeConversionValue
from openapi_client.models.google_ads_searchads360_v0_common_maximize_conversions import GoogleAdsSearchads360V0CommonMaximizeConversions
from openapi_client.models.google_ads_searchads360_v0_common_target_cpa import GoogleAdsSearchads360V0CommonTargetCpa
from openapi_client.models.google_ads_searchads360_v0_common_target_impression_share import GoogleAdsSearchads360V0CommonTargetImpressionShare
from openapi_client.models.google_ads_searchads360_v0_common_target_outrank_share import GoogleAdsSearchads360V0CommonTargetOutrankShare
from openapi_client.models.google_ads_searchads360_v0_common_target_roas import GoogleAdsSearchads360V0CommonTargetRoas
from openapi_client.models.google_ads_searchads360_v0_common_target_spend import GoogleAdsSearchads360V0CommonTargetSpend
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0ResourcesBiddingStrategy(BaseModel):
    """
    A bidding strategy.
    """ # noqa: E501
    campaign_count: Optional[StrictStr] = Field(default=None, description="Output only. The number of campaigns attached to this bidding strategy. This field is read-only.", alias="campaignCount")
    currency_code: Optional[StrictStr] = Field(default=None, description="Immutable. The currency used by the bidding strategy (ISO 4217 three-letter code). For bidding strategies in manager customers, this currency can be set on creation and defaults to the manager customer's currency. For serving customers, this field cannot be set; all strategies in a serving customer implicitly use the serving customer's currency. In all cases the effective_currency_code field returns the currency used by the strategy.", alias="currencyCode")
    effective_currency_code: Optional[StrictStr] = Field(default=None, description="Output only. The currency used by the bidding strategy (ISO 4217 three-letter code). For bidding strategies in manager customers, this is the currency set by the advertiser when creating the strategy. For serving customers, this is the customer's currency_code. Bidding strategy metrics are reported in this currency. This field is read-only.", alias="effectiveCurrencyCode")
    enhanced_cpc: Optional[Dict[str, Any]] = Field(default=None, description="An automated bidding strategy that raises bids for clicks that seem more likely to lead to a conversion and lowers them for clicks where they seem less likely. This bidding strategy is deprecated and cannot be created anymore. Use ManualCpc with enhanced_cpc_enabled set to true for equivalent functionality.", alias="enhancedCpc")
    id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the bidding strategy.")
    maximize_conversion_value: Optional[GoogleAdsSearchads360V0CommonMaximizeConversionValue] = Field(default=None, alias="maximizeConversionValue")
    maximize_conversions: Optional[GoogleAdsSearchads360V0CommonMaximizeConversions] = Field(default=None, alias="maximizeConversions")
    name: Optional[StrictStr] = Field(default=None, description="The name of the bidding strategy. All bidding strategies within an account must be named distinctly. The length of this string should be between 1 and 255, inclusive, in UTF-8 bytes, (trimmed).")
    non_removed_campaign_count: Optional[StrictStr] = Field(default=None, description="Output only. The number of non-removed campaigns attached to this bidding strategy. This field is read-only.", alias="nonRemovedCampaignCount")
    resource_name: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of the bidding strategy. Bidding strategy resource names have the form: `customers/{customer_id}/biddingStrategies/{bidding_strategy_id}`", alias="resourceName")
    status: Optional[StrictStr] = Field(default=None, description="Output only. The status of the bidding strategy. This field is read-only.")
    target_cpa: Optional[GoogleAdsSearchads360V0CommonTargetCpa] = Field(default=None, alias="targetCpa")
    target_impression_share: Optional[GoogleAdsSearchads360V0CommonTargetImpressionShare] = Field(default=None, alias="targetImpressionShare")
    target_outrank_share: Optional[GoogleAdsSearchads360V0CommonTargetOutrankShare] = Field(default=None, alias="targetOutrankShare")
    target_roas: Optional[GoogleAdsSearchads360V0CommonTargetRoas] = Field(default=None, alias="targetRoas")
    target_spend: Optional[GoogleAdsSearchads360V0CommonTargetSpend] = Field(default=None, alias="targetSpend")
    type: Optional[StrictStr] = Field(default=None, description="Output only. The type of the bidding strategy. Create a bidding strategy by setting the bidding scheme. This field is read-only.")
    __properties: ClassVar[List[str]] = ["campaignCount", "currencyCode", "effectiveCurrencyCode", "enhancedCpc", "id", "maximizeConversionValue", "maximizeConversions", "name", "nonRemovedCampaignCount", "resourceName", "status", "targetCpa", "targetImpressionShare", "targetOutrankShare", "targetRoas", "targetSpend", "type"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'REMOVED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'REMOVED')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'COMMISSION', 'ENHANCED_CPC', 'INVALID', 'MANUAL_CPA', 'MANUAL_CPC', 'MANUAL_CPM', 'MANUAL_CPV', 'MAXIMIZE_CONVERSIONS', 'MAXIMIZE_CONVERSION_VALUE', 'PAGE_ONE_PROMOTED', 'PERCENT_CPC', 'TARGET_CPA', 'TARGET_CPM', 'TARGET_IMPRESSION_SHARE', 'TARGET_OUTRANK_SHARE', 'TARGET_ROAS', 'TARGET_SPEND']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'COMMISSION', 'ENHANCED_CPC', 'INVALID', 'MANUAL_CPA', 'MANUAL_CPC', 'MANUAL_CPM', 'MANUAL_CPV', 'MAXIMIZE_CONVERSIONS', 'MAXIMIZE_CONVERSION_VALUE', 'PAGE_ONE_PROMOTED', 'PERCENT_CPC', 'TARGET_CPA', 'TARGET_CPM', 'TARGET_IMPRESSION_SHARE', 'TARGET_OUTRANK_SHARE', 'TARGET_ROAS', 'TARGET_SPEND')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesBiddingStrategy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "campaign_count",
            "effective_currency_code",
            "id",
            "non_removed_campaign_count",
            "status",
            "type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of maximize_conversion_value
        if self.maximize_conversion_value:
            _dict['maximizeConversionValue'] = self.maximize_conversion_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maximize_conversions
        if self.maximize_conversions:
            _dict['maximizeConversions'] = self.maximize_conversions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_cpa
        if self.target_cpa:
            _dict['targetCpa'] = self.target_cpa.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_impression_share
        if self.target_impression_share:
            _dict['targetImpressionShare'] = self.target_impression_share.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_outrank_share
        if self.target_outrank_share:
            _dict['targetOutrankShare'] = self.target_outrank_share.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_roas
        if self.target_roas:
            _dict['targetRoas'] = self.target_roas.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_spend
        if self.target_spend:
            _dict['targetSpend'] = self.target_spend.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesBiddingStrategy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "campaignCount": obj.get("campaignCount"),
            "currencyCode": obj.get("currencyCode"),
            "effectiveCurrencyCode": obj.get("effectiveCurrencyCode"),
            "enhancedCpc": obj.get("enhancedCpc"),
            "id": obj.get("id"),
            "maximizeConversionValue": GoogleAdsSearchads360V0CommonMaximizeConversionValue.from_dict(obj["maximizeConversionValue"]) if obj.get("maximizeConversionValue") is not None else None,
            "maximizeConversions": GoogleAdsSearchads360V0CommonMaximizeConversions.from_dict(obj["maximizeConversions"]) if obj.get("maximizeConversions") is not None else None,
            "name": obj.get("name"),
            "nonRemovedCampaignCount": obj.get("nonRemovedCampaignCount"),
            "resourceName": obj.get("resourceName"),
            "status": obj.get("status"),
            "targetCpa": GoogleAdsSearchads360V0CommonTargetCpa.from_dict(obj["targetCpa"]) if obj.get("targetCpa") is not None else None,
            "targetImpressionShare": GoogleAdsSearchads360V0CommonTargetImpressionShare.from_dict(obj["targetImpressionShare"]) if obj.get("targetImpressionShare") is not None else None,
            "targetOutrankShare": GoogleAdsSearchads360V0CommonTargetOutrankShare.from_dict(obj["targetOutrankShare"]) if obj.get("targetOutrankShare") is not None else None,
            "targetRoas": GoogleAdsSearchads360V0CommonTargetRoas.from_dict(obj["targetRoas"]) if obj.get("targetRoas") is not None else None,
            "targetSpend": GoogleAdsSearchads360V0CommonTargetSpend.from_dict(obj["targetSpend"]) if obj.get("targetSpend") is not None else None,
            "type": obj.get("type")
        })
        return _obj



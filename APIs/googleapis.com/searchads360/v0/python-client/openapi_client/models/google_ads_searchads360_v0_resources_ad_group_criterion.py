# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_ads_searchads360_v0_common_age_range_info import GoogleAdsSearchads360V0CommonAgeRangeInfo
from openapi_client.models.google_ads_searchads360_v0_common_gender_info import GoogleAdsSearchads360V0CommonGenderInfo
from openapi_client.models.google_ads_searchads360_v0_common_keyword_info import GoogleAdsSearchads360V0CommonKeywordInfo
from openapi_client.models.google_ads_searchads360_v0_common_listing_group_info import GoogleAdsSearchads360V0CommonListingGroupInfo
from openapi_client.models.google_ads_searchads360_v0_common_location_info import GoogleAdsSearchads360V0CommonLocationInfo
from openapi_client.models.google_ads_searchads360_v0_common_user_list_info import GoogleAdsSearchads360V0CommonUserListInfo
from openapi_client.models.google_ads_searchads360_v0_common_webpage_info import GoogleAdsSearchads360V0CommonWebpageInfo
from openapi_client.models.google_ads_searchads360_v0_resources_ad_group_criterion_position_estimates import GoogleAdsSearchads360V0ResourcesAdGroupCriterionPositionEstimates
from openapi_client.models.google_ads_searchads360_v0_resources_ad_group_criterion_quality_info import GoogleAdsSearchads360V0ResourcesAdGroupCriterionQualityInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0ResourcesAdGroupCriterion(BaseModel):
    """
    An ad group criterion.
    """ # noqa: E501
    ad_group: Optional[StrictStr] = Field(default=None, description="Immutable. The ad group to which the criterion belongs.", alias="adGroup")
    age_range: Optional[GoogleAdsSearchads360V0CommonAgeRangeInfo] = Field(default=None, alias="ageRange")
    bid_modifier: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The modifier for the bid when the criterion matches. The modifier must be in the range: 0.1 - 10.0. Most targetable criteria types support modifiers.", alias="bidModifier")
    cpc_bid_micros: Optional[StrictStr] = Field(default=None, description="The CPC (cost-per-click) bid.", alias="cpcBidMicros")
    creation_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when this ad group criterion was created. The timestamp is in the customer's time zone and in \"yyyy-MM-dd HH:mm:ss\" format.", alias="creationTime")
    criterion_id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the criterion.", alias="criterionId")
    effective_cpc_bid_micros: Optional[StrictStr] = Field(default=None, description="Output only. The effective CPC (cost-per-click) bid.", alias="effectiveCpcBidMicros")
    engine_id: Optional[StrictStr] = Field(default=None, description="Output only. ID of the ad group criterion in the external engine account. This field is for non-Google Ads account only, for example, Yahoo Japan, Microsoft, Baidu etc. For Google Ads entity, use \"ad_group_criterion.criterion_id\" instead.", alias="engineId")
    engine_status: Optional[StrictStr] = Field(default=None, description="Output only. The Engine Status for ad group criterion.", alias="engineStatus")
    final_url_suffix: Optional[StrictStr] = Field(default=None, description="URL template for appending params to final URL.", alias="finalUrlSuffix")
    final_urls: Optional[List[StrictStr]] = Field(default=None, description="The list of possible final URLs after all cross-domain redirects for the ad.", alias="finalUrls")
    gender: Optional[GoogleAdsSearchads360V0CommonGenderInfo] = None
    keyword: Optional[GoogleAdsSearchads360V0CommonKeywordInfo] = None
    labels: Optional[List[StrictStr]] = Field(default=None, description="Output only. The resource names of labels attached to this ad group criterion.")
    last_modified_time: Optional[StrictStr] = Field(default=None, description="Output only. The datetime when this ad group criterion was last modified. The datetime is in the customer's time zone and in \"yyyy-MM-dd HH:mm:ss.ssssss\" format.", alias="lastModifiedTime")
    listing_group: Optional[GoogleAdsSearchads360V0CommonListingGroupInfo] = Field(default=None, alias="listingGroup")
    location: Optional[GoogleAdsSearchads360V0CommonLocationInfo] = None
    negative: Optional[StrictBool] = Field(default=None, description="Immutable. Whether to target (`false`) or exclude (`true`) the criterion. This field is immutable. To switch a criterion from positive to negative, remove then re-add it.")
    position_estimates: Optional[GoogleAdsSearchads360V0ResourcesAdGroupCriterionPositionEstimates] = Field(default=None, alias="positionEstimates")
    quality_info: Optional[GoogleAdsSearchads360V0ResourcesAdGroupCriterionQualityInfo] = Field(default=None, alias="qualityInfo")
    resource_name: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of the ad group criterion. Ad group criterion resource names have the form: `customers/{customer_id}/adGroupCriteria/{ad_group_id}~{criterion_id}`", alias="resourceName")
    status: Optional[StrictStr] = Field(default=None, description="The status of the criterion. This is the status of the ad group criterion entity, set by the client. Note: UI reports may incorporate additional information that affects whether a criterion is eligible to run. In some cases a criterion that's REMOVED in the API can still show as enabled in the UI. For example, campaigns by default show to users of all age ranges unless excluded. The UI will show each age range as \"enabled\", since they're eligible to see the ads; but AdGroupCriterion.status will show \"removed\", since no positive criterion was added.")
    tracking_url_template: Optional[StrictStr] = Field(default=None, description="The URL template for constructing a tracking URL.", alias="trackingUrlTemplate")
    type: Optional[StrictStr] = Field(default=None, description="Output only. The type of the criterion.")
    user_list: Optional[GoogleAdsSearchads360V0CommonUserListInfo] = Field(default=None, alias="userList")
    webpage: Optional[GoogleAdsSearchads360V0CommonWebpageInfo] = None
    __properties: ClassVar[List[str]] = ["adGroup", "ageRange", "bidModifier", "cpcBidMicros", "creationTime", "criterionId", "effectiveCpcBidMicros", "engineId", "engineStatus", "finalUrlSuffix", "finalUrls", "gender", "keyword", "labels", "lastModifiedTime", "listingGroup", "location", "negative", "positionEstimates", "qualityInfo", "resourceName", "status", "trackingUrlTemplate", "type", "userList", "webpage"]

    @field_validator('engine_status')
    def engine_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'AD_GROUP_CRITERION_ELIGIBLE', 'AD_GROUP_CRITERION_INAPPROPRIATE_FOR_CAMPAIGN', 'AD_GROUP_CRITERION_INVALID_MOBILE_SEARCH', 'AD_GROUP_CRITERION_INVALID_PC_SEARCH', 'AD_GROUP_CRITERION_INVALID_SEARCH', 'AD_GROUP_CRITERION_LOW_SEARCH_VOLUME', 'AD_GROUP_CRITERION_MOBILE_URL_UNDER_REVIEW', 'AD_GROUP_CRITERION_PARTIALLY_INVALID', 'AD_GROUP_CRITERION_TO_BE_ACTIVATED', 'AD_GROUP_CRITERION_UNDER_REVIEW', 'AD_GROUP_CRITERION_NOT_REVIEWED', 'AD_GROUP_CRITERION_ON_HOLD', 'AD_GROUP_CRITERION_PENDING_REVIEW', 'AD_GROUP_CRITERION_PAUSED', 'AD_GROUP_CRITERION_REMOVED', 'AD_GROUP_CRITERION_APPROVED', 'AD_GROUP_CRITERION_DISAPPROVED', 'AD_GROUP_CRITERION_SERVING', 'AD_GROUP_CRITERION_ACCOUNT_PAUSED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'AD_GROUP_CRITERION_ELIGIBLE', 'AD_GROUP_CRITERION_INAPPROPRIATE_FOR_CAMPAIGN', 'AD_GROUP_CRITERION_INVALID_MOBILE_SEARCH', 'AD_GROUP_CRITERION_INVALID_PC_SEARCH', 'AD_GROUP_CRITERION_INVALID_SEARCH', 'AD_GROUP_CRITERION_LOW_SEARCH_VOLUME', 'AD_GROUP_CRITERION_MOBILE_URL_UNDER_REVIEW', 'AD_GROUP_CRITERION_PARTIALLY_INVALID', 'AD_GROUP_CRITERION_TO_BE_ACTIVATED', 'AD_GROUP_CRITERION_UNDER_REVIEW', 'AD_GROUP_CRITERION_NOT_REVIEWED', 'AD_GROUP_CRITERION_ON_HOLD', 'AD_GROUP_CRITERION_PENDING_REVIEW', 'AD_GROUP_CRITERION_PAUSED', 'AD_GROUP_CRITERION_REMOVED', 'AD_GROUP_CRITERION_APPROVED', 'AD_GROUP_CRITERION_DISAPPROVED', 'AD_GROUP_CRITERION_SERVING', 'AD_GROUP_CRITERION_ACCOUNT_PAUSED')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'PAUSED', 'REMOVED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'PAUSED', 'REMOVED')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'KEYWORD', 'PLACEMENT', 'MOBILE_APP_CATEGORY', 'MOBILE_APPLICATION', 'DEVICE', 'LOCATION', 'LISTING_GROUP', 'AD_SCHEDULE', 'AGE_RANGE', 'GENDER', 'INCOME_RANGE', 'PARENTAL_STATUS', 'YOUTUBE_VIDEO', 'YOUTUBE_CHANNEL', 'USER_LIST', 'PROXIMITY', 'TOPIC', 'LISTING_SCOPE', 'LANGUAGE', 'IP_BLOCK', 'CONTENT_LABEL', 'CARRIER', 'USER_INTEREST', 'WEBPAGE', 'OPERATING_SYSTEM_VERSION', 'APP_PAYMENT_MODEL', 'MOBILE_DEVICE', 'CUSTOM_AFFINITY', 'CUSTOM_INTENT', 'LOCATION_GROUP', 'CUSTOM_AUDIENCE', 'COMBINED_AUDIENCE', 'KEYWORD_THEME', 'AUDIENCE', 'LOCAL_SERVICE_ID', 'BRAND', 'BRAND_LIST']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'KEYWORD', 'PLACEMENT', 'MOBILE_APP_CATEGORY', 'MOBILE_APPLICATION', 'DEVICE', 'LOCATION', 'LISTING_GROUP', 'AD_SCHEDULE', 'AGE_RANGE', 'GENDER', 'INCOME_RANGE', 'PARENTAL_STATUS', 'YOUTUBE_VIDEO', 'YOUTUBE_CHANNEL', 'USER_LIST', 'PROXIMITY', 'TOPIC', 'LISTING_SCOPE', 'LANGUAGE', 'IP_BLOCK', 'CONTENT_LABEL', 'CARRIER', 'USER_INTEREST', 'WEBPAGE', 'OPERATING_SYSTEM_VERSION', 'APP_PAYMENT_MODEL', 'MOBILE_DEVICE', 'CUSTOM_AFFINITY', 'CUSTOM_INTENT', 'LOCATION_GROUP', 'CUSTOM_AUDIENCE', 'COMBINED_AUDIENCE', 'KEYWORD_THEME', 'AUDIENCE', 'LOCAL_SERVICE_ID', 'BRAND', 'BRAND_LIST')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesAdGroupCriterion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creation_time",
            "criterion_id",
            "effective_cpc_bid_micros",
            "engine_id",
            "engine_status",
            "labels",
            "last_modified_time",
            "type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of age_range
        if self.age_range:
            _dict['ageRange'] = self.age_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gender
        if self.gender:
            _dict['gender'] = self.gender.to_dict()
        # override the default output from pydantic by calling `to_dict()` of keyword
        if self.keyword:
            _dict['keyword'] = self.keyword.to_dict()
        # override the default output from pydantic by calling `to_dict()` of listing_group
        if self.listing_group:
            _dict['listingGroup'] = self.listing_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of position_estimates
        if self.position_estimates:
            _dict['positionEstimates'] = self.position_estimates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quality_info
        if self.quality_info:
            _dict['qualityInfo'] = self.quality_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_list
        if self.user_list:
            _dict['userList'] = self.user_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of webpage
        if self.webpage:
            _dict['webpage'] = self.webpage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesAdGroupCriterion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adGroup": obj.get("adGroup"),
            "ageRange": GoogleAdsSearchads360V0CommonAgeRangeInfo.from_dict(obj["ageRange"]) if obj.get("ageRange") is not None else None,
            "bidModifier": obj.get("bidModifier"),
            "cpcBidMicros": obj.get("cpcBidMicros"),
            "creationTime": obj.get("creationTime"),
            "criterionId": obj.get("criterionId"),
            "effectiveCpcBidMicros": obj.get("effectiveCpcBidMicros"),
            "engineId": obj.get("engineId"),
            "engineStatus": obj.get("engineStatus"),
            "finalUrlSuffix": obj.get("finalUrlSuffix"),
            "finalUrls": obj.get("finalUrls"),
            "gender": GoogleAdsSearchads360V0CommonGenderInfo.from_dict(obj["gender"]) if obj.get("gender") is not None else None,
            "keyword": GoogleAdsSearchads360V0CommonKeywordInfo.from_dict(obj["keyword"]) if obj.get("keyword") is not None else None,
            "labels": obj.get("labels"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "listingGroup": GoogleAdsSearchads360V0CommonListingGroupInfo.from_dict(obj["listingGroup"]) if obj.get("listingGroup") is not None else None,
            "location": GoogleAdsSearchads360V0CommonLocationInfo.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "negative": obj.get("negative"),
            "positionEstimates": GoogleAdsSearchads360V0ResourcesAdGroupCriterionPositionEstimates.from_dict(obj["positionEstimates"]) if obj.get("positionEstimates") is not None else None,
            "qualityInfo": GoogleAdsSearchads360V0ResourcesAdGroupCriterionQualityInfo.from_dict(obj["qualityInfo"]) if obj.get("qualityInfo") is not None else None,
            "resourceName": obj.get("resourceName"),
            "status": obj.get("status"),
            "trackingUrlTemplate": obj.get("trackingUrlTemplate"),
            "type": obj.get("type"),
            "userList": GoogleAdsSearchads360V0CommonUserListInfo.from_dict(obj["userList"]) if obj.get("userList") is not None else None,
            "webpage": GoogleAdsSearchads360V0CommonWebpageInfo.from_dict(obj["webpage"]) if obj.get("webpage") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0ResourcesConversionActionAttributionModelSettings(BaseModel):
    """
    Settings related to this conversion action's attribution model.
    """ # noqa: E501
    attribution_model: Optional[StrictStr] = Field(default=None, description="The attribution model type of this conversion action.", alias="attributionModel")
    data_driven_model_status: Optional[StrictStr] = Field(default=None, description="Output only. The status of the data-driven attribution model for the conversion action.", alias="dataDrivenModelStatus")
    __properties: ClassVar[List[str]] = ["attributionModel", "dataDrivenModelStatus"]

    @field_validator('attribution_model')
    def attribution_model_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'EXTERNAL', 'GOOGLE_ADS_LAST_CLICK', 'GOOGLE_SEARCH_ATTRIBUTION_FIRST_CLICK', 'GOOGLE_SEARCH_ATTRIBUTION_LINEAR', 'GOOGLE_SEARCH_ATTRIBUTION_TIME_DECAY', 'GOOGLE_SEARCH_ATTRIBUTION_POSITION_BASED', 'GOOGLE_SEARCH_ATTRIBUTION_DATA_DRIVEN']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'EXTERNAL', 'GOOGLE_ADS_LAST_CLICK', 'GOOGLE_SEARCH_ATTRIBUTION_FIRST_CLICK', 'GOOGLE_SEARCH_ATTRIBUTION_LINEAR', 'GOOGLE_SEARCH_ATTRIBUTION_TIME_DECAY', 'GOOGLE_SEARCH_ATTRIBUTION_POSITION_BASED', 'GOOGLE_SEARCH_ATTRIBUTION_DATA_DRIVEN')")
        return value

    @field_validator('data_driven_model_status')
    def data_driven_model_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'AVAILABLE', 'STALE', 'EXPIRED', 'NEVER_GENERATED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'AVAILABLE', 'STALE', 'EXPIRED', 'NEVER_GENERATED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesConversionActionAttributionModelSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "data_driven_model_status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesConversionActionAttributionModelSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributionModel": obj.get("attributionModel"),
            "dataDrivenModelStatus": obj.get("dataDrivenModelStatus")
        })
        return _obj



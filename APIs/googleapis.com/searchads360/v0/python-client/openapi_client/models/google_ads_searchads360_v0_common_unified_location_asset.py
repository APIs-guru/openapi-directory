# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_ads_searchads360_v0_common_business_profile_location import GoogleAdsSearchads360V0CommonBusinessProfileLocation
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0CommonUnifiedLocationAsset(BaseModel):
    """
    A unified location asset.
    """ # noqa: E501
    business_profile_locations: Optional[List[GoogleAdsSearchads360V0CommonBusinessProfileLocation]] = Field(default=None, description="The list of business locations for the customer. This will only be returned if the Location Asset is syncing from the Business Profile account. It is possible to have multiple Business Profile listings under the same account that point to the same Place ID.", alias="businessProfileLocations")
    location_ownership_type: Optional[StrictStr] = Field(default=None, description="The type of location ownership. If the type is BUSINESS_OWNER, it will be served as a location extension. If the type is AFFILIATE, it will be served as an affiliate location.", alias="locationOwnershipType")
    place_id: Optional[StrictStr] = Field(default=None, description="Place IDs uniquely identify a place in the Google Places database and on Google Maps. This field is unique for a given customer ID and asset type. See https://developers.google.com/places/web-service/place-id to learn more about Place ID.", alias="placeId")
    __properties: ClassVar[List[str]] = ["businessProfileLocations", "locationOwnershipType", "placeId"]

    @field_validator('location_ownership_type')
    def location_ownership_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'BUSINESS_OWNER', 'AFFILIATE']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'BUSINESS_OWNER', 'AFFILIATE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0CommonUnifiedLocationAsset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in business_profile_locations (list)
        _items = []
        if self.business_profile_locations:
            for _item_business_profile_locations in self.business_profile_locations:
                if _item_business_profile_locations:
                    _items.append(_item_business_profile_locations.to_dict())
            _dict['businessProfileLocations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0CommonUnifiedLocationAsset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "businessProfileLocations": [GoogleAdsSearchads360V0CommonBusinessProfileLocation.from_dict(_item) for _item in obj["businessProfileLocations"]] if obj.get("businessProfileLocations") is not None else None,
            "locationOwnershipType": obj.get("locationOwnershipType"),
            "placeId": obj.get("placeId")
        })
        return _obj



# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0ResourcesCustomColumn(BaseModel):
    """
    A custom column. See Search Ads 360 custom column at https://support.google.com/sa360/answer/9633916
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Output only. User-defined description of the custom column.")
    id: Optional[StrictStr] = Field(default=None, description="Output only. ID of the custom column.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. User-defined name of the custom column.")
    queryable: Optional[StrictBool] = Field(default=None, description="Output only. True when the custom column is available to be used in the query of SearchAds360Service.Search and SearchAds360Service.SearchStream.")
    referenced_system_columns: Optional[List[StrictStr]] = Field(default=None, description="Output only. The list of the referenced system columns of this custom column. For example, A custom column \"sum of impressions and clicks\" has referenced system columns of {\"metrics.clicks\", \"metrics.impressions\"}.", alias="referencedSystemColumns")
    references_attributes: Optional[StrictBool] = Field(default=None, description="Output only. True when the custom column is referring to one or more attributes.", alias="referencesAttributes")
    references_metrics: Optional[StrictBool] = Field(default=None, description="Output only. True when the custom column is referring to one or more metrics.", alias="referencesMetrics")
    resource_name: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of the custom column. Custom column resource names have the form: `customers/{customer_id}/customColumns/{custom_column_id}`", alias="resourceName")
    value_type: Optional[StrictStr] = Field(default=None, description="Output only. The type of the result value of the custom column.", alias="valueType")
    __properties: ClassVar[List[str]] = ["description", "id", "name", "queryable", "referencedSystemColumns", "referencesAttributes", "referencesMetrics", "resourceName", "valueType"]

    @field_validator('value_type')
    def value_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'STRING', 'INT64', 'DOUBLE', 'BOOLEAN']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'STRING', 'INT64', 'DOUBLE', 'BOOLEAN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesCustomColumn from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "description",
            "id",
            "name",
            "queryable",
            "referenced_system_columns",
            "references_attributes",
            "references_metrics",
            "value_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesCustomColumn from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "queryable": obj.get("queryable"),
            "referencedSystemColumns": obj.get("referencedSystemColumns"),
            "referencesAttributes": obj.get("referencesAttributes"),
            "referencesMetrics": obj.get("referencesMetrics"),
            "resourceName": obj.get("resourceName"),
            "valueType": obj.get("valueType")
        })
        return _obj



# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0ResourcesAssetGroup(BaseModel):
    """
    An asset group. AssetGroupAsset is used to link an asset to the asset group. AssetGroupSignal is used to associate a signal to an asset group.
    """ # noqa: E501
    ad_strength: Optional[StrictStr] = Field(default=None, description="Output only. Overall ad strength of this asset group.", alias="adStrength")
    campaign: Optional[StrictStr] = Field(default=None, description="Immutable. The campaign with which this asset group is associated. The asset which is linked to the asset group.")
    final_mobile_urls: Optional[List[StrictStr]] = Field(default=None, description="A list of final mobile URLs after all cross domain redirects. In performance max, by default, the urls are eligible for expansion unless opted out.", alias="finalMobileUrls")
    final_urls: Optional[List[StrictStr]] = Field(default=None, description="A list of final URLs after all cross domain redirects. In performance max, by default, the urls are eligible for expansion unless opted out.", alias="finalUrls")
    id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the asset group.")
    name: Optional[StrictStr] = Field(default=None, description="Required. Name of the asset group. Required. It must have a minimum length of 1 and maximum length of 128. It must be unique under a campaign.")
    path1: Optional[StrictStr] = Field(default=None, description="First part of text that may appear appended to the url displayed in the ad.")
    path2: Optional[StrictStr] = Field(default=None, description="Second part of text that may appear appended to the url displayed in the ad. This field can only be set when path1 is set.")
    resource_name: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of the asset group. Asset group resource names have the form: `customers/{customer_id}/assetGroups/{asset_group_id}`", alias="resourceName")
    status: Optional[StrictStr] = Field(default=None, description="The status of the asset group.")
    __properties: ClassVar[List[str]] = ["adStrength", "campaign", "finalMobileUrls", "finalUrls", "id", "name", "path1", "path2", "resourceName", "status"]

    @field_validator('ad_strength')
    def ad_strength_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'PENDING', 'NO_ADS', 'POOR', 'AVERAGE', 'GOOD', 'EXCELLENT']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'PENDING', 'NO_ADS', 'POOR', 'AVERAGE', 'GOOD', 'EXCELLENT')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'PAUSED', 'REMOVED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'PAUSED', 'REMOVED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesAssetGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "ad_strength",
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesAssetGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adStrength": obj.get("adStrength"),
            "campaign": obj.get("campaign"),
            "finalMobileUrls": obj.get("finalMobileUrls"),
            "finalUrls": obj.get("finalUrls"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "path1": obj.get("path1"),
            "path2": obj.get("path2"),
            "resourceName": obj.get("resourceName"),
            "status": obj.get("status")
        })
        return _obj



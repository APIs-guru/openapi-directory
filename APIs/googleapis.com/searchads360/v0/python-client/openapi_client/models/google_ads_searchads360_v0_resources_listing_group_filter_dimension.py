# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_ads_searchads360_v0_resources_listing_group_filter_dimension_product_bidding_category import GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductBiddingCategory
from openapi_client.models.google_ads_searchads360_v0_resources_listing_group_filter_dimension_product_brand import GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductBrand
from openapi_client.models.google_ads_searchads360_v0_resources_listing_group_filter_dimension_product_channel import GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductChannel
from openapi_client.models.google_ads_searchads360_v0_resources_listing_group_filter_dimension_product_condition import GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductCondition
from openapi_client.models.google_ads_searchads360_v0_resources_listing_group_filter_dimension_product_custom_attribute import GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductCustomAttribute
from openapi_client.models.google_ads_searchads360_v0_resources_listing_group_filter_dimension_product_item_id import GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductItemId
from openapi_client.models.google_ads_searchads360_v0_resources_listing_group_filter_dimension_product_type import GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductType
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0ResourcesListingGroupFilterDimension(BaseModel):
    """
    Listing dimensions for the asset group listing group filter.
    """ # noqa: E501
    product_bidding_category: Optional[GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductBiddingCategory] = Field(default=None, alias="productBiddingCategory")
    product_brand: Optional[GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductBrand] = Field(default=None, alias="productBrand")
    product_channel: Optional[GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductChannel] = Field(default=None, alias="productChannel")
    product_condition: Optional[GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductCondition] = Field(default=None, alias="productCondition")
    product_custom_attribute: Optional[GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductCustomAttribute] = Field(default=None, alias="productCustomAttribute")
    product_item_id: Optional[GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductItemId] = Field(default=None, alias="productItemId")
    product_type: Optional[GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductType] = Field(default=None, alias="productType")
    __properties: ClassVar[List[str]] = ["productBiddingCategory", "productBrand", "productChannel", "productCondition", "productCustomAttribute", "productItemId", "productType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesListingGroupFilterDimension from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of product_bidding_category
        if self.product_bidding_category:
            _dict['productBiddingCategory'] = self.product_bidding_category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_brand
        if self.product_brand:
            _dict['productBrand'] = self.product_brand.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_channel
        if self.product_channel:
            _dict['productChannel'] = self.product_channel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_condition
        if self.product_condition:
            _dict['productCondition'] = self.product_condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_custom_attribute
        if self.product_custom_attribute:
            _dict['productCustomAttribute'] = self.product_custom_attribute.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_item_id
        if self.product_item_id:
            _dict['productItemId'] = self.product_item_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_type
        if self.product_type:
            _dict['productType'] = self.product_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesListingGroupFilterDimension from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "productBiddingCategory": GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductBiddingCategory.from_dict(obj["productBiddingCategory"]) if obj.get("productBiddingCategory") is not None else None,
            "productBrand": GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductBrand.from_dict(obj["productBrand"]) if obj.get("productBrand") is not None else None,
            "productChannel": GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductChannel.from_dict(obj["productChannel"]) if obj.get("productChannel") is not None else None,
            "productCondition": GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductCondition.from_dict(obj["productCondition"]) if obj.get("productCondition") is not None else None,
            "productCustomAttribute": GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductCustomAttribute.from_dict(obj["productCustomAttribute"]) if obj.get("productCustomAttribute") is not None else None,
            "productItemId": GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductItemId.from_dict(obj["productItemId"]) if obj.get("productItemId") is not None else None,
            "productType": GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionProductType.from_dict(obj["productType"]) if obj.get("productType") is not None else None
        })
        return _obj



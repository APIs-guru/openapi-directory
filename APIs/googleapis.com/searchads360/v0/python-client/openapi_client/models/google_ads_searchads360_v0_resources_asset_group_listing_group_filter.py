# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_ads_searchads360_v0_resources_listing_group_filter_dimension import GoogleAdsSearchads360V0ResourcesListingGroupFilterDimension
from openapi_client.models.google_ads_searchads360_v0_resources_listing_group_filter_dimension_path import GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionPath
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0ResourcesAssetGroupListingGroupFilter(BaseModel):
    """
    AssetGroupListingGroupFilter represents a listing group filter tree node in an asset group.
    """ # noqa: E501
    asset_group: Optional[StrictStr] = Field(default=None, description="Immutable. The asset group which this asset group listing group filter is part of.", alias="assetGroup")
    case_value: Optional[GoogleAdsSearchads360V0ResourcesListingGroupFilterDimension] = Field(default=None, alias="caseValue")
    id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the ListingGroupFilter.")
    parent_listing_group_filter: Optional[StrictStr] = Field(default=None, description="Immutable. Resource name of the parent listing group subdivision. Null for the root listing group filter node.", alias="parentListingGroupFilter")
    path: Optional[GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionPath] = None
    resource_name: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of the asset group listing group filter. Asset group listing group filter resource name have the form: `customers/{customer_id}/assetGroupListingGroupFilters/{asset_group_id}~{listing_group_filter_id}`", alias="resourceName")
    type: Optional[StrictStr] = Field(default=None, description="Immutable. Type of a listing group filter node.")
    vertical: Optional[StrictStr] = Field(default=None, description="Immutable. The vertical the current node tree represents. All nodes in the same tree must belong to the same vertical.")
    __properties: ClassVar[List[str]] = ["assetGroup", "caseValue", "id", "parentListingGroupFilter", "path", "resourceName", "type", "vertical"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'SUBDIVISION', 'UNIT_INCLUDED', 'UNIT_EXCLUDED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'SUBDIVISION', 'UNIT_INCLUDED', 'UNIT_EXCLUDED')")
        return value

    @field_validator('vertical')
    def vertical_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'SHOPPING']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'SHOPPING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesAssetGroupListingGroupFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of case_value
        if self.case_value:
            _dict['caseValue'] = self.case_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of path
        if self.path:
            _dict['path'] = self.path.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesAssetGroupListingGroupFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assetGroup": obj.get("assetGroup"),
            "caseValue": GoogleAdsSearchads360V0ResourcesListingGroupFilterDimension.from_dict(obj["caseValue"]) if obj.get("caseValue") is not None else None,
            "id": obj.get("id"),
            "parentListingGroupFilter": obj.get("parentListingGroupFilter"),
            "path": GoogleAdsSearchads360V0ResourcesListingGroupFilterDimensionPath.from_dict(obj["path"]) if obj.get("path") is not None else None,
            "resourceName": obj.get("resourceName"),
            "type": obj.get("type"),
            "vertical": obj.get("vertical")
        })
        return _obj



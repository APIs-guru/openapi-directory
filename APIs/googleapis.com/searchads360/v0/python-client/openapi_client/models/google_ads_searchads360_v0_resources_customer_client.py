# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0ResourcesCustomerClient(BaseModel):
    """
    A link between the given customer and a client customer. CustomerClients only exist for manager customers. All direct and indirect client customers are included, as well as the manager itself.
    """ # noqa: E501
    applied_labels: Optional[List[StrictStr]] = Field(default=None, description="Output only. The resource names of the labels owned by the requesting customer that are applied to the client customer. Label resource names have the form: `customers/{customer_id}/labels/{label_id}`", alias="appliedLabels")
    client_customer: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the client-customer which is linked to the given customer. Read only.", alias="clientCustomer")
    currency_code: Optional[StrictStr] = Field(default=None, description="Output only. Currency code (for example, 'USD', 'EUR') for the client. Read only.", alias="currencyCode")
    descriptive_name: Optional[StrictStr] = Field(default=None, description="Output only. Descriptive name for the client. Read only.", alias="descriptiveName")
    hidden: Optional[StrictBool] = Field(default=None, description="Output only. Specifies whether this is a hidden account. Read only.")
    id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the client customer. Read only.")
    level: Optional[StrictStr] = Field(default=None, description="Output only. Distance between given customer and client. For self link, the level value will be 0. Read only.")
    manager: Optional[StrictBool] = Field(default=None, description="Output only. Identifies if the client is a manager. Read only.")
    resource_name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the customer client. CustomerClient resource names have the form: `customers/{customer_id}/customerClients/{client_customer_id}`", alias="resourceName")
    status: Optional[StrictStr] = Field(default=None, description="Output only. The status of the client customer. Read only.")
    test_account: Optional[StrictBool] = Field(default=None, description="Output only. Identifies if the client is a test account. Read only.", alias="testAccount")
    time_zone: Optional[StrictStr] = Field(default=None, description="Output only. Common Locale Data Repository (CLDR) string representation of the time zone of the client, for example, America/Los_Angeles. Read only.", alias="timeZone")
    __properties: ClassVar[List[str]] = ["appliedLabels", "clientCustomer", "currencyCode", "descriptiveName", "hidden", "id", "level", "manager", "resourceName", "status", "testAccount", "timeZone"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'CANCELED', 'SUSPENDED', 'CLOSED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'CANCELED', 'SUSPENDED', 'CLOSED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesCustomerClient from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "applied_labels",
            "client_customer",
            "currency_code",
            "descriptive_name",
            "hidden",
            "id",
            "level",
            "manager",
            "resource_name",
            "status",
            "test_account",
            "time_zone",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesCustomerClient from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appliedLabels": obj.get("appliedLabels"),
            "clientCustomer": obj.get("clientCustomer"),
            "currencyCode": obj.get("currencyCode"),
            "descriptiveName": obj.get("descriptiveName"),
            "hidden": obj.get("hidden"),
            "id": obj.get("id"),
            "level": obj.get("level"),
            "manager": obj.get("manager"),
            "resourceName": obj.get("resourceName"),
            "status": obj.get("status"),
            "testAccount": obj.get("testAccount"),
            "timeZone": obj.get("timeZone")
        })
        return _obj



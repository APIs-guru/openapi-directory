# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_ads_searchads360_v0_common_targeting_setting import GoogleAdsSearchads360V0CommonTargetingSetting
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0ResourcesAdGroup(BaseModel):
    """
    An ad group.
    """ # noqa: E501
    ad_rotation_mode: Optional[StrictStr] = Field(default=None, description="The ad rotation mode of the ad group.", alias="adRotationMode")
    cpc_bid_micros: Optional[StrictStr] = Field(default=None, description="The maximum CPC (cost-per-click) bid.", alias="cpcBidMicros")
    creation_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when this ad_group was created. The timestamp is in the customer's time zone and in \"yyyy-MM-dd HH:mm:ss\" format.", alias="creationTime")
    end_date: Optional[StrictStr] = Field(default=None, description="Output only. Date when the ad group ends serving ads. By default, the ad group ends on the ad group's end date. If this field is set, then the ad group ends at the end of the specified date in the customer's time zone. This field is only available for Microsoft Advertising and Facebook gateway accounts. Format: YYYY-MM-DD Example: 2019-03-14", alias="endDate")
    engine_id: Optional[StrictStr] = Field(default=None, description="Output only. ID of the ad group in the external engine account. This field is for non-Google Ads account only, for example, Yahoo Japan, Microsoft, Baidu etc. For Google Ads entity, use \"ad_group.id\" instead.", alias="engineId")
    engine_status: Optional[StrictStr] = Field(default=None, description="Output only. The Engine Status for ad group.", alias="engineStatus")
    id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the ad group.")
    labels: Optional[List[StrictStr]] = Field(default=None, description="Output only. The resource names of labels attached to this ad group.")
    language_code: Optional[StrictStr] = Field(default=None, description="Output only. The language of the ads and keywords in an ad group. This field is only available for Microsoft Advertising accounts. More details: https://docs.microsoft.com/en-us/advertising/guides/ad-languages?view=bingads-13#adlanguage", alias="languageCode")
    last_modified_time: Optional[StrictStr] = Field(default=None, description="Output only. The datetime when this ad group was last modified. The datetime is in the customer's time zone and in \"yyyy-MM-dd HH:mm:ss.ssssss\" format.", alias="lastModifiedTime")
    name: Optional[StrictStr] = Field(default=None, description="The name of the ad group. This field is required and should not be empty when creating new ad groups. It must contain fewer than 255 UTF-8 full-width characters. It must not contain any null (code point 0x0), NL line feed (code point 0xA) or carriage return (code point 0xD) characters.")
    resource_name: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of the ad group. Ad group resource names have the form: `customers/{customer_id}/adGroups/{ad_group_id}`", alias="resourceName")
    start_date: Optional[StrictStr] = Field(default=None, description="Output only. Date when this ad group starts serving ads. By default, the ad group starts now or the ad group's start date, whichever is later. If this field is set, then the ad group starts at the beginning of the specified date in the customer's time zone. This field is only available for Microsoft Advertising and Facebook gateway accounts. Format: YYYY-MM-DD Example: 2019-03-14", alias="startDate")
    status: Optional[StrictStr] = Field(default=None, description="The status of the ad group.")
    targeting_setting: Optional[GoogleAdsSearchads360V0CommonTargetingSetting] = Field(default=None, alias="targetingSetting")
    type: Optional[StrictStr] = Field(default=None, description="Immutable. The type of the ad group.")
    __properties: ClassVar[List[str]] = ["adRotationMode", "cpcBidMicros", "creationTime", "endDate", "engineId", "engineStatus", "id", "labels", "languageCode", "lastModifiedTime", "name", "resourceName", "startDate", "status", "targetingSetting", "type"]

    @field_validator('ad_rotation_mode')
    def ad_rotation_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'OPTIMIZE', 'ROTATE_FOREVER']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'OPTIMIZE', 'ROTATE_FOREVER')")
        return value

    @field_validator('engine_status')
    def engine_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'AD_GROUP_ELIGIBLE', 'AD_GROUP_EXPIRED', 'AD_GROUP_REMOVED', 'AD_GROUP_DRAFT', 'AD_GROUP_PAUSED', 'AD_GROUP_SERVING', 'AD_GROUP_SUBMITTED', 'CAMPAIGN_PAUSED', 'ACCOUNT_PAUSED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'AD_GROUP_ELIGIBLE', 'AD_GROUP_EXPIRED', 'AD_GROUP_REMOVED', 'AD_GROUP_DRAFT', 'AD_GROUP_PAUSED', 'AD_GROUP_SERVING', 'AD_GROUP_SUBMITTED', 'CAMPAIGN_PAUSED', 'ACCOUNT_PAUSED')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'PAUSED', 'REMOVED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'PAUSED', 'REMOVED')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'SEARCH_STANDARD', 'DISPLAY_STANDARD', 'SHOPPING_PRODUCT_ADS', 'SHOPPING_SHOWCASE_ADS', 'HOTEL_ADS', 'SHOPPING_SMART_ADS', 'VIDEO_BUMPER', 'VIDEO_TRUE_VIEW_IN_STREAM', 'VIDEO_TRUE_VIEW_IN_DISPLAY', 'VIDEO_NON_SKIPPABLE_IN_STREAM', 'VIDEO_OUTSTREAM', 'SEARCH_DYNAMIC_ADS', 'SHOPPING_COMPARISON_LISTING_ADS', 'PROMOTED_HOTEL_ADS', 'VIDEO_RESPONSIVE', 'VIDEO_EFFICIENT_REACH', 'SMART_CAMPAIGN_ADS', 'TRAVEL_ADS']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'SEARCH_STANDARD', 'DISPLAY_STANDARD', 'SHOPPING_PRODUCT_ADS', 'SHOPPING_SHOWCASE_ADS', 'HOTEL_ADS', 'SHOPPING_SMART_ADS', 'VIDEO_BUMPER', 'VIDEO_TRUE_VIEW_IN_STREAM', 'VIDEO_TRUE_VIEW_IN_DISPLAY', 'VIDEO_NON_SKIPPABLE_IN_STREAM', 'VIDEO_OUTSTREAM', 'SEARCH_DYNAMIC_ADS', 'SHOPPING_COMPARISON_LISTING_ADS', 'PROMOTED_HOTEL_ADS', 'VIDEO_RESPONSIVE', 'VIDEO_EFFICIENT_REACH', 'SMART_CAMPAIGN_ADS', 'TRAVEL_ADS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesAdGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creation_time",
            "end_date",
            "engine_id",
            "engine_status",
            "id",
            "labels",
            "language_code",
            "last_modified_time",
            "start_date",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of targeting_setting
        if self.targeting_setting:
            _dict['targetingSetting'] = self.targeting_setting.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesAdGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adRotationMode": obj.get("adRotationMode"),
            "cpcBidMicros": obj.get("cpcBidMicros"),
            "creationTime": obj.get("creationTime"),
            "endDate": obj.get("endDate"),
            "engineId": obj.get("engineId"),
            "engineStatus": obj.get("engineStatus"),
            "id": obj.get("id"),
            "labels": obj.get("labels"),
            "languageCode": obj.get("languageCode"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "name": obj.get("name"),
            "resourceName": obj.get("resourceName"),
            "startDate": obj.get("startDate"),
            "status": obj.get("status"),
            "targetingSetting": GoogleAdsSearchads360V0CommonTargetingSetting.from_dict(obj["targetingSetting"]) if obj.get("targetingSetting") is not None else None,
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0CommonLocationGroupInfo(BaseModel):
    """
    A radius around a list of locations specified through a feed.
    """ # noqa: E501
    feed_item_sets: Optional[List[StrictStr]] = Field(default=None, description="FeedItemSets whose FeedItems are targeted. If multiple IDs are specified, then all items that appear in at least one set are targeted. This field cannot be used with geo_target_constants. This is optional and can only be set in CREATE operations.", alias="feedItemSets")
    geo_target_constants: Optional[List[StrictStr]] = Field(default=None, description="Geo target constant(s) restricting the scope of the geographic area within the feed. Currently only one geo target constant is allowed.", alias="geoTargetConstants")
    radius: Optional[StrictStr] = Field(default=None, description="Distance in units specifying the radius around targeted locations. This is required and must be set in CREATE operations.")
    radius_units: Optional[StrictStr] = Field(default=None, description="Unit of the radius. Miles and meters are supported for geo target constants. Milli miles and meters are supported for feed item sets. This is required and must be set in CREATE operations.", alias="radiusUnits")
    __properties: ClassVar[List[str]] = ["feedItemSets", "geoTargetConstants", "radius", "radiusUnits"]

    @field_validator('radius_units')
    def radius_units_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'METERS', 'MILES', 'MILLI_MILES']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'METERS', 'MILES', 'MILLI_MILES')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0CommonLocationGroupInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0CommonLocationGroupInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "feedItemSets": obj.get("feedItemSets"),
            "geoTargetConstants": obj.get("geoTargetConstants"),
            "radius": obj.get("radius"),
            "radiusUnits": obj.get("radiusUnits")
        })
        return _obj



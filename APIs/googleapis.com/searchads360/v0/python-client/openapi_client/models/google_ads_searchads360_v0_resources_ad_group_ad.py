# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_ads_searchads360_v0_resources_ad import GoogleAdsSearchads360V0ResourcesAd
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0ResourcesAdGroupAd(BaseModel):
    """
    An ad group ad.
    """ # noqa: E501
    ad: Optional[GoogleAdsSearchads360V0ResourcesAd] = None
    creation_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when this ad_group_ad was created. The datetime is in the customer's time zone and in \"yyyy-MM-dd HH:mm:ss.ssssss\" format.", alias="creationTime")
    engine_id: Optional[StrictStr] = Field(default=None, description="Output only. ID of the ad in the external engine account. This field is for SearchAds 360 account only, for example, Yahoo Japan, Microsoft, Baidu etc. For non-SearchAds 360 entity, use \"ad_group_ad.ad.id\" instead.", alias="engineId")
    engine_status: Optional[StrictStr] = Field(default=None, description="Output only. Additional status of the ad in the external engine account. Possible statuses (depending on the type of external account) include active, eligible, pending review, etc.", alias="engineStatus")
    labels: Optional[List[StrictStr]] = Field(default=None, description="Output only. The resource names of labels attached to this ad group ad.")
    last_modified_time: Optional[StrictStr] = Field(default=None, description="Output only. The datetime when this ad group ad was last modified. The datetime is in the customer's time zone and in \"yyyy-MM-dd HH:mm:ss.ssssss\" format.", alias="lastModifiedTime")
    resource_name: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of the ad. Ad group ad resource names have the form: `customers/{customer_id}/adGroupAds/{ad_group_id}~{ad_id}`", alias="resourceName")
    status: Optional[StrictStr] = Field(default=None, description="The status of the ad.")
    __properties: ClassVar[List[str]] = ["ad", "creationTime", "engineId", "engineStatus", "labels", "lastModifiedTime", "resourceName", "status"]

    @field_validator('engine_status')
    def engine_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'AD_GROUP_AD_ELIGIBLE', 'AD_GROUP_AD_INAPPROPRIATE_FOR_CAMPAIGN', 'AD_GROUP_AD_MOBILE_URL_UNDER_REVIEW', 'AD_GROUP_AD_PARTIALLY_INVALID', 'AD_GROUP_AD_TO_BE_ACTIVATED', 'AD_GROUP_AD_NOT_REVIEWED', 'AD_GROUP_AD_ON_HOLD', 'AD_GROUP_AD_PAUSED', 'AD_GROUP_AD_REMOVED', 'AD_GROUP_AD_PENDING_REVIEW', 'AD_GROUP_AD_UNDER_REVIEW', 'AD_GROUP_AD_APPROVED', 'AD_GROUP_AD_DISAPPROVED', 'AD_GROUP_AD_SERVING', 'AD_GROUP_AD_ACCOUNT_PAUSED', 'AD_GROUP_AD_CAMPAIGN_PAUSED', 'AD_GROUP_AD_AD_GROUP_PAUSED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'AD_GROUP_AD_ELIGIBLE', 'AD_GROUP_AD_INAPPROPRIATE_FOR_CAMPAIGN', 'AD_GROUP_AD_MOBILE_URL_UNDER_REVIEW', 'AD_GROUP_AD_PARTIALLY_INVALID', 'AD_GROUP_AD_TO_BE_ACTIVATED', 'AD_GROUP_AD_NOT_REVIEWED', 'AD_GROUP_AD_ON_HOLD', 'AD_GROUP_AD_PAUSED', 'AD_GROUP_AD_REMOVED', 'AD_GROUP_AD_PENDING_REVIEW', 'AD_GROUP_AD_UNDER_REVIEW', 'AD_GROUP_AD_APPROVED', 'AD_GROUP_AD_DISAPPROVED', 'AD_GROUP_AD_SERVING', 'AD_GROUP_AD_ACCOUNT_PAUSED', 'AD_GROUP_AD_CAMPAIGN_PAUSED', 'AD_GROUP_AD_AD_GROUP_PAUSED')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'PAUSED', 'REMOVED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'PAUSED', 'REMOVED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesAdGroupAd from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creation_time",
            "engine_id",
            "engine_status",
            "labels",
            "last_modified_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ad
        if self.ad:
            _dict['ad'] = self.ad.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesAdGroupAd from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ad": GoogleAdsSearchads360V0ResourcesAd.from_dict(obj["ad"]) if obj.get("ad") is not None else None,
            "creationTime": obj.get("creationTime"),
            "engineId": obj.get("engineId"),
            "engineStatus": obj.get("engineStatus"),
            "labels": obj.get("labels"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "resourceName": obj.get("resourceName"),
            "status": obj.get("status")
        })
        return _obj



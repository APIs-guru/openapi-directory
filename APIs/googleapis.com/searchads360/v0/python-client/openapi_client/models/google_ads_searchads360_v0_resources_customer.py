# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_ads_searchads360_v0_resources_conversion_tracking_setting import GoogleAdsSearchads360V0ResourcesConversionTrackingSetting
from openapi_client.models.google_ads_searchads360_v0_resources_double_click_campaign_manager_setting import GoogleAdsSearchads360V0ResourcesDoubleClickCampaignManagerSetting
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0ResourcesCustomer(BaseModel):
    """
    A customer.
    """ # noqa: E501
    account_status: Optional[StrictStr] = Field(default=None, description="Output only. Account status, for example, Enabled, Paused, Removed, etc.", alias="accountStatus")
    account_type: Optional[StrictStr] = Field(default=None, description="Output only. Engine account type, for example, Google Ads, Microsoft Advertising, Yahoo Japan, Baidu, Facebook, Engine Track, etc.", alias="accountType")
    auto_tagging_enabled: Optional[StrictBool] = Field(default=None, description="Whether auto-tagging is enabled for the customer.", alias="autoTaggingEnabled")
    conversion_tracking_setting: Optional[GoogleAdsSearchads360V0ResourcesConversionTrackingSetting] = Field(default=None, alias="conversionTrackingSetting")
    creation_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when this customer was created. The timestamp is in the customer's time zone and in \"yyyy-MM-dd HH:mm:ss\" format.", alias="creationTime")
    currency_code: Optional[StrictStr] = Field(default=None, description="Immutable. The currency in which the account operates. A subset of the currency codes from the ISO 4217 standard is supported.", alias="currencyCode")
    descriptive_name: Optional[StrictStr] = Field(default=None, description="Optional, non-unique descriptive name of the customer.", alias="descriptiveName")
    double_click_campaign_manager_setting: Optional[GoogleAdsSearchads360V0ResourcesDoubleClickCampaignManagerSetting] = Field(default=None, alias="doubleClickCampaignManagerSetting")
    engine_id: Optional[StrictStr] = Field(default=None, description="Output only. ID of the account in the external engine account.", alias="engineId")
    final_url_suffix: Optional[StrictStr] = Field(default=None, description="The URL template for appending params to the final URL.", alias="finalUrlSuffix")
    id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the customer.")
    last_modified_time: Optional[StrictStr] = Field(default=None, description="Output only. The datetime when this customer was last modified. The datetime is in the customer's time zone and in \"yyyy-MM-dd HH:mm:ss.ssssss\" format.", alias="lastModifiedTime")
    manager: Optional[StrictBool] = Field(default=None, description="Output only. Whether the customer is a manager.")
    resource_name: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of the customer. Customer resource names have the form: `customers/{customer_id}`", alias="resourceName")
    status: Optional[StrictStr] = Field(default=None, description="Output only. The status of the customer.")
    time_zone: Optional[StrictStr] = Field(default=None, description="Immutable. The local timezone ID of the customer.", alias="timeZone")
    tracking_url_template: Optional[StrictStr] = Field(default=None, description="The URL template for constructing a tracking URL out of parameters.", alias="trackingUrlTemplate")
    __properties: ClassVar[List[str]] = ["accountStatus", "accountType", "autoTaggingEnabled", "conversionTrackingSetting", "creationTime", "currencyCode", "descriptiveName", "doubleClickCampaignManagerSetting", "engineId", "finalUrlSuffix", "id", "lastModifiedTime", "manager", "resourceName", "status", "timeZone", "trackingUrlTemplate"]

    @field_validator('account_status')
    def account_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'PAUSED', 'SUSPENDED', 'REMOVED', 'DRAFT']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'PAUSED', 'SUSPENDED', 'REMOVED', 'DRAFT')")
        return value

    @field_validator('account_type')
    def account_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'BAIDU', 'ENGINE_TRACK', 'FACEBOOK', 'FACEBOOK_GATEWAY', 'GOOGLE_ADS', 'MICROSOFT', 'SEARCH_ADS_360', 'YAHOO_JAPAN']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'BAIDU', 'ENGINE_TRACK', 'FACEBOOK', 'FACEBOOK_GATEWAY', 'GOOGLE_ADS', 'MICROSOFT', 'SEARCH_ADS_360', 'YAHOO_JAPAN')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'CANCELED', 'SUSPENDED', 'CLOSED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'CANCELED', 'SUSPENDED', 'CLOSED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesCustomer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "account_status",
            "account_type",
            "creation_time",
            "engine_id",
            "id",
            "last_modified_time",
            "manager",
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of conversion_tracking_setting
        if self.conversion_tracking_setting:
            _dict['conversionTrackingSetting'] = self.conversion_tracking_setting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of double_click_campaign_manager_setting
        if self.double_click_campaign_manager_setting:
            _dict['doubleClickCampaignManagerSetting'] = self.double_click_campaign_manager_setting.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesCustomer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountStatus": obj.get("accountStatus"),
            "accountType": obj.get("accountType"),
            "autoTaggingEnabled": obj.get("autoTaggingEnabled"),
            "conversionTrackingSetting": GoogleAdsSearchads360V0ResourcesConversionTrackingSetting.from_dict(obj["conversionTrackingSetting"]) if obj.get("conversionTrackingSetting") is not None else None,
            "creationTime": obj.get("creationTime"),
            "currencyCode": obj.get("currencyCode"),
            "descriptiveName": obj.get("descriptiveName"),
            "doubleClickCampaignManagerSetting": GoogleAdsSearchads360V0ResourcesDoubleClickCampaignManagerSetting.from_dict(obj["doubleClickCampaignManagerSetting"]) if obj.get("doubleClickCampaignManagerSetting") is not None else None,
            "engineId": obj.get("engineId"),
            "finalUrlSuffix": obj.get("finalUrlSuffix"),
            "id": obj.get("id"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "manager": obj.get("manager"),
            "resourceName": obj.get("resourceName"),
            "status": obj.get("status"),
            "timeZone": obj.get("timeZone"),
            "trackingUrlTemplate": obj.get("trackingUrlTemplate")
        })
        return _obj



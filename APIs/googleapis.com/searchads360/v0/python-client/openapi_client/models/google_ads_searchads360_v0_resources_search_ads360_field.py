# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0ResourcesSearchAds360Field(BaseModel):
    """
    A field or resource (artifact) used by SearchAds360Service.
    """ # noqa: E501
    attribute_resources: Optional[List[StrictStr]] = Field(default=None, description="Output only. The names of all resources that are selectable with the described artifact. Fields from these resources do not segment metrics when included in search queries. This field is only set for artifacts whose category is RESOURCE.", alias="attributeResources")
    category: Optional[StrictStr] = Field(default=None, description="Output only. The category of the artifact.")
    data_type: Optional[StrictStr] = Field(default=None, description="Output only. This field determines the operators that can be used with the artifact in WHERE clauses.", alias="dataType")
    enum_values: Optional[List[StrictStr]] = Field(default=None, description="Output only. Values the artifact can assume if it is a field of type ENUM. This field is only set for artifacts of category SEGMENT or ATTRIBUTE.", alias="enumValues")
    filterable: Optional[StrictBool] = Field(default=None, description="Output only. Whether the artifact can be used in a WHERE clause in search queries.")
    is_repeated: Optional[StrictBool] = Field(default=None, description="Output only. Whether the field artifact is repeated.", alias="isRepeated")
    metrics: Optional[List[StrictStr]] = Field(default=None, description="Output only. This field lists the names of all metrics that are selectable with the described artifact when it is used in the FROM clause. It is only set for artifacts whose category is RESOURCE.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The name of the artifact.")
    resource_name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the artifact. Artifact resource names have the form: `SearchAds360Fields/{name}`", alias="resourceName")
    segments: Optional[List[StrictStr]] = Field(default=None, description="Output only. This field lists the names of all artifacts, whether a segment or another resource, that segment metrics when included in search queries and when the described artifact is used in the FROM clause. It is only set for artifacts whose category is RESOURCE.")
    selectable: Optional[StrictBool] = Field(default=None, description="Output only. Whether the artifact can be used in a SELECT clause in search queries.")
    selectable_with: Optional[List[StrictStr]] = Field(default=None, description="Output only. The names of all resources, segments, and metrics that are selectable with the described artifact.", alias="selectableWith")
    sortable: Optional[StrictBool] = Field(default=None, description="Output only. Whether the artifact can be used in a ORDER BY clause in search queries.")
    type_url: Optional[StrictStr] = Field(default=None, description="Output only. The URL of proto describing the artifact's data type.", alias="typeUrl")
    __properties: ClassVar[List[str]] = ["attributeResources", "category", "dataType", "enumValues", "filterable", "isRepeated", "metrics", "name", "resourceName", "segments", "selectable", "selectableWith", "sortable", "typeUrl"]

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'RESOURCE', 'ATTRIBUTE', 'SEGMENT', 'METRIC']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'RESOURCE', 'ATTRIBUTE', 'SEGMENT', 'METRIC')")
        return value

    @field_validator('data_type')
    def data_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'BOOLEAN', 'DATE', 'DOUBLE', 'ENUM', 'FLOAT', 'INT32', 'INT64', 'MESSAGE', 'RESOURCE_NAME', 'STRING', 'UINT64']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'BOOLEAN', 'DATE', 'DOUBLE', 'ENUM', 'FLOAT', 'INT32', 'INT64', 'MESSAGE', 'RESOURCE_NAME', 'STRING', 'UINT64')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesSearchAds360Field from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "attribute_resources",
            "category",
            "data_type",
            "enum_values",
            "filterable",
            "is_repeated",
            "metrics",
            "name",
            "resource_name",
            "segments",
            "selectable",
            "selectable_with",
            "sortable",
            "type_url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesSearchAds360Field from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributeResources": obj.get("attributeResources"),
            "category": obj.get("category"),
            "dataType": obj.get("dataType"),
            "enumValues": obj.get("enumValues"),
            "filterable": obj.get("filterable"),
            "isRepeated": obj.get("isRepeated"),
            "metrics": obj.get("metrics"),
            "name": obj.get("name"),
            "resourceName": obj.get("resourceName"),
            "segments": obj.get("segments"),
            "selectable": obj.get("selectable"),
            "selectableWith": obj.get("selectableWith"),
            "sortable": obj.get("sortable"),
            "typeUrl": obj.get("typeUrl")
        })
        return _obj



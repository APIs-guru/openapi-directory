# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_ads_searchads360_v0_common_custom_parameter import GoogleAdsSearchads360V0CommonCustomParameter
from openapi_client.models.google_ads_searchads360_v0_common_manual_cpc import GoogleAdsSearchads360V0CommonManualCpc
from openapi_client.models.google_ads_searchads360_v0_common_maximize_conversion_value import GoogleAdsSearchads360V0CommonMaximizeConversionValue
from openapi_client.models.google_ads_searchads360_v0_common_maximize_conversions import GoogleAdsSearchads360V0CommonMaximizeConversions
from openapi_client.models.google_ads_searchads360_v0_common_percent_cpc import GoogleAdsSearchads360V0CommonPercentCpc
from openapi_client.models.google_ads_searchads360_v0_common_real_time_bidding_setting import GoogleAdsSearchads360V0CommonRealTimeBiddingSetting
from openapi_client.models.google_ads_searchads360_v0_common_target_cpa import GoogleAdsSearchads360V0CommonTargetCpa
from openapi_client.models.google_ads_searchads360_v0_common_target_impression_share import GoogleAdsSearchads360V0CommonTargetImpressionShare
from openapi_client.models.google_ads_searchads360_v0_common_target_roas import GoogleAdsSearchads360V0CommonTargetRoas
from openapi_client.models.google_ads_searchads360_v0_common_target_spend import GoogleAdsSearchads360V0CommonTargetSpend
from openapi_client.models.google_ads_searchads360_v0_resources_campaign_dynamic_search_ads_setting import GoogleAdsSearchads360V0ResourcesCampaignDynamicSearchAdsSetting
from openapi_client.models.google_ads_searchads360_v0_resources_campaign_geo_target_type_setting import GoogleAdsSearchads360V0ResourcesCampaignGeoTargetTypeSetting
from openapi_client.models.google_ads_searchads360_v0_resources_campaign_network_settings import GoogleAdsSearchads360V0ResourcesCampaignNetworkSettings
from openapi_client.models.google_ads_searchads360_v0_resources_campaign_optimization_goal_setting import GoogleAdsSearchads360V0ResourcesCampaignOptimizationGoalSetting
from openapi_client.models.google_ads_searchads360_v0_resources_campaign_selective_optimization import GoogleAdsSearchads360V0ResourcesCampaignSelectiveOptimization
from openapi_client.models.google_ads_searchads360_v0_resources_campaign_shopping_setting import GoogleAdsSearchads360V0ResourcesCampaignShoppingSetting
from openapi_client.models.google_ads_searchads360_v0_resources_campaign_tracking_setting import GoogleAdsSearchads360V0ResourcesCampaignTrackingSetting
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0ResourcesCampaign(BaseModel):
    """
    A campaign.
    """ # noqa: E501
    ad_serving_optimization_status: Optional[StrictStr] = Field(default=None, description="The ad serving optimization status of the campaign.", alias="adServingOptimizationStatus")
    advertising_channel_sub_type: Optional[StrictStr] = Field(default=None, description="Immutable. Optional refinement to `advertising_channel_type`. Must be a valid sub-type of the parent channel type. Can be set only when creating campaigns. After campaign is created, the field can not be changed.", alias="advertisingChannelSubType")
    advertising_channel_type: Optional[StrictStr] = Field(default=None, description="Immutable. The primary serving target for ads within the campaign. The targeting options can be refined in `network_settings`. This field is required and should not be empty when creating new campaigns. Can be set only when creating campaigns. After the campaign is created, the field can not be changed.", alias="advertisingChannelType")
    bidding_strategy: Optional[StrictStr] = Field(default=None, description="Portfolio bidding strategy used by campaign.", alias="biddingStrategy")
    bidding_strategy_system_status: Optional[StrictStr] = Field(default=None, description="Output only. The system status of the campaign's bidding strategy.", alias="biddingStrategySystemStatus")
    bidding_strategy_type: Optional[StrictStr] = Field(default=None, description="Output only. The type of bidding strategy. A bidding strategy can be created by setting either the bidding scheme to create a standard bidding strategy or the `bidding_strategy` field to create a portfolio bidding strategy. This field is read-only.", alias="biddingStrategyType")
    campaign_budget: Optional[StrictStr] = Field(default=None, description="The budget of the campaign.", alias="campaignBudget")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when this campaign was created. The timestamp is in the customer's time zone and in \"yyyy-MM-dd HH:mm:ss\" format. create_time will be deprecated in v1. Use creation_time instead.", alias="createTime")
    creation_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when this campaign was created. The timestamp is in the customer's time zone and in \"yyyy-MM-dd HH:mm:ss\" format.", alias="creationTime")
    dynamic_search_ads_setting: Optional[GoogleAdsSearchads360V0ResourcesCampaignDynamicSearchAdsSetting] = Field(default=None, alias="dynamicSearchAdsSetting")
    end_date: Optional[StrictStr] = Field(default=None, description="The last day of the campaign in serving customer's timezone in YYYY-MM-DD format. On create, defaults to 2037-12-30, which means the campaign will run indefinitely. To set an existing campaign to run indefinitely, set this field to 2037-12-30.", alias="endDate")
    engine_id: Optional[StrictStr] = Field(default=None, description="Output only. ID of the campaign in the external engine account. This field is for non-Google Ads account only, for example, Yahoo Japan, Microsoft, Baidu etc. For Google Ads entity, use \"campaign.id\" instead.", alias="engineId")
    excluded_parent_asset_field_types: Optional[List[StrictStr]] = Field(default=None, description="The asset field types that should be excluded from this campaign. Asset links with these field types will not be inherited by this campaign from the upper level.", alias="excludedParentAssetFieldTypes")
    final_url_suffix: Optional[StrictStr] = Field(default=None, description="Suffix used to append query parameters to landing pages that are served with parallel tracking.", alias="finalUrlSuffix")
    frequency_caps: Optional[List[Dict[str, Any]]] = Field(default=None, description="A list that limits how often each user will see this campaign's ads.", alias="frequencyCaps")
    geo_target_type_setting: Optional[GoogleAdsSearchads360V0ResourcesCampaignGeoTargetTypeSetting] = Field(default=None, alias="geoTargetTypeSetting")
    id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the campaign.")
    labels: Optional[List[StrictStr]] = Field(default=None, description="Output only. The resource names of labels attached to this campaign.")
    last_modified_time: Optional[StrictStr] = Field(default=None, description="Output only. The datetime when this campaign was last modified. The datetime is in the customer's time zone and in \"yyyy-MM-dd HH:mm:ss.ssssss\" format.", alias="lastModifiedTime")
    manual_cpa: Optional[Dict[str, Any]] = Field(default=None, description="Manual bidding strategy that allows advertiser to set the bid per advertiser-specified action.", alias="manualCpa")
    manual_cpc: Optional[GoogleAdsSearchads360V0CommonManualCpc] = Field(default=None, alias="manualCpc")
    manual_cpm: Optional[Dict[str, Any]] = Field(default=None, description="Manual impression-based bidding where user pays per thousand impressions.", alias="manualCpm")
    maximize_conversion_value: Optional[GoogleAdsSearchads360V0CommonMaximizeConversionValue] = Field(default=None, alias="maximizeConversionValue")
    maximize_conversions: Optional[GoogleAdsSearchads360V0CommonMaximizeConversions] = Field(default=None, alias="maximizeConversions")
    name: Optional[StrictStr] = Field(default=None, description="The name of the campaign. This field is required and should not be empty when creating new campaigns. It must not contain any null (code point 0x0), NL line feed (code point 0xA) or carriage return (code point 0xD) characters.")
    network_settings: Optional[GoogleAdsSearchads360V0ResourcesCampaignNetworkSettings] = Field(default=None, alias="networkSettings")
    optimization_goal_setting: Optional[GoogleAdsSearchads360V0ResourcesCampaignOptimizationGoalSetting] = Field(default=None, alias="optimizationGoalSetting")
    percent_cpc: Optional[GoogleAdsSearchads360V0CommonPercentCpc] = Field(default=None, alias="percentCpc")
    real_time_bidding_setting: Optional[GoogleAdsSearchads360V0CommonRealTimeBiddingSetting] = Field(default=None, alias="realTimeBiddingSetting")
    resource_name: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of the campaign. Campaign resource names have the form: `customers/{customer_id}/campaigns/{campaign_id}`", alias="resourceName")
    selective_optimization: Optional[GoogleAdsSearchads360V0ResourcesCampaignSelectiveOptimization] = Field(default=None, alias="selectiveOptimization")
    serving_status: Optional[StrictStr] = Field(default=None, description="Output only. The ad serving status of the campaign.", alias="servingStatus")
    shopping_setting: Optional[GoogleAdsSearchads360V0ResourcesCampaignShoppingSetting] = Field(default=None, alias="shoppingSetting")
    start_date: Optional[StrictStr] = Field(default=None, description="The date when campaign started in serving customer's timezone in YYYY-MM-DD format.", alias="startDate")
    status: Optional[StrictStr] = Field(default=None, description="The status of the campaign. When a new campaign is added, the status defaults to ENABLED.")
    target_cpa: Optional[GoogleAdsSearchads360V0CommonTargetCpa] = Field(default=None, alias="targetCpa")
    target_cpm: Optional[Dict[str, Any]] = Field(default=None, description="Target CPM (cost per thousand impressions) is an automated bidding strategy that sets bids to optimize performance given the target CPM you set.", alias="targetCpm")
    target_impression_share: Optional[GoogleAdsSearchads360V0CommonTargetImpressionShare] = Field(default=None, alias="targetImpressionShare")
    target_roas: Optional[GoogleAdsSearchads360V0CommonTargetRoas] = Field(default=None, alias="targetRoas")
    target_spend: Optional[GoogleAdsSearchads360V0CommonTargetSpend] = Field(default=None, alias="targetSpend")
    tracking_setting: Optional[GoogleAdsSearchads360V0ResourcesCampaignTrackingSetting] = Field(default=None, alias="trackingSetting")
    tracking_url_template: Optional[StrictStr] = Field(default=None, description="The URL template for constructing a tracking URL.", alias="trackingUrlTemplate")
    url_custom_parameters: Optional[List[GoogleAdsSearchads360V0CommonCustomParameter]] = Field(default=None, description="The list of mappings used to substitute custom parameter tags in a `tracking_url_template`, `final_urls`, or `mobile_final_urls`.", alias="urlCustomParameters")
    url_expansion_opt_out: Optional[StrictBool] = Field(default=None, description="Represents opting out of URL expansion to more targeted URLs. If opted out (true), only the final URLs in the asset group or URLs specified in the advertiser's Google Merchant Center or business data feeds are targeted. If opted in (false), the entire domain will be targeted. This field can only be set for Performance Max campaigns, where the default value is false.", alias="urlExpansionOptOut")
    __properties: ClassVar[List[str]] = ["adServingOptimizationStatus", "advertisingChannelSubType", "advertisingChannelType", "biddingStrategy", "biddingStrategySystemStatus", "biddingStrategyType", "campaignBudget", "createTime", "creationTime", "dynamicSearchAdsSetting", "endDate", "engineId", "excludedParentAssetFieldTypes", "finalUrlSuffix", "frequencyCaps", "geoTargetTypeSetting", "id", "labels", "lastModifiedTime", "manualCpa", "manualCpc", "manualCpm", "maximizeConversionValue", "maximizeConversions", "name", "networkSettings", "optimizationGoalSetting", "percentCpc", "realTimeBiddingSetting", "resourceName", "selectiveOptimization", "servingStatus", "shoppingSetting", "startDate", "status", "targetCpa", "targetCpm", "targetImpressionShare", "targetRoas", "targetSpend", "trackingSetting", "trackingUrlTemplate", "urlCustomParameters", "urlExpansionOptOut"]

    @field_validator('ad_serving_optimization_status')
    def ad_serving_optimization_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'OPTIMIZE', 'CONVERSION_OPTIMIZE', 'ROTATE', 'ROTATE_INDEFINITELY', 'UNAVAILABLE']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'OPTIMIZE', 'CONVERSION_OPTIMIZE', 'ROTATE', 'ROTATE_INDEFINITELY', 'UNAVAILABLE')")
        return value

    @field_validator('advertising_channel_sub_type')
    def advertising_channel_sub_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'SEARCH_MOBILE_APP', 'DISPLAY_MOBILE_APP', 'SEARCH_EXPRESS', 'DISPLAY_EXPRESS', 'SHOPPING_SMART_ADS', 'DISPLAY_GMAIL_AD', 'DISPLAY_SMART_CAMPAIGN', 'VIDEO_OUTSTREAM', 'VIDEO_ACTION', 'VIDEO_NON_SKIPPABLE', 'APP_CAMPAIGN', 'APP_CAMPAIGN_FOR_ENGAGEMENT', 'LOCAL_CAMPAIGN', 'SHOPPING_COMPARISON_LISTING_ADS', 'SMART_CAMPAIGN', 'VIDEO_SEQUENCE', 'APP_CAMPAIGN_FOR_PRE_REGISTRATION', 'VIDEO_REACH_TARGET_FREQUENCY', 'TRAVEL_ACTIVITIES']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'SEARCH_MOBILE_APP', 'DISPLAY_MOBILE_APP', 'SEARCH_EXPRESS', 'DISPLAY_EXPRESS', 'SHOPPING_SMART_ADS', 'DISPLAY_GMAIL_AD', 'DISPLAY_SMART_CAMPAIGN', 'VIDEO_OUTSTREAM', 'VIDEO_ACTION', 'VIDEO_NON_SKIPPABLE', 'APP_CAMPAIGN', 'APP_CAMPAIGN_FOR_ENGAGEMENT', 'LOCAL_CAMPAIGN', 'SHOPPING_COMPARISON_LISTING_ADS', 'SMART_CAMPAIGN', 'VIDEO_SEQUENCE', 'APP_CAMPAIGN_FOR_PRE_REGISTRATION', 'VIDEO_REACH_TARGET_FREQUENCY', 'TRAVEL_ACTIVITIES')")
        return value

    @field_validator('advertising_channel_type')
    def advertising_channel_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'SEARCH', 'DISPLAY', 'SHOPPING', 'HOTEL', 'VIDEO', 'MULTI_CHANNEL', 'LOCAL', 'SMART', 'PERFORMANCE_MAX', 'LOCAL_SERVICES', 'DISCOVERY', 'TRAVEL']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'SEARCH', 'DISPLAY', 'SHOPPING', 'HOTEL', 'VIDEO', 'MULTI_CHANNEL', 'LOCAL', 'SMART', 'PERFORMANCE_MAX', 'LOCAL_SERVICES', 'DISCOVERY', 'TRAVEL')")
        return value

    @field_validator('bidding_strategy_system_status')
    def bidding_strategy_system_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'LEARNING_NEW', 'LEARNING_SETTING_CHANGE', 'LEARNING_BUDGET_CHANGE', 'LEARNING_COMPOSITION_CHANGE', 'LEARNING_CONVERSION_TYPE_CHANGE', 'LEARNING_CONVERSION_SETTING_CHANGE', 'LIMITED_BY_CPC_BID_CEILING', 'LIMITED_BY_CPC_BID_FLOOR', 'LIMITED_BY_DATA', 'LIMITED_BY_BUDGET', 'LIMITED_BY_LOW_PRIORITY_SPEND', 'LIMITED_BY_LOW_QUALITY', 'LIMITED_BY_INVENTORY', 'MISCONFIGURED_ZERO_ELIGIBILITY', 'MISCONFIGURED_CONVERSION_TYPES', 'MISCONFIGURED_CONVERSION_SETTINGS', 'MISCONFIGURED_SHARED_BUDGET', 'MISCONFIGURED_STRATEGY_TYPE', 'PAUSED', 'UNAVAILABLE', 'MULTIPLE_LEARNING', 'MULTIPLE_LIMITED', 'MULTIPLE_MISCONFIGURED', 'MULTIPLE']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'LEARNING_NEW', 'LEARNING_SETTING_CHANGE', 'LEARNING_BUDGET_CHANGE', 'LEARNING_COMPOSITION_CHANGE', 'LEARNING_CONVERSION_TYPE_CHANGE', 'LEARNING_CONVERSION_SETTING_CHANGE', 'LIMITED_BY_CPC_BID_CEILING', 'LIMITED_BY_CPC_BID_FLOOR', 'LIMITED_BY_DATA', 'LIMITED_BY_BUDGET', 'LIMITED_BY_LOW_PRIORITY_SPEND', 'LIMITED_BY_LOW_QUALITY', 'LIMITED_BY_INVENTORY', 'MISCONFIGURED_ZERO_ELIGIBILITY', 'MISCONFIGURED_CONVERSION_TYPES', 'MISCONFIGURED_CONVERSION_SETTINGS', 'MISCONFIGURED_SHARED_BUDGET', 'MISCONFIGURED_STRATEGY_TYPE', 'PAUSED', 'UNAVAILABLE', 'MULTIPLE_LEARNING', 'MULTIPLE_LIMITED', 'MULTIPLE_MISCONFIGURED', 'MULTIPLE')")
        return value

    @field_validator('bidding_strategy_type')
    def bidding_strategy_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'COMMISSION', 'ENHANCED_CPC', 'INVALID', 'MANUAL_CPA', 'MANUAL_CPC', 'MANUAL_CPM', 'MANUAL_CPV', 'MAXIMIZE_CONVERSIONS', 'MAXIMIZE_CONVERSION_VALUE', 'PAGE_ONE_PROMOTED', 'PERCENT_CPC', 'TARGET_CPA', 'TARGET_CPM', 'TARGET_IMPRESSION_SHARE', 'TARGET_OUTRANK_SHARE', 'TARGET_ROAS', 'TARGET_SPEND']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'COMMISSION', 'ENHANCED_CPC', 'INVALID', 'MANUAL_CPA', 'MANUAL_CPC', 'MANUAL_CPM', 'MANUAL_CPV', 'MAXIMIZE_CONVERSIONS', 'MAXIMIZE_CONVERSION_VALUE', 'PAGE_ONE_PROMOTED', 'PERCENT_CPC', 'TARGET_CPA', 'TARGET_CPM', 'TARGET_IMPRESSION_SHARE', 'TARGET_OUTRANK_SHARE', 'TARGET_ROAS', 'TARGET_SPEND')")
        return value

    @field_validator('excluded_parent_asset_field_types')
    def excluded_parent_asset_field_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['UNSPECIFIED', 'UNKNOWN', 'HEADLINE', 'DESCRIPTION', 'MANDATORY_AD_TEXT', 'MARKETING_IMAGE', 'MEDIA_BUNDLE', 'YOUTUBE_VIDEO', 'BOOK_ON_GOOGLE', 'LEAD_FORM', 'PROMOTION', 'CALLOUT', 'STRUCTURED_SNIPPET', 'SITELINK', 'MOBILE_APP', 'HOTEL_CALLOUT', 'CALL', 'PRICE', 'LONG_HEADLINE', 'BUSINESS_NAME', 'SQUARE_MARKETING_IMAGE', 'PORTRAIT_MARKETING_IMAGE', 'LOGO', 'LANDSCAPE_LOGO', 'VIDEO', 'CALL_TO_ACTION_SELECTION', 'AD_IMAGE', 'BUSINESS_LOGO', 'HOTEL_PROPERTY']):
                raise ValueError("each list item must be one of ('UNSPECIFIED', 'UNKNOWN', 'HEADLINE', 'DESCRIPTION', 'MANDATORY_AD_TEXT', 'MARKETING_IMAGE', 'MEDIA_BUNDLE', 'YOUTUBE_VIDEO', 'BOOK_ON_GOOGLE', 'LEAD_FORM', 'PROMOTION', 'CALLOUT', 'STRUCTURED_SNIPPET', 'SITELINK', 'MOBILE_APP', 'HOTEL_CALLOUT', 'CALL', 'PRICE', 'LONG_HEADLINE', 'BUSINESS_NAME', 'SQUARE_MARKETING_IMAGE', 'PORTRAIT_MARKETING_IMAGE', 'LOGO', 'LANDSCAPE_LOGO', 'VIDEO', 'CALL_TO_ACTION_SELECTION', 'AD_IMAGE', 'BUSINESS_LOGO', 'HOTEL_PROPERTY')")
        return value

    @field_validator('serving_status')
    def serving_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'SERVING', 'NONE', 'ENDED', 'PENDING', 'SUSPENDED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'SERVING', 'NONE', 'ENDED', 'PENDING', 'SUSPENDED')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'PAUSED', 'REMOVED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNKNOWN', 'ENABLED', 'PAUSED', 'REMOVED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesCampaign from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "bidding_strategy_system_status",
            "bidding_strategy_type",
            "create_time",
            "creation_time",
            "engine_id",
            "id",
            "labels",
            "last_modified_time",
            "serving_status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dynamic_search_ads_setting
        if self.dynamic_search_ads_setting:
            _dict['dynamicSearchAdsSetting'] = self.dynamic_search_ads_setting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geo_target_type_setting
        if self.geo_target_type_setting:
            _dict['geoTargetTypeSetting'] = self.geo_target_type_setting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manual_cpc
        if self.manual_cpc:
            _dict['manualCpc'] = self.manual_cpc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maximize_conversion_value
        if self.maximize_conversion_value:
            _dict['maximizeConversionValue'] = self.maximize_conversion_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maximize_conversions
        if self.maximize_conversions:
            _dict['maximizeConversions'] = self.maximize_conversions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_settings
        if self.network_settings:
            _dict['networkSettings'] = self.network_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of optimization_goal_setting
        if self.optimization_goal_setting:
            _dict['optimizationGoalSetting'] = self.optimization_goal_setting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of percent_cpc
        if self.percent_cpc:
            _dict['percentCpc'] = self.percent_cpc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of real_time_bidding_setting
        if self.real_time_bidding_setting:
            _dict['realTimeBiddingSetting'] = self.real_time_bidding_setting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of selective_optimization
        if self.selective_optimization:
            _dict['selectiveOptimization'] = self.selective_optimization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shopping_setting
        if self.shopping_setting:
            _dict['shoppingSetting'] = self.shopping_setting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_cpa
        if self.target_cpa:
            _dict['targetCpa'] = self.target_cpa.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_impression_share
        if self.target_impression_share:
            _dict['targetImpressionShare'] = self.target_impression_share.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_roas
        if self.target_roas:
            _dict['targetRoas'] = self.target_roas.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_spend
        if self.target_spend:
            _dict['targetSpend'] = self.target_spend.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tracking_setting
        if self.tracking_setting:
            _dict['trackingSetting'] = self.tracking_setting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in url_custom_parameters (list)
        _items = []
        if self.url_custom_parameters:
            for _item_url_custom_parameters in self.url_custom_parameters:
                if _item_url_custom_parameters:
                    _items.append(_item_url_custom_parameters.to_dict())
            _dict['urlCustomParameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesCampaign from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adServingOptimizationStatus": obj.get("adServingOptimizationStatus"),
            "advertisingChannelSubType": obj.get("advertisingChannelSubType"),
            "advertisingChannelType": obj.get("advertisingChannelType"),
            "biddingStrategy": obj.get("biddingStrategy"),
            "biddingStrategySystemStatus": obj.get("biddingStrategySystemStatus"),
            "biddingStrategyType": obj.get("biddingStrategyType"),
            "campaignBudget": obj.get("campaignBudget"),
            "createTime": obj.get("createTime"),
            "creationTime": obj.get("creationTime"),
            "dynamicSearchAdsSetting": GoogleAdsSearchads360V0ResourcesCampaignDynamicSearchAdsSetting.from_dict(obj["dynamicSearchAdsSetting"]) if obj.get("dynamicSearchAdsSetting") is not None else None,
            "endDate": obj.get("endDate"),
            "engineId": obj.get("engineId"),
            "excludedParentAssetFieldTypes": obj.get("excludedParentAssetFieldTypes"),
            "finalUrlSuffix": obj.get("finalUrlSuffix"),
            "frequencyCaps": obj.get("frequencyCaps"),
            "geoTargetTypeSetting": GoogleAdsSearchads360V0ResourcesCampaignGeoTargetTypeSetting.from_dict(obj["geoTargetTypeSetting"]) if obj.get("geoTargetTypeSetting") is not None else None,
            "id": obj.get("id"),
            "labels": obj.get("labels"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "manualCpa": obj.get("manualCpa"),
            "manualCpc": GoogleAdsSearchads360V0CommonManualCpc.from_dict(obj["manualCpc"]) if obj.get("manualCpc") is not None else None,
            "manualCpm": obj.get("manualCpm"),
            "maximizeConversionValue": GoogleAdsSearchads360V0CommonMaximizeConversionValue.from_dict(obj["maximizeConversionValue"]) if obj.get("maximizeConversionValue") is not None else None,
            "maximizeConversions": GoogleAdsSearchads360V0CommonMaximizeConversions.from_dict(obj["maximizeConversions"]) if obj.get("maximizeConversions") is not None else None,
            "name": obj.get("name"),
            "networkSettings": GoogleAdsSearchads360V0ResourcesCampaignNetworkSettings.from_dict(obj["networkSettings"]) if obj.get("networkSettings") is not None else None,
            "optimizationGoalSetting": GoogleAdsSearchads360V0ResourcesCampaignOptimizationGoalSetting.from_dict(obj["optimizationGoalSetting"]) if obj.get("optimizationGoalSetting") is not None else None,
            "percentCpc": GoogleAdsSearchads360V0CommonPercentCpc.from_dict(obj["percentCpc"]) if obj.get("percentCpc") is not None else None,
            "realTimeBiddingSetting": GoogleAdsSearchads360V0CommonRealTimeBiddingSetting.from_dict(obj["realTimeBiddingSetting"]) if obj.get("realTimeBiddingSetting") is not None else None,
            "resourceName": obj.get("resourceName"),
            "selectiveOptimization": GoogleAdsSearchads360V0ResourcesCampaignSelectiveOptimization.from_dict(obj["selectiveOptimization"]) if obj.get("selectiveOptimization") is not None else None,
            "servingStatus": obj.get("servingStatus"),
            "shoppingSetting": GoogleAdsSearchads360V0ResourcesCampaignShoppingSetting.from_dict(obj["shoppingSetting"]) if obj.get("shoppingSetting") is not None else None,
            "startDate": obj.get("startDate"),
            "status": obj.get("status"),
            "targetCpa": GoogleAdsSearchads360V0CommonTargetCpa.from_dict(obj["targetCpa"]) if obj.get("targetCpa") is not None else None,
            "targetCpm": obj.get("targetCpm"),
            "targetImpressionShare": GoogleAdsSearchads360V0CommonTargetImpressionShare.from_dict(obj["targetImpressionShare"]) if obj.get("targetImpressionShare") is not None else None,
            "targetRoas": GoogleAdsSearchads360V0CommonTargetRoas.from_dict(obj["targetRoas"]) if obj.get("targetRoas") is not None else None,
            "targetSpend": GoogleAdsSearchads360V0CommonTargetSpend.from_dict(obj["targetSpend"]) if obj.get("targetSpend") is not None else None,
            "trackingSetting": GoogleAdsSearchads360V0ResourcesCampaignTrackingSetting.from_dict(obj["trackingSetting"]) if obj.get("trackingSetting") is not None else None,
            "trackingUrlTemplate": obj.get("trackingUrlTemplate"),
            "urlCustomParameters": [GoogleAdsSearchads360V0CommonCustomParameter.from_dict(_item) for _item in obj["urlCustomParameters"]] if obj.get("urlCustomParameters") is not None else None,
            "urlExpansionOptOut": obj.get("urlExpansionOptOut")
        })
        return _obj



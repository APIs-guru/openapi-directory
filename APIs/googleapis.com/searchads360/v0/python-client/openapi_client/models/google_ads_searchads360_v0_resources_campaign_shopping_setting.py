# coding: utf-8

"""
    Search Ads 360 Reporting API

    The Search Ads 360 API allows developers to automate downloading reports from Search Ads 360.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAdsSearchads360V0ResourcesCampaignShoppingSetting(BaseModel):
    """
    The setting for Shopping campaigns. Defines the universe of products that can be advertised by the campaign, and how this campaign interacts with other Shopping campaigns.
    """ # noqa: E501
    campaign_priority: Optional[StrictInt] = Field(default=None, description="Priority of the campaign. Campaigns with numerically higher priorities take precedence over those with lower priorities. This field is required for Shopping campaigns, with values between 0 and 2, inclusive. This field is optional for Smart Shopping campaigns, but must be equal to 3 if set.", alias="campaignPriority")
    enable_local: Optional[StrictBool] = Field(default=None, description="Whether to include local products.", alias="enableLocal")
    feed_label: Optional[StrictStr] = Field(default=None, description="Feed label of products to include in the campaign. Only one of feed_label or sales_country can be set. If used instead of sales_country, the feed_label field accepts country codes in the same format for example: 'XX'. Otherwise can be any string used for feed label in Google Merchant Center.", alias="feedLabel")
    merchant_id: Optional[StrictStr] = Field(default=None, description="Immutable. ID of the Merchant Center account. This field is required for create operations. This field is immutable for Shopping campaigns.", alias="merchantId")
    sales_country: Optional[StrictStr] = Field(default=None, description="Sales country of products to include in the campaign. ", alias="salesCountry")
    use_vehicle_inventory: Optional[StrictBool] = Field(default=None, description="Immutable. Whether to target Vehicle Listing inventory.", alias="useVehicleInventory")
    __properties: ClassVar[List[str]] = ["campaignPriority", "enableLocal", "feedLabel", "merchantId", "salesCountry", "useVehicleInventory"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesCampaignShoppingSetting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAdsSearchads360V0ResourcesCampaignShoppingSetting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "campaignPriority": obj.get("campaignPriority"),
            "enableLocal": obj.get("enableLocal"),
            "feedLabel": obj.get("feedLabel"),
            "merchantId": obj.get("merchantId"),
            "salesCountry": obj.get("salesCountry"),
            "useVehicleInventory": obj.get("useVehicleInventory")
        })
        return _obj



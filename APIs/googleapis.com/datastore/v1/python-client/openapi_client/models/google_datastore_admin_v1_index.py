# coding: utf-8

"""
    Cloud Datastore API

    Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_datastore_admin_v1_indexed_property import GoogleDatastoreAdminV1IndexedProperty
from typing import Optional, Set
from typing_extensions import Self

class GoogleDatastoreAdminV1Index(BaseModel):
    """
    Datastore composite index definition.
    """ # noqa: E501
    ancestor: Optional[StrictStr] = Field(default=None, description="Required. The index's ancestor mode. Must not be ANCESTOR_MODE_UNSPECIFIED.")
    index_id: Optional[StrictStr] = Field(default=None, description="Output only. The resource ID of the index.", alias="indexId")
    kind: Optional[StrictStr] = Field(default=None, description="Required. The entity kind to which this index applies.")
    project_id: Optional[StrictStr] = Field(default=None, description="Output only. Project ID.", alias="projectId")
    properties: Optional[List[GoogleDatastoreAdminV1IndexedProperty]] = Field(default=None, description="Required. An ordered sequence of property names and their index attributes. Requires: * A maximum of 100 properties.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the index.")
    __properties: ClassVar[List[str]] = ["ancestor", "indexId", "kind", "projectId", "properties", "state"]

    @field_validator('ancestor')
    def ancestor_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ANCESTOR_MODE_UNSPECIFIED', 'NONE', 'ALL_ANCESTORS']):
            raise ValueError("must be one of enum values ('ANCESTOR_MODE_UNSPECIFIED', 'NONE', 'ALL_ANCESTORS')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'READY', 'DELETING', 'ERROR']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'READY', 'DELETING', 'ERROR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleDatastoreAdminV1Index from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "index_id",
            "project_id",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in properties (list)
        _items = []
        if self.properties:
            for _item_properties in self.properties:
                if _item_properties:
                    _items.append(_item_properties.to_dict())
            _dict['properties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleDatastoreAdminV1Index from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ancestor": obj.get("ancestor"),
            "indexId": obj.get("indexId"),
            "kind": obj.get("kind"),
            "projectId": obj.get("projectId"),
            "properties": [GoogleDatastoreAdminV1IndexedProperty.from_dict(_item) for _item in obj["properties"]] if obj.get("properties") is not None else None,
            "state": obj.get("state")
        })
        return _obj



# coding: utf-8

"""
    Cloud Datastore API

    Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_datastore_admin_v1_common_metadata import GoogleDatastoreAdminV1CommonMetadata
from openapi_client.models.google_datastore_admin_v1_entity_filter import GoogleDatastoreAdminV1EntityFilter
from openapi_client.models.google_datastore_admin_v1_progress import GoogleDatastoreAdminV1Progress
from typing import Optional, Set
from typing_extensions import Self

class GoogleDatastoreAdminV1ImportEntitiesMetadata(BaseModel):
    """
    Metadata for ImportEntities operations.
    """ # noqa: E501
    common: Optional[GoogleDatastoreAdminV1CommonMetadata] = None
    entity_filter: Optional[GoogleDatastoreAdminV1EntityFilter] = Field(default=None, alias="entityFilter")
    input_url: Optional[StrictStr] = Field(default=None, description="The location of the import metadata file. This will be the same value as the google.datastore.admin.v1.ExportEntitiesResponse.output_url field.", alias="inputUrl")
    progress_bytes: Optional[GoogleDatastoreAdminV1Progress] = Field(default=None, alias="progressBytes")
    progress_entities: Optional[GoogleDatastoreAdminV1Progress] = Field(default=None, alias="progressEntities")
    __properties: ClassVar[List[str]] = ["common", "entityFilter", "inputUrl", "progressBytes", "progressEntities"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleDatastoreAdminV1ImportEntitiesMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of common
        if self.common:
            _dict['common'] = self.common.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity_filter
        if self.entity_filter:
            _dict['entityFilter'] = self.entity_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of progress_bytes
        if self.progress_bytes:
            _dict['progressBytes'] = self.progress_bytes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of progress_entities
        if self.progress_entities:
            _dict['progressEntities'] = self.progress_entities.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleDatastoreAdminV1ImportEntitiesMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "common": GoogleDatastoreAdminV1CommonMetadata.from_dict(obj["common"]) if obj.get("common") is not None else None,
            "entityFilter": GoogleDatastoreAdminV1EntityFilter.from_dict(obj["entityFilter"]) if obj.get("entityFilter") is not None else None,
            "inputUrl": obj.get("inputUrl"),
            "progressBytes": GoogleDatastoreAdminV1Progress.from_dict(obj["progressBytes"]) if obj.get("progressBytes") is not None else None,
            "progressEntities": GoogleDatastoreAdminV1Progress.from_dict(obj["progressEntities"]) if obj.get("progressEntities") is not None else None
        })
        return _obj



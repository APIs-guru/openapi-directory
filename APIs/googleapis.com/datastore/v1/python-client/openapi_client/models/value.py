# coding: utf-8

"""
    Cloud Datastore API

    Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.key import Key
from openapi_client.models.lat_lng import LatLng
from typing import Optional, Set
from typing_extensions import Self

class Value(BaseModel):
    """
    A message that can hold any of the supported value types and associated metadata.
    """ # noqa: E501
    array_value: Optional[ArrayValue] = Field(default=None, alias="arrayValue")
    blob_value: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="A blob value. May have at most 1,000,000 bytes. When `exclude_from_indexes` is false, may have at most 1500 bytes. In JSON requests, must be base64-encoded.", alias="blobValue")
    boolean_value: Optional[StrictBool] = Field(default=None, description="A boolean value.", alias="booleanValue")
    double_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A double value.", alias="doubleValue")
    entity_value: Optional[Entity] = Field(default=None, alias="entityValue")
    exclude_from_indexes: Optional[StrictBool] = Field(default=None, description="If the value should be excluded from all indexes including those defined explicitly.", alias="excludeFromIndexes")
    geo_point_value: Optional[LatLng] = Field(default=None, alias="geoPointValue")
    integer_value: Optional[StrictStr] = Field(default=None, description="An integer value.", alias="integerValue")
    key_value: Optional[Key] = Field(default=None, alias="keyValue")
    meaning: Optional[StrictInt] = Field(default=None, description="The `meaning` field should only be populated for backwards compatibility.")
    null_value: Optional[StrictStr] = Field(default=None, description="A null value.", alias="nullValue")
    string_value: Optional[StrictStr] = Field(default=None, description="A UTF-8 encoded string value. When `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes. Otherwise, may be set to at most 1,000,000 bytes.", alias="stringValue")
    timestamp_value: Optional[StrictStr] = Field(default=None, description="A timestamp value. When stored in the Datastore, precise only to microseconds; any additional precision is rounded down.", alias="timestampValue")
    __properties: ClassVar[List[str]] = ["arrayValue", "blobValue", "booleanValue", "doubleValue", "entityValue", "excludeFromIndexes", "geoPointValue", "integerValue", "keyValue", "meaning", "nullValue", "stringValue", "timestampValue"]

    @field_validator('null_value')
    def null_value_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NULL_VALUE']):
            raise ValueError("must be one of enum values ('NULL_VALUE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Value from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of array_value
        if self.array_value:
            _dict['arrayValue'] = self.array_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity_value
        if self.entity_value:
            _dict['entityValue'] = self.entity_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geo_point_value
        if self.geo_point_value:
            _dict['geoPointValue'] = self.geo_point_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of key_value
        if self.key_value:
            _dict['keyValue'] = self.key_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Value from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arrayValue": ArrayValue.from_dict(obj["arrayValue"]) if obj.get("arrayValue") is not None else None,
            "blobValue": obj.get("blobValue"),
            "booleanValue": obj.get("booleanValue"),
            "doubleValue": obj.get("doubleValue"),
            "entityValue": Entity.from_dict(obj["entityValue"]) if obj.get("entityValue") is not None else None,
            "excludeFromIndexes": obj.get("excludeFromIndexes"),
            "geoPointValue": LatLng.from_dict(obj["geoPointValue"]) if obj.get("geoPointValue") is not None else None,
            "integerValue": obj.get("integerValue"),
            "keyValue": Key.from_dict(obj["keyValue"]) if obj.get("keyValue") is not None else None,
            "meaning": obj.get("meaning"),
            "nullValue": obj.get("nullValue"),
            "stringValue": obj.get("stringValue"),
            "timestampValue": obj.get("timestampValue")
        })
        return _obj

from openapi_client.models.array_value import ArrayValue
from openapi_client.models.entity import Entity
# TODO: Rewrite to not use raise_errors
Value.model_rebuild(raise_errors=False)


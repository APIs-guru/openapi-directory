# coding: utf-8

"""
    Cloud Datastore API

    Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.entity import Entity
from typing import Optional, Set
from typing_extensions import Self

class EntityResult(BaseModel):
    """
    The result of fetching an entity from Datastore.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="The time at which the entity was created. This field is set for `FULL` entity results. If this entity is missing, this field will not be set.", alias="createTime")
    cursor: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="A cursor that points to the position after the result entity. Set only when the `EntityResult` is part of a `QueryResultBatch` message.")
    entity: Optional[Entity] = None
    update_time: Optional[StrictStr] = Field(default=None, description="The time at which the entity was last changed. This field is set for `FULL` entity results. If this entity is missing, this field will not be set.", alias="updateTime")
    version: Optional[StrictStr] = Field(default=None, description="The version of the entity, a strictly positive number that monotonically increases with changes to the entity. This field is set for `FULL` entity results. For missing entities in `LookupResponse`, this is the version of the snapshot that was used to look up the entity, and it is always set except for eventually consistent reads.")
    __properties: ClassVar[List[str]] = ["createTime", "cursor", "entity", "updateTime", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EntityResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of entity
        if self.entity:
            _dict['entity'] = self.entity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EntityResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "cursor": obj.get("cursor"),
            "entity": Entity.from_dict(obj["entity"]) if obj.get("entity") is not None else None,
            "updateTime": obj.get("updateTime"),
            "version": obj.get("version")
        })
        return _obj



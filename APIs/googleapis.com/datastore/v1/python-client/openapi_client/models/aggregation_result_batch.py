# coding: utf-8

"""
    Cloud Datastore API

    Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.aggregation_result import AggregationResult
from typing import Optional, Set
from typing_extensions import Self

class AggregationResultBatch(BaseModel):
    """
    A batch of aggregation results produced by an aggregation query.
    """ # noqa: E501
    aggregation_results: Optional[List[AggregationResult]] = Field(default=None, description="The aggregation results for this batch.", alias="aggregationResults")
    more_results: Optional[StrictStr] = Field(default=None, description="The state of the query after the current batch. Only COUNT(*) aggregations are supported in the initial launch. Therefore, expected result type is limited to `NO_MORE_RESULTS`.", alias="moreResults")
    read_time: Optional[StrictStr] = Field(default=None, description="Read timestamp this batch was returned from. In a single transaction, subsequent query result batches for the same query can have a greater timestamp. Each batch's read timestamp is valid for all preceding batches.", alias="readTime")
    __properties: ClassVar[List[str]] = ["aggregationResults", "moreResults", "readTime"]

    @field_validator('more_results')
    def more_results_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MORE_RESULTS_TYPE_UNSPECIFIED', 'NOT_FINISHED', 'MORE_RESULTS_AFTER_LIMIT', 'MORE_RESULTS_AFTER_CURSOR', 'NO_MORE_RESULTS']):
            raise ValueError("must be one of enum values ('MORE_RESULTS_TYPE_UNSPECIFIED', 'NOT_FINISHED', 'MORE_RESULTS_AFTER_LIMIT', 'MORE_RESULTS_AFTER_CURSOR', 'NO_MORE_RESULTS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AggregationResultBatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in aggregation_results (list)
        _items = []
        if self.aggregation_results:
            for _item_aggregation_results in self.aggregation_results:
                if _item_aggregation_results:
                    _items.append(_item_aggregation_results.to_dict())
            _dict['aggregationResults'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AggregationResultBatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregationResults": [AggregationResult.from_dict(_item) for _item in obj["aggregationResults"]] if obj.get("aggregationResults") is not None else None,
            "moreResults": obj.get("moreResults"),
            "readTime": obj.get("readTime")
        })
        return _obj



# coding: utf-8

"""
    Cloud Datastore API

    Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.run_aggregation_query_request import RunAggregationQueryRequest

class TestRunAggregationQueryRequest(unittest.TestCase):
    """RunAggregationQueryRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RunAggregationQueryRequest:
        """Test RunAggregationQueryRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RunAggregationQueryRequest`
        """
        model = RunAggregationQueryRequest()
        if include_optional:
            return RunAggregationQueryRequest(
                aggregation_query = openapi_client.models.aggregation_query.AggregationQuery(
                    aggregations = [
                        openapi_client.models.aggregation.Aggregation(
                            alias = '', 
                            avg = openapi_client.models.avg.Avg(
                                property = openapi_client.models.property_reference.PropertyReference(
                                    name = '', ), ), 
                            count = openapi_client.models.count.Count(
                                up_to = '', ), 
                            sum = openapi_client.models.sum.Sum(), )
                        ], 
                    nested_query = openapi_client.models.query.Query(
                        distinct_on = [
                            openapi_client.models.property_reference.PropertyReference(
                                name = '', )
                            ], 
                        end_cursor = 'YQ==', 
                        filter = openapi_client.models.filter.Filter(
                            composite_filter = openapi_client.models.composite_filter.CompositeFilter(
                                filters = [
                                    openapi_client.models.filter.Filter(
                                        property_filter = openapi_client.models.property_filter.PropertyFilter(
                                            op = 'OPERATOR_UNSPECIFIED', 
                                            value = openapi_client.models.value.Value(
                                                array_value = openapi_client.models.array_value.ArrayValue(
                                                    values = [
                                                        openapi_client.models.value.Value(
                                                            blob_value = 'YQ==', 
                                                            boolean_value = True, 
                                                            double_value = 1.337, 
                                                            entity_value = openapi_client.models.entity.Entity(
                                                                key = openapi_client.models.key.Key(
                                                                    partition_id = openapi_client.models.partition_id.PartitionId(
                                                                        database_id = '', 
                                                                        namespace_id = '', 
                                                                        project_id = '', ), 
                                                                    path = [
                                                                        openapi_client.models.path_element.PathElement(
                                                                            id = '', 
                                                                            kind = '', 
                                                                            name = '', )
                                                                        ], ), 
                                                                properties = {
                                                                    'key' : 
                                                                    }, ), 
                                                            exclude_from_indexes = True, 
                                                            geo_point_value = openapi_client.models.lat_lng.LatLng(
                                                                latitude = 1.337, 
                                                                longitude = 1.337, ), 
                                                            integer_value = '', 
                                                            key_value = openapi_client.models.key.Key(), 
                                                            meaning = 56, 
                                                            null_value = 'NULL_VALUE', 
                                                            string_value = '', 
                                                            timestamp_value = '', )
                                                        ], ), 
                                                blob_value = 'YQ==', 
                                                boolean_value = True, 
                                                double_value = 1.337, 
                                                entity_value = openapi_client.models.entity.Entity(), 
                                                exclude_from_indexes = True, 
                                                geo_point_value = openapi_client.models.lat_lng.LatLng(
                                                    latitude = 1.337, 
                                                    longitude = 1.337, ), 
                                                integer_value = '', 
                                                key_value = , 
                                                meaning = 56, 
                                                null_value = 'NULL_VALUE', 
                                                string_value = '', 
                                                timestamp_value = '', ), ), )
                                    ], 
                                op = 'OPERATOR_UNSPECIFIED', ), 
                            property_filter = openapi_client.models.property_filter.PropertyFilter(
                                op = 'OPERATOR_UNSPECIFIED', ), ), 
                        kind = [
                            openapi_client.models.kind_expression.KindExpression(
                                name = '', )
                            ], 
                        limit = 56, 
                        offset = 56, 
                        order = [
                            openapi_client.models.property_order.PropertyOrder(
                                direction = 'DIRECTION_UNSPECIFIED', )
                            ], 
                        projection = [
                            openapi_client.models.projection.Projection()
                            ], 
                        start_cursor = 'YQ==', ), ),
                database_id = '',
                gql_query = openapi_client.models.gql_query.GqlQuery(
                    allow_literals = True, 
                    named_bindings = {
                        'key' : openapi_client.models.gql_query_parameter.GqlQueryParameter(
                            cursor = 'YQ==', 
                            value = openapi_client.models.value.Value(
                                array_value = openapi_client.models.array_value.ArrayValue(
                                    values = [
                                        openapi_client.models.value.Value(
                                            blob_value = 'YQ==', 
                                            boolean_value = True, 
                                            double_value = 1.337, 
                                            entity_value = openapi_client.models.entity.Entity(
                                                key = openapi_client.models.key.Key(
                                                    partition_id = openapi_client.models.partition_id.PartitionId(
                                                        database_id = '', 
                                                        namespace_id = '', 
                                                        project_id = '', ), 
                                                    path = [
                                                        openapi_client.models.path_element.PathElement(
                                                            id = '', 
                                                            kind = '', 
                                                            name = '', )
                                                        ], ), 
                                                properties = {
                                                    'key' : 
                                                    }, ), 
                                            exclude_from_indexes = True, 
                                            geo_point_value = openapi_client.models.lat_lng.LatLng(
                                                latitude = 1.337, 
                                                longitude = 1.337, ), 
                                            integer_value = '', 
                                            key_value = openapi_client.models.key.Key(), 
                                            meaning = 56, 
                                            null_value = 'NULL_VALUE', 
                                            string_value = '', 
                                            timestamp_value = '', )
                                        ], ), 
                                blob_value = 'YQ==', 
                                boolean_value = True, 
                                double_value = 1.337, 
                                entity_value = openapi_client.models.entity.Entity(), 
                                exclude_from_indexes = True, 
                                geo_point_value = openapi_client.models.lat_lng.LatLng(
                                    latitude = 1.337, 
                                    longitude = 1.337, ), 
                                integer_value = '', 
                                key_value = , 
                                meaning = 56, 
                                null_value = 'NULL_VALUE', 
                                string_value = '', 
                                timestamp_value = '', ), )
                        }, 
                    positional_bindings = [
                        openapi_client.models.gql_query_parameter.GqlQueryParameter(
                            cursor = 'YQ==', )
                        ], 
                    query_string = '', ),
                partition_id = openapi_client.models.partition_id.PartitionId(
                    database_id = '', 
                    namespace_id = '', 
                    project_id = '', ),
                read_options = openapi_client.models.read_options.ReadOptions(
                    new_transaction = openapi_client.models.transaction_options.TransactionOptions(
                        read_only = openapi_client.models.read_only.ReadOnly(
                            read_time = '', ), 
                        read_write = openapi_client.models.read_write.ReadWrite(
                            previous_transaction = 'YQ==', ), ), 
                    read_consistency = 'READ_CONSISTENCY_UNSPECIFIED', 
                    read_time = '', 
                    transaction = 'YQ==', )
            )
        else:
            return RunAggregationQueryRequest(
        )
        """

    def testRunAggregationQueryRequest(self):
        """Test RunAggregationQueryRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

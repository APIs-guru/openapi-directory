# coding: utf-8

"""
    Cloud Datastore API

    Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.commit_request import CommitRequest

class TestCommitRequest(unittest.TestCase):
    """CommitRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CommitRequest:
        """Test CommitRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CommitRequest`
        """
        model = CommitRequest()
        if include_optional:
            return CommitRequest(
                database_id = '',
                mode = 'MODE_UNSPECIFIED',
                mutations = [
                    openapi_client.models.mutation.Mutation(
                        base_version = '', 
                        delete = openapi_client.models.key.Key(
                            partition_id = openapi_client.models.partition_id.PartitionId(
                                database_id = '', 
                                namespace_id = '', 
                                project_id = '', ), 
                            path = [
                                openapi_client.models.path_element.PathElement(
                                    id = '', 
                                    kind = '', 
                                    name = '', )
                                ], ), 
                        insert = openapi_client.models.entity.Entity(
                            key = openapi_client.models.key.Key(), 
                            properties = {
                                'key' : openapi_client.models.value.Value(
                                    array_value = openapi_client.models.array_value.ArrayValue(
                                        values = [
                                            openapi_client.models.value.Value(
                                                blob_value = 'YQ==', 
                                                boolean_value = True, 
                                                double_value = 1.337, 
                                                entity_value = openapi_client.models.entity.Entity(), 
                                                exclude_from_indexes = True, 
                                                geo_point_value = openapi_client.models.lat_lng.LatLng(
                                                    latitude = 1.337, 
                                                    longitude = 1.337, ), 
                                                integer_value = '', 
                                                key_value = , 
                                                meaning = 56, 
                                                null_value = 'NULL_VALUE', 
                                                string_value = '', 
                                                timestamp_value = '', )
                                            ], ), 
                                    blob_value = 'YQ==', 
                                    boolean_value = True, 
                                    double_value = 1.337, 
                                    entity_value = , 
                                    exclude_from_indexes = True, 
                                    geo_point_value = openapi_client.models.lat_lng.LatLng(
                                        latitude = 1.337, 
                                        longitude = 1.337, ), 
                                    integer_value = '', 
                                    key_value = , 
                                    meaning = 56, 
                                    null_value = 'NULL_VALUE', 
                                    string_value = '', 
                                    timestamp_value = '', )
                                }, ), 
                        update = , 
                        update_time = '', 
                        upsert = , )
                    ],
                single_use_transaction = openapi_client.models.transaction_options.TransactionOptions(
                    read_only = openapi_client.models.read_only.ReadOnly(
                        read_time = '', ), 
                    read_write = openapi_client.models.read_write.ReadWrite(
                        previous_transaction = 'YQ==', ), ),
                transaction = 'YQ=='
            )
        else:
            return CommitRequest(
        )
        """

    def testCommitRequest(self):
        """Test CommitRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Datastore API

    Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_datastore_admin_v1_prepare_step_details import GoogleDatastoreAdminV1PrepareStepDetails
from openapi_client.models.google_datastore_admin_v1_redirect_writes_step_details import GoogleDatastoreAdminV1RedirectWritesStepDetails
from typing import Optional, Set
from typing_extensions import Self

class GoogleDatastoreAdminV1MigrationProgressEvent(BaseModel):
    """
    An event signifying the start of a new step in a [migration from Cloud Datastore to Cloud Firestore in Datastore mode](https://cloud.google.com/datastore/docs/upgrade-to-firestore).
    """ # noqa: E501
    prepare_step_details: Optional[GoogleDatastoreAdminV1PrepareStepDetails] = Field(default=None, alias="prepareStepDetails")
    redirect_writes_step_details: Optional[GoogleDatastoreAdminV1RedirectWritesStepDetails] = Field(default=None, alias="redirectWritesStepDetails")
    step: Optional[StrictStr] = Field(default=None, description="The step that is starting. An event with step set to `START` indicates that the migration has been reverted back to the initial pre-migration state.")
    __properties: ClassVar[List[str]] = ["prepareStepDetails", "redirectWritesStepDetails", "step"]

    @field_validator('step')
    def step_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MIGRATION_STEP_UNSPECIFIED', 'PREPARE', 'START', 'APPLY_WRITES_SYNCHRONOUSLY', 'COPY_AND_VERIFY', 'REDIRECT_EVENTUALLY_CONSISTENT_READS', 'REDIRECT_STRONGLY_CONSISTENT_READS', 'REDIRECT_WRITES']):
            raise ValueError("must be one of enum values ('MIGRATION_STEP_UNSPECIFIED', 'PREPARE', 'START', 'APPLY_WRITES_SYNCHRONOUSLY', 'COPY_AND_VERIFY', 'REDIRECT_EVENTUALLY_CONSISTENT_READS', 'REDIRECT_STRONGLY_CONSISTENT_READS', 'REDIRECT_WRITES')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleDatastoreAdminV1MigrationProgressEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of prepare_step_details
        if self.prepare_step_details:
            _dict['prepareStepDetails'] = self.prepare_step_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of redirect_writes_step_details
        if self.redirect_writes_step_details:
            _dict['redirectWritesStepDetails'] = self.redirect_writes_step_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleDatastoreAdminV1MigrationProgressEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "prepareStepDetails": GoogleDatastoreAdminV1PrepareStepDetails.from_dict(obj["prepareStepDetails"]) if obj.get("prepareStepDetails") is not None else None,
            "redirectWritesStepDetails": GoogleDatastoreAdminV1RedirectWritesStepDetails.from_dict(obj["redirectWritesStepDetails"]) if obj.get("redirectWritesStepDetails") is not None else None,
            "step": obj.get("step")
        })
        return _obj



# coding: utf-8

"""
    Cloud Datastore API

    Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.mutation import Mutation
from typing import Optional, Set
from typing_extensions import Self

class CommitRequest(BaseModel):
    """
    The request for Datastore.Commit.
    """ # noqa: E501
    mode: Optional[StrictStr] = Field(default=None, description="The type of commit to perform. Defaults to `TRANSACTIONAL`.")
    mutations: Optional[List[Mutation]] = Field(default=None, description="The mutations to perform. When mode is `TRANSACTIONAL`, mutations affecting a single entity are applied in order. The following sequences of mutations affecting a single entity are not permitted in a single `Commit` request: - `insert` followed by `insert` - `update` followed by `insert` - `upsert` followed by `insert` - `delete` followed by `update` When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single entity.")
    transaction: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The identifier of the transaction associated with the commit. A transaction identifier is returned by a call to Datastore.BeginTransaction.")
    __properties: ClassVar[List[str]] = ["mode", "mutations", "transaction"]

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MODE_UNSPECIFIED', 'TRANSACTIONAL', 'NON_TRANSACTIONAL']):
            raise ValueError("must be one of enum values ('MODE_UNSPECIFIED', 'TRANSACTIONAL', 'NON_TRANSACTIONAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommitRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in mutations (list)
        _items = []
        if self.mutations:
            for _item_mutations in self.mutations:
                if _item_mutations:
                    _items.append(_item_mutations.to_dict())
            _dict['mutations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommitRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mode": obj.get("mode"),
            "mutations": [Mutation.from_dict(_item) for _item in obj["mutations"]] if obj.get("mutations") is not None else None,
            "transaction": obj.get("transaction")
        })
        return _obj



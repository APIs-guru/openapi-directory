# coding: utf-8

"""
    Cloud Datastore API

    Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.entity_result import EntityResult
from openapi_client.models.key import Key
from typing import Optional, Set
from typing_extensions import Self

class LookupResponse(BaseModel):
    """
    The response for Datastore.Lookup.
    """ # noqa: E501
    deferred: Optional[List[Key]] = Field(default=None, description="A list of keys that were not looked up due to resource constraints. The order of results in this field is undefined and has no relation to the order of the keys in the input.")
    found: Optional[List[EntityResult]] = Field(default=None, description="Entities found as `ResultType.FULL` entities. The order of results in this field is undefined and has no relation to the order of the keys in the input.")
    missing: Optional[List[EntityResult]] = Field(default=None, description="Entities not found as `ResultType.KEY_ONLY` entities. The order of results in this field is undefined and has no relation to the order of the keys in the input.")
    read_time: Optional[StrictStr] = Field(default=None, description="The time at which these entities were read or found missing.", alias="readTime")
    __properties: ClassVar[List[str]] = ["deferred", "found", "missing", "readTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LookupResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in deferred (list)
        _items = []
        if self.deferred:
            for _item_deferred in self.deferred:
                if _item_deferred:
                    _items.append(_item_deferred.to_dict())
            _dict['deferred'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in found (list)
        _items = []
        if self.found:
            for _item_found in self.found:
                if _item_found:
                    _items.append(_item_found.to_dict())
            _dict['found'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in missing (list)
        _items = []
        if self.missing:
            for _item_missing in self.missing:
                if _item_missing:
                    _items.append(_item_missing.to_dict())
            _dict['missing'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LookupResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deferred": [Key.from_dict(_item) for _item in obj["deferred"]] if obj.get("deferred") is not None else None,
            "found": [EntityResult.from_dict(_item) for _item in obj["found"]] if obj.get("found") is not None else None,
            "missing": [EntityResult.from_dict(_item) for _item in obj["missing"]] if obj.get("missing") is not None else None,
            "readTime": obj.get("readTime")
        })
        return _obj



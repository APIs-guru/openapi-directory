# coding: utf-8

"""
    Cloud Datastore API

    Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.filter import Filter
from openapi_client.models.kind_expression import KindExpression
from openapi_client.models.projection import Projection
from openapi_client.models.property_order import PropertyOrder
from openapi_client.models.property_reference import PropertyReference
from typing import Optional, Set
from typing_extensions import Self

class Query(BaseModel):
    """
    A query for entities.
    """ # noqa: E501
    distinct_on: Optional[List[PropertyReference]] = Field(default=None, description="The properties to make distinct. The query results will contain the first result for each distinct combination of values for the given properties (if empty, all results are returned). Requires: * If `order` is specified, the set of distinct on properties must appear before the non-distinct on properties in `order`.", alias="distinctOn")
    end_cursor: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="An ending point for the query results. Query cursors are returned in query result batches and [can only be used to limit the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).", alias="endCursor")
    filter: Optional[Filter] = None
    kind: Optional[List[KindExpression]] = Field(default=None, description="The kinds to query (if empty, returns entities of all kinds). Currently at most 1 kind may be specified.")
    limit: Optional[StrictInt] = Field(default=None, description="The maximum number of results to return. Applies after all other constraints. Optional. Unspecified is interpreted as no limit. Must be >= 0 if specified.")
    offset: Optional[StrictInt] = Field(default=None, description="The number of results to skip. Applies before limit, but after all other constraints. Optional. Must be >= 0 if specified.")
    order: Optional[List[PropertyOrder]] = Field(default=None, description="The order to apply to the query results (if empty, order is unspecified).")
    projection: Optional[List[Projection]] = Field(default=None, description="The projection to return. Defaults to returning all properties.")
    start_cursor: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="A starting point for the query results. Query cursors are returned in query result batches and [can only be used to continue the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).", alias="startCursor")
    __properties: ClassVar[List[str]] = ["distinctOn", "endCursor", "filter", "kind", "limit", "offset", "order", "projection", "startCursor"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Query from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in distinct_on (list)
        _items = []
        if self.distinct_on:
            for _item_distinct_on in self.distinct_on:
                if _item_distinct_on:
                    _items.append(_item_distinct_on.to_dict())
            _dict['distinctOn'] = _items
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in kind (list)
        _items = []
        if self.kind:
            for _item_kind in self.kind:
                if _item_kind:
                    _items.append(_item_kind.to_dict())
            _dict['kind'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in order (list)
        _items = []
        if self.order:
            for _item_order in self.order:
                if _item_order:
                    _items.append(_item_order.to_dict())
            _dict['order'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in projection (list)
        _items = []
        if self.projection:
            for _item_projection in self.projection:
                if _item_projection:
                    _items.append(_item_projection.to_dict())
            _dict['projection'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Query from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "distinctOn": [PropertyReference.from_dict(_item) for _item in obj["distinctOn"]] if obj.get("distinctOn") is not None else None,
            "endCursor": obj.get("endCursor"),
            "filter": Filter.from_dict(obj["filter"]) if obj.get("filter") is not None else None,
            "kind": [KindExpression.from_dict(_item) for _item in obj["kind"]] if obj.get("kind") is not None else None,
            "limit": obj.get("limit"),
            "offset": obj.get("offset"),
            "order": [PropertyOrder.from_dict(_item) for _item in obj["order"]] if obj.get("order") is not None else None,
            "projection": [Projection.from_dict(_item) for _item in obj["projection"]] if obj.get("projection") is not None else None,
            "startCursor": obj.get("startCursor")
        })
        return _obj



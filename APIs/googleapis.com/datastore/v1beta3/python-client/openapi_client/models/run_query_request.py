# coding: utf-8

"""
    Cloud Datastore API

    Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.gql_query import GqlQuery
from openapi_client.models.partition_id import PartitionId
from openapi_client.models.query import Query
from openapi_client.models.read_options import ReadOptions
from typing import Optional, Set
from typing_extensions import Self

class RunQueryRequest(BaseModel):
    """
    The request for Datastore.RunQuery.
    """ # noqa: E501
    gql_query: Optional[GqlQuery] = Field(default=None, alias="gqlQuery")
    partition_id: Optional[PartitionId] = Field(default=None, alias="partitionId")
    query: Optional[Query] = None
    read_options: Optional[ReadOptions] = Field(default=None, alias="readOptions")
    __properties: ClassVar[List[str]] = ["gqlQuery", "partitionId", "query", "readOptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunQueryRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gql_query
        if self.gql_query:
            _dict['gqlQuery'] = self.gql_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of partition_id
        if self.partition_id:
            _dict['partitionId'] = self.partition_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of query
        if self.query:
            _dict['query'] = self.query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of read_options
        if self.read_options:
            _dict['readOptions'] = self.read_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunQueryRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gqlQuery": GqlQuery.from_dict(obj["gqlQuery"]) if obj.get("gqlQuery") is not None else None,
            "partitionId": PartitionId.from_dict(obj["partitionId"]) if obj.get("partitionId") is not None else None,
            "query": Query.from_dict(obj["query"]) if obj.get("query") is not None else None,
            "readOptions": ReadOptions.from_dict(obj["readOptions"]) if obj.get("readOptions") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Datastore API

    Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.gql_query_parameter import GqlQueryParameter
from typing import Optional, Set
from typing_extensions import Self

class GqlQuery(BaseModel):
    """
    A [GQL query](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
    """ # noqa: E501
    allow_literals: Optional[StrictBool] = Field(default=None, description="When false, the query string must not contain any literals and instead must bind all values. For example, `SELECT * FROM Kind WHERE a = 'string literal'` is not allowed, while `SELECT * FROM Kind WHERE a = @value` is.", alias="allowLiterals")
    named_bindings: Optional[Dict[str, GqlQueryParameter]] = Field(default=None, description="For each non-reserved named binding site in the query string, there must be a named parameter with that name, but not necessarily the inverse. Key must match regex `A-Za-z_$*`, must not match regex `__.*__`, and must not be `\"\"`.", alias="namedBindings")
    positional_bindings: Optional[List[GqlQueryParameter]] = Field(default=None, description="Numbered binding site @1 references the first numbered parameter, effectively using 1-based indexing, rather than the usual 0. For each binding site numbered i in `query_string`, there must be an i-th numbered parameter. The inverse must also be true.", alias="positionalBindings")
    query_string: Optional[StrictStr] = Field(default=None, description="A string of the format described [here](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).", alias="queryString")
    __properties: ClassVar[List[str]] = ["allowLiterals", "namedBindings", "positionalBindings", "queryString"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GqlQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in named_bindings (dict)
        _field_dict = {}
        if self.named_bindings:
            for _key_named_bindings in self.named_bindings:
                if self.named_bindings[_key_named_bindings]:
                    _field_dict[_key_named_bindings] = self.named_bindings[_key_named_bindings].to_dict()
            _dict['namedBindings'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in positional_bindings (list)
        _items = []
        if self.positional_bindings:
            for _item_positional_bindings in self.positional_bindings:
                if _item_positional_bindings:
                    _items.append(_item_positional_bindings.to_dict())
            _dict['positionalBindings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GqlQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowLiterals": obj.get("allowLiterals"),
            "namedBindings": dict(
                (_k, GqlQueryParameter.from_dict(_v))
                for _k, _v in obj["namedBindings"].items()
            )
            if obj.get("namedBindings") is not None
            else None,
            "positionalBindings": [GqlQueryParameter.from_dict(_item) for _item in obj["positionalBindings"]] if obj.get("positionalBindings") is not None else None,
            "queryString": obj.get("queryString")
        })
        return _obj



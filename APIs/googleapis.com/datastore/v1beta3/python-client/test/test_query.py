# coding: utf-8

"""
    Cloud Datastore API

    Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.query import Query

class TestQuery(unittest.TestCase):
    """Query unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Query:
        """Test Query
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Query`
        """
        model = Query()
        if include_optional:
            return Query(
                distinct_on = [
                    openapi_client.models.property_reference.PropertyReference(
                        name = '', )
                    ],
                end_cursor = 'YQ==',
                filter = openapi_client.models.filter.Filter(
                    composite_filter = openapi_client.models.composite_filter.CompositeFilter(
                        filters = [
                            openapi_client.models.filter.Filter(
                                property_filter = openapi_client.models.property_filter.PropertyFilter(
                                    op = 'OPERATOR_UNSPECIFIED', 
                                    property = openapi_client.models.property_reference.PropertyReference(
                                        name = '', ), 
                                    value = openapi_client.models.value.Value(
                                        array_value = openapi_client.models.array_value.ArrayValue(
                                            values = [
                                                openapi_client.models.value.Value(
                                                    blob_value = 'YQ==', 
                                                    boolean_value = True, 
                                                    double_value = 1.337, 
                                                    entity_value = openapi_client.models.entity.Entity(
                                                        key = openapi_client.models.key.Key(
                                                            partition_id = openapi_client.models.partition_id.PartitionId(
                                                                namespace_id = '', 
                                                                project_id = '', ), 
                                                            path = [
                                                                openapi_client.models.path_element.PathElement(
                                                                    id = '', 
                                                                    kind = '', 
                                                                    name = '', )
                                                                ], ), 
                                                        properties = {
                                                            'key' : 
                                                            }, ), 
                                                    exclude_from_indexes = True, 
                                                    geo_point_value = openapi_client.models.lat_lng.LatLng(
                                                        latitude = 1.337, 
                                                        longitude = 1.337, ), 
                                                    integer_value = '', 
                                                    key_value = openapi_client.models.key.Key(), 
                                                    meaning = 56, 
                                                    null_value = 'NULL_VALUE', 
                                                    string_value = '', 
                                                    timestamp_value = '', )
                                                ], ), 
                                        blob_value = 'YQ==', 
                                        boolean_value = True, 
                                        double_value = 1.337, 
                                        entity_value = openapi_client.models.entity.Entity(), 
                                        exclude_from_indexes = True, 
                                        geo_point_value = openapi_client.models.lat_lng.LatLng(
                                            latitude = 1.337, 
                                            longitude = 1.337, ), 
                                        integer_value = '', 
                                        key_value = , 
                                        meaning = 56, 
                                        null_value = 'NULL_VALUE', 
                                        string_value = '', 
                                        timestamp_value = '', ), ), )
                            ], 
                        op = 'OPERATOR_UNSPECIFIED', ), 
                    property_filter = openapi_client.models.property_filter.PropertyFilter(
                        op = 'OPERATOR_UNSPECIFIED', ), ),
                kind = [
                    openapi_client.models.kind_expression.KindExpression(
                        name = '', )
                    ],
                limit = 56,
                offset = 56,
                order = [
                    openapi_client.models.property_order.PropertyOrder(
                        direction = 'DIRECTION_UNSPECIFIED', 
                        property = openapi_client.models.property_reference.PropertyReference(
                            name = '', ), )
                    ],
                projection = [
                    openapi_client.models.projection.Projection(
                        property = openapi_client.models.property_reference.PropertyReference(
                            name = '', ), )
                    ],
                start_cursor = 'YQ=='
            )
        else:
            return Query(
        )
        """

    def testQuery(self):
        """Test Query"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

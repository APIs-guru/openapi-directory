openapi: 3.0.0
servers:
  - url: https://datastore.googleapis.com/
info:
  contact:
    name: Google
    url: https://google.com
    x-twitter: youtube
  description: "Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. "
  license:
    name: Creative Commons Attribution 3.0
    url: http://creativecommons.org/licenses/by/3.0/
  termsOfService: https://developers.google.com/terms/
  title: Cloud Datastore API
  version: v1beta3
  x-apiClientRegistration:
    url: https://console.developers.google.com
  x-apisguru-categories:
    - analytics
    - media
  x-logo:
    url: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png
  x-origin:
    - format: google
      url: https://datastore.googleapis.com/$discovery/rest?version=v1beta3
      version: v1
  x-preferred: false
  x-providerName: googleapis.com
  x-serviceName: datastore
externalDocs:
  url: https://cloud.google.com/datastore/
tags:
  - name: projects
paths:
  "/v1beta3/projects/{projectId}:allocateIds":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Allocates IDs for the given keys, which is useful for referencing an entity before it is inserted.
      operationId: datastore.projects.allocateIds
      parameters:
        - description: Required. The ID of the project against which to make the request.
          in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AllocateIdsRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllocateIdsResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      tags:
        - projects
  "/v1beta3/projects/{projectId}:beginTransaction":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Begins a new transaction.
      operationId: datastore.projects.beginTransaction
      parameters:
        - description: Required. The ID of the project against which to make the request.
          in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BeginTransactionRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BeginTransactionResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      tags:
        - projects
  "/v1beta3/projects/{projectId}:commit":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Commits a transaction, optionally creating, deleting or modifying some entities.
      operationId: datastore.projects.commit
      parameters:
        - description: Required. The ID of the project against which to make the request.
          in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommitRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommitResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      tags:
        - projects
  "/v1beta3/projects/{projectId}:lookup":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Looks up entities by key.
      operationId: datastore.projects.lookup
      parameters:
        - description: Required. The ID of the project against which to make the request.
          in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LookupRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LookupResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      tags:
        - projects
  "/v1beta3/projects/{projectId}:reserveIds":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Prevents the supplied keys' IDs from being auto-allocated by Cloud Datastore.
      operationId: datastore.projects.reserveIds
      parameters:
        - description: Required. The ID of the project against which to make the request.
          in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReserveIdsRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReserveIdsResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      tags:
        - projects
  "/v1beta3/projects/{projectId}:rollback":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Rolls back a transaction.
      operationId: datastore.projects.rollback
      parameters:
        - description: Required. The ID of the project against which to make the request.
          in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RollbackRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RollbackResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      tags:
        - projects
  "/v1beta3/projects/{projectId}:runAggregationQuery":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Runs an aggregation query.
      operationId: datastore.projects.runAggregationQuery
      parameters:
        - description: Required. The ID of the project against which to make the request.
          in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunAggregationQueryRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunAggregationQueryResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      tags:
        - projects
  "/v1beta3/projects/{projectId}:runQuery":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Queries for entities.
      operationId: datastore.projects.runQuery
      parameters:
        - description: Required. The ID of the project against which to make the request.
          in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunQueryRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunQueryResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      tags:
        - projects
components:
  parameters:
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        enum:
          - "1"
          - "2"
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        enum:
          - json
          - media
          - proto
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
  schemas:
    Aggregation:
      description: Defines a aggregation that produces a single result.
      properties:
        alias:
          description: "Optional. Optional name of the property to store the result of the aggregation. If not provided, Datastore will pick a default name following the format `property_`. For example: ``` AGGREGATE COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2), COUNT_UP_TO(3) AS count_up_to_3, COUNT_UP_TO(4) OVER ( ... ); ``` becomes: ``` AGGREGATE COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2) AS property_1, COUNT_UP_TO(3) AS count_up_to_3, COUNT_UP_TO(4) AS property_2 OVER ( ... ); ``` Requires: * Must be unique across all aggregation aliases. * Conform to entity property name limitations."
          type: string
        count:
          $ref: "#/components/schemas/Count"
          description: Count aggregator.
      type: object
    AggregationQuery:
      description: Datastore query for running an aggregation over a Query.
      properties:
        aggregations:
          description: "Optional. Series of aggregations to apply over the results of the `nested_query`. Requires: * A minimum of one and maximum of five aggregations per query."
          items:
            $ref: "#/components/schemas/Aggregation"
          type: array
        nestedQuery:
          $ref: "#/components/schemas/Query"
          description: Nested query for aggregation
      type: object
    AggregationResult:
      description: The result of a single bucket from a Datastore aggregation query. The keys of `aggregate_properties` are the same for all results in an aggregation query, unlike entity queries which can have different fields present for each result.
      properties:
        aggregateProperties:
          additionalProperties:
            $ref: "#/components/schemas/Value"
          description: "The result of the aggregation functions, ex: `COUNT(*) AS total_entities`. The key is the alias assigned to the aggregation function on input and the size of this map equals the number of aggregation functions in the query."
          type: object
      type: object
    AggregationResultBatch:
      description: A batch of aggregation results produced by an aggregation query.
      properties:
        aggregationResults:
          description: The aggregation results for this batch.
          items:
            $ref: "#/components/schemas/AggregationResult"
          type: array
        moreResults:
          description: The state of the query after the current batch. Only COUNT(*) aggregations are supported in the initial launch. Therefore, expected result type is limited to `NO_MORE_RESULTS`.
          enum:
            - MORE_RESULTS_TYPE_UNSPECIFIED
            - NOT_FINISHED
            - MORE_RESULTS_AFTER_LIMIT
            - MORE_RESULTS_AFTER_CURSOR
            - NO_MORE_RESULTS
          type: string
        readTime:
          description: Read timestamp this batch was returned from. In a single transaction, subsequent query result batches for the same query can have a greater timestamp. Each batch's read timestamp is valid for all preceding batches.
          format: google-datetime
          type: string
      type: object
    AllocateIdsRequest:
      description: The request for Datastore.AllocateIds.
      properties:
        keys:
          description: Required. A list of keys with incomplete key paths for which to allocate IDs. No key may be reserved/read-only.
          items:
            $ref: "#/components/schemas/Key"
          type: array
      type: object
    AllocateIdsResponse:
      description: The response for Datastore.AllocateIds.
      properties:
        keys:
          description: The keys specified in the request (in the same order), each with its key path completed with a newly allocated ID.
          items:
            $ref: "#/components/schemas/Key"
          type: array
      type: object
    ArrayValue:
      description: An array value.
      properties:
        values:
          description: Values in the array. The order of values in an array is preserved as long as all values have identical settings for 'exclude_from_indexes'.
          items:
            $ref: "#/components/schemas/Value"
          type: array
      type: object
    BeginTransactionRequest:
      description: The request for Datastore.BeginTransaction.
      properties:
        transactionOptions:
          $ref: "#/components/schemas/TransactionOptions"
          description: Options for a new transaction.
      type: object
    BeginTransactionResponse:
      description: The response for Datastore.BeginTransaction.
      properties:
        transaction:
          description: The transaction identifier (always present).
          format: byte
          type: string
      type: object
    CommitRequest:
      description: The request for Datastore.Commit.
      properties:
        mode:
          description: The type of commit to perform. Defaults to `TRANSACTIONAL`.
          enum:
            - MODE_UNSPECIFIED
            - TRANSACTIONAL
            - NON_TRANSACTIONAL
          type: string
        mutations:
          description: "The mutations to perform. When mode is `TRANSACTIONAL`, mutations affecting a single entity are applied in order. The following sequences of mutations affecting a single entity are not permitted in a single `Commit` request: - `insert` followed by `insert` - `update` followed by `insert` - `upsert` followed by `insert` - `delete` followed by `update` When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single entity."
          items:
            $ref: "#/components/schemas/Mutation"
          type: array
        transaction:
          description: The identifier of the transaction associated with the commit. A transaction identifier is returned by a call to Datastore.BeginTransaction.
          format: byte
          type: string
      type: object
    CommitResponse:
      description: The response for Datastore.Commit.
      properties:
        commitTime:
          description: The transaction commit timestamp. Not set for non-transactional commits.
          format: google-datetime
          type: string
        indexUpdates:
          description: The number of index entries updated during the commit, or zero if none were updated.
          format: int32
          type: integer
        mutationResults:
          description: The result of performing the mutations. The i-th mutation result corresponds to the i-th mutation in the request.
          items:
            $ref: "#/components/schemas/MutationResult"
          type: array
      type: object
    CompositeFilter:
      description: A filter that merges multiple other filters using the given operator.
      properties:
        filters:
          description: "The list of filters to combine. Requires: * At least one filter is present."
          items:
            $ref: "#/components/schemas/Filter"
          type: array
        op:
          description: The operator for combining multiple filters.
          enum:
            - OPERATOR_UNSPECIFIED
            - AND
          type: string
      type: object
    Count:
      description: Count of entities that match the query. The `COUNT(*)` aggregation function operates on the entire entity so it does not require a field reference.
      properties:
        upTo:
          description: "Optional. Optional constraint on the maximum number of entities to count. This provides a way to set an upper bound on the number of entities to scan, limiting latency and cost. Unspecified is interpreted as no bound. If a zero value is provided, a count result of zero should always be expected. High-Level Example: ``` AGGREGATE COUNT_UP_TO(1000) OVER ( SELECT * FROM k ); ``` Requires: * Must be non-negative when present."
          format: int64
          type: string
      type: object
    Entity:
      description: A Datastore data object. An entity is limited to 1 megabyte when stored. That _roughly_ corresponds to a limit of 1 megabyte for the serialized form of this message.
      properties:
        key:
          $ref: "#/components/schemas/Key"
          description: The entity's key. An entity must have a key, unless otherwise documented (for example, an entity in `Value.entity_value` may have no key). An entity's kind is its key path's last element's kind, or null if it has no key.
        properties:
          additionalProperties:
            $ref: "#/components/schemas/Value"
          description: The entity's properties. The map's keys are property names. A property name matching regex `__.*__` is reserved. A reserved property name is forbidden in certain documented contexts. The name must not contain more than 500 characters. The name cannot be `""`.
          type: object
      type: object
    EntityResult:
      description: The result of fetching an entity from Datastore.
      properties:
        cursor:
          description: A cursor that points to the position after the result entity. Set only when the `EntityResult` is part of a `QueryResultBatch` message.
          format: byte
          type: string
        entity:
          $ref: "#/components/schemas/Entity"
          description: The resulting entity.
        updateTime:
          description: The time at which the entity was last changed. This field is set for `FULL` entity results. If this entity is missing, this field will not be set.
          format: google-datetime
          type: string
        version:
          description: The version of the entity, a strictly positive number that monotonically increases with changes to the entity. This field is set for `FULL` entity results. For missing entities in `LookupResponse`, this is the version of the snapshot that was used to look up the entity, and it is always set except for eventually consistent reads.
          format: int64
          type: string
      type: object
    Filter:
      description: A holder for any type of filter.
      properties:
        compositeFilter:
          $ref: "#/components/schemas/CompositeFilter"
          description: A composite filter.
        propertyFilter:
          $ref: "#/components/schemas/PropertyFilter"
          description: A filter on a property.
      type: object
    GoogleDatastoreAdminV1CommonMetadata:
      description: Metadata common to all Datastore Admin operations.
      properties:
        endTime:
          description: The time the operation ended, either successfully or otherwise.
          format: google-datetime
          type: string
        labels:
          additionalProperties:
            type: string
          description: The client-assigned labels which were provided when the operation was created. May also include additional labels.
          type: object
        operationType:
          description: The type of the operation. Can be used as a filter in ListOperationsRequest.
          enum:
            - OPERATION_TYPE_UNSPECIFIED
            - EXPORT_ENTITIES
            - IMPORT_ENTITIES
            - CREATE_INDEX
            - DELETE_INDEX
          type: string
        startTime:
          description: The time that work began on the operation.
          format: google-datetime
          type: string
        state:
          description: The current state of the Operation.
          enum:
            - STATE_UNSPECIFIED
            - INITIALIZING
            - PROCESSING
            - CANCELLING
            - FINALIZING
            - SUCCESSFUL
            - FAILED
            - CANCELLED
          type: string
      type: object
    GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata:
      description: 'Metadata for Datastore to Firestore migration operations. The DatastoreFirestoreMigration operation is not started by the end-user via an explicit "creation" method. This is an intentional deviation from the LRO design pattern. This singleton resource can be accessed at: "projects/{project_id}/operations/datastore-firestore-migration"'
      properties:
        migrationState:
          description: The current state of migration from Cloud Datastore to Cloud Firestore in Datastore mode.
          enum:
            - MIGRATION_STATE_UNSPECIFIED
            - RUNNING
            - PAUSED
            - COMPLETE
          type: string
        migrationStep:
          description: The current step of migration from Cloud Datastore to Cloud Firestore in Datastore mode.
          enum:
            - MIGRATION_STEP_UNSPECIFIED
            - PREPARE
            - START
            - APPLY_WRITES_SYNCHRONOUSLY
            - COPY_AND_VERIFY
            - REDIRECT_EVENTUALLY_CONSISTENT_READS
            - REDIRECT_STRONGLY_CONSISTENT_READS
            - REDIRECT_WRITES
          type: string
      type: object
    GoogleDatastoreAdminV1EntityFilter:
      description: "Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[], namespace_ids=['Baz']"
      properties:
        kinds:
          description: If empty, then this represents all kinds.
          items:
            type: string
          type: array
        namespaceIds:
          description: An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique.
          items:
            type: string
          type: array
      type: object
    GoogleDatastoreAdminV1ExportEntitiesMetadata:
      description: Metadata for ExportEntities operations.
      properties:
        common:
          $ref: "#/components/schemas/GoogleDatastoreAdminV1CommonMetadata"
          description: Metadata common to all Datastore Admin operations.
        entityFilter:
          $ref: "#/components/schemas/GoogleDatastoreAdminV1EntityFilter"
          description: Description of which entities are being exported.
        outputUrlPrefix:
          description: Location for the export metadata and data files. This will be the same value as the google.datastore.admin.v1.ExportEntitiesRequest.output_url_prefix field. The final output location is provided in google.datastore.admin.v1.ExportEntitiesResponse.output_url.
          type: string
        progressBytes:
          $ref: "#/components/schemas/GoogleDatastoreAdminV1Progress"
          description: An estimate of the number of bytes processed.
        progressEntities:
          $ref: "#/components/schemas/GoogleDatastoreAdminV1Progress"
          description: An estimate of the number of entities processed.
      type: object
    GoogleDatastoreAdminV1ExportEntitiesResponse:
      description: The response for google.datastore.admin.v1.DatastoreAdmin.ExportEntities.
      properties:
        outputUrl:
          description: Location of the output metadata file. This can be used to begin an import into Cloud Datastore (this project or another project). See google.datastore.admin.v1.ImportEntitiesRequest.input_url. Only present if the operation completed successfully.
          type: string
      type: object
    GoogleDatastoreAdminV1ImportEntitiesMetadata:
      description: Metadata for ImportEntities operations.
      properties:
        common:
          $ref: "#/components/schemas/GoogleDatastoreAdminV1CommonMetadata"
          description: Metadata common to all Datastore Admin operations.
        entityFilter:
          $ref: "#/components/schemas/GoogleDatastoreAdminV1EntityFilter"
          description: Description of which entities are being imported.
        inputUrl:
          description: The location of the import metadata file. This will be the same value as the google.datastore.admin.v1.ExportEntitiesResponse.output_url field.
          type: string
        progressBytes:
          $ref: "#/components/schemas/GoogleDatastoreAdminV1Progress"
          description: An estimate of the number of bytes processed.
        progressEntities:
          $ref: "#/components/schemas/GoogleDatastoreAdminV1Progress"
          description: An estimate of the number of entities processed.
      type: object
    GoogleDatastoreAdminV1IndexOperationMetadata:
      description: Metadata for Index operations.
      properties:
        common:
          $ref: "#/components/schemas/GoogleDatastoreAdminV1CommonMetadata"
          description: Metadata common to all Datastore Admin operations.
        indexId:
          description: The index resource ID that this operation is acting on.
          type: string
        progressEntities:
          $ref: "#/components/schemas/GoogleDatastoreAdminV1Progress"
          description: An estimate of the number of entities processed.
      type: object
    GoogleDatastoreAdminV1MigrationProgressEvent:
      description: An event signifying the start of a new step in a [migration from Cloud Datastore to Cloud Firestore in Datastore mode](https://cloud.google.com/datastore/docs/upgrade-to-firestore).
      properties:
        prepareStepDetails:
          $ref: "#/components/schemas/GoogleDatastoreAdminV1PrepareStepDetails"
          description: Details for the `PREPARE` step.
        redirectWritesStepDetails:
          $ref: "#/components/schemas/GoogleDatastoreAdminV1RedirectWritesStepDetails"
          description: Details for the `REDIRECT_WRITES` step.
        step:
          description: The step that is starting. An event with step set to `START` indicates that the migration has been reverted back to the initial pre-migration state.
          enum:
            - MIGRATION_STEP_UNSPECIFIED
            - PREPARE
            - START
            - APPLY_WRITES_SYNCHRONOUSLY
            - COPY_AND_VERIFY
            - REDIRECT_EVENTUALLY_CONSISTENT_READS
            - REDIRECT_STRONGLY_CONSISTENT_READS
            - REDIRECT_WRITES
          type: string
      type: object
    GoogleDatastoreAdminV1MigrationStateEvent:
      description: An event signifying a change in state of a [migration from Cloud Datastore to Cloud Firestore in Datastore mode](https://cloud.google.com/datastore/docs/upgrade-to-firestore).
      properties:
        state:
          description: The new state of the migration.
          enum:
            - MIGRATION_STATE_UNSPECIFIED
            - RUNNING
            - PAUSED
            - COMPLETE
          type: string
      type: object
    GoogleDatastoreAdminV1PrepareStepDetails:
      description: Details for the `PREPARE` step.
      properties:
        concurrencyMode:
          description: The concurrency mode this database will use when it reaches the `REDIRECT_WRITES` step.
          enum:
            - CONCURRENCY_MODE_UNSPECIFIED
            - PESSIMISTIC
            - OPTIMISTIC
            - OPTIMISTIC_WITH_ENTITY_GROUPS
          type: string
      type: object
    GoogleDatastoreAdminV1Progress:
      description: Measures the progress of a particular metric.
      properties:
        workCompleted:
          description: The amount of work that has been completed. Note that this may be greater than work_estimated.
          format: int64
          type: string
        workEstimated:
          description: An estimate of how much work needs to be performed. May be zero if the work estimate is unavailable.
          format: int64
          type: string
      type: object
    GoogleDatastoreAdminV1RedirectWritesStepDetails:
      description: Details for the `REDIRECT_WRITES` step.
      properties:
        concurrencyMode:
          description: Ths concurrency mode for this database.
          enum:
            - CONCURRENCY_MODE_UNSPECIFIED
            - PESSIMISTIC
            - OPTIMISTIC
            - OPTIMISTIC_WITH_ENTITY_GROUPS
          type: string
      type: object
    GoogleDatastoreAdminV1beta1CommonMetadata:
      description: Metadata common to all Datastore Admin operations.
      properties:
        endTime:
          description: The time the operation ended, either successfully or otherwise.
          format: google-datetime
          type: string
        labels:
          additionalProperties:
            type: string
          description: The client-assigned labels which were provided when the operation was created. May also include additional labels.
          type: object
        operationType:
          description: The type of the operation. Can be used as a filter in ListOperationsRequest.
          enum:
            - OPERATION_TYPE_UNSPECIFIED
            - EXPORT_ENTITIES
            - IMPORT_ENTITIES
          type: string
        startTime:
          description: The time that work began on the operation.
          format: google-datetime
          type: string
        state:
          description: The current state of the Operation.
          enum:
            - STATE_UNSPECIFIED
            - INITIALIZING
            - PROCESSING
            - CANCELLING
            - FINALIZING
            - SUCCESSFUL
            - FAILED
            - CANCELLED
          type: string
      type: object
    GoogleDatastoreAdminV1beta1EntityFilter:
      description: "Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[], namespace_ids=['Baz']"
      properties:
        kinds:
          description: If empty, then this represents all kinds.
          items:
            type: string
          type: array
        namespaceIds:
          description: An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique.
          items:
            type: string
          type: array
      type: object
    GoogleDatastoreAdminV1beta1ExportEntitiesMetadata:
      description: Metadata for ExportEntities operations.
      properties:
        common:
          $ref: "#/components/schemas/GoogleDatastoreAdminV1beta1CommonMetadata"
          description: Metadata common to all Datastore Admin operations.
        entityFilter:
          $ref: "#/components/schemas/GoogleDatastoreAdminV1beta1EntityFilter"
          description: Description of which entities are being exported.
        outputUrlPrefix:
          description: Location for the export metadata and data files. This will be the same value as the google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix field. The final output location is provided in google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url.
          type: string
        progressBytes:
          $ref: "#/components/schemas/GoogleDatastoreAdminV1beta1Progress"
          description: An estimate of the number of bytes processed.
        progressEntities:
          $ref: "#/components/schemas/GoogleDatastoreAdminV1beta1Progress"
          description: An estimate of the number of entities processed.
      type: object
    GoogleDatastoreAdminV1beta1ExportEntitiesResponse:
      description: The response for google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities.
      properties:
        outputUrl:
          description: Location of the output metadata file. This can be used to begin an import into Cloud Datastore (this project or another project). See google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url. Only present if the operation completed successfully.
          type: string
      type: object
    GoogleDatastoreAdminV1beta1ImportEntitiesMetadata:
      description: Metadata for ImportEntities operations.
      properties:
        common:
          $ref: "#/components/schemas/GoogleDatastoreAdminV1beta1CommonMetadata"
          description: Metadata common to all Datastore Admin operations.
        entityFilter:
          $ref: "#/components/schemas/GoogleDatastoreAdminV1beta1EntityFilter"
          description: Description of which entities are being imported.
        inputUrl:
          description: The location of the import metadata file. This will be the same value as the google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url field.
          type: string
        progressBytes:
          $ref: "#/components/schemas/GoogleDatastoreAdminV1beta1Progress"
          description: An estimate of the number of bytes processed.
        progressEntities:
          $ref: "#/components/schemas/GoogleDatastoreAdminV1beta1Progress"
          description: An estimate of the number of entities processed.
      type: object
    GoogleDatastoreAdminV1beta1Progress:
      description: Measures the progress of a particular metric.
      properties:
        workCompleted:
          description: The amount of work that has been completed. Note that this may be greater than work_estimated.
          format: int64
          type: string
        workEstimated:
          description: An estimate of how much work needs to be performed. May be zero if the work estimate is unavailable.
          format: int64
          type: string
      type: object
    GqlQuery:
      description: A [GQL query](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
      properties:
        allowLiterals:
          description: When false, the query string must not contain any literals and instead must bind all values. For example, `SELECT * FROM Kind WHERE a = 'string literal'` is not allowed, while `SELECT * FROM Kind WHERE a = @value` is.
          type: boolean
        namedBindings:
          additionalProperties:
            $ref: "#/components/schemas/GqlQueryParameter"
          description: For each non-reserved named binding site in the query string, there must be a named parameter with that name, but not necessarily the inverse. Key must match regex `A-Za-z_$*`, must not match regex `__.*__`, and must not be `""`.
          type: object
        positionalBindings:
          description: Numbered binding site @1 references the first numbered parameter, effectively using 1-based indexing, rather than the usual 0. For each binding site numbered i in `query_string`, there must be an i-th numbered parameter. The inverse must also be true.
          items:
            $ref: "#/components/schemas/GqlQueryParameter"
          type: array
        queryString:
          description: A string of the format described [here](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
          type: string
      type: object
    GqlQueryParameter:
      description: A binding parameter for a GQL query.
      properties:
        cursor:
          description: A query cursor. Query cursors are returned in query result batches.
          format: byte
          type: string
        value:
          $ref: "#/components/schemas/Value"
          description: A value parameter.
      type: object
    Key:
      description: A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts.
      properties:
        partitionId:
          $ref: "#/components/schemas/PartitionId"
          description: Entities are partitioned into subsets, currently identified by a project ID and namespace ID. Queries are scoped to a single partition.
        path:
          description: "The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements."
          items:
            $ref: "#/components/schemas/PathElement"
          type: array
      type: object
    KindExpression:
      description: A representation of a kind.
      properties:
        name:
          description: The name of the kind.
          type: string
      type: object
    LatLng:
      description: An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
      properties:
        latitude:
          description: The latitude in degrees. It must be in the range [-90.0, +90.0].
          format: double
          type: number
        longitude:
          description: The longitude in degrees. It must be in the range [-180.0, +180.0].
          format: double
          type: number
      type: object
    LookupRequest:
      description: The request for Datastore.Lookup.
      properties:
        keys:
          description: Required. Keys of entities to look up.
          items:
            $ref: "#/components/schemas/Key"
          type: array
        readOptions:
          $ref: "#/components/schemas/ReadOptions"
          description: The options for this lookup request.
      type: object
    LookupResponse:
      description: The response for Datastore.Lookup.
      properties:
        deferred:
          description: A list of keys that were not looked up due to resource constraints. The order of results in this field is undefined and has no relation to the order of the keys in the input.
          items:
            $ref: "#/components/schemas/Key"
          type: array
        found:
          description: Entities found as `ResultType.FULL` entities. The order of results in this field is undefined and has no relation to the order of the keys in the input.
          items:
            $ref: "#/components/schemas/EntityResult"
          type: array
        missing:
          description: Entities not found as `ResultType.KEY_ONLY` entities. The order of results in this field is undefined and has no relation to the order of the keys in the input.
          items:
            $ref: "#/components/schemas/EntityResult"
          type: array
        readTime:
          description: The time at which these entities were read or found missing.
          format: google-datetime
          type: string
      type: object
    Mutation:
      description: A mutation to apply to an entity.
      properties:
        baseVersion:
          description: The version of the entity that this mutation is being applied to. If this does not match the current version on the server, the mutation conflicts.
          format: int64
          type: string
        delete:
          $ref: "#/components/schemas/Key"
          description: The key of the entity to delete. The entity may or may not already exist. Must have a complete key path and must not be reserved/read-only.
        insert:
          $ref: "#/components/schemas/Entity"
          description: The entity to insert. The entity must not already exist. The entity key's final path element may be incomplete.
        update:
          $ref: "#/components/schemas/Entity"
          description: The entity to update. The entity must already exist. Must have a complete key path.
        updateTime:
          description: The update time of the entity that this mutation is being applied to. If this does not match the current update time on the server, the mutation conflicts.
          format: google-datetime
          type: string
        upsert:
          $ref: "#/components/schemas/Entity"
          description: The entity to upsert. The entity may or may not already exist. The entity key's final path element may be incomplete.
      type: object
    MutationResult:
      description: The result of applying a mutation.
      properties:
        conflictDetected:
          description: Whether a conflict was detected for this mutation. Always false when a conflict detection strategy field is not set in the mutation.
          type: boolean
        key:
          $ref: "#/components/schemas/Key"
          description: The automatically allocated key. Set only when the mutation allocated a key.
        updateTime:
          description: The update time of the entity on the server after processing the mutation. If the mutation doesn't change anything on the server, then the timestamp will be the update timestamp of the current entity. This field will not be set after a 'delete'.
          format: google-datetime
          type: string
        version:
          description: The version of the entity on the server after processing the mutation. If the mutation doesn't change anything on the server, then the version will be the version of the current entity or, if no entity is present, a version that is strictly greater than the version of any previous entity and less than the version of any possible future entity.
          format: int64
          type: string
      type: object
    PartitionId:
      description: 'A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty. A partition ID contains several dimensions: project ID and namespace ID. Partition dimensions: - May be `""`. - Must be valid UTF-8 bytes. - Must have values that match regex `[A-Za-z\d\.\-_]{1,100}` If the value of any dimension matches regex `__.*__`, the partition is reserved/read-only. A reserved/read-only partition ID is forbidden in certain documented contexts. Foreign partition IDs (in which the project ID does not match the context project ID ) are discouraged. Reads and writes of foreign partition IDs may fail if the project is not in an active state.'
      properties:
        namespaceId:
          description: If not empty, the ID of the namespace to which the entities belong.
          type: string
        projectId:
          description: The ID of the project to which the entities belong.
          type: string
      type: object
    PathElement:
      description: A (kind, ID/name) pair used to construct a key path. If either name or ID is set, the element is complete. If neither is set, the element is incomplete.
      properties:
        id:
          description: The auto-allocated ID of the entity. Never equal to zero. Values less than zero are discouraged and may not be supported in the future.
          format: int64
          type: string
        kind:
          description: The kind of the entity. A kind matching regex `__.*__` is reserved/read-only. A kind must not contain more than 1500 bytes when UTF-8 encoded. Cannot be `""`. Must be valid UTF-8 bytes. Legacy values that are not valid UTF-8 are encoded as `__bytes__` where `` is the base-64 encoding of the bytes.
          type: string
        name:
          description: The name of the entity. A name matching regex `__.*__` is reserved/read-only. A name must not be more than 1500 bytes when UTF-8 encoded. Cannot be `""`. Must be valid UTF-8 bytes. Legacy values that are not valid UTF-8 are encoded as `__bytes__` where `` is the base-64 encoding of the bytes.
          type: string
      type: object
    Projection:
      description: A representation of a property in a projection.
      properties:
        property:
          $ref: "#/components/schemas/PropertyReference"
          description: The property to project.
      type: object
    PropertyFilter:
      description: A filter on a specific property.
      properties:
        op:
          description: The operator to filter by.
          enum:
            - OPERATOR_UNSPECIFIED
            - LESS_THAN
            - LESS_THAN_OR_EQUAL
            - GREATER_THAN
            - GREATER_THAN_OR_EQUAL
            - EQUAL
            - IN
            - NOT_EQUAL
            - HAS_ANCESTOR
            - NOT_IN
          type: string
        property:
          $ref: "#/components/schemas/PropertyReference"
          description: The property to filter by.
        value:
          $ref: "#/components/schemas/Value"
          description: The value to compare the property to.
      type: object
    PropertyOrder:
      description: The desired order for a specific property.
      properties:
        direction:
          description: The direction to order by. Defaults to `ASCENDING`.
          enum:
            - DIRECTION_UNSPECIFIED
            - ASCENDING
            - DESCENDING
          type: string
        property:
          $ref: "#/components/schemas/PropertyReference"
          description: The property to order by.
      type: object
    PropertyReference:
      description: A reference to a property relative to the kind expressions.
      properties:
        name:
          description: The name of the property. If name includes "."s, it may be interpreted as a property name path.
          type: string
      type: object
    Query:
      description: A query for entities.
      properties:
        distinctOn:
          description: The properties to make distinct. The query results will contain the first result for each distinct combination of values for the given properties (if empty, all results are returned).
          items:
            $ref: "#/components/schemas/PropertyReference"
          type: array
        endCursor:
          description: An ending point for the query results. Query cursors are returned in query result batches and [can only be used to limit the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
          format: byte
          type: string
        filter:
          $ref: "#/components/schemas/Filter"
          description: The filter to apply.
        kind:
          description: The kinds to query (if empty, returns entities of all kinds). Currently at most 1 kind may be specified.
          items:
            $ref: "#/components/schemas/KindExpression"
          type: array
        limit:
          description: The maximum number of results to return. Applies after all other constraints. Optional. Unspecified is interpreted as no limit. Must be >= 0 if specified.
          format: int32
          type: integer
        offset:
          description: The number of results to skip. Applies before limit, but after all other constraints. Optional. Must be >= 0 if specified.
          format: int32
          type: integer
        order:
          description: The order to apply to the query results (if empty, order is unspecified).
          items:
            $ref: "#/components/schemas/PropertyOrder"
          type: array
        projection:
          description: The projection to return. Defaults to returning all properties.
          items:
            $ref: "#/components/schemas/Projection"
          type: array
        startCursor:
          description: A starting point for the query results. Query cursors are returned in query result batches and [can only be used to continue the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
          format: byte
          type: string
      type: object
    QueryResultBatch:
      description: A batch of results produced by a query.
      properties:
        endCursor:
          description: A cursor that points to the position after the last result in the batch.
          format: byte
          type: string
        entityResultType:
          description: The result type for every entity in `entity_results`.
          enum:
            - RESULT_TYPE_UNSPECIFIED
            - FULL
            - PROJECTION
            - KEY_ONLY
          type: string
        entityResults:
          description: The results for this batch.
          items:
            $ref: "#/components/schemas/EntityResult"
          type: array
        moreResults:
          description: The state of the query after the current batch.
          enum:
            - MORE_RESULTS_TYPE_UNSPECIFIED
            - NOT_FINISHED
            - MORE_RESULTS_AFTER_LIMIT
            - MORE_RESULTS_AFTER_CURSOR
            - NO_MORE_RESULTS
          type: string
        readTime:
          description: Read timestamp this batch was returned from. This applies to the range of results from the query's `start_cursor` (or the beginning of the query if no cursor was given) to this batch's `end_cursor` (not the query's `end_cursor`). In a single transaction, subsequent query result batches for the same query can have a greater timestamp. Each batch's read timestamp is valid for all preceding batches. This value will not be set for eventually consistent queries in Cloud Datastore.
          format: google-datetime
          type: string
        skippedCursor:
          description: A cursor that points to the position after the last skipped result. Will be set when `skipped_results` != 0.
          format: byte
          type: string
        skippedResults:
          description: The number of results skipped, typically because of an offset.
          format: int32
          type: integer
        snapshotVersion:
          description: The version number of the snapshot this batch was returned from. This applies to the range of results from the query's `start_cursor` (or the beginning of the query if no cursor was given) to this batch's `end_cursor` (not the query's `end_cursor`). In a single transaction, subsequent query result batches for the same query can have a greater snapshot version number. Each batch's snapshot version is valid for all preceding batches. The value will be zero for eventually consistent queries.
          format: int64
          type: string
      type: object
    ReadOnly:
      description: Options specific to read-only transactions.
      properties:
        readTime:
          description: Reads entities at the given time. This may not be older than 60 seconds.
          format: google-datetime
          type: string
      type: object
    ReadOptions:
      description: The options shared by read requests.
      properties:
        readConsistency:
          description: The non-transactional read consistency to use.
          enum:
            - READ_CONSISTENCY_UNSPECIFIED
            - STRONG
            - EVENTUAL
          type: string
        readTime:
          description: Reads entities as they were at the given time. This may not be older than 270 seconds. This value is only supported for Cloud Firestore in Datastore mode.
          format: google-datetime
          type: string
        transaction:
          description: The identifier of the transaction in which to read. A transaction identifier is returned by a call to Datastore.BeginTransaction.
          format: byte
          type: string
      type: object
    ReadWrite:
      description: Options specific to read / write transactions.
      properties:
        previousTransaction:
          description: The transaction identifier of the transaction being retried.
          format: byte
          type: string
      type: object
    ReserveIdsRequest:
      description: The request for Datastore.ReserveIds.
      properties:
        databaseId:
          description: The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database.
          type: string
        keys:
          description: Required. A list of keys with complete key paths whose numeric IDs should not be auto-allocated.
          items:
            $ref: "#/components/schemas/Key"
          type: array
      type: object
    ReserveIdsResponse:
      description: The response for Datastore.ReserveIds.
      properties: {}
      type: object
    RollbackRequest:
      description: The request for Datastore.Rollback.
      properties:
        transaction:
          description: Required. The transaction identifier, returned by a call to Datastore.BeginTransaction.
          format: byte
          type: string
      type: object
    RollbackResponse:
      description: The response for Datastore.Rollback. (an empty message).
      properties: {}
      type: object
    RunAggregationQueryRequest:
      description: The request for Datastore.RunAggregationQuery.
      properties:
        aggregationQuery:
          $ref: "#/components/schemas/AggregationQuery"
          description: The query to run.
        gqlQuery:
          $ref: "#/components/schemas/GqlQuery"
          description: The GQL query to run. This query must be an aggregation query.
        partitionId:
          $ref: "#/components/schemas/PartitionId"
          description: Entities are partitioned into subsets, identified by a partition ID. Queries are scoped to a single partition. This partition ID is normalized with the standard default context partition ID.
        readOptions:
          $ref: "#/components/schemas/ReadOptions"
          description: The options for this query.
      type: object
    RunAggregationQueryResponse:
      description: The response for Datastore.RunAggregationQuery.
      properties:
        batch:
          $ref: "#/components/schemas/AggregationResultBatch"
          description: A batch of aggregation results. Always present.
        query:
          $ref: "#/components/schemas/AggregationQuery"
          description: The parsed form of the `GqlQuery` from the request, if it was set.
      type: object
    RunQueryRequest:
      description: The request for Datastore.RunQuery.
      properties:
        gqlQuery:
          $ref: "#/components/schemas/GqlQuery"
          description: The GQL query to run. This query must be a non-aggregation query.
        partitionId:
          $ref: "#/components/schemas/PartitionId"
          description: Entities are partitioned into subsets, identified by a partition ID. Queries are scoped to a single partition. This partition ID is normalized with the standard default context partition ID.
        query:
          $ref: "#/components/schemas/Query"
          description: The query to run.
        readOptions:
          $ref: "#/components/schemas/ReadOptions"
          description: The options for this query.
      type: object
    RunQueryResponse:
      description: The response for Datastore.RunQuery.
      properties:
        batch:
          $ref: "#/components/schemas/QueryResultBatch"
          description: A batch of query results (always present).
        query:
          $ref: "#/components/schemas/Query"
          description: The parsed form of the `GqlQuery` from the request, if it was set.
      type: object
    TransactionOptions:
      description: Options for beginning a new transaction. Transactions can be created explicitly with calls to Datastore.BeginTransaction or implicitly by setting ReadOptions.new_transaction in read requests.
      properties:
        readOnly:
          $ref: "#/components/schemas/ReadOnly"
          description: The transaction should only allow reads.
        readWrite:
          $ref: "#/components/schemas/ReadWrite"
          description: The transaction should allow both reads and writes.
      type: object
    Value:
      description: A message that can hold any of the supported value types and associated metadata.
      properties:
        arrayValue:
          $ref: "#/components/schemas/ArrayValue"
          description: An array value. Cannot contain another array value. A `Value` instance that sets field `array_value` must not set fields `meaning` or `exclude_from_indexes`.
        blobValue:
          description: A blob value. May have at most 1,000,000 bytes. When `exclude_from_indexes` is false, may have at most 1500 bytes. In JSON requests, must be base64-encoded.
          format: byte
          type: string
        booleanValue:
          description: A boolean value.
          type: boolean
        doubleValue:
          description: A double value.
          format: double
          type: number
        entityValue:
          $ref: "#/components/schemas/Entity"
          description: An entity value. - May have no key. - May have a key with an incomplete key path. - May have a reserved/read-only key.
        excludeFromIndexes:
          description: If the value should be excluded from all indexes including those defined explicitly.
          type: boolean
        geoPointValue:
          $ref: "#/components/schemas/LatLng"
          description: A geo point value representing a point on the surface of Earth.
        integerValue:
          description: An integer value.
          format: int64
          type: string
        keyValue:
          $ref: "#/components/schemas/Key"
          description: A key value.
        meaning:
          description: The `meaning` field should only be populated for backwards compatibility.
          format: int32
          type: integer
        nullValue:
          description: A null value.
          enum:
            - NULL_VALUE
          type: string
        stringValue:
          description: A UTF-8 encoded string value. When `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes. Otherwise, may be set to at most 1,000,000 bytes.
          type: string
        timestampValue:
          description: A timestamp value. When stored in the Datastore, precise only to microseconds; any additional precision is rounded down.
          format: google-datetime
          type: string
      type: object
  securitySchemes:
    Oauth2:
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/cloud-platform: See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.
            https://www.googleapis.com/auth/datastore: View and manage your Google Cloud Datastore data
      type: oauth2
    Oauth2c:
      description: Oauth 2.0 authorizationCode authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/cloud-platform: See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.
            https://www.googleapis.com/auth/datastore: View and manage your Google Cloud Datastore data
          tokenUrl: https://accounts.google.com/o/oauth2/token
      type: oauth2
source:
  url: {}

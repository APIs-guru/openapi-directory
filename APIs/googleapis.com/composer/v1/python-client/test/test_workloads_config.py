# coding: utf-8

"""
    Cloud Composer API

    Manages Apache Airflow environments on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.workloads_config import WorkloadsConfig

class TestWorkloadsConfig(unittest.TestCase):
    """WorkloadsConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WorkloadsConfig:
        """Test WorkloadsConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WorkloadsConfig`
        """
        model = WorkloadsConfig()
        if include_optional:
            return WorkloadsConfig(
                dag_processor = openapi_client.models.dag_processor_resource.DagProcessorResource(
                    count = 56, 
                    cpu = 1.337, 
                    memory_gb = 1.337, 
                    storage_gb = 1.337, ),
                scheduler = openapi_client.models.scheduler_resource.SchedulerResource(
                    count = 56, 
                    cpu = 1.337, 
                    memory_gb = 1.337, 
                    storage_gb = 1.337, ),
                triggerer = openapi_client.models.triggerer_resource.TriggererResource(
                    count = 56, 
                    cpu = 1.337, 
                    memory_gb = 1.337, ),
                web_server = openapi_client.models.web_server_resource.WebServerResource(
                    cpu = 1.337, 
                    memory_gb = 1.337, 
                    storage_gb = 1.337, ),
                worker = openapi_client.models.worker_resource.WorkerResource(
                    cpu = 1.337, 
                    max_count = 56, 
                    memory_gb = 1.337, 
                    min_count = 56, 
                    storage_gb = 1.337, )
            )
        else:
            return WorkloadsConfig(
        )
        """

    def testWorkloadsConfig(self):
        """Test WorkloadsConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

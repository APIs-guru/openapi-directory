# coding: utf-8

"""
    Cloud Composer API

    Manages Apache Airflow environments on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.node_config import NodeConfig

class TestNodeConfig(unittest.TestCase):
    """NodeConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NodeConfig:
        """Test NodeConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NodeConfig`
        """
        model = NodeConfig()
        if include_optional:
            return NodeConfig(
                composer_internal_ipv4_cidr_block = '',
                composer_network_attachment = '',
                disk_size_gb = 56,
                enable_ip_masq_agent = True,
                ip_allocation_policy = openapi_client.models.ip_allocation_policy.IPAllocationPolicy(
                    cluster_ipv4_cidr_block = '', 
                    cluster_secondary_range_name = '', 
                    services_ipv4_cidr_block = '', 
                    services_secondary_range_name = '', 
                    use_ip_aliases = True, ),
                location = '',
                machine_type = '',
                network = '',
                oauth_scopes = [
                    ''
                    ],
                service_account = '',
                subnetwork = '',
                tags = [
                    ''
                    ]
            )
        else:
            return NodeConfig(
        )
        """

    def testNodeConfig(self):
        """Test NodeConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

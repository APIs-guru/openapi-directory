# coding: utf-8

"""
    Cloud Composer API

    Manages Apache Airflow environments on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_environments_response import ListEnvironmentsResponse

class TestListEnvironmentsResponse(unittest.TestCase):
    """ListEnvironmentsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListEnvironmentsResponse:
        """Test ListEnvironmentsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListEnvironmentsResponse`
        """
        model = ListEnvironmentsResponse()
        if include_optional:
            return ListEnvironmentsResponse(
                environments = [
                    openapi_client.models.environment.Environment(
                        config = openapi_client.models.environment_config.EnvironmentConfig(
                            airflow_byoid_uri = '', 
                            airflow_uri = '', 
                            dag_gcs_prefix = '', 
                            data_retention_config = openapi_client.models.data_retention_config.DataRetentionConfig(
                                task_logs_retention_config = openapi_client.models.task_logs_retention_config.TaskLogsRetentionConfig(
                                    storage_mode = 'TASK_LOGS_STORAGE_MODE_UNSPECIFIED', ), ), 
                            database_config = openapi_client.models.database_config.DatabaseConfig(
                                machine_type = '', 
                                zone = '', ), 
                            encryption_config = openapi_client.models.encryption_config.EncryptionConfig(
                                kms_key_name = '', ), 
                            environment_size = 'ENVIRONMENT_SIZE_UNSPECIFIED', 
                            gke_cluster = '', 
                            maintenance_window = openapi_client.models.maintenance_window.MaintenanceWindow(
                                end_time = '', 
                                recurrence = '', 
                                start_time = '', ), 
                            master_authorized_networks_config = openapi_client.models.master_authorized_networks_config.MasterAuthorizedNetworksConfig(
                                cidr_blocks = [
                                    openapi_client.models.cidr_block.CidrBlock(
                                        cidr_block = '', 
                                        display_name = '', )
                                    ], 
                                enabled = True, ), 
                            node_config = openapi_client.models.node_config.NodeConfig(
                                composer_internal_ipv4_cidr_block = '', 
                                composer_network_attachment = '', 
                                disk_size_gb = 56, 
                                enable_ip_masq_agent = True, 
                                ip_allocation_policy = openapi_client.models.ip_allocation_policy.IPAllocationPolicy(
                                    cluster_ipv4_cidr_block = '', 
                                    cluster_secondary_range_name = '', 
                                    services_ipv4_cidr_block = '', 
                                    services_secondary_range_name = '', 
                                    use_ip_aliases = True, ), 
                                location = '', 
                                machine_type = '', 
                                network = '', 
                                oauth_scopes = [
                                    ''
                                    ], 
                                service_account = '', 
                                subnetwork = '', 
                                tags = [
                                    ''
                                    ], ), 
                            node_count = 56, 
                            private_environment_config = openapi_client.models.private_environment_config.PrivateEnvironmentConfig(
                                cloud_composer_connection_subnetwork = '', 
                                cloud_composer_network_ipv4_cidr_block = '', 
                                cloud_composer_network_ipv4_reserved_range = '', 
                                cloud_sql_ipv4_cidr_block = '', 
                                enable_private_builds_only = True, 
                                enable_private_environment = True, 
                                enable_privately_used_public_ips = True, 
                                networking_config = openapi_client.models.networking_config.NetworkingConfig(
                                    connection_type = 'CONNECTION_TYPE_UNSPECIFIED', ), 
                                private_cluster_config = openapi_client.models.private_cluster_config.PrivateClusterConfig(
                                    enable_private_endpoint = True, 
                                    master_ipv4_cidr_block = '', 
                                    master_ipv4_reserved_range = '', ), 
                                web_server_ipv4_cidr_block = '', 
                                web_server_ipv4_reserved_range = '', ), 
                            recovery_config = openapi_client.models.recovery_config.RecoveryConfig(
                                scheduled_snapshots_config = openapi_client.models.scheduled_snapshots_config.ScheduledSnapshotsConfig(
                                    enabled = True, 
                                    snapshot_creation_schedule = '', 
                                    snapshot_location = '', 
                                    time_zone = '', ), ), 
                            resilience_mode = 'RESILIENCE_MODE_UNSPECIFIED', 
                            software_config = openapi_client.models.software_config.SoftwareConfig(
                                airflow_config_overrides = {
                                    'key' : ''
                                    }, 
                                cloud_data_lineage_integration = openapi_client.models.cloud_data_lineage_integration.CloudDataLineageIntegration(
                                    enabled = True, ), 
                                env_variables = {
                                    'key' : ''
                                    }, 
                                image_version = '', 
                                pypi_packages = {
                                    'key' : ''
                                    }, 
                                python_version = '', 
                                scheduler_count = 56, 
                                web_server_plugins_mode = 'WEB_SERVER_PLUGINS_MODE_UNSPECIFIED', ), 
                            web_server_config = openapi_client.models.web_server_config.WebServerConfig(
                                machine_type = '', ), 
                            web_server_network_access_control = openapi_client.models.web_server_network_access_control.WebServerNetworkAccessControl(
                                allowed_ip_ranges = [
                                    openapi_client.models.allowed_ip_range.AllowedIpRange(
                                        description = '', 
                                        value = '', )
                                    ], ), 
                            workloads_config = openapi_client.models.workloads_config.WorkloadsConfig(
                                dag_processor = openapi_client.models.dag_processor_resource.DagProcessorResource(
                                    count = 56, 
                                    cpu = 1.337, 
                                    memory_gb = 1.337, 
                                    storage_gb = 1.337, ), 
                                scheduler = openapi_client.models.scheduler_resource.SchedulerResource(
                                    count = 56, 
                                    cpu = 1.337, 
                                    memory_gb = 1.337, 
                                    storage_gb = 1.337, ), 
                                triggerer = openapi_client.models.triggerer_resource.TriggererResource(
                                    count = 56, 
                                    cpu = 1.337, 
                                    memory_gb = 1.337, ), 
                                web_server = openapi_client.models.web_server_resource.WebServerResource(
                                    cpu = 1.337, 
                                    memory_gb = 1.337, 
                                    storage_gb = 1.337, ), 
                                worker = openapi_client.models.worker_resource.WorkerResource(
                                    cpu = 1.337, 
                                    max_count = 56, 
                                    memory_gb = 1.337, 
                                    min_count = 56, 
                                    storage_gb = 1.337, ), ), ), 
                        create_time = '', 
                        labels = {
                            'key' : ''
                            }, 
                        name = '', 
                        satisfies_pzs = True, 
                        state = 'STATE_UNSPECIFIED', 
                        storage_config = openapi_client.models.storage_config.StorageConfig(
                            bucket = '', ), 
                        update_time = '', 
                        uuid = '', )
                    ],
                next_page_token = ''
            )
        else:
            return ListEnvironmentsResponse(
        )
        """

    def testListEnvironmentsResponse(self):
        """Test ListEnvironmentsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

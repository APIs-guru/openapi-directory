# coding: utf-8

"""
    Cloud Composer API

    Manages Apache Airflow environments on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cloud_data_lineage_integration import CloudDataLineageIntegration
from typing import Optional, Set
from typing_extensions import Self

class SoftwareConfig(BaseModel):
    """
    Specifies the selection and configuration of software inside the environment.
    """ # noqa: E501
    airflow_config_overrides: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Apache Airflow configuration properties to override. Property keys contain the section and property names, separated by a hyphen, for example \"core-dags_are_paused_at_creation\". Section names must not contain hyphens (\"-\"), opening square brackets (\"[\"), or closing square brackets (\"]\"). The property name must not be empty and must not contain an equals sign (\"=\") or semicolon (\";\"). Section and property names must not contain a period (\".\"). Apache Airflow configuration property names must be written in [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can contain any character, and can be written in any lower/upper case format. Certain Apache Airflow configuration property values are [blocked](/composer/docs/concepts/airflow-configurations), and cannot be overridden.", alias="airflowConfigOverrides")
    cloud_data_lineage_integration: Optional[CloudDataLineageIntegration] = Field(default=None, alias="cloudDataLineageIntegration")
    env_variables: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes. Environment variable names must match the regular expression `a-zA-Z_*`. They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` * `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` * `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` * `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`", alias="envVariables")
    image_version: Optional[StrictStr] = Field(default=None, description="The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression `composer-([0-9]+(\\.[0-9]+\\.[0-9]+(-preview\\.[0-9]+)?)?|latest)-airflow-([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)`. When used as input, the server also checks if the provided version is supported and denies the request for an unsupported version. The Cloud Composer portion of the image version is a full [semantic version](https://semver.org), or an alias in the form of major version number or `latest`. When an alias is provided, the server replaces it with the current Cloud Composer version that satisfies the alias. The Apache Airflow portion of the image version is a full semantic version that points to one of the supported Apache Airflow versions, or an alias in the form of only major or major.minor versions specified. When an alias is provided, the server replaces it with the latest Apache Airflow version that satisfies the alias and is supported in the given Cloud Composer version. In all cases, the resolved image version is stored in the same field. See also [version list](/composer/docs/concepts/versioning/composer-versions) and [versioning overview](/composer/docs/concepts/versioning/composer-versioning-overview).", alias="imageVersion")
    pypi_packages: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Custom Python Package Index (PyPI) packages to be installed in the environment. Keys refer to the lowercase package name such as \"numpy\" and values are the lowercase extras and version specifier such as \"==1.12.0\", \"[devel,gcp_api]\", or \"[devel]>=1.8.2, <1.9.2\". To specify a package without pinning it to a version specifier, use the empty string as the value.", alias="pypiPackages")
    python_version: Optional[StrictStr] = Field(default=None, description="Optional. The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes. Can be set to '2' or '3'. If not specified, the default is '3'. Cannot be updated. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use Python major version 3.", alias="pythonVersion")
    scheduler_count: Optional[StrictInt] = Field(default=None, description="Optional. The number of schedulers for Airflow. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-2.*.*.", alias="schedulerCount")
    web_server_plugins_mode: Optional[StrictStr] = Field(default=None, description="Optional. Whether or not the web server uses custom plugins. If unspecified, the field defaults to `PLUGINS_ENABLED`. This field is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.", alias="webServerPluginsMode")
    __properties: ClassVar[List[str]] = ["airflowConfigOverrides", "cloudDataLineageIntegration", "envVariables", "imageVersion", "pypiPackages", "pythonVersion", "schedulerCount", "webServerPluginsMode"]

    @field_validator('web_server_plugins_mode')
    def web_server_plugins_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WEB_SERVER_PLUGINS_MODE_UNSPECIFIED', 'PLUGINS_DISABLED', 'PLUGINS_ENABLED']):
            raise ValueError("must be one of enum values ('WEB_SERVER_PLUGINS_MODE_UNSPECIFIED', 'PLUGINS_DISABLED', 'PLUGINS_ENABLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SoftwareConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cloud_data_lineage_integration
        if self.cloud_data_lineage_integration:
            _dict['cloudDataLineageIntegration'] = self.cloud_data_lineage_integration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SoftwareConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "airflowConfigOverrides": obj.get("airflowConfigOverrides"),
            "cloudDataLineageIntegration": CloudDataLineageIntegration.from_dict(obj["cloudDataLineageIntegration"]) if obj.get("cloudDataLineageIntegration") is not None else None,
            "envVariables": obj.get("envVariables"),
            "imageVersion": obj.get("imageVersion"),
            "pypiPackages": obj.get("pypiPackages"),
            "pythonVersion": obj.get("pythonVersion"),
            "schedulerCount": obj.get("schedulerCount"),
            "webServerPluginsMode": obj.get("webServerPluginsMode")
        })
        return _obj



# coding: utf-8

"""
    Cloud Composer API

    Manages Apache Airflow environments on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ScheduledSnapshotsConfig(BaseModel):
    """
    The configuration for scheduled snapshot creation mechanism.
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=None, description="Optional. Whether scheduled snapshots creation is enabled.")
    snapshot_creation_schedule: Optional[StrictStr] = Field(default=None, description="Optional. The cron expression representing the time when snapshots creation mechanism runs. This field is subject to additional validation around frequency of execution.", alias="snapshotCreationSchedule")
    snapshot_location: Optional[StrictStr] = Field(default=None, description="Optional. The Cloud Storage location for storing automatically created snapshots.", alias="snapshotLocation")
    time_zone: Optional[StrictStr] = Field(default=None, description="Optional. Time zone that sets the context to interpret snapshot_creation_schedule.", alias="timeZone")
    __properties: ClassVar[List[str]] = ["enabled", "snapshotCreationSchedule", "snapshotLocation", "timeZone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScheduledSnapshotsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScheduledSnapshotsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled"),
            "snapshotCreationSchedule": obj.get("snapshotCreationSchedule"),
            "snapshotLocation": obj.get("snapshotLocation"),
            "timeZone": obj.get("timeZone")
        })
        return _obj



# coding: utf-8

"""
    Cloud Composer API

    Manages Apache Airflow environments on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.environment_config import EnvironmentConfig
from openapi_client.models.storage_config import StorageConfig
from typing import Optional, Set
from typing_extensions import Self

class Environment(BaseModel):
    """
    An environment for running orchestration tasks.
    """ # noqa: E501
    config: Optional[EnvironmentConfig] = None
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which this environment was created.", alias="createTime")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. User-defined labels for this environment. The labels map can contain no more than 64 entries. Entries of the labels map are UTF8 strings that comply with the following restrictions: * Keys must conform to regexp: \\p{Ll}\\p{Lo}{0,62} * Values must conform to regexp: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} * Both keys and values are additionally constrained to be <= 128 bytes in size.")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the environment, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\" EnvironmentId must start with a lowercase letter followed by up to 63 lowercase letters, numbers, or hyphens, and cannot end with a hyphen.")
    satisfies_pzs: Optional[StrictBool] = Field(default=None, description="Output only. Reserved for future use.", alias="satisfiesPzs")
    state: Optional[StrictStr] = Field(default=None, description="The current state of the environment.")
    storage_config: Optional[StorageConfig] = Field(default=None, alias="storageConfig")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which this environment was last modified.", alias="updateTime")
    uuid: Optional[StrictStr] = Field(default=None, description="Output only. The UUID (Universally Unique IDentifier) associated with this environment. This value is generated when the environment is created.")
    __properties: ClassVar[List[str]] = ["config", "createTime", "labels", "name", "satisfiesPzs", "state", "storageConfig", "updateTime", "uuid"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'RUNNING', 'UPDATING', 'DELETING', 'ERROR']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'RUNNING', 'UPDATING', 'DELETING', 'ERROR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Environment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "satisfies_pzs",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage_config
        if self.storage_config:
            _dict['storageConfig'] = self.storage_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Environment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "config": EnvironmentConfig.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "createTime": obj.get("createTime"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "satisfiesPzs": obj.get("satisfiesPzs"),
            "state": obj.get("state"),
            "storageConfig": StorageConfig.from_dict(obj["storageConfig"]) if obj.get("storageConfig") is not None else None,
            "updateTime": obj.get("updateTime"),
            "uuid": obj.get("uuid")
        })
        return _obj



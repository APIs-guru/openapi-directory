# coding: utf-8

"""
    Cloud Composer API

    Manages Apache Airflow environments on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_retention_config import DataRetentionConfig
from openapi_client.models.database_config import DatabaseConfig
from openapi_client.models.encryption_config import EncryptionConfig
from openapi_client.models.maintenance_window import MaintenanceWindow
from openapi_client.models.master_authorized_networks_config import MasterAuthorizedNetworksConfig
from openapi_client.models.node_config import NodeConfig
from openapi_client.models.private_environment_config import PrivateEnvironmentConfig
from openapi_client.models.recovery_config import RecoveryConfig
from openapi_client.models.software_config import SoftwareConfig
from openapi_client.models.web_server_config import WebServerConfig
from openapi_client.models.web_server_network_access_control import WebServerNetworkAccessControl
from openapi_client.models.workloads_config import WorkloadsConfig
from typing import Optional, Set
from typing_extensions import Self

class EnvironmentConfig(BaseModel):
    """
    Configuration information for an environment.
    """ # noqa: E501
    airflow_byoid_uri: Optional[StrictStr] = Field(default=None, description="Output only. The 'bring your own identity' variant of the URI of the Apache Airflow Web UI hosted within this environment, to be accessed with external identities using workforce identity federation (see [Access environments with workforce identity federation](/composer/docs/composer-2/access-environments-with-workforce-identity-federation)).", alias="airflowByoidUri")
    airflow_uri: Optional[StrictStr] = Field(default=None, description="Output only. The URI of the Apache Airflow Web UI hosted within this environment (see [Airflow web interface](/composer/docs/how-to/accessing/airflow-web-interface)).", alias="airflowUri")
    dag_gcs_prefix: Optional[StrictStr] = Field(default=None, description="Output only. The Cloud Storage prefix of the DAGs for this environment. Although Cloud Storage objects reside in a flat namespace, a hierarchical file tree can be simulated using \"/\"-delimited object name prefixes. DAG objects for this environment reside in a simulated directory with the given prefix.", alias="dagGcsPrefix")
    data_retention_config: Optional[DataRetentionConfig] = Field(default=None, alias="dataRetentionConfig")
    database_config: Optional[DatabaseConfig] = Field(default=None, alias="databaseConfig")
    encryption_config: Optional[EncryptionConfig] = Field(default=None, alias="encryptionConfig")
    environment_size: Optional[StrictStr] = Field(default=None, description="Optional. The size of the Cloud Composer environment. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.", alias="environmentSize")
    gke_cluster: Optional[StrictStr] = Field(default=None, description="Output only. The Kubernetes Engine cluster used to run this environment.", alias="gkeCluster")
    maintenance_window: Optional[MaintenanceWindow] = Field(default=None, alias="maintenanceWindow")
    master_authorized_networks_config: Optional[MasterAuthorizedNetworksConfig] = Field(default=None, alias="masterAuthorizedNetworksConfig")
    node_config: Optional[NodeConfig] = Field(default=None, alias="nodeConfig")
    node_count: Optional[StrictInt] = Field(default=None, description="The number of nodes in the Kubernetes Engine cluster that will be used to run this environment. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.", alias="nodeCount")
    private_environment_config: Optional[PrivateEnvironmentConfig] = Field(default=None, alias="privateEnvironmentConfig")
    recovery_config: Optional[RecoveryConfig] = Field(default=None, alias="recoveryConfig")
    resilience_mode: Optional[StrictStr] = Field(default=None, description="Optional. Resilience mode of the Cloud Composer Environment. This field is supported for Cloud Composer environments in versions composer-2.2.0-airflow-*.*.* and newer.", alias="resilienceMode")
    software_config: Optional[SoftwareConfig] = Field(default=None, alias="softwareConfig")
    web_server_config: Optional[WebServerConfig] = Field(default=None, alias="webServerConfig")
    web_server_network_access_control: Optional[WebServerNetworkAccessControl] = Field(default=None, alias="webServerNetworkAccessControl")
    workloads_config: Optional[WorkloadsConfig] = Field(default=None, alias="workloadsConfig")
    __properties: ClassVar[List[str]] = ["airflowByoidUri", "airflowUri", "dagGcsPrefix", "dataRetentionConfig", "databaseConfig", "encryptionConfig", "environmentSize", "gkeCluster", "maintenanceWindow", "masterAuthorizedNetworksConfig", "nodeConfig", "nodeCount", "privateEnvironmentConfig", "recoveryConfig", "resilienceMode", "softwareConfig", "webServerConfig", "webServerNetworkAccessControl", "workloadsConfig"]

    @field_validator('environment_size')
    def environment_size_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENVIRONMENT_SIZE_UNSPECIFIED', 'ENVIRONMENT_SIZE_SMALL', 'ENVIRONMENT_SIZE_MEDIUM', 'ENVIRONMENT_SIZE_LARGE']):
            raise ValueError("must be one of enum values ('ENVIRONMENT_SIZE_UNSPECIFIED', 'ENVIRONMENT_SIZE_SMALL', 'ENVIRONMENT_SIZE_MEDIUM', 'ENVIRONMENT_SIZE_LARGE')")
        return value

    @field_validator('resilience_mode')
    def resilience_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RESILIENCE_MODE_UNSPECIFIED', 'HIGH_RESILIENCE']):
            raise ValueError("must be one of enum values ('RESILIENCE_MODE_UNSPECIFIED', 'HIGH_RESILIENCE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnvironmentConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "airflow_byoid_uri",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_retention_config
        if self.data_retention_config:
            _dict['dataRetentionConfig'] = self.data_retention_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of database_config
        if self.database_config:
            _dict['databaseConfig'] = self.database_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of encryption_config
        if self.encryption_config:
            _dict['encryptionConfig'] = self.encryption_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maintenance_window
        if self.maintenance_window:
            _dict['maintenanceWindow'] = self.maintenance_window.to_dict()
        # override the default output from pydantic by calling `to_dict()` of master_authorized_networks_config
        if self.master_authorized_networks_config:
            _dict['masterAuthorizedNetworksConfig'] = self.master_authorized_networks_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of node_config
        if self.node_config:
            _dict['nodeConfig'] = self.node_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of private_environment_config
        if self.private_environment_config:
            _dict['privateEnvironmentConfig'] = self.private_environment_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recovery_config
        if self.recovery_config:
            _dict['recoveryConfig'] = self.recovery_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of software_config
        if self.software_config:
            _dict['softwareConfig'] = self.software_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of web_server_config
        if self.web_server_config:
            _dict['webServerConfig'] = self.web_server_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of web_server_network_access_control
        if self.web_server_network_access_control:
            _dict['webServerNetworkAccessControl'] = self.web_server_network_access_control.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workloads_config
        if self.workloads_config:
            _dict['workloadsConfig'] = self.workloads_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnvironmentConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "airflowByoidUri": obj.get("airflowByoidUri"),
            "airflowUri": obj.get("airflowUri"),
            "dagGcsPrefix": obj.get("dagGcsPrefix"),
            "dataRetentionConfig": DataRetentionConfig.from_dict(obj["dataRetentionConfig"]) if obj.get("dataRetentionConfig") is not None else None,
            "databaseConfig": DatabaseConfig.from_dict(obj["databaseConfig"]) if obj.get("databaseConfig") is not None else None,
            "encryptionConfig": EncryptionConfig.from_dict(obj["encryptionConfig"]) if obj.get("encryptionConfig") is not None else None,
            "environmentSize": obj.get("environmentSize"),
            "gkeCluster": obj.get("gkeCluster"),
            "maintenanceWindow": MaintenanceWindow.from_dict(obj["maintenanceWindow"]) if obj.get("maintenanceWindow") is not None else None,
            "masterAuthorizedNetworksConfig": MasterAuthorizedNetworksConfig.from_dict(obj["masterAuthorizedNetworksConfig"]) if obj.get("masterAuthorizedNetworksConfig") is not None else None,
            "nodeConfig": NodeConfig.from_dict(obj["nodeConfig"]) if obj.get("nodeConfig") is not None else None,
            "nodeCount": obj.get("nodeCount"),
            "privateEnvironmentConfig": PrivateEnvironmentConfig.from_dict(obj["privateEnvironmentConfig"]) if obj.get("privateEnvironmentConfig") is not None else None,
            "recoveryConfig": RecoveryConfig.from_dict(obj["recoveryConfig"]) if obj.get("recoveryConfig") is not None else None,
            "resilienceMode": obj.get("resilienceMode"),
            "softwareConfig": SoftwareConfig.from_dict(obj["softwareConfig"]) if obj.get("softwareConfig") is not None else None,
            "webServerConfig": WebServerConfig.from_dict(obj["webServerConfig"]) if obj.get("webServerConfig") is not None else None,
            "webServerNetworkAccessControl": WebServerNetworkAccessControl.from_dict(obj["webServerNetworkAccessControl"]) if obj.get("webServerNetworkAccessControl") is not None else None,
            "workloadsConfig": WorkloadsConfig.from_dict(obj["workloadsConfig"]) if obj.get("workloadsConfig") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Composer API

    Manages Apache Airflow environments on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.networking_config import NetworkingConfig
from openapi_client.models.private_cluster_config import PrivateClusterConfig
from typing import Optional, Set
from typing_extensions import Self

class PrivateEnvironmentConfig(BaseModel):
    """
    The configuration information for configuring a Private IP Cloud Composer environment.
    """ # noqa: E501
    cloud_composer_connection_subnetwork: Optional[StrictStr] = Field(default=None, description="Optional. When specified, the environment will use Private Service Connect instead of VPC peerings to connect to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP address from this subnetwork.", alias="cloudComposerConnectionSubnetwork")
    cloud_composer_network_ipv4_cidr_block: Optional[StrictStr] = Field(default=None, description="Optional. The CIDR block from which IP range for Cloud Composer Network in tenant project will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.", alias="cloudComposerNetworkIpv4CidrBlock")
    cloud_composer_network_ipv4_reserved_range: Optional[StrictStr] = Field(default=None, description="Output only. The IP range reserved for the tenant project's Cloud Composer network. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.", alias="cloudComposerNetworkIpv4ReservedRange")
    cloud_sql_ipv4_cidr_block: Optional[StrictStr] = Field(default=None, description="Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from `web_server_ipv4_cidr_block`.", alias="cloudSqlIpv4CidrBlock")
    enable_private_builds_only: Optional[StrictBool] = Field(default=None, description="Optional. If `true`, builds performed during operations that install Python packages have only private connectivity to Google services (including Artifact Registry) and VPC network (if either `NodeConfig.network` and `NodeConfig.subnetwork` fields or `NodeConfig.composer_network_attachment` field are specified). If `false`, the builds also have access to the internet. This field is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.", alias="enablePrivateBuildsOnly")
    enable_private_environment: Optional[StrictBool] = Field(default=None, description="Optional. If `true`, a Private IP Cloud Composer environment is created. If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set to true for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.", alias="enablePrivateEnvironment")
    enable_privately_used_public_ips: Optional[StrictBool] = Field(default=None, description="Optional. When enabled, IPs from public (non-RFC1918) ranges can be used for `IPAllocationPolicy.cluster_ipv4_cidr_block` and `IPAllocationPolicy.service_ipv4_cidr_block`.", alias="enablePrivatelyUsedPublicIps")
    networking_config: Optional[NetworkingConfig] = Field(default=None, alias="networkingConfig")
    private_cluster_config: Optional[PrivateClusterConfig] = Field(default=None, alias="privateClusterConfig")
    web_server_ipv4_cidr_block: Optional[StrictStr] = Field(default=None, description="Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from `private_cluster_config.master_ipv4_cidr_block` and `cloud_sql_ipv4_cidr_block`. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.", alias="webServerIpv4CidrBlock")
    web_server_ipv4_reserved_range: Optional[StrictStr] = Field(default=None, description="Output only. The IP range reserved for the tenant project's App Engine VMs. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.", alias="webServerIpv4ReservedRange")
    __properties: ClassVar[List[str]] = ["cloudComposerConnectionSubnetwork", "cloudComposerNetworkIpv4CidrBlock", "cloudComposerNetworkIpv4ReservedRange", "cloudSqlIpv4CidrBlock", "enablePrivateBuildsOnly", "enablePrivateEnvironment", "enablePrivatelyUsedPublicIps", "networkingConfig", "privateClusterConfig", "webServerIpv4CidrBlock", "webServerIpv4ReservedRange"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrivateEnvironmentConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "cloud_composer_network_ipv4_reserved_range",
            "web_server_ipv4_reserved_range",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of networking_config
        if self.networking_config:
            _dict['networkingConfig'] = self.networking_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of private_cluster_config
        if self.private_cluster_config:
            _dict['privateClusterConfig'] = self.private_cluster_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrivateEnvironmentConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloudComposerConnectionSubnetwork": obj.get("cloudComposerConnectionSubnetwork"),
            "cloudComposerNetworkIpv4CidrBlock": obj.get("cloudComposerNetworkIpv4CidrBlock"),
            "cloudComposerNetworkIpv4ReservedRange": obj.get("cloudComposerNetworkIpv4ReservedRange"),
            "cloudSqlIpv4CidrBlock": obj.get("cloudSqlIpv4CidrBlock"),
            "enablePrivateBuildsOnly": obj.get("enablePrivateBuildsOnly"),
            "enablePrivateEnvironment": obj.get("enablePrivateEnvironment"),
            "enablePrivatelyUsedPublicIps": obj.get("enablePrivatelyUsedPublicIps"),
            "networkingConfig": NetworkingConfig.from_dict(obj["networkingConfig"]) if obj.get("networkingConfig") is not None else None,
            "privateClusterConfig": PrivateClusterConfig.from_dict(obj["privateClusterConfig"]) if obj.get("privateClusterConfig") is not None else None,
            "webServerIpv4CidrBlock": obj.get("webServerIpv4CidrBlock"),
            "webServerIpv4ReservedRange": obj.get("webServerIpv4ReservedRange")
        })
        return _obj



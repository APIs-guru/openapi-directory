# coding: utf-8

"""
    Cloud Composer API

    Manages Apache Airflow environments on Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.private_environment_config import PrivateEnvironmentConfig

class TestPrivateEnvironmentConfig(unittest.TestCase):
    """PrivateEnvironmentConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PrivateEnvironmentConfig:
        """Test PrivateEnvironmentConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PrivateEnvironmentConfig`
        """
        model = PrivateEnvironmentConfig()
        if include_optional:
            return PrivateEnvironmentConfig(
                cloud_composer_connection_subnetwork = '',
                cloud_composer_network_ipv4_cidr_block = '',
                cloud_composer_network_ipv4_reserved_range = '',
                cloud_sql_ipv4_cidr_block = '',
                enable_private_builds_only = True,
                enable_private_environment = True,
                enable_privately_used_public_ips = True,
                networking_config = openapi_client.models.networking_config.NetworkingConfig(
                    connection_type = 'CONNECTION_TYPE_UNSPECIFIED', ),
                private_cluster_config = openapi_client.models.private_cluster_config.PrivateClusterConfig(
                    enable_private_endpoint = True, 
                    master_ipv4_cidr_block = '', 
                    master_ipv4_reserved_range = '', ),
                web_server_ipv4_cidr_block = '',
                web_server_ipv4_reserved_range = ''
            )
        else:
            return PrivateEnvironmentConfig(
        )
        """

    def testPrivateEnvironmentConfig(self):
        """Test PrivateEnvironmentConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

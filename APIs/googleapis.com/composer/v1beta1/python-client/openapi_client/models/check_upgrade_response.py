# coding: utf-8

"""
    Cloud Composer API

    Manages Apache Airflow environments on Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CheckUpgradeResponse(BaseModel):
    """
    Message containing information about the result of an upgrade check operation.
    """ # noqa: E501
    build_log_uri: Optional[StrictStr] = Field(default=None, description="Output only. Url for a docker build log of an upgraded image.", alias="buildLogUri")
    contains_pypi_modules_conflict: Optional[StrictStr] = Field(default=None, description="Output only. Whether build has succeeded or failed on modules conflicts.", alias="containsPypiModulesConflict")
    image_version: Optional[StrictStr] = Field(default=None, description="Composer image for which the build was happening.", alias="imageVersion")
    pypi_conflict_build_log_extract: Optional[StrictStr] = Field(default=None, description="Output only. Extract from a docker image build log containing information about pypi modules conflicts.", alias="pypiConflictBuildLogExtract")
    pypi_dependencies: Optional[Dict[str, StrictStr]] = Field(default=None, description="Pypi dependencies specified in the environment configuration, at the time when the build was triggered.", alias="pypiDependencies")
    __properties: ClassVar[List[str]] = ["buildLogUri", "containsPypiModulesConflict", "imageVersion", "pypiConflictBuildLogExtract", "pypiDependencies"]

    @field_validator('contains_pypi_modules_conflict')
    def contains_pypi_modules_conflict_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONFLICT_RESULT_UNSPECIFIED', 'CONFLICT', 'NO_CONFLICT']):
            raise ValueError("must be one of enum values ('CONFLICT_RESULT_UNSPECIFIED', 'CONFLICT', 'NO_CONFLICT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CheckUpgradeResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "build_log_uri",
            "contains_pypi_modules_conflict",
            "pypi_conflict_build_log_extract",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CheckUpgradeResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buildLogUri": obj.get("buildLogUri"),
            "containsPypiModulesConflict": obj.get("containsPypiModulesConflict"),
            "imageVersion": obj.get("imageVersion"),
            "pypiConflictBuildLogExtract": obj.get("pypiConflictBuildLogExtract"),
            "pypiDependencies": obj.get("pypiDependencies")
        })
        return _obj



# coding: utf-8

"""
    Cloud Composer API

    Manages Apache Airflow environments on Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dag_processor_resource import DagProcessorResource
from openapi_client.models.scheduler_resource import SchedulerResource
from openapi_client.models.triggerer_resource import TriggererResource
from openapi_client.models.web_server_resource import WebServerResource
from openapi_client.models.worker_resource import WorkerResource
from typing import Optional, Set
from typing_extensions import Self

class WorkloadsConfig(BaseModel):
    """
    The Kubernetes workloads configuration for GKE cluster associated with the Cloud Composer environment. Supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
    """ # noqa: E501
    dag_processor: Optional[DagProcessorResource] = Field(default=None, alias="dagProcessor")
    scheduler: Optional[SchedulerResource] = None
    triggerer: Optional[TriggererResource] = None
    web_server: Optional[WebServerResource] = Field(default=None, alias="webServer")
    worker: Optional[WorkerResource] = None
    __properties: ClassVar[List[str]] = ["dagProcessor", "scheduler", "triggerer", "webServer", "worker"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkloadsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dag_processor
        if self.dag_processor:
            _dict['dagProcessor'] = self.dag_processor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scheduler
        if self.scheduler:
            _dict['scheduler'] = self.scheduler.to_dict()
        # override the default output from pydantic by calling `to_dict()` of triggerer
        if self.triggerer:
            _dict['triggerer'] = self.triggerer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of web_server
        if self.web_server:
            _dict['webServer'] = self.web_server.to_dict()
        # override the default output from pydantic by calling `to_dict()` of worker
        if self.worker:
            _dict['worker'] = self.worker.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkloadsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dagProcessor": DagProcessorResource.from_dict(obj["dagProcessor"]) if obj.get("dagProcessor") is not None else None,
            "scheduler": SchedulerResource.from_dict(obj["scheduler"]) if obj.get("scheduler") is not None else None,
            "triggerer": TriggererResource.from_dict(obj["triggerer"]) if obj.get("triggerer") is not None else None,
            "webServer": WebServerResource.from_dict(obj["webServer"]) if obj.get("webServer") is not None else None,
            "worker": WorkerResource.from_dict(obj["worker"]) if obj.get("worker") is not None else None
        })
        return _obj



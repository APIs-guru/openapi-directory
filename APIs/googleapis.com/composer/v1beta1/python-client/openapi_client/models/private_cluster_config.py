# coding: utf-8

"""
    Cloud Composer API

    Manages Apache Airflow environments on Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PrivateClusterConfig(BaseModel):
    """
    Configuration options for the private GKE cluster in a Cloud Composer environment.
    """ # noqa: E501
    enable_private_endpoint: Optional[StrictBool] = Field(default=None, description="Optional. If `true`, access to the public endpoint of the GKE cluster is denied.", alias="enablePrivateEndpoint")
    master_ipv4_cidr_block: Optional[StrictStr] = Field(default=None, description="Optional. The CIDR block from which IPv4 range for GKE master will be reserved. If left blank, the default value of '172.16.0.0/23' is used.", alias="masterIpv4CidrBlock")
    master_ipv4_reserved_range: Optional[StrictStr] = Field(default=None, description="Output only. The IP range in CIDR notation to use for the hosted master network. This range is used for assigning internal IP addresses to the cluster master or set of masters and to the internal load balancer virtual IP. This range must not overlap with any other ranges in use within the cluster's network.", alias="masterIpv4ReservedRange")
    __properties: ClassVar[List[str]] = ["enablePrivateEndpoint", "masterIpv4CidrBlock", "masterIpv4ReservedRange"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrivateClusterConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "master_ipv4_reserved_range",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrivateClusterConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enablePrivateEndpoint": obj.get("enablePrivateEndpoint"),
            "masterIpv4CidrBlock": obj.get("masterIpv4CidrBlock"),
            "masterIpv4ReservedRange": obj.get("masterIpv4ReservedRange")
        })
        return _obj



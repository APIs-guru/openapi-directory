# coding: utf-8

"""
    Binary Authorization API

    The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AdmissionRule(BaseModel):
    """
    An admission rule specifies either that all container images used in a pod creation request must be attested to by one or more attestors, that all pod creations will be allowed, or that all pod creations will be denied. Images matching an admission allowlist pattern are exempted from admission rules and will never block a pod creation.
    """ # noqa: E501
    enforcement_mode: Optional[StrictStr] = Field(default=None, description="Required. The action when a pod creation is denied by the admission rule.", alias="enforcementMode")
    evaluation_mode: Optional[StrictStr] = Field(default=None, description="Required. How this admission rule will be evaluated.", alias="evaluationMode")
    require_attestations_by: Optional[List[StrictStr]] = Field(default=None, description="Optional. The resource names of the attestors that must attest to a container image, in the format `projects/*/attestors/*`. Each attestor must exist before a policy can reference it. To add an attestor to a policy the principal issuing the policy change request must be able to read the attestor resource. Note: this field must be non-empty when the evaluation_mode field specifies REQUIRE_ATTESTATION, otherwise it must be empty.", alias="requireAttestationsBy")
    __properties: ClassVar[List[str]] = ["enforcementMode", "evaluationMode", "requireAttestationsBy"]

    @field_validator('enforcement_mode')
    def enforcement_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENFORCEMENT_MODE_UNSPECIFIED', 'ENFORCED_BLOCK_AND_AUDIT_LOG', 'DRYRUN_AUDIT_LOG_ONLY']):
            raise ValueError("must be one of enum values ('ENFORCEMENT_MODE_UNSPECIFIED', 'ENFORCED_BLOCK_AND_AUDIT_LOG', 'DRYRUN_AUDIT_LOG_ONLY')")
        return value

    @field_validator('evaluation_mode')
    def evaluation_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EVALUATION_MODE_UNSPECIFIED', 'ALWAYS_ALLOW', 'REQUIRE_ATTESTATION', 'ALWAYS_DENY']):
            raise ValueError("must be one of enum values ('EVALUATION_MODE_UNSPECIFIED', 'ALWAYS_ALLOW', 'REQUIRE_ATTESTATION', 'ALWAYS_DENY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdmissionRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdmissionRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enforcementMode": obj.get("enforcementMode"),
            "evaluationMode": obj.get("evaluationMode"),
            "requireAttestationsBy": obj.get("requireAttestationsBy")
        })
        return _obj



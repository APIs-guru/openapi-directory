# coding: utf-8

"""
    Binary Authorization API

    The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.user_owned_drydock_note import UserOwnedDrydockNote

class TestUserOwnedDrydockNote(unittest.TestCase):
    """UserOwnedDrydockNote unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UserOwnedDrydockNote:
        """Test UserOwnedDrydockNote
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UserOwnedDrydockNote`
        """
        model = UserOwnedDrydockNote()
        if include_optional:
            return UserOwnedDrydockNote(
                delegation_service_account_email = '',
                note_reference = '',
                public_keys = [
                    openapi_client.models.attestor_public_key.AttestorPublicKey(
                        ascii_armored_pgp_public_key = '', 
                        comment = '', 
                        id = '', 
                        pkix_public_key = openapi_client.models.pkix_public_key.PkixPublicKey(
                            public_key_pem = '', 
                            signature_algorithm = 'SIGNATURE_ALGORITHM_UNSPECIFIED', ), )
                    ]
            )
        else:
            return UserOwnedDrydockNote(
        )
        """

    def testUserOwnedDrydockNote(self):
        """Test UserOwnedDrydockNote"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Binary Authorization API

    The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.policy import Policy

class TestPolicy(unittest.TestCase):
    """Policy unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Policy:
        """Test Policy
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Policy`
        """
        model = Policy()
        if include_optional:
            return Policy(
                admission_whitelist_patterns = [
                    openapi_client.models.admission_whitelist_pattern.AdmissionWhitelistPattern(
                        name_pattern = '', )
                    ],
                cluster_admission_rules = {
                    'key' : openapi_client.models.admission_rule.AdmissionRule(
                        enforcement_mode = 'ENFORCEMENT_MODE_UNSPECIFIED', 
                        evaluation_mode = 'EVALUATION_MODE_UNSPECIFIED', 
                        require_attestations_by = [
                            ''
                            ], )
                    },
                default_admission_rule = openapi_client.models.admission_rule.AdmissionRule(
                    enforcement_mode = 'ENFORCEMENT_MODE_UNSPECIFIED', 
                    evaluation_mode = 'EVALUATION_MODE_UNSPECIFIED', 
                    require_attestations_by = [
                        ''
                        ], ),
                description = '',
                etag = '',
                global_policy_evaluation_mode = 'GLOBAL_POLICY_EVALUATION_MODE_UNSPECIFIED',
                istio_service_identity_admission_rules = {
                    'key' : openapi_client.models.admission_rule.AdmissionRule(
                        enforcement_mode = 'ENFORCEMENT_MODE_UNSPECIFIED', 
                        evaluation_mode = 'EVALUATION_MODE_UNSPECIFIED', 
                        require_attestations_by = [
                            ''
                            ], )
                    },
                kubernetes_namespace_admission_rules = {
                    'key' : openapi_client.models.admission_rule.AdmissionRule(
                        enforcement_mode = 'ENFORCEMENT_MODE_UNSPECIFIED', 
                        evaluation_mode = 'EVALUATION_MODE_UNSPECIFIED', 
                        require_attestations_by = [
                            ''
                            ], )
                    },
                kubernetes_service_account_admission_rules = {
                    'key' : openapi_client.models.admission_rule.AdmissionRule(
                        enforcement_mode = 'ENFORCEMENT_MODE_UNSPECIFIED', 
                        evaluation_mode = 'EVALUATION_MODE_UNSPECIFIED', 
                        require_attestations_by = [
                            ''
                            ], )
                    },
                name = '',
                update_time = ''
            )
        else:
            return Policy(
        )
        """

    def testPolicy(self):
        """Test Policy"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

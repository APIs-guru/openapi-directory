# coding: utf-8

"""
    Binary Authorization API

    The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.image_result import ImageResult
from typing import Optional, Set
from typing_extensions import Self

class PodResult(BaseModel):
    """
    Result of evaluating the whole GKE policy for one Pod.
    """ # noqa: E501
    image_results: Optional[List[ImageResult]] = Field(default=None, description="Per-image details.", alias="imageResults")
    kubernetes_namespace: Optional[StrictStr] = Field(default=None, description="The Kubernetes namespace of the Pod.", alias="kubernetesNamespace")
    kubernetes_service_account: Optional[StrictStr] = Field(default=None, description="The Kubernetes service account of the Pod.", alias="kubernetesServiceAccount")
    pod_name: Optional[StrictStr] = Field(default=None, description="The name of the Pod.", alias="podName")
    verdict: Optional[StrictStr] = Field(default=None, description="The result of evaluating this Pod.")
    __properties: ClassVar[List[str]] = ["imageResults", "kubernetesNamespace", "kubernetesServiceAccount", "podName", "verdict"]

    @field_validator('verdict')
    def verdict_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['POD_VERDICT_UNSPECIFIED', 'CONFORMANT', 'NON_CONFORMANT', 'ERROR']):
            raise ValueError("must be one of enum values ('POD_VERDICT_UNSPECIFIED', 'CONFORMANT', 'NON_CONFORMANT', 'ERROR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PodResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in image_results (list)
        _items = []
        if self.image_results:
            for _item_image_results in self.image_results:
                if _item_image_results:
                    _items.append(_item_image_results.to_dict())
            _dict['imageResults'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PodResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "imageResults": [ImageResult.from_dict(_item) for _item in obj["imageResults"]] if obj.get("imageResults") is not None else None,
            "kubernetesNamespace": obj.get("kubernetesNamespace"),
            "kubernetesServiceAccount": obj.get("kubernetesServiceAccount"),
            "podName": obj.get("podName"),
            "verdict": obj.get("verdict")
        })
        return _obj



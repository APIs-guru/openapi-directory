# coding: utf-8

"""
    Binary Authorization API

    The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PkixPublicKey(BaseModel):
    """
    A public key in the PkixPublicKey [format](https://tools.ietf.org/html/rfc5280#section-4.1.2.7). Public keys of this type are typically textually encoded using the PEM format.
    """ # noqa: E501
    key_id: Optional[StrictStr] = Field(default=None, description="Optional. The ID of this public key. Signatures verified by Binary Authorization must include the ID of the public key that can be used to verify them, and that ID must match the contents of this field exactly. This may be explicitly provided by the caller, but it MUST be a valid RFC3986 URI. If `key_id` is left blank and this `PkixPublicKey` is not used in the context of a wrapper (see next paragraph), a default key ID will be computed based on the digest of the DER encoding of the public key. If this `PkixPublicKey` is used in the context of a wrapper that has its own notion of key ID (e.g. `AttestorPublicKey`), then this field can either: * Match that value exactly. * Or be left blank, in which case it behaves exactly as though it is equal to that wrapper value.", alias="keyId")
    public_key_pem: Optional[StrictStr] = Field(default=None, description="A PEM-encoded public key, as described in https://tools.ietf.org/html/rfc7468#section-13", alias="publicKeyPem")
    signature_algorithm: Optional[StrictStr] = Field(default=None, description="The signature algorithm used to verify a message against a signature using this key. These signature algorithm must match the structure and any object identifiers encoded in `public_key_pem` (i.e. this algorithm must match that of the public key).", alias="signatureAlgorithm")
    __properties: ClassVar[List[str]] = ["keyId", "publicKeyPem", "signatureAlgorithm"]

    @field_validator('signature_algorithm')
    def signature_algorithm_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SIGNATURE_ALGORITHM_UNSPECIFIED', 'RSA_PSS_2048_SHA256', 'RSA_SIGN_PSS_2048_SHA256', 'RSA_PSS_3072_SHA256', 'RSA_SIGN_PSS_3072_SHA256', 'RSA_PSS_4096_SHA256', 'RSA_SIGN_PSS_4096_SHA256', 'RSA_PSS_4096_SHA512', 'RSA_SIGN_PSS_4096_SHA512', 'RSA_SIGN_PKCS1_2048_SHA256', 'RSA_SIGN_PKCS1_3072_SHA256', 'RSA_SIGN_PKCS1_4096_SHA256', 'RSA_SIGN_PKCS1_4096_SHA512', 'ECDSA_P256_SHA256', 'EC_SIGN_P256_SHA256', 'ECDSA_P384_SHA384', 'EC_SIGN_P384_SHA384', 'ECDSA_P521_SHA512', 'EC_SIGN_P521_SHA512']):
            raise ValueError("must be one of enum values ('SIGNATURE_ALGORITHM_UNSPECIFIED', 'RSA_PSS_2048_SHA256', 'RSA_SIGN_PSS_2048_SHA256', 'RSA_PSS_3072_SHA256', 'RSA_SIGN_PSS_3072_SHA256', 'RSA_PSS_4096_SHA256', 'RSA_SIGN_PSS_4096_SHA256', 'RSA_PSS_4096_SHA512', 'RSA_SIGN_PSS_4096_SHA512', 'RSA_SIGN_PKCS1_2048_SHA256', 'RSA_SIGN_PKCS1_3072_SHA256', 'RSA_SIGN_PKCS1_4096_SHA256', 'RSA_SIGN_PKCS1_4096_SHA512', 'ECDSA_P256_SHA256', 'EC_SIGN_P256_SHA256', 'ECDSA_P384_SHA384', 'EC_SIGN_P384_SHA384', 'ECDSA_P521_SHA512', 'EC_SIGN_P521_SHA512')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PkixPublicKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PkixPublicKey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "keyId": obj.get("keyId"),
            "publicKeyPem": obj.get("publicKeyPem"),
            "signatureAlgorithm": obj.get("signatureAlgorithm")
        })
        return _obj



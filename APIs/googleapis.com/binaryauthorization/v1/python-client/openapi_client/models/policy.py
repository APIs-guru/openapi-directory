# coding: utf-8

"""
    Binary Authorization API

    The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.admission_rule import AdmissionRule
from openapi_client.models.admission_whitelist_pattern import AdmissionWhitelistPattern
from typing import Optional, Set
from typing_extensions import Self

class Policy(BaseModel):
    """
    A policy for container image binary authorization.
    """ # noqa: E501
    admission_whitelist_patterns: Optional[List[AdmissionWhitelistPattern]] = Field(default=None, description="Optional. Admission policy allowlisting. A matching admission request will always be permitted. This feature is typically used to exclude Google or third-party infrastructure images from Binary Authorization policies.", alias="admissionWhitelistPatterns")
    cluster_admission_rules: Optional[Dict[str, AdmissionRule]] = Field(default=None, description="Optional. Per-cluster admission rules. Cluster spec format: `location.clusterId`. There can be at most one admission rule per cluster spec. A `location` is either a compute zone (e.g. us-central1-a) or a region (e.g. us-central1). For `clusterId` syntax restrictions see https://cloud.google.com/container-engine/reference/rest/v1/projects.zones.clusters.", alias="clusterAdmissionRules")
    default_admission_rule: Optional[AdmissionRule] = Field(default=None, alias="defaultAdmissionRule")
    description: Optional[StrictStr] = Field(default=None, description="Optional. A descriptive comment.")
    etag: Optional[StrictStr] = Field(default=None, description="Optional. A checksum, returned by the server, that can be sent on update requests to ensure the policy has an up-to-date value before attempting to update it. See https://google.aip.dev/154.")
    global_policy_evaluation_mode: Optional[StrictStr] = Field(default=None, description="Optional. Controls the evaluation of a Google-maintained global admission policy for common system-level images. Images not covered by the global policy will be subject to the project admission policy. This setting has no effect when specified inside a global admission policy.", alias="globalPolicyEvaluationMode")
    istio_service_identity_admission_rules: Optional[Dict[str, AdmissionRule]] = Field(default=None, description="Optional. Per-istio-service-identity admission rules. Istio service identity spec format: `spiffe:///ns//sa/` or `/ns//sa/` e.g. `spiffe://example.com/ns/test-ns/sa/default`", alias="istioServiceIdentityAdmissionRules")
    kubernetes_namespace_admission_rules: Optional[Dict[str, AdmissionRule]] = Field(default=None, description="Optional. Per-kubernetes-namespace admission rules. K8s namespace spec format: `[a-z.-]+`, e.g. `some-namespace`", alias="kubernetesNamespaceAdmissionRules")
    kubernetes_service_account_admission_rules: Optional[Dict[str, AdmissionRule]] = Field(default=None, description="Optional. Per-kubernetes-service-account admission rules. Service account spec format: `namespace:serviceaccount`. e.g. `test-ns:default`", alias="kubernetesServiceAccountAdmissionRules")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name, in the format `projects/*/policy`. There is at most one policy per project.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the policy was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["admissionWhitelistPatterns", "clusterAdmissionRules", "defaultAdmissionRule", "description", "etag", "globalPolicyEvaluationMode", "istioServiceIdentityAdmissionRules", "kubernetesNamespaceAdmissionRules", "kubernetesServiceAccountAdmissionRules", "name", "updateTime"]

    @field_validator('global_policy_evaluation_mode')
    def global_policy_evaluation_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GLOBAL_POLICY_EVALUATION_MODE_UNSPECIFIED', 'ENABLE', 'DISABLE']):
            raise ValueError("must be one of enum values ('GLOBAL_POLICY_EVALUATION_MODE_UNSPECIFIED', 'ENABLE', 'DISABLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Policy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in admission_whitelist_patterns (list)
        _items = []
        if self.admission_whitelist_patterns:
            for _item_admission_whitelist_patterns in self.admission_whitelist_patterns:
                if _item_admission_whitelist_patterns:
                    _items.append(_item_admission_whitelist_patterns.to_dict())
            _dict['admissionWhitelistPatterns'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in cluster_admission_rules (dict)
        _field_dict = {}
        if self.cluster_admission_rules:
            for _key_cluster_admission_rules in self.cluster_admission_rules:
                if self.cluster_admission_rules[_key_cluster_admission_rules]:
                    _field_dict[_key_cluster_admission_rules] = self.cluster_admission_rules[_key_cluster_admission_rules].to_dict()
            _dict['clusterAdmissionRules'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of default_admission_rule
        if self.default_admission_rule:
            _dict['defaultAdmissionRule'] = self.default_admission_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in istio_service_identity_admission_rules (dict)
        _field_dict = {}
        if self.istio_service_identity_admission_rules:
            for _key_istio_service_identity_admission_rules in self.istio_service_identity_admission_rules:
                if self.istio_service_identity_admission_rules[_key_istio_service_identity_admission_rules]:
                    _field_dict[_key_istio_service_identity_admission_rules] = self.istio_service_identity_admission_rules[_key_istio_service_identity_admission_rules].to_dict()
            _dict['istioServiceIdentityAdmissionRules'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in kubernetes_namespace_admission_rules (dict)
        _field_dict = {}
        if self.kubernetes_namespace_admission_rules:
            for _key_kubernetes_namespace_admission_rules in self.kubernetes_namespace_admission_rules:
                if self.kubernetes_namespace_admission_rules[_key_kubernetes_namespace_admission_rules]:
                    _field_dict[_key_kubernetes_namespace_admission_rules] = self.kubernetes_namespace_admission_rules[_key_kubernetes_namespace_admission_rules].to_dict()
            _dict['kubernetesNamespaceAdmissionRules'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in kubernetes_service_account_admission_rules (dict)
        _field_dict = {}
        if self.kubernetes_service_account_admission_rules:
            for _key_kubernetes_service_account_admission_rules in self.kubernetes_service_account_admission_rules:
                if self.kubernetes_service_account_admission_rules[_key_kubernetes_service_account_admission_rules]:
                    _field_dict[_key_kubernetes_service_account_admission_rules] = self.kubernetes_service_account_admission_rules[_key_kubernetes_service_account_admission_rules].to_dict()
            _dict['kubernetesServiceAccountAdmissionRules'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Policy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "admissionWhitelistPatterns": [AdmissionWhitelistPattern.from_dict(_item) for _item in obj["admissionWhitelistPatterns"]] if obj.get("admissionWhitelistPatterns") is not None else None,
            "clusterAdmissionRules": dict(
                (_k, AdmissionRule.from_dict(_v))
                for _k, _v in obj["clusterAdmissionRules"].items()
            )
            if obj.get("clusterAdmissionRules") is not None
            else None,
            "defaultAdmissionRule": AdmissionRule.from_dict(obj["defaultAdmissionRule"]) if obj.get("defaultAdmissionRule") is not None else None,
            "description": obj.get("description"),
            "etag": obj.get("etag"),
            "globalPolicyEvaluationMode": obj.get("globalPolicyEvaluationMode"),
            "istioServiceIdentityAdmissionRules": dict(
                (_k, AdmissionRule.from_dict(_v))
                for _k, _v in obj["istioServiceIdentityAdmissionRules"].items()
            )
            if obj.get("istioServiceIdentityAdmissionRules") is not None
            else None,
            "kubernetesNamespaceAdmissionRules": dict(
                (_k, AdmissionRule.from_dict(_v))
                for _k, _v in obj["kubernetesNamespaceAdmissionRules"].items()
            )
            if obj.get("kubernetesNamespaceAdmissionRules") is not None
            else None,
            "kubernetesServiceAccountAdmissionRules": dict(
                (_k, AdmissionRule.from_dict(_v))
                for _k, _v in obj["kubernetesServiceAccountAdmissionRules"].items()
            )
            if obj.get("kubernetesServiceAccountAdmissionRules") is not None
            else None,
            "name": obj.get("name"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Binary Authorization API

    The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user_owned_grafeas_note import UserOwnedGrafeasNote
from typing import Optional, Set
from typing_extensions import Self

class Attestor(BaseModel):
    """
    An attestor that attests to container image artifacts. An existing attestor cannot be modified except where indicated.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Optional. A descriptive comment. This field may be updated. The field may be displayed in chooser dialogs.")
    etag: Optional[StrictStr] = Field(default=None, description="Optional. A checksum, returned by the server, that can be sent on update requests to ensure the attestor has an up-to-date value before attempting to update it. See https://google.aip.dev/154.")
    name: Optional[StrictStr] = Field(default=None, description="Required. The resource name, in the format: `projects/*/attestors/*`. This field may not be updated.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the attestor was last updated.", alias="updateTime")
    user_owned_grafeas_note: Optional[UserOwnedGrafeasNote] = Field(default=None, alias="userOwnedGrafeasNote")
    __properties: ClassVar[List[str]] = ["description", "etag", "name", "updateTime", "userOwnedGrafeasNote"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Attestor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user_owned_grafeas_note
        if self.user_owned_grafeas_note:
            _dict['userOwnedGrafeasNote'] = self.user_owned_grafeas_note.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Attestor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "etag": obj.get("etag"),
            "name": obj.get("name"),
            "updateTime": obj.get("updateTime"),
            "userOwnedGrafeasNote": UserOwnedGrafeasNote.from_dict(obj["userOwnedGrafeasNote"]) if obj.get("userOwnedGrafeasNote") is not None else None
        })
        return _obj



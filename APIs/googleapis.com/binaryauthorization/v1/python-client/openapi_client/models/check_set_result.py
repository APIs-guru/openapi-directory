# coding: utf-8

"""
    Binary Authorization API

    The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.allowlist_result import AllowlistResult
from openapi_client.models.check_results import CheckResults
from openapi_client.models.scope import Scope
from typing import Optional, Set
from typing_extensions import Self

class CheckSetResult(BaseModel):
    """
    Result of evaluating one check set.
    """ # noqa: E501
    allowlist_result: Optional[AllowlistResult] = Field(default=None, alias="allowlistResult")
    check_results: Optional[CheckResults] = Field(default=None, alias="checkResults")
    display_name: Optional[StrictStr] = Field(default=None, description="The name of the check set.", alias="displayName")
    explanation: Optional[StrictStr] = Field(default=None, description="Explanation of this check set result. Only populated if no checks were evaluated.")
    index: Optional[StrictStr] = Field(default=None, description="The index of the check set.")
    scope: Optional[Scope] = None
    __properties: ClassVar[List[str]] = ["allowlistResult", "checkResults", "displayName", "explanation", "index", "scope"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CheckSetResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of allowlist_result
        if self.allowlist_result:
            _dict['allowlistResult'] = self.allowlist_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of check_results
        if self.check_results:
            _dict['checkResults'] = self.check_results.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scope
        if self.scope:
            _dict['scope'] = self.scope.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CheckSetResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowlistResult": AllowlistResult.from_dict(obj["allowlistResult"]) if obj.get("allowlistResult") is not None else None,
            "checkResults": CheckResults.from_dict(obj["checkResults"]) if obj.get("checkResults") is not None else None,
            "displayName": obj.get("displayName"),
            "explanation": obj.get("explanation"),
            "index": obj.get("index"),
            "scope": Scope.from_dict(obj["scope"]) if obj.get("scope") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Binary Authorization API

    The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VulnerabilityCheck(BaseModel):
    """
    An image vulnerability check, which rejects images that violate the configured vulnerability rules.
    """ # noqa: E501
    allowed_cves: Optional[List[StrictStr]] = Field(default=None, description="Optional. A list of specific CVEs to ignore even if the vulnerability level violates `maximumUnfixableSeverity` or `maximumFixableSeverity`. CVEs are listed in the format of Container Analysis note id. For example: - CVE-2021-20305 - CVE-2020-10543 The CVEs are applicable regardless of note provider project, e.g., an entry of `CVE-2021-20305` will allow vulnerabilities with a note name of either `projects/goog-vulnz/notes/CVE-2021-20305` or `projects/CUSTOM-PROJECT/notes/CVE-2021-20305`.", alias="allowedCves")
    blocked_cves: Optional[List[StrictStr]] = Field(default=None, description="Optional. A list of specific CVEs to always raise warnings about even if the vulnerability level meets `maximumUnfixableSeverity` or `maximumFixableSeverity`. CVEs are listed in the format of Container Analysis note id. For example: - CVE-2021-20305 - CVE-2020-10543 The CVEs are applicable regardless of note provider project, e.g., an entry of `CVE-2021-20305` will block vulnerabilities with a note name of either `projects/goog-vulnz/notes/CVE-2021-20305` or `projects/CUSTOM-PROJECT/notes/CVE-2021-20305`.", alias="blockedCves")
    container_analysis_vulnerability_projects: Optional[List[StrictStr]] = Field(default=None, description="Optional. The projects where vulnerabilities are stored as Container Analysis Occurrences. Each project is expressed in the resource format of `projects/[PROJECT_ID]`, e.g., `projects/my-gcp-project`. An attempt will be made for each project to fetch vulnerabilities, and all valid vulnerabilities will be used to check against the vulnerability policy. If no valid scan is found in all projects configured here, an error will be returned for the check. Maximum number of `container_analysis_vulnerability_projects` allowed in each `VulnerabilityCheck` is 10.", alias="containerAnalysisVulnerabilityProjects")
    maximum_fixable_severity: Optional[StrictStr] = Field(default=None, description="Required. The threshold for severity for which a fix is currently available. This field is required and must be set.", alias="maximumFixableSeverity")
    maximum_unfixable_severity: Optional[StrictStr] = Field(default=None, description="Required. The threshold for severity for which a fix isn't currently available. This field is required and must be set.", alias="maximumUnfixableSeverity")
    __properties: ClassVar[List[str]] = ["allowedCves", "blockedCves", "containerAnalysisVulnerabilityProjects", "maximumFixableSeverity", "maximumUnfixableSeverity"]

    @field_validator('maximum_fixable_severity')
    def maximum_fixable_severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MAXIMUM_ALLOWED_SEVERITY_UNSPECIFIED', 'BLOCK_ALL', 'MINIMAL', 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL', 'ALLOW_ALL']):
            raise ValueError("must be one of enum values ('MAXIMUM_ALLOWED_SEVERITY_UNSPECIFIED', 'BLOCK_ALL', 'MINIMAL', 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL', 'ALLOW_ALL')")
        return value

    @field_validator('maximum_unfixable_severity')
    def maximum_unfixable_severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MAXIMUM_ALLOWED_SEVERITY_UNSPECIFIED', 'BLOCK_ALL', 'MINIMAL', 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL', 'ALLOW_ALL']):
            raise ValueError("must be one of enum values ('MAXIMUM_ALLOWED_SEVERITY_UNSPECIFIED', 'BLOCK_ALL', 'MINIMAL', 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL', 'ALLOW_ALL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VulnerabilityCheck from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VulnerabilityCheck from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedCves": obj.get("allowedCves"),
            "blockedCves": obj.get("blockedCves"),
            "containerAnalysisVulnerabilityProjects": obj.get("containerAnalysisVulnerabilityProjects"),
            "maximumFixableSeverity": obj.get("maximumFixableSeverity"),
            "maximumUnfixableSeverity": obj.get("maximumUnfixableSeverity")
        })
        return _obj



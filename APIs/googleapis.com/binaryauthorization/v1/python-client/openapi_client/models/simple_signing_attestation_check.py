# coding: utf-8

"""
    Binary Authorization API

    The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.attestation_authenticator import AttestationAuthenticator
from typing import Optional, Set
from typing_extensions import Self

class SimpleSigningAttestationCheck(BaseModel):
    """
    Require a signed [DSSE](https://github.com/secure-systems-lab/dsse) attestation with type SimpleSigning.
    """ # noqa: E501
    attestation_authenticators: Optional[List[AttestationAuthenticator]] = Field(default=None, description="Required. The authenticators required by this check to verify an attestation. Typically this is one or more PKIX public keys for signature verification. Only one authenticator needs to consider an attestation verified in order for an attestation to be considered fully authenticated. In otherwords, this list of authenticators is an \"OR\" of the authenticator results. At least one authenticator is required.", alias="attestationAuthenticators")
    container_analysis_attestation_projects: Optional[List[StrictStr]] = Field(default=None, description="Optional. The projects where attestations are stored as Container Analysis Occurrences, in the format `projects/[PROJECT_ID]`. Only one attestation needs to successfully verify an image for this check to pass, so a single verified attestation found in any of `container_analysis_attestation_projects` is sufficient for the check to pass. When fetching Occurrences from Container Analysis, only `AttestationOccurrence` kinds are considered. In the future, additional Occurrence kinds may be added to the query. Maximum number of `container_analysis_attestation_projects` allowed in each `SimpleSigningAttestationCheck` is 10.", alias="containerAnalysisAttestationProjects")
    __properties: ClassVar[List[str]] = ["attestationAuthenticators", "containerAnalysisAttestationProjects"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SimpleSigningAttestationCheck from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attestation_authenticators (list)
        _items = []
        if self.attestation_authenticators:
            for _item_attestation_authenticators in self.attestation_authenticators:
                if _item_attestation_authenticators:
                    _items.append(_item_attestation_authenticators.to_dict())
            _dict['attestationAuthenticators'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SimpleSigningAttestationCheck from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attestationAuthenticators": [AttestationAuthenticator.from_dict(_item) for _item in obj["attestationAuthenticators"]] if obj.get("attestationAuthenticators") is not None else None,
            "containerAnalysisAttestationProjects": obj.get("containerAnalysisAttestationProjects")
        })
        return _obj



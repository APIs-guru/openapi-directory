# coding: utf-8

"""
    Binary Authorization API

    The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.image_allowlist import ImageAllowlist
from openapi_client.models.image_freshness_check import ImageFreshnessCheck
from openapi_client.models.sigstore_signature_check import SigstoreSignatureCheck
from openapi_client.models.simple_signing_attestation_check import SimpleSigningAttestationCheck
from openapi_client.models.slsa_check import SlsaCheck
from openapi_client.models.trusted_directory_check import TrustedDirectoryCheck
from openapi_client.models.vulnerability_check import VulnerabilityCheck
from typing import Optional, Set
from typing_extensions import Self

class Check(BaseModel):
    """
    A single check to perform against a Pod. Checks are grouped into `CheckSet` objects, which are defined by the top-level policy.
    """ # noqa: E501
    always_deny: Optional[StrictBool] = Field(default=None, description="Optional. A special-case check that always denies. Note that this still only applies when the scope of the `CheckSet` applies and the image isn't exempted by an image allowlist. This check is primarily useful for testing, or to set the default behavior for all unmatched scopes to \"deny\".", alias="alwaysDeny")
    display_name: Optional[StrictStr] = Field(default=None, description="Optional. A user-provided name for this check. This field has no effect on the policy evaluation behavior except to improve readability of messages in evaluation results.", alias="displayName")
    image_allowlist: Optional[ImageAllowlist] = Field(default=None, alias="imageAllowlist")
    image_freshness_check: Optional[ImageFreshnessCheck] = Field(default=None, alias="imageFreshnessCheck")
    sigstore_signature_check: Optional[SigstoreSignatureCheck] = Field(default=None, alias="sigstoreSignatureCheck")
    simple_signing_attestation_check: Optional[SimpleSigningAttestationCheck] = Field(default=None, alias="simpleSigningAttestationCheck")
    slsa_check: Optional[SlsaCheck] = Field(default=None, alias="slsaCheck")
    trusted_directory_check: Optional[TrustedDirectoryCheck] = Field(default=None, alias="trustedDirectoryCheck")
    vulnerability_check: Optional[VulnerabilityCheck] = Field(default=None, alias="vulnerabilityCheck")
    __properties: ClassVar[List[str]] = ["alwaysDeny", "displayName", "imageAllowlist", "imageFreshnessCheck", "sigstoreSignatureCheck", "simpleSigningAttestationCheck", "slsaCheck", "trustedDirectoryCheck", "vulnerabilityCheck"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Check from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image_allowlist
        if self.image_allowlist:
            _dict['imageAllowlist'] = self.image_allowlist.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_freshness_check
        if self.image_freshness_check:
            _dict['imageFreshnessCheck'] = self.image_freshness_check.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sigstore_signature_check
        if self.sigstore_signature_check:
            _dict['sigstoreSignatureCheck'] = self.sigstore_signature_check.to_dict()
        # override the default output from pydantic by calling `to_dict()` of simple_signing_attestation_check
        if self.simple_signing_attestation_check:
            _dict['simpleSigningAttestationCheck'] = self.simple_signing_attestation_check.to_dict()
        # override the default output from pydantic by calling `to_dict()` of slsa_check
        if self.slsa_check:
            _dict['slsaCheck'] = self.slsa_check.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trusted_directory_check
        if self.trusted_directory_check:
            _dict['trustedDirectoryCheck'] = self.trusted_directory_check.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vulnerability_check
        if self.vulnerability_check:
            _dict['vulnerabilityCheck'] = self.vulnerability_check.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Check from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alwaysDeny": obj.get("alwaysDeny"),
            "displayName": obj.get("displayName"),
            "imageAllowlist": ImageAllowlist.from_dict(obj["imageAllowlist"]) if obj.get("imageAllowlist") is not None else None,
            "imageFreshnessCheck": ImageFreshnessCheck.from_dict(obj["imageFreshnessCheck"]) if obj.get("imageFreshnessCheck") is not None else None,
            "sigstoreSignatureCheck": SigstoreSignatureCheck.from_dict(obj["sigstoreSignatureCheck"]) if obj.get("sigstoreSignatureCheck") is not None else None,
            "simpleSigningAttestationCheck": SimpleSigningAttestationCheck.from_dict(obj["simpleSigningAttestationCheck"]) if obj.get("simpleSigningAttestationCheck") is not None else None,
            "slsaCheck": SlsaCheck.from_dict(obj["slsaCheck"]) if obj.get("slsaCheck") is not None else None,
            "trustedDirectoryCheck": TrustedDirectoryCheck.from_dict(obj["trustedDirectoryCheck"]) if obj.get("trustedDirectoryCheck") is not None else None,
            "vulnerabilityCheck": VulnerabilityCheck.from_dict(obj["vulnerabilityCheck"]) if obj.get("vulnerabilityCheck") is not None else None
        })
        return _obj



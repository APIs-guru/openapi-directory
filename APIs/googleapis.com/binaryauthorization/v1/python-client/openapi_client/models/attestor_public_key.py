# coding: utf-8

"""
    Binary Authorization API

    The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.pkix_public_key import PkixPublicKey
from typing import Optional, Set
from typing_extensions import Self

class AttestorPublicKey(BaseModel):
    """
    An attestor public key that will be used to verify attestations signed by this attestor.
    """ # noqa: E501
    ascii_armored_pgp_public_key: Optional[StrictStr] = Field(default=None, description="ASCII-armored representation of a PGP public key, as the entire output by the command `gpg --export --armor foo@example.com` (either LF or CRLF line endings). When using this field, `id` should be left blank. The Binary Authorization API handlers will calculate the ID and fill it in automatically. Binary Authorization computes this ID as the OpenPGP RFC4880 V4 fingerprint, represented as upper-case hex. If `id` is provided by the caller, it will be overwritten by the API-calculated ID.", alias="asciiArmoredPgpPublicKey")
    comment: Optional[StrictStr] = Field(default=None, description="Optional. A descriptive comment. This field may be updated.")
    id: Optional[StrictStr] = Field(default=None, description="The ID of this public key. Signatures verified by Binary Authorization must include the ID of the public key that can be used to verify them, and that ID must match the contents of this field exactly. Additional restrictions on this field can be imposed based on which public key type is encapsulated. See the documentation on `public_key` cases below for details.")
    pkix_public_key: Optional[PkixPublicKey] = Field(default=None, alias="pkixPublicKey")
    __properties: ClassVar[List[str]] = ["asciiArmoredPgpPublicKey", "comment", "id", "pkixPublicKey"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AttestorPublicKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pkix_public_key
        if self.pkix_public_key:
            _dict['pkixPublicKey'] = self.pkix_public_key.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AttestorPublicKey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asciiArmoredPgpPublicKey": obj.get("asciiArmoredPgpPublicKey"),
            "comment": obj.get("comment"),
            "id": obj.get("id"),
            "pkixPublicKey": PkixPublicKey.from_dict(obj["pkixPublicKey"]) if obj.get("pkixPublicKey") is not None else None
        })
        return _obj



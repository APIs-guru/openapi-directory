# coding: utf-8

"""
    Binary Authorization API

    The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.check_set import CheckSet

class TestCheckSet(unittest.TestCase):
    """CheckSet unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CheckSet:
        """Test CheckSet
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CheckSet`
        """
        model = CheckSet()
        if include_optional:
            return CheckSet(
                checks = [
                    openapi_client.models.check.Check(
                        always_deny = True, 
                        display_name = '', 
                        image_allowlist = openapi_client.models.image_allowlist.ImageAllowlist(
                            allow_pattern = [
                                ''
                                ], ), 
                        image_freshness_check = openapi_client.models.image_freshness_check.ImageFreshnessCheck(
                            max_upload_age_days = 56, ), 
                        sigstore_signature_check = openapi_client.models.sigstore_signature_check.SigstoreSignatureCheck(
                            sigstore_authorities = [
                                openapi_client.models.sigstore_authority.SigstoreAuthority(
                                    display_name = '', 
                                    public_key_set = openapi_client.models.sigstore_public_key_set.SigstorePublicKeySet(
                                        public_keys = [
                                            openapi_client.models.sigstore_public_key.SigstorePublicKey(
                                                public_key_pem = '', )
                                            ], ), )
                                ], ), 
                        simple_signing_attestation_check = openapi_client.models.simple_signing_attestation_check.SimpleSigningAttestationCheck(
                            attestation_authenticators = [
                                openapi_client.models.attestation_authenticator.AttestationAuthenticator(
                                    display_name = '', 
                                    pkix_public_key_set = openapi_client.models.pkix_public_key_set.PkixPublicKeySet(
                                        pkix_public_keys = [
                                            openapi_client.models.pkix_public_key.PkixPublicKey(
                                                key_id = '', 
                                                public_key_pem = '', 
                                                signature_algorithm = 'SIGNATURE_ALGORITHM_UNSPECIFIED', )
                                            ], ), )
                                ], 
                            container_analysis_attestation_projects = [
                                ''
                                ], ), 
                        slsa_check = openapi_client.models.slsa_check.SlsaCheck(
                            rules = [
                                openapi_client.models.verification_rule.VerificationRule(
                                    attestation_source = openapi_client.models.attestation_source.AttestationSource(), 
                                    config_based_build_required = True, 
                                    trusted_builder = 'BUILDER_UNSPECIFIED', 
                                    trusted_source_repo_patterns = [
                                        ''
                                        ], )
                                ], ), 
                        trusted_directory_check = openapi_client.models.trusted_directory_check.TrustedDirectoryCheck(
                            trusted_dir_patterns = [
                                ''
                                ], ), 
                        vulnerability_check = openapi_client.models.vulnerability_check.VulnerabilityCheck(
                            allowed_cves = [
                                ''
                                ], 
                            blocked_cves = [
                                ''
                                ], 
                            container_analysis_vulnerability_projects = [
                                ''
                                ], 
                            maximum_fixable_severity = 'MAXIMUM_ALLOWED_SEVERITY_UNSPECIFIED', 
                            maximum_unfixable_severity = 'MAXIMUM_ALLOWED_SEVERITY_UNSPECIFIED', ), )
                    ],
                display_name = '',
                image_allowlist = openapi_client.models.image_allowlist.ImageAllowlist(
                    allow_pattern = [
                        ''
                        ], ),
                scope = openapi_client.models.scope.Scope(
                    kubernetes_namespace = '', 
                    kubernetes_service_account = '', )
            )
        else:
            return CheckSet(
        )
        """

    def testCheckSet(self):
        """Test CheckSet"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Security Token Service API

    The Security Token Service exchanges Google or third-party credentials for a short-lived access token to Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_identity_sts_v1beta_access_boundary_rule import GoogleIdentityStsV1betaAccessBoundaryRule
from typing import Optional, Set
from typing_extensions import Self

class GoogleIdentityStsV1betaAccessBoundary(BaseModel):
    """
    An access boundary defines the upper bound of what a principal may access. It includes a list of access boundary rules that each defines the resource that may be allowed as well as permissions that may be used on those resources.
    """ # noqa: E501
    access_boundary_rules: Optional[List[GoogleIdentityStsV1betaAccessBoundaryRule]] = Field(default=None, description="A list of access boundary rules which defines the upper bound of the permission a principal may carry. If multiple rules are specified, the effective access boundary is the union of all the access boundary rules attached. One access boundary can contain at most 10 rules.", alias="accessBoundaryRules")
    __properties: ClassVar[List[str]] = ["accessBoundaryRules"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleIdentityStsV1betaAccessBoundary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in access_boundary_rules (list)
        _items = []
        if self.access_boundary_rules:
            for _item_access_boundary_rules in self.access_boundary_rules:
                if _item_access_boundary_rules:
                    _items.append(_item_access_boundary_rules.to_dict())
            _dict['accessBoundaryRules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleIdentityStsV1betaAccessBoundary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessBoundaryRules": [GoogleIdentityStsV1betaAccessBoundaryRule.from_dict(_item) for _item in obj["accessBoundaryRules"]] if obj.get("accessBoundaryRules") is not None else None
        })
        return _obj



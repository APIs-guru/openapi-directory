# coding: utf-8

"""
    Security Token Service API

    The Security Token Service exchanges Google or third-party credentials for a short-lived access token to Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleIdentityStsV1IntrospectTokenResponse(BaseModel):
    """
    Response message for IntrospectToken.
    """ # noqa: E501
    active: Optional[StrictBool] = Field(default=None, description="A boolean value that indicates whether the provided access token is currently active.")
    client_id: Optional[StrictStr] = Field(default=None, description="The client identifier for the OAuth 2.0 client that requested the provided token.")
    exp: Optional[StrictStr] = Field(default=None, description="The expiration timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token will expire.")
    iat: Optional[StrictStr] = Field(default=None, description="The issued timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token was originally issued.")
    iss: Optional[StrictStr] = Field(default=None, description="The issuer of the provided token.")
    scope: Optional[StrictStr] = Field(default=None, description="A list of scopes associated with the provided token.")
    sub: Optional[StrictStr] = Field(default=None, description="The unique user ID associated with the provided token. For Google Accounts, this value is based on the Google Account's user ID. For federated identities, this value is based on the identity pool ID and the value of the mapped `google.subject` attribute.")
    username: Optional[StrictStr] = Field(default=None, description="The human-readable identifier for the token principal subject. For example, if the provided token is associated with a workload identity pool, this field contains a value in the following format: `principal://iam.googleapis.com/projects//locations/global/workloadIdentityPools//subject/`. If the provided token is associated with a workforce pool, this field contains a value in the following format: `principal://iam.googleapis.com/locations/global/workforcePools//subject/`.")
    __properties: ClassVar[List[str]] = ["active", "client_id", "exp", "iat", "iss", "scope", "sub", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleIdentityStsV1IntrospectTokenResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleIdentityStsV1IntrospectTokenResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "client_id": obj.get("client_id"),
            "exp": obj.get("exp"),
            "iat": obj.get("iat"),
            "iss": obj.get("iss"),
            "scope": obj.get("scope"),
            "sub": obj.get("sub"),
            "username": obj.get("username")
        })
        return _obj



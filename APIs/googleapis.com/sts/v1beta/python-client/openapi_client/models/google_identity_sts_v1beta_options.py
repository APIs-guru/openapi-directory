# coding: utf-8

"""
    Security Token Service API

    The Security Token Service exchanges Google or third-party credentials for a short-lived access token to Google Cloud resources.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_identity_sts_v1beta_access_boundary import GoogleIdentityStsV1betaAccessBoundary
from typing import Optional, Set
from typing_extensions import Self

class GoogleIdentityStsV1betaOptions(BaseModel):
    """
    An `Options` object configures features that the Security Token Service supports, but that are not supported by standard OAuth 2.0 token exchange endpoints, as defined in https://tools.ietf.org/html/rfc8693.
    """ # noqa: E501
    access_boundary: Optional[GoogleIdentityStsV1betaAccessBoundary] = Field(default=None, alias="accessBoundary")
    audiences: Optional[List[StrictStr]] = Field(default=None, description="The intended audience(s) of the credential. The audience value(s) should be the name(s) of services intended to receive the credential. Example: `[\"https://pubsub.googleapis.com/\", \"https://storage.googleapis.com/\"]`. A maximum of 5 audiences can be included. For each provided audience, the maximum length is 262 characters.")
    user_project: Optional[StrictStr] = Field(default=None, description="A Google project used for quota and billing purposes when the credential is used to access Google APIs. The provided project overrides the project bound to the credential. The value must be a project number or a project ID. Example: `my-sample-project-191923`. The maximum length is 32 characters.", alias="userProject")
    __properties: ClassVar[List[str]] = ["accessBoundary", "audiences", "userProject"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleIdentityStsV1betaOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access_boundary
        if self.access_boundary:
            _dict['accessBoundary'] = self.access_boundary.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleIdentityStsV1betaOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessBoundary": GoogleIdentityStsV1betaAccessBoundary.from_dict(obj["accessBoundary"]) if obj.get("accessBoundary") is not None else None,
            "audiences": obj.get("audiences"),
            "userProject": obj.get("userProject")
        })
        return _obj



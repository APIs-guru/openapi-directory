# coding: utf-8

"""
    Cloud Tool Results API

    API to publish and access results from developer tools.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.outcome import Outcome
from openapi_client.models.specification import Specification
from openapi_client.models.timestamp import Timestamp
from typing import Optional, Set
from typing_extensions import Self

class Execution(BaseModel):
    """
    An Execution represents a collection of Steps. For instance, it could represent: - a mobile test executed across a range of device configurations - a jenkins job with a build step followed by a test step The maximum size of an execution message is 1 MiB. An Execution can be updated until its state is set to COMPLETE at which point it becomes immutable.
    """ # noqa: E501
    completion_time: Optional[Timestamp] = Field(default=None, alias="completionTime")
    creation_time: Optional[Timestamp] = Field(default=None, alias="creationTime")
    dimension_definitions: Optional[List[Dict[str, Any]]] = Field(default=None, description="The dimensions along which different steps in this execution may vary. This must remain fixed over the life of the execution. Returns INVALID_ARGUMENT if this field is set in an update request. Returns INVALID_ARGUMENT if the same name occurs in more than one dimension_definition. Returns INVALID_ARGUMENT if the size of the list is over 100. - In response: present if set by create - In create request: optional - In update request: never set", alias="dimensionDefinitions")
    execution_id: Optional[StrictStr] = Field(default=None, description="A unique identifier within a History for this Execution. Returns INVALID_ARGUMENT if this field is set or overwritten by the caller. - In response always set - In create/update request: never set", alias="executionId")
    outcome: Optional[Outcome] = None
    specification: Optional[Specification] = None
    state: Optional[StrictStr] = Field(default=None, description="The initial state is IN_PROGRESS. The only legal state transitions is from IN_PROGRESS to COMPLETE. A PRECONDITION_FAILED will be returned if an invalid transition is requested. The state can only be set to COMPLETE once. A FAILED_PRECONDITION will be returned if the state is set to COMPLETE multiple times. If the state is set to COMPLETE, all the in-progress steps within the execution will be set as COMPLETE. If the outcome of the step is not set, the outcome will be set to INCONCLUSIVE. - In response always set - In create/update request: optional")
    test_execution_matrix_id: Optional[StrictStr] = Field(default=None, description="TestExecution Matrix ID that the TestExecutionService uses. - In response: present if set by create - In create: optional - In update: never set", alias="testExecutionMatrixId")
    __properties: ClassVar[List[str]] = ["completionTime", "creationTime", "dimensionDefinitions", "executionId", "outcome", "specification", "state", "testExecutionMatrixId"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unknownState', 'pending', 'inProgress', 'complete']):
            raise ValueError("must be one of enum values ('unknownState', 'pending', 'inProgress', 'complete')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Execution from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of completion_time
        if self.completion_time:
            _dict['completionTime'] = self.completion_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creation_time
        if self.creation_time:
            _dict['creationTime'] = self.creation_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of outcome
        if self.outcome:
            _dict['outcome'] = self.outcome.to_dict()
        # override the default output from pydantic by calling `to_dict()` of specification
        if self.specification:
            _dict['specification'] = self.specification.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Execution from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "completionTime": Timestamp.from_dict(obj["completionTime"]) if obj.get("completionTime") is not None else None,
            "creationTime": Timestamp.from_dict(obj["creationTime"]) if obj.get("creationTime") is not None else None,
            "dimensionDefinitions": obj.get("dimensionDefinitions"),
            "executionId": obj.get("executionId"),
            "outcome": Outcome.from_dict(obj["outcome"]) if obj.get("outcome") is not None else None,
            "specification": Specification.from_dict(obj["specification"]) if obj.get("specification") is not None else None,
            "state": obj.get("state"),
            "testExecutionMatrixId": obj.get("testExecutionMatrixId")
        })
        return _obj



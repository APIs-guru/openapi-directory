# coding: utf-8

"""
    Cloud Tool Results API

    API to publish and access results from developer tools.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.primary_step import PrimaryStep
from typing import Optional, Set
from typing_extensions import Self

class MultiStep(BaseModel):
    """
    Details when multiple steps are run with the same configuration as a group.
    """ # noqa: E501
    multistep_number: Optional[StrictInt] = Field(default=None, description="Unique int given to each step. Ranges from 0(inclusive) to total number of steps(exclusive). The primary step is 0.", alias="multistepNumber")
    primary_step: Optional[PrimaryStep] = Field(default=None, alias="primaryStep")
    primary_step_id: Optional[StrictStr] = Field(default=None, description="Step Id of the primary (original) step, which might be this step.", alias="primaryStepId")
    __properties: ClassVar[List[str]] = ["multistepNumber", "primaryStep", "primaryStepId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MultiStep from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of primary_step
        if self.primary_step:
            _dict['primaryStep'] = self.primary_step.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MultiStep from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "multistepNumber": obj.get("multistepNumber"),
            "primaryStep": PrimaryStep.from_dict(obj["primaryStep"]) if obj.get("primaryStep") is not None else None,
            "primaryStepId": obj.get("primaryStepId")
        })
        return _obj



# coding: utf-8

"""
    Cloud Tool Results API

    API to publish and access results from developer tools.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.duration import Duration
from openapi_client.models.multi_step import MultiStep
from openapi_client.models.outcome import Outcome
from openapi_client.models.step_dimension_value_entry import StepDimensionValueEntry
from openapi_client.models.step_labels_entry import StepLabelsEntry
from openapi_client.models.test_execution_step import TestExecutionStep
from openapi_client.models.timestamp import Timestamp
from openapi_client.models.tool_execution_step import ToolExecutionStep
from typing import Optional, Set
from typing_extensions import Self

class Step(BaseModel):
    """
    A Step represents a single operation performed as part of Execution. A step can be used to represent the execution of a tool ( for example a test runner execution or an execution of a compiler). Steps can overlap (for instance two steps might have the same start time if some operations are done in parallel). Here is an example, let's consider that we have a continuous build is executing a test runner for each iteration. The workflow would look like: - user creates a Execution with id 1 - user creates a TestExecutionStep with id 100 for Execution 1 - user update TestExecutionStep with id 100 to add a raw xml log + the service parses the xml logs and returns a TestExecutionStep with updated TestResult(s). - user update the status of TestExecutionStep with id 100 to COMPLETE A Step can be updated until its state is set to COMPLETE at which points it becomes immutable.
    """ # noqa: E501
    completion_time: Optional[Timestamp] = Field(default=None, alias="completionTime")
    creation_time: Optional[Timestamp] = Field(default=None, alias="creationTime")
    description: Optional[StrictStr] = Field(default=None, description="A description of this tool For example: mvn clean package -D skipTests=true - In response: present if set by create/update request - In create/update request: optional")
    device_usage_duration: Optional[Duration] = Field(default=None, alias="deviceUsageDuration")
    dimension_value: Optional[List[StepDimensionValueEntry]] = Field(default=None, description="If the execution containing this step has any dimension_definition set, then this field allows the child to specify the values of the dimensions. The keys must exactly match the dimension_definition of the execution. For example, if the execution has `dimension_definition = ['attempt', 'device']` then a step must define values for those dimensions, eg. `dimension_value = ['attempt': '1', 'device': 'Nexus 6']` If a step does not participate in one dimension of the matrix, the value for that dimension should be empty string. For example, if one of the tests is executed by a runner which does not support retries, the step could have `dimension_value = ['attempt': '', 'device': 'Nexus 6']` If the step does not participate in any dimensions of the matrix, it may leave dimension_value unset. A PRECONDITION_FAILED will be returned if any of the keys do not exist in the dimension_definition of the execution. A PRECONDITION_FAILED will be returned if another step in this execution already has the same name and dimension_value, but differs on other data fields, for example, step field is different. A PRECONDITION_FAILED will be returned if dimension_value is set, and there is a dimension_definition in the execution which is not specified as one of the keys. - In response: present if set by create - In create request: optional - In update request: never set", alias="dimensionValue")
    has_images: Optional[StrictBool] = Field(default=None, description="Whether any of the outputs of this step are images whose thumbnails can be fetched with ListThumbnails. - In response: always set - In create/update request: never set", alias="hasImages")
    labels: Optional[List[StepLabelsEntry]] = Field(default=None, description="Arbitrary user-supplied key/value pairs that are associated with the step. Users are responsible for managing the key namespace such that keys don't accidentally collide. An INVALID_ARGUMENT will be returned if the number of labels exceeds 100 or if the length of any of the keys or values exceeds 100 characters. - In response: always set - In create request: optional - In update request: optional; any new key/value pair will be added to the map, and any new value for an existing key will update that key's value")
    multi_step: Optional[MultiStep] = Field(default=None, alias="multiStep")
    name: Optional[StrictStr] = Field(default=None, description="A short human-readable name to display in the UI. Maximum of 100 characters. For example: Clean build A PRECONDITION_FAILED will be returned upon creating a new step if it shares its name and dimension_value with an existing step. If two steps represent a similar action, but have different dimension values, they should share the same name. For instance, if the same set of tests is run on two different platforms, the two steps should have the same name. - In response: always set - In create request: always set - In update request: never set")
    outcome: Optional[Outcome] = None
    run_duration: Optional[Duration] = Field(default=None, alias="runDuration")
    state: Optional[StrictStr] = Field(default=None, description="The initial state is IN_PROGRESS. The only legal state transitions are * IN_PROGRESS -> COMPLETE A PRECONDITION_FAILED will be returned if an invalid transition is requested. It is valid to create Step with a state set to COMPLETE. The state can only be set to COMPLETE once. A PRECONDITION_FAILED will be returned if the state is set to COMPLETE multiple times. - In response: always set - In create/update request: optional")
    step_id: Optional[StrictStr] = Field(default=None, description="A unique identifier within a Execution for this Step. Returns INVALID_ARGUMENT if this field is set or overwritten by the caller. - In response: always set - In create/update request: never set", alias="stepId")
    test_execution_step: Optional[TestExecutionStep] = Field(default=None, alias="testExecutionStep")
    tool_execution_step: Optional[ToolExecutionStep] = Field(default=None, alias="toolExecutionStep")
    __properties: ClassVar[List[str]] = ["completionTime", "creationTime", "description", "deviceUsageDuration", "dimensionValue", "hasImages", "labels", "multiStep", "name", "outcome", "runDuration", "state", "stepId", "testExecutionStep", "toolExecutionStep"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unknownState', 'pending', 'inProgress', 'complete']):
            raise ValueError("must be one of enum values ('unknownState', 'pending', 'inProgress', 'complete')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Step from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of completion_time
        if self.completion_time:
            _dict['completionTime'] = self.completion_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creation_time
        if self.creation_time:
            _dict['creationTime'] = self.creation_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of device_usage_duration
        if self.device_usage_duration:
            _dict['deviceUsageDuration'] = self.device_usage_duration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in dimension_value (list)
        _items = []
        if self.dimension_value:
            for _item_dimension_value in self.dimension_value:
                if _item_dimension_value:
                    _items.append(_item_dimension_value.to_dict())
            _dict['dimensionValue'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item_labels in self.labels:
                if _item_labels:
                    _items.append(_item_labels.to_dict())
            _dict['labels'] = _items
        # override the default output from pydantic by calling `to_dict()` of multi_step
        if self.multi_step:
            _dict['multiStep'] = self.multi_step.to_dict()
        # override the default output from pydantic by calling `to_dict()` of outcome
        if self.outcome:
            _dict['outcome'] = self.outcome.to_dict()
        # override the default output from pydantic by calling `to_dict()` of run_duration
        if self.run_duration:
            _dict['runDuration'] = self.run_duration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of test_execution_step
        if self.test_execution_step:
            _dict['testExecutionStep'] = self.test_execution_step.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tool_execution_step
        if self.tool_execution_step:
            _dict['toolExecutionStep'] = self.tool_execution_step.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Step from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "completionTime": Timestamp.from_dict(obj["completionTime"]) if obj.get("completionTime") is not None else None,
            "creationTime": Timestamp.from_dict(obj["creationTime"]) if obj.get("creationTime") is not None else None,
            "description": obj.get("description"),
            "deviceUsageDuration": Duration.from_dict(obj["deviceUsageDuration"]) if obj.get("deviceUsageDuration") is not None else None,
            "dimensionValue": [StepDimensionValueEntry.from_dict(_item) for _item in obj["dimensionValue"]] if obj.get("dimensionValue") is not None else None,
            "hasImages": obj.get("hasImages"),
            "labels": [StepLabelsEntry.from_dict(_item) for _item in obj["labels"]] if obj.get("labels") is not None else None,
            "multiStep": MultiStep.from_dict(obj["multiStep"]) if obj.get("multiStep") is not None else None,
            "name": obj.get("name"),
            "outcome": Outcome.from_dict(obj["outcome"]) if obj.get("outcome") is not None else None,
            "runDuration": Duration.from_dict(obj["runDuration"]) if obj.get("runDuration") is not None else None,
            "state": obj.get("state"),
            "stepId": obj.get("stepId"),
            "testExecutionStep": TestExecutionStep.from_dict(obj["testExecutionStep"]) if obj.get("testExecutionStep") is not None else None,
            "toolExecutionStep": ToolExecutionStep.from_dict(obj["toolExecutionStep"]) if obj.get("toolExecutionStep") is not None else None
        })
        return _obj



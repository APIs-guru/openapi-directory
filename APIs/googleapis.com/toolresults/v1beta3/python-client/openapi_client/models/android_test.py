# coding: utf-8

"""
    Cloud Tool Results API

    API to publish and access results from developer tools.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.android_app_info import AndroidAppInfo
from openapi_client.models.android_instrumentation_test import AndroidInstrumentationTest
from openapi_client.models.android_robo_test import AndroidRoboTest
from openapi_client.models.duration import Duration
from typing import Optional, Set
from typing_extensions import Self

class AndroidTest(BaseModel):
    """
    An Android mobile test specification.
    """ # noqa: E501
    android_app_info: Optional[AndroidAppInfo] = Field(default=None, alias="androidAppInfo")
    android_instrumentation_test: Optional[AndroidInstrumentationTest] = Field(default=None, alias="androidInstrumentationTest")
    android_robo_test: Optional[AndroidRoboTest] = Field(default=None, alias="androidRoboTest")
    android_test_loop: Optional[Dict[str, Any]] = Field(default=None, description="Test Loops are tests that can be launched by the app itself, determining when to run by listening for an intent.", alias="androidTestLoop")
    test_timeout: Optional[Duration] = Field(default=None, alias="testTimeout")
    __properties: ClassVar[List[str]] = ["androidAppInfo", "androidInstrumentationTest", "androidRoboTest", "androidTestLoop", "testTimeout"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AndroidTest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of android_app_info
        if self.android_app_info:
            _dict['androidAppInfo'] = self.android_app_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of android_instrumentation_test
        if self.android_instrumentation_test:
            _dict['androidInstrumentationTest'] = self.android_instrumentation_test.to_dict()
        # override the default output from pydantic by calling `to_dict()` of android_robo_test
        if self.android_robo_test:
            _dict['androidRoboTest'] = self.android_robo_test.to_dict()
        # override the default output from pydantic by calling `to_dict()` of test_timeout
        if self.test_timeout:
            _dict['testTimeout'] = self.test_timeout.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AndroidTest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "androidAppInfo": AndroidAppInfo.from_dict(obj["androidAppInfo"]) if obj.get("androidAppInfo") is not None else None,
            "androidInstrumentationTest": AndroidInstrumentationTest.from_dict(obj["androidInstrumentationTest"]) if obj.get("androidInstrumentationTest") is not None else None,
            "androidRoboTest": AndroidRoboTest.from_dict(obj["androidRoboTest"]) if obj.get("androidRoboTest") is not None else None,
            "androidTestLoop": obj.get("androidTestLoop"),
            "testTimeout": Duration.from_dict(obj["testTimeout"]) if obj.get("testTimeout") is not None else None
        })
        return _obj



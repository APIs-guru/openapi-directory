# coding: utf-8

"""
    Cloud Tool Results API

    API to publish and access results from developer tools.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.duration import Duration
from openapi_client.models.file_reference import FileReference
from typing import Optional, Set
from typing_extensions import Self

class TestSuiteOverview(BaseModel):
    """
    A summary of a test suite result either parsed from XML or uploaded directly by a user. Note: the API related comments are for StepService only. This message is also being used in ExecutionService in a read only mode for the corresponding step.
    """ # noqa: E501
    elapsed_time: Optional[Duration] = Field(default=None, alias="elapsedTime")
    error_count: Optional[StrictInt] = Field(default=None, description="Number of test cases in error, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never", alias="errorCount")
    failure_count: Optional[StrictInt] = Field(default=None, description="Number of failed test cases, typically set by the service by parsing the xml_source. May also be set by the user. - In create/response: always set - In update request: never", alias="failureCount")
    flaky_count: Optional[StrictInt] = Field(default=None, description="Number of flaky test cases, set by the service by rolling up flaky test attempts. Present only for rollup test suite overview at environment level. A step cannot have flaky test cases.", alias="flakyCount")
    name: Optional[StrictStr] = Field(default=None, description="The name of the test suite. - In create/response: always set - In update request: never")
    skipped_count: Optional[StrictInt] = Field(default=None, description="Number of test cases not run, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never", alias="skippedCount")
    total_count: Optional[StrictInt] = Field(default=None, description="Number of test cases, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never", alias="totalCount")
    xml_source: Optional[FileReference] = Field(default=None, alias="xmlSource")
    __properties: ClassVar[List[str]] = ["elapsedTime", "errorCount", "failureCount", "flakyCount", "name", "skippedCount", "totalCount", "xmlSource"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestSuiteOverview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of elapsed_time
        if self.elapsed_time:
            _dict['elapsedTime'] = self.elapsed_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of xml_source
        if self.xml_source:
            _dict['xmlSource'] = self.xml_source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestSuiteOverview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "elapsedTime": Duration.from_dict(obj["elapsedTime"]) if obj.get("elapsedTime") is not None else None,
            "errorCount": obj.get("errorCount"),
            "failureCount": obj.get("failureCount"),
            "flakyCount": obj.get("flakyCount"),
            "name": obj.get("name"),
            "skippedCount": obj.get("skippedCount"),
            "totalCount": obj.get("totalCount"),
            "xmlSource": FileReference.from_dict(obj["xmlSource"]) if obj.get("xmlSource") is not None else None
        })
        return _obj



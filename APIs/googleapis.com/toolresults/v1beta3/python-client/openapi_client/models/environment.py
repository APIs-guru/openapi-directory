# coding: utf-8

"""
    Cloud Tool Results API

    API to publish and access results from developer tools.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.environment_dimension_value_entry import EnvironmentDimensionValueEntry
from openapi_client.models.merged_result import MergedResult
from openapi_client.models.results_storage import ResultsStorage
from openapi_client.models.shard_summary import ShardSummary
from openapi_client.models.timestamp import Timestamp
from typing import Optional, Set
from typing_extensions import Self

class Environment(BaseModel):
    """
    An Environment represents the set of test runs (Steps) from the parent Execution that are configured with the same set of dimensions (Model, Version, Locale, and Orientation). Multiple such runs occur particularly because of features like sharding (splitting up a test suite to run in parallel across devices) and reruns (running a test multiple times to check for different outcomes).
    """ # noqa: E501
    completion_time: Optional[Timestamp] = Field(default=None, alias="completionTime")
    creation_time: Optional[Timestamp] = Field(default=None, alias="creationTime")
    dimension_value: Optional[List[EnvironmentDimensionValueEntry]] = Field(default=None, description="Dimension values describing the environment. Dimension values always consist of \"Model\", \"Version\", \"Locale\", and \"Orientation\". - In response: always set - In create request: always set - In update request: never set", alias="dimensionValue")
    display_name: Optional[StrictStr] = Field(default=None, description="A short human-readable name to display in the UI. Maximum of 100 characters. For example: Nexus 5, API 27.", alias="displayName")
    environment_id: Optional[StrictStr] = Field(default=None, description="Output only. An Environment id.", alias="environmentId")
    environment_result: Optional[MergedResult] = Field(default=None, alias="environmentResult")
    execution_id: Optional[StrictStr] = Field(default=None, description="Output only. An Execution id.", alias="executionId")
    history_id: Optional[StrictStr] = Field(default=None, description="Output only. A History id.", alias="historyId")
    project_id: Optional[StrictStr] = Field(default=None, description="Output only. A Project id.", alias="projectId")
    results_storage: Optional[ResultsStorage] = Field(default=None, alias="resultsStorage")
    shard_summaries: Optional[List[ShardSummary]] = Field(default=None, description="Output only. Summaries of shards. Only one shard will present unless sharding feature is enabled in TestExecutionService.", alias="shardSummaries")
    __properties: ClassVar[List[str]] = ["completionTime", "creationTime", "dimensionValue", "displayName", "environmentId", "environmentResult", "executionId", "historyId", "projectId", "resultsStorage", "shardSummaries"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Environment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of completion_time
        if self.completion_time:
            _dict['completionTime'] = self.completion_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creation_time
        if self.creation_time:
            _dict['creationTime'] = self.creation_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in dimension_value (list)
        _items = []
        if self.dimension_value:
            for _item_dimension_value in self.dimension_value:
                if _item_dimension_value:
                    _items.append(_item_dimension_value.to_dict())
            _dict['dimensionValue'] = _items
        # override the default output from pydantic by calling `to_dict()` of environment_result
        if self.environment_result:
            _dict['environmentResult'] = self.environment_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of results_storage
        if self.results_storage:
            _dict['resultsStorage'] = self.results_storage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shard_summaries (list)
        _items = []
        if self.shard_summaries:
            for _item_shard_summaries in self.shard_summaries:
                if _item_shard_summaries:
                    _items.append(_item_shard_summaries.to_dict())
            _dict['shardSummaries'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Environment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "completionTime": Timestamp.from_dict(obj["completionTime"]) if obj.get("completionTime") is not None else None,
            "creationTime": Timestamp.from_dict(obj["creationTime"]) if obj.get("creationTime") is not None else None,
            "dimensionValue": [EnvironmentDimensionValueEntry.from_dict(_item) for _item in obj["dimensionValue"]] if obj.get("dimensionValue") is not None else None,
            "displayName": obj.get("displayName"),
            "environmentId": obj.get("environmentId"),
            "environmentResult": MergedResult.from_dict(obj["environmentResult"]) if obj.get("environmentResult") is not None else None,
            "executionId": obj.get("executionId"),
            "historyId": obj.get("historyId"),
            "projectId": obj.get("projectId"),
            "resultsStorage": ResultsStorage.from_dict(obj["resultsStorage"]) if obj.get("resultsStorage") is not None else None,
            "shardSummaries": [ShardSummary.from_dict(_item) for _item in obj["shardSummaries"]] if obj.get("shardSummaries") is not None else None
        })
        return _obj



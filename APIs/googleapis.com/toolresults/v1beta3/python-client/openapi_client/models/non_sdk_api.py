# coding: utf-8

"""
    Cloud Tool Results API

    API to publish and access results from developer tools.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.non_sdk_api_insight import NonSdkApiInsight
from typing import Optional, Set
from typing_extensions import Self

class NonSdkApi(BaseModel):
    """
    A non-sdk API and examples of it being called along with other metadata See https://developer.android.com/distribute/best-practices/develop/restrictions-non-sdk-interfaces
    """ # noqa: E501
    api_signature: Optional[StrictStr] = Field(default=None, description="The signature of the Non-SDK API", alias="apiSignature")
    example_stack_traces: Optional[List[StrictStr]] = Field(default=None, description="Example stack traces of this API being called.", alias="exampleStackTraces")
    insights: Optional[List[NonSdkApiInsight]] = Field(default=None, description="Optional debugging insights for non-SDK API violations.")
    invocation_count: Optional[StrictInt] = Field(default=None, description="The total number of times this API was observed to have been called.", alias="invocationCount")
    list: Optional[StrictStr] = Field(default=None, description="Which list this API appears on")
    __properties: ClassVar[List[str]] = ["apiSignature", "exampleStackTraces", "insights", "invocationCount", "list"]

    @field_validator('list')
    def list_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE', 'WHITE', 'BLACK', 'GREY', 'GREY_MAX_O', 'GREY_MAX_P', 'GREY_MAX_Q', 'GREY_MAX_R']):
            raise ValueError("must be one of enum values ('NONE', 'WHITE', 'BLACK', 'GREY', 'GREY_MAX_O', 'GREY_MAX_P', 'GREY_MAX_Q', 'GREY_MAX_R')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NonSdkApi from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in insights (list)
        _items = []
        if self.insights:
            for _item_insights in self.insights:
                if _item_insights:
                    _items.append(_item_insights.to_dict())
            _dict['insights'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NonSdkApi from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiSignature": obj.get("apiSignature"),
            "exampleStackTraces": obj.get("exampleStackTraces"),
            "insights": [NonSdkApiInsight.from_dict(_item) for _item in obj["insights"]] if obj.get("insights") is not None else None,
            "invocationCount": obj.get("invocationCount"),
            "list": obj.get("list")
        })
        return _obj



# coding: utf-8

"""
    Cloud Tool Results API

    API to publish and access results from developer tools.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.duration import Duration
from openapi_client.models.stack_trace import StackTrace
from openapi_client.models.test_case_reference import TestCaseReference
from openapi_client.models.timestamp import Timestamp
from openapi_client.models.tool_output_reference import ToolOutputReference
from typing import Optional, Set
from typing_extensions import Self

class TestCase(BaseModel):
    """
    TestCase
    """ # noqa: E501
    elapsed_time: Optional[Duration] = Field(default=None, alias="elapsedTime")
    end_time: Optional[Timestamp] = Field(default=None, alias="endTime")
    skipped_message: Optional[StrictStr] = Field(default=None, description="Why the test case was skipped. Present only for skipped test case", alias="skippedMessage")
    stack_traces: Optional[List[StackTrace]] = Field(default=None, description="The stack trace details if the test case failed or encountered an error. The maximum size of the stack traces is 100KiB, beyond which the stack track will be truncated. Zero if the test case passed.", alias="stackTraces")
    start_time: Optional[Timestamp] = Field(default=None, alias="startTime")
    status: Optional[StrictStr] = Field(default=None, description="The status of the test case. Required.")
    test_case_id: Optional[StrictStr] = Field(default=None, description="A unique identifier within a Step for this Test Case.", alias="testCaseId")
    test_case_reference: Optional[TestCaseReference] = Field(default=None, alias="testCaseReference")
    tool_outputs: Optional[List[ToolOutputReference]] = Field(default=None, description="References to opaque files of any format output by the tool execution. @OutputOnly", alias="toolOutputs")
    __properties: ClassVar[List[str]] = ["elapsedTime", "endTime", "skippedMessage", "stackTraces", "startTime", "status", "testCaseId", "testCaseReference", "toolOutputs"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'error', 'skipped', 'flaky']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'error', 'skipped', 'flaky')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestCase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of elapsed_time
        if self.elapsed_time:
            _dict['elapsedTime'] = self.elapsed_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of end_time
        if self.end_time:
            _dict['endTime'] = self.end_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in stack_traces (list)
        _items = []
        if self.stack_traces:
            for _item_stack_traces in self.stack_traces:
                if _item_stack_traces:
                    _items.append(_item_stack_traces.to_dict())
            _dict['stackTraces'] = _items
        # override the default output from pydantic by calling `to_dict()` of start_time
        if self.start_time:
            _dict['startTime'] = self.start_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of test_case_reference
        if self.test_case_reference:
            _dict['testCaseReference'] = self.test_case_reference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tool_outputs (list)
        _items = []
        if self.tool_outputs:
            for _item_tool_outputs in self.tool_outputs:
                if _item_tool_outputs:
                    _items.append(_item_tool_outputs.to_dict())
            _dict['toolOutputs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestCase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "elapsedTime": Duration.from_dict(obj["elapsedTime"]) if obj.get("elapsedTime") is not None else None,
            "endTime": Timestamp.from_dict(obj["endTime"]) if obj.get("endTime") is not None else None,
            "skippedMessage": obj.get("skippedMessage"),
            "stackTraces": [StackTrace.from_dict(_item) for _item in obj["stackTraces"]] if obj.get("stackTraces") is not None else None,
            "startTime": Timestamp.from_dict(obj["startTime"]) if obj.get("startTime") is not None else None,
            "status": obj.get("status"),
            "testCaseId": obj.get("testCaseId"),
            "testCaseReference": TestCaseReference.from_dict(obj["testCaseReference"]) if obj.get("testCaseReference") is not None else None,
            "toolOutputs": [ToolOutputReference.from_dict(_item) for _item in obj["toolOutputs"]] if obj.get("toolOutputs") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Tool Results API

    API to publish and access results from developer tools.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.any import Any
from openapi_client.models.stack_trace import StackTrace
from typing import Optional, Set
from typing_extensions import Self

class TestIssue(BaseModel):
    """
    An issue detected occurring during a test execution.
    """ # noqa: E501
    category: Optional[StrictStr] = Field(default=None, description="Category of issue. Required.")
    error_message: Optional[StrictStr] = Field(default=None, description="A brief human-readable message describing the issue. Required.", alias="errorMessage")
    severity: Optional[StrictStr] = Field(default=None, description="Severity of issue. Required.")
    stack_trace: Optional[StackTrace] = Field(default=None, alias="stackTrace")
    type: Optional[StrictStr] = Field(default=None, description="Type of issue. Required.")
    warning: Optional[Any] = None
    __properties: ClassVar[List[str]] = ["category", "errorMessage", "severity", "stackTrace", "type", "warning"]

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unspecifiedCategory', 'common', 'robo']):
            raise ValueError("must be one of enum values ('unspecifiedCategory', 'common', 'robo')")
        return value

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unspecifiedSeverity', 'info', 'suggestion', 'warning', 'severe']):
            raise ValueError("must be one of enum values ('unspecifiedSeverity', 'info', 'suggestion', 'warning', 'severe')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unspecifiedType', 'fatalException', 'nativeCrash', 'anr', 'unusedRoboDirective', 'compatibleWithOrchestrator', 'launcherActivityNotFound', 'startActivityNotFound', 'incompleteRoboScriptExecution', 'completeRoboScriptExecution', 'failedToInstall', 'availableDeepLinks', 'nonSdkApiUsageViolation', 'nonSdkApiUsageReport', 'encounteredNonAndroidUiWidgetScreen', 'encounteredLoginScreen', 'performedGoogleLogin', 'iosException', 'iosCrash', 'performedMonkeyActions', 'usedRoboDirective', 'usedRoboIgnoreDirective', 'insufficientCoverage', 'inAppPurchases', 'crashDialogError', 'uiElementsTooDeep', 'blankScreen', 'overlappingUiElements', 'unityException', 'deviceOutOfMemory', 'logcatCollectionError', 'detectedAppSplashScreen', 'assetIssue']):
            raise ValueError("must be one of enum values ('unspecifiedType', 'fatalException', 'nativeCrash', 'anr', 'unusedRoboDirective', 'compatibleWithOrchestrator', 'launcherActivityNotFound', 'startActivityNotFound', 'incompleteRoboScriptExecution', 'completeRoboScriptExecution', 'failedToInstall', 'availableDeepLinks', 'nonSdkApiUsageViolation', 'nonSdkApiUsageReport', 'encounteredNonAndroidUiWidgetScreen', 'encounteredLoginScreen', 'performedGoogleLogin', 'iosException', 'iosCrash', 'performedMonkeyActions', 'usedRoboDirective', 'usedRoboIgnoreDirective', 'insufficientCoverage', 'inAppPurchases', 'crashDialogError', 'uiElementsTooDeep', 'blankScreen', 'overlappingUiElements', 'unityException', 'deviceOutOfMemory', 'logcatCollectionError', 'detectedAppSplashScreen', 'assetIssue')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestIssue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of stack_trace
        if self.stack_trace:
            _dict['stackTrace'] = self.stack_trace.to_dict()
        # override the default output from pydantic by calling `to_dict()` of warning
        if self.warning:
            _dict['warning'] = self.warning.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestIssue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": obj.get("category"),
            "errorMessage": obj.get("errorMessage"),
            "severity": obj.get("severity"),
            "stackTrace": StackTrace.from_dict(obj["stackTrace"]) if obj.get("stackTrace") is not None else None,
            "type": obj.get("type"),
            "warning": Any.from_dict(obj["warning"]) if obj.get("warning") is not None else None
        })
        return _obj



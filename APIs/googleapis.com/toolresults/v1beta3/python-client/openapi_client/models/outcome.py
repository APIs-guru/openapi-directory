# coding: utf-8

"""
    Cloud Tool Results API

    API to publish and access results from developer tools.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.failure_detail import FailureDetail
from openapi_client.models.inconclusive_detail import InconclusiveDetail
from openapi_client.models.skipped_detail import SkippedDetail
from openapi_client.models.success_detail import SuccessDetail
from typing import Optional, Set
from typing_extensions import Self

class Outcome(BaseModel):
    """
    Interprets a result so that humans and machines can act on it.
    """ # noqa: E501
    failure_detail: Optional[FailureDetail] = Field(default=None, alias="failureDetail")
    inconclusive_detail: Optional[InconclusiveDetail] = Field(default=None, alias="inconclusiveDetail")
    skipped_detail: Optional[SkippedDetail] = Field(default=None, alias="skippedDetail")
    success_detail: Optional[SuccessDetail] = Field(default=None, alias="successDetail")
    summary: Optional[StrictStr] = Field(default=None, description="The simplest way to interpret a result. Required")
    __properties: ClassVar[List[str]] = ["failureDetail", "inconclusiveDetail", "skippedDetail", "successDetail", "summary"]

    @field_validator('summary')
    def summary_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unset', 'success', 'failure', 'inconclusive', 'skipped', 'flaky']):
            raise ValueError("must be one of enum values ('unset', 'success', 'failure', 'inconclusive', 'skipped', 'flaky')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Outcome from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of failure_detail
        if self.failure_detail:
            _dict['failureDetail'] = self.failure_detail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inconclusive_detail
        if self.inconclusive_detail:
            _dict['inconclusiveDetail'] = self.inconclusive_detail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of skipped_detail
        if self.skipped_detail:
            _dict['skippedDetail'] = self.skipped_detail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of success_detail
        if self.success_detail:
            _dict['successDetail'] = self.success_detail.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Outcome from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "failureDetail": FailureDetail.from_dict(obj["failureDetail"]) if obj.get("failureDetail") is not None else None,
            "inconclusiveDetail": InconclusiveDetail.from_dict(obj["inconclusiveDetail"]) if obj.get("inconclusiveDetail") is not None else None,
            "skippedDetail": SkippedDetail.from_dict(obj["skippedDetail"]) if obj.get("skippedDetail") is not None else None,
            "successDetail": SuccessDetail.from_dict(obj["successDetail"]) if obj.get("successDetail") is not None else None,
            "summary": obj.get("summary")
        })
        return _obj



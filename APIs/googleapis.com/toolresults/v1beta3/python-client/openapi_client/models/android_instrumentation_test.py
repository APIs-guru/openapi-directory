# coding: utf-8

"""
    Cloud Tool Results API

    API to publish and access results from developer tools.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AndroidInstrumentationTest(BaseModel):
    """
    A test of an Android application that can control an Android component independently of its normal lifecycle. See for more information on types of Android tests.
    """ # noqa: E501
    test_package_id: Optional[StrictStr] = Field(default=None, description="The java package for the test to be executed. Required", alias="testPackageId")
    test_runner_class: Optional[StrictStr] = Field(default=None, description="The InstrumentationTestRunner class. Required", alias="testRunnerClass")
    test_targets: Optional[List[StrictStr]] = Field(default=None, description="Each target must be fully qualified with the package name or class name, in one of these formats: - \"package package_name\" - \"class package_name.class_name\" - \"class package_name.class_name#method_name\" If empty, all targets in the module will be run.", alias="testTargets")
    use_orchestrator: Optional[StrictBool] = Field(default=None, description="The flag indicates whether Android Test Orchestrator will be used to run test or not.", alias="useOrchestrator")
    __properties: ClassVar[List[str]] = ["testPackageId", "testRunnerClass", "testTargets", "useOrchestrator"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AndroidInstrumentationTest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AndroidInstrumentationTest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "testPackageId": obj.get("testPackageId"),
            "testRunnerClass": obj.get("testRunnerClass"),
            "testTargets": obj.get("testTargets"),
            "useOrchestrator": obj.get("useOrchestrator")
        })
        return _obj



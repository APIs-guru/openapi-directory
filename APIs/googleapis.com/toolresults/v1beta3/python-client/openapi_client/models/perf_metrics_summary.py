# coding: utf-8

"""
    Cloud Tool Results API

    API to publish and access results from developer tools.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_start_time import AppStartTime
from openapi_client.models.graphics_stats import GraphicsStats
from openapi_client.models.perf_environment import PerfEnvironment
from typing import Optional, Set
from typing_extensions import Self

class PerfMetricsSummary(BaseModel):
    """
    A summary of perf metrics collected and performance environment info
    """ # noqa: E501
    app_start_time: Optional[AppStartTime] = Field(default=None, alias="appStartTime")
    execution_id: Optional[StrictStr] = Field(default=None, description="A tool results execution ID. @OutputOnly", alias="executionId")
    graphics_stats: Optional[GraphicsStats] = Field(default=None, alias="graphicsStats")
    history_id: Optional[StrictStr] = Field(default=None, description="A tool results history ID. @OutputOnly", alias="historyId")
    perf_environment: Optional[PerfEnvironment] = Field(default=None, alias="perfEnvironment")
    perf_metrics: Optional[List[StrictStr]] = Field(default=None, description="Set of resource collected", alias="perfMetrics")
    project_id: Optional[StrictStr] = Field(default=None, description="The cloud project @OutputOnly", alias="projectId")
    step_id: Optional[StrictStr] = Field(default=None, description="A tool results step ID. @OutputOnly", alias="stepId")
    __properties: ClassVar[List[str]] = ["appStartTime", "executionId", "graphicsStats", "historyId", "perfEnvironment", "perfMetrics", "projectId", "stepId"]

    @field_validator('perf_metrics')
    def perf_metrics_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['perfMetricTypeUnspecified', 'memory', 'cpu', 'network', 'graphics']):
                raise ValueError("each list item must be one of ('perfMetricTypeUnspecified', 'memory', 'cpu', 'network', 'graphics')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PerfMetricsSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app_start_time
        if self.app_start_time:
            _dict['appStartTime'] = self.app_start_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of graphics_stats
        if self.graphics_stats:
            _dict['graphicsStats'] = self.graphics_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of perf_environment
        if self.perf_environment:
            _dict['perfEnvironment'] = self.perf_environment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PerfMetricsSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appStartTime": AppStartTime.from_dict(obj["appStartTime"]) if obj.get("appStartTime") is not None else None,
            "executionId": obj.get("executionId"),
            "graphicsStats": GraphicsStats.from_dict(obj["graphicsStats"]) if obj.get("graphicsStats") is not None else None,
            "historyId": obj.get("historyId"),
            "perfEnvironment": PerfEnvironment.from_dict(obj["perfEnvironment"]) if obj.get("perfEnvironment") is not None else None,
            "perfMetrics": obj.get("perfMetrics"),
            "projectId": obj.get("projectId"),
            "stepId": obj.get("stepId")
        })
        return _obj



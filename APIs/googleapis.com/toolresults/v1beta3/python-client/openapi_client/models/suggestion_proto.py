# coding: utf-8

"""
    Cloud Tool Results API

    API to publish and access results from developer tools.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.region_proto import RegionProto
from openapi_client.models.safe_html_proto import SafeHtmlProto
from typing import Optional, Set
from typing_extensions import Self

class SuggestionProto(BaseModel):
    """
    SuggestionProto
    """ # noqa: E501
    help_url: Optional[StrictStr] = Field(default=None, description="Reference to a help center article concerning this type of suggestion. Always set.", alias="helpUrl")
    long_message: Optional[SafeHtmlProto] = Field(default=None, alias="longMessage")
    priority: Optional[StrictStr] = Field(default=None, description="Relative importance of a suggestion. Always set.")
    pseudo_resource_id: Optional[StrictStr] = Field(default=None, description="A somewhat human readable identifier of the source view, if it does not have a resource_name. This is a path within the accessibility hierarchy, an element with resource name; similar to an XPath.", alias="pseudoResourceId")
    region: Optional[RegionProto] = None
    resource_name: Optional[StrictStr] = Field(default=None, description="Reference to a view element, identified by its resource name, if it has one.", alias="resourceName")
    screen_id: Optional[StrictStr] = Field(default=None, description="ID of the screen for the suggestion. It is used for getting the corresponding screenshot path. For example, screen_id \"1\" corresponds to \"1.png\" file in GCS. Always set.", alias="screenId")
    secondary_priority: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Relative importance of a suggestion as compared with other suggestions that have the same priority and category. This is a meaningless value that can be used to order suggestions that are in the same category and have the same priority. The larger values have higher priority (i.e., are more important). Optional.", alias="secondaryPriority")
    short_message: Optional[SafeHtmlProto] = Field(default=None, alias="shortMessage")
    title: Optional[StrictStr] = Field(default=None, description="General title for the suggestion, in the user's language, without markup. Always set.")
    __properties: ClassVar[List[str]] = ["helpUrl", "longMessage", "priority", "pseudoResourceId", "region", "resourceName", "screenId", "secondaryPriority", "shortMessage", "title"]

    @field_validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unknownPriority', 'error', 'warning', 'info']):
            raise ValueError("must be one of enum values ('unknownPriority', 'error', 'warning', 'info')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SuggestionProto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of long_message
        if self.long_message:
            _dict['longMessage'] = self.long_message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of region
        if self.region:
            _dict['region'] = self.region.to_dict()
        # override the default output from pydantic by calling `to_dict()` of short_message
        if self.short_message:
            _dict['shortMessage'] = self.short_message.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SuggestionProto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "helpUrl": obj.get("helpUrl"),
            "longMessage": SafeHtmlProto.from_dict(obj["longMessage"]) if obj.get("longMessage") is not None else None,
            "priority": obj.get("priority"),
            "pseudoResourceId": obj.get("pseudoResourceId"),
            "region": RegionProto.from_dict(obj["region"]) if obj.get("region") is not None else None,
            "resourceName": obj.get("resourceName"),
            "screenId": obj.get("screenId"),
            "secondaryPriority": obj.get("secondaryPriority"),
            "shortMessage": SafeHtmlProto.from_dict(obj["shortMessage"]) if obj.get("shortMessage") is not None else None,
            "title": obj.get("title")
        })
        return _obj



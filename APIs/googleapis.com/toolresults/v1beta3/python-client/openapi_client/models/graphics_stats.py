# coding: utf-8

"""
    Cloud Tool Results API

    API to publish and access results from developer tools.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.graphics_stats_bucket import GraphicsStatsBucket
from typing import Optional, Set
from typing_extensions import Self

class GraphicsStats(BaseModel):
    """
    Graphics statistics for the App. The information is collected from 'adb shell dumpsys graphicsstats'. For more info see: https://developer.android.com/training/testing/performance.html Statistics will only be present for API 23+.
    """ # noqa: E501
    buckets: Optional[List[GraphicsStatsBucket]] = Field(default=None, description="Histogram of frame render times. There should be 154 buckets ranging from [5ms, 6ms) to [4950ms, infinity)")
    high_input_latency_count: Optional[StrictStr] = Field(default=None, description="Total \"high input latency\" events.", alias="highInputLatencyCount")
    janky_frames: Optional[StrictStr] = Field(default=None, description="Total frames with slow render time. Should be <= total_frames.", alias="jankyFrames")
    missed_vsync_count: Optional[StrictStr] = Field(default=None, description="Total \"missed vsync\" events.", alias="missedVsyncCount")
    p50_millis: Optional[StrictStr] = Field(default=None, description="50th percentile frame render time in milliseconds.", alias="p50Millis")
    p90_millis: Optional[StrictStr] = Field(default=None, description="90th percentile frame render time in milliseconds.", alias="p90Millis")
    p95_millis: Optional[StrictStr] = Field(default=None, description="95th percentile frame render time in milliseconds.", alias="p95Millis")
    p99_millis: Optional[StrictStr] = Field(default=None, description="99th percentile frame render time in milliseconds.", alias="p99Millis")
    slow_bitmap_upload_count: Optional[StrictStr] = Field(default=None, description="Total \"slow bitmap upload\" events.", alias="slowBitmapUploadCount")
    slow_draw_count: Optional[StrictStr] = Field(default=None, description="Total \"slow draw\" events.", alias="slowDrawCount")
    slow_ui_thread_count: Optional[StrictStr] = Field(default=None, description="Total \"slow UI thread\" events.", alias="slowUiThreadCount")
    total_frames: Optional[StrictStr] = Field(default=None, description="Total frames rendered by package.", alias="totalFrames")
    __properties: ClassVar[List[str]] = ["buckets", "highInputLatencyCount", "jankyFrames", "missedVsyncCount", "p50Millis", "p90Millis", "p95Millis", "p99Millis", "slowBitmapUploadCount", "slowDrawCount", "slowUiThreadCount", "totalFrames"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GraphicsStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in buckets (list)
        _items = []
        if self.buckets:
            for _item_buckets in self.buckets:
                if _item_buckets:
                    _items.append(_item_buckets.to_dict())
            _dict['buckets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GraphicsStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buckets": [GraphicsStatsBucket.from_dict(_item) for _item in obj["buckets"]] if obj.get("buckets") is not None else None,
            "highInputLatencyCount": obj.get("highInputLatencyCount"),
            "jankyFrames": obj.get("jankyFrames"),
            "missedVsyncCount": obj.get("missedVsyncCount"),
            "p50Millis": obj.get("p50Millis"),
            "p90Millis": obj.get("p90Millis"),
            "p95Millis": obj.get("p95Millis"),
            "p99Millis": obj.get("p99Millis"),
            "slowBitmapUploadCount": obj.get("slowBitmapUploadCount"),
            "slowDrawCount": obj.get("slowDrawCount"),
            "slowUiThreadCount": obj.get("slowUiThreadCount"),
            "totalFrames": obj.get("totalFrames")
        })
        return _obj



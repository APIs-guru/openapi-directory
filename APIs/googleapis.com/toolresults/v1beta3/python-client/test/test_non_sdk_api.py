# coding: utf-8

"""
    Cloud Tool Results API

    API to publish and access results from developer tools.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.non_sdk_api import NonSdkApi

class TestNonSdkApi(unittest.TestCase):
    """NonSdkApi unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NonSdkApi:
        """Test NonSdkApi
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NonSdkApi`
        """
        model = NonSdkApi()
        if include_optional:
            return NonSdkApi(
                api_signature = '',
                example_stack_traces = [
                    ''
                    ],
                insights = [
                    openapi_client.models.non_sdk_api_insight.NonSdkApiInsight(
                        example_trace_messages = [
                            ''
                            ], 
                        matcher_id = '', 
                        pending_google_update_insight = openapi_client.models.pending_google_update_insight.PendingGoogleUpdateInsight(
                            name_of_google_library = '', ), 
                        upgrade_insight = openapi_client.models.upgrade_insight.UpgradeInsight(
                            package_name = '', 
                            upgrade_to_version = '', ), )
                    ],
                invocation_count = 56,
                list = 'NONE'
            )
        else:
            return NonSdkApi(
        )
        """

    def testNonSdkApi(self):
        """Test NonSdkApi"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Tool Results API

    API to publish and access results from developer tools.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.test_execution_step import TestExecutionStep

class TestTestExecutionStep(unittest.TestCase):
    """TestExecutionStep unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TestExecutionStep:
        """Test TestExecutionStep
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TestExecutionStep`
        """
        model = TestExecutionStep()
        if include_optional:
            return TestExecutionStep(
                test_issues = [
                    openapi_client.models.test_issue.TestIssue(
                        category = 'unspecifiedCategory', 
                        error_message = '', 
                        severity = 'unspecifiedSeverity', 
                        stack_trace = openapi_client.models.stack_trace.StackTrace(
                            exception = '', ), 
                        type = 'unspecifiedType', 
                        warning = openapi_client.models.any.Any(
                            type_url = '', 
                            value = 'YQ==', ), )
                    ],
                test_suite_overviews = [
                    openapi_client.models.test_suite_overview.TestSuiteOverview(
                        elapsed_time = openapi_client.models.duration.Duration(
                            nanos = 56, 
                            seconds = '', ), 
                        error_count = 56, 
                        failure_count = 56, 
                        flaky_count = 56, 
                        name = '', 
                        skipped_count = 56, 
                        total_count = 56, 
                        xml_source = openapi_client.models.file_reference.FileReference(
                            file_uri = '', ), )
                    ],
                test_timing = openapi_client.models.test_timing.TestTiming(
                    test_process_duration = openapi_client.models.duration.Duration(
                        nanos = 56, 
                        seconds = '', ), ),
                tool_execution = openapi_client.models.tool_execution.ToolExecution(
                    command_line_arguments = [
                        ''
                        ], 
                    exit_code = openapi_client.models.tool_exit_code.ToolExitCode(
                        number = 56, ), 
                    tool_logs = [
                        openapi_client.models.file_reference.FileReference(
                            file_uri = '', )
                        ], 
                    tool_outputs = [
                        openapi_client.models.tool_output_reference.ToolOutputReference(
                            creation_time = openapi_client.models.timestamp.Timestamp(
                                nanos = 56, 
                                seconds = '', ), 
                            output = openapi_client.models.file_reference.FileReference(
                                file_uri = '', ), 
                            test_case = openapi_client.models.test_case_reference.TestCaseReference(
                                class_name = '', 
                                name = '', 
                                test_suite_name = '', ), )
                        ], )
            )
        else:
            return TestExecutionStep(
        )
        """

    def testTestExecutionStep(self):
        """Test TestExecutionStep"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

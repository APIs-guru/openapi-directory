# coding: utf-8

"""
    Cloud Tool Results API

    API to publish and access results from developer tools.

    The version of the OpenAPI document: v1beta3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.execution import Execution

class TestExecution(unittest.TestCase):
    """Execution unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Execution:
        """Test Execution
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Execution`
        """
        model = Execution()
        if include_optional:
            return Execution(
                completion_time = openapi_client.models.timestamp.Timestamp(
                    nanos = 56, 
                    seconds = '', ),
                creation_time = openapi_client.models.timestamp.Timestamp(
                    nanos = 56, 
                    seconds = '', ),
                dimension_definitions = [
                    openapi_client.models.matrix_dimension_definition.MatrixDimensionDefinition()
                    ],
                execution_id = '',
                outcome = openapi_client.models.outcome.Outcome(
                    failure_detail = openapi_client.models.failure_detail.FailureDetail(
                        crashed = True, 
                        device_out_of_memory = True, 
                        failed_roboscript = True, 
                        not_installed = True, 
                        other_native_crash = True, 
                        timed_out = True, 
                        unable_to_crawl = True, ), 
                    inconclusive_detail = openapi_client.models.inconclusive_detail.InconclusiveDetail(
                        aborted_by_user = True, 
                        has_error_logs = True, 
                        infrastructure_failure = True, ), 
                    skipped_detail = openapi_client.models.skipped_detail.SkippedDetail(
                        incompatible_app_version = True, 
                        incompatible_architecture = True, 
                        incompatible_device = True, ), 
                    success_detail = openapi_client.models.success_detail.SuccessDetail(
                        other_native_crash = True, ), 
                    summary = 'unset', ),
                specification = openapi_client.models.specification.Specification(
                    android_test = openapi_client.models.android_test.AndroidTest(
                        android_app_info = openapi_client.models.android_app_info.AndroidAppInfo(
                            name = '', 
                            package_name = '', 
                            version_code = '', 
                            version_name = '', ), 
                        android_instrumentation_test = openapi_client.models.android_instrumentation_test.AndroidInstrumentationTest(
                            test_package_id = '', 
                            test_runner_class = '', 
                            test_targets = [
                                ''
                                ], 
                            use_orchestrator = True, ), 
                        android_robo_test = openapi_client.models.android_robo_test.AndroidRoboTest(
                            app_initial_activity = '', 
                            bootstrap_package_id = '', 
                            bootstrap_runner_class = '', 
                            max_depth = 56, 
                            max_steps = 56, ), 
                        android_test_loop = openapi_client.models.android_test_loop.androidTestLoop(), 
                        test_timeout = openapi_client.models.duration.Duration(
                            nanos = 56, 
                            seconds = '', ), ), 
                    ios_test = openapi_client.models.ios_test.IosTest(
                        ios_app_info = openapi_client.models.ios_app_info.IosAppInfo(
                            name = '', ), 
                        ios_robo_test = openapi_client.models.ios_robo_test.IosRoboTest(), 
                        ios_test_loop = openapi_client.models.ios_test_loop.IosTestLoop(
                            bundle_id = '', ), 
                        ios_xc_test = openapi_client.models.ios_xc_test.IosXcTest(
                            bundle_id = '', 
                            xcode_version = '', ), ), ),
                state = 'unknownState',
                test_execution_matrix_id = ''
            )
        else:
            return Execution(
        )
        """

    def testExecution(self):
        """Test Execution"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

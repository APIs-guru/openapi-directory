# coding: utf-8

"""
    Cloud Identity-Aware Proxy API

    Controls access to cloud applications running on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.allowed_domains_settings import AllowedDomainsSettings
from openapi_client.models.cors_settings import CorsSettings
from openapi_client.models.gcip_settings import GcipSettings
from openapi_client.models.o_auth_settings import OAuthSettings
from openapi_client.models.policy_delegation_settings import PolicyDelegationSettings
from openapi_client.models.reauth_settings import ReauthSettings
from typing import Optional, Set
from typing_extensions import Self

class AccessSettings(BaseModel):
    """
    Access related settings for IAP protected apps.
    """ # noqa: E501
    allowed_domains_settings: Optional[AllowedDomainsSettings] = Field(default=None, alias="allowedDomainsSettings")
    cors_settings: Optional[CorsSettings] = Field(default=None, alias="corsSettings")
    gcip_settings: Optional[GcipSettings] = Field(default=None, alias="gcipSettings")
    oauth_settings: Optional[OAuthSettings] = Field(default=None, alias="oauthSettings")
    policy_delegation_settings: Optional[PolicyDelegationSettings] = Field(default=None, alias="policyDelegationSettings")
    reauth_settings: Optional[ReauthSettings] = Field(default=None, alias="reauthSettings")
    __properties: ClassVar[List[str]] = ["allowedDomainsSettings", "corsSettings", "gcipSettings", "oauthSettings", "policyDelegationSettings", "reauthSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccessSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of allowed_domains_settings
        if self.allowed_domains_settings:
            _dict['allowedDomainsSettings'] = self.allowed_domains_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cors_settings
        if self.cors_settings:
            _dict['corsSettings'] = self.cors_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gcip_settings
        if self.gcip_settings:
            _dict['gcipSettings'] = self.gcip_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oauth_settings
        if self.oauth_settings:
            _dict['oauthSettings'] = self.oauth_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policy_delegation_settings
        if self.policy_delegation_settings:
            _dict['policyDelegationSettings'] = self.policy_delegation_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reauth_settings
        if self.reauth_settings:
            _dict['reauthSettings'] = self.reauth_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccessSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedDomainsSettings": AllowedDomainsSettings.from_dict(obj["allowedDomainsSettings"]) if obj.get("allowedDomainsSettings") is not None else None,
            "corsSettings": CorsSettings.from_dict(obj["corsSettings"]) if obj.get("corsSettings") is not None else None,
            "gcipSettings": GcipSettings.from_dict(obj["gcipSettings"]) if obj.get("gcipSettings") is not None else None,
            "oauthSettings": OAuthSettings.from_dict(obj["oauthSettings"]) if obj.get("oauthSettings") is not None else None,
            "policyDelegationSettings": PolicyDelegationSettings.from_dict(obj["policyDelegationSettings"]) if obj.get("policyDelegationSettings") is not None else None,
            "reauthSettings": ReauthSettings.from_dict(obj["reauthSettings"]) if obj.get("reauthSettings") is not None else None
        })
        return _obj



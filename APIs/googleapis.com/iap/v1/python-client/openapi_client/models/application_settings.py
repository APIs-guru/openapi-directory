# coding: utf-8

"""
    Cloud Identity-Aware Proxy API

    Controls access to cloud applications running on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.access_denied_page_settings import AccessDeniedPageSettings
from openapi_client.models.attribute_propagation_settings import AttributePropagationSettings
from openapi_client.models.csm_settings import CsmSettings
from typing import Optional, Set
from typing_extensions import Self

class ApplicationSettings(BaseModel):
    """
    Wrapper over application specific settings for IAP.
    """ # noqa: E501
    access_denied_page_settings: Optional[AccessDeniedPageSettings] = Field(default=None, alias="accessDeniedPageSettings")
    attribute_propagation_settings: Optional[AttributePropagationSettings] = Field(default=None, alias="attributePropagationSettings")
    cookie_domain: Optional[StrictStr] = Field(default=None, description="The Domain value to set for cookies generated by IAP. This value is not validated by the API, but will be ignored at runtime if invalid.", alias="cookieDomain")
    csm_settings: Optional[CsmSettings] = Field(default=None, alias="csmSettings")
    __properties: ClassVar[List[str]] = ["accessDeniedPageSettings", "attributePropagationSettings", "cookieDomain", "csmSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access_denied_page_settings
        if self.access_denied_page_settings:
            _dict['accessDeniedPageSettings'] = self.access_denied_page_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attribute_propagation_settings
        if self.attribute_propagation_settings:
            _dict['attributePropagationSettings'] = self.attribute_propagation_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of csm_settings
        if self.csm_settings:
            _dict['csmSettings'] = self.csm_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessDeniedPageSettings": AccessDeniedPageSettings.from_dict(obj["accessDeniedPageSettings"]) if obj.get("accessDeniedPageSettings") is not None else None,
            "attributePropagationSettings": AttributePropagationSettings.from_dict(obj["attributePropagationSettings"]) if obj.get("attributePropagationSettings") is not None else None,
            "cookieDomain": obj.get("cookieDomain"),
            "csmSettings": CsmSettings.from_dict(obj["csmSettings"]) if obj.get("csmSettings") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Identity-Aware Proxy API

    Controls access to cloud applications running on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.iap_settings import IapSettings

class TestIapSettings(unittest.TestCase):
    """IapSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IapSettings:
        """Test IapSettings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IapSettings`
        """
        model = IapSettings()
        if include_optional:
            return IapSettings(
                access_settings = openapi_client.models.access_settings.AccessSettings(
                    allowed_domains_settings = openapi_client.models.allowed_domains_settings.AllowedDomainsSettings(
                        domains = [
                            ''
                            ], 
                        enable = True, ), 
                    cors_settings = openapi_client.models.cors_settings.CorsSettings(
                        allow_http_options = True, ), 
                    gcip_settings = openapi_client.models.gcip_settings.GcipSettings(
                        login_page_uri = '', 
                        tenant_ids = [
                            ''
                            ], ), 
                    oauth_settings = openapi_client.models.o_auth_settings.OAuthSettings(
                        login_hint = '', 
                        programmatic_clients = [
                            ''
                            ], ), 
                    policy_delegation_settings = openapi_client.models.policy_delegation_settings.PolicyDelegationSettings(
                        iam_permission = '', 
                        iam_service_name = '', 
                        policy_name = openapi_client.models.policy_name.PolicyName(
                            id = '', 
                            region = '', 
                            type = '', ), 
                        resource = openapi_client.models.resource.Resource(
                            expected_next_state = {
                                'key' : null
                                }, 
                            labels = {
                                'key' : ''
                                }, 
                            name = '', 
                            service = '', 
                            type = '', ), ), 
                    reauth_settings = openapi_client.models.reauth_settings.ReauthSettings(
                        max_age = '', 
                        method = 'METHOD_UNSPECIFIED', 
                        policy_type = 'POLICY_TYPE_UNSPECIFIED', ), ),
                application_settings = openapi_client.models.application_settings.ApplicationSettings(
                    access_denied_page_settings = openapi_client.models.access_denied_page_settings.AccessDeniedPageSettings(
                        access_denied_page_uri = '', 
                        generate_troubleshooting_uri = True, 
                        remediation_token_generation_enabled = True, ), 
                    attribute_propagation_settings = openapi_client.models.attribute_propagation_settings.AttributePropagationSettings(
                        enable = True, 
                        expression = '', 
                        output_credentials = [
                            'OUTPUT_CREDENTIALS_UNSPECIFIED'
                            ], ), 
                    cookie_domain = '', 
                    csm_settings = openapi_client.models.csm_settings.CsmSettings(
                        rctoken_aud = '', ), ),
                name = ''
            )
        else:
            return IapSettings(
        )
        """

    def testIapSettings(self):
        """Test IapSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

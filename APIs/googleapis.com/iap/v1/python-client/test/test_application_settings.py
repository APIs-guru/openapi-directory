# coding: utf-8

"""
    Cloud Identity-Aware Proxy API

    Controls access to cloud applications running on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.application_settings import ApplicationSettings

class TestApplicationSettings(unittest.TestCase):
    """ApplicationSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApplicationSettings:
        """Test ApplicationSettings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApplicationSettings`
        """
        model = ApplicationSettings()
        if include_optional:
            return ApplicationSettings(
                access_denied_page_settings = openapi_client.models.access_denied_page_settings.AccessDeniedPageSettings(
                    access_denied_page_uri = '', 
                    generate_troubleshooting_uri = True, 
                    remediation_token_generation_enabled = True, ),
                attribute_propagation_settings = openapi_client.models.attribute_propagation_settings.AttributePropagationSettings(
                    enable = True, 
                    expression = '', 
                    output_credentials = [
                        'OUTPUT_CREDENTIALS_UNSPECIFIED'
                        ], ),
                cookie_domain = '',
                csm_settings = openapi_client.models.csm_settings.CsmSettings(
                    rctoken_aud = '', )
            )
        else:
            return ApplicationSettings(
        )
        """

    def testApplicationSettings(self):
        """Test ApplicationSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Anthos On-Prem API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.vmware_load_balancer_config import VmwareLoadBalancerConfig

class TestVmwareLoadBalancerConfig(unittest.TestCase):
    """VmwareLoadBalancerConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VmwareLoadBalancerConfig:
        """Test VmwareLoadBalancerConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VmwareLoadBalancerConfig`
        """
        model = VmwareLoadBalancerConfig()
        if include_optional:
            return VmwareLoadBalancerConfig(
                f5_config = openapi_client.models.vmware_f5_big_ip_config.VmwareF5BigIpConfig(
                    address = '', 
                    partition = '', 
                    snat_pool = '', ),
                manual_lb_config = openapi_client.models.vmware_manual_lb_config.VmwareManualLbConfig(
                    control_plane_node_port = 56, 
                    ingress_http_node_port = 56, 
                    ingress_https_node_port = 56, 
                    konnectivity_server_node_port = 56, ),
                metal_lb_config = openapi_client.models.vmware_metal_lb_config.VmwareMetalLbConfig(
                    address_pools = [
                        openapi_client.models.vmware_address_pool.VmwareAddressPool(
                            addresses = [
                                ''
                                ], 
                            avoid_buggy_ips = True, 
                            manual_assign = True, 
                            pool = '', )
                        ], ),
                seesaw_config = openapi_client.models.vmware_seesaw_config.VmwareSeesawConfig(
                    enable_ha = True, 
                    group = '', 
                    ip_blocks = [
                        openapi_client.models.vmware_ip_block.VmwareIpBlock(
                            gateway = '', 
                            ips = [
                                openapi_client.models.vmware_host_ip.VmwareHostIp(
                                    hostname = '', 
                                    ip = '', )
                                ], 
                            netmask = '', )
                        ], 
                    master_ip = '', 
                    stackdriver_name = '', 
                    vms = [
                        ''
                        ], ),
                vip_config = openapi_client.models.vmware_vip_config.VmwareVipConfig(
                    control_plane_vip = '', 
                    ingress_vip = '', )
            )
        else:
            return VmwareLoadBalancerConfig(
        )
        """

    def testVmwareLoadBalancerConfig(self):
        """Test VmwareLoadBalancerConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

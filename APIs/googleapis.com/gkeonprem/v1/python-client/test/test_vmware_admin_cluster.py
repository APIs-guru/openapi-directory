# coding: utf-8

"""
    Anthos On-Prem API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.vmware_admin_cluster import VmwareAdminCluster

class TestVmwareAdminCluster(unittest.TestCase):
    """VmwareAdminCluster unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VmwareAdminCluster:
        """Test VmwareAdminCluster
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VmwareAdminCluster`
        """
        model = VmwareAdminCluster()
        if include_optional:
            return VmwareAdminCluster(
                addon_node = openapi_client.models.vmware_admin_addon_node_config.VmwareAdminAddonNodeConfig(
                    auto_resize_config = openapi_client.models.vmware_auto_resize_config.VmwareAutoResizeConfig(
                        enabled = True, ), ),
                annotations = {
                    'key' : ''
                    },
                anti_affinity_groups = openapi_client.models.vmware_aag_config.VmwareAAGConfig(
                    aag_config_disabled = True, ),
                authorization = openapi_client.models.vmware_admin_authorization_config.VmwareAdminAuthorizationConfig(
                    viewer_users = [
                        openapi_client.models.cluster_user.ClusterUser(
                            username = '', )
                        ], ),
                auto_repair_config = openapi_client.models.vmware_auto_repair_config.VmwareAutoRepairConfig(
                    enabled = True, ),
                bootstrap_cluster_membership = '',
                control_plane_node = openapi_client.models.vmware_admin_control_plane_node_config.VmwareAdminControlPlaneNodeConfig(
                    cpus = '', 
                    memory = '', 
                    replicas = '', ),
                create_time = '',
                description = '',
                endpoint = '',
                etag = '',
                fleet = openapi_client.models.fleet.Fleet(
                    membership = '', ),
                image_type = '',
                load_balancer = openapi_client.models.vmware_admin_load_balancer_config.VmwareAdminLoadBalancerConfig(
                    f5_config = openapi_client.models.vmware_admin_f5_big_ip_config.VmwareAdminF5BigIpConfig(
                        address = '', 
                        partition = '', 
                        snat_pool = '', ), 
                    manual_lb_config = openapi_client.models.vmware_admin_manual_lb_config.VmwareAdminManualLbConfig(
                        addons_node_port = 56, 
                        control_plane_node_port = 56, 
                        ingress_http_node_port = 56, 
                        ingress_https_node_port = 56, 
                        konnectivity_server_node_port = 56, ), 
                    metal_lb_config = openapi_client.models.vmware_admin_metal_lb_config.VmwareAdminMetalLbConfig(), 
                    seesaw_config = openapi_client.models.vmware_admin_seesaw_config.VmwareAdminSeesawConfig(
                        enable_ha = True, 
                        group = '', 
                        ip_blocks = [
                            openapi_client.models.vmware_ip_block.VmwareIpBlock(
                                gateway = '', 
                                ips = [
                                    openapi_client.models.vmware_host_ip.VmwareHostIp(
                                        hostname = '', 
                                        ip = '', )
                                    ], 
                                netmask = '', )
                            ], 
                        master_ip = '', 
                        stackdriver_name = '', 
                        vms = [
                            ''
                            ], ), 
                    vip_config = openapi_client.models.vmware_admin_vip_config.VmwareAdminVipConfig(
                        addons_vip = '', 
                        control_plane_vip = '', ), ),
                local_name = '',
                name = '',
                network_config = openapi_client.models.vmware_admin_network_config.VmwareAdminNetworkConfig(
                    dhcp_ip_config = openapi_client.models.vmware_dhcp_ip_config.VmwareDhcpIpConfig(
                        enabled = True, ), 
                    ha_control_plane_config = openapi_client.models.vmware_admin_ha_control_plane_config.VmwareAdminHAControlPlaneConfig(
                        control_plane_ip_block = openapi_client.models.vmware_ip_block.VmwareIpBlock(
                            gateway = '', 
                            ips = [
                                openapi_client.models.vmware_host_ip.VmwareHostIp(
                                    hostname = '', 
                                    ip = '', )
                                ], 
                            netmask = '', ), ), 
                    host_config = openapi_client.models.vmware_host_config.VmwareHostConfig(
                        dns_search_domains = [
                            ''
                            ], 
                        dns_servers = [
                            ''
                            ], 
                        ntp_servers = [
                            ''
                            ], ), 
                    pod_address_cidr_blocks = [
                        ''
                        ], 
                    service_address_cidr_blocks = [
                        ''
                        ], 
                    static_ip_config = openapi_client.models.vmware_static_ip_config.VmwareStaticIpConfig(
                        ip_blocks = [
                            openapi_client.models.vmware_ip_block.VmwareIpBlock(
                                gateway = '', 
                                netmask = '', )
                            ], ), 
                    vcenter_network = '', ),
                on_prem_version = '',
                platform_config = openapi_client.models.vmware_platform_config.VmwarePlatformConfig(
                    bundles = [
                        openapi_client.models.vmware_bundle_config.VmwareBundleConfig(
                            status = openapi_client.models.resource_status.ResourceStatus(
                                conditions = [
                                    openapi_client.models.resource_condition.ResourceCondition(
                                        last_transition_time = '', 
                                        message = '', 
                                        reason = '', 
                                        state = 'STATE_UNSPECIFIED', 
                                        type = '', )
                                    ], 
                                error_message = '', ), 
                            version = '', )
                        ], 
                    platform_version = '', 
                    required_platform_version = '', 
                    status = openapi_client.models.resource_status.ResourceStatus(
                        error_message = '', ), ),
                prepared_secrets = openapi_client.models.vmware_admin_prepared_secrets_config.VmwareAdminPreparedSecretsConfig(
                    enabled = True, ),
                reconciling = True,
                state = 'STATE_UNSPECIFIED',
                status = openapi_client.models.resource_status.ResourceStatus(
                    conditions = [
                        openapi_client.models.resource_condition.ResourceCondition(
                            last_transition_time = '', 
                            message = '', 
                            reason = '', 
                            state = 'STATE_UNSPECIFIED', 
                            type = '', )
                        ], 
                    error_message = '', ),
                uid = '',
                update_time = '',
                vcenter = openapi_client.models.vmware_admin_v_center_config.VmwareAdminVCenterConfig(
                    address = '', 
                    ca_cert_data = '', 
                    cluster = '', 
                    data_disk = '', 
                    datacenter = '', 
                    datastore = '', 
                    folder = '', 
                    resource_pool = '', 
                    storage_policy_name = '', )
            )
        else:
            return VmwareAdminCluster(
        )
        """

    def testVmwareAdminCluster(self):
        """Test VmwareAdminCluster"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

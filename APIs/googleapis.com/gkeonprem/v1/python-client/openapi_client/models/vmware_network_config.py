# coding: utf-8

"""
    Anthos On-Prem API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.vmware_control_plane_v2_config import VmwareControlPlaneV2Config
from openapi_client.models.vmware_dhcp_ip_config import VmwareDhcpIpConfig
from openapi_client.models.vmware_host_config import VmwareHostConfig
from openapi_client.models.vmware_static_ip_config import VmwareStaticIpConfig
from typing import Optional, Set
from typing_extensions import Self

class VmwareNetworkConfig(BaseModel):
    """
    Specifies network config for the VMware user cluster.
    """ # noqa: E501
    control_plane_v2_config: Optional[VmwareControlPlaneV2Config] = Field(default=None, alias="controlPlaneV2Config")
    dhcp_ip_config: Optional[VmwareDhcpIpConfig] = Field(default=None, alias="dhcpIpConfig")
    host_config: Optional[VmwareHostConfig] = Field(default=None, alias="hostConfig")
    pod_address_cidr_blocks: Optional[List[StrictStr]] = Field(default=None, description="Required. All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.", alias="podAddressCidrBlocks")
    service_address_cidr_blocks: Optional[List[StrictStr]] = Field(default=None, description="Required. All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.", alias="serviceAddressCidrBlocks")
    static_ip_config: Optional[VmwareStaticIpConfig] = Field(default=None, alias="staticIpConfig")
    vcenter_network: Optional[StrictStr] = Field(default=None, description="vcenter_network specifies vCenter network name. Inherited from the admin cluster.", alias="vcenterNetwork")
    __properties: ClassVar[List[str]] = ["controlPlaneV2Config", "dhcpIpConfig", "hostConfig", "podAddressCidrBlocks", "serviceAddressCidrBlocks", "staticIpConfig", "vcenterNetwork"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VmwareNetworkConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of control_plane_v2_config
        if self.control_plane_v2_config:
            _dict['controlPlaneV2Config'] = self.control_plane_v2_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dhcp_ip_config
        if self.dhcp_ip_config:
            _dict['dhcpIpConfig'] = self.dhcp_ip_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of host_config
        if self.host_config:
            _dict['hostConfig'] = self.host_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of static_ip_config
        if self.static_ip_config:
            _dict['staticIpConfig'] = self.static_ip_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VmwareNetworkConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "controlPlaneV2Config": VmwareControlPlaneV2Config.from_dict(obj["controlPlaneV2Config"]) if obj.get("controlPlaneV2Config") is not None else None,
            "dhcpIpConfig": VmwareDhcpIpConfig.from_dict(obj["dhcpIpConfig"]) if obj.get("dhcpIpConfig") is not None else None,
            "hostConfig": VmwareHostConfig.from_dict(obj["hostConfig"]) if obj.get("hostConfig") is not None else None,
            "podAddressCidrBlocks": obj.get("podAddressCidrBlocks"),
            "serviceAddressCidrBlocks": obj.get("serviceAddressCidrBlocks"),
            "staticIpConfig": VmwareStaticIpConfig.from_dict(obj["staticIpConfig"]) if obj.get("staticIpConfig") is not None else None,
            "vcenterNetwork": obj.get("vcenterNetwork")
        })
        return _obj



# coding: utf-8

"""
    Anthos On-Prem API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Metric(BaseModel):
    """
    Progress metric is (string, int|float|string) pair.
    """ # noqa: E501
    double_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="For metrics with floating point value.", alias="doubleValue")
    int_value: Optional[StrictStr] = Field(default=None, description="For metrics with integer value.", alias="intValue")
    metric: Optional[StrictStr] = Field(default=None, description="Required. The metric name.")
    string_value: Optional[StrictStr] = Field(default=None, description="For metrics with custom values (ratios, visual progress, etc.).", alias="stringValue")
    __properties: ClassVar[List[str]] = ["doubleValue", "intValue", "metric", "stringValue"]

    @field_validator('metric')
    def metric_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['METRIC_ID_UNSPECIFIED', 'NODES_TOTAL', 'NODES_DRAINING', 'NODES_UPGRADING', 'NODES_PENDING_UPGRADE', 'NODES_UPGRADED', 'NODES_FAILED', 'NODES_HEALTHY', 'NODES_RECONCILING', 'NODES_IN_MAINTENANCE', 'PREFLIGHTS_COMPLETED', 'PREFLIGHTS_RUNNING', 'PREFLIGHTS_FAILED', 'PREFLIGHTS_TOTAL']):
            raise ValueError("must be one of enum values ('METRIC_ID_UNSPECIFIED', 'NODES_TOTAL', 'NODES_DRAINING', 'NODES_UPGRADING', 'NODES_PENDING_UPGRADE', 'NODES_UPGRADED', 'NODES_FAILED', 'NODES_HEALTHY', 'NODES_RECONCILING', 'NODES_IN_MAINTENANCE', 'PREFLIGHTS_COMPLETED', 'PREFLIGHTS_RUNNING', 'PREFLIGHTS_FAILED', 'PREFLIGHTS_TOTAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Metric from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Metric from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "doubleValue": obj.get("doubleValue"),
            "intValue": obj.get("intValue"),
            "metric": obj.get("metric"),
            "stringValue": obj.get("stringValue")
        })
        return _obj



# coding: utf-8

"""
    Anthos On-Prem API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.bare_metal_admin_cluster_operations_config import BareMetalAdminClusterOperationsConfig
from openapi_client.models.bare_metal_admin_control_plane_config import BareMetalAdminControlPlaneConfig
from openapi_client.models.bare_metal_admin_load_balancer_config import BareMetalAdminLoadBalancerConfig
from openapi_client.models.bare_metal_admin_maintenance_config import BareMetalAdminMaintenanceConfig
from openapi_client.models.bare_metal_admin_maintenance_status import BareMetalAdminMaintenanceStatus
from openapi_client.models.bare_metal_admin_network_config import BareMetalAdminNetworkConfig
from openapi_client.models.bare_metal_admin_node_access_config import BareMetalAdminNodeAccessConfig
from openapi_client.models.bare_metal_admin_os_environment_config import BareMetalAdminOsEnvironmentConfig
from openapi_client.models.bare_metal_admin_proxy_config import BareMetalAdminProxyConfig
from openapi_client.models.bare_metal_admin_security_config import BareMetalAdminSecurityConfig
from openapi_client.models.bare_metal_admin_storage_config import BareMetalAdminStorageConfig
from openapi_client.models.bare_metal_admin_workload_node_config import BareMetalAdminWorkloadNodeConfig
from openapi_client.models.binary_authorization import BinaryAuthorization
from openapi_client.models.fleet import Fleet
from openapi_client.models.resource_status import ResourceStatus
from openapi_client.models.validation_check import ValidationCheck
from typing import Optional, Set
from typing_extensions import Self

class BareMetalAdminCluster(BaseModel):
    """
    Resource that represents a bare metal admin cluster.
    """ # noqa: E501
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="Annotations on the bare metal admin cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.")
    bare_metal_version: Optional[StrictStr] = Field(default=None, description="The Anthos clusters on bare metal version for the bare metal admin cluster.", alias="bareMetalVersion")
    binary_authorization: Optional[BinaryAuthorization] = Field(default=None, alias="binaryAuthorization")
    cluster_operations: Optional[BareMetalAdminClusterOperationsConfig] = Field(default=None, alias="clusterOperations")
    control_plane: Optional[BareMetalAdminControlPlaneConfig] = Field(default=None, alias="controlPlane")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which this bare metal admin cluster was created.", alias="createTime")
    delete_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which this bare metal admin cluster was deleted. If the resource is not deleted, this must be empty", alias="deleteTime")
    description: Optional[StrictStr] = Field(default=None, description="A human readable description of this bare metal admin cluster.")
    endpoint: Optional[StrictStr] = Field(default=None, description="Output only. The IP address name of bare metal admin cluster's API server.")
    etag: Optional[StrictStr] = Field(default=None, description="This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.")
    fleet: Optional[Fleet] = None
    load_balancer: Optional[BareMetalAdminLoadBalancerConfig] = Field(default=None, alias="loadBalancer")
    local_name: Optional[StrictStr] = Field(default=None, description="Output only. The object name of the bare metal cluster custom resource. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.", alias="localName")
    maintenance_config: Optional[BareMetalAdminMaintenanceConfig] = Field(default=None, alias="maintenanceConfig")
    maintenance_status: Optional[BareMetalAdminMaintenanceStatus] = Field(default=None, alias="maintenanceStatus")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The bare metal admin cluster resource name.")
    network_config: Optional[BareMetalAdminNetworkConfig] = Field(default=None, alias="networkConfig")
    node_access_config: Optional[BareMetalAdminNodeAccessConfig] = Field(default=None, alias="nodeAccessConfig")
    node_config: Optional[BareMetalAdminWorkloadNodeConfig] = Field(default=None, alias="nodeConfig")
    os_environment_config: Optional[BareMetalAdminOsEnvironmentConfig] = Field(default=None, alias="osEnvironmentConfig")
    proxy: Optional[BareMetalAdminProxyConfig] = None
    reconciling: Optional[StrictBool] = Field(default=None, description="Output only. If set, there are currently changes in flight to the bare metal Admin Cluster.")
    security_config: Optional[BareMetalAdminSecurityConfig] = Field(default=None, alias="securityConfig")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of the bare metal admin cluster.")
    status: Optional[ResourceStatus] = None
    storage: Optional[BareMetalAdminStorageConfig] = None
    uid: Optional[StrictStr] = Field(default=None, description="Output only. The unique identifier of the bare metal admin cluster.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which this bare metal admin cluster was last updated.", alias="updateTime")
    validation_check: Optional[ValidationCheck] = Field(default=None, alias="validationCheck")
    __properties: ClassVar[List[str]] = ["annotations", "bareMetalVersion", "binaryAuthorization", "clusterOperations", "controlPlane", "createTime", "deleteTime", "description", "endpoint", "etag", "fleet", "loadBalancer", "localName", "maintenanceConfig", "maintenanceStatus", "name", "networkConfig", "nodeAccessConfig", "nodeConfig", "osEnvironmentConfig", "proxy", "reconciling", "securityConfig", "state", "status", "storage", "uid", "updateTime", "validationCheck"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'PROVISIONING', 'RUNNING', 'RECONCILING', 'STOPPING', 'ERROR', 'DEGRADED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'PROVISIONING', 'RUNNING', 'RECONCILING', 'STOPPING', 'ERROR', 'DEGRADED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BareMetalAdminCluster from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "delete_time",
            "endpoint",
            "local_name",
            "reconciling",
            "state",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of binary_authorization
        if self.binary_authorization:
            _dict['binaryAuthorization'] = self.binary_authorization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cluster_operations
        if self.cluster_operations:
            _dict['clusterOperations'] = self.cluster_operations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of control_plane
        if self.control_plane:
            _dict['controlPlane'] = self.control_plane.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fleet
        if self.fleet:
            _dict['fleet'] = self.fleet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of load_balancer
        if self.load_balancer:
            _dict['loadBalancer'] = self.load_balancer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maintenance_config
        if self.maintenance_config:
            _dict['maintenanceConfig'] = self.maintenance_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maintenance_status
        if self.maintenance_status:
            _dict['maintenanceStatus'] = self.maintenance_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_config
        if self.network_config:
            _dict['networkConfig'] = self.network_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of node_access_config
        if self.node_access_config:
            _dict['nodeAccessConfig'] = self.node_access_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of node_config
        if self.node_config:
            _dict['nodeConfig'] = self.node_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of os_environment_config
        if self.os_environment_config:
            _dict['osEnvironmentConfig'] = self.os_environment_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of proxy
        if self.proxy:
            _dict['proxy'] = self.proxy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security_config
        if self.security_config:
            _dict['securityConfig'] = self.security_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage
        if self.storage:
            _dict['storage'] = self.storage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of validation_check
        if self.validation_check:
            _dict['validationCheck'] = self.validation_check.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BareMetalAdminCluster from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "bareMetalVersion": obj.get("bareMetalVersion"),
            "binaryAuthorization": BinaryAuthorization.from_dict(obj["binaryAuthorization"]) if obj.get("binaryAuthorization") is not None else None,
            "clusterOperations": BareMetalAdminClusterOperationsConfig.from_dict(obj["clusterOperations"]) if obj.get("clusterOperations") is not None else None,
            "controlPlane": BareMetalAdminControlPlaneConfig.from_dict(obj["controlPlane"]) if obj.get("controlPlane") is not None else None,
            "createTime": obj.get("createTime"),
            "deleteTime": obj.get("deleteTime"),
            "description": obj.get("description"),
            "endpoint": obj.get("endpoint"),
            "etag": obj.get("etag"),
            "fleet": Fleet.from_dict(obj["fleet"]) if obj.get("fleet") is not None else None,
            "loadBalancer": BareMetalAdminLoadBalancerConfig.from_dict(obj["loadBalancer"]) if obj.get("loadBalancer") is not None else None,
            "localName": obj.get("localName"),
            "maintenanceConfig": BareMetalAdminMaintenanceConfig.from_dict(obj["maintenanceConfig"]) if obj.get("maintenanceConfig") is not None else None,
            "maintenanceStatus": BareMetalAdminMaintenanceStatus.from_dict(obj["maintenanceStatus"]) if obj.get("maintenanceStatus") is not None else None,
            "name": obj.get("name"),
            "networkConfig": BareMetalAdminNetworkConfig.from_dict(obj["networkConfig"]) if obj.get("networkConfig") is not None else None,
            "nodeAccessConfig": BareMetalAdminNodeAccessConfig.from_dict(obj["nodeAccessConfig"]) if obj.get("nodeAccessConfig") is not None else None,
            "nodeConfig": BareMetalAdminWorkloadNodeConfig.from_dict(obj["nodeConfig"]) if obj.get("nodeConfig") is not None else None,
            "osEnvironmentConfig": BareMetalAdminOsEnvironmentConfig.from_dict(obj["osEnvironmentConfig"]) if obj.get("osEnvironmentConfig") is not None else None,
            "proxy": BareMetalAdminProxyConfig.from_dict(obj["proxy"]) if obj.get("proxy") is not None else None,
            "reconciling": obj.get("reconciling"),
            "securityConfig": BareMetalAdminSecurityConfig.from_dict(obj["securityConfig"]) if obj.get("securityConfig") is not None else None,
            "state": obj.get("state"),
            "status": ResourceStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "storage": BareMetalAdminStorageConfig.from_dict(obj["storage"]) if obj.get("storage") is not None else None,
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime"),
            "validationCheck": ValidationCheck.from_dict(obj["validationCheck"]) if obj.get("validationCheck") is not None else None
        })
        return _obj



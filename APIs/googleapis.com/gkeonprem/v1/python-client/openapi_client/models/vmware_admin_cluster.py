# coding: utf-8

"""
    Anthos On-Prem API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.fleet import Fleet
from openapi_client.models.resource_status import ResourceStatus
from openapi_client.models.vmware_aag_config import VmwareAAGConfig
from openapi_client.models.vmware_admin_addon_node_config import VmwareAdminAddonNodeConfig
from openapi_client.models.vmware_admin_authorization_config import VmwareAdminAuthorizationConfig
from openapi_client.models.vmware_admin_control_plane_node_config import VmwareAdminControlPlaneNodeConfig
from openapi_client.models.vmware_admin_load_balancer_config import VmwareAdminLoadBalancerConfig
from openapi_client.models.vmware_admin_network_config import VmwareAdminNetworkConfig
from openapi_client.models.vmware_admin_prepared_secrets_config import VmwareAdminPreparedSecretsConfig
from openapi_client.models.vmware_admin_v_center_config import VmwareAdminVCenterConfig
from openapi_client.models.vmware_auto_repair_config import VmwareAutoRepairConfig
from openapi_client.models.vmware_platform_config import VmwarePlatformConfig
from typing import Optional, Set
from typing_extensions import Self

class VmwareAdminCluster(BaseModel):
    """
    Resource that represents a VMware admin cluster.
    """ # noqa: E501
    addon_node: Optional[VmwareAdminAddonNodeConfig] = Field(default=None, alias="addonNode")
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="Annotations on the VMware admin cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.")
    anti_affinity_groups: Optional[VmwareAAGConfig] = Field(default=None, alias="antiAffinityGroups")
    authorization: Optional[VmwareAdminAuthorizationConfig] = None
    auto_repair_config: Optional[VmwareAutoRepairConfig] = Field(default=None, alias="autoRepairConfig")
    bootstrap_cluster_membership: Optional[StrictStr] = Field(default=None, description="The bootstrap cluster this VMware admin cluster belongs to.", alias="bootstrapClusterMembership")
    control_plane_node: Optional[VmwareAdminControlPlaneNodeConfig] = Field(default=None, alias="controlPlaneNode")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which VMware admin cluster was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="A human readable description of this VMware admin cluster.")
    endpoint: Optional[StrictStr] = Field(default=None, description="Output only. The DNS name of VMware admin cluster's API server.")
    etag: Optional[StrictStr] = Field(default=None, description="This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.")
    fleet: Optional[Fleet] = None
    image_type: Optional[StrictStr] = Field(default=None, description="The OS image type for the VMware admin cluster.", alias="imageType")
    load_balancer: Optional[VmwareAdminLoadBalancerConfig] = Field(default=None, alias="loadBalancer")
    local_name: Optional[StrictStr] = Field(default=None, description="Output only. The object name of the VMware OnPremAdminCluster custom resource. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.", alias="localName")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The VMware admin cluster resource name.")
    network_config: Optional[VmwareAdminNetworkConfig] = Field(default=None, alias="networkConfig")
    on_prem_version: Optional[StrictStr] = Field(default=None, description="The Anthos clusters on the VMware version for the admin cluster.", alias="onPremVersion")
    platform_config: Optional[VmwarePlatformConfig] = Field(default=None, alias="platformConfig")
    prepared_secrets: Optional[VmwareAdminPreparedSecretsConfig] = Field(default=None, alias="preparedSecrets")
    reconciling: Optional[StrictBool] = Field(default=None, description="Output only. If set, there are currently changes in flight to the VMware admin cluster.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of VMware admin cluster.")
    status: Optional[ResourceStatus] = None
    uid: Optional[StrictStr] = Field(default=None, description="Output only. The unique identifier of the VMware admin cluster.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which VMware admin cluster was last updated.", alias="updateTime")
    vcenter: Optional[VmwareAdminVCenterConfig] = None
    __properties: ClassVar[List[str]] = ["addonNode", "annotations", "antiAffinityGroups", "authorization", "autoRepairConfig", "bootstrapClusterMembership", "controlPlaneNode", "createTime", "description", "endpoint", "etag", "fleet", "imageType", "loadBalancer", "localName", "name", "networkConfig", "onPremVersion", "platformConfig", "preparedSecrets", "reconciling", "state", "status", "uid", "updateTime", "vcenter"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'PROVISIONING', 'RUNNING', 'RECONCILING', 'STOPPING', 'ERROR', 'DEGRADED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'PROVISIONING', 'RUNNING', 'RECONCILING', 'STOPPING', 'ERROR', 'DEGRADED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VmwareAdminCluster from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "endpoint",
            "local_name",
            "reconciling",
            "state",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of addon_node
        if self.addon_node:
            _dict['addonNode'] = self.addon_node.to_dict()
        # override the default output from pydantic by calling `to_dict()` of anti_affinity_groups
        if self.anti_affinity_groups:
            _dict['antiAffinityGroups'] = self.anti_affinity_groups.to_dict()
        # override the default output from pydantic by calling `to_dict()` of authorization
        if self.authorization:
            _dict['authorization'] = self.authorization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of auto_repair_config
        if self.auto_repair_config:
            _dict['autoRepairConfig'] = self.auto_repair_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of control_plane_node
        if self.control_plane_node:
            _dict['controlPlaneNode'] = self.control_plane_node.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fleet
        if self.fleet:
            _dict['fleet'] = self.fleet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of load_balancer
        if self.load_balancer:
            _dict['loadBalancer'] = self.load_balancer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_config
        if self.network_config:
            _dict['networkConfig'] = self.network_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of platform_config
        if self.platform_config:
            _dict['platformConfig'] = self.platform_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prepared_secrets
        if self.prepared_secrets:
            _dict['preparedSecrets'] = self.prepared_secrets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vcenter
        if self.vcenter:
            _dict['vcenter'] = self.vcenter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VmwareAdminCluster from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addonNode": VmwareAdminAddonNodeConfig.from_dict(obj["addonNode"]) if obj.get("addonNode") is not None else None,
            "annotations": obj.get("annotations"),
            "antiAffinityGroups": VmwareAAGConfig.from_dict(obj["antiAffinityGroups"]) if obj.get("antiAffinityGroups") is not None else None,
            "authorization": VmwareAdminAuthorizationConfig.from_dict(obj["authorization"]) if obj.get("authorization") is not None else None,
            "autoRepairConfig": VmwareAutoRepairConfig.from_dict(obj["autoRepairConfig"]) if obj.get("autoRepairConfig") is not None else None,
            "bootstrapClusterMembership": obj.get("bootstrapClusterMembership"),
            "controlPlaneNode": VmwareAdminControlPlaneNodeConfig.from_dict(obj["controlPlaneNode"]) if obj.get("controlPlaneNode") is not None else None,
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "endpoint": obj.get("endpoint"),
            "etag": obj.get("etag"),
            "fleet": Fleet.from_dict(obj["fleet"]) if obj.get("fleet") is not None else None,
            "imageType": obj.get("imageType"),
            "loadBalancer": VmwareAdminLoadBalancerConfig.from_dict(obj["loadBalancer"]) if obj.get("loadBalancer") is not None else None,
            "localName": obj.get("localName"),
            "name": obj.get("name"),
            "networkConfig": VmwareAdminNetworkConfig.from_dict(obj["networkConfig"]) if obj.get("networkConfig") is not None else None,
            "onPremVersion": obj.get("onPremVersion"),
            "platformConfig": VmwarePlatformConfig.from_dict(obj["platformConfig"]) if obj.get("platformConfig") is not None else None,
            "preparedSecrets": VmwareAdminPreparedSecretsConfig.from_dict(obj["preparedSecrets"]) if obj.get("preparedSecrets") is not None else None,
            "reconciling": obj.get("reconciling"),
            "state": obj.get("state"),
            "status": ResourceStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime"),
            "vcenter": VmwareAdminVCenterConfig.from_dict(obj["vcenter"]) if obj.get("vcenter") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Anthos On-Prem API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.bare_metal_island_mode_cidr_config import BareMetalIslandModeCidrConfig
from openapi_client.models.bare_metal_multiple_network_interfaces_config import BareMetalMultipleNetworkInterfacesConfig
from openapi_client.models.bare_metal_sr_iov_config import BareMetalSrIovConfig
from typing import Optional, Set
from typing_extensions import Self

class BareMetalNetworkConfig(BaseModel):
    """
    Specifies the cluster network configuration.
    """ # noqa: E501
    advanced_networking: Optional[StrictBool] = Field(default=None, description="Enables the use of advanced Anthos networking features, such as Bundled Load Balancing with BGP or the egress NAT gateway. Setting configuration for advanced networking features will automatically set this flag.", alias="advancedNetworking")
    island_mode_cidr: Optional[BareMetalIslandModeCidrConfig] = Field(default=None, alias="islandModeCidr")
    multiple_network_interfaces_config: Optional[BareMetalMultipleNetworkInterfacesConfig] = Field(default=None, alias="multipleNetworkInterfacesConfig")
    sr_iov_config: Optional[BareMetalSrIovConfig] = Field(default=None, alias="srIovConfig")
    __properties: ClassVar[List[str]] = ["advancedNetworking", "islandModeCidr", "multipleNetworkInterfacesConfig", "srIovConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BareMetalNetworkConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of island_mode_cidr
        if self.island_mode_cidr:
            _dict['islandModeCidr'] = self.island_mode_cidr.to_dict()
        # override the default output from pydantic by calling `to_dict()` of multiple_network_interfaces_config
        if self.multiple_network_interfaces_config:
            _dict['multipleNetworkInterfacesConfig'] = self.multiple_network_interfaces_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sr_iov_config
        if self.sr_iov_config:
            _dict['srIovConfig'] = self.sr_iov_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BareMetalNetworkConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advancedNetworking": obj.get("advancedNetworking"),
            "islandModeCidr": BareMetalIslandModeCidrConfig.from_dict(obj["islandModeCidr"]) if obj.get("islandModeCidr") is not None else None,
            "multipleNetworkInterfacesConfig": BareMetalMultipleNetworkInterfacesConfig.from_dict(obj["multipleNetworkInterfacesConfig"]) if obj.get("multipleNetworkInterfacesConfig") is not None else None,
            "srIovConfig": BareMetalSrIovConfig.from_dict(obj["srIovConfig"]) if obj.get("srIovConfig") is not None else None
        })
        return _obj



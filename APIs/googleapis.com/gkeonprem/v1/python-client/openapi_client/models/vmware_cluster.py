# coding: utf-8

"""
    Anthos On-Prem API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.authorization import Authorization
from openapi_client.models.binary_authorization import BinaryAuthorization
from openapi_client.models.fleet import Fleet
from openapi_client.models.resource_status import ResourceStatus
from openapi_client.models.validation_check import ValidationCheck
from openapi_client.models.vmware_aag_config import VmwareAAGConfig
from openapi_client.models.vmware_auto_repair_config import VmwareAutoRepairConfig
from openapi_client.models.vmware_cluster_upgrade_policy import VmwareClusterUpgradePolicy
from openapi_client.models.vmware_control_plane_node_config import VmwareControlPlaneNodeConfig
from openapi_client.models.vmware_dataplane_v2_config import VmwareDataplaneV2Config
from openapi_client.models.vmware_load_balancer_config import VmwareLoadBalancerConfig
from openapi_client.models.vmware_network_config import VmwareNetworkConfig
from openapi_client.models.vmware_storage_config import VmwareStorageConfig
from openapi_client.models.vmware_v_center_config import VmwareVCenterConfig
from typing import Optional, Set
from typing_extensions import Self

class VmwareCluster(BaseModel):
    """
    Resource that represents a VMware user cluster. ##
    """ # noqa: E501
    admin_cluster_membership: Optional[StrictStr] = Field(default=None, description="Required. The admin cluster this VMware user cluster belongs to. This is the full resource name of the admin cluster's fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.", alias="adminClusterMembership")
    admin_cluster_name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the VMware admin cluster hosting this user cluster.", alias="adminClusterName")
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="Annotations on the VMware user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.")
    anti_affinity_groups: Optional[VmwareAAGConfig] = Field(default=None, alias="antiAffinityGroups")
    authorization: Optional[Authorization] = None
    auto_repair_config: Optional[VmwareAutoRepairConfig] = Field(default=None, alias="autoRepairConfig")
    binary_authorization: Optional[BinaryAuthorization] = Field(default=None, alias="binaryAuthorization")
    control_plane_node: Optional[VmwareControlPlaneNodeConfig] = Field(default=None, alias="controlPlaneNode")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which VMware user cluster was created.", alias="createTime")
    dataplane_v2: Optional[VmwareDataplaneV2Config] = Field(default=None, alias="dataplaneV2")
    delete_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which VMware user cluster was deleted.", alias="deleteTime")
    description: Optional[StrictStr] = Field(default=None, description="A human readable description of this VMware user cluster.")
    disable_bundled_ingress: Optional[StrictBool] = Field(default=None, description="Disable bundled ingress.", alias="disableBundledIngress")
    enable_control_plane_v2: Optional[StrictBool] = Field(default=None, description="Enable control plane V2. Default to false.", alias="enableControlPlaneV2")
    endpoint: Optional[StrictStr] = Field(default=None, description="Output only. The DNS name of VMware user cluster's API server.")
    etag: Optional[StrictStr] = Field(default=None, description="This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.")
    fleet: Optional[Fleet] = None
    load_balancer: Optional[VmwareLoadBalancerConfig] = Field(default=None, alias="loadBalancer")
    local_name: Optional[StrictStr] = Field(default=None, description="Output only. The object name of the VMware OnPremUserCluster custom resource on the associated admin cluster. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.", alias="localName")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The VMware user cluster resource name.")
    network_config: Optional[VmwareNetworkConfig] = Field(default=None, alias="networkConfig")
    on_prem_version: Optional[StrictStr] = Field(default=None, description="Required. The Anthos clusters on the VMware version for your user cluster.", alias="onPremVersion")
    reconciling: Optional[StrictBool] = Field(default=None, description="Output only. If set, there are currently changes in flight to the VMware user cluster.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of VMware user cluster.")
    status: Optional[ResourceStatus] = None
    storage: Optional[VmwareStorageConfig] = None
    uid: Optional[StrictStr] = Field(default=None, description="Output only. The unique identifier of the VMware user cluster.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which VMware user cluster was last updated.", alias="updateTime")
    upgrade_policy: Optional[VmwareClusterUpgradePolicy] = Field(default=None, alias="upgradePolicy")
    validation_check: Optional[ValidationCheck] = Field(default=None, alias="validationCheck")
    vcenter: Optional[VmwareVCenterConfig] = None
    vm_tracking_enabled: Optional[StrictBool] = Field(default=None, description="Enable VM tracking.", alias="vmTrackingEnabled")
    __properties: ClassVar[List[str]] = ["adminClusterMembership", "adminClusterName", "annotations", "antiAffinityGroups", "authorization", "autoRepairConfig", "binaryAuthorization", "controlPlaneNode", "createTime", "dataplaneV2", "deleteTime", "description", "disableBundledIngress", "enableControlPlaneV2", "endpoint", "etag", "fleet", "loadBalancer", "localName", "name", "networkConfig", "onPremVersion", "reconciling", "state", "status", "storage", "uid", "updateTime", "upgradePolicy", "validationCheck", "vcenter", "vmTrackingEnabled"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'PROVISIONING', 'RUNNING', 'RECONCILING', 'STOPPING', 'ERROR', 'DEGRADED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'PROVISIONING', 'RUNNING', 'RECONCILING', 'STOPPING', 'ERROR', 'DEGRADED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VmwareCluster from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "admin_cluster_name",
            "create_time",
            "delete_time",
            "endpoint",
            "local_name",
            "reconciling",
            "state",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of anti_affinity_groups
        if self.anti_affinity_groups:
            _dict['antiAffinityGroups'] = self.anti_affinity_groups.to_dict()
        # override the default output from pydantic by calling `to_dict()` of authorization
        if self.authorization:
            _dict['authorization'] = self.authorization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of auto_repair_config
        if self.auto_repair_config:
            _dict['autoRepairConfig'] = self.auto_repair_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of binary_authorization
        if self.binary_authorization:
            _dict['binaryAuthorization'] = self.binary_authorization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of control_plane_node
        if self.control_plane_node:
            _dict['controlPlaneNode'] = self.control_plane_node.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dataplane_v2
        if self.dataplane_v2:
            _dict['dataplaneV2'] = self.dataplane_v2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fleet
        if self.fleet:
            _dict['fleet'] = self.fleet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of load_balancer
        if self.load_balancer:
            _dict['loadBalancer'] = self.load_balancer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_config
        if self.network_config:
            _dict['networkConfig'] = self.network_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage
        if self.storage:
            _dict['storage'] = self.storage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upgrade_policy
        if self.upgrade_policy:
            _dict['upgradePolicy'] = self.upgrade_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of validation_check
        if self.validation_check:
            _dict['validationCheck'] = self.validation_check.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vcenter
        if self.vcenter:
            _dict['vcenter'] = self.vcenter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VmwareCluster from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adminClusterMembership": obj.get("adminClusterMembership"),
            "adminClusterName": obj.get("adminClusterName"),
            "annotations": obj.get("annotations"),
            "antiAffinityGroups": VmwareAAGConfig.from_dict(obj["antiAffinityGroups"]) if obj.get("antiAffinityGroups") is not None else None,
            "authorization": Authorization.from_dict(obj["authorization"]) if obj.get("authorization") is not None else None,
            "autoRepairConfig": VmwareAutoRepairConfig.from_dict(obj["autoRepairConfig"]) if obj.get("autoRepairConfig") is not None else None,
            "binaryAuthorization": BinaryAuthorization.from_dict(obj["binaryAuthorization"]) if obj.get("binaryAuthorization") is not None else None,
            "controlPlaneNode": VmwareControlPlaneNodeConfig.from_dict(obj["controlPlaneNode"]) if obj.get("controlPlaneNode") is not None else None,
            "createTime": obj.get("createTime"),
            "dataplaneV2": VmwareDataplaneV2Config.from_dict(obj["dataplaneV2"]) if obj.get("dataplaneV2") is not None else None,
            "deleteTime": obj.get("deleteTime"),
            "description": obj.get("description"),
            "disableBundledIngress": obj.get("disableBundledIngress"),
            "enableControlPlaneV2": obj.get("enableControlPlaneV2"),
            "endpoint": obj.get("endpoint"),
            "etag": obj.get("etag"),
            "fleet": Fleet.from_dict(obj["fleet"]) if obj.get("fleet") is not None else None,
            "loadBalancer": VmwareLoadBalancerConfig.from_dict(obj["loadBalancer"]) if obj.get("loadBalancer") is not None else None,
            "localName": obj.get("localName"),
            "name": obj.get("name"),
            "networkConfig": VmwareNetworkConfig.from_dict(obj["networkConfig"]) if obj.get("networkConfig") is not None else None,
            "onPremVersion": obj.get("onPremVersion"),
            "reconciling": obj.get("reconciling"),
            "state": obj.get("state"),
            "status": ResourceStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "storage": VmwareStorageConfig.from_dict(obj["storage"]) if obj.get("storage") is not None else None,
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime"),
            "upgradePolicy": VmwareClusterUpgradePolicy.from_dict(obj["upgradePolicy"]) if obj.get("upgradePolicy") is not None else None,
            "validationCheck": ValidationCheck.from_dict(obj["validationCheck"]) if obj.get("validationCheck") is not None else None,
            "vcenter": VmwareVCenterConfig.from_dict(obj["vcenter"]) if obj.get("vcenter") is not None else None,
            "vmTrackingEnabled": obj.get("vmTrackingEnabled")
        })
        return _obj



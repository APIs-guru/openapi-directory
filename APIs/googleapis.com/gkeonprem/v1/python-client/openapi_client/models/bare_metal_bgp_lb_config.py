# coding: utf-8

"""
    Anthos On-Prem API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.bare_metal_bgp_peer_config import BareMetalBgpPeerConfig
from openapi_client.models.bare_metal_load_balancer_address_pool import BareMetalLoadBalancerAddressPool
from openapi_client.models.bare_metal_load_balancer_node_pool_config import BareMetalLoadBalancerNodePoolConfig
from typing import Optional, Set
from typing_extensions import Self

class BareMetalBgpLbConfig(BaseModel):
    """
    BareMetalBgpLbConfig represents configuration parameters for a Border Gateway Protocol (BGP) load balancer.
    """ # noqa: E501
    address_pools: Optional[List[BareMetalLoadBalancerAddressPool]] = Field(default=None, description="Required. AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.", alias="addressPools")
    asn: Optional[StrictStr] = Field(default=None, description="Required. BGP autonomous system number (ASN) of the cluster. This field can be updated after cluster creation.")
    bgp_peer_configs: Optional[List[BareMetalBgpPeerConfig]] = Field(default=None, description="Required. The list of BGP peers that the cluster will connect to. At least one peer must be configured for each control plane node. Control plane nodes will connect to these peers to advertise the control plane VIP. The Services load balancer also uses these peers by default. This field can be updated after cluster creation.", alias="bgpPeerConfigs")
    load_balancer_node_pool_config: Optional[BareMetalLoadBalancerNodePoolConfig] = Field(default=None, alias="loadBalancerNodePoolConfig")
    __properties: ClassVar[List[str]] = ["addressPools", "asn", "bgpPeerConfigs", "loadBalancerNodePoolConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BareMetalBgpLbConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in address_pools (list)
        _items = []
        if self.address_pools:
            for _item_address_pools in self.address_pools:
                if _item_address_pools:
                    _items.append(_item_address_pools.to_dict())
            _dict['addressPools'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in bgp_peer_configs (list)
        _items = []
        if self.bgp_peer_configs:
            for _item_bgp_peer_configs in self.bgp_peer_configs:
                if _item_bgp_peer_configs:
                    _items.append(_item_bgp_peer_configs.to_dict())
            _dict['bgpPeerConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of load_balancer_node_pool_config
        if self.load_balancer_node_pool_config:
            _dict['loadBalancerNodePoolConfig'] = self.load_balancer_node_pool_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BareMetalBgpLbConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addressPools": [BareMetalLoadBalancerAddressPool.from_dict(_item) for _item in obj["addressPools"]] if obj.get("addressPools") is not None else None,
            "asn": obj.get("asn"),
            "bgpPeerConfigs": [BareMetalBgpPeerConfig.from_dict(_item) for _item in obj["bgpPeerConfigs"]] if obj.get("bgpPeerConfigs") is not None else None,
            "loadBalancerNodePoolConfig": BareMetalLoadBalancerNodePoolConfig.from_dict(obj["loadBalancerNodePoolConfig"]) if obj.get("loadBalancerNodePoolConfig") is not None else None
        })
        return _obj



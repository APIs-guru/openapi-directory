# coding: utf-8

"""
    Anthos On-Prem API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.resource_status import ResourceStatus
from openapi_client.models.vmware_bundle_config import VmwareBundleConfig
from typing import Optional, Set
from typing_extensions import Self

class VmwarePlatformConfig(BaseModel):
    """
    VmwarePlatformConfig represents configuration for the VMware platform.
    """ # noqa: E501
    bundles: Optional[List[VmwareBundleConfig]] = Field(default=None, description="Output only. The list of bundles installed in the admin cluster.")
    platform_version: Optional[StrictStr] = Field(default=None, description="Output only. The platform version e.g. 1.13.2.", alias="platformVersion")
    required_platform_version: Optional[StrictStr] = Field(default=None, description="Input only. The required platform version e.g. 1.13.1. If the current platform version is lower than the target version, the platform version will be updated to the target version. If the target version is not installed in the platform (bundle versions), download the target version bundle.", alias="requiredPlatformVersion")
    status: Optional[ResourceStatus] = None
    __properties: ClassVar[List[str]] = ["bundles", "platformVersion", "requiredPlatformVersion", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VmwarePlatformConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "bundles",
            "platform_version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in bundles (list)
        _items = []
        if self.bundles:
            for _item_bundles in self.bundles:
                if _item_bundles:
                    _items.append(_item_bundles.to_dict())
            _dict['bundles'] = _items
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VmwarePlatformConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bundles": [VmwareBundleConfig.from_dict(_item) for _item in obj["bundles"]] if obj.get("bundles") is not None else None,
            "platformVersion": obj.get("platformVersion"),
            "requiredPlatformVersion": obj.get("requiredPlatformVersion"),
            "status": ResourceStatus.from_dict(obj["status"]) if obj.get("status") is not None else None
        })
        return _obj



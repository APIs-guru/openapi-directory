# coding: utf-8

"""
    Anthos On-Prem API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.vmware_admin_cluster import VmwareAdminCluster
from typing import Optional, Set
from typing_extensions import Self

class ListVmwareAdminClustersResponse(BaseModel):
    """
    Response message for listing VMware admin clusters.
    """ # noqa: E501
    next_page_token: Optional[StrictStr] = Field(default=None, description="A token identifying a page of results the server should return. If the token is not empty this means that more results are available and should be retrieved by repeating the request with the provided page token.", alias="nextPageToken")
    unreachable: Optional[List[StrictStr]] = Field(default=None, description="Locations that could not be reached.")
    vmware_admin_clusters: Optional[List[VmwareAdminCluster]] = Field(default=None, description="The list of VMware admin cluster.", alias="vmwareAdminClusters")
    __properties: ClassVar[List[str]] = ["nextPageToken", "unreachable", "vmwareAdminClusters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListVmwareAdminClustersResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in vmware_admin_clusters (list)
        _items = []
        if self.vmware_admin_clusters:
            for _item_vmware_admin_clusters in self.vmware_admin_clusters:
                if _item_vmware_admin_clusters:
                    _items.append(_item_vmware_admin_clusters.to_dict())
            _dict['vmwareAdminClusters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListVmwareAdminClustersResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nextPageToken": obj.get("nextPageToken"),
            "unreachable": obj.get("unreachable"),
            "vmwareAdminClusters": [VmwareAdminCluster.from_dict(_item) for _item in obj["vmwareAdminClusters"]] if obj.get("vmwareAdminClusters") is not None else None
        })
        return _obj



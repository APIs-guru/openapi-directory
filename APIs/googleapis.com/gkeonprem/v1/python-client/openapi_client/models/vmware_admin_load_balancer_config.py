# coding: utf-8

"""
    Anthos On-Prem API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.vmware_admin_f5_big_ip_config import VmwareAdminF5BigIpConfig
from openapi_client.models.vmware_admin_manual_lb_config import VmwareAdminManualLbConfig
from openapi_client.models.vmware_admin_seesaw_config import VmwareAdminSeesawConfig
from openapi_client.models.vmware_admin_vip_config import VmwareAdminVipConfig
from typing import Optional, Set
from typing_extensions import Self

class VmwareAdminLoadBalancerConfig(BaseModel):
    """
    VmwareAdminLoadBalancerConfig contains load balancer configuration for VMware admin cluster.
    """ # noqa: E501
    f5_config: Optional[VmwareAdminF5BigIpConfig] = Field(default=None, alias="f5Config")
    manual_lb_config: Optional[VmwareAdminManualLbConfig] = Field(default=None, alias="manualLbConfig")
    metal_lb_config: Optional[Dict[str, Any]] = Field(default=None, description="VmwareAdminMetalLbConfig represents configuration parameters for a MetalLB load balancer. For admin clusters, currently no configurations is needed.", alias="metalLbConfig")
    seesaw_config: Optional[VmwareAdminSeesawConfig] = Field(default=None, alias="seesawConfig")
    vip_config: Optional[VmwareAdminVipConfig] = Field(default=None, alias="vipConfig")
    __properties: ClassVar[List[str]] = ["f5Config", "manualLbConfig", "metalLbConfig", "seesawConfig", "vipConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VmwareAdminLoadBalancerConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of f5_config
        if self.f5_config:
            _dict['f5Config'] = self.f5_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manual_lb_config
        if self.manual_lb_config:
            _dict['manualLbConfig'] = self.manual_lb_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of seesaw_config
        if self.seesaw_config:
            _dict['seesawConfig'] = self.seesaw_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vip_config
        if self.vip_config:
            _dict['vipConfig'] = self.vip_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VmwareAdminLoadBalancerConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "f5Config": VmwareAdminF5BigIpConfig.from_dict(obj["f5Config"]) if obj.get("f5Config") is not None else None,
            "manualLbConfig": VmwareAdminManualLbConfig.from_dict(obj["manualLbConfig"]) if obj.get("manualLbConfig") is not None else None,
            "metalLbConfig": obj.get("metalLbConfig"),
            "seesawConfig": VmwareAdminSeesawConfig.from_dict(obj["seesawConfig"]) if obj.get("seesawConfig") is not None else None,
            "vipConfig": VmwareAdminVipConfig.from_dict(obj["vipConfig"]) if obj.get("vipConfig") is not None else None
        })
        return _obj



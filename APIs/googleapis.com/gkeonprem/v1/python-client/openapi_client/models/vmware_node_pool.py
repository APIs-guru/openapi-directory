# coding: utf-8

"""
    Anthos On-Prem API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.resource_status import ResourceStatus
from openapi_client.models.vmware_node_config import VmwareNodeConfig
from openapi_client.models.vmware_node_pool_autoscaling_config import VmwareNodePoolAutoscalingConfig
from typing import Optional, Set
from typing_extensions import Self

class VmwareNodePool(BaseModel):
    """
    Resource VmwareNodePool represents a VMware node pool. ##
    """ # noqa: E501
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.")
    config: Optional[VmwareNodeConfig] = None
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which this node pool was created.", alias="createTime")
    delete_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which this node pool was deleted. If the resource is not deleted, this must be empty", alias="deleteTime")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name for the node pool.", alias="displayName")
    etag: Optional[StrictStr] = Field(default=None, description="This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of this node pool.")
    node_pool_autoscaling: Optional[VmwareNodePoolAutoscalingConfig] = Field(default=None, alias="nodePoolAutoscaling")
    on_prem_version: Optional[StrictStr] = Field(default=None, description="Anthos version for the node pool. Defaults to the user cluster version.", alias="onPremVersion")
    reconciling: Optional[StrictBool] = Field(default=None, description="Output only. If set, there are currently changes in flight to the node pool.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of the node pool.")
    status: Optional[ResourceStatus] = None
    uid: Optional[StrictStr] = Field(default=None, description="Output only. The unique identifier of the node pool.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which this node pool was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["annotations", "config", "createTime", "deleteTime", "displayName", "etag", "name", "nodePoolAutoscaling", "onPremVersion", "reconciling", "state", "status", "uid", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'PROVISIONING', 'RUNNING', 'RECONCILING', 'STOPPING', 'ERROR', 'DEGRADED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'PROVISIONING', 'RUNNING', 'RECONCILING', 'STOPPING', 'ERROR', 'DEGRADED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VmwareNodePool from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "delete_time",
            "reconciling",
            "state",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of node_pool_autoscaling
        if self.node_pool_autoscaling:
            _dict['nodePoolAutoscaling'] = self.node_pool_autoscaling.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VmwareNodePool from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "config": VmwareNodeConfig.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "createTime": obj.get("createTime"),
            "deleteTime": obj.get("deleteTime"),
            "displayName": obj.get("displayName"),
            "etag": obj.get("etag"),
            "name": obj.get("name"),
            "nodePoolAutoscaling": VmwareNodePoolAutoscalingConfig.from_dict(obj["nodePoolAutoscaling"]) if obj.get("nodePoolAutoscaling") is not None else None,
            "onPremVersion": obj.get("onPremVersion"),
            "reconciling": obj.get("reconciling"),
            "state": obj.get("state"),
            "status": ResourceStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Replica Pool

    The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.health_check import HealthCheck
from openapi_client.models.label import Label
from openapi_client.models.template import Template
from typing import Optional, Set
from typing_extensions import Self

class Pool(BaseModel):
    """
    Pool
    """ # noqa: E501
    auto_restart: Optional[StrictBool] = Field(default=None, description="Whether replicas in this pool should be restarted if they experience a failure. The default value is true.", alias="autoRestart")
    base_instance_name: Optional[StrictStr] = Field(default=None, description="The base instance name to use for the replicas in this pool. This must match the regex [a-z]([-a-z0-9]*[a-z0-9])?. If specified, the instances in this replica pool will be named in the format <base-instance-name>-<ID>. The <ID> postfix will be a four character alphanumeric identifier generated by the service.  If this is not specified by the user, a random base instance name is generated by the service.", alias="baseInstanceName")
    current_num_replicas: Optional[StrictInt] = Field(default=None, description="[Output Only] The current number of replicas in the pool.", alias="currentNumReplicas")
    description: Optional[StrictStr] = Field(default=None, description="An optional description of the replica pool.")
    health_checks: Optional[List[HealthCheck]] = Field(default=None, description="Deprecated. Please use template[].healthChecks instead.", alias="healthChecks")
    initial_num_replicas: Optional[StrictInt] = Field(default=None, description="The initial number of replicas this pool should have. You must provide a value greater than or equal to 0.", alias="initialNumReplicas")
    labels: Optional[List[Label]] = Field(default=None, description="A list of labels to attach to this replica pool and all created virtual machines in this replica pool.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the replica pool. Must follow the regex [a-z]([-a-z0-9]*[a-z0-9])? and be 1-28 characters long.")
    num_replicas: Optional[StrictInt] = Field(default=None, description="Deprecated! Use initial_num_replicas instead.", alias="numReplicas")
    resource_views: Optional[List[StrictStr]] = Field(default=None, description="The list of resource views that should be updated with all the replicas that are managed by this pool.", alias="resourceViews")
    self_link: Optional[StrictStr] = Field(default=None, description="[Output Only] A self-link to the replica pool.", alias="selfLink")
    target_pool: Optional[StrictStr] = Field(default=None, description="Deprecated, please use target_pools instead.", alias="targetPool")
    target_pools: Optional[List[StrictStr]] = Field(default=None, description="A list of target pools to update with the replicas that are managed by this pool. If specified, the replicas in this replica pool will be added to the specified target pools for load balancing purposes. The replica pool must live in the same region as the specified target pools. These values must be the target pool resource names, and not fully qualified URLs.", alias="targetPools")
    template: Optional[Template] = None
    type: Optional[StrictStr] = Field(default=None, description="Deprecated! Do not set.")
    __properties: ClassVar[List[str]] = ["autoRestart", "baseInstanceName", "currentNumReplicas", "description", "healthChecks", "initialNumReplicas", "labels", "name", "numReplicas", "resourceViews", "selfLink", "targetPool", "targetPools", "template", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Pool from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in health_checks (list)
        _items = []
        if self.health_checks:
            for _item_health_checks in self.health_checks:
                if _item_health_checks:
                    _items.append(_item_health_checks.to_dict())
            _dict['healthChecks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item_labels in self.labels:
                if _item_labels:
                    _items.append(_item_labels.to_dict())
            _dict['labels'] = _items
        # override the default output from pydantic by calling `to_dict()` of template
        if self.template:
            _dict['template'] = self.template.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Pool from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoRestart": obj.get("autoRestart"),
            "baseInstanceName": obj.get("baseInstanceName"),
            "currentNumReplicas": obj.get("currentNumReplicas"),
            "description": obj.get("description"),
            "healthChecks": [HealthCheck.from_dict(_item) for _item in obj["healthChecks"]] if obj.get("healthChecks") is not None else None,
            "initialNumReplicas": obj.get("initialNumReplicas"),
            "labels": [Label.from_dict(_item) for _item in obj["labels"]] if obj.get("labels") is not None else None,
            "name": obj.get("name"),
            "numReplicas": obj.get("numReplicas"),
            "resourceViews": obj.get("resourceViews"),
            "selfLink": obj.get("selfLink"),
            "targetPool": obj.get("targetPool"),
            "targetPools": obj.get("targetPools"),
            "template": Template.from_dict(obj["template"]) if obj.get("template") is not None else None,
            "type": obj.get("type")
        })
        return _obj



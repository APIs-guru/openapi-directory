# coding: utf-8

"""
    Replica Pool

    The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.access_config import AccessConfig
from typing import Optional, Set
from typing_extensions import Self

class NetworkInterface(BaseModel):
    """
    A Compute Engine NetworkInterface resource. Identical to the NetworkInterface on the corresponding Compute Engine resource.
    """ # noqa: E501
    access_configs: Optional[List[AccessConfig]] = Field(default=None, description="An array of configurations for this interface. This specifies how this interface is configured to interact with other network services.", alias="accessConfigs")
    network: Optional[StrictStr] = Field(default=None, description="Name the Network resource to which this interface applies.")
    network_ip: Optional[StrictStr] = Field(default=None, description="An optional IPV4 internal network address to assign to the instance for this network interface.", alias="networkIp")
    __properties: ClassVar[List[str]] = ["accessConfigs", "network", "networkIp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkInterface from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in access_configs (list)
        _items = []
        if self.access_configs:
            for _item_access_configs in self.access_configs:
                if _item_access_configs:
                    _items.append(_item_access_configs.to_dict())
            _dict['accessConfigs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkInterface from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessConfigs": [AccessConfig.from_dict(_item) for _item in obj["accessConfigs"]] if obj.get("accessConfigs") is not None else None,
            "network": obj.get("network"),
            "networkIp": obj.get("networkIp")
        })
        return _obj



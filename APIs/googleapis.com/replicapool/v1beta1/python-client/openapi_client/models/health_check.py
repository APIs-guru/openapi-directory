# coding: utf-8

"""
    Replica Pool

    The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class HealthCheck(BaseModel):
    """
    HealthCheck
    """ # noqa: E501
    check_interval_sec: Optional[StrictInt] = Field(default=None, description="How often (in seconds) to make HTTP requests for this healthcheck. The default value is 5 seconds.", alias="checkIntervalSec")
    description: Optional[StrictStr] = Field(default=None, description="The description for this health check.")
    healthy_threshold: Optional[StrictInt] = Field(default=None, description="The number of consecutive health check requests that need to succeed before the replica is considered healthy again. The default value is 2.", alias="healthyThreshold")
    host: Optional[StrictStr] = Field(default=None, description="The value of the host header in the HTTP health check request. If left empty (default value), the localhost IP 127.0.0.1 will be used.")
    name: Optional[StrictStr] = Field(default=None, description="The name of this health check.")
    path: Optional[StrictStr] = Field(default=None, description="The localhost request path to send this health check, in the format /path/to/use. For example, /healthcheck.")
    port: Optional[StrictInt] = Field(default=None, description="The TCP port for the health check requests.")
    timeout_sec: Optional[StrictInt] = Field(default=None, description="How long (in seconds) to wait before a timeout failure for this healthcheck. The default value is 5 seconds.", alias="timeoutSec")
    unhealthy_threshold: Optional[StrictInt] = Field(default=None, description="The number of consecutive health check requests that need to fail in order to consider the replica unhealthy. The default value is 2.", alias="unhealthyThreshold")
    __properties: ClassVar[List[str]] = ["checkIntervalSec", "description", "healthyThreshold", "host", "name", "path", "port", "timeoutSec", "unhealthyThreshold"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HealthCheck from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HealthCheck from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "checkIntervalSec": obj.get("checkIntervalSec"),
            "description": obj.get("description"),
            "healthyThreshold": obj.get("healthyThreshold"),
            "host": obj.get("host"),
            "name": obj.get("name"),
            "path": obj.get("path"),
            "port": obj.get("port"),
            "timeoutSec": obj.get("timeoutSec"),
            "unhealthyThreshold": obj.get("unhealthyThreshold")
        })
        return _obj



# coding: utf-8

"""
    Replica Pool

    The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.action import Action
from openapi_client.models.health_check import HealthCheck
from openapi_client.models.vm_params import VmParams
from typing import Optional, Set
from typing_extensions import Self

class Template(BaseModel):
    """
    The template used for creating replicas in the pool.
    """ # noqa: E501
    action: Optional[Action] = None
    health_checks: Optional[List[HealthCheck]] = Field(default=None, description="A list of HTTP Health Checks to configure for this replica pool and all virtual machines in this replica pool.", alias="healthChecks")
    version: Optional[StrictStr] = Field(default=None, description="A free-form string describing the version of this template. You can provide any versioning string you would like. For example, version1 or template-v1.")
    vm_params: Optional[VmParams] = Field(default=None, alias="vmParams")
    __properties: ClassVar[List[str]] = ["action", "healthChecks", "version", "vmParams"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Template from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of action
        if self.action:
            _dict['action'] = self.action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in health_checks (list)
        _items = []
        if self.health_checks:
            for _item_health_checks in self.health_checks:
                if _item_health_checks:
                    _items.append(_item_health_checks.to_dict())
            _dict['healthChecks'] = _items
        # override the default output from pydantic by calling `to_dict()` of vm_params
        if self.vm_params:
            _dict['vmParams'] = self.vm_params.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Template from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": Action.from_dict(obj["action"]) if obj.get("action") is not None else None,
            "healthChecks": [HealthCheck.from_dict(_item) for _item in obj["healthChecks"]] if obj.get("healthChecks") is not None else None,
            "version": obj.get("version"),
            "vmParams": VmParams.from_dict(obj["vmParams"]) if obj.get("vmParams") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Replica Pool

    The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ReplicaStatus(BaseModel):
    """
    The current status of a Replica.
    """ # noqa: E501
    details: Optional[StrictStr] = Field(default=None, description="[Output Only] Human-readable details about the current state of the replica")
    state: Optional[StrictStr] = Field(default=None, description="[Output Only] The state of the Replica.")
    template_version: Optional[StrictStr] = Field(default=None, description="[Output Only] The template used to build the replica.", alias="templateVersion")
    vm_link: Optional[StrictStr] = Field(default=None, description="[Output Only] Link to the virtual machine that this Replica represents.", alias="vmLink")
    vm_start_time: Optional[StrictStr] = Field(default=None, description="[Output Only] The time that this Replica got to the RUNNING state, in RFC 3339 format. If the start time is unknown, UNKNOWN is returned.", alias="vmStartTime")
    __properties: ClassVar[List[str]] = ["details", "state", "templateVersion", "vmLink", "vmStartTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReplicaStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReplicaStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "details": obj.get("details"),
            "state": obj.get("state"),
            "templateVersion": obj.get("templateVersion"),
            "vmLink": obj.get("vmLink"),
            "vmStartTime": obj.get("vmStartTime")
        })
        return _obj



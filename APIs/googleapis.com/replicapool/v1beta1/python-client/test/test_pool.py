# coding: utf-8

"""
    Replica Pool

    The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.pool import Pool

class TestPool(unittest.TestCase):
    """Pool unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Pool:
        """Test Pool
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Pool`
        """
        model = Pool()
        if include_optional:
            return Pool(
                auto_restart = True,
                base_instance_name = '',
                current_num_replicas = 56,
                description = '',
                health_checks = [
                    openapi_client.models.health_check.HealthCheck(
                        check_interval_sec = 56, 
                        description = '', 
                        healthy_threshold = 56, 
                        host = '', 
                        name = '', 
                        path = '', 
                        port = 56, 
                        timeout_sec = 56, 
                        unhealthy_threshold = 56, )
                    ],
                initial_num_replicas = 56,
                labels = [
                    openapi_client.models.label.Label(
                        key = '', 
                        value = '', )
                    ],
                name = '',
                num_replicas = 56,
                resource_views = [
                    ''
                    ],
                self_link = '',
                target_pool = '',
                target_pools = [
                    ''
                    ],
                template = openapi_client.models.template.Template(
                    action = openapi_client.models.action.Action(
                        commands = [
                            ''
                            ], 
                        env_variables = [
                            openapi_client.models.env_variable.EnvVariable(
                                hidden = True, 
                                name = '', 
                                value = '', )
                            ], 
                        timeout_milli_seconds = 56, ), 
                    health_checks = [
                        openapi_client.models.health_check.HealthCheck(
                            check_interval_sec = 56, 
                            description = '', 
                            healthy_threshold = 56, 
                            host = '', 
                            name = '', 
                            path = '', 
                            port = 56, 
                            timeout_sec = 56, 
                            unhealthy_threshold = 56, )
                        ], 
                    version = '', 
                    vm_params = openapi_client.models.vm_params.VmParams(
                        base_instance_name = '', 
                        can_ip_forward = True, 
                        description = '', 
                        disks_to_attach = [
                            openapi_client.models.existing_disk.ExistingDisk(
                                attachment = openapi_client.models.disk_attachment.DiskAttachment(
                                    device_name = '', 
                                    index = 56, ), 
                                source = '', )
                            ], 
                        disks_to_create = [
                            openapi_client.models.new_disk.NewDisk(
                                auto_delete = True, 
                                boot = True, 
                                initialize_params = openapi_client.models.new_disk_initialize_params.NewDiskInitializeParams(
                                    disk_size_gb = '', 
                                    disk_type = '', 
                                    source_image = '', ), )
                            ], 
                        machine_type = '', 
                        metadata = openapi_client.models.metadata.Metadata(
                            finger_print = '', 
                            items = [
                                openapi_client.models.metadata_item.MetadataItem(
                                    key = '', 
                                    value = '', )
                                ], ), 
                        network_interfaces = [
                            openapi_client.models.network_interface.NetworkInterface(
                                access_configs = [
                                    openapi_client.models.access_config.AccessConfig(
                                        name = '', 
                                        nat_ip = '', 
                                        type = '', )
                                    ], 
                                network = '', 
                                network_ip = '', )
                            ], 
                        on_host_maintenance = '', 
                        service_accounts = [
                            openapi_client.models.service_account.ServiceAccount(
                                email = '', 
                                scopes = [
                                    ''
                                    ], )
                            ], 
                        tags = openapi_client.models.tag.Tag(
                            finger_print = '', ), ), ),
                type = ''
            )
        else:
            return Pool(
        )
        """

    def testPool(self):
        """Test Pool"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

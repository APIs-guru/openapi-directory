# coding: utf-8

"""
    Replica Pool

    The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.vm_params import VmParams

class TestVmParams(unittest.TestCase):
    """VmParams unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VmParams:
        """Test VmParams
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VmParams`
        """
        model = VmParams()
        if include_optional:
            return VmParams(
                base_instance_name = '',
                can_ip_forward = True,
                description = '',
                disks_to_attach = [
                    openapi_client.models.existing_disk.ExistingDisk(
                        attachment = openapi_client.models.disk_attachment.DiskAttachment(
                            device_name = '', 
                            index = 56, ), 
                        source = '', )
                    ],
                disks_to_create = [
                    openapi_client.models.new_disk.NewDisk(
                        attachment = openapi_client.models.disk_attachment.DiskAttachment(
                            device_name = '', 
                            index = 56, ), 
                        auto_delete = True, 
                        boot = True, 
                        initialize_params = openapi_client.models.new_disk_initialize_params.NewDiskInitializeParams(
                            disk_size_gb = '', 
                            disk_type = '', 
                            source_image = '', ), )
                    ],
                machine_type = '',
                metadata = openapi_client.models.metadata.Metadata(
                    finger_print = '', 
                    items = [
                        openapi_client.models.metadata_item.MetadataItem(
                            key = '', 
                            value = '', )
                        ], ),
                network_interfaces = [
                    openapi_client.models.network_interface.NetworkInterface(
                        access_configs = [
                            openapi_client.models.access_config.AccessConfig(
                                name = '', 
                                nat_ip = '', 
                                type = '', )
                            ], 
                        network = '', 
                        network_ip = '', )
                    ],
                on_host_maintenance = '',
                service_accounts = [
                    openapi_client.models.service_account.ServiceAccount(
                        email = '', 
                        scopes = [
                            ''
                            ], )
                    ],
                tags = openapi_client.models.tag.Tag(
                    finger_print = '', 
                    items = [
                        ''
                        ], )
            )
        else:
            return VmParams(
        )
        """

    def testVmParams(self):
        """Test VmParams"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

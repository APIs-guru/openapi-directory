# coding: utf-8

"""
    Web Risk API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_webrisk_v1_compute_threat_list_diff_response_checksum import GoogleCloudWebriskV1ComputeThreatListDiffResponseChecksum
from openapi_client.models.google_cloud_webrisk_v1_threat_entry_additions import GoogleCloudWebriskV1ThreatEntryAdditions
from openapi_client.models.google_cloud_webrisk_v1_threat_entry_removals import GoogleCloudWebriskV1ThreatEntryRemovals
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudWebriskV1ComputeThreatListDiffResponse(BaseModel):
    """
    GoogleCloudWebriskV1ComputeThreatListDiffResponse
    """ # noqa: E501
    additions: Optional[GoogleCloudWebriskV1ThreatEntryAdditions] = None
    checksum: Optional[GoogleCloudWebriskV1ComputeThreatListDiffResponseChecksum] = None
    new_version_token: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The new opaque client version token. This should be retained by the client and passed into the next call of ComputeThreatListDiff as 'version_token'. A separate version token should be stored and used for each threatList.", alias="newVersionToken")
    recommended_next_diff: Optional[StrictStr] = Field(default=None, description="The soonest the client should wait before issuing any diff request. Querying sooner is unlikely to produce a meaningful diff. Waiting longer is acceptable considering the use case. If this field is not set clients may update as soon as they want.", alias="recommendedNextDiff")
    removals: Optional[GoogleCloudWebriskV1ThreatEntryRemovals] = None
    response_type: Optional[StrictStr] = Field(default=None, description="The type of response. This may indicate that an action must be taken by the client when the response is received.", alias="responseType")
    __properties: ClassVar[List[str]] = ["additions", "checksum", "newVersionToken", "recommendedNextDiff", "removals", "responseType"]

    @field_validator('response_type')
    def response_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RESPONSE_TYPE_UNSPECIFIED', 'DIFF', 'RESET']):
            raise ValueError("must be one of enum values ('RESPONSE_TYPE_UNSPECIFIED', 'DIFF', 'RESET')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudWebriskV1ComputeThreatListDiffResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of additions
        if self.additions:
            _dict['additions'] = self.additions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of checksum
        if self.checksum:
            _dict['checksum'] = self.checksum.to_dict()
        # override the default output from pydantic by calling `to_dict()` of removals
        if self.removals:
            _dict['removals'] = self.removals.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudWebriskV1ComputeThreatListDiffResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additions": GoogleCloudWebriskV1ThreatEntryAdditions.from_dict(obj["additions"]) if obj.get("additions") is not None else None,
            "checksum": GoogleCloudWebriskV1ComputeThreatListDiffResponseChecksum.from_dict(obj["checksum"]) if obj.get("checksum") is not None else None,
            "newVersionToken": obj.get("newVersionToken"),
            "recommendedNextDiff": obj.get("recommendedNextDiff"),
            "removals": GoogleCloudWebriskV1ThreatEntryRemovals.from_dict(obj["removals"]) if obj.get("removals") is not None else None,
            "responseType": obj.get("responseType")
        })
        return _obj



# coding: utf-8

"""
    Web Risk API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudWebriskV1RiceDeltaEncoding(BaseModel):
    """
    The Rice-Golomb encoded data. Used for sending compressed 4-byte hashes or compressed removal indices.
    """ # noqa: E501
    encoded_data: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The encoded deltas that are encoded using the Golomb-Rice coder.", alias="encodedData")
    entry_count: Optional[StrictInt] = Field(default=None, description="The number of entries that are delta encoded in the encoded data. If only a single integer was encoded, this will be zero and the single value will be stored in `first_value`.", alias="entryCount")
    first_value: Optional[StrictStr] = Field(default=None, description="The offset of the first entry in the encoded data, or, if only a single integer was encoded, that single integer's value. If the field is empty or missing, assume zero.", alias="firstValue")
    rice_parameter: Optional[StrictInt] = Field(default=None, description="The Golomb-Rice parameter, which is a number between 2 and 28. This field is missing (that is, zero) if `num_entries` is zero.", alias="riceParameter")
    __properties: ClassVar[List[str]] = ["encodedData", "entryCount", "firstValue", "riceParameter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudWebriskV1RiceDeltaEncoding from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudWebriskV1RiceDeltaEncoding from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "encodedData": obj.get("encodedData"),
            "entryCount": obj.get("entryCount"),
            "firstValue": obj.get("firstValue"),
            "riceParameter": obj.get("riceParameter")
        })
        return _obj



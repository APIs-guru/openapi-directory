# coding: utf-8

"""
    Secret Manager API

    Stores sensitive data such as API keys, passwords, and certificates. Provides convenience while improving security. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.replication import Replication
from openapi_client.models.rotation import Rotation
from openapi_client.models.topic import Topic
from typing import Optional, Set
from typing_extensions import Self

class Secret(BaseModel):
    """
    A Secret is a logical secret whose value and versions can be accessed. A Secret is made up of zero or more SecretVersions that represent the secret data.
    """ # noqa: E501
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Custom metadata about the secret. Annotations are distinct from various forms of labels. Annotations exist to allow client tools to store their own state information without requiring a database. Annotation keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, begin and end with an alphanumeric character ([a-z0-9A-Z]), and may have dashes (-), underscores (_), dots (.), and alphanumerics in between these symbols. The total size of annotation keys and values must be less than 16KiB.")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which the Secret was created.", alias="createTime")
    etag: Optional[StrictStr] = Field(default=None, description="Optional. Etag of the currently stored Secret.")
    expire_time: Optional[StrictStr] = Field(default=None, description="Optional. Timestamp in UTC when the Secret is scheduled to expire. This is always provided on output, regardless of what was sent on input.", alias="expireTime")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The labels assigned to this Secret. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: `\\p{Ll}\\p{Lo}{0,62}` Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: `[\\p{Ll}\\p{Lo}\\p{N}_-]{0,63}` No more than 64 labels can be assigned to a given resource.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the Secret in the format `projects/*/secrets/*`.")
    replication: Optional[Replication] = None
    rotation: Optional[Rotation] = None
    topics: Optional[List[Topic]] = Field(default=None, description="Optional. A list of up to 10 Pub/Sub topics to which messages are published when control plane operations are called on the secret or its versions.")
    ttl: Optional[StrictStr] = Field(default=None, description="Input only. The TTL for the Secret.")
    version_aliases: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Mapping from version alias to version name. A version alias is a string with a maximum length of 63 characters and can contain uppercase and lowercase letters, numerals, and the hyphen (`-`) and underscore ('_') characters. An alias string must start with a letter and cannot be the string 'latest' or 'NEW'. No more than 50 aliases can be assigned to a given secret. Version-Alias pairs will be viewable via GetSecret and modifiable via UpdateSecret. Access by alias is only be supported on GetSecretVersion and AccessSecretVersion.", alias="versionAliases")
    __properties: ClassVar[List[str]] = ["annotations", "createTime", "etag", "expireTime", "labels", "name", "replication", "rotation", "topics", "ttl", "versionAliases"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Secret from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of replication
        if self.replication:
            _dict['replication'] = self.replication.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rotation
        if self.rotation:
            _dict['rotation'] = self.rotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in topics (list)
        _items = []
        if self.topics:
            for _item_topics in self.topics:
                if _item_topics:
                    _items.append(_item_topics.to_dict())
            _dict['topics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Secret from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "createTime": obj.get("createTime"),
            "etag": obj.get("etag"),
            "expireTime": obj.get("expireTime"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "replication": Replication.from_dict(obj["replication"]) if obj.get("replication") is not None else None,
            "rotation": Rotation.from_dict(obj["rotation"]) if obj.get("rotation") is not None else None,
            "topics": [Topic.from_dict(_item) for _item in obj["topics"]] if obj.get("topics") is not None else None,
            "ttl": obj.get("ttl"),
            "versionAliases": obj.get("versionAliases")
        })
        return _obj



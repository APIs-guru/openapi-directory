# coding: utf-8

"""
    Secret Manager API

    Stores sensitive data such as API keys, passwords, and certificates. Provides convenience while improving security. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.secret import Secret

class TestSecret(unittest.TestCase):
    """Secret unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Secret:
        """Test Secret
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Secret`
        """
        model = Secret()
        if include_optional:
            return Secret(
                annotations = {
                    'key' : ''
                    },
                create_time = '',
                etag = '',
                expire_time = '',
                labels = {
                    'key' : ''
                    },
                name = '',
                replication = openapi_client.models.replication.Replication(
                    automatic = openapi_client.models.automatic.Automatic(
                        customer_managed_encryption = openapi_client.models.customer_managed_encryption.CustomerManagedEncryption(
                            kms_key_name = '', ), ), 
                    user_managed = openapi_client.models.user_managed.UserManaged(
                        replicas = [
                            openapi_client.models.replica.Replica(
                                location = '', )
                            ], ), ),
                rotation = openapi_client.models.rotation.Rotation(
                    next_rotation_time = '', 
                    rotation_period = '', ),
                topics = [
                    openapi_client.models.topic.Topic(
                        name = '', )
                    ],
                ttl = '',
                version_aliases = {
                    'key' : ''
                    }
            )
        else:
            return Secret(
        )
        """

    def testSecret(self):
        """Test Secret"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

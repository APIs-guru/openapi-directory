# coding: utf-8

"""
    Cloud Channel API

    The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_channel_v1_constraints import GoogleCloudChannelV1Constraints

class TestGoogleCloudChannelV1Constraints(unittest.TestCase):
    """GoogleCloudChannelV1Constraints unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudChannelV1Constraints:
        """Test GoogleCloudChannelV1Constraints
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudChannelV1Constraints`
        """
        model = GoogleCloudChannelV1Constraints()
        if include_optional:
            return GoogleCloudChannelV1Constraints(
                customer_constraints = openapi_client.models.google_cloud_channel_v1_customer_constraints.GoogleCloudChannelV1CustomerConstraints(
                    allowed_customer_types = [
                        'CUSTOMER_TYPE_UNSPECIFIED'
                        ], 
                    allowed_regions = [
                        ''
                        ], 
                    promotional_order_types = [
                        'PROMOTIONAL_TYPE_UNSPECIFIED'
                        ], )
            )
        else:
            return GoogleCloudChannelV1Constraints(
        )
        """

    def testGoogleCloudChannelV1Constraints(self):
        """Test GoogleCloudChannelV1Constraints"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Channel API

    The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_channel_v1_fetch_report_results_response import GoogleCloudChannelV1FetchReportResultsResponse

class TestGoogleCloudChannelV1FetchReportResultsResponse(unittest.TestCase):
    """GoogleCloudChannelV1FetchReportResultsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudChannelV1FetchReportResultsResponse:
        """Test GoogleCloudChannelV1FetchReportResultsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudChannelV1FetchReportResultsResponse`
        """
        model = GoogleCloudChannelV1FetchReportResultsResponse()
        if include_optional:
            return GoogleCloudChannelV1FetchReportResultsResponse(
                next_page_token = '',
                report_metadata = openapi_client.models.google_cloud_channel_v1_report_results_metadata.GoogleCloudChannelV1ReportResultsMetadata(
                    date_range = openapi_client.models.google_cloud_channel_v1_date_range.GoogleCloudChannelV1DateRange(
                        invoice_end_date = openapi_client.models.google_type_date.GoogleTypeDate(
                            day = 56, 
                            month = 56, 
                            year = 56, ), 
                        invoice_start_date = openapi_client.models.google_type_date.GoogleTypeDate(
                            day = 56, 
                            month = 56, 
                            year = 56, ), 
                        usage_end_date_time = openapi_client.models.google_type_date_time.GoogleTypeDateTime(
                            day = 56, 
                            hours = 56, 
                            minutes = 56, 
                            month = 56, 
                            nanos = 56, 
                            seconds = 56, 
                            time_zone = openapi_client.models.google_type_time_zone.GoogleTypeTimeZone(
                                id = '', 
                                version = '', ), 
                            utc_offset = '', 
                            year = 56, ), 
                        usage_start_date_time = openapi_client.models.google_type_date_time.GoogleTypeDateTime(
                            day = 56, 
                            hours = 56, 
                            minutes = 56, 
                            month = 56, 
                            nanos = 56, 
                            seconds = 56, 
                            utc_offset = '', 
                            year = 56, ), ), 
                    preceding_date_range = openapi_client.models.google_cloud_channel_v1_date_range.GoogleCloudChannelV1DateRange(), 
                    report = openapi_client.models.google_cloud_channel_v1_report.GoogleCloudChannelV1Report(
                        columns = [
                            openapi_client.models.google_cloud_channel_v1_column.GoogleCloudChannelV1Column(
                                column_id = '', 
                                data_type = 'DATA_TYPE_UNSPECIFIED', 
                                display_name = '', )
                            ], 
                        description = '', 
                        display_name = '', 
                        name = '', ), 
                    row_count = '', ),
                rows = [
                    openapi_client.models.google_cloud_channel_v1_row.GoogleCloudChannelV1Row(
                        partition_key = '', 
                        values = [
                            openapi_client.models.google_cloud_channel_v1_report_value.GoogleCloudChannelV1ReportValue(
                                date_time_value = openapi_client.models.google_type_date_time.GoogleTypeDateTime(
                                    day = 56, 
                                    hours = 56, 
                                    minutes = 56, 
                                    month = 56, 
                                    nanos = 56, 
                                    seconds = 56, 
                                    time_zone = openapi_client.models.google_type_time_zone.GoogleTypeTimeZone(
                                        id = '', 
                                        version = '', ), 
                                    utc_offset = '', 
                                    year = 56, ), 
                                date_value = openapi_client.models.google_type_date.GoogleTypeDate(
                                    day = 56, 
                                    month = 56, 
                                    year = 56, ), 
                                decimal_value = openapi_client.models.google_type_decimal.GoogleTypeDecimal(
                                    value = '', ), 
                                int_value = '', 
                                money_value = openapi_client.models.google_type_money.GoogleTypeMoney(
                                    currency_code = '', 
                                    nanos = 56, 
                                    units = '', ), 
                                string_value = '', )
                            ], )
                    ]
            )
        else:
            return GoogleCloudChannelV1FetchReportResultsResponse(
        )
        """

    def testGoogleCloudChannelV1FetchReportResultsResponse(self):
        """Test GoogleCloudChannelV1FetchReportResultsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

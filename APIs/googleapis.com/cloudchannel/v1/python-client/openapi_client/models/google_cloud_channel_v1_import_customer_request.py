# coding: utf-8

"""
    Cloud Channel API

    The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudChannelV1ImportCustomerRequest(BaseModel):
    """
    Request message for CloudChannelService.ImportCustomer
    """ # noqa: E501
    auth_token: Optional[StrictStr] = Field(default=None, description="Optional. The super admin of the resold customer generates this token to authorize a reseller to access their Cloud Identity and purchase entitlements on their behalf. You can omit this token after authorization. See https://support.google.com/a/answer/7643790 for more details.", alias="authToken")
    channel_partner_id: Optional[StrictStr] = Field(default=None, description="Optional. Cloud Identity ID of a channel partner who will be the direct reseller for the customer's order. This field is required for 2-tier transfer scenarios and can be provided via the request Parent binding as well.", alias="channelPartnerId")
    cloud_identity_id: Optional[StrictStr] = Field(default=None, description="Required. Customer's Cloud Identity ID", alias="cloudIdentityId")
    customer: Optional[StrictStr] = Field(default=None, description="Optional. Specifies the customer that will receive imported Cloud Identity information. Format: accounts/{account_id}/customers/{customer_id}")
    domain: Optional[StrictStr] = Field(default=None, description="Required. Customer domain.")
    overwrite_if_exists: Optional[StrictBool] = Field(default=None, description="Required. Choose to overwrite an existing customer if found. This must be set to true if there is an existing customer with a conflicting region code or domain.", alias="overwriteIfExists")
    __properties: ClassVar[List[str]] = ["authToken", "channelPartnerId", "cloudIdentityId", "customer", "domain", "overwriteIfExists"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1ImportCustomerRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1ImportCustomerRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authToken": obj.get("authToken"),
            "channelPartnerId": obj.get("channelPartnerId"),
            "cloudIdentityId": obj.get("cloudIdentityId"),
            "customer": obj.get("customer"),
            "domain": obj.get("domain"),
            "overwriteIfExists": obj.get("overwriteIfExists")
        })
        return _obj



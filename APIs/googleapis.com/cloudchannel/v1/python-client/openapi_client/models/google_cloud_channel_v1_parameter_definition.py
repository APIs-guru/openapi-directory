# coding: utf-8

"""
    Cloud Channel API

    The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_channel_v1_value import GoogleCloudChannelV1Value
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudChannelV1ParameterDefinition(BaseModel):
    """
    Parameter's definition. Specifies what parameter is required to use the current Offer to purchase.
    """ # noqa: E501
    allowed_values: Optional[List[GoogleCloudChannelV1Value]] = Field(default=None, description="If not empty, parameter values must be drawn from this list. For example, [us-west1, us-west2, ...] Applicable to STRING parameter type.", alias="allowedValues")
    max_value: Optional[GoogleCloudChannelV1Value] = Field(default=None, alias="maxValue")
    min_value: Optional[GoogleCloudChannelV1Value] = Field(default=None, alias="minValue")
    name: Optional[StrictStr] = Field(default=None, description="Name of the parameter.")
    optional: Optional[StrictBool] = Field(default=None, description="If set to true, parameter is optional to purchase this Offer.")
    parameter_type: Optional[StrictStr] = Field(default=None, description="Data type of the parameter. Minimal value, Maximum value and allowed values will use specified data type here.", alias="parameterType")
    __properties: ClassVar[List[str]] = ["allowedValues", "maxValue", "minValue", "name", "optional", "parameterType"]

    @field_validator('parameter_type')
    def parameter_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PARAMETER_TYPE_UNSPECIFIED', 'INT64', 'STRING', 'DOUBLE', 'BOOLEAN']):
            raise ValueError("must be one of enum values ('PARAMETER_TYPE_UNSPECIFIED', 'INT64', 'STRING', 'DOUBLE', 'BOOLEAN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1ParameterDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in allowed_values (list)
        _items = []
        if self.allowed_values:
            for _item_allowed_values in self.allowed_values:
                if _item_allowed_values:
                    _items.append(_item_allowed_values.to_dict())
            _dict['allowedValues'] = _items
        # override the default output from pydantic by calling `to_dict()` of max_value
        if self.max_value:
            _dict['maxValue'] = self.max_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_value
        if self.min_value:
            _dict['minValue'] = self.min_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1ParameterDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedValues": [GoogleCloudChannelV1Value.from_dict(_item) for _item in obj["allowedValues"]] if obj.get("allowedValues") is not None else None,
            "maxValue": GoogleCloudChannelV1Value.from_dict(obj["maxValue"]) if obj.get("maxValue") is not None else None,
            "minValue": GoogleCloudChannelV1Value.from_dict(obj["minValue"]) if obj.get("minValue") is not None else None,
            "name": obj.get("name"),
            "optional": obj.get("optional"),
            "parameterType": obj.get("parameterType")
        })
        return _obj



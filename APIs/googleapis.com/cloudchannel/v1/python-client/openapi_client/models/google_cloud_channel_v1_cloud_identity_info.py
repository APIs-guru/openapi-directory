# coding: utf-8

"""
    Cloud Channel API

    The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_channel_v1_edu_data import GoogleCloudChannelV1EduData
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudChannelV1CloudIdentityInfo(BaseModel):
    """
    Cloud Identity information for the Cloud Channel Customer.
    """ # noqa: E501
    admin_console_uri: Optional[StrictStr] = Field(default=None, description="Output only. URI of Customer's Admin console dashboard.", alias="adminConsoleUri")
    alternate_email: Optional[StrictStr] = Field(default=None, description="The alternate email.", alias="alternateEmail")
    customer_type: Optional[StrictStr] = Field(default=None, description="CustomerType indicates verification type needed for using services.", alias="customerType")
    edu_data: Optional[GoogleCloudChannelV1EduData] = Field(default=None, alias="eduData")
    is_domain_verified: Optional[StrictBool] = Field(default=None, description="Output only. Whether the domain is verified. This field is not returned for a Customer's cloud_identity_info resource. Partners can use the domains.get() method of the Workspace SDK's Directory API, or listen to the PRIMARY_DOMAIN_VERIFIED Pub/Sub event in to track domain verification of their resolve Workspace customers.", alias="isDomainVerified")
    language_code: Optional[StrictStr] = Field(default=None, description="Language code.", alias="languageCode")
    phone_number: Optional[StrictStr] = Field(default=None, description="Phone number associated with the Cloud Identity.", alias="phoneNumber")
    primary_domain: Optional[StrictStr] = Field(default=None, description="Output only. The primary domain name.", alias="primaryDomain")
    __properties: ClassVar[List[str]] = ["adminConsoleUri", "alternateEmail", "customerType", "eduData", "isDomainVerified", "languageCode", "phoneNumber", "primaryDomain"]

    @field_validator('customer_type')
    def customer_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CUSTOMER_TYPE_UNSPECIFIED', 'DOMAIN', 'TEAM']):
            raise ValueError("must be one of enum values ('CUSTOMER_TYPE_UNSPECIFIED', 'DOMAIN', 'TEAM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1CloudIdentityInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "admin_console_uri",
            "is_domain_verified",
            "primary_domain",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of edu_data
        if self.edu_data:
            _dict['eduData'] = self.edu_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1CloudIdentityInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adminConsoleUri": obj.get("adminConsoleUri"),
            "alternateEmail": obj.get("alternateEmail"),
            "customerType": obj.get("customerType"),
            "eduData": GoogleCloudChannelV1EduData.from_dict(obj["eduData"]) if obj.get("eduData") is not None else None,
            "isDomainVerified": obj.get("isDomainVerified"),
            "languageCode": obj.get("languageCode"),
            "phoneNumber": obj.get("phoneNumber"),
            "primaryDomain": obj.get("primaryDomain")
        })
        return _obj



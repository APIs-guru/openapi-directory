# coding: utf-8

"""
    Cloud Channel API

    The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_channel_v1_repricing_adjustment import GoogleCloudChannelV1RepricingAdjustment
from openapi_client.models.google_cloud_channel_v1_repricing_condition import GoogleCloudChannelV1RepricingCondition
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudChannelV1ConditionalOverride(BaseModel):
    """
    Specifies the override to conditionally apply.
    """ # noqa: E501
    adjustment: Optional[GoogleCloudChannelV1RepricingAdjustment] = None
    rebilling_basis: Optional[StrictStr] = Field(default=None, description="Required. The RebillingBasis to use for the applied override. Shows the relative cost based on your repricing costs.", alias="rebillingBasis")
    repricing_condition: Optional[GoogleCloudChannelV1RepricingCondition] = Field(default=None, alias="repricingCondition")
    __properties: ClassVar[List[str]] = ["adjustment", "rebillingBasis", "repricingCondition"]

    @field_validator('rebilling_basis')
    def rebilling_basis_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REBILLING_BASIS_UNSPECIFIED', 'COST_AT_LIST', 'DIRECT_CUSTOMER_COST']):
            raise ValueError("must be one of enum values ('REBILLING_BASIS_UNSPECIFIED', 'COST_AT_LIST', 'DIRECT_CUSTOMER_COST')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1ConditionalOverride from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of adjustment
        if self.adjustment:
            _dict['adjustment'] = self.adjustment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of repricing_condition
        if self.repricing_condition:
            _dict['repricingCondition'] = self.repricing_condition.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1ConditionalOverride from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adjustment": GoogleCloudChannelV1RepricingAdjustment.from_dict(obj["adjustment"]) if obj.get("adjustment") is not None else None,
            "rebillingBasis": obj.get("rebillingBasis"),
            "repricingCondition": GoogleCloudChannelV1RepricingCondition.from_dict(obj["repricingCondition"]) if obj.get("repricingCondition") is not None else None
        })
        return _obj



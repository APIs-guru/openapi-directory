# coding: utf-8

"""
    Cloud Channel API

    The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_channel_v1_period import GoogleCloudChannelV1Period
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudChannelV1Plan(BaseModel):
    """
    The payment plan for the Offer. Describes how to make a payment.
    """ # noqa: E501
    billing_account: Optional[StrictStr] = Field(default=None, description="Reseller Billing account to charge after an offer transaction. Only present for Google Cloud offers.", alias="billingAccount")
    payment_cycle: Optional[GoogleCloudChannelV1Period] = Field(default=None, alias="paymentCycle")
    payment_plan: Optional[StrictStr] = Field(default=None, description="Describes how a reseller will be billed.", alias="paymentPlan")
    payment_type: Optional[StrictStr] = Field(default=None, description="Specifies when the payment needs to happen.", alias="paymentType")
    trial_period: Optional[GoogleCloudChannelV1Period] = Field(default=None, alias="trialPeriod")
    __properties: ClassVar[List[str]] = ["billingAccount", "paymentCycle", "paymentPlan", "paymentType", "trialPeriod"]

    @field_validator('payment_plan')
    def payment_plan_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PAYMENT_PLAN_UNSPECIFIED', 'COMMITMENT', 'FLEXIBLE', 'FREE', 'TRIAL', 'OFFLINE']):
            raise ValueError("must be one of enum values ('PAYMENT_PLAN_UNSPECIFIED', 'COMMITMENT', 'FLEXIBLE', 'FREE', 'TRIAL', 'OFFLINE')")
        return value

    @field_validator('payment_type')
    def payment_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PAYMENT_TYPE_UNSPECIFIED', 'PREPAY', 'POSTPAY']):
            raise ValueError("must be one of enum values ('PAYMENT_TYPE_UNSPECIFIED', 'PREPAY', 'POSTPAY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1Plan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of payment_cycle
        if self.payment_cycle:
            _dict['paymentCycle'] = self.payment_cycle.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trial_period
        if self.trial_period:
            _dict['trialPeriod'] = self.trial_period.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1Plan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingAccount": obj.get("billingAccount"),
            "paymentCycle": GoogleCloudChannelV1Period.from_dict(obj["paymentCycle"]) if obj.get("paymentCycle") is not None else None,
            "paymentPlan": obj.get("paymentPlan"),
            "paymentType": obj.get("paymentType"),
            "trialPeriod": GoogleCloudChannelV1Period.from_dict(obj["trialPeriod"]) if obj.get("trialPeriod") is not None else None
        })
        return _obj



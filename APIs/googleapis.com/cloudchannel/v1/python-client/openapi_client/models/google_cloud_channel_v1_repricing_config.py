# coding: utf-8

"""
    Cloud Channel API

    The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_channel_v1_conditional_override import GoogleCloudChannelV1ConditionalOverride
from openapi_client.models.google_cloud_channel_v1_repricing_adjustment import GoogleCloudChannelV1RepricingAdjustment
from openapi_client.models.google_cloud_channel_v1_repricing_config_entitlement_granularity import GoogleCloudChannelV1RepricingConfigEntitlementGranularity
from openapi_client.models.google_type_date import GoogleTypeDate
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudChannelV1RepricingConfig(BaseModel):
    """
    Configuration for repricing a Google bill over a period of time.
    """ # noqa: E501
    adjustment: Optional[GoogleCloudChannelV1RepricingAdjustment] = None
    channel_partner_granularity: Optional[Dict[str, Any]] = Field(default=None, description="Applies the repricing configuration at the channel partner level. The channel partner value is derived from the resource name. Takes an empty json object. Deprecated: This is no longer supported. Use RepricingConfig.EntitlementGranularity instead.", alias="channelPartnerGranularity")
    conditional_overrides: Optional[List[GoogleCloudChannelV1ConditionalOverride]] = Field(default=None, description="The conditional overrides to apply for this configuration. If you list multiple overrides, only the first valid override is used. If you don't list any overrides, the API uses the normal adjustment and rebilling basis.", alias="conditionalOverrides")
    effective_invoice_month: Optional[GoogleTypeDate] = Field(default=None, alias="effectiveInvoiceMonth")
    entitlement_granularity: Optional[GoogleCloudChannelV1RepricingConfigEntitlementGranularity] = Field(default=None, alias="entitlementGranularity")
    rebilling_basis: Optional[StrictStr] = Field(default=None, description="Required. The RebillingBasis to use for this bill. Specifies the relative cost based on repricing costs you will apply.", alias="rebillingBasis")
    __properties: ClassVar[List[str]] = ["adjustment", "channelPartnerGranularity", "conditionalOverrides", "effectiveInvoiceMonth", "entitlementGranularity", "rebillingBasis"]

    @field_validator('rebilling_basis')
    def rebilling_basis_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REBILLING_BASIS_UNSPECIFIED', 'COST_AT_LIST', 'DIRECT_CUSTOMER_COST']):
            raise ValueError("must be one of enum values ('REBILLING_BASIS_UNSPECIFIED', 'COST_AT_LIST', 'DIRECT_CUSTOMER_COST')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1RepricingConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of adjustment
        if self.adjustment:
            _dict['adjustment'] = self.adjustment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in conditional_overrides (list)
        _items = []
        if self.conditional_overrides:
            for _item_conditional_overrides in self.conditional_overrides:
                if _item_conditional_overrides:
                    _items.append(_item_conditional_overrides.to_dict())
            _dict['conditionalOverrides'] = _items
        # override the default output from pydantic by calling `to_dict()` of effective_invoice_month
        if self.effective_invoice_month:
            _dict['effectiveInvoiceMonth'] = self.effective_invoice_month.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entitlement_granularity
        if self.entitlement_granularity:
            _dict['entitlementGranularity'] = self.entitlement_granularity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1RepricingConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adjustment": GoogleCloudChannelV1RepricingAdjustment.from_dict(obj["adjustment"]) if obj.get("adjustment") is not None else None,
            "channelPartnerGranularity": obj.get("channelPartnerGranularity"),
            "conditionalOverrides": [GoogleCloudChannelV1ConditionalOverride.from_dict(_item) for _item in obj["conditionalOverrides"]] if obj.get("conditionalOverrides") is not None else None,
            "effectiveInvoiceMonth": GoogleTypeDate.from_dict(obj["effectiveInvoiceMonth"]) if obj.get("effectiveInvoiceMonth") is not None else None,
            "entitlementGranularity": GoogleCloudChannelV1RepricingConfigEntitlementGranularity.from_dict(obj["entitlementGranularity"]) if obj.get("entitlementGranularity") is not None else None,
            "rebillingBasis": obj.get("rebillingBasis")
        })
        return _obj



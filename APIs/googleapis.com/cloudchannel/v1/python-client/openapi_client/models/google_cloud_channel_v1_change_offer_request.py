# coding: utf-8

"""
    Cloud Channel API

    The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_channel_v1_parameter import GoogleCloudChannelV1Parameter
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudChannelV1ChangeOfferRequest(BaseModel):
    """
    Request message for CloudChannelService.ChangeOffer.
    """ # noqa: E501
    billing_account: Optional[StrictStr] = Field(default=None, description="Optional. The billing account resource name that is used to pay for this entitlement when setting up billing on a trial subscription. This field is only relevant for multi-currency accounts. It should be left empty for single currency accounts.", alias="billingAccount")
    offer: Optional[StrictStr] = Field(default=None, description="Required. New Offer. Format: accounts/{account_id}/offers/{offer_id}.")
    parameters: Optional[List[GoogleCloudChannelV1Parameter]] = Field(default=None, description="Optional. Parameters needed to purchase the Offer. To view the available Parameters refer to the Offer.parameter_definitions from the desired offer.")
    purchase_order_id: Optional[StrictStr] = Field(default=None, description="Optional. Purchase order id provided by the reseller.", alias="purchaseOrderId")
    request_id: Optional[StrictStr] = Field(default=None, description="Optional. You can specify an optional unique request ID, and if you need to retry your request, the server will know to ignore the request if it's complete. For example, you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if it received the original operation with the same request ID. If it did, it will ignore the second request. The request ID must be a valid [UUID](https://tools.ietf.org/html/rfc4122) with the exception that zero UUID is not supported (`00000000-0000-0000-0000-000000000000`).", alias="requestId")
    __properties: ClassVar[List[str]] = ["billingAccount", "offer", "parameters", "purchaseOrderId", "requestId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1ChangeOfferRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1ChangeOfferRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingAccount": obj.get("billingAccount"),
            "offer": obj.get("offer"),
            "parameters": [GoogleCloudChannelV1Parameter.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "purchaseOrderId": obj.get("purchaseOrderId"),
            "requestId": obj.get("requestId")
        })
        return _obj



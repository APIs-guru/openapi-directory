# coding: utf-8

"""
    Cloud Channel API

    The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_channel_v1_price import GoogleCloudChannelV1Price
from openapi_client.models.google_cloud_channel_v1_price_tier import GoogleCloudChannelV1PriceTier
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudChannelV1PricePhase(BaseModel):
    """
    Specifies the price by the duration of months. For example, a 20% discount for the first six months, then a 10% discount starting on the seventh month.
    """ # noqa: E501
    first_period: Optional[StrictInt] = Field(default=None, description="Defines first period for the phase.", alias="firstPeriod")
    last_period: Optional[StrictInt] = Field(default=None, description="Defines first period for the phase.", alias="lastPeriod")
    period_type: Optional[StrictStr] = Field(default=None, description="Defines the phase period type.", alias="periodType")
    price: Optional[GoogleCloudChannelV1Price] = None
    price_tiers: Optional[List[GoogleCloudChannelV1PriceTier]] = Field(default=None, description="Price by the resource tiers.", alias="priceTiers")
    __properties: ClassVar[List[str]] = ["firstPeriod", "lastPeriod", "periodType", "price", "priceTiers"]

    @field_validator('period_type')
    def period_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PERIOD_TYPE_UNSPECIFIED', 'DAY', 'MONTH', 'YEAR']):
            raise ValueError("must be one of enum values ('PERIOD_TYPE_UNSPECIFIED', 'DAY', 'MONTH', 'YEAR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1PricePhase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in price_tiers (list)
        _items = []
        if self.price_tiers:
            for _item_price_tiers in self.price_tiers:
                if _item_price_tiers:
                    _items.append(_item_price_tiers.to_dict())
            _dict['priceTiers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1PricePhase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "firstPeriod": obj.get("firstPeriod"),
            "lastPeriod": obj.get("lastPeriod"),
            "periodType": obj.get("periodType"),
            "price": GoogleCloudChannelV1Price.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "priceTiers": [GoogleCloudChannelV1PriceTier.from_dict(_item) for _item in obj["priceTiers"]] if obj.get("priceTiers") is not None else None
        })
        return _obj



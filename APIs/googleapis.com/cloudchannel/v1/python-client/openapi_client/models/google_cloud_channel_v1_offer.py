# coding: utf-8

"""
    Cloud Channel API

    The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_channel_v1_constraints import GoogleCloudChannelV1Constraints
from openapi_client.models.google_cloud_channel_v1_marketing_info import GoogleCloudChannelV1MarketingInfo
from openapi_client.models.google_cloud_channel_v1_parameter_definition import GoogleCloudChannelV1ParameterDefinition
from openapi_client.models.google_cloud_channel_v1_plan import GoogleCloudChannelV1Plan
from openapi_client.models.google_cloud_channel_v1_price_by_resource import GoogleCloudChannelV1PriceByResource
from openapi_client.models.google_cloud_channel_v1_sku import GoogleCloudChannelV1Sku
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudChannelV1Offer(BaseModel):
    """
    Represents an offer made to resellers for purchase. An offer is associated with a Sku, has a plan for payment, a price, and defines the constraints for buying.
    """ # noqa: E501
    constraints: Optional[GoogleCloudChannelV1Constraints] = None
    deal_code: Optional[StrictStr] = Field(default=None, description="The deal code of the offer to get a special promotion or discount.", alias="dealCode")
    end_time: Optional[StrictStr] = Field(default=None, description="Output only. End of the Offer validity time.", alias="endTime")
    marketing_info: Optional[GoogleCloudChannelV1MarketingInfo] = Field(default=None, alias="marketingInfo")
    name: Optional[StrictStr] = Field(default=None, description="Resource Name of the Offer. Format: accounts/{account_id}/offers/{offer_id}")
    parameter_definitions: Optional[List[GoogleCloudChannelV1ParameterDefinition]] = Field(default=None, description="Parameters required to use current Offer to purchase.", alias="parameterDefinitions")
    plan: Optional[GoogleCloudChannelV1Plan] = None
    price_by_resources: Optional[List[GoogleCloudChannelV1PriceByResource]] = Field(default=None, description="Price for each monetizable resource type.", alias="priceByResources")
    sku: Optional[GoogleCloudChannelV1Sku] = None
    start_time: Optional[StrictStr] = Field(default=None, description="Start of the Offer validity time.", alias="startTime")
    __properties: ClassVar[List[str]] = ["constraints", "dealCode", "endTime", "marketingInfo", "name", "parameterDefinitions", "plan", "priceByResources", "sku", "startTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1Offer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "end_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of constraints
        if self.constraints:
            _dict['constraints'] = self.constraints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of marketing_info
        if self.marketing_info:
            _dict['marketingInfo'] = self.marketing_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in parameter_definitions (list)
        _items = []
        if self.parameter_definitions:
            for _item_parameter_definitions in self.parameter_definitions:
                if _item_parameter_definitions:
                    _items.append(_item_parameter_definitions.to_dict())
            _dict['parameterDefinitions'] = _items
        # override the default output from pydantic by calling `to_dict()` of plan
        if self.plan:
            _dict['plan'] = self.plan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in price_by_resources (list)
        _items = []
        if self.price_by_resources:
            for _item_price_by_resources in self.price_by_resources:
                if _item_price_by_resources:
                    _items.append(_item_price_by_resources.to_dict())
            _dict['priceByResources'] = _items
        # override the default output from pydantic by calling `to_dict()` of sku
        if self.sku:
            _dict['sku'] = self.sku.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1Offer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "constraints": GoogleCloudChannelV1Constraints.from_dict(obj["constraints"]) if obj.get("constraints") is not None else None,
            "dealCode": obj.get("dealCode"),
            "endTime": obj.get("endTime"),
            "marketingInfo": GoogleCloudChannelV1MarketingInfo.from_dict(obj["marketingInfo"]) if obj.get("marketingInfo") is not None else None,
            "name": obj.get("name"),
            "parameterDefinitions": [GoogleCloudChannelV1ParameterDefinition.from_dict(_item) for _item in obj["parameterDefinitions"]] if obj.get("parameterDefinitions") is not None else None,
            "plan": GoogleCloudChannelV1Plan.from_dict(obj["plan"]) if obj.get("plan") is not None else None,
            "priceByResources": [GoogleCloudChannelV1PriceByResource.from_dict(_item) for _item in obj["priceByResources"]] if obj.get("priceByResources") is not None else None,
            "sku": GoogleCloudChannelV1Sku.from_dict(obj["sku"]) if obj.get("sku") is not None else None,
            "startTime": obj.get("startTime")
        })
        return _obj



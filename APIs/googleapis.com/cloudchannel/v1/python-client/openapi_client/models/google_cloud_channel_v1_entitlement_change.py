# coding: utf-8

"""
    Cloud Channel API

    The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_channel_v1_parameter import GoogleCloudChannelV1Parameter
from openapi_client.models.google_cloud_channel_v1_provisioned_service import GoogleCloudChannelV1ProvisionedService
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudChannelV1EntitlementChange(BaseModel):
    """
    Change event entry for Entitlement order history
    """ # noqa: E501
    activation_reason: Optional[StrictStr] = Field(default=None, description="The Entitlement's activation reason", alias="activationReason")
    cancellation_reason: Optional[StrictStr] = Field(default=None, description="Cancellation reason for the Entitlement.", alias="cancellationReason")
    change_type: Optional[StrictStr] = Field(default=None, description="The change action type.", alias="changeType")
    create_time: Optional[StrictStr] = Field(default=None, description="The submitted time of the change.", alias="createTime")
    entitlement: Optional[StrictStr] = Field(default=None, description="Required. Resource name of an entitlement in the form: accounts/{account_id}/customers/{customer_id}/entitlements/{entitlement_id}")
    offer: Optional[StrictStr] = Field(default=None, description="Required. Resource name of the Offer at the time of change. Takes the form: accounts/{account_id}/offers/{offer_id}.")
    operator: Optional[StrictStr] = Field(default=None, description="Human-readable identifier that shows what operator made a change. When the operator_type is RESELLER, this is the user's email address. For all other operator types, this is empty.")
    operator_type: Optional[StrictStr] = Field(default=None, description="Operator type responsible for the change.", alias="operatorType")
    other_change_reason: Optional[StrictStr] = Field(default=None, description="e.g. purchase_number change reason, entered by CRS.", alias="otherChangeReason")
    parameters: Optional[List[GoogleCloudChannelV1Parameter]] = Field(default=None, description="Extended parameters, such as: purchase_order_number, gcp_details; internal_correlation_id, long_running_operation_id, order_id; etc.")
    provisioned_service: Optional[GoogleCloudChannelV1ProvisionedService] = Field(default=None, alias="provisionedService")
    suspension_reason: Optional[StrictStr] = Field(default=None, description="Suspension reason for the Entitlement.", alias="suspensionReason")
    __properties: ClassVar[List[str]] = ["activationReason", "cancellationReason", "changeType", "createTime", "entitlement", "offer", "operator", "operatorType", "otherChangeReason", "parameters", "provisionedService", "suspensionReason"]

    @field_validator('activation_reason')
    def activation_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTIVATION_REASON_UNSPECIFIED', 'RESELLER_REVOKED_SUSPENSION', 'CUSTOMER_ACCEPTED_PENDING_TOS', 'RENEWAL_SETTINGS_CHANGED', 'OTHER_ACTIVATION_REASON']):
            raise ValueError("must be one of enum values ('ACTIVATION_REASON_UNSPECIFIED', 'RESELLER_REVOKED_SUSPENSION', 'CUSTOMER_ACCEPTED_PENDING_TOS', 'RENEWAL_SETTINGS_CHANGED', 'OTHER_ACTIVATION_REASON')")
        return value

    @field_validator('cancellation_reason')
    def cancellation_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CANCELLATION_REASON_UNSPECIFIED', 'SERVICE_TERMINATED', 'RELATIONSHIP_ENDED', 'PARTIAL_TRANSFER']):
            raise ValueError("must be one of enum values ('CANCELLATION_REASON_UNSPECIFIED', 'SERVICE_TERMINATED', 'RELATIONSHIP_ENDED', 'PARTIAL_TRANSFER')")
        return value

    @field_validator('change_type')
    def change_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHANGE_TYPE_UNSPECIFIED', 'CREATED', 'PRICE_PLAN_SWITCHED', 'COMMITMENT_CHANGED', 'RENEWED', 'SUSPENDED', 'ACTIVATED', 'CANCELLED', 'SKU_CHANGED', 'RENEWAL_SETTING_CHANGED', 'PAID_SUBSCRIPTION_STARTED', 'LICENSE_CAP_CHANGED', 'SUSPENSION_DETAILS_CHANGED', 'TRIAL_END_DATE_EXTENDED', 'TRIAL_STARTED']):
            raise ValueError("must be one of enum values ('CHANGE_TYPE_UNSPECIFIED', 'CREATED', 'PRICE_PLAN_SWITCHED', 'COMMITMENT_CHANGED', 'RENEWED', 'SUSPENDED', 'ACTIVATED', 'CANCELLED', 'SKU_CHANGED', 'RENEWAL_SETTING_CHANGED', 'PAID_SUBSCRIPTION_STARTED', 'LICENSE_CAP_CHANGED', 'SUSPENSION_DETAILS_CHANGED', 'TRIAL_END_DATE_EXTENDED', 'TRIAL_STARTED')")
        return value

    @field_validator('operator_type')
    def operator_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OPERATOR_TYPE_UNSPECIFIED', 'CUSTOMER_SERVICE_REPRESENTATIVE', 'SYSTEM', 'CUSTOMER', 'RESELLER']):
            raise ValueError("must be one of enum values ('OPERATOR_TYPE_UNSPECIFIED', 'CUSTOMER_SERVICE_REPRESENTATIVE', 'SYSTEM', 'CUSTOMER', 'RESELLER')")
        return value

    @field_validator('suspension_reason')
    def suspension_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SUSPENSION_REASON_UNSPECIFIED', 'RESELLER_INITIATED', 'TRIAL_ENDED', 'RENEWAL_WITH_TYPE_CANCEL', 'PENDING_TOS_ACCEPTANCE', 'OTHER']):
            raise ValueError("must be one of enum values ('SUSPENSION_REASON_UNSPECIFIED', 'RESELLER_INITIATED', 'TRIAL_ENDED', 'RENEWAL_WITH_TYPE_CANCEL', 'PENDING_TOS_ACCEPTANCE', 'OTHER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1EntitlementChange from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of provisioned_service
        if self.provisioned_service:
            _dict['provisionedService'] = self.provisioned_service.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1EntitlementChange from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activationReason": obj.get("activationReason"),
            "cancellationReason": obj.get("cancellationReason"),
            "changeType": obj.get("changeType"),
            "createTime": obj.get("createTime"),
            "entitlement": obj.get("entitlement"),
            "offer": obj.get("offer"),
            "operator": obj.get("operator"),
            "operatorType": obj.get("operatorType"),
            "otherChangeReason": obj.get("otherChangeReason"),
            "parameters": [GoogleCloudChannelV1Parameter.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "provisionedService": GoogleCloudChannelV1ProvisionedService.from_dict(obj["provisionedService"]) if obj.get("provisionedService") is not None else None,
            "suspensionReason": obj.get("suspensionReason")
        })
        return _obj



# coding: utf-8

"""
    Cloud Channel API

    The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_type_date import GoogleTypeDate
from openapi_client.models.google_type_date_time import GoogleTypeDateTime
from openapi_client.models.google_type_decimal import GoogleTypeDecimal
from openapi_client.models.google_type_money import GoogleTypeMoney
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudChannelV1ReportValue(BaseModel):
    """
    A single report value.
    """ # noqa: E501
    date_time_value: Optional[GoogleTypeDateTime] = Field(default=None, alias="dateTimeValue")
    date_value: Optional[GoogleTypeDate] = Field(default=None, alias="dateValue")
    decimal_value: Optional[GoogleTypeDecimal] = Field(default=None, alias="decimalValue")
    int_value: Optional[StrictStr] = Field(default=None, description="A value of type `int`.", alias="intValue")
    money_value: Optional[GoogleTypeMoney] = Field(default=None, alias="moneyValue")
    string_value: Optional[StrictStr] = Field(default=None, description="A value of type `string`.", alias="stringValue")
    __properties: ClassVar[List[str]] = ["dateTimeValue", "dateValue", "decimalValue", "intValue", "moneyValue", "stringValue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1ReportValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of date_time_value
        if self.date_time_value:
            _dict['dateTimeValue'] = self.date_time_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of date_value
        if self.date_value:
            _dict['dateValue'] = self.date_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of decimal_value
        if self.decimal_value:
            _dict['decimalValue'] = self.decimal_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of money_value
        if self.money_value:
            _dict['moneyValue'] = self.money_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1ReportValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dateTimeValue": GoogleTypeDateTime.from_dict(obj["dateTimeValue"]) if obj.get("dateTimeValue") is not None else None,
            "dateValue": GoogleTypeDate.from_dict(obj["dateValue"]) if obj.get("dateValue") is not None else None,
            "decimalValue": GoogleTypeDecimal.from_dict(obj["decimalValue"]) if obj.get("decimalValue") is not None else None,
            "intValue": obj.get("intValue"),
            "moneyValue": GoogleTypeMoney.from_dict(obj["moneyValue"]) if obj.get("moneyValue") is not None else None,
            "stringValue": obj.get("stringValue")
        })
        return _obj



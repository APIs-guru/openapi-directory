# coding: utf-8

"""
    Cloud Channel API

    The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_channel_v1_cloud_identity_info import GoogleCloudChannelV1CloudIdentityInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudChannelV1ChannelPartnerLink(BaseModel):
    """
    Entity representing a link between distributors and their indirect resellers in an n-tier resale channel.
    """ # noqa: E501
    channel_partner_cloud_identity_info: Optional[GoogleCloudChannelV1CloudIdentityInfo] = Field(default=None, alias="channelPartnerCloudIdentityInfo")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp of when the channel partner link is created.", alias="createTime")
    invite_link_uri: Optional[StrictStr] = Field(default=None, description="Output only. URI of the web page where partner accepts the link invitation.", alias="inviteLinkUri")
    link_state: Optional[StrictStr] = Field(default=None, description="Required. State of the channel partner link.", alias="linkState")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name for the channel partner link, in the format accounts/{account_id}/channelPartnerLinks/{id}.")
    public_id: Optional[StrictStr] = Field(default=None, description="Output only. Public identifier that a customer must use to generate a transfer token to move to this distributor-reseller combination.", alias="publicId")
    reseller_cloud_identity_id: Optional[StrictStr] = Field(default=None, description="Required. Cloud Identity ID of the linked reseller.", alias="resellerCloudIdentityId")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp of when the channel partner link is updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["channelPartnerCloudIdentityInfo", "createTime", "inviteLinkUri", "linkState", "name", "publicId", "resellerCloudIdentityId", "updateTime"]

    @field_validator('link_state')
    def link_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHANNEL_PARTNER_LINK_STATE_UNSPECIFIED', 'INVITED', 'ACTIVE', 'REVOKED', 'SUSPENDED']):
            raise ValueError("must be one of enum values ('CHANNEL_PARTNER_LINK_STATE_UNSPECIFIED', 'INVITED', 'ACTIVE', 'REVOKED', 'SUSPENDED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1ChannelPartnerLink from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "invite_link_uri",
            "name",
            "public_id",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of channel_partner_cloud_identity_info
        if self.channel_partner_cloud_identity_info:
            _dict['channelPartnerCloudIdentityInfo'] = self.channel_partner_cloud_identity_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1ChannelPartnerLink from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channelPartnerCloudIdentityInfo": GoogleCloudChannelV1CloudIdentityInfo.from_dict(obj["channelPartnerCloudIdentityInfo"]) if obj.get("channelPartnerCloudIdentityInfo") is not None else None,
            "createTime": obj.get("createTime"),
            "inviteLinkUri": obj.get("inviteLinkUri"),
            "linkState": obj.get("linkState"),
            "name": obj.get("name"),
            "publicId": obj.get("publicId"),
            "resellerCloudIdentityId": obj.get("resellerCloudIdentityId"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



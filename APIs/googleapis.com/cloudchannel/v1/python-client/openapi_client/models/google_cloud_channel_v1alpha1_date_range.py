# coding: utf-8

"""
    Cloud Channel API

    The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_type_date import GoogleTypeDate
from openapi_client.models.google_type_date_time import GoogleTypeDateTime
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudChannelV1alpha1DateRange(BaseModel):
    """
    A representation of usage or invoice date ranges.
    """ # noqa: E501
    invoice_end_date: Optional[GoogleTypeDate] = Field(default=None, alias="invoiceEndDate")
    invoice_start_date: Optional[GoogleTypeDate] = Field(default=None, alias="invoiceStartDate")
    usage_end_date_time: Optional[GoogleTypeDateTime] = Field(default=None, alias="usageEndDateTime")
    usage_start_date_time: Optional[GoogleTypeDateTime] = Field(default=None, alias="usageStartDateTime")
    __properties: ClassVar[List[str]] = ["invoiceEndDate", "invoiceStartDate", "usageEndDateTime", "usageStartDateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1alpha1DateRange from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of invoice_end_date
        if self.invoice_end_date:
            _dict['invoiceEndDate'] = self.invoice_end_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice_start_date
        if self.invoice_start_date:
            _dict['invoiceStartDate'] = self.invoice_start_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage_end_date_time
        if self.usage_end_date_time:
            _dict['usageEndDateTime'] = self.usage_end_date_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage_start_date_time
        if self.usage_start_date_time:
            _dict['usageStartDateTime'] = self.usage_start_date_time.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1alpha1DateRange from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "invoiceEndDate": GoogleTypeDate.from_dict(obj["invoiceEndDate"]) if obj.get("invoiceEndDate") is not None else None,
            "invoiceStartDate": GoogleTypeDate.from_dict(obj["invoiceStartDate"]) if obj.get("invoiceStartDate") is not None else None,
            "usageEndDateTime": GoogleTypeDateTime.from_dict(obj["usageEndDateTime"]) if obj.get("usageEndDateTime") is not None else None,
            "usageStartDateTime": GoogleTypeDateTime.from_dict(obj["usageStartDateTime"]) if obj.get("usageStartDateTime") is not None else None
        })
        return _obj



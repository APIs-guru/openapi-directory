# coding: utf-8

"""
    Cloud Channel API

    The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudChannelV1TransferEligibility(BaseModel):
    """
    Specifies transfer eligibility of a SKU.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Localized description if reseller is not eligible to transfer the SKU.")
    ineligibility_reason: Optional[StrictStr] = Field(default=None, description="Specified the reason for ineligibility.", alias="ineligibilityReason")
    is_eligible: Optional[StrictBool] = Field(default=None, description="Whether reseller is eligible to transfer the SKU.", alias="isEligible")
    __properties: ClassVar[List[str]] = ["description", "ineligibilityReason", "isEligible"]

    @field_validator('ineligibility_reason')
    def ineligibility_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REASON_UNSPECIFIED', 'PENDING_TOS_ACCEPTANCE', 'SKU_NOT_ELIGIBLE', 'SKU_SUSPENDED', 'CHANNEL_PARTNER_NOT_AUTHORIZED_FOR_SKU']):
            raise ValueError("must be one of enum values ('REASON_UNSPECIFIED', 'PENDING_TOS_ACCEPTANCE', 'SKU_NOT_ELIGIBLE', 'SKU_SUSPENDED', 'CHANNEL_PARTNER_NOT_AUTHORIZED_FOR_SKU')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1TransferEligibility from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1TransferEligibility from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "ineligibilityReason": obj.get("ineligibilityReason"),
            "isEligible": obj.get("isEligible")
        })
        return _obj



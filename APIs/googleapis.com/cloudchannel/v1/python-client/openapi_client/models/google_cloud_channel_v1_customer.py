# coding: utf-8

"""
    Cloud Channel API

    The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_channel_v1_cloud_identity_info import GoogleCloudChannelV1CloudIdentityInfo
from openapi_client.models.google_cloud_channel_v1_contact_info import GoogleCloudChannelV1ContactInfo
from openapi_client.models.google_type_postal_address import GoogleTypePostalAddress
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudChannelV1Customer(BaseModel):
    """
    Entity representing a customer of a reseller or distributor.
    """ # noqa: E501
    alternate_email: Optional[StrictStr] = Field(default=None, description="Secondary contact email. You need to provide an alternate email to create different domains if a primary contact email already exists. Users will receive a notification with credentials when you create an admin.google.com account. Secondary emails are also recovery email addresses. Alternate emails are optional when you create Team customers.", alias="alternateEmail")
    channel_partner_id: Optional[StrictStr] = Field(default=None, description="Cloud Identity ID of the customer's channel partner. Populated only if a channel partner exists for this customer.", alias="channelPartnerId")
    cloud_identity_id: Optional[StrictStr] = Field(default=None, description="Output only. The customer's Cloud Identity ID if the customer has a Cloud Identity resource.", alias="cloudIdentityId")
    cloud_identity_info: Optional[GoogleCloudChannelV1CloudIdentityInfo] = Field(default=None, alias="cloudIdentityInfo")
    correlation_id: Optional[StrictStr] = Field(default=None, description="Optional. External CRM ID for the customer. Populated only if a CRM ID exists for this customer.", alias="correlationId")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the customer was created.", alias="createTime")
    domain: Optional[StrictStr] = Field(default=None, description="Required. The customer's primary domain. Must match the primary contact email's domain.")
    language_code: Optional[StrictStr] = Field(default=None, description="Optional. The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier.", alias="languageCode")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of the customer. Format: accounts/{account_id}/customers/{customer_id}")
    org_display_name: Optional[StrictStr] = Field(default=None, description="Required. Name of the organization that the customer entity represents.", alias="orgDisplayName")
    org_postal_address: Optional[GoogleTypePostalAddress] = Field(default=None, alias="orgPostalAddress")
    primary_contact_info: Optional[GoogleCloudChannelV1ContactInfo] = Field(default=None, alias="primaryContactInfo")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the customer was updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["alternateEmail", "channelPartnerId", "cloudIdentityId", "cloudIdentityInfo", "correlationId", "createTime", "domain", "languageCode", "name", "orgDisplayName", "orgPostalAddress", "primaryContactInfo", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1Customer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "cloud_identity_id",
            "create_time",
            "name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cloud_identity_info
        if self.cloud_identity_info:
            _dict['cloudIdentityInfo'] = self.cloud_identity_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of org_postal_address
        if self.org_postal_address:
            _dict['orgPostalAddress'] = self.org_postal_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of primary_contact_info
        if self.primary_contact_info:
            _dict['primaryContactInfo'] = self.primary_contact_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1Customer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alternateEmail": obj.get("alternateEmail"),
            "channelPartnerId": obj.get("channelPartnerId"),
            "cloudIdentityId": obj.get("cloudIdentityId"),
            "cloudIdentityInfo": GoogleCloudChannelV1CloudIdentityInfo.from_dict(obj["cloudIdentityInfo"]) if obj.get("cloudIdentityInfo") is not None else None,
            "correlationId": obj.get("correlationId"),
            "createTime": obj.get("createTime"),
            "domain": obj.get("domain"),
            "languageCode": obj.get("languageCode"),
            "name": obj.get("name"),
            "orgDisplayName": obj.get("orgDisplayName"),
            "orgPostalAddress": GoogleTypePostalAddress.from_dict(obj["orgPostalAddress"]) if obj.get("orgPostalAddress") is not None else None,
            "primaryContactInfo": GoogleCloudChannelV1ContactInfo.from_dict(obj["primaryContactInfo"]) if obj.get("primaryContactInfo") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



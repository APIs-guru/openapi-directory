# coding: utf-8

"""
    Cloud Channel API

    The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_channel_v1alpha1_association_info import GoogleCloudChannelV1alpha1AssociationInfo
from openapi_client.models.google_cloud_channel_v1alpha1_commitment_settings import GoogleCloudChannelV1alpha1CommitmentSettings
from openapi_client.models.google_cloud_channel_v1alpha1_parameter import GoogleCloudChannelV1alpha1Parameter
from openapi_client.models.google_cloud_channel_v1alpha1_provisioned_service import GoogleCloudChannelV1alpha1ProvisionedService
from openapi_client.models.google_cloud_channel_v1alpha1_trial_settings import GoogleCloudChannelV1alpha1TrialSettings
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudChannelV1alpha1Entitlement(BaseModel):
    """
    An entitlement is a representation of a customer's ability to use a service.
    """ # noqa: E501
    assigned_units: Optional[StrictInt] = Field(default=None, description="The current number of users that are assigned a license for the product defined in provisioned_service.skuId. Read-only. Deprecated: Use `parameters` instead.", alias="assignedUnits")
    association_info: Optional[GoogleCloudChannelV1alpha1AssociationInfo] = Field(default=None, alias="associationInfo")
    billing_account: Optional[StrictStr] = Field(default=None, description="Optional. The billing account resource name that is used to pay for this entitlement.", alias="billingAccount")
    channel_partner_id: Optional[StrictStr] = Field(default=None, description="Cloud Identity ID of a channel partner who will be the direct reseller for the customer's order. This field is generally used in 2-tier ordering, where the order is placed by a top-level distributor on behalf of their channel partner or reseller. Required for distributors. Deprecated: `channel_partner_id` has been moved to the Customer.", alias="channelPartnerId")
    commitment_settings: Optional[GoogleCloudChannelV1alpha1CommitmentSettings] = Field(default=None, alias="commitmentSettings")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which the entitlement is created.", alias="createTime")
    max_units: Optional[StrictInt] = Field(default=None, description="Maximum number of units for a non commitment-based Offer, such as Flexible, Trial or Free entitlements. For commitment-based entitlements, this is a read-only field, which only the internal support team can update. Deprecated: Use `parameters` instead.", alias="maxUnits")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of an entitlement in the form: accounts/{account_id}/customers/{customer_id}/entitlements/{entitlement_id}.")
    num_units: Optional[StrictInt] = Field(default=None, description="Number of units for a commitment-based Offer. For example, for seat-based Offers, this would be the number of seats; for license-based Offers, this would be the number of licenses. Required for creating commitment-based Offers. Deprecated: Use `parameters` instead.", alias="numUnits")
    offer: Optional[StrictStr] = Field(default=None, description="Required. The offer resource name for which the entitlement is to be created. Takes the form: accounts/{account_id}/offers/{offer_id}.")
    parameters: Optional[List[GoogleCloudChannelV1alpha1Parameter]] = Field(default=None, description="Extended entitlement parameters. When creating an entitlement, valid parameter names and values are defined in the Offer.parameter_definitions. For Google Workspace, the following Parameters may be accepted as input: - max_units: The maximum assignable units for a flexible offer OR - num_units: The total commitment for commitment-based offers The response may additionally include the following output-only Parameters: - assigned_units: The number of licenses assigned to users. For Google Cloud billing subaccounts, the following Parameter may be accepted as input: - display_name: The display name of the billing subaccount.")
    provisioned_service: Optional[GoogleCloudChannelV1alpha1ProvisionedService] = Field(default=None, alias="provisionedService")
    provisioning_state: Optional[StrictStr] = Field(default=None, description="Output only. Current provisioning state of the entitlement.", alias="provisioningState")
    purchase_order_id: Optional[StrictStr] = Field(default=None, description="Optional. This purchase order (PO) information is for resellers to use for their company tracking usage. If a purchaseOrderId value is given, it appears in the API responses and shows up in the invoice. The property accepts up to 80 plain text characters. This is only supported for Google Workspace entitlements.", alias="purchaseOrderId")
    suspension_reasons: Optional[List[StrictStr]] = Field(default=None, description="Output only. Enumerable of all current suspension reasons for an entitlement.", alias="suspensionReasons")
    trial_settings: Optional[GoogleCloudChannelV1alpha1TrialSettings] = Field(default=None, alias="trialSettings")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which the entitlement is updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["assignedUnits", "associationInfo", "billingAccount", "channelPartnerId", "commitmentSettings", "createTime", "maxUnits", "name", "numUnits", "offer", "parameters", "provisionedService", "provisioningState", "purchaseOrderId", "suspensionReasons", "trialSettings", "updateTime"]

    @field_validator('provisioning_state')
    def provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROVISIONING_STATE_UNSPECIFIED', 'ACTIVE', 'CANCELED', 'COMPLETE', 'PENDING', 'SUSPENDED']):
            raise ValueError("must be one of enum values ('PROVISIONING_STATE_UNSPECIFIED', 'ACTIVE', 'CANCELED', 'COMPLETE', 'PENDING', 'SUSPENDED')")
        return value

    @field_validator('suspension_reasons')
    def suspension_reasons_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['SUSPENSION_REASON_UNSPECIFIED', 'RESELLER_INITIATED', 'TRIAL_ENDED', 'RENEWAL_WITH_TYPE_CANCEL', 'PENDING_TOS_ACCEPTANCE', 'OTHER']):
                raise ValueError("each list item must be one of ('SUSPENSION_REASON_UNSPECIFIED', 'RESELLER_INITIATED', 'TRIAL_ENDED', 'RENEWAL_WITH_TYPE_CANCEL', 'PENDING_TOS_ACCEPTANCE', 'OTHER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1alpha1Entitlement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "provisioning_state",
            "suspension_reasons",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of association_info
        if self.association_info:
            _dict['associationInfo'] = self.association_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of commitment_settings
        if self.commitment_settings:
            _dict['commitmentSettings'] = self.commitment_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of provisioned_service
        if self.provisioned_service:
            _dict['provisionedService'] = self.provisioned_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trial_settings
        if self.trial_settings:
            _dict['trialSettings'] = self.trial_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudChannelV1alpha1Entitlement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assignedUnits": obj.get("assignedUnits"),
            "associationInfo": GoogleCloudChannelV1alpha1AssociationInfo.from_dict(obj["associationInfo"]) if obj.get("associationInfo") is not None else None,
            "billingAccount": obj.get("billingAccount"),
            "channelPartnerId": obj.get("channelPartnerId"),
            "commitmentSettings": GoogleCloudChannelV1alpha1CommitmentSettings.from_dict(obj["commitmentSettings"]) if obj.get("commitmentSettings") is not None else None,
            "createTime": obj.get("createTime"),
            "maxUnits": obj.get("maxUnits"),
            "name": obj.get("name"),
            "numUnits": obj.get("numUnits"),
            "offer": obj.get("offer"),
            "parameters": [GoogleCloudChannelV1alpha1Parameter.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "provisionedService": GoogleCloudChannelV1alpha1ProvisionedService.from_dict(obj["provisionedService"]) if obj.get("provisionedService") is not None else None,
            "provisioningState": obj.get("provisioningState"),
            "purchaseOrderId": obj.get("purchaseOrderId"),
            "suspensionReasons": obj.get("suspensionReasons"),
            "trialSettings": GoogleCloudChannelV1alpha1TrialSettings.from_dict(obj["trialSettings"]) if obj.get("trialSettings") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



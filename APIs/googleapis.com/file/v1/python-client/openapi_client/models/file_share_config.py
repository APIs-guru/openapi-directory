# coding: utf-8

"""
    Cloud Filestore API

    The Cloud Filestore API is used for creating and managing cloud file servers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.nfs_export_options import NfsExportOptions
from typing import Optional, Set
from typing_extensions import Self

class FileShareConfig(BaseModel):
    """
    File share configuration for the instance.
    """ # noqa: E501
    capacity_gb: Optional[StrictStr] = Field(default=None, description="File share capacity in gigabytes (GB). Filestore defines 1 GB as 1024^3 bytes.", alias="capacityGb")
    name: Optional[StrictStr] = Field(default=None, description="Required. The name of the file share. Must use 1-16 characters for the basic service tier and 1-63 characters for all other service tiers. Must use lowercase letters, numbers, or underscores `[a-z0-9_]`. Must start with a letter. Immutable.")
    nfs_export_options: Optional[List[NfsExportOptions]] = Field(default=None, description="Nfs Export Options. There is a limit of 10 export options per file share.", alias="nfsExportOptions")
    source_backup: Optional[StrictStr] = Field(default=None, description="The resource name of the backup, in the format `projects/{project_number}/locations/{location_id}/backups/{backup_id}`, that this file share has been restored from.", alias="sourceBackup")
    __properties: ClassVar[List[str]] = ["capacityGb", "name", "nfsExportOptions", "sourceBackup"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileShareConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in nfs_export_options (list)
        _items = []
        if self.nfs_export_options:
            for _item_nfs_export_options in self.nfs_export_options:
                if _item_nfs_export_options:
                    _items.append(_item_nfs_export_options.to_dict())
            _dict['nfsExportOptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileShareConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "capacityGb": obj.get("capacityGb"),
            "name": obj.get("name"),
            "nfsExportOptions": [NfsExportOptions.from_dict(_item) for _item in obj["nfsExportOptions"]] if obj.get("nfsExportOptions") is not None else None,
            "sourceBackup": obj.get("sourceBackup")
        })
        return _obj



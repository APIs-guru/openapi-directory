# coding: utf-8

"""
    Cloud Filestore API

    The Cloud Filestore API is used for creating and managing cloud file servers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.maintenance_policy import MaintenancePolicy
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings(BaseModel):
    """
    Maintenance settings associated with instance. Allows service producers and end users to assign settings that controls maintenance on this instance.
    """ # noqa: E501
    exclude: Optional[StrictBool] = Field(default=None, description="Optional. Exclude instance from maintenance. When true, rollout service will not attempt maintenance on the instance. Rollout service will include the instance in reported rollout progress as not attempted.")
    is_rollback: Optional[StrictBool] = Field(default=None, description="Optional. If the update call is triggered from rollback, set the value as true.", alias="isRollback")
    maintenance_policies: Optional[Dict[str, MaintenancePolicy]] = Field(default=None, description="Optional. The MaintenancePolicies that have been attached to the instance. The key must be of the type name of the oneof policy name defined in MaintenancePolicy, and the embedded policy must define the same policy type. For details, please refer to go/mr-user-guide. Should not be set if maintenance_policy_names is set. If only the name is needed, then only populate MaintenancePolicy.name.", alias="maintenancePolicies")
    __properties: ClassVar[List[str]] = ["exclude", "isRollback", "maintenancePolicies"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in maintenance_policies (dict)
        _field_dict = {}
        if self.maintenance_policies:
            for _key_maintenance_policies in self.maintenance_policies:
                if self.maintenance_policies[_key_maintenance_policies]:
                    _field_dict[_key_maintenance_policies] = self.maintenance_policies[_key_maintenance_policies].to_dict()
            _dict['maintenancePolicies'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exclude": obj.get("exclude"),
            "isRollback": obj.get("isRollback"),
            "maintenancePolicies": dict(
                (_k, MaintenancePolicy.from_dict(_v))
                for _k, _v in obj["maintenancePolicies"].items()
            )
            if obj.get("maintenancePolicies") is not None
            else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Filestore API

    The Cloud Filestore API is used for creating and managing cloud file servers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.file_share_config import FileShareConfig
from openapi_client.models.network_config import NetworkConfig
from typing import Optional, Set
from typing_extensions import Self

class Instance(BaseModel):
    """
    A Filestore instance.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the instance was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="The description of the instance (2048 characters or less).")
    etag: Optional[StrictStr] = Field(default=None, description="Server-specified ETag for the instance resource to prevent simultaneous updates from overwriting each other.")
    file_shares: Optional[List[FileShareConfig]] = Field(default=None, description="File system shares on the instance. For this version, only a single file share is supported.", alias="fileShares")
    kms_key_name: Optional[StrictStr] = Field(default=None, description="KMS key name used for data encryption.", alias="kmsKeyName")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Resource labels to represent user provided metadata.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the instance, in the format `projects/{project}/locations/{location}/instances/{instance}`.")
    networks: Optional[List[NetworkConfig]] = Field(default=None, description="VPC networks to which the instance is connected. For this version, only a single network is supported.")
    satisfies_pzi: Optional[StrictBool] = Field(default=None, description="Output only. Reserved for future use.", alias="satisfiesPzi")
    satisfies_pzs: Optional[StrictBool] = Field(default=None, description="Output only. Reserved for future use.", alias="satisfiesPzs")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The instance state.")
    status_message: Optional[StrictStr] = Field(default=None, description="Output only. Additional information about the instance state, if available.", alias="statusMessage")
    suspension_reasons: Optional[List[StrictStr]] = Field(default=None, description="Output only. Field indicates all the reasons the instance is in \"SUSPENDED\" state.", alias="suspensionReasons")
    tier: Optional[StrictStr] = Field(default=None, description="The service tier of the instance.")
    __properties: ClassVar[List[str]] = ["createTime", "description", "etag", "fileShares", "kmsKeyName", "labels", "name", "networks", "satisfiesPzi", "satisfiesPzs", "state", "statusMessage", "suspensionReasons", "tier"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'READY', 'REPAIRING', 'DELETING', 'ERROR', 'RESTORING', 'SUSPENDED', 'SUSPENDING', 'RESUMING', 'REVERTING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'READY', 'REPAIRING', 'DELETING', 'ERROR', 'RESTORING', 'SUSPENDED', 'SUSPENDING', 'RESUMING', 'REVERTING')")
        return value

    @field_validator('suspension_reasons')
    def suspension_reasons_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['SUSPENSION_REASON_UNSPECIFIED', 'KMS_KEY_ISSUE']):
                raise ValueError("each list item must be one of ('SUSPENSION_REASON_UNSPECIFIED', 'KMS_KEY_ISSUE')")
        return value

    @field_validator('tier')
    def tier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TIER_UNSPECIFIED', 'STANDARD', 'PREMIUM', 'BASIC_HDD', 'BASIC_SSD', 'HIGH_SCALE_SSD', 'ENTERPRISE', 'ZONAL', 'REGIONAL']):
            raise ValueError("must be one of enum values ('TIER_UNSPECIFIED', 'STANDARD', 'PREMIUM', 'BASIC_HDD', 'BASIC_SSD', 'HIGH_SCALE_SSD', 'ENTERPRISE', 'ZONAL', 'REGIONAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Instance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "satisfies_pzi",
            "satisfies_pzs",
            "state",
            "status_message",
            "suspension_reasons",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in file_shares (list)
        _items = []
        if self.file_shares:
            for _item_file_shares in self.file_shares:
                if _item_file_shares:
                    _items.append(_item_file_shares.to_dict())
            _dict['fileShares'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in networks (list)
        _items = []
        if self.networks:
            for _item_networks in self.networks:
                if _item_networks:
                    _items.append(_item_networks.to_dict())
            _dict['networks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Instance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "etag": obj.get("etag"),
            "fileShares": [FileShareConfig.from_dict(_item) for _item in obj["fileShares"]] if obj.get("fileShares") is not None else None,
            "kmsKeyName": obj.get("kmsKeyName"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "networks": [NetworkConfig.from_dict(_item) for _item in obj["networks"]] if obj.get("networks") is not None else None,
            "satisfiesPzi": obj.get("satisfiesPzi"),
            "satisfiesPzs": obj.get("satisfiesPzs"),
            "state": obj.get("state"),
            "statusMessage": obj.get("statusMessage"),
            "suspensionReasons": obj.get("suspensionReasons"),
            "tier": obj.get("tier")
        })
        return _obj



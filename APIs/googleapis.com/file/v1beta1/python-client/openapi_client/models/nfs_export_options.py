# coding: utf-8

"""
    Cloud Filestore API

    The Cloud Filestore API is used for creating and managing cloud file servers.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NfsExportOptions(BaseModel):
    """
    NFS export options specifications.
    """ # noqa: E501
    access_mode: Optional[StrictStr] = Field(default=None, description="Either READ_ONLY, for allowing only read requests on the exported directory, or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.", alias="accessMode")
    anon_gid: Optional[StrictStr] = Field(default=None, description="An integer representing the anonymous group id with a default value of 65534. Anon_gid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.", alias="anonGid")
    anon_uid: Optional[StrictStr] = Field(default=None, description="An integer representing the anonymous user id with a default value of 65534. Anon_uid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.", alias="anonUid")
    ip_ranges: Optional[List[StrictStr]] = Field(default=None, description="List of either an IPv4 addresses in the format `{octet1}.{octet2}.{octet3}.{octet4}` or CIDR ranges in the format `{octet1}.{octet2}.{octet3}.{octet4}/{mask size}` which may mount the file share. Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned. The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.", alias="ipRanges")
    security_flavors: Optional[List[StrictStr]] = Field(default=None, description="The security flavors allowed for mount operations. The default is AUTH_SYS.", alias="securityFlavors")
    squash_mode: Optional[StrictStr] = Field(default=None, description="Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH, for not allowing root access. The default is NO_ROOT_SQUASH.", alias="squashMode")
    __properties: ClassVar[List[str]] = ["accessMode", "anonGid", "anonUid", "ipRanges", "securityFlavors", "squashMode"]

    @field_validator('access_mode')
    def access_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACCESS_MODE_UNSPECIFIED', 'READ_ONLY', 'READ_WRITE']):
            raise ValueError("must be one of enum values ('ACCESS_MODE_UNSPECIFIED', 'READ_ONLY', 'READ_WRITE')")
        return value

    @field_validator('security_flavors')
    def security_flavors_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['SECURITY_FLAVOR_UNSPECIFIED', 'AUTH_SYS', 'KRB5', 'KRB5I', 'KRB5P']):
                raise ValueError("each list item must be one of ('SECURITY_FLAVOR_UNSPECIFIED', 'AUTH_SYS', 'KRB5', 'KRB5I', 'KRB5P')")
        return value

    @field_validator('squash_mode')
    def squash_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SQUASH_MODE_UNSPECIFIED', 'NO_ROOT_SQUASH', 'ROOT_SQUASH']):
            raise ValueError("must be one of enum values ('SQUASH_MODE_UNSPECIFIED', 'NO_ROOT_SQUASH', 'ROOT_SQUASH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NfsExportOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NfsExportOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessMode": obj.get("accessMode"),
            "anonGid": obj.get("anonGid"),
            "anonUid": obj.get("anonUid"),
            "ipRanges": obj.get("ipRanges"),
            "securityFlavors": obj.get("securityFlavors"),
            "squashMode": obj.get("squashMode")
        })
        return _obj



# coding: utf-8

"""
    Cloud Filestore API

    The Cloud Filestore API is used for creating and managing cloud file servers.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Backup(BaseModel):
    """
    A Filestore backup.
    """ # noqa: E501
    capacity_gb: Optional[StrictStr] = Field(default=None, description="Output only. Capacity of the source file share when the backup was created.", alias="capacityGb")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the backup was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.")
    download_bytes: Optional[StrictStr] = Field(default=None, description="Output only. Amount of bytes that will be downloaded if the backup is restored", alias="downloadBytes")
    kms_key_name: Optional[StrictStr] = Field(default=None, description="Immutable. KMS key name used for data encryption.", alias="kmsKeyName")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Resource labels to represent user provided metadata.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the backup, in the format `projects/{project_id}/locations/{location_id}/backups/{backup_id}`.")
    satisfies_pzi: Optional[StrictBool] = Field(default=None, description="Output only. Reserved for future use.", alias="satisfiesPzi")
    satisfies_pzs: Optional[StrictBool] = Field(default=None, description="Output only. Reserved for future use.", alias="satisfiesPzs")
    source_file_share: Optional[StrictStr] = Field(default=None, description="Name of the file share in the source Filestore instance that the backup is created from.", alias="sourceFileShare")
    source_instance: Optional[StrictStr] = Field(default=None, description="The resource name of the source Filestore instance, in the format `projects/{project_id}/locations/{location_id}/instances/{instance_id}`, used to create this backup.", alias="sourceInstance")
    source_instance_tier: Optional[StrictStr] = Field(default=None, description="Output only. The service tier of the source Filestore instance that this backup is created from.", alias="sourceInstanceTier")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The backup state.")
    storage_bytes: Optional[StrictStr] = Field(default=None, description="Output only. The size of the storage used by the backup. As backups share storage, this number is expected to change with backup creation/deletion.", alias="storageBytes")
    __properties: ClassVar[List[str]] = ["capacityGb", "createTime", "description", "downloadBytes", "kmsKeyName", "labels", "name", "satisfiesPzi", "satisfiesPzs", "sourceFileShare", "sourceInstance", "sourceInstanceTier", "state", "storageBytes"]

    @field_validator('source_instance_tier')
    def source_instance_tier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TIER_UNSPECIFIED', 'STANDARD', 'PREMIUM', 'BASIC_HDD', 'BASIC_SSD', 'HIGH_SCALE_SSD', 'ENTERPRISE', 'ZONAL', 'REGIONAL']):
            raise ValueError("must be one of enum values ('TIER_UNSPECIFIED', 'STANDARD', 'PREMIUM', 'BASIC_HDD', 'BASIC_SSD', 'HIGH_SCALE_SSD', 'ENTERPRISE', 'ZONAL', 'REGIONAL')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'FINALIZING', 'READY', 'DELETING', 'INVALID']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'FINALIZING', 'READY', 'DELETING', 'INVALID')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Backup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "capacity_gb",
            "create_time",
            "download_bytes",
            "name",
            "satisfies_pzi",
            "satisfies_pzs",
            "source_instance_tier",
            "state",
            "storage_bytes",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Backup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "capacityGb": obj.get("capacityGb"),
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "downloadBytes": obj.get("downloadBytes"),
            "kmsKeyName": obj.get("kmsKeyName"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "satisfiesPzi": obj.get("satisfiesPzi"),
            "satisfiesPzs": obj.get("satisfiesPzs"),
            "sourceFileShare": obj.get("sourceFileShare"),
            "sourceInstance": obj.get("sourceInstance"),
            "sourceInstanceTier": obj.get("sourceInstanceTier"),
            "state": obj.get("state"),
            "storageBytes": obj.get("storageBytes")
        })
        return _obj



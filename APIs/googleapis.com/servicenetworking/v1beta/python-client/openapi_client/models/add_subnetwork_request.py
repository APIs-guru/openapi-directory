# coding: utf-8

"""
    Service Networking API

    Provides automatic management of network configurations necessary for certain services.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AddSubnetworkRequest(BaseModel):
    """
    Request to create a subnetwork in a previously peered service network.
    """ # noqa: E501
    consumer: Optional[StrictStr] = Field(default=None, description="Required. A resource that represents the service consumer, such as `projects/123456`. The project number can be different from the value in the consumer network parameter. For example, the network might be part of a Shared VPC network. In those cases, Service Networking validates that this resource belongs to that Shared VPC.")
    consumer_network: Optional[StrictStr] = Field(default=None, description="Required. The name of the service consumer's VPC network. The network must have an existing private connection that was provisioned through the connections.create method. The name must be in the following format: `projects/{project}/global/networks/{network}`, where {project} is a project number, such as `12345`. {network} is the name of a VPC network in the project.", alias="consumerNetwork")
    description: Optional[StrictStr] = Field(default=None, description="An optional description of the subnet.")
    ip_prefix_length: Optional[StrictInt] = Field(default=None, description="Required. The prefix length of the subnet's IP address range. Use CIDR range notation, such as `30` to provision a subnet with an `x.x.x.x/30` CIDR range. The IP address range is drawn from a pool of available ranges in the service consumer's allocated range.", alias="ipPrefixLength")
    region: Optional[StrictStr] = Field(default=None, description="Required. The name of a [region](/compute/docs/regions-zones) for the subnet, such `europe-west1`.")
    requested_address: Optional[StrictStr] = Field(default=None, description="Optional. The starting address of a range. The address must be a valid IPv4 address in the x.x.x.x format. This value combined with the IP prefix range is the CIDR range for the subnet. The range must be within the allocated range that is assigned to the private connection. If the CIDR range isn't available, the call fails.", alias="requestedAddress")
    subnetwork: Optional[StrictStr] = Field(default=None, description="Required. A name for the new subnet. For information about the naming requirements, see [subnetwork](/compute/docs/reference/rest/v1/subnetworks) in the Compute API documentation.")
    subnetwork_users: Optional[List[StrictStr]] = Field(default=None, description="A list of members that are granted the `compute.networkUser` role on the subnet.", alias="subnetworkUsers")
    __properties: ClassVar[List[str]] = ["consumer", "consumerNetwork", "description", "ipPrefixLength", "region", "requestedAddress", "subnetwork", "subnetworkUsers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddSubnetworkRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddSubnetworkRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "consumer": obj.get("consumer"),
            "consumerNetwork": obj.get("consumerNetwork"),
            "description": obj.get("description"),
            "ipPrefixLength": obj.get("ipPrefixLength"),
            "region": obj.get("region"),
            "requestedAddress": obj.get("requestedAddress"),
            "subnetwork": obj.get("subnetwork"),
            "subnetworkUsers": obj.get("subnetworkUsers")
        })
        return _obj



# coding: utf-8

"""
    Service Networking API

    Provides automatic management of network configurations necessary for certain services.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.consumer_config import ConsumerConfig

class TestConsumerConfig(unittest.TestCase):
    """ConsumerConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConsumerConfig:
        """Test ConsumerConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ConsumerConfig`
        """
        model = ConsumerConfig()
        if include_optional:
            return ConsumerConfig(
                cloudsql_configs = [
                    openapi_client.models.cloud_sql_config.CloudSQLConfig(
                        service = '', 
                        umbrella_network = '', 
                        umbrella_project = '', )
                    ],
                consumer_export_custom_routes = True,
                consumer_export_subnet_routes_with_public_ip = True,
                consumer_import_custom_routes = True,
                consumer_import_subnet_routes_with_public_ip = True,
                producer_export_custom_routes = True,
                producer_export_subnet_routes_with_public_ip = True,
                producer_import_custom_routes = True,
                producer_import_subnet_routes_with_public_ip = True,
                producer_network = '',
                reserved_ranges = [
                    openapi_client.models.google_cloud_servicenetworking_v1_consumer_config_reserved_range.GoogleCloudServicenetworkingV1ConsumerConfigReservedRange(
                        address = '', 
                        ip_prefix_length = 56, 
                        name = '', )
                    ],
                used_ip_ranges = [
                    ''
                    ],
                vpc_sc_reference_architecture_enabled = True
            )
        else:
            return ConsumerConfig(
        )
        """

    def testConsumerConfig(self):
        """Test ConsumerConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

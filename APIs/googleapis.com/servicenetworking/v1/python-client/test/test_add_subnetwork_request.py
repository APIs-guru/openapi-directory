# coding: utf-8

"""
    Service Networking API

    Provides automatic management of network configurations necessary for certain services.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.add_subnetwork_request import AddSubnetworkRequest

class TestAddSubnetworkRequest(unittest.TestCase):
    """AddSubnetworkRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AddSubnetworkRequest:
        """Test AddSubnetworkRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AddSubnetworkRequest`
        """
        model = AddSubnetworkRequest()
        if include_optional:
            return AddSubnetworkRequest(
                allow_subnet_cidr_routes_overlap = True,
                check_service_networking_use_permission = True,
                compute_idempotency_window = '',
                consumer = '',
                consumer_network = '',
                description = '',
                internal_range = '',
                ip_prefix_length = 56,
                outside_allocation_public_ip_range = '',
                private_ipv6_google_access = '',
                purpose = '',
                region = '',
                requested_address = '',
                requested_ranges = [
                    ''
                    ],
                role = '',
                secondary_ip_range_specs = [
                    openapi_client.models.secondary_ip_range_spec.SecondaryIpRangeSpec(
                        ip_prefix_length = 56, 
                        outside_allocation_public_ip_range = '', 
                        range_name = '', 
                        requested_address = '', )
                    ],
                subnetwork = '',
                subnetwork_users = [
                    ''
                    ],
                use_custom_compute_idempotency_window = True
            )
        else:
            return AddSubnetworkRequest(
        )
        """

    def testAddSubnetworkRequest(self):
        """Test AddSubnetworkRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

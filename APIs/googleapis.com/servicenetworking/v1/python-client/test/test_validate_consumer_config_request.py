# coding: utf-8

"""
    Service Networking API

    Provides automatic management of network configurations necessary for certain services.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.validate_consumer_config_request import ValidateConsumerConfigRequest

class TestValidateConsumerConfigRequest(unittest.TestCase):
    """ValidateConsumerConfigRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ValidateConsumerConfigRequest:
        """Test ValidateConsumerConfigRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ValidateConsumerConfigRequest`
        """
        model = ValidateConsumerConfigRequest()
        if include_optional:
            return ValidateConsumerConfigRequest(
                check_service_networking_use_permission = True,
                consumer_network = '',
                consumer_project = openapi_client.models.consumer_project.ConsumerProject(
                    project_num = '', ),
                range_reservation = openapi_client.models.range_reservation.RangeReservation(
                    ip_prefix_length = 56, 
                    requested_ranges = [
                        ''
                        ], 
                    secondary_range_ip_prefix_lengths = [
                        56
                        ], 
                    subnetwork_candidates = [
                        openapi_client.models.subnetwork.Subnetwork(
                            ip_cidr_range = '', 
                            name = '', 
                            network = '', 
                            outside_allocation = True, 
                            region = '', 
                            secondary_ip_ranges = [
                                openapi_client.models.secondary_ip_range.SecondaryIpRange(
                                    ip_cidr_range = '', 
                                    range_name = '', )
                                ], )
                        ], ),
                validate_network = True
            )
        else:
            return ValidateConsumerConfigRequest(
        )
        """

    def testValidateConsumerConfigRequest(self):
        """Test ValidateConsumerConfigRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

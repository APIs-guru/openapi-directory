# coding: utf-8

"""
    Service Networking API

    Provides automatic management of network configurations necessary for certain services.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.client_library_settings import ClientLibrarySettings
from openapi_client.models.method_settings import MethodSettings
from typing import Optional, Set
from typing_extensions import Self

class Publishing(BaseModel):
    """
    This message configures the settings for publishing [Google Cloud Client libraries](https://cloud.google.com/apis/docs/cloud-client-libraries) generated from the service config.
    """ # noqa: E501
    api_short_name: Optional[StrictStr] = Field(default=None, description="Used as a tracking tag when collecting data about the APIs developer relations artifacts like docs, packages delivered to package managers, etc. Example: \"speech\".", alias="apiShortName")
    codeowner_github_teams: Optional[List[StrictStr]] = Field(default=None, description="GitHub teams to be added to CODEOWNERS in the directory in GitHub containing source code for the client libraries for this API.", alias="codeownerGithubTeams")
    doc_tag_prefix: Optional[StrictStr] = Field(default=None, description="A prefix used in sample code when demarking regions to be included in documentation.", alias="docTagPrefix")
    documentation_uri: Optional[StrictStr] = Field(default=None, description="Link to product home page. Example: https://cloud.google.com/asset-inventory/docs/overview", alias="documentationUri")
    github_label: Optional[StrictStr] = Field(default=None, description="GitHub label to apply to issues and pull requests opened for this API.", alias="githubLabel")
    library_settings: Optional[List[ClientLibrarySettings]] = Field(default=None, description="Client library settings. If the same version string appears multiple times in this list, then the last one wins. Settings from earlier settings with the same version string are discarded.", alias="librarySettings")
    method_settings: Optional[List[MethodSettings]] = Field(default=None, description="A list of API method settings, e.g. the behavior for methods that use the long-running operation pattern.", alias="methodSettings")
    new_issue_uri: Optional[StrictStr] = Field(default=None, description="Link to a *public* URI where users can report issues. Example: https://issuetracker.google.com/issues/new?component=190865&template=1161103", alias="newIssueUri")
    organization: Optional[StrictStr] = Field(default=None, description="For whom the client library is being published.")
    proto_reference_documentation_uri: Optional[StrictStr] = Field(default=None, description="Optional link to proto reference documentation. Example: https://cloud.google.com/pubsub/lite/docs/reference/rpc", alias="protoReferenceDocumentationUri")
    rest_reference_documentation_uri: Optional[StrictStr] = Field(default=None, description="Optional link to REST reference documentation. Example: https://cloud.google.com/pubsub/lite/docs/reference/rest", alias="restReferenceDocumentationUri")
    __properties: ClassVar[List[str]] = ["apiShortName", "codeownerGithubTeams", "docTagPrefix", "documentationUri", "githubLabel", "librarySettings", "methodSettings", "newIssueUri", "organization", "protoReferenceDocumentationUri", "restReferenceDocumentationUri"]

    @field_validator('organization')
    def organization_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED', 'CLOUD', 'ADS', 'PHOTOS', 'STREET_VIEW', 'SHOPPING', 'GEO', 'GENERATIVE_AI']):
            raise ValueError("must be one of enum values ('CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED', 'CLOUD', 'ADS', 'PHOTOS', 'STREET_VIEW', 'SHOPPING', 'GEO', 'GENERATIVE_AI')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Publishing from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in library_settings (list)
        _items = []
        if self.library_settings:
            for _item_library_settings in self.library_settings:
                if _item_library_settings:
                    _items.append(_item_library_settings.to_dict())
            _dict['librarySettings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in method_settings (list)
        _items = []
        if self.method_settings:
            for _item_method_settings in self.method_settings:
                if _item_method_settings:
                    _items.append(_item_method_settings.to_dict())
            _dict['methodSettings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Publishing from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiShortName": obj.get("apiShortName"),
            "codeownerGithubTeams": obj.get("codeownerGithubTeams"),
            "docTagPrefix": obj.get("docTagPrefix"),
            "documentationUri": obj.get("documentationUri"),
            "githubLabel": obj.get("githubLabel"),
            "librarySettings": [ClientLibrarySettings.from_dict(_item) for _item in obj["librarySettings"]] if obj.get("librarySettings") is not None else None,
            "methodSettings": [MethodSettings.from_dict(_item) for _item in obj["methodSettings"]] if obj.get("methodSettings") is not None else None,
            "newIssueUri": obj.get("newIssueUri"),
            "organization": obj.get("organization"),
            "protoReferenceDocumentationUri": obj.get("protoReferenceDocumentationUri"),
            "restReferenceDocumentationUri": obj.get("restReferenceDocumentationUri")
        })
        return _obj



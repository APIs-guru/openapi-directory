# coding: utf-8

"""
    Service Networking API

    Provides automatic management of network configurations necessary for certain services.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dns_record_set import DnsRecordSet
from typing import Optional, Set
from typing_extensions import Self

class UpdateDnsRecordSetRequest(BaseModel):
    """
    Request to update a record set from a private managed DNS zone in the shared producer host project. The name, type, ttl, and data values of the existing record set must all exactly match an existing record set in the specified zone.
    """ # noqa: E501
    consumer_network: Optional[StrictStr] = Field(default=None, description="Required. The network that the consumer is using to connect with services. Must be in the form of projects/{project}/global/networks/{network} {project} is the project number, as in '12345' {network} is the network name.", alias="consumerNetwork")
    existing_dns_record_set: Optional[DnsRecordSet] = Field(default=None, alias="existingDnsRecordSet")
    new_dns_record_set: Optional[DnsRecordSet] = Field(default=None, alias="newDnsRecordSet")
    zone: Optional[StrictStr] = Field(default=None, description="Required. The name of the private DNS zone in the shared producer host project from which the record set will be removed.")
    __properties: ClassVar[List[str]] = ["consumerNetwork", "existingDnsRecordSet", "newDnsRecordSet", "zone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateDnsRecordSetRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of existing_dns_record_set
        if self.existing_dns_record_set:
            _dict['existingDnsRecordSet'] = self.existing_dns_record_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of new_dns_record_set
        if self.new_dns_record_set:
            _dict['newDnsRecordSet'] = self.new_dns_record_set.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateDnsRecordSetRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "consumerNetwork": obj.get("consumerNetwork"),
            "existingDnsRecordSet": DnsRecordSet.from_dict(obj["existingDnsRecordSet"]) if obj.get("existingDnsRecordSet") is not None else None,
            "newDnsRecordSet": DnsRecordSet.from_dict(obj["newDnsRecordSet"]) if obj.get("newDnsRecordSet") is not None else None,
            "zone": obj.get("zone")
        })
        return _obj



# coding: utf-8

"""
    Service Networking API

    Provides automatic management of network configurations necessary for certain services.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.secondary_ip_range import SecondaryIpRange
from typing import Optional, Set
from typing_extensions import Self

class Subnetwork(BaseModel):
    """
    Represents a subnet that was created or discovered by a private access management service.
    """ # noqa: E501
    ip_cidr_range: Optional[StrictStr] = Field(default=None, description="Subnetwork CIDR range in `10.x.x.x/y` format.", alias="ipCidrRange")
    name: Optional[StrictStr] = Field(default=None, description="Subnetwork name. See https://cloud.google.com/compute/docs/vpc/")
    network: Optional[StrictStr] = Field(default=None, description="In the Shared VPC host project, the VPC network that's peered with the consumer network. For example: `projects/1234321/global/networks/host-network`")
    outside_allocation: Optional[StrictBool] = Field(default=None, description="This is a discovered subnet that is not within the current consumer allocated ranges.", alias="outsideAllocation")
    region: Optional[StrictStr] = Field(default=None, description="GCP region where the subnetwork is located.")
    secondary_ip_ranges: Optional[List[SecondaryIpRange]] = Field(default=None, description="List of secondary IP ranges in this subnetwork.", alias="secondaryIpRanges")
    __properties: ClassVar[List[str]] = ["ipCidrRange", "name", "network", "outsideAllocation", "region", "secondaryIpRanges"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Subnetwork from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in secondary_ip_ranges (list)
        _items = []
        if self.secondary_ip_ranges:
            for _item_secondary_ip_ranges in self.secondary_ip_ranges:
                if _item_secondary_ip_ranges:
                    _items.append(_item_secondary_ip_ranges.to_dict())
            _dict['secondaryIpRanges'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Subnetwork from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ipCidrRange": obj.get("ipCidrRange"),
            "name": obj.get("name"),
            "network": obj.get("network"),
            "outsideAllocation": obj.get("outsideAllocation"),
            "region": obj.get("region"),
            "secondaryIpRanges": [SecondaryIpRange.from_dict(_item) for _item in obj["secondaryIpRanges"]] if obj.get("secondaryIpRanges") is not None else None
        })
        return _obj



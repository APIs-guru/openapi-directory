# coding: utf-8

"""
    Service Networking API

    Provides automatic management of network configurations necessary for certain services.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.subnetwork import Subnetwork
from typing import Optional, Set
from typing_extensions import Self

class ValidateConsumerConfigResponse(BaseModel):
    """
    ValidateConsumerConfigResponse
    """ # noqa: E501
    existing_subnetwork_candidates: Optional[List[Subnetwork]] = Field(default=None, description="List of subnetwork candidates from the request which exist with the `ip_cidr_range`, `secondary_ip_cider_ranges`, and `outside_allocation` fields set.", alias="existingSubnetworkCandidates")
    is_valid: Optional[StrictBool] = Field(default=None, description="Indicates whether all the requested validations passed.", alias="isValid")
    validation_error: Optional[StrictStr] = Field(default=None, description="The first validation which failed.", alias="validationError")
    __properties: ClassVar[List[str]] = ["existingSubnetworkCandidates", "isValid", "validationError"]

    @field_validator('validation_error')
    def validation_error_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VALIDATION_ERROR_UNSPECIFIED', 'VALIDATION_NOT_REQUESTED', 'SERVICE_NETWORKING_NOT_ENABLED', 'NETWORK_NOT_FOUND', 'NETWORK_NOT_PEERED', 'NETWORK_PEERING_DELETED', 'NETWORK_NOT_IN_CONSUMERS_PROJECT', 'NETWORK_NOT_IN_CONSUMERS_HOST_PROJECT', 'HOST_PROJECT_NOT_FOUND', 'CONSUMER_PROJECT_NOT_SERVICE_PROJECT', 'RANGES_EXHAUSTED', 'RANGES_NOT_RESERVED', 'RANGES_DELETED_LATER', 'COMPUTE_API_NOT_ENABLED', 'USE_PERMISSION_NOT_FOUND']):
            raise ValueError("must be one of enum values ('VALIDATION_ERROR_UNSPECIFIED', 'VALIDATION_NOT_REQUESTED', 'SERVICE_NETWORKING_NOT_ENABLED', 'NETWORK_NOT_FOUND', 'NETWORK_NOT_PEERED', 'NETWORK_PEERING_DELETED', 'NETWORK_NOT_IN_CONSUMERS_PROJECT', 'NETWORK_NOT_IN_CONSUMERS_HOST_PROJECT', 'HOST_PROJECT_NOT_FOUND', 'CONSUMER_PROJECT_NOT_SERVICE_PROJECT', 'RANGES_EXHAUSTED', 'RANGES_NOT_RESERVED', 'RANGES_DELETED_LATER', 'COMPUTE_API_NOT_ENABLED', 'USE_PERMISSION_NOT_FOUND')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ValidateConsumerConfigResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in existing_subnetwork_candidates (list)
        _items = []
        if self.existing_subnetwork_candidates:
            for _item_existing_subnetwork_candidates in self.existing_subnetwork_candidates:
                if _item_existing_subnetwork_candidates:
                    _items.append(_item_existing_subnetwork_candidates.to_dict())
            _dict['existingSubnetworkCandidates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ValidateConsumerConfigResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "existingSubnetworkCandidates": [Subnetwork.from_dict(_item) for _item in obj["existingSubnetworkCandidates"]] if obj.get("existingSubnetworkCandidates") is not None else None,
            "isValid": obj.get("isValid"),
            "validationError": obj.get("validationError")
        })
        return _obj



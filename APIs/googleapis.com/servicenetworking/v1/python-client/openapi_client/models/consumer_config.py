# coding: utf-8

"""
    Service Networking API

    Provides automatic management of network configurations necessary for certain services.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cloud_sql_config import CloudSQLConfig
from openapi_client.models.google_cloud_servicenetworking_v1_consumer_config_reserved_range import GoogleCloudServicenetworkingV1ConsumerConfigReservedRange
from typing import Optional, Set
from typing_extensions import Self

class ConsumerConfig(BaseModel):
    """
    Configuration information for a private service access connection.
    """ # noqa: E501
    cloudsql_configs: Optional[List[CloudSQLConfig]] = Field(default=None, description="Represents one or multiple Cloud SQL configurations.", alias="cloudsqlConfigs")
    consumer_export_custom_routes: Optional[StrictBool] = Field(default=None, description="Export custom routes flag value for peering from consumer to producer.", alias="consumerExportCustomRoutes")
    consumer_export_subnet_routes_with_public_ip: Optional[StrictBool] = Field(default=None, description="Export subnet routes with public ip flag value for peering from consumer to producer.", alias="consumerExportSubnetRoutesWithPublicIp")
    consumer_import_custom_routes: Optional[StrictBool] = Field(default=None, description="Import custom routes flag value for peering from consumer to producer.", alias="consumerImportCustomRoutes")
    consumer_import_subnet_routes_with_public_ip: Optional[StrictBool] = Field(default=None, description="Import subnet routes with public ip flag value for peering from consumer to producer.", alias="consumerImportSubnetRoutesWithPublicIp")
    producer_export_custom_routes: Optional[StrictBool] = Field(default=None, description="Export custom routes flag value for peering from producer to consumer.", alias="producerExportCustomRoutes")
    producer_export_subnet_routes_with_public_ip: Optional[StrictBool] = Field(default=None, description="Export subnet routes with public ip flag value for peering from producer to consumer.", alias="producerExportSubnetRoutesWithPublicIp")
    producer_import_custom_routes: Optional[StrictBool] = Field(default=None, description="Import custom routes flag value for peering from producer to consumer.", alias="producerImportCustomRoutes")
    producer_import_subnet_routes_with_public_ip: Optional[StrictBool] = Field(default=None, description="Import subnet routes with public ip flag value for peering from producer to consumer.", alias="producerImportSubnetRoutesWithPublicIp")
    producer_network: Optional[StrictStr] = Field(default=None, description="Output only. The VPC host network that is used to host managed service instances. In the format, projects/{project}/global/networks/{network} where {project} is the project number e.g. '12345' and {network} is the network name.", alias="producerNetwork")
    reserved_ranges: Optional[List[GoogleCloudServicenetworkingV1ConsumerConfigReservedRange]] = Field(default=None, description="Output only. The reserved ranges associated with this private service access connection.", alias="reservedRanges")
    used_ip_ranges: Optional[List[StrictStr]] = Field(default=None, description="Output only. The IP ranges already in use by consumer or producer", alias="usedIpRanges")
    vpc_sc_reference_architecture_enabled: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether the VPC Service Controls reference architecture is configured for the producer VPC host network.", alias="vpcScReferenceArchitectureEnabled")
    __properties: ClassVar[List[str]] = ["cloudsqlConfigs", "consumerExportCustomRoutes", "consumerExportSubnetRoutesWithPublicIp", "consumerImportCustomRoutes", "consumerImportSubnetRoutesWithPublicIp", "producerExportCustomRoutes", "producerExportSubnetRoutesWithPublicIp", "producerImportCustomRoutes", "producerImportSubnetRoutesWithPublicIp", "producerNetwork", "reservedRanges", "usedIpRanges", "vpcScReferenceArchitectureEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConsumerConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "producer_network",
            "reserved_ranges",
            "used_ip_ranges",
            "vpc_sc_reference_architecture_enabled",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cloudsql_configs (list)
        _items = []
        if self.cloudsql_configs:
            for _item_cloudsql_configs in self.cloudsql_configs:
                if _item_cloudsql_configs:
                    _items.append(_item_cloudsql_configs.to_dict())
            _dict['cloudsqlConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reserved_ranges (list)
        _items = []
        if self.reserved_ranges:
            for _item_reserved_ranges in self.reserved_ranges:
                if _item_reserved_ranges:
                    _items.append(_item_reserved_ranges.to_dict())
            _dict['reservedRanges'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConsumerConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloudsqlConfigs": [CloudSQLConfig.from_dict(_item) for _item in obj["cloudsqlConfigs"]] if obj.get("cloudsqlConfigs") is not None else None,
            "consumerExportCustomRoutes": obj.get("consumerExportCustomRoutes"),
            "consumerExportSubnetRoutesWithPublicIp": obj.get("consumerExportSubnetRoutesWithPublicIp"),
            "consumerImportCustomRoutes": obj.get("consumerImportCustomRoutes"),
            "consumerImportSubnetRoutesWithPublicIp": obj.get("consumerImportSubnetRoutesWithPublicIp"),
            "producerExportCustomRoutes": obj.get("producerExportCustomRoutes"),
            "producerExportSubnetRoutesWithPublicIp": obj.get("producerExportSubnetRoutesWithPublicIp"),
            "producerImportCustomRoutes": obj.get("producerImportCustomRoutes"),
            "producerImportSubnetRoutesWithPublicIp": obj.get("producerImportSubnetRoutesWithPublicIp"),
            "producerNetwork": obj.get("producerNetwork"),
            "reservedRanges": [GoogleCloudServicenetworkingV1ConsumerConfigReservedRange.from_dict(_item) for _item in obj["reservedRanges"]] if obj.get("reservedRanges") is not None else None,
            "usedIpRanges": obj.get("usedIpRanges"),
            "vpcScReferenceArchitectureEnabled": obj.get("vpcScReferenceArchitectureEnabled")
        })
        return _obj



# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.attribution import Attribution
from openapi_client.models.dimensions import Dimensions
from openapi_client.models.location_association import LocationAssociation
from openapi_client.models.media_insights import MediaInsights
from openapi_client.models.media_item_data_ref import MediaItemDataRef
from typing import Optional, Set
from typing_extensions import Self

class MediaItem(BaseModel):
    """
    A single media item.
    """ # noqa: E501
    attribution: Optional[Attribution] = None
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Creation time of this media item.", alias="createTime")
    data_ref: Optional[MediaItemDataRef] = Field(default=None, alias="dataRef")
    description: Optional[StrictStr] = Field(default=None, description="Description for this media item. Descriptions cannot be modified through the Google My Business API, but can be set when creating a new media item that is not a cover photo.")
    dimensions: Optional[Dimensions] = None
    google_url: Optional[StrictStr] = Field(default=None, description="Output only. Google-hosted URL for this media item. This URL is not static since it may change over time. For video this will be a preview image with an overlaid play icon.", alias="googleUrl")
    insights: Optional[MediaInsights] = None
    location_association: Optional[LocationAssociation] = Field(default=None, alias="locationAssociation")
    media_format: Optional[StrictStr] = Field(default=None, description="The format of this media item. Must be set when the media item is created, and is read-only on all other requests. Cannot be updated.", alias="mediaFormat")
    name: Optional[StrictStr] = Field(default=None, description="The resource name for this media item. `accounts/{account_id}/locations/{location_id}/media/{media_key}`")
    source_url: Optional[StrictStr] = Field(default=None, description="A publicly accessible URL where the media item can be retrieved from. When creating one of this or data_ref must be set to specify the source of the media item. If `source_url` was used when creating a media item, it will be populated with that source URL when the media item is retrieved. This field cannot be updated.", alias="sourceUrl")
    thumbnail_url: Optional[StrictStr] = Field(default=None, description="Output only. Where provided, the URL of a thumbnail image for this media item.", alias="thumbnailUrl")
    __properties: ClassVar[List[str]] = ["attribution", "createTime", "dataRef", "description", "dimensions", "googleUrl", "insights", "locationAssociation", "mediaFormat", "name", "sourceUrl", "thumbnailUrl"]

    @field_validator('media_format')
    def media_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MEDIA_FORMAT_UNSPECIFIED', 'PHOTO', 'VIDEO']):
            raise ValueError("must be one of enum values ('MEDIA_FORMAT_UNSPECIFIED', 'PHOTO', 'VIDEO')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MediaItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attribution
        if self.attribution:
            _dict['attribution'] = self.attribution.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_ref
        if self.data_ref:
            _dict['dataRef'] = self.data_ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dimensions
        if self.dimensions:
            _dict['dimensions'] = self.dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of insights
        if self.insights:
            _dict['insights'] = self.insights.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location_association
        if self.location_association:
            _dict['locationAssociation'] = self.location_association.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MediaItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attribution": Attribution.from_dict(obj["attribution"]) if obj.get("attribution") is not None else None,
            "createTime": obj.get("createTime"),
            "dataRef": MediaItemDataRef.from_dict(obj["dataRef"]) if obj.get("dataRef") is not None else None,
            "description": obj.get("description"),
            "dimensions": Dimensions.from_dict(obj["dimensions"]) if obj.get("dimensions") is not None else None,
            "googleUrl": obj.get("googleUrl"),
            "insights": MediaInsights.from_dict(obj["insights"]) if obj.get("insights") is not None else None,
            "locationAssociation": LocationAssociation.from_dict(obj["locationAssociation"]) if obj.get("locationAssociation") is not None else None,
            "mediaFormat": obj.get("mediaFormat"),
            "name": obj.get("name"),
            "sourceUrl": obj.get("sourceUrl"),
            "thumbnailUrl": obj.get("thumbnailUrl")
        })
        return _obj



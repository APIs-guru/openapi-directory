# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account_state import AccountState
from openapi_client.models.organization_info import OrganizationInfo
from typing import Optional, Set
from typing_extensions import Self

class Account(BaseModel):
    """
    An account is a container for your business's locations. If you are the only user who manages locations for your business, you can use your personal Google Account. To share management of locations with multiple users, [create a business account] (https://support.google.com/business/answer/6085339?ref_topic=6085325).
    """ # noqa: E501
    account_name: Optional[StrictStr] = Field(default=None, description="The name of the account. *Note:* For an account with AccountType `PERSONAL`, this is the first and last name of the user account.", alias="accountName")
    account_number: Optional[StrictStr] = Field(default=None, description="Account reference number if provisioned.", alias="accountNumber")
    name: Optional[StrictStr] = Field(default=None, description="The resource name, in the format `accounts/{account_id}`.")
    organization_info: Optional[OrganizationInfo] = Field(default=None, alias="organizationInfo")
    permission_level: Optional[StrictStr] = Field(default=None, description="Output only. Specifies the PermissionLevel the caller has for this account.", alias="permissionLevel")
    role: Optional[StrictStr] = Field(default=None, description="Output only. Specifies the AccountRole the caller has for this account.")
    state: Optional[AccountState] = None
    type: Optional[StrictStr] = Field(default=None, description="Output only. Specifies the AccountType of this account.")
    __properties: ClassVar[List[str]] = ["accountName", "accountNumber", "name", "organizationInfo", "permissionLevel", "role", "state", "type"]

    @field_validator('permission_level')
    def permission_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PERMISSION_LEVEL_UNSPECIFIED', 'OWNER_LEVEL', 'MEMBER_LEVEL']):
            raise ValueError("must be one of enum values ('PERMISSION_LEVEL_UNSPECIFIED', 'OWNER_LEVEL', 'MEMBER_LEVEL')")
        return value

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACCOUNT_ROLE_UNSPECIFIED', 'OWNER', 'CO_OWNER', 'MANAGER', 'COMMUNITY_MANAGER']):
            raise ValueError("must be one of enum values ('ACCOUNT_ROLE_UNSPECIFIED', 'OWNER', 'CO_OWNER', 'MANAGER', 'COMMUNITY_MANAGER')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACCOUNT_TYPE_UNSPECIFIED', 'PERSONAL', 'LOCATION_GROUP', 'USER_GROUP', 'ORGANIZATION']):
            raise ValueError("must be one of enum values ('ACCOUNT_TYPE_UNSPECIFIED', 'PERSONAL', 'LOCATION_GROUP', 'USER_GROUP', 'ORGANIZATION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Account from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of organization_info
        if self.organization_info:
            _dict['organizationInfo'] = self.organization_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Account from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountName": obj.get("accountName"),
            "accountNumber": obj.get("accountNumber"),
            "name": obj.get("name"),
            "organizationInfo": OrganizationInfo.from_dict(obj["organizationInfo"]) if obj.get("organizationInfo") is not None else None,
            "permissionLevel": obj.get("permissionLevel"),
            "role": obj.get("role"),
            "state": AccountState.from_dict(obj["state"]) if obj.get("state") is not None else None,
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.call_to_action import CallToAction
from openapi_client.models.local_post_event import LocalPostEvent
from openapi_client.models.local_post_offer import LocalPostOffer
from openapi_client.models.media_item import MediaItem
from typing import Optional, Set
from typing_extensions import Self

class LocalPost(BaseModel):
    """
    Represents a [local post](https://support.google.com/business/answer/7662907) for a location.
    """ # noqa: E501
    alert_type: Optional[StrictStr] = Field(default=None, description="The type of alert the post is created for. This field is only applicable for posts of topic_type Alert, and behaves as a sub-type of Alerts.", alias="alertType")
    call_to_action: Optional[CallToAction] = Field(default=None, alias="callToAction")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time of the creation of the post.", alias="createTime")
    event: Optional[LocalPostEvent] = None
    language_code: Optional[StrictStr] = Field(default=None, description="The language of the local post.", alias="languageCode")
    media: Optional[List[MediaItem]] = Field(default=None, description="The media associated with the post. source_url is the only supported data field for a LocalPost MediaItem.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Google identifier for this local post in the form: `accounts/{account_id}/locations/{location_id}/localPosts/{local_post_id}`")
    offer: Optional[LocalPostOffer] = None
    search_url: Optional[StrictStr] = Field(default=None, description="Output only. The link to the local post in Google search. This link can be used to share the post via social media, email, text, etc.", alias="searchUrl")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the post, indicating what part of its lifecycle it is in.")
    summary: Optional[StrictStr] = Field(default=None, description="Description/body of the local post.")
    topic_type: Optional[StrictStr] = Field(default=None, description="Required. The topic type of the post: standard, event, offer, or alert.", alias="topicType")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Time of the last modification of the post made by the user.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["alertType", "callToAction", "createTime", "event", "languageCode", "media", "name", "offer", "searchUrl", "state", "summary", "topicType", "updateTime"]

    @field_validator('alert_type')
    def alert_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALERT_TYPE_UNSPECIFIED', 'COVID_19']):
            raise ValueError("must be one of enum values ('ALERT_TYPE_UNSPECIFIED', 'COVID_19')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LOCAL_POST_STATE_UNSPECIFIED', 'REJECTED', 'LIVE', 'PROCESSING']):
            raise ValueError("must be one of enum values ('LOCAL_POST_STATE_UNSPECIFIED', 'REJECTED', 'LIVE', 'PROCESSING')")
        return value

    @field_validator('topic_type')
    def topic_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LOCAL_POST_TOPIC_TYPE_UNSPECIFIED', 'STANDARD', 'EVENT', 'OFFER', 'ALERT']):
            raise ValueError("must be one of enum values ('LOCAL_POST_TOPIC_TYPE_UNSPECIFIED', 'STANDARD', 'EVENT', 'OFFER', 'ALERT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LocalPost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of call_to_action
        if self.call_to_action:
            _dict['callToAction'] = self.call_to_action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event
        if self.event:
            _dict['event'] = self.event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in media (list)
        _items = []
        if self.media:
            for _item_media in self.media:
                if _item_media:
                    _items.append(_item_media.to_dict())
            _dict['media'] = _items
        # override the default output from pydantic by calling `to_dict()` of offer
        if self.offer:
            _dict['offer'] = self.offer.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LocalPost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alertType": obj.get("alertType"),
            "callToAction": CallToAction.from_dict(obj["callToAction"]) if obj.get("callToAction") is not None else None,
            "createTime": obj.get("createTime"),
            "event": LocalPostEvent.from_dict(obj["event"]) if obj.get("event") is not None else None,
            "languageCode": obj.get("languageCode"),
            "media": [MediaItem.from_dict(_item) for _item in obj["media"]] if obj.get("media") is not None else None,
            "name": obj.get("name"),
            "offer": LocalPostOffer.from_dict(obj["offer"]) if obj.get("offer") is not None else None,
            "searchUrl": obj.get("searchUrl"),
            "state": obj.get("state"),
            "summary": obj.get("summary"),
            "topicType": obj.get("topicType"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



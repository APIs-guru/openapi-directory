# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enhanced_cleaning import EnhancedCleaning
from openapi_client.models.increased_food_safety import IncreasedFoodSafety
from openapi_client.models.minimized_contact import MinimizedContact
from openapi_client.models.personal_protection import PersonalProtection
from openapi_client.models.physical_distancing import PhysicalDistancing
from typing import Optional, Set
from typing_extensions import Self

class HealthAndSafety(BaseModel):
    """
    Health and safety measures implemented by the hotel during COVID-19.
    """ # noqa: E501
    enhanced_cleaning: Optional[EnhancedCleaning] = Field(default=None, alias="enhancedCleaning")
    increased_food_safety: Optional[IncreasedFoodSafety] = Field(default=None, alias="increasedFoodSafety")
    minimized_contact: Optional[MinimizedContact] = Field(default=None, alias="minimizedContact")
    personal_protection: Optional[PersonalProtection] = Field(default=None, alias="personalProtection")
    physical_distancing: Optional[PhysicalDistancing] = Field(default=None, alias="physicalDistancing")
    __properties: ClassVar[List[str]] = ["enhancedCleaning", "increasedFoodSafety", "minimizedContact", "personalProtection", "physicalDistancing"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HealthAndSafety from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of enhanced_cleaning
        if self.enhanced_cleaning:
            _dict['enhancedCleaning'] = self.enhanced_cleaning.to_dict()
        # override the default output from pydantic by calling `to_dict()` of increased_food_safety
        if self.increased_food_safety:
            _dict['increasedFoodSafety'] = self.increased_food_safety.to_dict()
        # override the default output from pydantic by calling `to_dict()` of minimized_contact
        if self.minimized_contact:
            _dict['minimizedContact'] = self.minimized_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of personal_protection
        if self.personal_protection:
            _dict['personalProtection'] = self.personal_protection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of physical_distancing
        if self.physical_distancing:
            _dict['physicalDistancing'] = self.physical_distancing.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HealthAndSafety from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enhancedCleaning": EnhancedCleaning.from_dict(obj["enhancedCleaning"]) if obj.get("enhancedCleaning") is not None else None,
            "increasedFoodSafety": IncreasedFoodSafety.from_dict(obj["increasedFoodSafety"]) if obj.get("increasedFoodSafety") is not None else None,
            "minimizedContact": MinimizedContact.from_dict(obj["minimizedContact"]) if obj.get("minimizedContact") is not None else None,
            "personalProtection": PersonalProtection.from_dict(obj["personalProtection"]) if obj.get("personalProtection") is not None else None,
            "physicalDistancing": PhysicalDistancing.from_dict(obj["physicalDistancing"]) if obj.get("physicalDistancing") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LivingAreaEating(BaseModel):
    """
    Information about eating features in the living area.
    """ # noqa: E501
    coffee_maker: Optional[StrictBool] = Field(default=None, description="Coffee maker. An electric appliance that brews coffee by heating and forcing water through ground coffee.", alias="coffeeMaker")
    coffee_maker_exception: Optional[StrictStr] = Field(default=None, description="Coffee maker exception.", alias="coffeeMakerException")
    cookware: Optional[StrictBool] = Field(default=None, description="Cookware. Kitchen pots, pans and utensils used in connection with the preparation of food.")
    cookware_exception: Optional[StrictStr] = Field(default=None, description="Cookware exception.", alias="cookwareException")
    dishwasher: Optional[StrictBool] = Field(default=None, description="Dishwasher. A counter-height electrical cabinet containing racks for dirty dishware, cookware and cutlery, and a dispenser for soap built into the pull-down door. The cabinet is attached to the plumbing system to facilitate the automatic cleaning of its contents.")
    dishwasher_exception: Optional[StrictStr] = Field(default=None, description="Dishwasher exception.", alias="dishwasherException")
    indoor_grill: Optional[StrictBool] = Field(default=None, description="Indoor grill. Metal grates built into an indoor cooktop on which food is cooked over an open flame or electric heat source.", alias="indoorGrill")
    indoor_grill_exception: Optional[StrictStr] = Field(default=None, description="Indoor grill exception.", alias="indoorGrillException")
    kettle: Optional[StrictBool] = Field(default=None, description="Kettle. A covered container with a handle and a spout used for boiling water.")
    kettle_exception: Optional[StrictStr] = Field(default=None, description="Kettle exception.", alias="kettleException")
    kitchen_available: Optional[StrictBool] = Field(default=None, description="Kitchen available. An area of the guestroom designated for the preparation and storage of food via the presence of a refrigerator, cook top, oven and sink, as well as cutlery, dishes and cookware. Usually includes small appliances such a coffee maker and a microwave. May or may not include an automatic dishwasher.", alias="kitchenAvailable")
    kitchen_available_exception: Optional[StrictStr] = Field(default=None, description="Kitchen available exception.", alias="kitchenAvailableException")
    microwave: Optional[StrictBool] = Field(default=None, description="Microwave. An electric oven that quickly cooks and heats food by microwave energy. Smaller than a standing or wall mounted oven. Usually placed on a kitchen counter, a shelf or tabletop or mounted above a cooktop.")
    microwave_exception: Optional[StrictStr] = Field(default=None, description="Microwave exception.", alias="microwaveException")
    minibar: Optional[StrictBool] = Field(default=None, description="Minibar. A small refrigerated cabinet in the guestroom containing bottles/cans of soft drinks, mini bottles of alcohol, and snacks. The items are most commonly available for a fee.")
    minibar_exception: Optional[StrictStr] = Field(default=None, description="Minibar exception.", alias="minibarException")
    outdoor_grill: Optional[StrictBool] = Field(default=None, description="Outdoor grill. Metal grates on which food is cooked over an open flame or electric heat source. Part of an outdoor apparatus that supports the grates. Also known as barbecue grill or barbecue.", alias="outdoorGrill")
    outdoor_grill_exception: Optional[StrictStr] = Field(default=None, description="Outdoor grill exception.", alias="outdoorGrillException")
    oven: Optional[StrictBool] = Field(default=None, description="Oven. A temperature controlled, heated metal cabinet powered by gas or electricity in which food is placed for the purpose of cooking or reheating.")
    oven_exception: Optional[StrictStr] = Field(default=None, description="Oven exception.", alias="ovenException")
    refrigerator: Optional[StrictBool] = Field(default=None, description="Refrigerator. A large, climate-controlled electrical cabinet with vertical doors. Built for the purpose of chilling and storing perishable foods.")
    refrigerator_exception: Optional[StrictStr] = Field(default=None, description="Refrigerator exception.", alias="refrigeratorException")
    sink: Optional[StrictBool] = Field(default=None, description="Sink. A basin with a faucet attached to a water source and used for the purpose of washing and rinsing.")
    sink_exception: Optional[StrictStr] = Field(default=None, description="Sink exception.", alias="sinkException")
    snackbar: Optional[StrictBool] = Field(default=None, description="Snackbar. A small cabinet in the guestroom containing snacks. The items are most commonly available for a fee.")
    snackbar_exception: Optional[StrictStr] = Field(default=None, description="Snackbar exception.", alias="snackbarException")
    stove: Optional[StrictBool] = Field(default=None, description="Stove. A kitchen appliance powered by gas or electricity for the purpose of creating a flame or hot surface on which pots of food can be cooked. Also known as cooktop or hob.")
    stove_exception: Optional[StrictStr] = Field(default=None, description="Stove exception.", alias="stoveException")
    tea_station: Optional[StrictBool] = Field(default=None, description="Tea station. A small area with the supplies needed to heat water and make tea.", alias="teaStation")
    tea_station_exception: Optional[StrictStr] = Field(default=None, description="Tea station exception.", alias="teaStationException")
    toaster: Optional[StrictBool] = Field(default=None, description="Toaster. A small, temperature controlled electric appliance with rectangular slots at the top that are lined with heated coils for the purpose of browning slices of bread products.")
    toaster_exception: Optional[StrictStr] = Field(default=None, description="Toaster exception.", alias="toasterException")
    __properties: ClassVar[List[str]] = ["coffeeMaker", "coffeeMakerException", "cookware", "cookwareException", "dishwasher", "dishwasherException", "indoorGrill", "indoorGrillException", "kettle", "kettleException", "kitchenAvailable", "kitchenAvailableException", "microwave", "microwaveException", "minibar", "minibarException", "outdoorGrill", "outdoorGrillException", "oven", "ovenException", "refrigerator", "refrigeratorException", "sink", "sinkException", "snackbar", "snackbarException", "stove", "stoveException", "teaStation", "teaStationException", "toaster", "toasterException"]

    @field_validator('coffee_maker_exception')
    def coffee_maker_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('cookware_exception')
    def cookware_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('dishwasher_exception')
    def dishwasher_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('indoor_grill_exception')
    def indoor_grill_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('kettle_exception')
    def kettle_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('kitchen_available_exception')
    def kitchen_available_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('microwave_exception')
    def microwave_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('minibar_exception')
    def minibar_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('outdoor_grill_exception')
    def outdoor_grill_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('oven_exception')
    def oven_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('refrigerator_exception')
    def refrigerator_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('sink_exception')
    def sink_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('snackbar_exception')
    def snackbar_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('stove_exception')
    def stove_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('tea_station_exception')
    def tea_station_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('toaster_exception')
    def toaster_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LivingAreaEating from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LivingAreaEating from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "coffeeMaker": obj.get("coffeeMaker"),
            "coffeeMakerException": obj.get("coffeeMakerException"),
            "cookware": obj.get("cookware"),
            "cookwareException": obj.get("cookwareException"),
            "dishwasher": obj.get("dishwasher"),
            "dishwasherException": obj.get("dishwasherException"),
            "indoorGrill": obj.get("indoorGrill"),
            "indoorGrillException": obj.get("indoorGrillException"),
            "kettle": obj.get("kettle"),
            "kettleException": obj.get("kettleException"),
            "kitchenAvailable": obj.get("kitchenAvailable"),
            "kitchenAvailableException": obj.get("kitchenAvailableException"),
            "microwave": obj.get("microwave"),
            "microwaveException": obj.get("microwaveException"),
            "minibar": obj.get("minibar"),
            "minibarException": obj.get("minibarException"),
            "outdoorGrill": obj.get("outdoorGrill"),
            "outdoorGrillException": obj.get("outdoorGrillException"),
            "oven": obj.get("oven"),
            "ovenException": obj.get("ovenException"),
            "refrigerator": obj.get("refrigerator"),
            "refrigeratorException": obj.get("refrigeratorException"),
            "sink": obj.get("sink"),
            "sinkException": obj.get("sinkException"),
            "snackbar": obj.get("snackbar"),
            "snackbarException": obj.get("snackbarException"),
            "stove": obj.get("stove"),
            "stoveException": obj.get("stoveException"),
            "teaStation": obj.get("teaStation"),
            "teaStationException": obj.get("teaStationException"),
            "toaster": obj.get("toaster"),
            "toasterException": obj.get("toasterException")
        })
        return _obj



# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MinimizedContact(BaseModel):
    """
    Minimized contact measures implemented by the hotel during COVID-19.
    """ # noqa: E501
    contactless_checkin_checkout: Optional[StrictBool] = Field(default=None, description="No-contact check-in and check-out.", alias="contactlessCheckinCheckout")
    contactless_checkin_checkout_exception: Optional[StrictStr] = Field(default=None, description="Contactless check-in check-out exception.", alias="contactlessCheckinCheckoutException")
    digital_guest_room_keys: Optional[StrictBool] = Field(default=None, description="Keyless mobile entry to guest rooms.", alias="digitalGuestRoomKeys")
    digital_guest_room_keys_exception: Optional[StrictStr] = Field(default=None, description="Digital guest room keys exception.", alias="digitalGuestRoomKeysException")
    housekeeping_scheduled_request_only: Optional[StrictBool] = Field(default=None, description="Housekeeping scheduled by request only.", alias="housekeepingScheduledRequestOnly")
    housekeeping_scheduled_request_only_exception: Optional[StrictStr] = Field(default=None, description="Housekeeping scheduled request only exception.", alias="housekeepingScheduledRequestOnlyException")
    no_high_touch_items_common_areas: Optional[StrictBool] = Field(default=None, description="High-touch items, such as magazines, removed from common areas.", alias="noHighTouchItemsCommonAreas")
    no_high_touch_items_common_areas_exception: Optional[StrictStr] = Field(default=None, description="No high touch items common areas exception.", alias="noHighTouchItemsCommonAreasException")
    no_high_touch_items_guest_rooms: Optional[StrictBool] = Field(default=None, description="High-touch items, such as decorative pillows, removed from guest rooms.", alias="noHighTouchItemsGuestRooms")
    no_high_touch_items_guest_rooms_exception: Optional[StrictStr] = Field(default=None, description="No high touch items guest rooms exception.", alias="noHighTouchItemsGuestRoomsException")
    plastic_keycards_disinfected: Optional[StrictBool] = Field(default=None, description="Plastic key cards are disinfected or discarded.", alias="plasticKeycardsDisinfected")
    plastic_keycards_disinfected_exception: Optional[StrictStr] = Field(default=None, description="Plastic keycards disinfected exception.", alias="plasticKeycardsDisinfectedException")
    room_bookings_buffer: Optional[StrictBool] = Field(default=None, description="Buffer maintained between room bookings.", alias="roomBookingsBuffer")
    room_bookings_buffer_exception: Optional[StrictStr] = Field(default=None, description="Room bookings buffer exception.", alias="roomBookingsBufferException")
    __properties: ClassVar[List[str]] = ["contactlessCheckinCheckout", "contactlessCheckinCheckoutException", "digitalGuestRoomKeys", "digitalGuestRoomKeysException", "housekeepingScheduledRequestOnly", "housekeepingScheduledRequestOnlyException", "noHighTouchItemsCommonAreas", "noHighTouchItemsCommonAreasException", "noHighTouchItemsGuestRooms", "noHighTouchItemsGuestRoomsException", "plasticKeycardsDisinfected", "plasticKeycardsDisinfectedException", "roomBookingsBuffer", "roomBookingsBufferException"]

    @field_validator('contactless_checkin_checkout_exception')
    def contactless_checkin_checkout_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('digital_guest_room_keys_exception')
    def digital_guest_room_keys_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('housekeeping_scheduled_request_only_exception')
    def housekeeping_scheduled_request_only_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('no_high_touch_items_common_areas_exception')
    def no_high_touch_items_common_areas_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('no_high_touch_items_guest_rooms_exception')
    def no_high_touch_items_guest_rooms_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('plastic_keycards_disinfected_exception')
    def plastic_keycards_disinfected_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('room_bookings_buffer_exception')
    def room_bookings_buffer_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MinimizedContact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MinimizedContact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contactlessCheckinCheckout": obj.get("contactlessCheckinCheckout"),
            "contactlessCheckinCheckoutException": obj.get("contactlessCheckinCheckoutException"),
            "digitalGuestRoomKeys": obj.get("digitalGuestRoomKeys"),
            "digitalGuestRoomKeysException": obj.get("digitalGuestRoomKeysException"),
            "housekeepingScheduledRequestOnly": obj.get("housekeepingScheduledRequestOnly"),
            "housekeepingScheduledRequestOnlyException": obj.get("housekeepingScheduledRequestOnlyException"),
            "noHighTouchItemsCommonAreas": obj.get("noHighTouchItemsCommonAreas"),
            "noHighTouchItemsCommonAreasException": obj.get("noHighTouchItemsCommonAreasException"),
            "noHighTouchItemsGuestRooms": obj.get("noHighTouchItemsGuestRooms"),
            "noHighTouchItemsGuestRoomsException": obj.get("noHighTouchItemsGuestRoomsException"),
            "plasticKeycardsDisinfected": obj.get("plasticKeycardsDisinfected"),
            "plasticKeycardsDisinfectedException": obj.get("plasticKeycardsDisinfectedException"),
            "roomBookingsBuffer": obj.get("roomBookingsBuffer"),
            "roomBookingsBufferException": obj.get("roomBookingsBufferException")
        })
        return _obj



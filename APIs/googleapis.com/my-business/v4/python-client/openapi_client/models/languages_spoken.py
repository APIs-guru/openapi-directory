# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LanguagesSpoken(BaseModel):
    """
    Languages spoken by at least one staff member.
    """ # noqa: E501
    arabic_spoken: Optional[StrictBool] = Field(default=None, description="Arabic. At least one staff member speaks Arabic.", alias="arabicSpoken")
    arabic_spoken_exception: Optional[StrictStr] = Field(default=None, description="Arabic exception.", alias="arabicSpokenException")
    cantonese_spoken: Optional[StrictBool] = Field(default=None, description="Cantonese. At least one staff member speaks Cantonese.", alias="cantoneseSpoken")
    cantonese_spoken_exception: Optional[StrictStr] = Field(default=None, description="Cantonese exception.", alias="cantoneseSpokenException")
    dutch_spoken: Optional[StrictBool] = Field(default=None, description="Dutch. At least one staff member speaks Dutch.", alias="dutchSpoken")
    dutch_spoken_exception: Optional[StrictStr] = Field(default=None, description="Dutch exception.", alias="dutchSpokenException")
    english_spoken: Optional[StrictBool] = Field(default=None, description="English. At least one staff member speaks English.", alias="englishSpoken")
    english_spoken_exception: Optional[StrictStr] = Field(default=None, description="English exception.", alias="englishSpokenException")
    filipino_spoken: Optional[StrictBool] = Field(default=None, description="Filipino. At least one staff member speaks Filipino.", alias="filipinoSpoken")
    filipino_spoken_exception: Optional[StrictStr] = Field(default=None, description="Filipino exception.", alias="filipinoSpokenException")
    french_spoken: Optional[StrictBool] = Field(default=None, description="French. At least one staff member speaks French.", alias="frenchSpoken")
    french_spoken_exception: Optional[StrictStr] = Field(default=None, description="French exception.", alias="frenchSpokenException")
    german_spoken: Optional[StrictBool] = Field(default=None, description="German. At least one staff member speaks German.", alias="germanSpoken")
    german_spoken_exception: Optional[StrictStr] = Field(default=None, description="German exception.", alias="germanSpokenException")
    hindi_spoken: Optional[StrictBool] = Field(default=None, description="Hindi. At least one staff member speaks Hindi.", alias="hindiSpoken")
    hindi_spoken_exception: Optional[StrictStr] = Field(default=None, description="Hindi exception.", alias="hindiSpokenException")
    indonesian_spoken: Optional[StrictBool] = Field(default=None, description="Indonesian. At least one staff member speaks Indonesian.", alias="indonesianSpoken")
    indonesian_spoken_exception: Optional[StrictStr] = Field(default=None, description="Indonesian exception.", alias="indonesianSpokenException")
    italian_spoken: Optional[StrictBool] = Field(default=None, description="Italian. At least one staff member speaks Italian.", alias="italianSpoken")
    italian_spoken_exception: Optional[StrictStr] = Field(default=None, description="Italian exception.", alias="italianSpokenException")
    japanese_spoken: Optional[StrictBool] = Field(default=None, description="Japanese. At least one staff member speaks Japanese.", alias="japaneseSpoken")
    japanese_spoken_exception: Optional[StrictStr] = Field(default=None, description="Japanese exception.", alias="japaneseSpokenException")
    korean_spoken: Optional[StrictBool] = Field(default=None, description="Korean. At least one staff member speaks Korean.", alias="koreanSpoken")
    korean_spoken_exception: Optional[StrictStr] = Field(default=None, description="Korean exception.", alias="koreanSpokenException")
    mandarin_spoken: Optional[StrictBool] = Field(default=None, description="Mandarin. At least one staff member speaks Mandarin.", alias="mandarinSpoken")
    mandarin_spoken_exception: Optional[StrictStr] = Field(default=None, description="Mandarin exception.", alias="mandarinSpokenException")
    portuguese_spoken: Optional[StrictBool] = Field(default=None, description="Portuguese. At least one staff member speaks Portuguese.", alias="portugueseSpoken")
    portuguese_spoken_exception: Optional[StrictStr] = Field(default=None, description="Portuguese exception.", alias="portugueseSpokenException")
    russian_spoken: Optional[StrictBool] = Field(default=None, description="Russian. At least one staff member speaks Russian.", alias="russianSpoken")
    russian_spoken_exception: Optional[StrictStr] = Field(default=None, description="Russian exception.", alias="russianSpokenException")
    spanish_spoken: Optional[StrictBool] = Field(default=None, description="Spanish. At least one staff member speaks Spanish.", alias="spanishSpoken")
    spanish_spoken_exception: Optional[StrictStr] = Field(default=None, description="Spanish exception.", alias="spanishSpokenException")
    vietnamese_spoken: Optional[StrictBool] = Field(default=None, description="Vietnamese. At least one staff member speaks Vietnamese.", alias="vietnameseSpoken")
    vietnamese_spoken_exception: Optional[StrictStr] = Field(default=None, description="Vietnamese exception.", alias="vietnameseSpokenException")
    __properties: ClassVar[List[str]] = ["arabicSpoken", "arabicSpokenException", "cantoneseSpoken", "cantoneseSpokenException", "dutchSpoken", "dutchSpokenException", "englishSpoken", "englishSpokenException", "filipinoSpoken", "filipinoSpokenException", "frenchSpoken", "frenchSpokenException", "germanSpoken", "germanSpokenException", "hindiSpoken", "hindiSpokenException", "indonesianSpoken", "indonesianSpokenException", "italianSpoken", "italianSpokenException", "japaneseSpoken", "japaneseSpokenException", "koreanSpoken", "koreanSpokenException", "mandarinSpoken", "mandarinSpokenException", "portugueseSpoken", "portugueseSpokenException", "russianSpoken", "russianSpokenException", "spanishSpoken", "spanishSpokenException", "vietnameseSpoken", "vietnameseSpokenException"]

    @field_validator('arabic_spoken_exception')
    def arabic_spoken_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('cantonese_spoken_exception')
    def cantonese_spoken_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('dutch_spoken_exception')
    def dutch_spoken_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('english_spoken_exception')
    def english_spoken_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('filipino_spoken_exception')
    def filipino_spoken_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('french_spoken_exception')
    def french_spoken_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('german_spoken_exception')
    def german_spoken_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('hindi_spoken_exception')
    def hindi_spoken_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('indonesian_spoken_exception')
    def indonesian_spoken_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('italian_spoken_exception')
    def italian_spoken_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('japanese_spoken_exception')
    def japanese_spoken_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('korean_spoken_exception')
    def korean_spoken_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('mandarin_spoken_exception')
    def mandarin_spoken_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('portuguese_spoken_exception')
    def portuguese_spoken_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('russian_spoken_exception')
    def russian_spoken_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('spanish_spoken_exception')
    def spanish_spoken_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('vietnamese_spoken_exception')
    def vietnamese_spoken_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LanguagesSpoken from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LanguagesSpoken from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arabicSpoken": obj.get("arabicSpoken"),
            "arabicSpokenException": obj.get("arabicSpokenException"),
            "cantoneseSpoken": obj.get("cantoneseSpoken"),
            "cantoneseSpokenException": obj.get("cantoneseSpokenException"),
            "dutchSpoken": obj.get("dutchSpoken"),
            "dutchSpokenException": obj.get("dutchSpokenException"),
            "englishSpoken": obj.get("englishSpoken"),
            "englishSpokenException": obj.get("englishSpokenException"),
            "filipinoSpoken": obj.get("filipinoSpoken"),
            "filipinoSpokenException": obj.get("filipinoSpokenException"),
            "frenchSpoken": obj.get("frenchSpoken"),
            "frenchSpokenException": obj.get("frenchSpokenException"),
            "germanSpoken": obj.get("germanSpoken"),
            "germanSpokenException": obj.get("germanSpokenException"),
            "hindiSpoken": obj.get("hindiSpoken"),
            "hindiSpokenException": obj.get("hindiSpokenException"),
            "indonesianSpoken": obj.get("indonesianSpoken"),
            "indonesianSpokenException": obj.get("indonesianSpokenException"),
            "italianSpoken": obj.get("italianSpoken"),
            "italianSpokenException": obj.get("italianSpokenException"),
            "japaneseSpoken": obj.get("japaneseSpoken"),
            "japaneseSpokenException": obj.get("japaneseSpokenException"),
            "koreanSpoken": obj.get("koreanSpoken"),
            "koreanSpokenException": obj.get("koreanSpokenException"),
            "mandarinSpoken": obj.get("mandarinSpoken"),
            "mandarinSpokenException": obj.get("mandarinSpokenException"),
            "portugueseSpoken": obj.get("portugueseSpoken"),
            "portugueseSpokenException": obj.get("portugueseSpokenException"),
            "russianSpoken": obj.get("russianSpoken"),
            "russianSpokenException": obj.get("russianSpokenException"),
            "spanishSpoken": obj.get("spanishSpoken"),
            "spanishSpokenException": obj.get("spanishSpokenException"),
            "vietnameseSpoken": obj.get("vietnameseSpoken"),
            "vietnameseSpokenException": obj.get("vietnameseSpokenException")
        })
        return _obj



# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PersonalProtection(BaseModel):
    """
    Personal protection measures implemented by the hotel during COVID-19.
    """ # noqa: E501
    common_areas_offer_sanitizing_items: Optional[StrictBool] = Field(default=None, description="Hand-sanitizer and/or sanitizing wipes are offered in common areas.", alias="commonAreasOfferSanitizingItems")
    common_areas_offer_sanitizing_items_exception: Optional[StrictStr] = Field(default=None, description="Common areas offer sanitizing items exception.", alias="commonAreasOfferSanitizingItemsException")
    face_mask_required: Optional[StrictBool] = Field(default=None, description="Masks required on the property.", alias="faceMaskRequired")
    face_mask_required_exception: Optional[StrictStr] = Field(default=None, description="Face mask required exception.", alias="faceMaskRequiredException")
    guest_room_hygiene_kits_available: Optional[StrictBool] = Field(default=None, description="In-room hygiene kits with masks, hand sanitizer, and/or antibacterial wipes.", alias="guestRoomHygieneKitsAvailable")
    guest_room_hygiene_kits_available_exception: Optional[StrictStr] = Field(default=None, description="Guest room hygiene kits available exception.", alias="guestRoomHygieneKitsAvailableException")
    protective_equipment_available: Optional[StrictBool] = Field(default=None, description="Masks and/or gloves available for guests.", alias="protectiveEquipmentAvailable")
    protective_equipment_available_exception: Optional[StrictStr] = Field(default=None, description="Protective equipment available exception.", alias="protectiveEquipmentAvailableException")
    __properties: ClassVar[List[str]] = ["commonAreasOfferSanitizingItems", "commonAreasOfferSanitizingItemsException", "faceMaskRequired", "faceMaskRequiredException", "guestRoomHygieneKitsAvailable", "guestRoomHygieneKitsAvailableException", "protectiveEquipmentAvailable", "protectiveEquipmentAvailableException"]

    @field_validator('common_areas_offer_sanitizing_items_exception')
    def common_areas_offer_sanitizing_items_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('face_mask_required_exception')
    def face_mask_required_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('guest_room_hygiene_kits_available_exception')
    def guest_room_hygiene_kits_available_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('protective_equipment_available_exception')
    def protective_equipment_available_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PersonalProtection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PersonalProtection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commonAreasOfferSanitizingItems": obj.get("commonAreasOfferSanitizingItems"),
            "commonAreasOfferSanitizingItemsException": obj.get("commonAreasOfferSanitizingItemsException"),
            "faceMaskRequired": obj.get("faceMaskRequired"),
            "faceMaskRequiredException": obj.get("faceMaskRequiredException"),
            "guestRoomHygieneKitsAvailable": obj.get("guestRoomHygieneKitsAvailable"),
            "guestRoomHygieneKitsAvailableException": obj.get("guestRoomHygieneKitsAvailableException"),
            "protectiveEquipmentAvailable": obj.get("protectiveEquipmentAvailable"),
            "protectiveEquipmentAvailableException": obj.get("protectiveEquipmentAvailableException")
        })
        return _obj



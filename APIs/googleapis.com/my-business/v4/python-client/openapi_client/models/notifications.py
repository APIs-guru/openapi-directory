# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Notifications(BaseModel):
    """
    A Google Cloud Pub/Sub topic where notifications can be published when a location is updated or has a new review. There will be only one notification settings resource per-account.
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Output only. The notifications resource name.")
    notification_types: Optional[List[StrictStr]] = Field(default=None, description="The types of notifications that will be sent to the Cloud Pub/Sub topic. At least one must be specified. To stop receiving notifications entirely, use DeleteNotifications.", alias="notificationTypes")
    topic_name: Optional[StrictStr] = Field(default=None, description="The Google Cloud Pub/Sub topic that will receive notifications when locations managed by this account are updated. If unset, no notifications will be posted. The account mybusiness-api-pubsub@system.gserviceaccount.com must have at least Publish permissions on the Cloud Pub/Sub topic.", alias="topicName")
    __properties: ClassVar[List[str]] = ["name", "notificationTypes", "topicName"]

    @field_validator('notification_types')
    def notification_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['NOTIFICATION_TYPE_UNSPECIFIED', 'GOOGLE_UPDATE', 'NEW_REVIEW', 'UPDATED_REVIEW', 'NEW_CUSTOMER_MEDIA', 'NEW_QUESTION', 'UPDATED_QUESTION', 'NEW_ANSWER', 'UPDATED_ANSWER', 'UPDATED_LOCATION_STATE']):
                raise ValueError("each list item must be one of ('NOTIFICATION_TYPE_UNSPECIFIED', 'GOOGLE_UPDATE', 'NEW_REVIEW', 'UPDATED_REVIEW', 'NEW_CUSTOMER_MEDIA', 'NEW_QUESTION', 'UPDATED_QUESTION', 'NEW_ANSWER', 'UPDATED_ANSWER', 'UPDATED_LOCATION_STATE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Notifications from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Notifications from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "notificationTypes": obj.get("notificationTypes"),
            "topicName": obj.get("topicName")
        })
        return _obj



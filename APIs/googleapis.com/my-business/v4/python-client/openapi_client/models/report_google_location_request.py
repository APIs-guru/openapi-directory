# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ReportGoogleLocationRequest(BaseModel):
    """
    Request message for reporting a GoogleLocation.
    """ # noqa: E501
    location_group_name: Optional[StrictStr] = Field(default=None, description="Optional. The resource name of the location group that this Google Location is being reported for, in the format `accounts/{account_id}`.", alias="locationGroupName")
    report_reason_bad_location: Optional[StrictStr] = Field(default=None, description="The reason for which the user is reporting this location when the issue is with the location itself.", alias="reportReasonBadLocation")
    report_reason_bad_recommendation: Optional[StrictStr] = Field(default=None, description="The reason for which the user is reporting this location when the issue is with the recommendation. This report is useful if the location has been recommended to the Business Profile account.", alias="reportReasonBadRecommendation")
    report_reason_elaboration: Optional[StrictStr] = Field(default=None, description="Optional. A text entry for elaborating on the reason for which the user is reporting this location. The maximum length is 512 characters.", alias="reportReasonElaboration")
    report_reason_language_code: Optional[StrictStr] = Field(default=None, description="Optional. The BCP 47 code of language used in `report_reason_elaboration`.", alias="reportReasonLanguageCode")
    __properties: ClassVar[List[str]] = ["locationGroupName", "reportReasonBadLocation", "reportReasonBadRecommendation", "reportReasonElaboration", "reportReasonLanguageCode"]

    @field_validator('report_reason_bad_location')
    def report_reason_bad_location_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BAD_LOCATION_REASON_UNSPECIFIED', 'NOT_A_LOCATION', 'PERMANENTLY_CLOSED', 'DOES_NOT_EXIST', 'SPAM', 'NOT_A_BUSINESS', 'MOVED', 'DUPLICATE']):
            raise ValueError("must be one of enum values ('BAD_LOCATION_REASON_UNSPECIFIED', 'NOT_A_LOCATION', 'PERMANENTLY_CLOSED', 'DOES_NOT_EXIST', 'SPAM', 'NOT_A_BUSINESS', 'MOVED', 'DUPLICATE')")
        return value

    @field_validator('report_reason_bad_recommendation')
    def report_reason_bad_recommendation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BAD_RECOMMENDATION_REASON_UNSPECIFIED', 'NOT_A_STORE_FRONT', 'NOT_PART_OF_SUGGESTED_CHAIN', 'IRRELEVANT']):
            raise ValueError("must be one of enum values ('BAD_RECOMMENDATION_REASON_UNSPECIFIED', 'NOT_A_STORE_FRONT', 'NOT_PART_OF_SUGGESTED_CHAIN', 'IRRELEVANT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportGoogleLocationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportGoogleLocationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "locationGroupName": obj.get("locationGroupName"),
            "reportReasonBadLocation": obj.get("reportReasonBadLocation"),
            "reportReasonBadRecommendation": obj.get("reportReasonBadRecommendation"),
            "reportReasonElaboration": obj.get("reportReasonElaboration"),
            "reportReasonLanguageCode": obj.get("reportReasonLanguageCode")
        })
        return _obj



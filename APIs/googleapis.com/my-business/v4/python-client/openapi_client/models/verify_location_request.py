# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address_input import AddressInput
from openapi_client.models.email_input import EmailInput
from openapi_client.models.phone_input import PhoneInput
from openapi_client.models.service_business_context import ServiceBusinessContext
from typing import Optional, Set
from typing_extensions import Self

class VerifyLocationRequest(BaseModel):
    """
    Request message for Verifications.VerifyLocation.
    """ # noqa: E501
    address_input: Optional[AddressInput] = Field(default=None, alias="addressInput")
    context: Optional[ServiceBusinessContext] = None
    email_input: Optional[EmailInput] = Field(default=None, alias="emailInput")
    language_code: Optional[StrictStr] = Field(default=None, description="The BCP 47 language code representing the language that is to be used for the verification process.", alias="languageCode")
    method: Optional[StrictStr] = Field(default=None, description="Verification method.")
    phone_input: Optional[PhoneInput] = Field(default=None, alias="phoneInput")
    __properties: ClassVar[List[str]] = ["addressInput", "context", "emailInput", "languageCode", "method", "phoneInput"]

    @field_validator('method')
    def method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VERIFICATION_METHOD_UNSPECIFIED', 'ADDRESS', 'EMAIL', 'PHONE_CALL', 'SMS', 'AUTO']):
            raise ValueError("must be one of enum values ('VERIFICATION_METHOD_UNSPECIFIED', 'ADDRESS', 'EMAIL', 'PHONE_CALL', 'SMS', 'AUTO')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VerifyLocationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address_input
        if self.address_input:
            _dict['addressInput'] = self.address_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email_input
        if self.email_input:
            _dict['emailInput'] = self.email_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of phone_input
        if self.phone_input:
            _dict['phoneInput'] = self.phone_input.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VerifyLocationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addressInput": AddressInput.from_dict(obj["addressInput"]) if obj.get("addressInput") is not None else None,
            "context": ServiceBusinessContext.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "emailInput": EmailInput.from_dict(obj["emailInput"]) if obj.get("emailInput") is not None else None,
            "languageCode": obj.get("languageCode"),
            "method": obj.get("method"),
            "phoneInput": PhoneInput.from_dict(obj["phoneInput"]) if obj.get("phoneInput") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ingredient import Ingredient
from openapi_client.models.money import Money
from openapi_client.models.nutrition_facts import NutritionFacts
from openapi_client.models.portion_size import PortionSize
from typing import Optional, Set
from typing_extensions import Self

class FoodMenuItemAttributes(BaseModel):
    """
    Attributes of a food item/dish.
    """ # noqa: E501
    allergen: Optional[List[StrictStr]] = Field(default=None, description="Optional. Allergens associated with the food dish. It is highly recommended to provide this field.")
    dietary_restriction: Optional[List[StrictStr]] = Field(default=None, description="Optional. Dietary information of the food dish. It is highly recommended to provide this field.", alias="dietaryRestriction")
    ingredients: Optional[List[Ingredient]] = Field(default=None, description="Optional. Ingredients of the food dish option.")
    media_keys: Optional[List[StrictStr]] = Field(default=None, description="Optional. The media keys of the media associated with the dish. Only photo media is supported. When there are multiple photos associated, the first photo is considered as the preferred photo.", alias="mediaKeys")
    nutrition_facts: Optional[NutritionFacts] = Field(default=None, alias="nutritionFacts")
    portion_size: Optional[PortionSize] = Field(default=None, alias="portionSize")
    preparation_methods: Optional[List[StrictStr]] = Field(default=None, description="Optional. Methods on how the food dish option is prepared.", alias="preparationMethods")
    price: Optional[Money] = None
    serves_num_people: Optional[StrictInt] = Field(default=None, description="Optional. Number of people can be served by this food dish option.", alias="servesNumPeople")
    spiciness: Optional[StrictStr] = Field(default=None, description="Optional. Spiciness level of the food dish.")
    __properties: ClassVar[List[str]] = ["allergen", "dietaryRestriction", "ingredients", "mediaKeys", "nutritionFacts", "portionSize", "preparationMethods", "price", "servesNumPeople", "spiciness"]

    @field_validator('allergen')
    def allergen_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['ALLERGEN_UNSPECIFIED', 'DAIRY', 'EGG', 'FISH', 'PEANUT', 'SHELLFISH', 'SOY', 'TREE_NUT', 'WHEAT']):
                raise ValueError("each list item must be one of ('ALLERGEN_UNSPECIFIED', 'DAIRY', 'EGG', 'FISH', 'PEANUT', 'SHELLFISH', 'SOY', 'TREE_NUT', 'WHEAT')")
        return value

    @field_validator('dietary_restriction')
    def dietary_restriction_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['DIETARY_RESTRICTION_UNSPECIFIED', 'HALAL', 'KOSHER', 'ORGANIC', 'VEGAN', 'VEGETARIAN']):
                raise ValueError("each list item must be one of ('DIETARY_RESTRICTION_UNSPECIFIED', 'HALAL', 'KOSHER', 'ORGANIC', 'VEGAN', 'VEGETARIAN')")
        return value

    @field_validator('preparation_methods')
    def preparation_methods_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['PREPARATION_METHOD_UNSPECIFIED', 'BAKED', 'BARBECUED', 'BASTED', 'BLANCHED', 'BOILED', 'BRAISED', 'CODDLED', 'FERMENTED', 'FRIED', 'GRILLED', 'KNEADED', 'MARINATED', 'PAN_FRIED', 'PICKLED', 'PRESSURE_COOKED', 'ROASTED', 'SAUTEED', 'SEARED', 'SIMMERED', 'SMOKED', 'STEAMED', 'STEEPED', 'STIR_FRIED', 'OTHER_METHOD']):
                raise ValueError("each list item must be one of ('PREPARATION_METHOD_UNSPECIFIED', 'BAKED', 'BARBECUED', 'BASTED', 'BLANCHED', 'BOILED', 'BRAISED', 'CODDLED', 'FERMENTED', 'FRIED', 'GRILLED', 'KNEADED', 'MARINATED', 'PAN_FRIED', 'PICKLED', 'PRESSURE_COOKED', 'ROASTED', 'SAUTEED', 'SEARED', 'SIMMERED', 'SMOKED', 'STEAMED', 'STEEPED', 'STIR_FRIED', 'OTHER_METHOD')")
        return value

    @field_validator('spiciness')
    def spiciness_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SPICINESS_UNSPECIFIED', 'MILD', 'MEDIUM', 'HOT']):
            raise ValueError("must be one of enum values ('SPICINESS_UNSPECIFIED', 'MILD', 'MEDIUM', 'HOT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FoodMenuItemAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ingredients (list)
        _items = []
        if self.ingredients:
            for _item_ingredients in self.ingredients:
                if _item_ingredients:
                    _items.append(_item_ingredients.to_dict())
            _dict['ingredients'] = _items
        # override the default output from pydantic by calling `to_dict()` of nutrition_facts
        if self.nutrition_facts:
            _dict['nutritionFacts'] = self.nutrition_facts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of portion_size
        if self.portion_size:
            _dict['portionSize'] = self.portion_size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FoodMenuItemAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allergen": obj.get("allergen"),
            "dietaryRestriction": obj.get("dietaryRestriction"),
            "ingredients": [Ingredient.from_dict(_item) for _item in obj["ingredients"]] if obj.get("ingredients") is not None else None,
            "mediaKeys": obj.get("mediaKeys"),
            "nutritionFacts": NutritionFacts.from_dict(obj["nutritionFacts"]) if obj.get("nutritionFacts") is not None else None,
            "portionSize": PortionSize.from_dict(obj["portionSize"]) if obj.get("portionSize") is not None else None,
            "preparationMethods": obj.get("preparationMethods"),
            "price": Money.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "servesNumPeople": obj.get("servesNumPeople"),
            "spiciness": obj.get("spiciness")
        })
        return _obj



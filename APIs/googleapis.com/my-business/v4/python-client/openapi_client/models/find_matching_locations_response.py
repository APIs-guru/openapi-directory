# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.matched_location import MatchedLocation
from typing import Optional, Set
from typing_extensions import Self

class FindMatchingLocationsResponse(BaseModel):
    """
    Response message for Locations.FindMatchingLocations.
    """ # noqa: E501
    match_time: Optional[StrictStr] = Field(default=None, description="When the matching algorithm was last executed for this location.", alias="matchTime")
    matched_locations: Optional[List[MatchedLocation]] = Field(default=None, description="A collection of locations that are potential matches to the specified location, listed in order from best to least match. If there is an exact match, it will be in the first position.", alias="matchedLocations")
    __properties: ClassVar[List[str]] = ["matchTime", "matchedLocations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FindMatchingLocationsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in matched_locations (list)
        _items = []
        if self.matched_locations:
            for _item_matched_locations in self.matched_locations:
                if _item_matched_locations:
                    _items.append(_item_matched_locations.to_dict())
            _dict['matchedLocations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FindMatchingLocationsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "matchTime": obj.get("matchTime"),
            "matchedLocations": [MatchedLocation.from_dict(_item) for _item in obj["matchedLocations"]] if obj.get("matchedLocations") is not None else None
        })
        return _obj



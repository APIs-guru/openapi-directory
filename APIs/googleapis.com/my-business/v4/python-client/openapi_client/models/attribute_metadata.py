# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.attribute_value_metadata import AttributeValueMetadata
from typing import Optional, Set
from typing_extensions import Self

class AttributeMetadata(BaseModel):
    """
    Metadata for an attribute. Contains display information for the attribute, including a localized name and a heading for grouping related attributes together.
    """ # noqa: E501
    attribute_id: Optional[StrictStr] = Field(default=None, description="The ID of the attribute.", alias="attributeId")
    display_name: Optional[StrictStr] = Field(default=None, description="The localized display name for the attribute, if available; otherwise, the English display name.", alias="displayName")
    group_display_name: Optional[StrictStr] = Field(default=None, description="The localized display name of the group that contains this attribute, if available; otherwise, the English group name. Related attributes are collected into a group and should be displayed together under the heading given here.", alias="groupDisplayName")
    is_deprecated: Optional[StrictBool] = Field(default=None, description="If true, the attribute is deprecated and should no longer be used. If deprecated, updating this attribute will not result in an error, but updates will not be saved. At some point after being deprecated, the attribute will be removed entirely and it will become an error.", alias="isDeprecated")
    is_repeatable: Optional[StrictBool] = Field(default=None, description="If true, the attribute supports multiple values. If false, only a single value should be provided.", alias="isRepeatable")
    value_metadata: Optional[List[AttributeValueMetadata]] = Field(default=None, description="For some types of attributes (for example, enums), a list of supported values and corresponding display names for those values is provided.", alias="valueMetadata")
    value_type: Optional[StrictStr] = Field(default=None, description="The value type for the attribute. Values set and retrieved should be expected to be of this type.", alias="valueType")
    __properties: ClassVar[List[str]] = ["attributeId", "displayName", "groupDisplayName", "isDeprecated", "isRepeatable", "valueMetadata", "valueType"]

    @field_validator('value_type')
    def value_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ATTRIBUTE_VALUE_TYPE_UNSPECIFIED', 'BOOL', 'ENUM', 'URL', 'REPEATED_ENUM']):
            raise ValueError("must be one of enum values ('ATTRIBUTE_VALUE_TYPE_UNSPECIFIED', 'BOOL', 'ENUM', 'URL', 'REPEATED_ENUM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AttributeMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in value_metadata (list)
        _items = []
        if self.value_metadata:
            for _item_value_metadata in self.value_metadata:
                if _item_value_metadata:
                    _items.append(_item_value_metadata.to_dict())
            _dict['valueMetadata'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AttributeMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributeId": obj.get("attributeId"),
            "displayName": obj.get("displayName"),
            "groupDisplayName": obj.get("groupDisplayName"),
            "isDeprecated": obj.get("isDeprecated"),
            "isRepeatable": obj.get("isRepeatable"),
            "valueMetadata": [AttributeValueMetadata.from_dict(_item) for _item in obj["valueMetadata"]] if obj.get("valueMetadata") is not None else None,
            "valueType": obj.get("valueType")
        })
        return _obj



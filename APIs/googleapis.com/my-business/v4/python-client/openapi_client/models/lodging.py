# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.accessibility import Accessibility
from openapi_client.models.activities import Activities
from openapi_client.models.business import Business
from openapi_client.models.connectivity import Connectivity
from openapi_client.models.families import Families
from openapi_client.models.food_and_drink import FoodAndDrink
from openapi_client.models.guest_unit_features import GuestUnitFeatures
from openapi_client.models.guest_unit_type import GuestUnitType
from openapi_client.models.health_and_safety import HealthAndSafety
from openapi_client.models.housekeeping import Housekeeping
from openapi_client.models.living_area import LivingArea
from openapi_client.models.lodging_metadata import LodgingMetadata
from openapi_client.models.model_property import ModelProperty
from openapi_client.models.parking import Parking
from openapi_client.models.pets import Pets
from openapi_client.models.policies import Policies
from openapi_client.models.pools import Pools
from openapi_client.models.services import Services
from openapi_client.models.transportation import Transportation
from openapi_client.models.wellness import Wellness
from typing import Optional, Set
from typing_extensions import Self

class Lodging(BaseModel):
    """
    Lodging of a location that provides accomodations.
    """ # noqa: E501
    accessibility: Optional[Accessibility] = None
    activities: Optional[Activities] = None
    all_units: Optional[GuestUnitFeatures] = Field(default=None, alias="allUnits")
    business: Optional[Business] = None
    common_living_area: Optional[LivingArea] = Field(default=None, alias="commonLivingArea")
    connectivity: Optional[Connectivity] = None
    families: Optional[Families] = None
    food_and_drink: Optional[FoodAndDrink] = Field(default=None, alias="foodAndDrink")
    guest_units: Optional[List[GuestUnitType]] = Field(default=None, description="Individual GuestUnitTypes that are available in this Lodging.", alias="guestUnits")
    health_and_safety: Optional[HealthAndSafety] = Field(default=None, alias="healthAndSafety")
    housekeeping: Optional[Housekeeping] = None
    metadata: Optional[LodgingMetadata] = None
    name: Optional[StrictStr] = Field(default=None, description="Required. Google identifier for this location in the form: `accounts/{account_id}/locations/{location_id}/lodging`")
    parking: Optional[Parking] = None
    pets: Optional[Pets] = None
    policies: Optional[Policies] = None
    pools: Optional[Pools] = None
    var_property: Optional[ModelProperty] = Field(default=None, alias="property")
    services: Optional[Services] = None
    some_units: Optional[GuestUnitFeatures] = Field(default=None, alias="someUnits")
    transportation: Optional[Transportation] = None
    wellness: Optional[Wellness] = None
    __properties: ClassVar[List[str]] = ["accessibility", "activities", "allUnits", "business", "commonLivingArea", "connectivity", "families", "foodAndDrink", "guestUnits", "healthAndSafety", "housekeeping", "metadata", "name", "parking", "pets", "policies", "pools", "property", "services", "someUnits", "transportation", "wellness"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Lodging from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of accessibility
        if self.accessibility:
            _dict['accessibility'] = self.accessibility.to_dict()
        # override the default output from pydantic by calling `to_dict()` of activities
        if self.activities:
            _dict['activities'] = self.activities.to_dict()
        # override the default output from pydantic by calling `to_dict()` of all_units
        if self.all_units:
            _dict['allUnits'] = self.all_units.to_dict()
        # override the default output from pydantic by calling `to_dict()` of business
        if self.business:
            _dict['business'] = self.business.to_dict()
        # override the default output from pydantic by calling `to_dict()` of common_living_area
        if self.common_living_area:
            _dict['commonLivingArea'] = self.common_living_area.to_dict()
        # override the default output from pydantic by calling `to_dict()` of connectivity
        if self.connectivity:
            _dict['connectivity'] = self.connectivity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of families
        if self.families:
            _dict['families'] = self.families.to_dict()
        # override the default output from pydantic by calling `to_dict()` of food_and_drink
        if self.food_and_drink:
            _dict['foodAndDrink'] = self.food_and_drink.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in guest_units (list)
        _items = []
        if self.guest_units:
            for _item_guest_units in self.guest_units:
                if _item_guest_units:
                    _items.append(_item_guest_units.to_dict())
            _dict['guestUnits'] = _items
        # override the default output from pydantic by calling `to_dict()` of health_and_safety
        if self.health_and_safety:
            _dict['healthAndSafety'] = self.health_and_safety.to_dict()
        # override the default output from pydantic by calling `to_dict()` of housekeeping
        if self.housekeeping:
            _dict['housekeeping'] = self.housekeeping.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parking
        if self.parking:
            _dict['parking'] = self.parking.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pets
        if self.pets:
            _dict['pets'] = self.pets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policies
        if self.policies:
            _dict['policies'] = self.policies.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pools
        if self.pools:
            _dict['pools'] = self.pools.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_property
        if self.var_property:
            _dict['property'] = self.var_property.to_dict()
        # override the default output from pydantic by calling `to_dict()` of services
        if self.services:
            _dict['services'] = self.services.to_dict()
        # override the default output from pydantic by calling `to_dict()` of some_units
        if self.some_units:
            _dict['someUnits'] = self.some_units.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transportation
        if self.transportation:
            _dict['transportation'] = self.transportation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wellness
        if self.wellness:
            _dict['wellness'] = self.wellness.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Lodging from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessibility": Accessibility.from_dict(obj["accessibility"]) if obj.get("accessibility") is not None else None,
            "activities": Activities.from_dict(obj["activities"]) if obj.get("activities") is not None else None,
            "allUnits": GuestUnitFeatures.from_dict(obj["allUnits"]) if obj.get("allUnits") is not None else None,
            "business": Business.from_dict(obj["business"]) if obj.get("business") is not None else None,
            "commonLivingArea": LivingArea.from_dict(obj["commonLivingArea"]) if obj.get("commonLivingArea") is not None else None,
            "connectivity": Connectivity.from_dict(obj["connectivity"]) if obj.get("connectivity") is not None else None,
            "families": Families.from_dict(obj["families"]) if obj.get("families") is not None else None,
            "foodAndDrink": FoodAndDrink.from_dict(obj["foodAndDrink"]) if obj.get("foodAndDrink") is not None else None,
            "guestUnits": [GuestUnitType.from_dict(_item) for _item in obj["guestUnits"]] if obj.get("guestUnits") is not None else None,
            "healthAndSafety": HealthAndSafety.from_dict(obj["healthAndSafety"]) if obj.get("healthAndSafety") is not None else None,
            "housekeeping": Housekeeping.from_dict(obj["housekeeping"]) if obj.get("housekeeping") is not None else None,
            "metadata": LodgingMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "name": obj.get("name"),
            "parking": Parking.from_dict(obj["parking"]) if obj.get("parking") is not None else None,
            "pets": Pets.from_dict(obj["pets"]) if obj.get("pets") is not None else None,
            "policies": Policies.from_dict(obj["policies"]) if obj.get("policies") is not None else None,
            "pools": Pools.from_dict(obj["pools"]) if obj.get("pools") is not None else None,
            "property": ModelProperty.from_dict(obj["property"]) if obj.get("property") is not None else None,
            "services": Services.from_dict(obj["services"]) if obj.get("services") is not None else None,
            "someUnits": GuestUnitFeatures.from_dict(obj["someUnits"]) if obj.get("someUnits") is not None else None,
            "transportation": Transportation.from_dict(obj["transportation"]) if obj.get("transportation") is not None else None,
            "wellness": Wellness.from_dict(obj["wellness"]) if obj.get("wellness") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EnhancedCleaning(BaseModel):
    """
    Enhanced cleaning measures implemented by the hotel during COVID-19.
    """ # noqa: E501
    commercial_grade_disinfectant_cleaning: Optional[StrictBool] = Field(default=None, description="Commercial-grade disinfectant used to clean the property.", alias="commercialGradeDisinfectantCleaning")
    commercial_grade_disinfectant_cleaning_exception: Optional[StrictStr] = Field(default=None, description="Commercial grade disinfectant cleaning exception.", alias="commercialGradeDisinfectantCleaningException")
    common_areas_enhanced_cleaning: Optional[StrictBool] = Field(default=None, description="Enhanced cleaning of common areas.", alias="commonAreasEnhancedCleaning")
    common_areas_enhanced_cleaning_exception: Optional[StrictStr] = Field(default=None, description="Common areas enhanced cleaning exception.", alias="commonAreasEnhancedCleaningException")
    employees_trained_cleaning_procedures: Optional[StrictBool] = Field(default=None, description="Employees trained in COVID-19 cleaning procedures.", alias="employeesTrainedCleaningProcedures")
    employees_trained_cleaning_procedures_exception: Optional[StrictStr] = Field(default=None, description="Employees trained cleaning procedures exception.", alias="employeesTrainedCleaningProceduresException")
    employees_trained_thorough_hand_washing: Optional[StrictBool] = Field(default=None, description="Employees trained in thorough hand-washing.", alias="employeesTrainedThoroughHandWashing")
    employees_trained_thorough_hand_washing_exception: Optional[StrictStr] = Field(default=None, description="Employees trained thorough hand washing exception.", alias="employeesTrainedThoroughHandWashingException")
    employees_wear_protective_equipment: Optional[StrictBool] = Field(default=None, description="Employees wear masks, face shields, and/or gloves.", alias="employeesWearProtectiveEquipment")
    employees_wear_protective_equipment_exception: Optional[StrictStr] = Field(default=None, description="Employees wear protective equipment exception.", alias="employeesWearProtectiveEquipmentException")
    guest_rooms_enhanced_cleaning: Optional[StrictBool] = Field(default=None, description="Enhanced cleaning of guest rooms.", alias="guestRoomsEnhancedCleaning")
    guest_rooms_enhanced_cleaning_exception: Optional[StrictStr] = Field(default=None, description="Guest rooms enhanced cleaning exception.", alias="guestRoomsEnhancedCleaningException")
    __properties: ClassVar[List[str]] = ["commercialGradeDisinfectantCleaning", "commercialGradeDisinfectantCleaningException", "commonAreasEnhancedCleaning", "commonAreasEnhancedCleaningException", "employeesTrainedCleaningProcedures", "employeesTrainedCleaningProceduresException", "employeesTrainedThoroughHandWashing", "employeesTrainedThoroughHandWashingException", "employeesWearProtectiveEquipment", "employeesWearProtectiveEquipmentException", "guestRoomsEnhancedCleaning", "guestRoomsEnhancedCleaningException"]

    @field_validator('commercial_grade_disinfectant_cleaning_exception')
    def commercial_grade_disinfectant_cleaning_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('common_areas_enhanced_cleaning_exception')
    def common_areas_enhanced_cleaning_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('employees_trained_cleaning_procedures_exception')
    def employees_trained_cleaning_procedures_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('employees_trained_thorough_hand_washing_exception')
    def employees_trained_thorough_hand_washing_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('employees_wear_protective_equipment_exception')
    def employees_wear_protective_equipment_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('guest_rooms_enhanced_cleaning_exception')
    def guest_rooms_enhanced_cleaning_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnhancedCleaning from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnhancedCleaning from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commercialGradeDisinfectantCleaning": obj.get("commercialGradeDisinfectantCleaning"),
            "commercialGradeDisinfectantCleaningException": obj.get("commercialGradeDisinfectantCleaningException"),
            "commonAreasEnhancedCleaning": obj.get("commonAreasEnhancedCleaning"),
            "commonAreasEnhancedCleaningException": obj.get("commonAreasEnhancedCleaningException"),
            "employeesTrainedCleaningProcedures": obj.get("employeesTrainedCleaningProcedures"),
            "employeesTrainedCleaningProceduresException": obj.get("employeesTrainedCleaningProceduresException"),
            "employeesTrainedThoroughHandWashing": obj.get("employeesTrainedThoroughHandWashing"),
            "employeesTrainedThoroughHandWashingException": obj.get("employeesTrainedThoroughHandWashingException"),
            "employeesWearProtectiveEquipment": obj.get("employeesWearProtectiveEquipment"),
            "employeesWearProtectiveEquipmentException": obj.get("employeesWearProtectiveEquipmentException"),
            "guestRoomsEnhancedCleaning": obj.get("guestRoomsEnhancedCleaning"),
            "guestRoomsEnhancedCleaningException": obj.get("guestRoomsEnhancedCleaningException")
        })
        return _obj



# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.review_reply import ReviewReply
from openapi_client.models.reviewer import Reviewer
from typing import Optional, Set
from typing_extensions import Self

class Review(BaseModel):
    """
    Output only. Represents a review for a location.
    """ # noqa: E501
    comment: Optional[StrictStr] = Field(default=None, description="The body of the review as plain text with markups.")
    create_time: Optional[StrictStr] = Field(default=None, description="The timestamp for when the review was written.", alias="createTime")
    name: Optional[StrictStr] = Field(default=None, description="The resource name. For Review it is of the form `accounts/{account_id}/locations/{location_id}/reviews/{review_id}`")
    review_id: Optional[StrictStr] = Field(default=None, description="The encrypted unique identifier.", alias="reviewId")
    review_reply: Optional[ReviewReply] = Field(default=None, alias="reviewReply")
    reviewer: Optional[Reviewer] = None
    star_rating: Optional[StrictStr] = Field(default=None, description="The star rating of the review.", alias="starRating")
    update_time: Optional[StrictStr] = Field(default=None, description="The timestamp for when the review was last modified.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["comment", "createTime", "name", "reviewId", "reviewReply", "reviewer", "starRating", "updateTime"]

    @field_validator('star_rating')
    def star_rating_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STAR_RATING_UNSPECIFIED', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE']):
            raise ValueError("must be one of enum values ('STAR_RATING_UNSPECIFIED', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Review from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of review_reply
        if self.review_reply:
            _dict['reviewReply'] = self.review_reply.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reviewer
        if self.reviewer:
            _dict['reviewer'] = self.reviewer.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Review from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comment": obj.get("comment"),
            "createTime": obj.get("createTime"),
            "name": obj.get("name"),
            "reviewId": obj.get("reviewId"),
            "reviewReply": ReviewReply.from_dict(obj["reviewReply"]) if obj.get("reviewReply") is not None else None,
            "reviewer": Reviewer.from_dict(obj["reviewer"]) if obj.get("reviewer") is not None else None,
            "starRating": obj.get("starRating"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PaymentOptions(BaseModel):
    """
    Forms of payment accepted at the property.
    """ # noqa: E501
    cash: Optional[StrictBool] = Field(default=None, description="Cash. The hotel accepts payment by paper/coin currency.")
    cash_exception: Optional[StrictStr] = Field(default=None, description="Cash exception.", alias="cashException")
    cheque: Optional[StrictBool] = Field(default=None, description="Cheque. The hotel accepts a printed document issued by the guest's bank in the guest's name as a form of payment.")
    cheque_exception: Optional[StrictStr] = Field(default=None, description="Cheque exception.", alias="chequeException")
    credit_card: Optional[StrictBool] = Field(default=None, description="Credit card. The hotel accepts payment by a card issued by a bank or credit card company. Also known as charge card, debit card, bank card, or charge plate.", alias="creditCard")
    credit_card_exception: Optional[StrictStr] = Field(default=None, description="Credit card exception.", alias="creditCardException")
    debit_card: Optional[StrictBool] = Field(default=None, description="Debit card. The hotel accepts a bank-issued card that immediately deducts the charged funds from the guest's bank account upon processing.", alias="debitCard")
    debit_card_exception: Optional[StrictStr] = Field(default=None, description="Debit card exception.", alias="debitCardException")
    mobile_nfc: Optional[StrictBool] = Field(default=None, description="Mobile nfc. The hotel has the compatible computer hardware terminal that reads and charges a payment app on the guest's smartphone without requiring the two devices to make physical contact. Also known as Apple Pay, Google Pay, Samsung Pay.", alias="mobileNfc")
    mobile_nfc_exception: Optional[StrictStr] = Field(default=None, description="Mobile nfc exception.", alias="mobileNfcException")
    __properties: ClassVar[List[str]] = ["cash", "cashException", "cheque", "chequeException", "creditCard", "creditCardException", "debitCard", "debitCardException", "mobileNfc", "mobileNfcException"]

    @field_validator('cash_exception')
    def cash_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('cheque_exception')
    def cheque_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('credit_card_exception')
    def credit_card_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('debit_card_exception')
    def debit_card_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('mobile_nfc_exception')
    def mobile_nfc_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cash": obj.get("cash"),
            "cashException": obj.get("cashException"),
            "cheque": obj.get("cheque"),
            "chequeException": obj.get("chequeException"),
            "creditCard": obj.get("creditCard"),
            "creditCardException": obj.get("creditCardException"),
            "debitCard": obj.get("debitCard"),
            "debitCardException": obj.get("debitCardException"),
            "mobileNfc": obj.get("mobileNfc"),
            "mobileNfcException": obj.get("mobileNfcException")
        })
        return _obj



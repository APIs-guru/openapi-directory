# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class InsuranceNetwork(BaseModel):
    """
    A single insurance network. Next id: 5
    """ # noqa: E501
    network_id: Optional[StrictStr] = Field(default=None, description="Required. The id of this insurance network generated by Google.", alias="networkId")
    network_names: Optional[Dict[str, StrictStr]] = Field(default=None, description="Output only. A map of network display names in requested languages where the language is the key and localized display name is the value. The display name in English is set by default.", alias="networkNames")
    payer_names: Optional[Dict[str, StrictStr]] = Field(default=None, description="Output only. A map of payer display names in requested languages where the language is the key and localized display name is the value. The display name in English is set by default.", alias="payerNames")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of this insurance network.")
    __properties: ClassVar[List[str]] = ["networkId", "networkNames", "payerNames", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NETWORK_STATE_UNSPECIFIED', 'ACCEPTED', 'PENDING_ADD', 'PENDING_DELETE', 'NOT_ACCEPTED']):
            raise ValueError("must be one of enum values ('NETWORK_STATE_UNSPECIFIED', 'ACCEPTED', 'PENDING_ADD', 'PENDING_DELETE', 'NOT_ACCEPTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InsuranceNetwork from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "network_names",
            "payer_names",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InsuranceNetwork from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "networkId": obj.get("networkId"),
            "networkNames": obj.get("networkNames"),
            "payerNames": obj.get("payerNames"),
            "state": obj.get("state")
        })
        return _obj



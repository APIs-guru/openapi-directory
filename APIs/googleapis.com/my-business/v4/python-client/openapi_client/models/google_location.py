# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.location import Location
from typing import Optional, Set
from typing_extensions import Self

class GoogleLocation(BaseModel):
    """
    Represents a Location that is present on Google. This can be a location that has been claimed by the user, someone else, or could be unclaimed.
    """ # noqa: E501
    location: Optional[Location] = None
    name: Optional[StrictStr] = Field(default=None, description="Resource name of this GoogleLocation, in the format `googleLocations/{googleLocationId}`.")
    request_admin_rights_url: Optional[StrictStr] = Field(default=None, description="A URL that will redirect the user to the request admin rights UI. This field is only present if the location has already been claimed by any user, including the current user.", alias="requestAdminRightsUrl")
    __properties: ClassVar[List[str]] = ["location", "name", "requestAdminRightsUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleLocation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleLocation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "location": Location.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "name": obj.get("name"),
            "requestAdminRightsUrl": obj.get("requestAdminRightsUrl")
        })
        return _obj



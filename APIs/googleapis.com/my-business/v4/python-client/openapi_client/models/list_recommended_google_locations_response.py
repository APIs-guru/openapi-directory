# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_location import GoogleLocation
from typing import Optional, Set
from typing_extensions import Self

class ListRecommendedGoogleLocationsResponse(BaseModel):
    """
    Response message for GoogleLocations.ListRecommendedGoogleLocations. It also contains some locations that have been claimed by other Business Profile users since the last time they were recommended to this Business Profile account.
    """ # noqa: E501
    google_locations: Optional[List[GoogleLocation]] = Field(default=None, description="The locations recommended to a Business Profile account. Each of these represents a GoogleLocation that is present on Maps. The locations are sorted in decreasing order of relevance to the Business Profile account.", alias="googleLocations")
    next_page_token: Optional[StrictStr] = Field(default=None, description="During pagination, if there are more locations available to be fetched in the next page, this field is populated with a token to fetch the next page of locations in a subsequent call. If there are no more locations to be fetched, this field is not present in the response.", alias="nextPageToken")
    total_size: Optional[StrictInt] = Field(default=None, description="The total number of recommended locations for this Business Profile account, irrespective of pagination.", alias="totalSize")
    __properties: ClassVar[List[str]] = ["googleLocations", "nextPageToken", "totalSize"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListRecommendedGoogleLocationsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in google_locations (list)
        _items = []
        if self.google_locations:
            for _item_google_locations in self.google_locations:
                if _item_google_locations:
                    _items.append(_item_google_locations.to_dict())
            _dict['googleLocations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListRecommendedGoogleLocationsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "googleLocations": [GoogleLocation.from_dict(_item) for _item in obj["googleLocations"]] if obj.get("googleLocations") is not None else None,
            "nextPageToken": obj.get("nextPageToken"),
            "totalSize": obj.get("totalSize")
        })
        return _obj



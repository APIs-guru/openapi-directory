# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FoodAndDrink(BaseModel):
    """
    Meals, snacks, and beverages available at the property.
    """ # noqa: E501
    bar: Optional[StrictBool] = Field(default=None, description="Bar. A designated room, lounge or area of an on-site restaurant with seating at a counter behind which a hotel staffer takes the guest's order and provides the requested alcoholic drink. Can be indoors or outdoors. Also known as Pub.")
    bar_exception: Optional[StrictStr] = Field(default=None, description="Bar exception.", alias="barException")
    breakfast_available: Optional[StrictBool] = Field(default=None, description="Breakfast available. The morning meal is offered to all guests. Can be free or for a fee.", alias="breakfastAvailable")
    breakfast_available_exception: Optional[StrictStr] = Field(default=None, description="Breakfast available exception.", alias="breakfastAvailableException")
    breakfast_buffet: Optional[StrictBool] = Field(default=None, description="Breakfast buffet. Breakfast meal service where guests serve themselves from a variety of dishes/foods that are put out on a table.", alias="breakfastBuffet")
    breakfast_buffet_exception: Optional[StrictStr] = Field(default=None, description="Breakfast buffet exception.", alias="breakfastBuffetException")
    buffet: Optional[StrictBool] = Field(default=None, description="Buffet. A type of meal where guests serve themselves from a variety of dishes/foods that are put out on a table. Includes lunch and/or dinner meals. A breakfast-only buffet is not sufficient.")
    buffet_exception: Optional[StrictStr] = Field(default=None, description="Buffet exception.", alias="buffetException")
    dinner_buffet: Optional[StrictBool] = Field(default=None, description="Dinner buffet. Dinner meal service where guests serve themselves from a variety of dishes/foods that are put out on a table.", alias="dinnerBuffet")
    dinner_buffet_exception: Optional[StrictStr] = Field(default=None, description="Dinner buffet exception.", alias="dinnerBuffetException")
    free_breakfast: Optional[StrictBool] = Field(default=None, description="Free breakfast. Breakfast is offered for free to all guests. Does not apply if limited to certain room packages.", alias="freeBreakfast")
    free_breakfast_exception: Optional[StrictStr] = Field(default=None, description="Free breakfast exception.", alias="freeBreakfastException")
    restaurant: Optional[StrictBool] = Field(default=None, description="Restaurant. A business onsite at the hotel that is open to the public as well as guests, and offers meals and beverages to consume at tables or counters. May or may not include table service. Also known as cafe, buffet, eatery. A \"breakfast room\" where the hotel serves breakfast only to guests (not the general public) does not count as a restaurant.")
    restaurant_exception: Optional[StrictStr] = Field(default=None, description="Restaurant exception.", alias="restaurantException")
    restaurants_count: Optional[StrictInt] = Field(default=None, description="Restaurants count. The number of restaurants at the hotel.", alias="restaurantsCount")
    restaurants_count_exception: Optional[StrictStr] = Field(default=None, description="Restaurants count exception.", alias="restaurantsCountException")
    room_service: Optional[StrictBool] = Field(default=None, description="Room service. A hotel staffer delivers meals prepared onsite to a guest's room as per their request. May or may not be available during specific hours. Services should be available to all guests (not based on rate/room booked/reward program, etc).", alias="roomService")
    room_service_exception: Optional[StrictStr] = Field(default=None, description="Room service exception.", alias="roomServiceException")
    table_service: Optional[StrictBool] = Field(default=None, description="Table service. A restaurant in which a staff member is assigned to a guest's table to take their order, deliver and clear away food, and deliver the bill, if applicable. Also known as sit-down restaurant.", alias="tableService")
    table_service_exception: Optional[StrictStr] = Field(default=None, description="Table service exception.", alias="tableServiceException")
    twenty_four_hour_room_service: Optional[StrictBool] = Field(default=None, description="24hr room service. Room service is available 24 hours a day.", alias="twentyFourHourRoomService")
    twenty_four_hour_room_service_exception: Optional[StrictStr] = Field(default=None, description="24hr room service exception.", alias="twentyFourHourRoomServiceException")
    vending_machine: Optional[StrictBool] = Field(default=None, description="Vending machine. A glass-fronted mechanized cabinet displaying and dispensing snacks and beverages for purchase by coins, paper money and/or credit cards.", alias="vendingMachine")
    vending_machine_exception: Optional[StrictStr] = Field(default=None, description="Vending machine exception.", alias="vendingMachineException")
    __properties: ClassVar[List[str]] = ["bar", "barException", "breakfastAvailable", "breakfastAvailableException", "breakfastBuffet", "breakfastBuffetException", "buffet", "buffetException", "dinnerBuffet", "dinnerBuffetException", "freeBreakfast", "freeBreakfastException", "restaurant", "restaurantException", "restaurantsCount", "restaurantsCountException", "roomService", "roomServiceException", "tableService", "tableServiceException", "twentyFourHourRoomService", "twentyFourHourRoomServiceException", "vendingMachine", "vendingMachineException"]

    @field_validator('bar_exception')
    def bar_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('breakfast_available_exception')
    def breakfast_available_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('breakfast_buffet_exception')
    def breakfast_buffet_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('buffet_exception')
    def buffet_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('dinner_buffet_exception')
    def dinner_buffet_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('free_breakfast_exception')
    def free_breakfast_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('restaurant_exception')
    def restaurant_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('restaurants_count_exception')
    def restaurants_count_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('room_service_exception')
    def room_service_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('table_service_exception')
    def table_service_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('twenty_four_hour_room_service_exception')
    def twenty_four_hour_room_service_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('vending_machine_exception')
    def vending_machine_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FoodAndDrink from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FoodAndDrink from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bar": obj.get("bar"),
            "barException": obj.get("barException"),
            "breakfastAvailable": obj.get("breakfastAvailable"),
            "breakfastAvailableException": obj.get("breakfastAvailableException"),
            "breakfastBuffet": obj.get("breakfastBuffet"),
            "breakfastBuffetException": obj.get("breakfastBuffetException"),
            "buffet": obj.get("buffet"),
            "buffetException": obj.get("buffetException"),
            "dinnerBuffet": obj.get("dinnerBuffet"),
            "dinnerBuffetException": obj.get("dinnerBuffetException"),
            "freeBreakfast": obj.get("freeBreakfast"),
            "freeBreakfastException": obj.get("freeBreakfastException"),
            "restaurant": obj.get("restaurant"),
            "restaurantException": obj.get("restaurantException"),
            "restaurantsCount": obj.get("restaurantsCount"),
            "restaurantsCountException": obj.get("restaurantsCountException"),
            "roomService": obj.get("roomService"),
            "roomServiceException": obj.get("roomServiceException"),
            "tableService": obj.get("tableService"),
            "tableServiceException": obj.get("tableServiceException"),
            "twentyFourHourRoomService": obj.get("twentyFourHourRoomService"),
            "twentyFourHourRoomServiceException": obj.get("twentyFourHourRoomServiceException"),
            "vendingMachine": obj.get("vendingMachine"),
            "vendingMachineException": obj.get("vendingMachineException")
        })
        return _obj



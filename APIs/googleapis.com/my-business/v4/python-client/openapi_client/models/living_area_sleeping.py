# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LivingAreaSleeping(BaseModel):
    """
    Information about sleeping features in the living area.
    """ # noqa: E501
    beds_count: Optional[StrictInt] = Field(default=None, description="Beds count. The number of permanent beds present in a guestroom. Does not include rollaway beds, cribs or sofabeds.", alias="bedsCount")
    beds_count_exception: Optional[StrictStr] = Field(default=None, description="Beds count exception.", alias="bedsCountException")
    bunk_beds_count: Optional[StrictInt] = Field(default=None, description="Bunk beds count. The number of furniture pieces in which one framed mattress is fixed directly above another by means of a physical frame. This allows one person(s) to sleep in the bottom bunk and one person(s) to sleep in the top bunk. Also known as double decker bed.", alias="bunkBedsCount")
    bunk_beds_count_exception: Optional[StrictStr] = Field(default=None, description="Bunk beds count exception.", alias="bunkBedsCountException")
    cribs_count: Optional[StrictInt] = Field(default=None, description="Cribs count. The number of small beds for an infant or toddler that the guestroom can obtain. The bed is surrounded by a high railing to prevent the child from falling or climbing out of the bed", alias="cribsCount")
    cribs_count_exception: Optional[StrictStr] = Field(default=None, description="Cribs count exception.", alias="cribsCountException")
    double_beds_count: Optional[StrictInt] = Field(default=None, description="Double beds count. The number of medium beds measuring 53\"W x 75\"L (135cm x 191cm). Also known as full size bed.", alias="doubleBedsCount")
    double_beds_count_exception: Optional[StrictStr] = Field(default=None, description="Double beds count exception.", alias="doubleBedsCountException")
    feather_pillows: Optional[StrictBool] = Field(default=None, description="Feather pillows. The option for guests to obtain bed pillows that are stuffed with the feathers and down of ducks or geese.", alias="featherPillows")
    feather_pillows_exception: Optional[StrictStr] = Field(default=None, description="Feather pillows exception.", alias="featherPillowsException")
    hypoallergenic_bedding: Optional[StrictBool] = Field(default=None, description="Hypoallergenic bedding. Bedding such as linens, pillows, mattress covers and/or mattresses that are made of materials known to be resistant to allergens such as mold, dust and dander.", alias="hypoallergenicBedding")
    hypoallergenic_bedding_exception: Optional[StrictStr] = Field(default=None, description="Hypoallergenic bedding exception.", alias="hypoallergenicBeddingException")
    king_beds_count: Optional[StrictInt] = Field(default=None, description="King beds count. The number of large beds measuring 76\"W x 80\"L (193cm x 102cm). Most often meant to accompany two people. Includes California king and super king.", alias="kingBedsCount")
    king_beds_count_exception: Optional[StrictStr] = Field(default=None, description="King beds count exception.", alias="kingBedsCountException")
    memory_foam_pillows: Optional[StrictBool] = Field(default=None, description="Memory foam pillows. The option for guests to obtain bed pillows that are stuffed with a man-made foam that responds to body heat by conforming to the body closely, and then recovers its shape when the pillow cools down.", alias="memoryFoamPillows")
    memory_foam_pillows_exception: Optional[StrictStr] = Field(default=None, description="Memory foam pillows exception.", alias="memoryFoamPillowsException")
    other_beds_count: Optional[StrictInt] = Field(default=None, description="Other beds count. The number of beds that are not standard mattress and boxspring setups such as Japanese tatami mats, trundle beds, air mattresses and cots.", alias="otherBedsCount")
    other_beds_count_exception: Optional[StrictStr] = Field(default=None, description="Other beds count exception.", alias="otherBedsCountException")
    queen_beds_count: Optional[StrictInt] = Field(default=None, description="Queen beds count. The number of medium-large beds measuring 60\"W x 80\"L (152cm x 102cm).", alias="queenBedsCount")
    queen_beds_count_exception: Optional[StrictStr] = Field(default=None, description="Queen beds count exception.", alias="queenBedsCountException")
    roll_away_beds_count: Optional[StrictInt] = Field(default=None, description="Roll away beds count. The number of mattresses on wheeled frames that can be folded in half and rolled away for easy storage that the guestroom can obtain upon request.", alias="rollAwayBedsCount")
    roll_away_beds_count_exception: Optional[StrictStr] = Field(default=None, description="Roll away beds count exception.", alias="rollAwayBedsCountException")
    single_or_twin_beds_count: Optional[StrictInt] = Field(default=None, description="Single or twin count beds. The number of smaller beds measuring 38\"W x 75\"L (97cm x 191cm) that can accommodate one adult.", alias="singleOrTwinBedsCount")
    single_or_twin_beds_count_exception: Optional[StrictStr] = Field(default=None, description="Single or twin beds count exception.", alias="singleOrTwinBedsCountException")
    sofa_beds_count: Optional[StrictInt] = Field(default=None, description="Sofa beds count. The number of specially designed sofas that can be made to serve as a bed by lowering its hinged upholstered back to horizontal position or by pulling out a concealed mattress.", alias="sofaBedsCount")
    sofa_beds_count_exception: Optional[StrictStr] = Field(default=None, description="Sofa beds count exception.", alias="sofaBedsCountException")
    synthetic_pillows: Optional[StrictBool] = Field(default=None, description="Synthetic pillows. The option for guests to obtain bed pillows stuffed with polyester material crafted to reproduce the feel of a pillow stuffed with down and feathers.", alias="syntheticPillows")
    synthetic_pillows_exception: Optional[StrictStr] = Field(default=None, description="Synthetic pillows exception.", alias="syntheticPillowsException")
    __properties: ClassVar[List[str]] = ["bedsCount", "bedsCountException", "bunkBedsCount", "bunkBedsCountException", "cribsCount", "cribsCountException", "doubleBedsCount", "doubleBedsCountException", "featherPillows", "featherPillowsException", "hypoallergenicBedding", "hypoallergenicBeddingException", "kingBedsCount", "kingBedsCountException", "memoryFoamPillows", "memoryFoamPillowsException", "otherBedsCount", "otherBedsCountException", "queenBedsCount", "queenBedsCountException", "rollAwayBedsCount", "rollAwayBedsCountException", "singleOrTwinBedsCount", "singleOrTwinBedsCountException", "sofaBedsCount", "sofaBedsCountException", "syntheticPillows", "syntheticPillowsException"]

    @field_validator('beds_count_exception')
    def beds_count_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('bunk_beds_count_exception')
    def bunk_beds_count_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('cribs_count_exception')
    def cribs_count_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('double_beds_count_exception')
    def double_beds_count_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('feather_pillows_exception')
    def feather_pillows_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('hypoallergenic_bedding_exception')
    def hypoallergenic_bedding_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('king_beds_count_exception')
    def king_beds_count_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('memory_foam_pillows_exception')
    def memory_foam_pillows_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('other_beds_count_exception')
    def other_beds_count_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('queen_beds_count_exception')
    def queen_beds_count_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('roll_away_beds_count_exception')
    def roll_away_beds_count_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('single_or_twin_beds_count_exception')
    def single_or_twin_beds_count_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('sofa_beds_count_exception')
    def sofa_beds_count_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('synthetic_pillows_exception')
    def synthetic_pillows_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LivingAreaSleeping from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LivingAreaSleeping from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bedsCount": obj.get("bedsCount"),
            "bedsCountException": obj.get("bedsCountException"),
            "bunkBedsCount": obj.get("bunkBedsCount"),
            "bunkBedsCountException": obj.get("bunkBedsCountException"),
            "cribsCount": obj.get("cribsCount"),
            "cribsCountException": obj.get("cribsCountException"),
            "doubleBedsCount": obj.get("doubleBedsCount"),
            "doubleBedsCountException": obj.get("doubleBedsCountException"),
            "featherPillows": obj.get("featherPillows"),
            "featherPillowsException": obj.get("featherPillowsException"),
            "hypoallergenicBedding": obj.get("hypoallergenicBedding"),
            "hypoallergenicBeddingException": obj.get("hypoallergenicBeddingException"),
            "kingBedsCount": obj.get("kingBedsCount"),
            "kingBedsCountException": obj.get("kingBedsCountException"),
            "memoryFoamPillows": obj.get("memoryFoamPillows"),
            "memoryFoamPillowsException": obj.get("memoryFoamPillowsException"),
            "otherBedsCount": obj.get("otherBedsCount"),
            "otherBedsCountException": obj.get("otherBedsCountException"),
            "queenBedsCount": obj.get("queenBedsCount"),
            "queenBedsCountException": obj.get("queenBedsCountException"),
            "rollAwayBedsCount": obj.get("rollAwayBedsCount"),
            "rollAwayBedsCountException": obj.get("rollAwayBedsCountException"),
            "singleOrTwinBedsCount": obj.get("singleOrTwinBedsCount"),
            "singleOrTwinBedsCountException": obj.get("singleOrTwinBedsCountException"),
            "sofaBedsCount": obj.get("sofaBedsCount"),
            "sofaBedsCountException": obj.get("sofaBedsCountException"),
            "syntheticPillows": obj.get("syntheticPillows"),
            "syntheticPillowsException": obj.get("syntheticPillowsException")
        })
        return _obj



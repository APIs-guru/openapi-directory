# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.food_menu_section import FoodMenuSection
from openapi_client.models.menu_label import MenuLabel
from typing import Optional, Set
from typing_extensions import Self

class FoodMenu(BaseModel):
    """
    Menu of a business that serves food dishes.
    """ # noqa: E501
    cuisines: Optional[List[StrictStr]] = Field(default=None, description="Optional. Cuisine information for the food menu. It is highly recommended to provide this field.")
    labels: Optional[List[MenuLabel]] = Field(default=None, description="Required. Language-tagged labels for the menu. E.g. \"menu\", \"lunch special\". Display names should be 140 characters or less, with descriptions 1,000 characters or less. At least one set of labels is required.")
    sections: Optional[List[FoodMenuSection]] = Field(default=None, description="Required. Sections of the menu.")
    source_url: Optional[StrictStr] = Field(default=None, description="Optional. Source URL of menu if there is a webpage to go to.", alias="sourceUrl")
    __properties: ClassVar[List[str]] = ["cuisines", "labels", "sections", "sourceUrl"]

    @field_validator('cuisines')
    def cuisines_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['CUISINE_UNSPECIFIED', 'AMERICAN', 'ASIAN', 'BRAZILIAN', 'BREAK_FAST', 'BRUNCH', 'CHICKEN', 'CHINESE', 'FAMILY', 'FAST_FOOD', 'FRENCH', 'GREEK', 'GERMAN', 'HAMBURGER', 'INDIAN', 'INDONESIAN', 'ITALIAN', 'JAPANESE', 'KOREAN', 'LATIN_AMERICAN', 'MEDITERRANEAN', 'MEXICAN', 'PAKISTANI', 'PIZZA', 'SEAFOOD', 'SPANISH', 'SUSHI', 'THAI', 'TURKISH', 'VEGETARIAN', 'VIETNAMESE', 'OTHER_CUISINE']):
                raise ValueError("each list item must be one of ('CUISINE_UNSPECIFIED', 'AMERICAN', 'ASIAN', 'BRAZILIAN', 'BREAK_FAST', 'BRUNCH', 'CHICKEN', 'CHINESE', 'FAMILY', 'FAST_FOOD', 'FRENCH', 'GREEK', 'GERMAN', 'HAMBURGER', 'INDIAN', 'INDONESIAN', 'ITALIAN', 'JAPANESE', 'KOREAN', 'LATIN_AMERICAN', 'MEDITERRANEAN', 'MEXICAN', 'PAKISTANI', 'PIZZA', 'SEAFOOD', 'SPANISH', 'SUSHI', 'THAI', 'TURKISH', 'VEGETARIAN', 'VIETNAMESE', 'OTHER_CUISINE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FoodMenu from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item_labels in self.labels:
                if _item_labels:
                    _items.append(_item_labels.to_dict())
            _dict['labels'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sections (list)
        _items = []
        if self.sections:
            for _item_sections in self.sections:
                if _item_sections:
                    _items.append(_item_sections.to_dict())
            _dict['sections'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FoodMenu from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cuisines": obj.get("cuisines"),
            "labels": [MenuLabel.from_dict(_item) for _item in obj["labels"]] if obj.get("labels") is not None else None,
            "sections": [FoodMenuSection.from_dict(_item) for _item in obj["sections"]] if obj.get("sections") is not None else None,
            "sourceUrl": obj.get("sourceUrl")
        })
        return _obj



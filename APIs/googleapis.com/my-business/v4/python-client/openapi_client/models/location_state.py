# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LocationState(BaseModel):
    """
    Contains a set of booleans that reflect the [state of a Location.](https://support.google.com/business/answer/3480862)
    """ # noqa: E501
    can_delete: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether the location can be deleted using the Google My Business API.", alias="canDelete")
    can_have_food_menus: Optional[StrictBool] = Field(default=None, description="Output only. Indicates if the listing is eligible for food menu.", alias="canHaveFoodMenus")
    can_modify_service_list: Optional[StrictBool] = Field(default=None, description="Output only. Indicates if the listing can modify a ServiceList.", alias="canModifyServiceList")
    can_operate_health_data: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether the location can operate on Health data.", alias="canOperateHealthData")
    can_operate_lodging_data: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether the location can operate on Lodging data.", alias="canOperateLodgingData")
    can_update: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether the location can be updated.", alias="canUpdate")
    has_pending_edits: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether any of this Location's properties are in the edit pending state.", alias="hasPendingEdits")
    has_pending_verification: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether the location has pending verification requests.", alias="hasPendingVerification")
    is_disabled: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether the location is disabled.", alias="isDisabled")
    is_disconnected: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether the location is disconnected from a place on Google Maps.", alias="isDisconnected")
    is_duplicate: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether the location is a duplicate of another location.", alias="isDuplicate")
    is_google_updated: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether the place ID associated with this location has updates.", alias="isGoogleUpdated")
    is_local_post_api_disabled: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether [accounts.locations.localPosts](/my-business/reference/rest/v4/accounts.locations.localPosts) is disabled for this location.", alias="isLocalPostApiDisabled")
    is_pending_review: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether the review of the location is pending.", alias="isPendingReview")
    is_published: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether the location is published.", alias="isPublished")
    is_suspended: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether the location is suspended. Suspended locations are not visible to end users in Google products. If you believe this was a mistake, see the [help center article] (https://support.google.com/business/answer/4569145).", alias="isSuspended")
    is_verified: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether the location is verified.", alias="isVerified")
    needs_reverification: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether the location requires reverification.", alias="needsReverification")
    __properties: ClassVar[List[str]] = ["canDelete", "canHaveFoodMenus", "canModifyServiceList", "canOperateHealthData", "canOperateLodgingData", "canUpdate", "hasPendingEdits", "hasPendingVerification", "isDisabled", "isDisconnected", "isDuplicate", "isGoogleUpdated", "isLocalPostApiDisabled", "isPendingReview", "isPublished", "isSuspended", "isVerified", "needsReverification"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LocationState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "can_have_food_menus",
            "can_modify_service_list",
            "can_operate_health_data",
            "can_operate_lodging_data",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LocationState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "canDelete": obj.get("canDelete"),
            "canHaveFoodMenus": obj.get("canHaveFoodMenus"),
            "canModifyServiceList": obj.get("canModifyServiceList"),
            "canOperateHealthData": obj.get("canOperateHealthData"),
            "canOperateLodgingData": obj.get("canOperateLodgingData"),
            "canUpdate": obj.get("canUpdate"),
            "hasPendingEdits": obj.get("hasPendingEdits"),
            "hasPendingVerification": obj.get("hasPendingVerification"),
            "isDisabled": obj.get("isDisabled"),
            "isDisconnected": obj.get("isDisconnected"),
            "isDuplicate": obj.get("isDuplicate"),
            "isGoogleUpdated": obj.get("isGoogleUpdated"),
            "isLocalPostApiDisabled": obj.get("isLocalPostApiDisabled"),
            "isPendingReview": obj.get("isPendingReview"),
            "isPublished": obj.get("isPublished"),
            "isSuspended": obj.get("isSuspended"),
            "isVerified": obj.get("isVerified"),
            "needsReverification": obj.get("needsReverification")
        })
        return _obj



# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Connectivity(BaseModel):
    """
    The ways in which the property provides guests with the ability to access the internet.
    """ # noqa: E501
    free_wifi: Optional[StrictBool] = Field(default=None, description="Free wifi. The hotel offers guests wifi for free.", alias="freeWifi")
    free_wifi_exception: Optional[StrictStr] = Field(default=None, description="Free wifi exception.", alias="freeWifiException")
    public_area_wifi_available: Optional[StrictBool] = Field(default=None, description="Public area wifi available. Guests have the ability to wirelessly connect to the internet in the areas of the hotel accessible to anyone. Can be free or for a fee.", alias="publicAreaWifiAvailable")
    public_area_wifi_available_exception: Optional[StrictStr] = Field(default=None, description="Public area wifi available exception.", alias="publicAreaWifiAvailableException")
    public_internet_terminal: Optional[StrictBool] = Field(default=None, description="Public internet terminal. An area of the hotel supplied with computers and designated for the purpose of providing guests with the ability to access the internet.", alias="publicInternetTerminal")
    public_internet_terminal_exception: Optional[StrictStr] = Field(default=None, description="Public internet terminal exception.", alias="publicInternetTerminalException")
    wifi_available: Optional[StrictBool] = Field(default=None, description="Wifi available. The hotel provides the ability for guests to wirelessly connect to the internet. Can be in the public areas of the hotel and/or in the guest rooms. Can be free or for a fee.", alias="wifiAvailable")
    wifi_available_exception: Optional[StrictStr] = Field(default=None, description="Wifi available exception.", alias="wifiAvailableException")
    __properties: ClassVar[List[str]] = ["freeWifi", "freeWifiException", "publicAreaWifiAvailable", "publicAreaWifiAvailableException", "publicInternetTerminal", "publicInternetTerminalException", "wifiAvailable", "wifiAvailableException"]

    @field_validator('free_wifi_exception')
    def free_wifi_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('public_area_wifi_available_exception')
    def public_area_wifi_available_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('public_internet_terminal_exception')
    def public_internet_terminal_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('wifi_available_exception')
    def wifi_available_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Connectivity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Connectivity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "freeWifi": obj.get("freeWifi"),
            "freeWifiException": obj.get("freeWifiException"),
            "publicAreaWifiAvailable": obj.get("publicAreaWifiAvailable"),
            "publicAreaWifiAvailableException": obj.get("publicAreaWifiAvailableException"),
            "publicInternetTerminal": obj.get("publicInternetTerminal"),
            "publicInternetTerminalException": obj.get("publicInternetTerminalException"),
            "wifiAvailable": obj.get("wifiAvailable"),
            "wifiAvailableException": obj.get("wifiAvailableException")
        })
        return _obj



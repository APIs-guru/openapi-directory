# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LivingAreaFeatures(BaseModel):
    """
    Features in the living area.
    """ # noqa: E501
    air_conditioning: Optional[StrictBool] = Field(default=None, description="Air conditioning. An electrical machine used to cool the temperature of the guestroom.", alias="airConditioning")
    air_conditioning_exception: Optional[StrictStr] = Field(default=None, description="Air conditioning exception.", alias="airConditioningException")
    bathtub: Optional[StrictBool] = Field(default=None, description="Bathtub. A fixed plumbing feature set on the floor and consisting of a large container that accommodates the body of an adult for the purpose of seated bathing. Includes knobs or fixtures to control the temperature of the water, a faucet through which the water flows, and a drain that can be closed for filling and opened for draining.")
    bathtub_exception: Optional[StrictStr] = Field(default=None, description="Bathtub exception.", alias="bathtubException")
    bidet: Optional[StrictBool] = Field(default=None, description="Bidet. A plumbing fixture attached to a toilet or a low, fixed sink designed for the purpose of washing after toilet use.")
    bidet_exception: Optional[StrictStr] = Field(default=None, description="Bidet exception.", alias="bidetException")
    dryer: Optional[StrictBool] = Field(default=None, description="Dryer. An electrical machine designed to dry clothing.")
    dryer_exception: Optional[StrictStr] = Field(default=None, description="Dryer exception.", alias="dryerException")
    electronic_room_key: Optional[StrictBool] = Field(default=None, description="Electronic room key. A card coded by the check-in computer that is read by the lock on the hotel guestroom door to allow for entry.", alias="electronicRoomKey")
    electronic_room_key_exception: Optional[StrictStr] = Field(default=None, description="Electronic room key exception.", alias="electronicRoomKeyException")
    fireplace: Optional[StrictBool] = Field(default=None, description="Fireplace. A framed opening (aka hearth) at the base of a chimney in which logs or an electrical fire feature are burned to provide a relaxing ambiance or to heat the room. Often made of bricks or stone.")
    fireplace_exception: Optional[StrictStr] = Field(default=None, description="Fireplace exception.", alias="fireplaceException")
    hairdryer: Optional[StrictBool] = Field(default=None, description="Hairdryer. A handheld electric appliance that blows temperature-controlled air for the purpose of drying wet hair. Can be mounted to a bathroom wall or a freestanding device stored in the guestroom's bathroom or closet.")
    hairdryer_exception: Optional[StrictStr] = Field(default=None, description="Hairdryer exception.", alias="hairdryerException")
    heating: Optional[StrictBool] = Field(default=None, description="Heating. An electrical machine used to warm the temperature of the guestroom.")
    heating_exception: Optional[StrictStr] = Field(default=None, description="Heating exception.", alias="heatingException")
    inunit_safe: Optional[StrictBool] = Field(default=None, description="In-unit safe. A strong fireproof cabinet with a programmable lock, used for the protected storage of valuables in a guestroom. Often built into a closet.", alias="inunitSafe")
    inunit_safe_exception: Optional[StrictStr] = Field(default=None, description="In-unit safe exception.", alias="inunitSafeException")
    inunit_wifi_available: Optional[StrictBool] = Field(default=None, description="In-unit Wifi available. Guests can wirelessly connect to the Internet in the guestroom. Can be free or for a fee.", alias="inunitWifiAvailable")
    inunit_wifi_available_exception: Optional[StrictStr] = Field(default=None, description="In-unit Wifi available exception.", alias="inunitWifiAvailableException")
    ironing_equipment: Optional[StrictBool] = Field(default=None, description="Ironing equipment. A device, usually with a flat metal base, that is heated to smooth, finish, or press clothes and a flat, padded, cloth-covered surface on which the clothes are worked.", alias="ironingEquipment")
    ironing_equipment_exception: Optional[StrictStr] = Field(default=None, description="Ironing equipment exception.", alias="ironingEquipmentException")
    pay_per_view_movies: Optional[StrictBool] = Field(default=None, description="Pay per view movies. Televisions with channels that offer films that can be viewed for a fee, and have an interface to allow the viewer to accept the terms and approve payment.", alias="payPerViewMovies")
    pay_per_view_movies_exception: Optional[StrictStr] = Field(default=None, description="Pay per view movies exception.", alias="payPerViewMoviesException")
    private_bathroom: Optional[StrictBool] = Field(default=None, description="Private bathroom. A bathroom designated for the express use of the guests staying in a specific guestroom.", alias="privateBathroom")
    private_bathroom_exception: Optional[StrictStr] = Field(default=None, description="Private bathroom exception.", alias="privateBathroomException")
    shower: Optional[StrictBool] = Field(default=None, description="Shower. A fixed plumbing fixture for standing bathing that features a tall spray spout or faucet through which water flows, a knob or knobs that control the water's temperature, and a drain in the floor.")
    shower_exception: Optional[StrictStr] = Field(default=None, description="Shower exception.", alias="showerException")
    toilet: Optional[StrictBool] = Field(default=None, description="Toilet. A fixed bathroom feature connected to a sewer or septic system and consisting of a water-flushed bowl with a seat, as well as a device that elicites the water-flushing action. Used for the process and disposal of human waste.")
    toilet_exception: Optional[StrictStr] = Field(default=None, description="Toilet exception.", alias="toiletException")
    tv: Optional[StrictBool] = Field(default=None, description="TV. A television is available in the guestroom.")
    tv_casting: Optional[StrictBool] = Field(default=None, description="TV casting. A television equipped with a device through which the video entertainment accessed on a personal computer, phone or tablet can be wirelessly delivered to and viewed on the guestroom's television.", alias="tvCasting")
    tv_casting_exception: Optional[StrictStr] = Field(default=None, description="TV exception.", alias="tvCastingException")
    tv_exception: Optional[StrictStr] = Field(default=None, description="TV exception.", alias="tvException")
    tv_streaming: Optional[StrictBool] = Field(default=None, description="TV streaming. Televisions that embed a range of web-based apps to allow for watching media from those apps.", alias="tvStreaming")
    tv_streaming_exception: Optional[StrictStr] = Field(default=None, description="TV streaming exception.", alias="tvStreamingException")
    universal_power_adapters: Optional[StrictBool] = Field(default=None, description="Universal power adapters. A power supply for electronic devices which plugs into a wall for the purpose of converting AC to a single DC voltage. Also know as AC adapter or charger.", alias="universalPowerAdapters")
    universal_power_adapters_exception: Optional[StrictStr] = Field(default=None, description="Universal power adapters exception.", alias="universalPowerAdaptersException")
    washer: Optional[StrictBool] = Field(default=None, description="Washer. An electrical machine connected to a running water source designed to launder clothing.")
    washer_exception: Optional[StrictStr] = Field(default=None, description="Washer exception.", alias="washerException")
    __properties: ClassVar[List[str]] = ["airConditioning", "airConditioningException", "bathtub", "bathtubException", "bidet", "bidetException", "dryer", "dryerException", "electronicRoomKey", "electronicRoomKeyException", "fireplace", "fireplaceException", "hairdryer", "hairdryerException", "heating", "heatingException", "inunitSafe", "inunitSafeException", "inunitWifiAvailable", "inunitWifiAvailableException", "ironingEquipment", "ironingEquipmentException", "payPerViewMovies", "payPerViewMoviesException", "privateBathroom", "privateBathroomException", "shower", "showerException", "toilet", "toiletException", "tv", "tvCasting", "tvCastingException", "tvException", "tvStreaming", "tvStreamingException", "universalPowerAdapters", "universalPowerAdaptersException", "washer", "washerException"]

    @field_validator('air_conditioning_exception')
    def air_conditioning_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('bathtub_exception')
    def bathtub_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('bidet_exception')
    def bidet_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('dryer_exception')
    def dryer_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('electronic_room_key_exception')
    def electronic_room_key_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('fireplace_exception')
    def fireplace_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('hairdryer_exception')
    def hairdryer_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('heating_exception')
    def heating_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('inunit_safe_exception')
    def inunit_safe_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('inunit_wifi_available_exception')
    def inunit_wifi_available_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('ironing_equipment_exception')
    def ironing_equipment_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('pay_per_view_movies_exception')
    def pay_per_view_movies_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('private_bathroom_exception')
    def private_bathroom_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('shower_exception')
    def shower_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('toilet_exception')
    def toilet_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('tv_casting_exception')
    def tv_casting_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('tv_exception')
    def tv_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('tv_streaming_exception')
    def tv_streaming_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('universal_power_adapters_exception')
    def universal_power_adapters_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('washer_exception')
    def washer_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LivingAreaFeatures from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LivingAreaFeatures from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "airConditioning": obj.get("airConditioning"),
            "airConditioningException": obj.get("airConditioningException"),
            "bathtub": obj.get("bathtub"),
            "bathtubException": obj.get("bathtubException"),
            "bidet": obj.get("bidet"),
            "bidetException": obj.get("bidetException"),
            "dryer": obj.get("dryer"),
            "dryerException": obj.get("dryerException"),
            "electronicRoomKey": obj.get("electronicRoomKey"),
            "electronicRoomKeyException": obj.get("electronicRoomKeyException"),
            "fireplace": obj.get("fireplace"),
            "fireplaceException": obj.get("fireplaceException"),
            "hairdryer": obj.get("hairdryer"),
            "hairdryerException": obj.get("hairdryerException"),
            "heating": obj.get("heating"),
            "heatingException": obj.get("heatingException"),
            "inunitSafe": obj.get("inunitSafe"),
            "inunitSafeException": obj.get("inunitSafeException"),
            "inunitWifiAvailable": obj.get("inunitWifiAvailable"),
            "inunitWifiAvailableException": obj.get("inunitWifiAvailableException"),
            "ironingEquipment": obj.get("ironingEquipment"),
            "ironingEquipmentException": obj.get("ironingEquipmentException"),
            "payPerViewMovies": obj.get("payPerViewMovies"),
            "payPerViewMoviesException": obj.get("payPerViewMoviesException"),
            "privateBathroom": obj.get("privateBathroom"),
            "privateBathroomException": obj.get("privateBathroomException"),
            "shower": obj.get("shower"),
            "showerException": obj.get("showerException"),
            "toilet": obj.get("toilet"),
            "toiletException": obj.get("toiletException"),
            "tv": obj.get("tv"),
            "tvCasting": obj.get("tvCasting"),
            "tvCastingException": obj.get("tvCastingException"),
            "tvException": obj.get("tvException"),
            "tvStreaming": obj.get("tvStreaming"),
            "tvStreamingException": obj.get("tvStreamingException"),
            "universalPowerAdapters": obj.get("universalPowerAdapters"),
            "universalPowerAdaptersException": obj.get("universalPowerAdaptersException"),
            "washer": obj.get("washer"),
            "washerException": obj.get("washerException")
        })
        return _obj



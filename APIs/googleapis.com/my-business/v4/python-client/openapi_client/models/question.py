# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.answer import Answer
from openapi_client.models.author import Author
from typing import Optional, Set
from typing_extensions import Self

class Question(BaseModel):
    """
    Represents a single question and some of its answers.
    """ # noqa: E501
    author: Optional[Author] = None
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp for when the question was written.", alias="createTime")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The unique name for the question. accounts/*/locations/*/questions/*")
    text: Optional[StrictStr] = Field(default=None, description="The text of the question. It should contain at least three words and the total length should be greater than or equal to 10 characters. The maximum length is 4096 characters.")
    top_answers: Optional[List[Answer]] = Field(default=None, description="Output only. A list of answers to the question, sorted by upvotes. This may not be a complete list of answers depending on the request parameters (answers_per_question)", alias="topAnswers")
    total_answer_count: Optional[StrictInt] = Field(default=None, description="Output only. The total number of answers posted for this question.", alias="totalAnswerCount")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp for when the question was last modified.", alias="updateTime")
    upvote_count: Optional[StrictInt] = Field(default=None, description="Output only. The number of upvotes for the question.", alias="upvoteCount")
    __properties: ClassVar[List[str]] = ["author", "createTime", "name", "text", "topAnswers", "totalAnswerCount", "updateTime", "upvoteCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Question from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in top_answers (list)
        _items = []
        if self.top_answers:
            for _item_top_answers in self.top_answers:
                if _item_top_answers:
                    _items.append(_item_top_answers.to_dict())
            _dict['topAnswers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Question from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "author": Author.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "createTime": obj.get("createTime"),
            "name": obj.get("name"),
            "text": obj.get("text"),
            "topAnswers": [Answer.from_dict(_item) for _item in obj["topAnswers"]] if obj.get("topAnswers") is not None else None,
            "totalAnswerCount": obj.get("totalAnswerCount"),
            "updateTime": obj.get("updateTime"),
            "upvoteCount": obj.get("upvoteCount")
        })
        return _obj



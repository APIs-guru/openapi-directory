# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.repeated_enum_attribute_value import RepeatedEnumAttributeValue
from openapi_client.models.url_attribute_value import UrlAttributeValue
from typing import Optional, Set
from typing_extensions import Self

class Attribute(BaseModel):
    """
    A location attribute. Attributes provide additional information about a location. The attributes that can be set on a location may vary based on the properties of that location (for example, category). Available attributes are determined by Google and may be added and removed without API changes.
    """ # noqa: E501
    attribute_id: Optional[StrictStr] = Field(default=None, description="The ID of the attribute. Attribute IDs are provided by Google.", alias="attributeId")
    repeated_enum_value: Optional[RepeatedEnumAttributeValue] = Field(default=None, alias="repeatedEnumValue")
    url_values: Optional[List[UrlAttributeValue]] = Field(default=None, description="When the attribute value type is URL, this field contains the value(s) for this attribute, and the other values fields must be empty.", alias="urlValues")
    value_type: Optional[StrictStr] = Field(default=None, description="Output only. The type of value that this attribute contains. This should be used to determine how to interpret the value.", alias="valueType")
    values: Optional[List[Any]] = Field(default=None, description="The values for this attribute. The type of the values supplied must match that expected for that attribute; see [AttributeValueType](/my-business/reference/rest/v4/AttributeValueType). This is a repeated field where multiple attribute values may be provided. Attribute types only support one value.")
    __properties: ClassVar[List[str]] = ["attributeId", "repeatedEnumValue", "urlValues", "valueType", "values"]

    @field_validator('value_type')
    def value_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ATTRIBUTE_VALUE_TYPE_UNSPECIFIED', 'BOOL', 'ENUM', 'URL', 'REPEATED_ENUM']):
            raise ValueError("must be one of enum values ('ATTRIBUTE_VALUE_TYPE_UNSPECIFIED', 'BOOL', 'ENUM', 'URL', 'REPEATED_ENUM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Attribute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of repeated_enum_value
        if self.repeated_enum_value:
            _dict['repeatedEnumValue'] = self.repeated_enum_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in url_values (list)
        _items = []
        if self.url_values:
            for _item_url_values in self.url_values:
                if _item_url_values:
                    _items.append(_item_url_values.to_dict())
            _dict['urlValues'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Attribute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributeId": obj.get("attributeId"),
            "repeatedEnumValue": RepeatedEnumAttributeValue.from_dict(obj["repeatedEnumValue"]) if obj.get("repeatedEnumValue") is not None else None,
            "urlValues": [UrlAttributeValue.from_dict(_item) for _item in obj["urlValues"]] if obj.get("urlValues") is not None else None,
            "valueType": obj.get("valueType"),
            "values": obj.get("values")
        })
        return _obj



# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class LivingAreaLayout(BaseModel):
    """
    Information about the layout of the living area.
    """ # noqa: E501
    balcony: Optional[StrictBool] = Field(default=None, description="Balcony. An outdoor platform attached to a building and surrounded by a short wall, fence or other safety railing. The balcony is accessed through a door in a guestroom or suite and is for use by the guest staying in that room. May or may not include seating or outdoor furniture. Is not located on the ground floor. Also lanai.")
    balcony_exception: Optional[StrictStr] = Field(default=None, description="Balcony exception.", alias="balconyException")
    living_area_sq_meters: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Living area sq meters. The measurement in meters of the area of a guestroom's living space.", alias="livingAreaSqMeters")
    living_area_sq_meters_exception: Optional[StrictStr] = Field(default=None, description="Living area sq meters exception.", alias="livingAreaSqMetersException")
    loft: Optional[StrictBool] = Field(default=None, description="Loft. A three-walled upper area accessed by stairs or a ladder that overlooks the lower area of a room.")
    loft_exception: Optional[StrictStr] = Field(default=None, description="Loft exception.", alias="loftException")
    non_smoking: Optional[StrictBool] = Field(default=None, description="Non smoking. A guestroom in which the smoking of cigarettes, cigars and pipes is prohibited.", alias="nonSmoking")
    non_smoking_exception: Optional[StrictStr] = Field(default=None, description="Non smoking exception.", alias="nonSmokingException")
    patio: Optional[StrictBool] = Field(default=None, description="Patio. A paved, outdoor area with seating attached to and accessed through a ground-floor guestroom for use by the occupants of the guestroom.")
    patio_exception: Optional[StrictStr] = Field(default=None, description="Patio exception.", alias="patioException")
    stairs: Optional[StrictBool] = Field(default=None, description="Stairs. There are steps leading from one level or story to another in the unit.")
    stairs_exception: Optional[StrictStr] = Field(default=None, description="Stairs exception.", alias="stairsException")
    __properties: ClassVar[List[str]] = ["balcony", "balconyException", "livingAreaSqMeters", "livingAreaSqMetersException", "loft", "loftException", "nonSmoking", "nonSmokingException", "patio", "patioException", "stairs", "stairsException"]

    @field_validator('balcony_exception')
    def balcony_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('living_area_sq_meters_exception')
    def living_area_sq_meters_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('loft_exception')
    def loft_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('non_smoking_exception')
    def non_smoking_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('patio_exception')
    def patio_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    @field_validator('stairs_exception')
    def stairs_exception_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK']):
            raise ValueError("must be one of enum values ('EXCEPTION_UNSPECIFIED', 'UNDER_CONSTRUCTION', 'DEPENDENT_ON_SEASON', 'DEPENDENT_ON_DAY_OF_WEEK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LivingAreaLayout from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LivingAreaLayout from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "balcony": obj.get("balcony"),
            "balconyException": obj.get("balconyException"),
            "livingAreaSqMeters": obj.get("livingAreaSqMeters"),
            "livingAreaSqMetersException": obj.get("livingAreaSqMetersException"),
            "loft": obj.get("loft"),
            "loftException": obj.get("loftException"),
            "nonSmoking": obj.get("nonSmoking"),
            "nonSmokingException": obj.get("nonSmokingException"),
            "patio": obj.get("patio"),
            "patioException": obj.get("patioException"),
            "stairs": obj.get("stairs"),
            "stairsException": obj.get("stairsException")
        })
        return _obj



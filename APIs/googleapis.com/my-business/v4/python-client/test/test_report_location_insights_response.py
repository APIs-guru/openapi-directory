# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.report_location_insights_response import ReportLocationInsightsResponse

class TestReportLocationInsightsResponse(unittest.TestCase):
    """ReportLocationInsightsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ReportLocationInsightsResponse:
        """Test ReportLocationInsightsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ReportLocationInsightsResponse`
        """
        model = ReportLocationInsightsResponse()
        if include_optional:
            return ReportLocationInsightsResponse(
                location_driving_direction_metrics = [
                    openapi_client.models.location_driving_direction_metrics.LocationDrivingDirectionMetrics(
                        location_name = '', 
                        time_zone = '', 
                        top_direction_sources = [
                            openapi_client.models.top_direction_sources.TopDirectionSources(
                                day_count = 56, 
                                region_counts = [
                                    openapi_client.models.region_count.RegionCount(
                                        count = '', 
                                        label = '', 
                                        latlng = openapi_client.models.lat_lng.LatLng(
                                            latitude = 1.337, 
                                            longitude = 1.337, ), )
                                    ], )
                            ], )
                    ],
                location_metrics = [
                    openapi_client.models.location_metrics.LocationMetrics(
                        location_name = '', 
                        metric_values = [
                            openapi_client.models.metric_value.MetricValue(
                                dimensional_values = [
                                    openapi_client.models.dimensional_metric_value.DimensionalMetricValue(
                                        metric_option = 'METRIC_OPTION_UNSPECIFIED', 
                                        time_dimension = openapi_client.models.time_dimension.TimeDimension(
                                            day_of_week = 'DAY_OF_WEEK_UNSPECIFIED', 
                                            time_of_day = openapi_client.models.time_of_day.TimeOfDay(
                                                hours = 56, 
                                                minutes = 56, 
                                                nanos = 56, 
                                                seconds = 56, ), 
                                            time_range = openapi_client.models.time_range.TimeRange(
                                                end_time = '', 
                                                start_time = '', ), ), 
                                        value = '', )
                                    ], 
                                metric = 'METRIC_UNSPECIFIED', 
                                total_value = openapi_client.models.dimensional_metric_value.DimensionalMetricValue(
                                    metric_option = 'METRIC_OPTION_UNSPECIFIED', 
                                    value = '', ), )
                            ], 
                        time_zone = '', )
                    ]
            )
        else:
            return ReportLocationInsightsResponse(
        )
        """

    def testReportLocationInsightsResponse(self):
        """Test ReportLocationInsightsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

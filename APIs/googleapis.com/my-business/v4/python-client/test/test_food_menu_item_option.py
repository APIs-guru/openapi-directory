# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.food_menu_item_option import FoodMenuItemOption

class TestFoodMenuItemOption(unittest.TestCase):
    """FoodMenuItemOption unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FoodMenuItemOption:
        """Test FoodMenuItemOption
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FoodMenuItemOption`
        """
        model = FoodMenuItemOption()
        if include_optional:
            return FoodMenuItemOption(
                attributes = openapi_client.models.food_menu_item_attributes.FoodMenuItemAttributes(
                    allergen = [
                        'ALLERGEN_UNSPECIFIED'
                        ], 
                    dietary_restriction = [
                        'DIETARY_RESTRICTION_UNSPECIFIED'
                        ], 
                    ingredients = [
                        openapi_client.models.ingredient.Ingredient(
                            labels = [
                                openapi_client.models.menu_label.MenuLabel(
                                    description = '', 
                                    display_name = '', 
                                    language_code = '', )
                                ], )
                        ], 
                    media_keys = [
                        ''
                        ], 
                    nutrition_facts = openapi_client.models.nutrition_facts.NutritionFacts(
                        calories = openapi_client.models.calories_fact.CaloriesFact(
                            lower_amount = 56, 
                            unit = 'ENERGY_UNIT_UNSPECIFIED', 
                            upper_amount = 56, ), 
                        cholesterol = openapi_client.models.nutrition_fact.NutritionFact(
                            lower_amount = 1.337, 
                            unit = 'MASS_UNIT_UNSPECIFIED', 
                            upper_amount = 1.337, ), 
                        protein = openapi_client.models.nutrition_fact.NutritionFact(
                            lower_amount = 1.337, 
                            unit = 'MASS_UNIT_UNSPECIFIED', 
                            upper_amount = 1.337, ), 
                        sodium = , 
                        total_carbohydrate = , 
                        total_fat = , ), 
                    portion_size = openapi_client.models.portion_size.PortionSize(
                        quantity = 56, 
                        unit = [
                            openapi_client.models.menu_label.MenuLabel(
                                description = '', 
                                display_name = '', 
                                language_code = '', )
                            ], ), 
                    preparation_methods = [
                        'PREPARATION_METHOD_UNSPECIFIED'
                        ], 
                    price = openapi_client.models.money.Money(
                        currency_code = '', 
                        nanos = 56, 
                        units = '', ), 
                    serves_num_people = 56, 
                    spiciness = 'SPICINESS_UNSPECIFIED', ),
                labels = [
                    openapi_client.models.menu_label.MenuLabel(
                        description = '', 
                        display_name = '', 
                        language_code = '', )
                    ]
            )
        else:
            return FoodMenuItemOption(
        )
        """

    def testFoodMenuItemOption(self):
        """Test FoodMenuItemOption"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

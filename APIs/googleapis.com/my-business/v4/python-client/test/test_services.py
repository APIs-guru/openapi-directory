# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.services import Services

class TestServices(unittest.TestCase):
    """Services unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Services:
        """Test Services
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Services`
        """
        model = Services()
        if include_optional:
            return Services(
                baggage_storage = True,
                baggage_storage_exception = 'EXCEPTION_UNSPECIFIED',
                concierge = True,
                concierge_exception = 'EXCEPTION_UNSPECIFIED',
                convenience_store = True,
                convenience_store_exception = 'EXCEPTION_UNSPECIFIED',
                currency_exchange = True,
                currency_exchange_exception = 'EXCEPTION_UNSPECIFIED',
                elevator = True,
                elevator_exception = 'EXCEPTION_UNSPECIFIED',
                front_desk = True,
                front_desk_exception = 'EXCEPTION_UNSPECIFIED',
                full_service_laundry = True,
                full_service_laundry_exception = 'EXCEPTION_UNSPECIFIED',
                gift_shop = True,
                gift_shop_exception = 'EXCEPTION_UNSPECIFIED',
                languages_spoken = openapi_client.models.languages_spoken.LanguagesSpoken(
                    arabic_spoken = True, 
                    arabic_spoken_exception = 'EXCEPTION_UNSPECIFIED', 
                    cantonese_spoken = True, 
                    cantonese_spoken_exception = 'EXCEPTION_UNSPECIFIED', 
                    dutch_spoken = True, 
                    dutch_spoken_exception = 'EXCEPTION_UNSPECIFIED', 
                    english_spoken = True, 
                    english_spoken_exception = 'EXCEPTION_UNSPECIFIED', 
                    filipino_spoken = True, 
                    filipino_spoken_exception = 'EXCEPTION_UNSPECIFIED', 
                    french_spoken = True, 
                    french_spoken_exception = 'EXCEPTION_UNSPECIFIED', 
                    german_spoken = True, 
                    german_spoken_exception = 'EXCEPTION_UNSPECIFIED', 
                    hindi_spoken = True, 
                    hindi_spoken_exception = 'EXCEPTION_UNSPECIFIED', 
                    indonesian_spoken = True, 
                    indonesian_spoken_exception = 'EXCEPTION_UNSPECIFIED', 
                    italian_spoken = True, 
                    italian_spoken_exception = 'EXCEPTION_UNSPECIFIED', 
                    japanese_spoken = True, 
                    japanese_spoken_exception = 'EXCEPTION_UNSPECIFIED', 
                    korean_spoken = True, 
                    korean_spoken_exception = 'EXCEPTION_UNSPECIFIED', 
                    mandarin_spoken = True, 
                    mandarin_spoken_exception = 'EXCEPTION_UNSPECIFIED', 
                    portuguese_spoken = True, 
                    portuguese_spoken_exception = 'EXCEPTION_UNSPECIFIED', 
                    russian_spoken = True, 
                    russian_spoken_exception = 'EXCEPTION_UNSPECIFIED', 
                    spanish_spoken = True, 
                    spanish_spoken_exception = 'EXCEPTION_UNSPECIFIED', 
                    vietnamese_spoken = True, 
                    vietnamese_spoken_exception = 'EXCEPTION_UNSPECIFIED', ),
                self_service_laundry = True,
                self_service_laundry_exception = 'EXCEPTION_UNSPECIFIED',
                social_hour = True,
                social_hour_exception = 'EXCEPTION_UNSPECIFIED',
                twenty_four_hour_front_desk = True,
                twenty_four_hour_front_desk_exception = 'EXCEPTION_UNSPECIFIED',
                wake_up_calls = True,
                wake_up_calls_exception = 'EXCEPTION_UNSPECIFIED'
            )
        else:
            return Services(
        )
        """

    def testServices(self):
        """Test Services"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

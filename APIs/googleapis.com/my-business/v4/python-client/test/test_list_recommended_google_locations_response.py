# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_recommended_google_locations_response import ListRecommendedGoogleLocationsResponse

class TestListRecommendedGoogleLocationsResponse(unittest.TestCase):
    """ListRecommendedGoogleLocationsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListRecommendedGoogleLocationsResponse:
        """Test ListRecommendedGoogleLocationsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListRecommendedGoogleLocationsResponse`
        """
        model = ListRecommendedGoogleLocationsResponse()
        if include_optional:
            return ListRecommendedGoogleLocationsResponse(
                google_locations = [
                    openapi_client.models.google_location.GoogleLocation(
                        location = openapi_client.models.location.Location(
                            ad_words_location_extensions = openapi_client.models.ad_words_location_extensions.AdWordsLocationExtensions(
                                ad_phone = '', ), 
                            additional_categories = [
                                openapi_client.models.category.Category(
                                    category_id = '', 
                                    display_name = '', 
                                    more_hours_types = [
                                        openapi_client.models.more_hours_type.MoreHoursType(
                                            display_name = '', 
                                            hours_type_id = '', 
                                            localized_display_name = '', )
                                        ], 
                                    service_types = [
                                        openapi_client.models.service_type.ServiceType(
                                            display_name = '', 
                                            service_type_id = '', )
                                        ], )
                                ], 
                            additional_phones = [
                                ''
                                ], 
                            address = openapi_client.models.postal_address.PostalAddress(
                                address_lines = [
                                    ''
                                    ], 
                                administrative_area = '', 
                                language_code = '', 
                                locality = '', 
                                organization = '', 
                                postal_code = '', 
                                recipients = [
                                    ''
                                    ], 
                                region_code = '', 
                                revision = 56, 
                                sorting_code = '', 
                                sublocality = '', ), 
                            attributes = [
                                openapi_client.models.attribute.Attribute(
                                    attribute_id = '', 
                                    repeated_enum_value = openapi_client.models.repeated_enum_attribute_value.RepeatedEnumAttributeValue(
                                        set_values = [
                                            ''
                                            ], 
                                        unset_values = [
                                            ''
                                            ], ), 
                                    url_values = [
                                        openapi_client.models.url_attribute_value.UrlAttributeValue(
                                            url = '', )
                                        ], 
                                    value_type = 'ATTRIBUTE_VALUE_TYPE_UNSPECIFIED', 
                                    values = [
                                        null
                                        ], )
                                ], 
                            labels = [
                                ''
                                ], 
                            language_code = '', 
                            latlng = openapi_client.models.lat_lng.LatLng(
                                latitude = 1.337, 
                                longitude = 1.337, ), 
                            location_key = openapi_client.models.location_key.LocationKey(
                                explicit_no_place_id = True, 
                                place_id = '', 
                                plus_page_id = '', 
                                request_id = '', ), 
                            location_name = '', 
                            location_state = openapi_client.models.location_state.LocationState(
                                can_delete = True, 
                                can_have_food_menus = True, 
                                can_modify_service_list = True, 
                                can_operate_health_data = True, 
                                can_operate_lodging_data = True, 
                                can_update = True, 
                                has_pending_edits = True, 
                                has_pending_verification = True, 
                                is_disabled = True, 
                                is_disconnected = True, 
                                is_duplicate = True, 
                                is_google_updated = True, 
                                is_local_post_api_disabled = True, 
                                is_pending_review = True, 
                                is_published = True, 
                                is_suspended = True, 
                                is_verified = True, 
                                needs_reverification = True, ), 
                            metadata = openapi_client.models.metadata.Metadata(
                                duplicate = openapi_client.models.duplicate.Duplicate(
                                    access = 'ACCESS_UNSPECIFIED', 
                                    location_name = '', 
                                    place_id = '', ), 
                                maps_url = '', 
                                new_review_url = '', ), 
                            more_hours = [
                                openapi_client.models.more_hours.MoreHours(
                                    hours_type_id = '', 
                                    periods = [
                                        openapi_client.models.time_period.TimePeriod(
                                            close_day = 'DAY_OF_WEEK_UNSPECIFIED', 
                                            close_time = '', 
                                            open_day = 'DAY_OF_WEEK_UNSPECIFIED', 
                                            open_time = '', )
                                        ], )
                                ], 
                            name = '', 
                            open_info = openapi_client.models.open_info.OpenInfo(
                                can_reopen = True, 
                                opening_date = openapi_client.models.date.Date(
                                    day = 56, 
                                    month = 56, 
                                    year = 56, ), 
                                status = 'OPEN_FOR_BUSINESS_UNSPECIFIED', ), 
                            price_lists = [
                                openapi_client.models.price_list.PriceList(
                                    price_list_id = '', 
                                    sections = [
                                        openapi_client.models.section.Section(
                                            items = [
                                                openapi_client.models.item.Item(
                                                    item_id = '', 
                                                    price = openapi_client.models.money.Money(
                                                        currency_code = '', 
                                                        nanos = 56, 
                                                        units = '', ), )
                                                ], 
                                            section_id = '', 
                                            section_type = 'SECTION_TYPE_UNSPECIFIED', )
                                        ], 
                                    source_url = '', )
                                ], 
                            primary_category = openapi_client.models.category.Category(
                                category_id = '', 
                                display_name = '', ), 
                            primary_phone = '', 
                            profile = openapi_client.models.profile.Profile(
                                description = '', ), 
                            regular_hours = openapi_client.models.business_hours.BusinessHours(), 
                            relationship_data = openapi_client.models.relationship_data.RelationshipData(
                                parent_chain = '', ), 
                            service_area = openapi_client.models.service_area_business.ServiceAreaBusiness(
                                business_type = 'BUSINESS_TYPE_UNSPECIFIED', 
                                places = openapi_client.models.places.Places(
                                    place_infos = [
                                        openapi_client.models.place_info.PlaceInfo(
                                            name = '', 
                                            place_id = '', )
                                        ], ), 
                                radius = openapi_client.models.point_radius.PointRadius(
                                    radius_km = 1.337, ), ), 
                            special_hours = openapi_client.models.special_hours.SpecialHours(
                                special_hour_periods = [
                                    openapi_client.models.special_hour_period.SpecialHourPeriod(
                                        close_time = '', 
                                        end_date = openapi_client.models.date.Date(
                                            day = 56, 
                                            month = 56, 
                                            year = 56, ), 
                                        is_closed = True, 
                                        open_time = '', 
                                        start_date = , )
                                    ], ), 
                            store_code = '', 
                            website_url = '', ), 
                        name = '', 
                        request_admin_rights_url = '', )
                    ],
                next_page_token = '',
                total_size = 56
            )
        else:
            return ListRecommendedGoogleLocationsResponse(
        )
        """

    def testListRecommendedGoogleLocationsResponse(self):
        """Test ListRecommendedGoogleLocationsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

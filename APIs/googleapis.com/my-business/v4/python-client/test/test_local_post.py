# coding: utf-8

"""
    Google My Business API

    The Google My Business API provides an interface for managing business location information on Google.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.local_post import LocalPost

class TestLocalPost(unittest.TestCase):
    """LocalPost unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LocalPost:
        """Test LocalPost
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LocalPost`
        """
        model = LocalPost()
        if include_optional:
            return LocalPost(
                alert_type = 'ALERT_TYPE_UNSPECIFIED',
                call_to_action = openapi_client.models.call_to_action.CallToAction(
                    action_type = 'ACTION_TYPE_UNSPECIFIED', 
                    url = '', ),
                create_time = '',
                event = openapi_client.models.local_post_event.LocalPostEvent(
                    schedule = openapi_client.models.time_interval.TimeInterval(
                        end_date = openapi_client.models.date.Date(
                            day = 56, 
                            month = 56, 
                            year = 56, ), 
                        end_time = openapi_client.models.time_of_day.TimeOfDay(
                            hours = 56, 
                            minutes = 56, 
                            nanos = 56, 
                            seconds = 56, ), 
                        start_date = openapi_client.models.date.Date(
                            day = 56, 
                            month = 56, 
                            year = 56, ), 
                        start_time = openapi_client.models.time_of_day.TimeOfDay(
                            hours = 56, 
                            minutes = 56, 
                            nanos = 56, 
                            seconds = 56, ), ), 
                    title = '', ),
                language_code = '',
                media = [
                    openapi_client.models.media_item.MediaItem(
                        attribution = openapi_client.models.attribution.Attribution(
                            profile_name = '', 
                            profile_photo_url = '', 
                            profile_url = '', 
                            takedown_url = '', ), 
                        create_time = '', 
                        data_ref = openapi_client.models.media_item_data_ref.MediaItemDataRef(
                            resource_name = '', ), 
                        description = '', 
                        dimensions = openapi_client.models.dimensions.Dimensions(
                            height_pixels = 56, 
                            width_pixels = 56, ), 
                        google_url = '', 
                        insights = openapi_client.models.media_insights.MediaInsights(
                            view_count = '', ), 
                        location_association = openapi_client.models.location_association.LocationAssociation(
                            category = 'CATEGORY_UNSPECIFIED', 
                            price_list_item_id = '', ), 
                        media_format = 'MEDIA_FORMAT_UNSPECIFIED', 
                        name = '', 
                        source_url = '', 
                        thumbnail_url = '', )
                    ],
                name = '',
                offer = openapi_client.models.local_post_offer.LocalPostOffer(
                    coupon_code = '', 
                    redeem_online_url = '', 
                    terms_conditions = '', ),
                search_url = '',
                state = 'LOCAL_POST_STATE_UNSPECIFIED',
                summary = '',
                topic_type = 'LOCAL_POST_TOPIC_TYPE_UNSPECIFIED',
                update_time = ''
            )
        else:
            return LocalPost(
        )
        """

    def testLocalPost(self):
        """Test LocalPost"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

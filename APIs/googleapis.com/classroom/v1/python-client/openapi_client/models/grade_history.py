# coding: utf-8

"""
    Google Classroom API

    Manages classes, rosters, and invitations in Google Classroom.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GradeHistory(BaseModel):
    """
    The history of each grade on this submission.
    """ # noqa: E501
    actor_user_id: Optional[StrictStr] = Field(default=None, description="The teacher who made the grade change.", alias="actorUserId")
    grade_change_type: Optional[StrictStr] = Field(default=None, description="The type of grade change at this time in the submission grade history.", alias="gradeChangeType")
    grade_timestamp: Optional[StrictStr] = Field(default=None, description="When the grade of the submission was changed.", alias="gradeTimestamp")
    max_points: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The denominator of the grade at this time in the submission grade history.", alias="maxPoints")
    points_earned: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The numerator of the grade at this time in the submission grade history.", alias="pointsEarned")
    __properties: ClassVar[List[str]] = ["actorUserId", "gradeChangeType", "gradeTimestamp", "maxPoints", "pointsEarned"]

    @field_validator('grade_change_type')
    def grade_change_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN_GRADE_CHANGE_TYPE', 'DRAFT_GRADE_POINTS_EARNED_CHANGE', 'ASSIGNED_GRADE_POINTS_EARNED_CHANGE', 'MAX_POINTS_CHANGE']):
            raise ValueError("must be one of enum values ('UNKNOWN_GRADE_CHANGE_TYPE', 'DRAFT_GRADE_POINTS_EARNED_CHANGE', 'ASSIGNED_GRADE_POINTS_EARNED_CHANGE', 'MAX_POINTS_CHANGE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GradeHistory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GradeHistory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actorUserId": obj.get("actorUserId"),
            "gradeChangeType": obj.get("gradeChangeType"),
            "gradeTimestamp": obj.get("gradeTimestamp"),
            "maxPoints": obj.get("maxPoints"),
            "pointsEarned": obj.get("pointsEarned")
        })
        return _obj



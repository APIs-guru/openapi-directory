# coding: utf-8

"""
    Google Classroom API

    Manages classes, rosters, and invitations in Google Classroom.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.global_permission import GlobalPermission
from openapi_client.models.name import Name
from typing import Optional, Set
from typing_extensions import Self

class UserProfile(BaseModel):
    """
    Global information for a user.
    """ # noqa: E501
    email_address: Optional[StrictStr] = Field(default=None, description="Email address of the user. Must request `https://www.googleapis.com/auth/classroom.profile.emails` scope for this field to be populated in a response body. Read-only.", alias="emailAddress")
    id: Optional[StrictStr] = Field(default=None, description="Identifier of the user. Read-only.")
    name: Optional[Name] = None
    permissions: Optional[List[GlobalPermission]] = Field(default=None, description="Global permissions of the user. Read-only.")
    photo_url: Optional[StrictStr] = Field(default=None, description="URL of user's profile photo. Must request `https://www.googleapis.com/auth/classroom.profile.photos` scope for this field to be populated in a response body. Read-only.", alias="photoUrl")
    verified_teacher: Optional[StrictBool] = Field(default=None, description="Represents whether a Google Workspace for Education user's domain administrator has explicitly verified them as being a teacher. This field is always false if the user is not a member of a Google Workspace for Education domain. Read-only", alias="verifiedTeacher")
    __properties: ClassVar[List[str]] = ["emailAddress", "id", "name", "permissions", "photoUrl", "verifiedTeacher"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in permissions (list)
        _items = []
        if self.permissions:
            for _item_permissions in self.permissions:
                if _item_permissions:
                    _items.append(_item_permissions.to_dict())
            _dict['permissions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "emailAddress": obj.get("emailAddress"),
            "id": obj.get("id"),
            "name": Name.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "permissions": [GlobalPermission.from_dict(_item) for _item in obj["permissions"]] if obj.get("permissions") is not None else None,
            "photoUrl": obj.get("photoUrl"),
            "verifiedTeacher": obj.get("verifiedTeacher")
        })
        return _obj



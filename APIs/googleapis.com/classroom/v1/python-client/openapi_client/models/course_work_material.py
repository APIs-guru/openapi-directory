# coding: utf-8

"""
    Google Classroom API

    Manages classes, rosters, and invitations in Google Classroom.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.individual_students_options import IndividualStudentsOptions
from openapi_client.models.material import Material
from typing import Optional, Set
from typing_extensions import Self

class CourseWorkMaterial(BaseModel):
    """
    Course work material created by a teacher for students of the course
    """ # noqa: E501
    alternate_link: Optional[StrictStr] = Field(default=None, description="Absolute link to this course work material in the Classroom web UI. This is only populated if `state` is `PUBLISHED`. Read-only.", alias="alternateLink")
    assignee_mode: Optional[StrictStr] = Field(default=None, description="Assignee mode of the course work material. If unspecified, the default value is `ALL_STUDENTS`.", alias="assigneeMode")
    course_id: Optional[StrictStr] = Field(default=None, description="Identifier of the course. Read-only.", alias="courseId")
    creation_time: Optional[StrictStr] = Field(default=None, description="Timestamp when this course work material was created. Read-only.", alias="creationTime")
    creator_user_id: Optional[StrictStr] = Field(default=None, description="Identifier for the user that created the course work material. Read-only.", alias="creatorUserId")
    description: Optional[StrictStr] = Field(default=None, description="Optional description of this course work material. The text must be a valid UTF-8 string containing no more than 30,000 characters.")
    id: Optional[StrictStr] = Field(default=None, description="Classroom-assigned identifier of this course work material, unique per course. Read-only.")
    individual_students_options: Optional[IndividualStudentsOptions] = Field(default=None, alias="individualStudentsOptions")
    materials: Optional[List[Material]] = Field(default=None, description="Additional materials. A course work material must have no more than 20 material items.")
    scheduled_time: Optional[StrictStr] = Field(default=None, description="Optional timestamp when this course work material is scheduled to be published.", alias="scheduledTime")
    state: Optional[StrictStr] = Field(default=None, description="Status of this course work material. If unspecified, the default state is `DRAFT`.")
    title: Optional[StrictStr] = Field(default=None, description="Title of this course work material. The title must be a valid UTF-8 string containing between 1 and 3000 characters.")
    topic_id: Optional[StrictStr] = Field(default=None, description="Identifier for the topic that this course work material is associated with. Must match an existing topic in the course.", alias="topicId")
    update_time: Optional[StrictStr] = Field(default=None, description="Timestamp of the most recent change to this course work material. Read-only.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["alternateLink", "assigneeMode", "courseId", "creationTime", "creatorUserId", "description", "id", "individualStudentsOptions", "materials", "scheduledTime", "state", "title", "topicId", "updateTime"]

    @field_validator('assignee_mode')
    def assignee_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ASSIGNEE_MODE_UNSPECIFIED', 'ALL_STUDENTS', 'INDIVIDUAL_STUDENTS']):
            raise ValueError("must be one of enum values ('ASSIGNEE_MODE_UNSPECIFIED', 'ALL_STUDENTS', 'INDIVIDUAL_STUDENTS')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COURSEWORK_MATERIAL_STATE_UNSPECIFIED', 'PUBLISHED', 'DRAFT', 'DELETED']):
            raise ValueError("must be one of enum values ('COURSEWORK_MATERIAL_STATE_UNSPECIFIED', 'PUBLISHED', 'DRAFT', 'DELETED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CourseWorkMaterial from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of individual_students_options
        if self.individual_students_options:
            _dict['individualStudentsOptions'] = self.individual_students_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in materials (list)
        _items = []
        if self.materials:
            for _item_materials in self.materials:
                if _item_materials:
                    _items.append(_item_materials.to_dict())
            _dict['materials'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CourseWorkMaterial from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alternateLink": obj.get("alternateLink"),
            "assigneeMode": obj.get("assigneeMode"),
            "courseId": obj.get("courseId"),
            "creationTime": obj.get("creationTime"),
            "creatorUserId": obj.get("creatorUserId"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "individualStudentsOptions": IndividualStudentsOptions.from_dict(obj["individualStudentsOptions"]) if obj.get("individualStudentsOptions") is not None else None,
            "materials": [Material.from_dict(_item) for _item in obj["materials"]] if obj.get("materials") is not None else None,
            "scheduledTime": obj.get("scheduledTime"),
            "state": obj.get("state"),
            "title": obj.get("title"),
            "topicId": obj.get("topicId"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Google Classroom API

    Manages classes, rosters, and invitations in Google Classroom.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.course_material_set import CourseMaterialSet
from openapi_client.models.drive_folder import DriveFolder
from openapi_client.models.gradebook_settings import GradebookSettings
from typing import Optional, Set
from typing_extensions import Self

class Course(BaseModel):
    """
    A Course in Classroom.
    """ # noqa: E501
    alternate_link: Optional[StrictStr] = Field(default=None, description="Absolute link to this course in the Classroom web UI. Read-only.", alias="alternateLink")
    calendar_id: Optional[StrictStr] = Field(default=None, description="The Calendar ID for a calendar that all course members can see, to which Classroom adds events for course work and announcements in the course. The Calendar for a course is created asynchronously when the course is set to `CourseState.ACTIVE` for the first time (at creation time or when it is updated to `ACTIVE` through the UI or the API). The Calendar ID will not be populated until the creation process is completed. Read-only.", alias="calendarId")
    course_group_email: Optional[StrictStr] = Field(default=None, description="The email address of a Google group containing all members of the course. This group does not accept email and can only be used for permissions. Read-only.", alias="courseGroupEmail")
    course_material_sets: Optional[List[CourseMaterialSet]] = Field(default=None, description="Sets of materials that appear on the \"about\" page of this course. Read-only.", alias="courseMaterialSets")
    course_state: Optional[StrictStr] = Field(default=None, description="State of the course. If unspecified, the default state is `PROVISIONED`.", alias="courseState")
    creation_time: Optional[StrictStr] = Field(default=None, description="Creation time of the course. Specifying this field in a course update mask results in an error. Read-only.", alias="creationTime")
    description: Optional[StrictStr] = Field(default=None, description="Optional description. For example, \"We'll be learning about the structure of living creatures from a combination of textbooks, guest lectures, and lab work. Expect to be excited!\" If set, this field must be a valid UTF-8 string and no longer than 30,000 characters.")
    description_heading: Optional[StrictStr] = Field(default=None, description="Optional heading for the description. For example, \"Welcome to 10th Grade Biology.\" If set, this field must be a valid UTF-8 string and no longer than 3600 characters.", alias="descriptionHeading")
    enrollment_code: Optional[StrictStr] = Field(default=None, description="Enrollment code to use when joining this course. Specifying this field in a course update mask results in an error. Read-only.", alias="enrollmentCode")
    gradebook_settings: Optional[GradebookSettings] = Field(default=None, alias="gradebookSettings")
    guardians_enabled: Optional[StrictBool] = Field(default=None, description="Whether or not guardian notifications are enabled for this course. Read-only.", alias="guardiansEnabled")
    id: Optional[StrictStr] = Field(default=None, description="Identifier for this course assigned by Classroom. When creating a course, you may optionally set this identifier to an alias string in the request to create a corresponding alias. The `id` is still assigned by Classroom and cannot be updated after the course is created. Specifying this field in a course update mask results in an error.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the course. For example, \"10th Grade Biology\". The name is required. It must be between 1 and 750 characters and a valid UTF-8 string.")
    owner_id: Optional[StrictStr] = Field(default=None, description="The identifier of the owner of a course. When specified as a parameter of a create course request, this field is required. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `\"me\"`, indicating the requesting user This must be set in a create request. Admins can also specify this field in a patch course request to transfer ownership. In other contexts, it is read-only.", alias="ownerId")
    room: Optional[StrictStr] = Field(default=None, description="Optional room location. For example, \"301\". If set, this field must be a valid UTF-8 string and no longer than 650 characters.")
    section: Optional[StrictStr] = Field(default=None, description="Section of the course. For example, \"Period 2\". If set, this field must be a valid UTF-8 string and no longer than 2800 characters.")
    teacher_folder: Optional[DriveFolder] = Field(default=None, alias="teacherFolder")
    teacher_group_email: Optional[StrictStr] = Field(default=None, description="The email address of a Google group containing all teachers of the course. This group does not accept email and can only be used for permissions. Read-only.", alias="teacherGroupEmail")
    update_time: Optional[StrictStr] = Field(default=None, description="Time of the most recent update to this course. Specifying this field in a course update mask results in an error. Read-only.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["alternateLink", "calendarId", "courseGroupEmail", "courseMaterialSets", "courseState", "creationTime", "description", "descriptionHeading", "enrollmentCode", "gradebookSettings", "guardiansEnabled", "id", "name", "ownerId", "room", "section", "teacherFolder", "teacherGroupEmail", "updateTime"]

    @field_validator('course_state')
    def course_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COURSE_STATE_UNSPECIFIED', 'ACTIVE', 'ARCHIVED', 'PROVISIONED', 'DECLINED', 'SUSPENDED']):
            raise ValueError("must be one of enum values ('COURSE_STATE_UNSPECIFIED', 'ACTIVE', 'ARCHIVED', 'PROVISIONED', 'DECLINED', 'SUSPENDED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Course from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in course_material_sets (list)
        _items = []
        if self.course_material_sets:
            for _item_course_material_sets in self.course_material_sets:
                if _item_course_material_sets:
                    _items.append(_item_course_material_sets.to_dict())
            _dict['courseMaterialSets'] = _items
        # override the default output from pydantic by calling `to_dict()` of gradebook_settings
        if self.gradebook_settings:
            _dict['gradebookSettings'] = self.gradebook_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of teacher_folder
        if self.teacher_folder:
            _dict['teacherFolder'] = self.teacher_folder.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Course from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alternateLink": obj.get("alternateLink"),
            "calendarId": obj.get("calendarId"),
            "courseGroupEmail": obj.get("courseGroupEmail"),
            "courseMaterialSets": [CourseMaterialSet.from_dict(_item) for _item in obj["courseMaterialSets"]] if obj.get("courseMaterialSets") is not None else None,
            "courseState": obj.get("courseState"),
            "creationTime": obj.get("creationTime"),
            "description": obj.get("description"),
            "descriptionHeading": obj.get("descriptionHeading"),
            "enrollmentCode": obj.get("enrollmentCode"),
            "gradebookSettings": GradebookSettings.from_dict(obj["gradebookSettings"]) if obj.get("gradebookSettings") is not None else None,
            "guardiansEnabled": obj.get("guardiansEnabled"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "ownerId": obj.get("ownerId"),
            "room": obj.get("room"),
            "section": obj.get("section"),
            "teacherFolder": DriveFolder.from_dict(obj["teacherFolder"]) if obj.get("teacherFolder") is not None else None,
            "teacherGroupEmail": obj.get("teacherGroupEmail"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



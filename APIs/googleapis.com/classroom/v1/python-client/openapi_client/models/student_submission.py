# coding: utf-8

"""
    Google Classroom API

    Manages classes, rosters, and invitations in Google Classroom.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.assignment_submission import AssignmentSubmission
from openapi_client.models.multiple_choice_submission import MultipleChoiceSubmission
from openapi_client.models.short_answer_submission import ShortAnswerSubmission
from openapi_client.models.submission_history import SubmissionHistory
from typing import Optional, Set
from typing_extensions import Self

class StudentSubmission(BaseModel):
    """
    Student submission for course work. `StudentSubmission` items are generated when a `CourseWork` item is created. Student submissions that have never been accessed (i.e. with `state` = NEW) may not have a creation time or update time.
    """ # noqa: E501
    alternate_link: Optional[StrictStr] = Field(default=None, description="Absolute link to the submission in the Classroom web UI. Read-only.", alias="alternateLink")
    assigned_grade: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional grade. If unset, no grade was set. This value must be non-negative. Decimal (that is, non-integer) values are allowed, but are rounded to two decimal places. This may be modified only by course teachers.", alias="assignedGrade")
    assignment_submission: Optional[AssignmentSubmission] = Field(default=None, alias="assignmentSubmission")
    associated_with_developer: Optional[StrictBool] = Field(default=None, description="Whether this student submission is associated with the Developer Console project making the request. See CreateCourseWork for more details. Read-only.", alias="associatedWithDeveloper")
    course_id: Optional[StrictStr] = Field(default=None, description="Identifier of the course. Read-only.", alias="courseId")
    course_work_id: Optional[StrictStr] = Field(default=None, description="Identifier for the course work this corresponds to. Read-only.", alias="courseWorkId")
    course_work_type: Optional[StrictStr] = Field(default=None, description="Type of course work this submission is for. Read-only.", alias="courseWorkType")
    creation_time: Optional[StrictStr] = Field(default=None, description="Creation time of this submission. This may be unset if the student has not accessed this item. Read-only.", alias="creationTime")
    draft_grade: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional pending grade. If unset, no grade was set. This value must be non-negative. Decimal (that is, non-integer) values are allowed, but are rounded to two decimal places. This is only visible to and modifiable by course teachers.", alias="draftGrade")
    id: Optional[StrictStr] = Field(default=None, description="Classroom-assigned Identifier for the student submission. This is unique among submissions for the relevant course work. Read-only.")
    late: Optional[StrictBool] = Field(default=None, description="Whether this submission is late. Read-only.")
    multiple_choice_submission: Optional[MultipleChoiceSubmission] = Field(default=None, alias="multipleChoiceSubmission")
    short_answer_submission: Optional[ShortAnswerSubmission] = Field(default=None, alias="shortAnswerSubmission")
    state: Optional[StrictStr] = Field(default=None, description="State of this submission. Read-only.")
    submission_history: Optional[List[SubmissionHistory]] = Field(default=None, description="The history of the submission (includes state and grade histories). Read-only.", alias="submissionHistory")
    update_time: Optional[StrictStr] = Field(default=None, description="Last update time of this submission. This may be unset if the student has not accessed this item. Read-only.", alias="updateTime")
    user_id: Optional[StrictStr] = Field(default=None, description="Identifier for the student that owns this submission. Read-only.", alias="userId")
    __properties: ClassVar[List[str]] = ["alternateLink", "assignedGrade", "assignmentSubmission", "associatedWithDeveloper", "courseId", "courseWorkId", "courseWorkType", "creationTime", "draftGrade", "id", "late", "multipleChoiceSubmission", "shortAnswerSubmission", "state", "submissionHistory", "updateTime", "userId"]

    @field_validator('course_work_type')
    def course_work_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COURSE_WORK_TYPE_UNSPECIFIED', 'ASSIGNMENT', 'SHORT_ANSWER_QUESTION', 'MULTIPLE_CHOICE_QUESTION']):
            raise ValueError("must be one of enum values ('COURSE_WORK_TYPE_UNSPECIFIED', 'ASSIGNMENT', 'SHORT_ANSWER_QUESTION', 'MULTIPLE_CHOICE_QUESTION')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SUBMISSION_STATE_UNSPECIFIED', 'NEW', 'CREATED', 'TURNED_IN', 'RETURNED', 'RECLAIMED_BY_STUDENT']):
            raise ValueError("must be one of enum values ('SUBMISSION_STATE_UNSPECIFIED', 'NEW', 'CREATED', 'TURNED_IN', 'RETURNED', 'RECLAIMED_BY_STUDENT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StudentSubmission from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of assignment_submission
        if self.assignment_submission:
            _dict['assignmentSubmission'] = self.assignment_submission.to_dict()
        # override the default output from pydantic by calling `to_dict()` of multiple_choice_submission
        if self.multiple_choice_submission:
            _dict['multipleChoiceSubmission'] = self.multiple_choice_submission.to_dict()
        # override the default output from pydantic by calling `to_dict()` of short_answer_submission
        if self.short_answer_submission:
            _dict['shortAnswerSubmission'] = self.short_answer_submission.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in submission_history (list)
        _items = []
        if self.submission_history:
            for _item_submission_history in self.submission_history:
                if _item_submission_history:
                    _items.append(_item_submission_history.to_dict())
            _dict['submissionHistory'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StudentSubmission from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alternateLink": obj.get("alternateLink"),
            "assignedGrade": obj.get("assignedGrade"),
            "assignmentSubmission": AssignmentSubmission.from_dict(obj["assignmentSubmission"]) if obj.get("assignmentSubmission") is not None else None,
            "associatedWithDeveloper": obj.get("associatedWithDeveloper"),
            "courseId": obj.get("courseId"),
            "courseWorkId": obj.get("courseWorkId"),
            "courseWorkType": obj.get("courseWorkType"),
            "creationTime": obj.get("creationTime"),
            "draftGrade": obj.get("draftGrade"),
            "id": obj.get("id"),
            "late": obj.get("late"),
            "multipleChoiceSubmission": MultipleChoiceSubmission.from_dict(obj["multipleChoiceSubmission"]) if obj.get("multipleChoiceSubmission") is not None else None,
            "shortAnswerSubmission": ShortAnswerSubmission.from_dict(obj["shortAnswerSubmission"]) if obj.get("shortAnswerSubmission") is not None else None,
            "state": obj.get("state"),
            "submissionHistory": [SubmissionHistory.from_dict(_item) for _item in obj["submissionHistory"]] if obj.get("submissionHistory") is not None else None,
            "updateTime": obj.get("updateTime"),
            "userId": obj.get("userId")
        })
        return _obj



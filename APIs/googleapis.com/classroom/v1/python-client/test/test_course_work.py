# coding: utf-8

"""
    Google Classroom API

    Manages classes, rosters, and invitations in Google Classroom.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.course_work import CourseWork

class TestCourseWork(unittest.TestCase):
    """CourseWork unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CourseWork:
        """Test CourseWork
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CourseWork`
        """
        model = CourseWork()
        if include_optional:
            return CourseWork(
                alternate_link = '',
                assignee_mode = 'ASSIGNEE_MODE_UNSPECIFIED',
                assignment = openapi_client.models.assignment.Assignment(
                    student_work_folder = openapi_client.models.drive_folder.DriveFolder(
                        alternate_link = '', 
                        id = '', 
                        title = '', ), ),
                associated_with_developer = True,
                course_id = '',
                creation_time = '',
                creator_user_id = '',
                description = '',
                due_date = openapi_client.models.date.Date(
                    day = 56, 
                    month = 56, 
                    year = 56, ),
                due_time = openapi_client.models.time_of_day.TimeOfDay(
                    hours = 56, 
                    minutes = 56, 
                    nanos = 56, 
                    seconds = 56, ),
                grade_category = openapi_client.models.grade_category.GradeCategory(
                    default_grade_denominator = 56, 
                    id = '', 
                    name = '', 
                    weight = 56, ),
                id = '',
                individual_students_options = openapi_client.models.individual_students_options.IndividualStudentsOptions(
                    student_ids = [
                        ''
                        ], ),
                materials = [
                    openapi_client.models.material.Material(
                        drive_file = openapi_client.models.shared_drive_file.SharedDriveFile(
                            share_mode = 'UNKNOWN_SHARE_MODE', ), 
                        form = openapi_client.models.form.Form(
                            form_url = '', 
                            response_url = '', 
                            thumbnail_url = '', 
                            title = '', ), 
                        link = openapi_client.models.link.Link(
                            thumbnail_url = '', 
                            title = '', 
                            url = '', ), 
                        youtube_video = openapi_client.models.you_tube_video.YouTubeVideo(
                            alternate_link = '', 
                            id = '', 
                            thumbnail_url = '', 
                            title = '', ), )
                    ],
                max_points = 1.337,
                multiple_choice_question = openapi_client.models.multiple_choice_question.MultipleChoiceQuestion(
                    choices = [
                        ''
                        ], ),
                scheduled_time = '',
                state = 'COURSE_WORK_STATE_UNSPECIFIED',
                submission_modification_mode = 'SUBMISSION_MODIFICATION_MODE_UNSPECIFIED',
                title = '',
                topic_id = '',
                update_time = '',
                work_type = 'COURSE_WORK_TYPE_UNSPECIFIED'
            )
        else:
            return CourseWork(
        )
        """

    def testCourseWork(self):
        """Test CourseWork"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

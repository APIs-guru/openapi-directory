# coding: utf-8

"""
    Google Classroom API

    Manages classes, rosters, and invitations in Google Classroom.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.student_submission import StudentSubmission

class TestStudentSubmission(unittest.TestCase):
    """StudentSubmission unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> StudentSubmission:
        """Test StudentSubmission
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `StudentSubmission`
        """
        model = StudentSubmission()
        if include_optional:
            return StudentSubmission(
                alternate_link = '',
                assigned_grade = 1.337,
                assignment_submission = openapi_client.models.assignment_submission.AssignmentSubmission(
                    attachments = [
                        openapi_client.models.attachment.Attachment(
                            drive_file = openapi_client.models.drive_file.DriveFile(
                                alternate_link = '', 
                                id = '', 
                                thumbnail_url = '', 
                                title = '', ), 
                            form = openapi_client.models.form.Form(
                                form_url = '', 
                                response_url = '', 
                                thumbnail_url = '', 
                                title = '', ), 
                            link = openapi_client.models.link.Link(
                                thumbnail_url = '', 
                                title = '', 
                                url = '', ), 
                            you_tube_video = openapi_client.models.you_tube_video.YouTubeVideo(
                                alternate_link = '', 
                                id = '', 
                                thumbnail_url = '', 
                                title = '', ), )
                        ], ),
                associated_with_developer = True,
                course_id = '',
                course_work_id = '',
                course_work_type = 'COURSE_WORK_TYPE_UNSPECIFIED',
                creation_time = '',
                draft_grade = 1.337,
                id = '',
                late = True,
                multiple_choice_submission = openapi_client.models.multiple_choice_submission.MultipleChoiceSubmission(
                    answer = '', ),
                short_answer_submission = openapi_client.models.short_answer_submission.ShortAnswerSubmission(
                    answer = '', ),
                state = 'SUBMISSION_STATE_UNSPECIFIED',
                submission_history = [
                    openapi_client.models.submission_history.SubmissionHistory(
                        grade_history = openapi_client.models.grade_history.GradeHistory(
                            actor_user_id = '', 
                            grade_change_type = 'UNKNOWN_GRADE_CHANGE_TYPE', 
                            grade_timestamp = '', 
                            max_points = 1.337, 
                            points_earned = 1.337, ), 
                        state_history = openapi_client.models.state_history.StateHistory(
                            actor_user_id = '', 
                            state = 'STATE_UNSPECIFIED', 
                            state_timestamp = '', ), )
                    ],
                update_time = '',
                user_id = ''
            )
        else:
            return StudentSubmission(
        )
        """

    def testStudentSubmission(self):
        """Test StudentSubmission"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

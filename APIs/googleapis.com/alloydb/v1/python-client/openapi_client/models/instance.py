# coding: utf-8

"""
    AlloyDB API

    AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.client_connection_config import ClientConnectionConfig
from openapi_client.models.machine_config import MachineConfig
from openapi_client.models.node import Node
from openapi_client.models.query_insights_instance_config import QueryInsightsInstanceConfig
from openapi_client.models.read_pool_config import ReadPoolConfig
from typing import Optional, Set
from typing_extensions import Self

class Instance(BaseModel):
    """
    An Instance is a computing unit that an end customer can connect to. It's the main unit of computing resources in AlloyDB.
    """ # noqa: E501
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128")
    availability_type: Optional[StrictStr] = Field(default=None, description="Availability type of an Instance. If empty, defaults to REGIONAL for primary instances. For read pools, availability_type is always UNSPECIFIED. Instances in the read pools are evenly distributed across available zones within the region (i.e. read pools with more than one node will have a node in at least two zones).", alias="availabilityType")
    client_connection_config: Optional[ClientConnectionConfig] = Field(default=None, alias="clientConnectionConfig")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Create time stamp", alias="createTime")
    database_flags: Optional[Dict[str, StrictStr]] = Field(default=None, description="Database flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary. This is a list of \"key\": \"value\" pairs. \"key\": The name of the flag. These flags are passed at instance setup time, so include both server options and system variables for Postgres. Flags are specified with underscores, not hyphens. \"value\": The value of the flag. Booleans are set to **on** for true and **off** for false. This field must be omitted if the flag doesn't take a value.", alias="databaseFlags")
    delete_time: Optional[StrictStr] = Field(default=None, description="Output only. Delete time stamp", alias="deleteTime")
    display_name: Optional[StrictStr] = Field(default=None, description="User-settable and human-readable display name for the Instance.", alias="displayName")
    etag: Optional[StrictStr] = Field(default=None, description="For Resource freshness validation (https://google.aip.dev/154)")
    gce_zone: Optional[StrictStr] = Field(default=None, description="The Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.", alias="gceZone")
    instance_type: Optional[StrictStr] = Field(default=None, description="Required. The type of the instance. Specified at creation time.", alias="instanceType")
    ip_address: Optional[StrictStr] = Field(default=None, description="Output only. The IP address for the Instance. This is the connection endpoint for an end-user application.", alias="ipAddress")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels as key value pairs")
    machine_config: Optional[MachineConfig] = Field(default=None, alias="machineConfig")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The name of the instance resource with the format: * projects/{project}/locations/{region}/clusters/{cluster_id}/instances/{instance_id} where the cluster and instance ID segments should satisfy the regex expression `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`, e.g. 1-63 characters of lowercase letters, numbers, and dashes, starting with a letter, and ending with a letter or number. For more details see https://google.aip.dev/122. The prefix of the instance resource name is the name of the parent resource: * projects/{project}/locations/{region}/clusters/{cluster_id}")
    nodes: Optional[List[Node]] = Field(default=None, description="Output only. List of available read-only VMs in this instance, including the standby for a PRIMARY instance.")
    query_insights_config: Optional[QueryInsightsInstanceConfig] = Field(default=None, alias="queryInsightsConfig")
    read_pool_config: Optional[ReadPoolConfig] = Field(default=None, alias="readPoolConfig")
    reconciling: Optional[StrictBool] = Field(default=None, description="Output only. Reconciling (https://google.aip.dev/128#reconciliation). Set to true if the current state of Instance does not match the user's intended state, and the service is actively updating the resource to reconcile them. This can happen due to user-triggered updates or system actions like failover or maintenance.")
    satisfies_pzs: Optional[StrictBool] = Field(default=None, description="Output only. Reserved for future use.", alias="satisfiesPzs")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current serving state of the instance.")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Update time stamp", alias="updateTime")
    writable_node: Optional[Node] = Field(default=None, alias="writableNode")
    __properties: ClassVar[List[str]] = ["annotations", "availabilityType", "clientConnectionConfig", "createTime", "databaseFlags", "deleteTime", "displayName", "etag", "gceZone", "instanceType", "ipAddress", "labels", "machineConfig", "name", "nodes", "queryInsightsConfig", "readPoolConfig", "reconciling", "satisfiesPzs", "state", "uid", "updateTime", "writableNode"]

    @field_validator('availability_type')
    def availability_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AVAILABILITY_TYPE_UNSPECIFIED', 'ZONAL', 'REGIONAL']):
            raise ValueError("must be one of enum values ('AVAILABILITY_TYPE_UNSPECIFIED', 'ZONAL', 'REGIONAL')")
        return value

    @field_validator('instance_type')
    def instance_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INSTANCE_TYPE_UNSPECIFIED', 'PRIMARY', 'READ_POOL', 'SECONDARY']):
            raise ValueError("must be one of enum values ('INSTANCE_TYPE_UNSPECIFIED', 'PRIMARY', 'READ_POOL', 'SECONDARY')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'READY', 'STOPPED', 'CREATING', 'DELETING', 'MAINTENANCE', 'FAILED', 'BOOTSTRAPPING', 'PROMOTING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'READY', 'STOPPED', 'CREATING', 'DELETING', 'MAINTENANCE', 'FAILED', 'BOOTSTRAPPING', 'PROMOTING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Instance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "delete_time",
            "ip_address",
            "name",
            "nodes",
            "reconciling",
            "satisfies_pzs",
            "state",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client_connection_config
        if self.client_connection_config:
            _dict['clientConnectionConfig'] = self.client_connection_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of machine_config
        if self.machine_config:
            _dict['machineConfig'] = self.machine_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in nodes (list)
        _items = []
        if self.nodes:
            for _item_nodes in self.nodes:
                if _item_nodes:
                    _items.append(_item_nodes.to_dict())
            _dict['nodes'] = _items
        # override the default output from pydantic by calling `to_dict()` of query_insights_config
        if self.query_insights_config:
            _dict['queryInsightsConfig'] = self.query_insights_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of read_pool_config
        if self.read_pool_config:
            _dict['readPoolConfig'] = self.read_pool_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of writable_node
        if self.writable_node:
            _dict['writableNode'] = self.writable_node.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Instance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "availabilityType": obj.get("availabilityType"),
            "clientConnectionConfig": ClientConnectionConfig.from_dict(obj["clientConnectionConfig"]) if obj.get("clientConnectionConfig") is not None else None,
            "createTime": obj.get("createTime"),
            "databaseFlags": obj.get("databaseFlags"),
            "deleteTime": obj.get("deleteTime"),
            "displayName": obj.get("displayName"),
            "etag": obj.get("etag"),
            "gceZone": obj.get("gceZone"),
            "instanceType": obj.get("instanceType"),
            "ipAddress": obj.get("ipAddress"),
            "labels": obj.get("labels"),
            "machineConfig": MachineConfig.from_dict(obj["machineConfig"]) if obj.get("machineConfig") is not None else None,
            "name": obj.get("name"),
            "nodes": [Node.from_dict(_item) for _item in obj["nodes"]] if obj.get("nodes") is not None else None,
            "queryInsightsConfig": QueryInsightsInstanceConfig.from_dict(obj["queryInsightsConfig"]) if obj.get("queryInsightsConfig") is not None else None,
            "readPoolConfig": ReadPoolConfig.from_dict(obj["readPoolConfig"]) if obj.get("readPoolConfig") is not None else None,
            "reconciling": obj.get("reconciling"),
            "satisfiesPzs": obj.get("satisfiesPzs"),
            "state": obj.get("state"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime"),
            "writableNode": Node.from_dict(obj["writableNode"]) if obj.get("writableNode") is not None else None
        })
        return _obj



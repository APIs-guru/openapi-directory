# coding: utf-8

"""
    AlloyDB API

    AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.integer_restrictions import IntegerRestrictions
from openapi_client.models.string_restrictions import StringRestrictions
from typing import Optional, Set
from typing_extensions import Self

class SupportedDatabaseFlag(BaseModel):
    """
    SupportedDatabaseFlag gives general information about a database flag, like type and allowed values. This is a static value that is defined on the server side, and it cannot be modified by callers. To set the Database flags on a particular Instance, a caller should modify the Instance.database_flags field.
    """ # noqa: E501
    accepts_multiple_values: Optional[StrictBool] = Field(default=None, description="Whether the database flag accepts multiple values. If true, a comma-separated list of stringified values may be specified.", alias="acceptsMultipleValues")
    flag_name: Optional[StrictStr] = Field(default=None, description="The name of the database flag, e.g. \"max_allowed_packets\". The is a possibly key for the Instance.database_flags map field.", alias="flagName")
    integer_restrictions: Optional[IntegerRestrictions] = Field(default=None, alias="integerRestrictions")
    name: Optional[StrictStr] = Field(default=None, description="The name of the flag resource, following Google Cloud conventions, e.g.: * projects/{project}/locations/{location}/flags/{flag} This field currently has no semantic meaning.")
    requires_db_restart: Optional[StrictBool] = Field(default=None, description="Whether setting or updating this flag on an Instance requires a database restart. If a flag that requires database restart is set, the backend will automatically restart the database (making sure to satisfy any availability SLO's).", alias="requiresDbRestart")
    string_restrictions: Optional[StringRestrictions] = Field(default=None, alias="stringRestrictions")
    supported_db_versions: Optional[List[StrictStr]] = Field(default=None, description="Major database engine versions for which this flag is supported.", alias="supportedDbVersions")
    value_type: Optional[StrictStr] = Field(default=None, alias="valueType")
    __properties: ClassVar[List[str]] = ["acceptsMultipleValues", "flagName", "integerRestrictions", "name", "requiresDbRestart", "stringRestrictions", "supportedDbVersions", "valueType"]

    @field_validator('supported_db_versions')
    def supported_db_versions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['DATABASE_VERSION_UNSPECIFIED', 'POSTGRES_13', 'POSTGRES_14', 'POSTGRES_15']):
                raise ValueError("each list item must be one of ('DATABASE_VERSION_UNSPECIFIED', 'POSTGRES_13', 'POSTGRES_14', 'POSTGRES_15')")
        return value

    @field_validator('value_type')
    def value_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VALUE_TYPE_UNSPECIFIED', 'STRING', 'INTEGER', 'FLOAT', 'NONE']):
            raise ValueError("must be one of enum values ('VALUE_TYPE_UNSPECIFIED', 'STRING', 'INTEGER', 'FLOAT', 'NONE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupportedDatabaseFlag from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of integer_restrictions
        if self.integer_restrictions:
            _dict['integerRestrictions'] = self.integer_restrictions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of string_restrictions
        if self.string_restrictions:
            _dict['stringRestrictions'] = self.string_restrictions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupportedDatabaseFlag from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acceptsMultipleValues": obj.get("acceptsMultipleValues"),
            "flagName": obj.get("flagName"),
            "integerRestrictions": IntegerRestrictions.from_dict(obj["integerRestrictions"]) if obj.get("integerRestrictions") is not None else None,
            "name": obj.get("name"),
            "requiresDbRestart": obj.get("requiresDbRestart"),
            "stringRestrictions": StringRestrictions.from_dict(obj["stringRestrictions"]) if obj.get("stringRestrictions") is not None else None,
            "supportedDbVersions": obj.get("supportedDbVersions"),
            "valueType": obj.get("valueType")
        })
        return _obj



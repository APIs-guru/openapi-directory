# coding: utf-8

"""
    AlloyDB API

    AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.storage_databasecenter_partnerapi_v1main_availability_configuration import StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration
from openapi_client.models.storage_databasecenter_partnerapi_v1main_backup_configuration import StorageDatabasecenterPartnerapiV1mainBackupConfiguration
from openapi_client.models.storage_databasecenter_partnerapi_v1main_backup_run import StorageDatabasecenterPartnerapiV1mainBackupRun
from openapi_client.models.storage_databasecenter_partnerapi_v1main_custom_metadata_data import StorageDatabasecenterPartnerapiV1mainCustomMetadataData
from openapi_client.models.storage_databasecenter_partnerapi_v1main_database_resource_id import StorageDatabasecenterPartnerapiV1mainDatabaseResourceId
from openapi_client.models.storage_databasecenter_partnerapi_v1main_entitlement import StorageDatabasecenterPartnerapiV1mainEntitlement
from openapi_client.models.storage_databasecenter_proto_common_product import StorageDatabasecenterProtoCommonProduct
from typing import Optional, Set
from typing_extensions import Self

class StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata(BaseModel):
    """
    Common model for database resource instance metadata.
    """ # noqa: E501
    availability_configuration: Optional[StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration] = Field(default=None, alias="availabilityConfiguration")
    backup_configuration: Optional[StorageDatabasecenterPartnerapiV1mainBackupConfiguration] = Field(default=None, alias="backupConfiguration")
    backup_run: Optional[StorageDatabasecenterPartnerapiV1mainBackupRun] = Field(default=None, alias="backupRun")
    creation_time: Optional[StrictStr] = Field(default=None, description="The creation time of the resource, i.e. the time when resource is created and recorded in partner service.", alias="creationTime")
    current_state: Optional[StrictStr] = Field(default=None, description="Current state of the instance.", alias="currentState")
    custom_metadata: Optional[StorageDatabasecenterPartnerapiV1mainCustomMetadataData] = Field(default=None, alias="customMetadata")
    entitlements: Optional[List[StorageDatabasecenterPartnerapiV1mainEntitlement]] = Field(default=None, description="Entitlements associated with the resource")
    expected_state: Optional[StrictStr] = Field(default=None, description="The state that the instance is expected to be in. For example, an instance state can transition to UNHEALTHY due to wrong patch update, while the expected state will remain at the HEALTHY.", alias="expectedState")
    id: Optional[StorageDatabasecenterPartnerapiV1mainDatabaseResourceId] = None
    instance_type: Optional[StrictStr] = Field(default=None, description="The type of the instance. Specified at creation time.", alias="instanceType")
    location: Optional[StrictStr] = Field(default=None, description="The resource location. REQUIRED")
    primary_resource_id: Optional[StorageDatabasecenterPartnerapiV1mainDatabaseResourceId] = Field(default=None, alias="primaryResourceId")
    product: Optional[StorageDatabasecenterProtoCommonProduct] = None
    resource_container: Optional[StrictStr] = Field(default=None, description="Closest parent Cloud Resource Manager container of this resource. It must be resource name of a Cloud Resource Manager project with the format of \"/\", such as \"projects/123\". For GCP provided resources, number should be project number.", alias="resourceContainer")
    resource_name: Optional[StrictStr] = Field(default=None, description="Required. Different from DatabaseResourceId.unique_id, a resource name can be reused over time. That is, after a resource named \"ABC\" is deleted, the name \"ABC\" can be used to to create a new resource within the same source. Resource name to follow CAIS resource_name format as noted here go/condor-common-datamodel", alias="resourceName")
    updation_time: Optional[StrictStr] = Field(default=None, description="The time at which the resource was updated and recorded at partner service.", alias="updationTime")
    user_labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="User-provided labels, represented as a dictionary where each label is a single key value pair.", alias="userLabels")
    __properties: ClassVar[List[str]] = ["availabilityConfiguration", "backupConfiguration", "backupRun", "creationTime", "currentState", "customMetadata", "entitlements", "expectedState", "id", "instanceType", "location", "primaryResourceId", "product", "resourceContainer", "resourceName", "updationTime", "userLabels"]

    @field_validator('current_state')
    def current_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'HEALTHY', 'UNHEALTHY', 'SUSPENDED', 'DELETED', 'STATE_OTHER']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'HEALTHY', 'UNHEALTHY', 'SUSPENDED', 'DELETED', 'STATE_OTHER')")
        return value

    @field_validator('expected_state')
    def expected_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'HEALTHY', 'UNHEALTHY', 'SUSPENDED', 'DELETED', 'STATE_OTHER']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'HEALTHY', 'UNHEALTHY', 'SUSPENDED', 'DELETED', 'STATE_OTHER')")
        return value

    @field_validator('instance_type')
    def instance_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INSTANCE_TYPE_UNSPECIFIED', 'SUB_RESOURCE_TYPE_UNSPECIFIED', 'PRIMARY', 'SECONDARY', 'READ_REPLICA', 'OTHER', 'SUB_RESOURCE_TYPE_PRIMARY', 'SUB_RESOURCE_TYPE_SECONDARY', 'SUB_RESOURCE_TYPE_READ_REPLICA', 'SUB_RESOURCE_TYPE_OTHER']):
            raise ValueError("must be one of enum values ('INSTANCE_TYPE_UNSPECIFIED', 'SUB_RESOURCE_TYPE_UNSPECIFIED', 'PRIMARY', 'SECONDARY', 'READ_REPLICA', 'OTHER', 'SUB_RESOURCE_TYPE_PRIMARY', 'SUB_RESOURCE_TYPE_SECONDARY', 'SUB_RESOURCE_TYPE_READ_REPLICA', 'SUB_RESOURCE_TYPE_OTHER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of availability_configuration
        if self.availability_configuration:
            _dict['availabilityConfiguration'] = self.availability_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of backup_configuration
        if self.backup_configuration:
            _dict['backupConfiguration'] = self.backup_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of backup_run
        if self.backup_run:
            _dict['backupRun'] = self.backup_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_metadata
        if self.custom_metadata:
            _dict['customMetadata'] = self.custom_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in entitlements (list)
        _items = []
        if self.entitlements:
            for _item_entitlements in self.entitlements:
                if _item_entitlements:
                    _items.append(_item_entitlements.to_dict())
            _dict['entitlements'] = _items
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of primary_resource_id
        if self.primary_resource_id:
            _dict['primaryResourceId'] = self.primary_resource_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['product'] = self.product.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availabilityConfiguration": StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration.from_dict(obj["availabilityConfiguration"]) if obj.get("availabilityConfiguration") is not None else None,
            "backupConfiguration": StorageDatabasecenterPartnerapiV1mainBackupConfiguration.from_dict(obj["backupConfiguration"]) if obj.get("backupConfiguration") is not None else None,
            "backupRun": StorageDatabasecenterPartnerapiV1mainBackupRun.from_dict(obj["backupRun"]) if obj.get("backupRun") is not None else None,
            "creationTime": obj.get("creationTime"),
            "currentState": obj.get("currentState"),
            "customMetadata": StorageDatabasecenterPartnerapiV1mainCustomMetadataData.from_dict(obj["customMetadata"]) if obj.get("customMetadata") is not None else None,
            "entitlements": [StorageDatabasecenterPartnerapiV1mainEntitlement.from_dict(_item) for _item in obj["entitlements"]] if obj.get("entitlements") is not None else None,
            "expectedState": obj.get("expectedState"),
            "id": StorageDatabasecenterPartnerapiV1mainDatabaseResourceId.from_dict(obj["id"]) if obj.get("id") is not None else None,
            "instanceType": obj.get("instanceType"),
            "location": obj.get("location"),
            "primaryResourceId": StorageDatabasecenterPartnerapiV1mainDatabaseResourceId.from_dict(obj["primaryResourceId"]) if obj.get("primaryResourceId") is not None else None,
            "product": StorageDatabasecenterProtoCommonProduct.from_dict(obj["product"]) if obj.get("product") is not None else None,
            "resourceContainer": obj.get("resourceContainer"),
            "resourceName": obj.get("resourceName"),
            "updationTime": obj.get("updationTime"),
            "userLabels": obj.get("userLabels")
        })
        return _obj



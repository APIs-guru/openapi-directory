# coding: utf-8

"""
    AlloyDB API

    AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.encryption_info import EncryptionInfo
from typing import Optional, Set
from typing_extensions import Self

class ContinuousBackupInfo(BaseModel):
    """
    ContinuousBackupInfo describes the continuous backup properties of a cluster.
    """ # noqa: E501
    earliest_restorable_time: Optional[StrictStr] = Field(default=None, description="Output only. The earliest restorable time that can be restored to. Output only field.", alias="earliestRestorableTime")
    enabled_time: Optional[StrictStr] = Field(default=None, description="Output only. When ContinuousBackup was most recently enabled. Set to null if ContinuousBackup is not enabled.", alias="enabledTime")
    encryption_info: Optional[EncryptionInfo] = Field(default=None, alias="encryptionInfo")
    schedule: Optional[List[StrictStr]] = Field(default=None, description="Output only. Days of the week on which a continuous backup is taken. Output only field. Ignored if passed into the request.")
    __properties: ClassVar[List[str]] = ["earliestRestorableTime", "enabledTime", "encryptionInfo", "schedule"]

    @field_validator('schedule')
    def schedule_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['DAY_OF_WEEK_UNSPECIFIED', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY']):
                raise ValueError("each list item must be one of ('DAY_OF_WEEK_UNSPECIFIED', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContinuousBackupInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "earliest_restorable_time",
            "enabled_time",
            "schedule",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption_info
        if self.encryption_info:
            _dict['encryptionInfo'] = self.encryption_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContinuousBackupInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "earliestRestorableTime": obj.get("earliestRestorableTime"),
            "enabledTime": obj.get("enabledTime"),
            "encryptionInfo": EncryptionInfo.from_dict(obj["encryptionInfo"]) if obj.get("encryptionInfo") is not None else None,
            "schedule": obj.get("schedule")
        })
        return _obj



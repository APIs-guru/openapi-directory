# coding: utf-8

"""
    AlloyDB API

    AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData(BaseModel):
    """
    Common model for database resource recommendation signal data.
    """ # noqa: E501
    additional_metadata: Optional[Dict[str, Any]] = Field(default=None, description="Optional. Any other additional metadata specific to recommendation", alias="additionalMetadata")
    last_refresh_time: Optional[StrictStr] = Field(default=None, description="Required. last time recommendationw as refreshed", alias="lastRefreshTime")
    recommendation_state: Optional[StrictStr] = Field(default=None, description="Required. Recommendation state", alias="recommendationState")
    recommender: Optional[StrictStr] = Field(default=None, description="Required. Name of recommendation. Examples: organizations/1234/locations/us-central1/recommenders/google.cloudsql.instance.PerformanceRecommender/recommendations/9876")
    recommender_id: Optional[StrictStr] = Field(default=None, description="Required. ID of recommender. Examples: \"google.cloudsql.instance.PerformanceRecommender\"", alias="recommenderId")
    recommender_subtype: Optional[StrictStr] = Field(default=None, description="Required. Contains an identifier for a subtype of recommendations produced for the same recommender. Subtype is a function of content and impact, meaning a new subtype might be added when significant changes to `content` or `primary_impact.category` are introduced. See the Recommenders section to see a list of subtypes for a given Recommender. Examples: For recommender = \"google.cloudsql.instance.PerformanceRecommender\", recommender_subtype can be \"MYSQL_HIGH_NUMBER_OF_OPEN_TABLES_BEST_PRACTICE\"/\"POSTGRES_HIGH_TRANSACTION_ID_UTILIZATION_BEST_PRACTICE\"", alias="recommenderSubtype")
    resource_name: Optional[StrictStr] = Field(default=None, description="Required. Database resource name associated with the signal. Resource name to follow CAIS resource_name format as noted here go/condor-common-datamodel", alias="resourceName")
    signal_type: Optional[StrictStr] = Field(default=None, description="Required. Type of signal, for example, `SIGNAL_TYPE_IDLE`, `SIGNAL_TYPE_HIGH_NUMBER_OF_TABLES`, etc.", alias="signalType")
    __properties: ClassVar[List[str]] = ["additionalMetadata", "lastRefreshTime", "recommendationState", "recommender", "recommenderId", "recommenderSubtype", "resourceName", "signalType"]

    @field_validator('recommendation_state')
    def recommendation_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'ACTIVE', 'CLAIMED', 'SUCCEEDED', 'FAILED', 'DISMISSED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'ACTIVE', 'CLAIMED', 'SUCCEEDED', 'FAILED', 'DISMISSED')")
        return value

    @field_validator('signal_type')
    def signal_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SIGNAL_TYPE_UNSPECIFIED', 'SIGNAL_TYPE_NOT_PROTECTED_BY_AUTOMATIC_FAILOVER', 'SIGNAL_TYPE_GROUP_NOT_REPLICATING_ACROSS_REGIONS', 'SIGNAL_TYPE_NOT_AVAILABLE_IN_MULTIPLE_ZONES', 'SIGNAL_TYPE_NOT_AVAILABLE_IN_MULTIPLE_REGIONS', 'SIGNAL_TYPE_NO_PROMOTABLE_REPLICA', 'SIGNAL_TYPE_NO_AUTOMATED_BACKUP_POLICY', 'SIGNAL_TYPE_SHORT_BACKUP_RETENTION', 'SIGNAL_TYPE_LAST_BACKUP_FAILED', 'SIGNAL_TYPE_LAST_BACKUP_OLD', 'SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_2_0', 'SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_3', 'SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_2', 'SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_1', 'SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_0', 'SIGNAL_TYPE_VIOLATES_NIST_800_53', 'SIGNAL_TYPE_VIOLATES_ISO_27001', 'SIGNAL_TYPE_VIOLATES_PCI_DSS_V3_2_1', 'SIGNAL_TYPE_LOGS_NOT_OPTIMIZED_FOR_TROUBLESHOOTING', 'SIGNAL_TYPE_QUERY_DURATIONS_NOT_LOGGED', 'SIGNAL_TYPE_VERBOSE_ERROR_LOGGING', 'SIGNAL_TYPE_QUERY_LOCK_WAITS_NOT_LOGGED', 'SIGNAL_TYPE_LOGGING_MOST_ERRORS', 'SIGNAL_TYPE_LOGGING_ONLY_CRITICAL_ERRORS', 'SIGNAL_TYPE_MINIMAL_ERROR_LOGGING', 'SIGNAL_TYPE_QUERY_STATISTICS_LOGGED', 'SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_CLIENT_HOSTNAME', 'SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_PARSER_STATISTICS', 'SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_PLANNER_STATISTICS', 'SIGNAL_TYPE_NOT_LOGGING_ONLY_DDL_STATEMENTS', 'SIGNAL_TYPE_LOGGING_QUERY_STATISTICS', 'SIGNAL_TYPE_NOT_LOGGING_TEMPORARY_FILES', 'SIGNAL_TYPE_CONNECTION_MAX_NOT_CONFIGURED', 'SIGNAL_TYPE_USER_OPTIONS_CONFIGURED', 'SIGNAL_TYPE_EXPOSED_TO_PUBLIC_ACCESS', 'SIGNAL_TYPE_UNENCRYPTED_CONNECTIONS', 'SIGNAL_TYPE_NO_ROOT_PASSWORD', 'SIGNAL_TYPE_WEAK_ROOT_PASSWORD', 'SIGNAL_TYPE_ENCRYPTION_KEY_NOT_CUSTOMER_MANAGED', 'SIGNAL_TYPE_SERVER_AUTHENTICATION_NOT_REQUIRED', 'SIGNAL_TYPE_EXPOSED_BY_OWNERSHIP_CHAINING', 'SIGNAL_TYPE_EXPOSED_TO_EXTERNAL_SCRIPTS', 'SIGNAL_TYPE_EXPOSED_TO_LOCAL_DATA_LOADS', 'SIGNAL_TYPE_CONNECTION_ATTEMPTS_NOT_LOGGED', 'SIGNAL_TYPE_DISCONNECTIONS_NOT_LOGGED', 'SIGNAL_TYPE_LOGGING_EXCESSIVE_STATEMENT_INFO', 'SIGNAL_TYPE_EXPOSED_TO_REMOTE_ACCESS', 'SIGNAL_TYPE_DATABASE_NAMES_EXPOSED', 'SIGNAL_TYPE_SENSITIVE_TRACE_INFO_NOT_MASKED', 'SIGNAL_TYPE_PUBLIC_IP_ENABLED', 'SIGNAL_TYPE_IDLE', 'SIGNAL_TYPE_OVERPROVISIONED', 'SIGNAL_TYPE_HIGH_NUMBER_OF_OPEN_TABLES', 'SIGNAL_TYPE_HIGH_NUMBER_OF_TABLES', 'SIGNAL_TYPE_HIGH_TRANSACTION_ID_UTILIZATION', 'SIGNAL_TYPE_UNDERPROVISIONED', 'SIGNAL_TYPE_OUT_OF_DISK', 'SIGNAL_TYPE_SERVER_CERTIFICATE_NEAR_EXPIRY', 'SIGNAL_TYPE_DATABASE_AUDITING_DISABLED', 'SIGNAL_TYPE_RESTRICT_AUTHORIZED_NETWORKS', 'SIGNAL_TYPE_VIOLATE_POLICY_RESTRICT_PUBLIC_IP']):
            raise ValueError("must be one of enum values ('SIGNAL_TYPE_UNSPECIFIED', 'SIGNAL_TYPE_NOT_PROTECTED_BY_AUTOMATIC_FAILOVER', 'SIGNAL_TYPE_GROUP_NOT_REPLICATING_ACROSS_REGIONS', 'SIGNAL_TYPE_NOT_AVAILABLE_IN_MULTIPLE_ZONES', 'SIGNAL_TYPE_NOT_AVAILABLE_IN_MULTIPLE_REGIONS', 'SIGNAL_TYPE_NO_PROMOTABLE_REPLICA', 'SIGNAL_TYPE_NO_AUTOMATED_BACKUP_POLICY', 'SIGNAL_TYPE_SHORT_BACKUP_RETENTION', 'SIGNAL_TYPE_LAST_BACKUP_FAILED', 'SIGNAL_TYPE_LAST_BACKUP_OLD', 'SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_2_0', 'SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_3', 'SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_2', 'SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_1', 'SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_0', 'SIGNAL_TYPE_VIOLATES_NIST_800_53', 'SIGNAL_TYPE_VIOLATES_ISO_27001', 'SIGNAL_TYPE_VIOLATES_PCI_DSS_V3_2_1', 'SIGNAL_TYPE_LOGS_NOT_OPTIMIZED_FOR_TROUBLESHOOTING', 'SIGNAL_TYPE_QUERY_DURATIONS_NOT_LOGGED', 'SIGNAL_TYPE_VERBOSE_ERROR_LOGGING', 'SIGNAL_TYPE_QUERY_LOCK_WAITS_NOT_LOGGED', 'SIGNAL_TYPE_LOGGING_MOST_ERRORS', 'SIGNAL_TYPE_LOGGING_ONLY_CRITICAL_ERRORS', 'SIGNAL_TYPE_MINIMAL_ERROR_LOGGING', 'SIGNAL_TYPE_QUERY_STATISTICS_LOGGED', 'SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_CLIENT_HOSTNAME', 'SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_PARSER_STATISTICS', 'SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_PLANNER_STATISTICS', 'SIGNAL_TYPE_NOT_LOGGING_ONLY_DDL_STATEMENTS', 'SIGNAL_TYPE_LOGGING_QUERY_STATISTICS', 'SIGNAL_TYPE_NOT_LOGGING_TEMPORARY_FILES', 'SIGNAL_TYPE_CONNECTION_MAX_NOT_CONFIGURED', 'SIGNAL_TYPE_USER_OPTIONS_CONFIGURED', 'SIGNAL_TYPE_EXPOSED_TO_PUBLIC_ACCESS', 'SIGNAL_TYPE_UNENCRYPTED_CONNECTIONS', 'SIGNAL_TYPE_NO_ROOT_PASSWORD', 'SIGNAL_TYPE_WEAK_ROOT_PASSWORD', 'SIGNAL_TYPE_ENCRYPTION_KEY_NOT_CUSTOMER_MANAGED', 'SIGNAL_TYPE_SERVER_AUTHENTICATION_NOT_REQUIRED', 'SIGNAL_TYPE_EXPOSED_BY_OWNERSHIP_CHAINING', 'SIGNAL_TYPE_EXPOSED_TO_EXTERNAL_SCRIPTS', 'SIGNAL_TYPE_EXPOSED_TO_LOCAL_DATA_LOADS', 'SIGNAL_TYPE_CONNECTION_ATTEMPTS_NOT_LOGGED', 'SIGNAL_TYPE_DISCONNECTIONS_NOT_LOGGED', 'SIGNAL_TYPE_LOGGING_EXCESSIVE_STATEMENT_INFO', 'SIGNAL_TYPE_EXPOSED_TO_REMOTE_ACCESS', 'SIGNAL_TYPE_DATABASE_NAMES_EXPOSED', 'SIGNAL_TYPE_SENSITIVE_TRACE_INFO_NOT_MASKED', 'SIGNAL_TYPE_PUBLIC_IP_ENABLED', 'SIGNAL_TYPE_IDLE', 'SIGNAL_TYPE_OVERPROVISIONED', 'SIGNAL_TYPE_HIGH_NUMBER_OF_OPEN_TABLES', 'SIGNAL_TYPE_HIGH_NUMBER_OF_TABLES', 'SIGNAL_TYPE_HIGH_TRANSACTION_ID_UTILIZATION', 'SIGNAL_TYPE_UNDERPROVISIONED', 'SIGNAL_TYPE_OUT_OF_DISK', 'SIGNAL_TYPE_SERVER_CERTIFICATE_NEAR_EXPIRY', 'SIGNAL_TYPE_DATABASE_AUDITING_DISABLED', 'SIGNAL_TYPE_RESTRICT_AUTHORIZED_NETWORKS', 'SIGNAL_TYPE_VIOLATE_POLICY_RESTRICT_PUBLIC_IP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalMetadata": obj.get("additionalMetadata"),
            "lastRefreshTime": obj.get("lastRefreshTime"),
            "recommendationState": obj.get("recommendationState"),
            "recommender": obj.get("recommender"),
            "recommenderId": obj.get("recommenderId"),
            "recommenderSubtype": obj.get("recommenderSubtype"),
            "resourceName": obj.get("resourceName"),
            "signalType": obj.get("signalType")
        })
        return _obj



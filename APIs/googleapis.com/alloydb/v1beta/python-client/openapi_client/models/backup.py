# coding: utf-8

"""
    AlloyDB API

    AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.encryption_config import EncryptionConfig
from openapi_client.models.encryption_info import EncryptionInfo
from openapi_client.models.quantity_based_expiry import QuantityBasedExpiry
from typing import Optional, Set
from typing_extensions import Self

class Backup(BaseModel):
    """
    Message describing Backup object
    """ # noqa: E501
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128")
    cluster_name: Optional[StrictStr] = Field(default=None, description="Required. The full resource name of the backup source cluster (e.g., projects/{project}/locations/{region}/clusters/{cluster_id}).", alias="clusterName")
    cluster_uid: Optional[StrictStr] = Field(default=None, description="Output only. The system-generated UID of the cluster which was used to create this resource.", alias="clusterUid")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Create time stamp", alias="createTime")
    database_version: Optional[StrictStr] = Field(default=None, description="Output only. The database engine major version of the cluster this backup was created from. Any restored cluster created from this backup will have the same database version.", alias="databaseVersion")
    delete_time: Optional[StrictStr] = Field(default=None, description="Output only. Delete time stamp", alias="deleteTime")
    description: Optional[StrictStr] = Field(default=None, description="User-provided description of the backup.")
    display_name: Optional[StrictStr] = Field(default=None, description="User-settable and human-readable display name for the Backup.", alias="displayName")
    encryption_config: Optional[EncryptionConfig] = Field(default=None, alias="encryptionConfig")
    encryption_info: Optional[EncryptionInfo] = Field(default=None, alias="encryptionInfo")
    etag: Optional[StrictStr] = Field(default=None, description="For Resource freshness validation (https://google.aip.dev/154)")
    expiry_quantity: Optional[QuantityBasedExpiry] = Field(default=None, alias="expiryQuantity")
    expiry_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which after the backup is eligible to be garbage collected. It is the duration specified by the backup's retention policy, added to the backup's create_time.", alias="expiryTime")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels as key value pairs")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The name of the backup resource with the format: * projects/{project}/locations/{region}/backups/{backup_id} where the cluster and backup ID segments should satisfy the regex expression `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`, e.g. 1-63 characters of lowercase letters, numbers, and dashes, starting with a letter, and ending with a letter or number. For more details see https://google.aip.dev/122. The prefix of the backup resource name is the name of the parent resource: * projects/{project}/locations/{region}")
    reconciling: Optional[StrictBool] = Field(default=None, description="Output only. Reconciling (https://google.aip.dev/128#reconciliation), if true, indicates that the service is actively updating the resource. This can happen due to user-triggered updates or system actions like failover or maintenance.")
    satisfies_pzs: Optional[StrictBool] = Field(default=None, description="Output only. Reserved for future use.", alias="satisfiesPzs")
    size_bytes: Optional[StrictStr] = Field(default=None, description="Output only. The size of the backup in bytes.", alias="sizeBytes")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of the backup.")
    type: Optional[StrictStr] = Field(default=None, description="The backup type, which suggests the trigger for the backup.")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Update time stamp", alias="updateTime")
    __properties: ClassVar[List[str]] = ["annotations", "clusterName", "clusterUid", "createTime", "databaseVersion", "deleteTime", "description", "displayName", "encryptionConfig", "encryptionInfo", "etag", "expiryQuantity", "expiryTime", "labels", "name", "reconciling", "satisfiesPzs", "sizeBytes", "state", "type", "uid", "updateTime"]

    @field_validator('database_version')
    def database_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATABASE_VERSION_UNSPECIFIED', 'POSTGRES_13', 'POSTGRES_14', 'POSTGRES_15']):
            raise ValueError("must be one of enum values ('DATABASE_VERSION_UNSPECIFIED', 'POSTGRES_13', 'POSTGRES_14', 'POSTGRES_15')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'READY', 'CREATING', 'FAILED', 'DELETING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'READY', 'CREATING', 'FAILED', 'DELETING')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'ON_DEMAND', 'AUTOMATED', 'CONTINUOUS']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'ON_DEMAND', 'AUTOMATED', 'CONTINUOUS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Backup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "cluster_uid",
            "create_time",
            "database_version",
            "delete_time",
            "expiry_time",
            "name",
            "reconciling",
            "satisfies_pzs",
            "size_bytes",
            "state",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption_config
        if self.encryption_config:
            _dict['encryptionConfig'] = self.encryption_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of encryption_info
        if self.encryption_info:
            _dict['encryptionInfo'] = self.encryption_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expiry_quantity
        if self.expiry_quantity:
            _dict['expiryQuantity'] = self.expiry_quantity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Backup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "clusterName": obj.get("clusterName"),
            "clusterUid": obj.get("clusterUid"),
            "createTime": obj.get("createTime"),
            "databaseVersion": obj.get("databaseVersion"),
            "deleteTime": obj.get("deleteTime"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "encryptionConfig": EncryptionConfig.from_dict(obj["encryptionConfig"]) if obj.get("encryptionConfig") is not None else None,
            "encryptionInfo": EncryptionInfo.from_dict(obj["encryptionInfo"]) if obj.get("encryptionInfo") is not None else None,
            "etag": obj.get("etag"),
            "expiryQuantity": QuantityBasedExpiry.from_dict(obj["expiryQuantity"]) if obj.get("expiryQuantity") is not None else None,
            "expiryTime": obj.get("expiryTime"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "reconciling": obj.get("reconciling"),
            "satisfiesPzs": obj.get("satisfiesPzs"),
            "sizeBytes": obj.get("sizeBytes"),
            "state": obj.get("state"),
            "type": obj.get("type"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



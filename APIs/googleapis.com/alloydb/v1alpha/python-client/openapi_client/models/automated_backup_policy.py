# coding: utf-8

"""
    AlloyDB API

    AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.encryption_config import EncryptionConfig
from openapi_client.models.quantity_based_retention import QuantityBasedRetention
from openapi_client.models.time_based_retention import TimeBasedRetention
from openapi_client.models.weekly_schedule import WeeklySchedule
from typing import Optional, Set
from typing_extensions import Self

class AutomatedBackupPolicy(BaseModel):
    """
    Message describing the user-specified automated backup policy. All fields in the automated backup policy are optional. Defaults for each field are provided if they are not set.
    """ # noqa: E501
    backup_window: Optional[StrictStr] = Field(default=None, description="The length of the time window during which a backup can be taken. If a backup does not succeed within this time window, it will be canceled and considered failed. The backup window must be at least 5 minutes long. There is no upper bound on the window. If not set, it defaults to 1 hour.", alias="backupWindow")
    enabled: Optional[StrictBool] = Field(default=None, description="Whether automated automated backups are enabled. If not set, defaults to true.")
    encryption_config: Optional[EncryptionConfig] = Field(default=None, alias="encryptionConfig")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels to apply to backups created using this configuration.")
    location: Optional[StrictStr] = Field(default=None, description="The location where the backup will be stored. Currently, the only supported option is to store the backup in the same region as the cluster. If empty, defaults to the region of the cluster.")
    quantity_based_retention: Optional[QuantityBasedRetention] = Field(default=None, alias="quantityBasedRetention")
    time_based_retention: Optional[TimeBasedRetention] = Field(default=None, alias="timeBasedRetention")
    weekly_schedule: Optional[WeeklySchedule] = Field(default=None, alias="weeklySchedule")
    __properties: ClassVar[List[str]] = ["backupWindow", "enabled", "encryptionConfig", "labels", "location", "quantityBasedRetention", "timeBasedRetention", "weeklySchedule"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AutomatedBackupPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption_config
        if self.encryption_config:
            _dict['encryptionConfig'] = self.encryption_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quantity_based_retention
        if self.quantity_based_retention:
            _dict['quantityBasedRetention'] = self.quantity_based_retention.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_based_retention
        if self.time_based_retention:
            _dict['timeBasedRetention'] = self.time_based_retention.to_dict()
        # override the default output from pydantic by calling `to_dict()` of weekly_schedule
        if self.weekly_schedule:
            _dict['weeklySchedule'] = self.weekly_schedule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AutomatedBackupPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupWindow": obj.get("backupWindow"),
            "enabled": obj.get("enabled"),
            "encryptionConfig": EncryptionConfig.from_dict(obj["encryptionConfig"]) if obj.get("encryptionConfig") is not None else None,
            "labels": obj.get("labels"),
            "location": obj.get("location"),
            "quantityBasedRetention": QuantityBasedRetention.from_dict(obj["quantityBasedRetention"]) if obj.get("quantityBasedRetention") is not None else None,
            "timeBasedRetention": TimeBasedRetention.from_dict(obj["timeBasedRetention"]) if obj.get("timeBasedRetention") is not None else None,
            "weeklySchedule": WeeklySchedule.from_dict(obj["weeklySchedule"]) if obj.get("weeklySchedule") is not None else None
        })
        return _obj



# coding: utf-8

"""
    AlloyDB API

    AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.backup_source import BackupSource
from openapi_client.models.cluster import Cluster
from openapi_client.models.continuous_backup_source import ContinuousBackupSource
from typing import Optional, Set
from typing_extensions import Self

class RestoreClusterRequest(BaseModel):
    """
    Message for restoring a Cluster from a backup or another cluster at a given point in time.
    """ # noqa: E501
    backup_source: Optional[BackupSource] = Field(default=None, alias="backupSource")
    cluster: Optional[Cluster] = None
    cluster_id: Optional[StrictStr] = Field(default=None, description="Required. ID of the requesting object.", alias="clusterId")
    continuous_backup_source: Optional[ContinuousBackupSource] = Field(default=None, alias="continuousBackupSource")
    request_id: Optional[StrictStr] = Field(default=None, description="Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).", alias="requestId")
    validate_only: Optional[StrictBool] = Field(default=None, description="Optional. If set, performs request validation (e.g. permission checks and any other type of validation), but do not actually execute the import request.", alias="validateOnly")
    __properties: ClassVar[List[str]] = ["backupSource", "cluster", "clusterId", "continuousBackupSource", "requestId", "validateOnly"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestoreClusterRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of backup_source
        if self.backup_source:
            _dict['backupSource'] = self.backup_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cluster
        if self.cluster:
            _dict['cluster'] = self.cluster.to_dict()
        # override the default output from pydantic by calling `to_dict()` of continuous_backup_source
        if self.continuous_backup_source:
            _dict['continuousBackupSource'] = self.continuous_backup_source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestoreClusterRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupSource": BackupSource.from_dict(obj["backupSource"]) if obj.get("backupSource") is not None else None,
            "cluster": Cluster.from_dict(obj["cluster"]) if obj.get("cluster") is not None else None,
            "clusterId": obj.get("clusterId"),
            "continuousBackupSource": ContinuousBackupSource.from_dict(obj["continuousBackupSource"]) if obj.get("continuousBackupSource") is not None else None,
            "requestId": obj.get("requestId"),
            "validateOnly": obj.get("validateOnly")
        })
        return _obj



# coding: utf-8

"""
    Firebase Rules API

    Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.test_ruleset_response import TestRulesetResponse

class TestTestRulesetResponse(unittest.TestCase):
    """TestRulesetResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TestRulesetResponse:
        """Test TestRulesetResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TestRulesetResponse`
        """
        model = TestRulesetResponse()
        if include_optional:
            return TestRulesetResponse(
                issues = [
                    openapi_client.models.issue.Issue(
                        description = '', 
                        severity = 'SEVERITY_UNSPECIFIED', 
                        source_position = openapi_client.models.source_position.SourcePosition(
                            column = 56, 
                            current_offset = 56, 
                            end_offset = 56, 
                            file_name = '', 
                            line = 56, ), )
                    ],
                test_results = [
                    openapi_client.models.test_result.TestResult(
                        debug_messages = [
                            ''
                            ], 
                        error_position = openapi_client.models.source_position.SourcePosition(
                            column = 56, 
                            current_offset = 56, 
                            end_offset = 56, 
                            file_name = '', 
                            line = 56, ), 
                        expression_reports = [
                            openapi_client.models.expression_report.ExpressionReport(
                                children = [
                                    openapi_client.models.expression_report.ExpressionReport(
                                        source_position = openapi_client.models.source_position.SourcePosition(
                                            column = 56, 
                                            current_offset = 56, 
                                            end_offset = 56, 
                                            file_name = '', 
                                            line = 56, ), 
                                        values = [
                                            openapi_client.models.value_count.ValueCount(
                                                count = 56, 
                                                value = null, )
                                            ], )
                                    ], 
                                source_position = , 
                                values = [
                                    openapi_client.models.value_count.ValueCount(
                                        count = 56, 
                                        value = null, )
                                    ], )
                            ], 
                        function_calls = [
                            openapi_client.models.function_call.FunctionCall(
                                args = [
                                    null
                                    ], 
                                function = '', )
                            ], 
                        state = 'STATE_UNSPECIFIED', 
                        visited_expressions = [
                            openapi_client.models.visited_expression.VisitedExpression(
                                value = null, )
                            ], )
                    ]
            )
        else:
            return TestRulesetResponse(
        )
        """

    def testTestRulesetResponse(self):
        """Test TestRulesetResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

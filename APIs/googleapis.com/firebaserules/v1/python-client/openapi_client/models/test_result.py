# coding: utf-8

"""
    Firebase Rules API

    Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.expression_report import ExpressionReport
from openapi_client.models.function_call import FunctionCall
from openapi_client.models.source_position import SourcePosition
from openapi_client.models.visited_expression import VisitedExpression
from typing import Optional, Set
from typing_extensions import Self

class TestResult(BaseModel):
    """
    Test result message containing the state of the test as well as a description and source position for test failures.
    """ # noqa: E501
    debug_messages: Optional[List[StrictStr]] = Field(default=None, description="Debug messages related to test execution issues encountered during evaluation. Debug messages may be related to too many or too few invocations of function mocks or to runtime errors that occur during evaluation. For example: ```Unable to read variable [name: \"resource\"]```", alias="debugMessages")
    error_position: Optional[SourcePosition] = Field(default=None, alias="errorPosition")
    expression_reports: Optional[List[ExpressionReport]] = Field(default=None, description="The mapping from expression in the ruleset AST to the values they were evaluated to. Partially-nested to mirror AST structure. Note that this field is actually tracking expressions and not permission statements in contrast to the \"visited_expressions\" field above. Literal expressions are omitted.", alias="expressionReports")
    function_calls: Optional[List[FunctionCall]] = Field(default=None, description="The set of function calls made to service-defined methods. Function calls are included in the order in which they are encountered during evaluation, are provided for both mocked and unmocked functions, and included on the response regardless of the test `state`.", alias="functionCalls")
    state: Optional[StrictStr] = Field(default=None, description="State of the test.")
    visited_expressions: Optional[List[VisitedExpression]] = Field(default=None, description="The set of visited permission expressions for a given test. This returns the positions and evaluation results of all visited permission expressions which were relevant to the test case, e.g. ``` match /path { allow read if: } ``` For a detailed report of the intermediate evaluation states, see the `expression_reports` field", alias="visitedExpressions")
    __properties: ClassVar[List[str]] = ["debugMessages", "errorPosition", "expressionReports", "functionCalls", "state", "visitedExpressions"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'SUCCESS', 'FAILURE']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'SUCCESS', 'FAILURE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error_position
        if self.error_position:
            _dict['errorPosition'] = self.error_position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in expression_reports (list)
        _items = []
        if self.expression_reports:
            for _item_expression_reports in self.expression_reports:
                if _item_expression_reports:
                    _items.append(_item_expression_reports.to_dict())
            _dict['expressionReports'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in function_calls (list)
        _items = []
        if self.function_calls:
            for _item_function_calls in self.function_calls:
                if _item_function_calls:
                    _items.append(_item_function_calls.to_dict())
            _dict['functionCalls'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in visited_expressions (list)
        _items = []
        if self.visited_expressions:
            for _item_visited_expressions in self.visited_expressions:
                if _item_visited_expressions:
                    _items.append(_item_visited_expressions.to_dict())
            _dict['visitedExpressions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "debugMessages": obj.get("debugMessages"),
            "errorPosition": SourcePosition.from_dict(obj["errorPosition"]) if obj.get("errorPosition") is not None else None,
            "expressionReports": [ExpressionReport.from_dict(_item) for _item in obj["expressionReports"]] if obj.get("expressionReports") is not None else None,
            "functionCalls": [FunctionCall.from_dict(_item) for _item in obj["functionCalls"]] if obj.get("functionCalls") is not None else None,
            "state": obj.get("state"),
            "visitedExpressions": [VisitedExpression.from_dict(_item) for _item in obj["visitedExpressions"]] if obj.get("visitedExpressions") is not None else None
        })
        return _obj



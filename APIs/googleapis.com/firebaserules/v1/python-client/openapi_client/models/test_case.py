# coding: utf-8

"""
    Firebase Rules API

    Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.function_mock import FunctionMock
from typing import Optional, Set
from typing_extensions import Self

class TestCase(BaseModel):
    """
    `TestCase` messages provide the request context and an expectation as to whether the given context will be allowed or denied. Test cases may specify the `request`, `resource`, and `function_mocks` to mock a function call to a service-provided function. The `request` object represents context present at request-time. The `resource` is the value of the target resource as it appears in persistent storage before the request is executed.
    """ # noqa: E501
    expectation: Optional[StrictStr] = Field(default=None, description="Test expectation.")
    expression_report_level: Optional[StrictStr] = Field(default=None, description="Specifies what should be included in the response.", alias="expressionReportLevel")
    function_mocks: Optional[List[FunctionMock]] = Field(default=None, description="Optional function mocks for service-defined functions. If not set, any service defined function is expected to return an error, which may or may not influence the test outcome.", alias="functionMocks")
    path_encoding: Optional[StrictStr] = Field(default=None, description="Specifies whether paths (such as request.path) are encoded and how.", alias="pathEncoding")
    request: Optional[Any] = Field(default=None, description="Request context. The exact format of the request context is service-dependent. See the appropriate service documentation for information about the supported fields and types on the request. Minimally, all services support the following fields and types: Request field | Type ---------------|----------------- auth.uid | `string` auth.token | `map` headers | `map` method | `string` params | `map` path | `string` time | `google.protobuf.Timestamp` If the request value is not well-formed for the service, the request will be rejected as an invalid argument.")
    resource: Optional[Any] = Field(default=None, description="Optional resource value as it appears in persistent storage before the request is fulfilled. The resource type depends on the `request.path` value.")
    __properties: ClassVar[List[str]] = ["expectation", "expressionReportLevel", "functionMocks", "pathEncoding", "request", "resource"]

    @field_validator('expectation')
    def expectation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXPECTATION_UNSPECIFIED', 'ALLOW', 'DENY']):
            raise ValueError("must be one of enum values ('EXPECTATION_UNSPECIFIED', 'ALLOW', 'DENY')")
        return value

    @field_validator('expression_report_level')
    def expression_report_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LEVEL_UNSPECIFIED', 'NONE', 'FULL', 'VISITED']):
            raise ValueError("must be one of enum values ('LEVEL_UNSPECIFIED', 'NONE', 'FULL', 'VISITED')")
        return value

    @field_validator('path_encoding')
    def path_encoding_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENCODING_UNSPECIFIED', 'URL_ENCODED', 'PLAIN']):
            raise ValueError("must be one of enum values ('ENCODING_UNSPECIFIED', 'URL_ENCODED', 'PLAIN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestCase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in function_mocks (list)
        _items = []
        if self.function_mocks:
            for _item_function_mocks in self.function_mocks:
                if _item_function_mocks:
                    _items.append(_item_function_mocks.to_dict())
            _dict['functionMocks'] = _items
        # set to None if request (nullable) is None
        # and model_fields_set contains the field
        if self.request is None and "request" in self.model_fields_set:
            _dict['request'] = None

        # set to None if resource (nullable) is None
        # and model_fields_set contains the field
        if self.resource is None and "resource" in self.model_fields_set:
            _dict['resource'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestCase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "expectation": obj.get("expectation"),
            "expressionReportLevel": obj.get("expressionReportLevel"),
            "functionMocks": [FunctionMock.from_dict(_item) for _item in obj["functionMocks"]] if obj.get("functionMocks") is not None else None,
            "pathEncoding": obj.get("pathEncoding"),
            "request": obj.get("request"),
            "resource": obj.get("resource")
        })
        return _obj



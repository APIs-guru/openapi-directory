openapi: 3.0.0
servers:
  - url: https://firebaserules.googleapis.com/
info:
  contact:
    name: Google
    url: https://google.com
    x-twitter: youtube
  description: "Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. "
  license:
    name: Creative Commons Attribution 3.0
    url: http://creativecommons.org/licenses/by/3.0/
  termsOfService: https://developers.google.com/terms/
  title: Firebase Rules API
  version: v1
  x-apiClientRegistration:
    url: https://console.developers.google.com
  x-apisguru-categories:
    - analytics
    - media
  x-logo:
    url: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png
  x-origin:
    - converter:
        url: https://github.com/mermade/oas-kit
        version: 7.0.4
      format: google
      url: https://firebaserules.googleapis.com/$discovery/rest?version=v1
      version: v1
  x-providerName: googleapis.com
  x-serviceName: firebaserules
externalDocs:
  url: https://firebase.google.com/docs/storage/security
tags:
  - name: projects
paths:
  /v1/{name}:
    delete:
      description: Delete a `Ruleset` by resource name. If the `Ruleset` is referenced by a `Release` the operation will fail.
      operationId: firebaserules.projects.rulesets.delete
      parameters:
        - description: "Required. Resource name for the ruleset to delete. Format: `projects/{project_id}/rulesets/{ruleset_id}`"
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
      tags:
        - projects
    get:
      description: Get a `Ruleset` by name including the full `Source` contents.
      operationId: firebaserules.projects.rulesets.get
      parameters:
        - description: "Required. Resource name for the ruleset to get. Format: `projects/{project_id}/rulesets/{ruleset_id}`"
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ruleset"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
        - Oauth2:
            - https://www.googleapis.com/auth/firebase.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/firebase.readonly
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    patch:
      description: Update a `Release` via PATCH. Only updates to `ruleset_name` will be honored. `Release` rename is not supported. To create a `Release` use the CreateRelease method.
      operationId: firebaserules.projects.releases.patch
      parameters:
        - description: "Required. Resource name for the project which owns this `Release`. Format: `projects/{project_id}`"
          in: path
          name: name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateReleaseRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Release"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
      tags:
        - projects
  /v1/{name}/releases:
    get:
      description: List the `Release` values for a project. This list may optionally be filtered by `Release` name, `Ruleset` name, `TestSuite` name, or any combination thereof.
      operationId: firebaserules.projects.releases.list
      parameters:
        - description: "Required. Resource name for the project. Format: `projects/{project_id}`"
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: "`Release` filter. The list method supports filters with restrictions on the `Release.name`, and `Release.ruleset_name`. Example 1: A filter of 'name=prod*' might return `Release`s with names within 'projects/foo' prefixed with 'prod': Name -> Ruleset Name: * projects/foo/releases/prod -> projects/foo/rulesets/uuid1234 * projects/foo/releases/prod/v1 -> projects/foo/rulesets/uuid1234 * projects/foo/releases/prod/v2 -> projects/foo/rulesets/uuid8888 Example 2: A filter of `name=prod* ruleset_name=uuid1234` would return only `Release` instances for 'projects/foo' with names prefixed with 'prod' referring to the same `Ruleset` name of 'uuid1234': Name -> Ruleset Name: * projects/foo/releases/prod -> projects/foo/rulesets/1234 * projects/foo/releases/prod/v1 -> projects/foo/rulesets/1234 In the examples, the filter parameters refer to the search filters are relative to the project. Fully qualified prefixed may also be used."
          in: query
          name: filter
          schema:
            type: string
        - description: "Page size to load. Maximum of 100. Defaults to 10. Note: `page_size` is just a hint and the service may choose to load fewer than `page_size` results due to the size of the output. To traverse all of the releases, the caller should iterate until the `page_token` on the response is empty."
          in: query
          name: pageSize
          schema:
            type: integer
        - description: Next page token for the next batch of `Release` instances.
          in: query
          name: pageToken
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListReleasesResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
        - Oauth2:
            - https://www.googleapis.com/auth/firebase.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/firebase.readonly
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Create a `Release`. Release names should reflect the developer's deployment practices. For example, the release name may include the environment name, application name, application version, or any other name meaningful to the developer. Once a `Release` refers to a `Ruleset`, the rules can be enforced by Firebase Rules-enabled services. More than one `Release` may be 'live' concurrently. Consider the following three `Release` names for `projects/foo` and the `Ruleset` to which they refer. Release Name -> Ruleset Name * projects/foo/releases/prod -> projects/foo/rulesets/uuid123 * projects/foo/releases/prod/beta -> projects/foo/rulesets/uuid123 * projects/foo/releases/prod/v23 -> projects/foo/rulesets/uuid456 The relationships reflect a `Ruleset` rollout in progress. The `prod` and `prod/beta` releases refer to the same `Ruleset`. However, `prod/v23` refers to a new `Ruleset`. The `Ruleset` reference for a `Release` may be updated using the UpdateRelease method.
      operationId: firebaserules.projects.releases.create
      parameters:
        - description: "Required. Resource name for the project which owns this `Release`. Format: `projects/{project_id}`"
          in: path
          name: name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Release"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Release"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
      tags:
        - projects
  /v1/{name}/rulesets:
    get:
      description: List `Ruleset` metadata only and optionally filter the results by `Ruleset` name. The full `Source` contents of a `Ruleset` may be retrieved with GetRuleset.
      operationId: firebaserules.projects.rulesets.list
      parameters:
        - description: "Required. Resource name for the project. Format: `projects/{project_id}`"
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: '`Ruleset` filter. The list method supports filters with restrictions on `Ruleset.name`. Filters on `Ruleset.create_time` should use the `date` function which parses strings that conform to the RFC 3339 date/time specifications. Example: `create_time > date("2017-01-01T00:00:00Z") AND name=UUID-*`'
          in: query
          name: filter
          schema:
            type: string
        - description: "Page size to load. Maximum of 100. Defaults to 10. Note: `page_size` is just a hint and the service may choose to load less than `page_size` due to the size of the output. To traverse all of the releases, caller should iterate until the `page_token` is empty."
          in: query
          name: pageSize
          schema:
            type: integer
        - description: Next page token for loading the next batch of `Ruleset` instances.
          in: query
          name: pageToken
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListRulesetsResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
        - Oauth2:
            - https://www.googleapis.com/auth/firebase.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/firebase.readonly
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Create a `Ruleset` from `Source`. The `Ruleset` is given a unique generated name which is returned to the caller. `Source` containing syntactic or semantics errors will result in an error response indicating the first error encountered. For a detailed view of `Source` issues, use TestRuleset.
      operationId: firebaserules.projects.rulesets.create
      parameters:
        - description: "Required. Resource name for Project which owns this `Ruleset`. Format: `projects/{project_id}`"
          in: path
          name: name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ruleset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ruleset"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
      tags:
        - projects
  /v1/{name}:getExecutable:
    get:
      description: Get the `Release` executable to use when enforcing rules.
      operationId: firebaserules.projects.releases.getExecutable
      parameters:
        - description: "Required. Resource name of the `Release`. Format: `projects/{project_id}/releases/{release_id}`"
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: The requested runtime executable version. Defaults to FIREBASE_RULES_EXECUTABLE_V1.
          in: query
          name: executableVersion
          schema:
            enum:
              - RELEASE_EXECUTABLE_VERSION_UNSPECIFIED
              - FIREBASE_RULES_EXECUTABLE_V1
              - FIREBASE_RULES_EXECUTABLE_V2
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetReleaseExecutableResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
        - Oauth2:
            - https://www.googleapis.com/auth/firebase.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/firebase.readonly
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
  /v1/{name}:test:
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: "Test `Source` for syntactic and semantic correctness. Issues present, if any, will be returned to the caller with a description, severity, and source location. The test method may be executed with `Source` or a `Ruleset` name. Passing `Source` is useful for unit testing new rules. Passing a `Ruleset` name is useful for regression testing an existing rule. The following is an example of `Source` that permits users to upload images to a bucket bearing their user id and matching the correct metadata: _*Example*_ // Users are allowed to subscribe and unsubscribe to the blog. service firebase.storage { match /users/{userId}/images/{imageName} { allow write: if userId == request.auth.uid && (imageName.matches('*.png$') || imageName.matches('*.jpg$')) && resource.mimeType.matches('^image/') } }"
      operationId: firebaserules.projects.test
      parameters:
        - description: "Required. Tests may either provide `source` or a `Ruleset` resource name. For tests against `source`, the resource name must refer to the project: Format: `projects/{project_id}` For tests against a `Ruleset`, this must be the `Ruleset` resource name: Format: `projects/{project_id}/rulesets/{ruleset_id}`"
          in: path
          name: name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestRulesetRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestRulesetResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
        - Oauth2:
            - https://www.googleapis.com/auth/firebase.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/firebase.readonly
      tags:
        - projects
components:
  parameters:
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        enum:
          - "1"
          - "2"
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        enum:
          - json
          - media
          - proto
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
  schemas:
    Arg:
      description: Arg matchers for the mock function.
      properties:
        anyValue:
          $ref: "#/components/schemas/Empty"
          description: Argument matches any value provided.
        exactValue:
          description: Argument exactly matches value provided.
      type: object
    Empty:
      description: "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }"
      properties: {}
      type: object
    ExpressionReport:
      description: Describes where in a file an expression is found and what it was evaluated to over the course of its use.
      properties:
        children:
          description: Subexpressions
          items:
            $ref: "#/components/schemas/ExpressionReport"
          type: array
        sourcePosition:
          $ref: "#/components/schemas/SourcePosition"
          description: Position of expression in original rules source.
        values:
          description: Values that this expression evaluated to when encountered.
          items:
            $ref: "#/components/schemas/ValueCount"
          type: array
      type: object
    File:
      description: "`File` containing source content."
      properties:
        content:
          description: Required. Textual Content.
          type: string
        fingerprint:
          description: Fingerprint (e.g. github sha) associated with the `File`.
          format: byte
          type: string
        name:
          description: Required. File name.
          type: string
      type: object
    FunctionCall:
      description: Represents a service-defined function call that was invoked during test execution.
      properties:
        args:
          description: The arguments that were provided to the function.
          items: {}
          type: array
        function:
          description: Name of the function invoked.
          type: string
      type: object
    FunctionMock:
      description: Mock function definition. Mocks must refer to a function declared by the target service. The type of the function args and result will be inferred at test time. If either the arg or result values are not compatible with function type declaration, the request will be considered invalid. More than one `FunctionMock` may be provided for a given function name so long as the `Arg` matchers are distinct. There may be only one function for a given overload where all `Arg` values are `Arg.any_value`.
      properties:
        args:
          description: The list of `Arg` values to match. The order in which the arguments are provided is the order in which they must appear in the function invocation.
          items:
            $ref: "#/components/schemas/Arg"
          type: array
        function:
          description: The name of the function. The function name must match one provided by a service declaration.
          type: string
        result:
          $ref: "#/components/schemas/Result"
          description: The mock result of the function call.
      type: object
    GetReleaseExecutableResponse:
      description: The response for FirebaseRulesService.GetReleaseExecutable
      properties:
        executable:
          description: Executable view of the `Ruleset` referenced by the `Release`.
          format: byte
          type: string
        executableVersion:
          description: The Rules runtime version of the executable.
          enum:
            - RELEASE_EXECUTABLE_VERSION_UNSPECIFIED
            - FIREBASE_RULES_EXECUTABLE_V1
            - FIREBASE_RULES_EXECUTABLE_V2
          type: string
        language:
          description: "`Language` used to generate the executable bytes."
          enum:
            - LANGUAGE_UNSPECIFIED
            - FIREBASE_RULES
            - EVENT_FLOW_TRIGGERS
          type: string
        rulesetName:
          description: "`Ruleset` name associated with the `Release` executable."
          type: string
        syncTime:
          description: Optional, indicates the freshness of the result. The response is guaranteed to be the latest within an interval up to the sync_time (inclusive).
          format: google-datetime
          type: string
        updateTime:
          description: Timestamp for the most recent `Release.update_time`.
          format: google-datetime
          type: string
      type: object
    Issue:
      description: Issues include warnings, errors, and deprecation notices.
      properties:
        description:
          description: Short error description.
          type: string
        severity:
          description: The severity of the issue.
          enum:
            - SEVERITY_UNSPECIFIED
            - DEPRECATION
            - WARNING
            - ERROR
          type: string
        sourcePosition:
          $ref: "#/components/schemas/SourcePosition"
          description: Position of the issue in the `Source`.
      type: object
    ListReleasesResponse:
      description: The response for FirebaseRulesService.ListReleases.
      properties:
        nextPageToken:
          description: The pagination token to retrieve the next page of results. If the value is empty, no further results remain.
          type: string
        releases:
          description: List of `Release` instances.
          items:
            $ref: "#/components/schemas/Release"
          type: array
      type: object
    ListRulesetsResponse:
      description: The response for FirebaseRulesService.ListRulesets.
      properties:
        nextPageToken:
          description: The pagination token to retrieve the next page of results. If the value is empty, no further results remain.
          type: string
        rulesets:
          description: List of `Ruleset` instances.
          items:
            $ref: "#/components/schemas/Ruleset"
          type: array
      type: object
    Metadata:
      description: Metadata for a Ruleset.
      properties:
        services:
          description: Services that this ruleset has declarations for (e.g., "cloud.firestore"). There may be 0+ of these.
          items:
            type: string
          type: array
      type: object
    Release:
      description: "`Release` is a named reference to a `Ruleset`. Once a `Release` refers to a `Ruleset`, rules-enabled services will be able to enforce the `Ruleset`."
      properties:
        createTime:
          description: Output only. Time the release was created.
          format: google-datetime
          readOnly: true
          type: string
        name:
          description: "Required. Format: `projects/{project_id}/releases/{release_id}`"
          type: string
        rulesetName:
          description: Required. Name of the `Ruleset` referred to by this `Release`. The `Ruleset` must exist for the `Release` to be created.
          type: string
        updateTime:
          description: Output only. Time the release was updated.
          format: google-datetime
          readOnly: true
          type: string
      type: object
    Result:
      description: Possible result values from the function mock invocation.
      properties:
        undefined:
          $ref: "#/components/schemas/Empty"
          description: The result is undefined, meaning the result could not be computed.
        value:
          description: The result is an actual value. The type of the value must match that of the type declared by the service.
      type: object
    Ruleset:
      description: "`Ruleset` is an immutable copy of `Source` with a globally unique identifier and a creation time."
      properties:
        attachmentPoint:
          description: "Immutable. Intended resource to which this Ruleset should be released. May be left blank to signify the resource associated with the default release. Expected format: firestore.googleapis.com/projects//databases/"
          type: string
        createTime:
          description: Output only. Time the `Ruleset` was created.
          format: google-datetime
          readOnly: true
          type: string
        metadata:
          $ref: "#/components/schemas/Metadata"
          description: Output only. The metadata for this ruleset.
          readOnly: true
        name:
          description: "Output only. Name of the `Ruleset`. The ruleset_id is auto generated by the service. Format: `projects/{project_id}/rulesets/{ruleset_id}`"
          readOnly: true
          type: string
        source:
          $ref: "#/components/schemas/Source"
          description: Required. `Source` for the `Ruleset`.
      type: object
    Source:
      description: "`Source` is one or more `File` messages comprising a logical set of rules."
      properties:
        files:
          description: Required. `File` set constituting the `Source` bundle.
          items:
            $ref: "#/components/schemas/File"
          type: array
      type: object
    SourcePosition:
      description: Position in the `Source` content including its line, column number, and an index of the `File` in the `Source` message. Used for debug purposes.
      properties:
        column:
          description: First column on the source line associated with the source fragment.
          format: int32
          type: integer
        currentOffset:
          description: Start position relative to the beginning of the file.
          format: int32
          type: integer
        endOffset:
          description: End position relative to the beginning of the file.
          format: int32
          type: integer
        fileName:
          description: Name of the `File`.
          type: string
        line:
          description: Line number of the source fragment. 1-based.
          format: int32
          type: integer
      type: object
    TestCase:
      description: "`TestCase` messages provide the request context and an expectation as to whether the given context will be allowed or denied. Test cases may specify the `request`, `resource`, and `function_mocks` to mock a function call to a service-provided function. The `request` object represents context present at request-time. The `resource` is the value of the target resource as it appears in persistent storage before the request is executed."
      properties:
        expectation:
          description: Test expectation.
          enum:
            - EXPECTATION_UNSPECIFIED
            - ALLOW
            - DENY
          type: string
        expressionReportLevel:
          description: Specifies what should be included in the response.
          enum:
            - LEVEL_UNSPECIFIED
            - NONE
            - FULL
            - VISITED
          type: string
        functionMocks:
          description: Optional function mocks for service-defined functions. If not set, any service defined function is expected to return an error, which may or may not influence the test outcome.
          items:
            $ref: "#/components/schemas/FunctionMock"
          type: array
        pathEncoding:
          description: Specifies whether paths (such as request.path) are encoded and how.
          enum:
            - ENCODING_UNSPECIFIED
            - URL_ENCODED
            - PLAIN
          type: string
        request:
          description: "Request context. The exact format of the request context is service-dependent. See the appropriate service documentation for information about the supported fields and types on the request. Minimally, all services support the following fields and types: Request field | Type ---------------|----------------- auth.uid | `string` auth.token | `map` headers | `map` method | `string` params | `map` path | `string` time | `google.protobuf.Timestamp` If the request value is not well-formed for the service, the request will be rejected as an invalid argument."
        resource:
          description: Optional resource value as it appears in persistent storage before the request is fulfilled. The resource type depends on the `request.path` value.
      type: object
    TestResult:
      description: Test result message containing the state of the test as well as a description and source position for test failures.
      properties:
        debugMessages:
          description: 'Debug messages related to test execution issues encountered during evaluation. Debug messages may be related to too many or too few invocations of function mocks or to runtime errors that occur during evaluation. For example: ```Unable to read variable [name: "resource"]```'
          items:
            type: string
          type: array
        errorPosition:
          $ref: "#/components/schemas/SourcePosition"
          description: "Position in the `Source` or `Ruleset` where the principle runtime error occurs. Evaluation of an expression may result in an error. Rules are deny by default, so a `DENY` expectation when an error is generated is valid. When there is a `DENY` with an error, the `SourcePosition` is returned. E.g. `error_position { line: 19 column: 37 }`"
        expressionReports:
          description: The mapping from expression in the ruleset AST to the values they were evaluated to. Partially-nested to mirror AST structure. Note that this field is actually tracking expressions and not permission statements in contrast to the "visited_expressions" field above. Literal expressions are omitted.
          items:
            $ref: "#/components/schemas/ExpressionReport"
          type: array
        functionCalls:
          description: The set of function calls made to service-defined methods. Function calls are included in the order in which they are encountered during evaluation, are provided for both mocked and unmocked functions, and included on the response regardless of the test `state`.
          items:
            $ref: "#/components/schemas/FunctionCall"
          type: array
        state:
          description: State of the test.
          enum:
            - STATE_UNSPECIFIED
            - SUCCESS
            - FAILURE
          type: string
        visitedExpressions:
          description: "The set of visited permission expressions for a given test. This returns the positions and evaluation results of all visited permission expressions which were relevant to the test case, e.g. ``` match /path { allow read if: } ``` For a detailed report of the intermediate evaluation states, see the `expression_reports` field"
          items:
            $ref: "#/components/schemas/VisitedExpression"
          type: array
      type: object
    TestRulesetRequest:
      description: The request for FirebaseRulesService.TestRuleset.
      properties:
        source:
          $ref: "#/components/schemas/Source"
          description: Optional `Source` to be checked for correctness. This field must not be set when the resource name refers to a `Ruleset`.
        testSuite:
          $ref: "#/components/schemas/TestSuite"
          description: The tests to execute against the `Source`. When `Source` is provided inline, the test cases will only be run if the `Source` is syntactically and semantically valid. Inline `TestSuite` to run.
      type: object
    TestRulesetResponse:
      description: The response for FirebaseRulesService.TestRuleset.
      properties:
        issues:
          description: Syntactic and semantic `Source` issues of varying severity. Issues of `ERROR` severity will prevent tests from executing.
          items:
            $ref: "#/components/schemas/Issue"
          type: array
        testResults:
          description: The set of test results given the test cases in the `TestSuite`. The results will appear in the same order as the test cases appear in the `TestSuite`.
          items:
            $ref: "#/components/schemas/TestResult"
          type: array
      type: object
    TestSuite:
      description: "`TestSuite` is a collection of `TestCase` instances that validate the logical correctness of a `Ruleset`. The `TestSuite` may be referenced in-line within a `TestRuleset` invocation or as part of a `Release` object as a pre-release check."
      properties:
        testCases:
          description: Collection of test cases associated with the `TestSuite`.
          items:
            $ref: "#/components/schemas/TestCase"
          type: array
      type: object
    UpdateReleaseRequest:
      description: The request for FirebaseRulesService.UpdateRelease.
      properties:
        release:
          $ref: "#/components/schemas/Release"
          description: Required. `Release` to update.
        updateMask:
          description: Specifies which fields to update.
          format: google-fieldmask
          type: string
      type: object
    ValueCount:
      description: Tuple for how many times an Expression was evaluated to a particular ExpressionValue.
      properties:
        count:
          description: The amount of times that expression returned.
          format: int32
          type: integer
        value:
          description: The return value of the expression
      type: object
    VisitedExpression:
      description: Store the position and access outcome for an expression visited in rules.
      properties:
        sourcePosition:
          $ref: "#/components/schemas/SourcePosition"
          description: Position in the `Source` or `Ruleset` where an expression was visited.
        value:
          description: The evaluated value for the visited expression, e.g. true/false
      type: object
  securitySchemes:
    Oauth2:
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/cloud-platform: See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.
            https://www.googleapis.com/auth/firebase: View and administer all your Firebase data and settings
            https://www.googleapis.com/auth/firebase.readonly: View all your Firebase data and settings
      type: oauth2
    Oauth2c:
      description: Oauth 2.0 authorizationCode authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/cloud-platform: See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.
            https://www.googleapis.com/auth/firebase: View and administer all your Firebase data and settings
            https://www.googleapis.com/auth/firebase.readonly: View all your Firebase data and settings
          tokenUrl: https://accounts.google.com/o/oauth2/token
      type: oauth2

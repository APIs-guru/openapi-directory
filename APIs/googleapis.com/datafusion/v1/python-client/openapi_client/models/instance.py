# coding: utf-8

"""
    Cloud Data Fusion API

    Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.accelerator import Accelerator
from openapi_client.models.crypto_key_config import CryptoKeyConfig
from openapi_client.models.event_publish_config import EventPublishConfig
from openapi_client.models.network_config import NetworkConfig
from openapi_client.models.version import Version
from typing import Optional, Set
from typing_extensions import Self

class Instance(BaseModel):
    """
    Represents a Data Fusion instance.
    """ # noqa: E501
    accelerators: Optional[List[Accelerator]] = Field(default=None, description="Output only. List of accelerators enabled for this CDF instance.")
    api_endpoint: Optional[StrictStr] = Field(default=None, description="Output only. Endpoint on which the REST APIs is accessible.", alias="apiEndpoint")
    available_version: Optional[List[Version]] = Field(default=None, description="Output only. Available versions that the instance can be upgraded to using UpdateInstanceRequest.", alias="availableVersion")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the instance was created.", alias="createTime")
    crypto_key_config: Optional[CryptoKeyConfig] = Field(default=None, alias="cryptoKeyConfig")
    dataplex_data_lineage_integration_enabled: Optional[StrictBool] = Field(default=None, description="Optional. Option to enable the Dataplex Lineage Integration feature.", alias="dataplexDataLineageIntegrationEnabled")
    dataproc_service_account: Optional[StrictStr] = Field(default=None, description="User-managed service account to set on Dataproc when Cloud Data Fusion creates Dataproc to run data processing pipelines. This allows users to have fine-grained access control on Dataproc's accesses to cloud resources.", alias="dataprocServiceAccount")
    description: Optional[StrictStr] = Field(default=None, description="A description of this instance.")
    disabled_reason: Optional[List[StrictStr]] = Field(default=None, description="Output only. If the instance state is DISABLED, the reason for disabling the instance.", alias="disabledReason")
    display_name: Optional[StrictStr] = Field(default=None, description="Display name for an instance.", alias="displayName")
    enable_rbac: Optional[StrictBool] = Field(default=None, description="Option to enable granular role-based access control.", alias="enableRbac")
    enable_stackdriver_logging: Optional[StrictBool] = Field(default=None, description="Option to enable Stackdriver Logging.", alias="enableStackdriverLogging")
    enable_stackdriver_monitoring: Optional[StrictBool] = Field(default=None, description="Option to enable Stackdriver Monitoring.", alias="enableStackdriverMonitoring")
    enable_zone_separation: Optional[StrictBool] = Field(default=None, description="Option to enable granular zone separation.", alias="enableZoneSeparation")
    event_publish_config: Optional[EventPublishConfig] = Field(default=None, alias="eventPublishConfig")
    gcs_bucket: Optional[StrictStr] = Field(default=None, description="Output only. Cloud Storage bucket generated by Data Fusion in the customer project.", alias="gcsBucket")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The resource labels for instance to use to annotate any related underlying resources such as Compute Engine VMs. The character '=' is not allowed to be used within the labels.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The name of this instance is in the form of projects/{project}/locations/{location}/instances/{instance}.")
    network_config: Optional[NetworkConfig] = Field(default=None, alias="networkConfig")
    options: Optional[Dict[str, StrictStr]] = Field(default=None, description="Map of additional options used to configure the behavior of Data Fusion instance.")
    p4_service_account: Optional[StrictStr] = Field(default=None, description="Output only. P4 service account for the customer project.", alias="p4ServiceAccount")
    patch_revision: Optional[StrictStr] = Field(default=None, description="Optional. Current patch revision of the Data Fusion.", alias="patchRevision")
    private_instance: Optional[StrictBool] = Field(default=None, description="Specifies whether the Data Fusion instance should be private. If set to true, all Data Fusion nodes will have private IP addresses and will not be able to access the public internet.", alias="privateInstance")
    satisfies_pzs: Optional[StrictBool] = Field(default=None, description="Output only. Reserved for future use.", alias="satisfiesPzs")
    service_account: Optional[StrictStr] = Field(default=None, description="Output only. Deprecated. Use tenant_project_id instead to extract the tenant project ID.", alias="serviceAccount")
    service_endpoint: Optional[StrictStr] = Field(default=None, description="Output only. Endpoint on which the Data Fusion UI is accessible.", alias="serviceEndpoint")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of this Data Fusion instance.")
    state_message: Optional[StrictStr] = Field(default=None, description="Output only. Additional information about the current state of this Data Fusion instance if available.", alias="stateMessage")
    tenant_project_id: Optional[StrictStr] = Field(default=None, description="Output only. The name of the tenant project.", alias="tenantProjectId")
    type: Optional[StrictStr] = Field(default=None, description="Required. Instance type.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the instance was last updated.", alias="updateTime")
    version: Optional[StrictStr] = Field(default=None, description="Current version of the Data Fusion. Only specifiable in Update.")
    workforce_identity_service_endpoint: Optional[StrictStr] = Field(default=None, description="Output only. Endpoint on which the Data Fusion UI is accessible to third-party users", alias="workforceIdentityServiceEndpoint")
    zone: Optional[StrictStr] = Field(default=None, description="Name of the zone in which the Data Fusion instance will be created. Only DEVELOPER instances use this field.")
    __properties: ClassVar[List[str]] = ["accelerators", "apiEndpoint", "availableVersion", "createTime", "cryptoKeyConfig", "dataplexDataLineageIntegrationEnabled", "dataprocServiceAccount", "description", "disabledReason", "displayName", "enableRbac", "enableStackdriverLogging", "enableStackdriverMonitoring", "enableZoneSeparation", "eventPublishConfig", "gcsBucket", "labels", "name", "networkConfig", "options", "p4ServiceAccount", "patchRevision", "privateInstance", "satisfiesPzs", "serviceAccount", "serviceEndpoint", "state", "stateMessage", "tenantProjectId", "type", "updateTime", "version", "workforceIdentityServiceEndpoint", "zone"]

    @field_validator('disabled_reason')
    def disabled_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['DISABLED_REASON_UNSPECIFIED', 'KMS_KEY_ISSUE']):
                raise ValueError("each list item must be one of ('DISABLED_REASON_UNSPECIFIED', 'KMS_KEY_ISSUE')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'FAILED', 'DELETING', 'UPGRADING', 'RESTARTING', 'UPDATING', 'AUTO_UPDATING', 'AUTO_UPGRADING', 'DISABLED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'FAILED', 'DELETING', 'UPGRADING', 'RESTARTING', 'UPDATING', 'AUTO_UPDATING', 'AUTO_UPGRADING', 'DISABLED')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'BASIC', 'ENTERPRISE', 'DEVELOPER']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'BASIC', 'ENTERPRISE', 'DEVELOPER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Instance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "accelerators",
            "api_endpoint",
            "available_version",
            "create_time",
            "disabled_reason",
            "gcs_bucket",
            "name",
            "p4_service_account",
            "satisfies_pzs",
            "service_account",
            "service_endpoint",
            "state",
            "state_message",
            "tenant_project_id",
            "update_time",
            "workforce_identity_service_endpoint",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in accelerators (list)
        _items = []
        if self.accelerators:
            for _item_accelerators in self.accelerators:
                if _item_accelerators:
                    _items.append(_item_accelerators.to_dict())
            _dict['accelerators'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in available_version (list)
        _items = []
        if self.available_version:
            for _item_available_version in self.available_version:
                if _item_available_version:
                    _items.append(_item_available_version.to_dict())
            _dict['availableVersion'] = _items
        # override the default output from pydantic by calling `to_dict()` of crypto_key_config
        if self.crypto_key_config:
            _dict['cryptoKeyConfig'] = self.crypto_key_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event_publish_config
        if self.event_publish_config:
            _dict['eventPublishConfig'] = self.event_publish_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_config
        if self.network_config:
            _dict['networkConfig'] = self.network_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Instance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accelerators": [Accelerator.from_dict(_item) for _item in obj["accelerators"]] if obj.get("accelerators") is not None else None,
            "apiEndpoint": obj.get("apiEndpoint"),
            "availableVersion": [Version.from_dict(_item) for _item in obj["availableVersion"]] if obj.get("availableVersion") is not None else None,
            "createTime": obj.get("createTime"),
            "cryptoKeyConfig": CryptoKeyConfig.from_dict(obj["cryptoKeyConfig"]) if obj.get("cryptoKeyConfig") is not None else None,
            "dataplexDataLineageIntegrationEnabled": obj.get("dataplexDataLineageIntegrationEnabled"),
            "dataprocServiceAccount": obj.get("dataprocServiceAccount"),
            "description": obj.get("description"),
            "disabledReason": obj.get("disabledReason"),
            "displayName": obj.get("displayName"),
            "enableRbac": obj.get("enableRbac"),
            "enableStackdriverLogging": obj.get("enableStackdriverLogging"),
            "enableStackdriverMonitoring": obj.get("enableStackdriverMonitoring"),
            "enableZoneSeparation": obj.get("enableZoneSeparation"),
            "eventPublishConfig": EventPublishConfig.from_dict(obj["eventPublishConfig"]) if obj.get("eventPublishConfig") is not None else None,
            "gcsBucket": obj.get("gcsBucket"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "networkConfig": NetworkConfig.from_dict(obj["networkConfig"]) if obj.get("networkConfig") is not None else None,
            "options": obj.get("options"),
            "p4ServiceAccount": obj.get("p4ServiceAccount"),
            "patchRevision": obj.get("patchRevision"),
            "privateInstance": obj.get("privateInstance"),
            "satisfiesPzs": obj.get("satisfiesPzs"),
            "serviceAccount": obj.get("serviceAccount"),
            "serviceEndpoint": obj.get("serviceEndpoint"),
            "state": obj.get("state"),
            "stateMessage": obj.get("stateMessage"),
            "tenantProjectId": obj.get("tenantProjectId"),
            "type": obj.get("type"),
            "updateTime": obj.get("updateTime"),
            "version": obj.get("version"),
            "workforceIdentityServiceEndpoint": obj.get("workforceIdentityServiceEndpoint"),
            "zone": obj.get("zone")
        })
        return _obj



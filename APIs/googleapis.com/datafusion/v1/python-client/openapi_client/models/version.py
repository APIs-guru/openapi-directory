# coding: utf-8

"""
    Cloud Data Fusion API

    Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Version(BaseModel):
    """
    The Data Fusion version. This proto message stores information about certain Data Fusion version, which is used for Data Fusion version upgrade.
    """ # noqa: E501
    available_features: Optional[List[StrictStr]] = Field(default=None, description="Represents a list of available feature names for a given version.", alias="availableFeatures")
    default_version: Optional[StrictBool] = Field(default=None, description="Whether this is currently the default version for Cloud Data Fusion", alias="defaultVersion")
    type: Optional[StrictStr] = Field(default=None, description="Type represents the release availability of the version")
    version_number: Optional[StrictStr] = Field(default=None, description="The version number of the Data Fusion instance, such as '6.0.1.0'.", alias="versionNumber")
    __properties: ClassVar[List[str]] = ["availableFeatures", "defaultVersion", "type", "versionNumber"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'TYPE_PREVIEW', 'TYPE_GENERAL_AVAILABILITY']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'TYPE_PREVIEW', 'TYPE_GENERAL_AVAILABILITY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Version from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Version from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availableFeatures": obj.get("availableFeatures"),
            "defaultVersion": obj.get("defaultVersion"),
            "type": obj.get("type"),
            "versionNumber": obj.get("versionNumber")
        })
        return _obj



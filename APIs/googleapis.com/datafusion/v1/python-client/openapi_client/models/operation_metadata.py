# coding: utf-8

"""
    Cloud Data Fusion API

    Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OperationMetadata(BaseModel):
    """
    Represents the metadata of a long-running operation.
    """ # noqa: E501
    additional_status: Optional[Dict[str, StrictStr]] = Field(default=None, description="Map to hold any additional status info for the operation If there is an accelerator being enabled/disabled/deleted, this will be populated with accelerator name as key and status as ENABLING, DISABLING or DELETING", alias="additionalStatus")
    api_version: Optional[StrictStr] = Field(default=None, description="API version used to start the operation.", alias="apiVersion")
    create_time: Optional[StrictStr] = Field(default=None, description="The time the operation was created.", alias="createTime")
    end_time: Optional[StrictStr] = Field(default=None, description="The time the operation finished running.", alias="endTime")
    requested_cancellation: Optional[StrictBool] = Field(default=None, description="Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.", alias="requestedCancellation")
    status_detail: Optional[StrictStr] = Field(default=None, description="Human-readable status of the operation if any.", alias="statusDetail")
    target: Optional[StrictStr] = Field(default=None, description="Server-defined resource path for the target of the operation.")
    verb: Optional[StrictStr] = Field(default=None, description="Name of the verb executed by the operation.")
    __properties: ClassVar[List[str]] = ["additionalStatus", "apiVersion", "createTime", "endTime", "requestedCancellation", "statusDetail", "target", "verb"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OperationMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OperationMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalStatus": obj.get("additionalStatus"),
            "apiVersion": obj.get("apiVersion"),
            "createTime": obj.get("createTime"),
            "endTime": obj.get("endTime"),
            "requestedCancellation": obj.get("requestedCancellation"),
            "statusDetail": obj.get("statusDetail"),
            "target": obj.get("target"),
            "verb": obj.get("verb")
        })
        return _obj



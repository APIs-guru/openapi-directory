# coding: utf-8

"""
    Cloud Data Fusion API

    Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.private_service_connect_config import PrivateServiceConnectConfig
from typing import Optional, Set
from typing_extensions import Self

class NetworkConfig(BaseModel):
    """
    Network configuration for a Data Fusion instance. These configurations are used for peering with the customer network. Configurations are optional when a public Data Fusion instance is to be created. However, providing these configurations allows several benefits, such as reduced network latency while accessing the customer resources from managed Data Fusion instance nodes, as well as access to the customer on-prem resources.
    """ # noqa: E501
    connection_type: Optional[StrictStr] = Field(default=None, description="Optional. Type of connection for establishing private IP connectivity between the Data Fusion customer project VPC and the corresponding tenant project from a predefined list of available connection modes. If this field is unspecified for a private instance, VPC peering is used.", alias="connectionType")
    ip_allocation: Optional[StrictStr] = Field(default=None, description="Optional. The IP range in CIDR notation to use for the managed Data Fusion instance nodes. This range must not overlap with any other ranges used in the Data Fusion instance network. This is required only when using connection type VPC_PEERING. Format: a.b.c.d/22 Example: 192.168.0.0/22", alias="ipAllocation")
    network: Optional[StrictStr] = Field(default=None, description="Optional. Name of the network in the customer project with which the Tenant Project will be peered for executing pipelines. This is required only when using connection type VPC peering. In case of shared VPC where the network resides in another host project the network should specified in the form of projects/{host-project-id}/global/networks/{network}. This is only required for connectivity type VPC_PEERING.")
    private_service_connect_config: Optional[PrivateServiceConnectConfig] = Field(default=None, alias="privateServiceConnectConfig")
    __properties: ClassVar[List[str]] = ["connectionType", "ipAllocation", "network", "privateServiceConnectConfig"]

    @field_validator('connection_type')
    def connection_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONNECTION_TYPE_UNSPECIFIED', 'VPC_PEERING', 'PRIVATE_SERVICE_CONNECT_INTERFACES']):
            raise ValueError("must be one of enum values ('CONNECTION_TYPE_UNSPECIFIED', 'VPC_PEERING', 'PRIVATE_SERVICE_CONNECT_INTERFACES')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of private_service_connect_config
        if self.private_service_connect_config:
            _dict['privateServiceConnectConfig'] = self.private_service_connect_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "connectionType": obj.get("connectionType"),
            "ipAllocation": obj.get("ipAllocation"),
            "network": obj.get("network"),
            "privateServiceConnectConfig": PrivateServiceConnectConfig.from_dict(obj["privateServiceConnectConfig"]) if obj.get("privateServiceConnectConfig") is not None else None
        })
        return _obj



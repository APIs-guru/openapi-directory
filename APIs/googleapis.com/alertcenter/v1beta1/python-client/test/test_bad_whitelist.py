# coding: utf-8

"""
    Google Workspace Alert Center API

    Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.bad_whitelist import BadWhitelist

class TestBadWhitelist(unittest.TestCase):
    """BadWhitelist unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BadWhitelist:
        """Test BadWhitelist
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BadWhitelist`
        """
        model = BadWhitelist()
        if include_optional:
            return BadWhitelist(
                domain_id = openapi_client.models.domain_id.DomainId(
                    customer_primary_domain = '', ),
                malicious_entity = openapi_client.models.malicious_entity.MaliciousEntity(
                    display_name = '', 
                    entity = openapi_client.models.user.User(
                        display_name = '', 
                        email_address = '', ), 
                    from_header = '', ),
                messages = [
                    openapi_client.models.gmail_message_info.GmailMessageInfo(
                        attachments_sha256_hash = [
                            ''
                            ], 
                        date = '', 
                        md5_hash_message_body = '', 
                        md5_hash_subject = '', 
                        message_body_snippet = '', 
                        message_id = '', 
                        recipient = '', 
                        sent_time = '', 
                        subject_text = '', )
                    ],
                source_ip = ''
            )
        else:
            return BadWhitelist(
        )
        """

    def testBadWhitelist(self):
        """Test BadWhitelist"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Google Workspace Alert Center API

    Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.sensitive_admin_action import SensitiveAdminAction

class TestSensitiveAdminAction(unittest.TestCase):
    """SensitiveAdminAction unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SensitiveAdminAction:
        """Test SensitiveAdminAction
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SensitiveAdminAction`
        """
        model = SensitiveAdminAction()
        if include_optional:
            return SensitiveAdminAction(
                actor_email = '',
                event_time = '',
                primary_admin_changed_event = openapi_client.models.primary_admin_changed_event.PrimaryAdminChangedEvent(
                    domain = '', 
                    previous_admin_email = '', 
                    updated_admin_email = '', ),
                sso_profile_created_event = openapi_client.models.sso_profile_created_event.SSOProfileCreatedEvent(
                    inbound_sso_profile_name = '', ),
                sso_profile_deleted_event = openapi_client.models.sso_profile_deleted_event.SSOProfileDeletedEvent(
                    inbound_sso_profile_name = '', ),
                sso_profile_updated_event = openapi_client.models.sso_profile_updated_event.SSOProfileUpdatedEvent(
                    inbound_sso_profile_changes = '', 
                    inbound_sso_profile_name = '', ),
                super_admin_password_reset_event = openapi_client.models.super_admin_password_reset_event.SuperAdminPasswordResetEvent(
                    user_email = '', )
            )
        else:
            return SensitiveAdminAction(
        )
        """

    def testSensitiveAdminAction(self):
        """Test SensitiveAdminAction"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

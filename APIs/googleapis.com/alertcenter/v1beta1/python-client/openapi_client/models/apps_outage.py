# coding: utf-8

"""
    Google Workspace Alert Center API

    Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.merge_info import MergeInfo
from typing import Optional, Set
from typing_extensions import Self

class AppsOutage(BaseModel):
    """
    An outage incident reported for a Google Workspace service.
    """ # noqa: E501
    dashboard_uri: Optional[StrictStr] = Field(default=None, description="Link to the outage event in Google Workspace Status Dashboard", alias="dashboardUri")
    incident_tracking_id: Optional[StrictStr] = Field(default=None, description="Incident tracking ID.", alias="incidentTrackingId")
    merge_info: Optional[MergeInfo] = Field(default=None, alias="mergeInfo")
    next_update_time: Optional[StrictStr] = Field(default=None, description="Timestamp by which the next update is expected to arrive.", alias="nextUpdateTime")
    products: Optional[List[StrictStr]] = Field(default=None, description="List of products impacted by the outage.")
    resolution_time: Optional[StrictStr] = Field(default=None, description="Timestamp when the outage is expected to be resolved, or has confirmed resolution. Provided only when known.", alias="resolutionTime")
    status: Optional[StrictStr] = Field(default=None, description="Current outage status.")
    __properties: ClassVar[List[str]] = ["dashboardUri", "incidentTrackingId", "mergeInfo", "nextUpdateTime", "products", "resolutionTime", "status"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATUS_UNSPECIFIED', 'NEW', 'ONGOING', 'RESOLVED', 'FALSE_POSITIVE', 'PARTIALLY_RESOLVED', 'MERGED', 'DOWNGRADED']):
            raise ValueError("must be one of enum values ('STATUS_UNSPECIFIED', 'NEW', 'ONGOING', 'RESOLVED', 'FALSE_POSITIVE', 'PARTIALLY_RESOLVED', 'MERGED', 'DOWNGRADED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppsOutage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of merge_info
        if self.merge_info:
            _dict['mergeInfo'] = self.merge_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppsOutage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dashboardUri": obj.get("dashboardUri"),
            "incidentTrackingId": obj.get("incidentTrackingId"),
            "mergeInfo": MergeInfo.from_dict(obj["mergeInfo"]) if obj.get("mergeInfo") is not None else None,
            "nextUpdateTime": obj.get("nextUpdateTime"),
            "products": obj.get("products"),
            "resolutionTime": obj.get("resolutionTime"),
            "status": obj.get("status")
        })
        return _obj



# coding: utf-8

"""
    Google Workspace Alert Center API

    Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.attachment import Attachment
from typing import Optional, Set
from typing_extensions import Self

class GoogleOperations(BaseModel):
    """
    An incident reported by Google Operations for a Google Workspace application.
    """ # noqa: E501
    affected_user_emails: Optional[List[StrictStr]] = Field(default=None, description="The list of emails which correspond to the users directly affected by the incident.", alias="affectedUserEmails")
    attachment_data: Optional[Attachment] = Field(default=None, alias="attachmentData")
    description: Optional[StrictStr] = Field(default=None, description="A detailed, freeform incident description.")
    domain: Optional[StrictStr] = Field(default=None, description="Customer domain for email template personalization.")
    header: Optional[StrictStr] = Field(default=None, description="A header to display above the incident message. Typically used to attach a localized notice on the timeline for followup comms translations.")
    title: Optional[StrictStr] = Field(default=None, description="A one-line incident description.")
    __properties: ClassVar[List[str]] = ["affectedUserEmails", "attachmentData", "description", "domain", "header", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleOperations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attachment_data
        if self.attachment_data:
            _dict['attachmentData'] = self.attachment_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleOperations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "affectedUserEmails": obj.get("affectedUserEmails"),
            "attachmentData": Attachment.from_dict(obj["attachmentData"]) if obj.get("attachmentData") is not None else None,
            "description": obj.get("description"),
            "domain": obj.get("domain"),
            "header": obj.get("header"),
            "title": obj.get("title")
        })
        return _obj



# coding: utf-8

"""
    Google Workspace Alert Center API

    Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.primary_admin_changed_event import PrimaryAdminChangedEvent
from openapi_client.models.sso_profile_created_event import SSOProfileCreatedEvent
from openapi_client.models.sso_profile_deleted_event import SSOProfileDeletedEvent
from openapi_client.models.sso_profile_updated_event import SSOProfileUpdatedEvent
from openapi_client.models.super_admin_password_reset_event import SuperAdminPasswordResetEvent
from typing import Optional, Set
from typing_extensions import Self

class SensitiveAdminAction(BaseModel):
    """
    Alert that is triggered when Sensitive Admin Action occur in customer account.
    """ # noqa: E501
    actor_email: Optional[StrictStr] = Field(default=None, description="Email of person who performed the action", alias="actorEmail")
    event_time: Optional[StrictStr] = Field(default=None, description="The time at which event occurred", alias="eventTime")
    primary_admin_changed_event: Optional[PrimaryAdminChangedEvent] = Field(default=None, alias="primaryAdminChangedEvent")
    sso_profile_created_event: Optional[SSOProfileCreatedEvent] = Field(default=None, alias="ssoProfileCreatedEvent")
    sso_profile_deleted_event: Optional[SSOProfileDeletedEvent] = Field(default=None, alias="ssoProfileDeletedEvent")
    sso_profile_updated_event: Optional[SSOProfileUpdatedEvent] = Field(default=None, alias="ssoProfileUpdatedEvent")
    super_admin_password_reset_event: Optional[SuperAdminPasswordResetEvent] = Field(default=None, alias="superAdminPasswordResetEvent")
    __properties: ClassVar[List[str]] = ["actorEmail", "eventTime", "primaryAdminChangedEvent", "ssoProfileCreatedEvent", "ssoProfileDeletedEvent", "ssoProfileUpdatedEvent", "superAdminPasswordResetEvent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SensitiveAdminAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of primary_admin_changed_event
        if self.primary_admin_changed_event:
            _dict['primaryAdminChangedEvent'] = self.primary_admin_changed_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sso_profile_created_event
        if self.sso_profile_created_event:
            _dict['ssoProfileCreatedEvent'] = self.sso_profile_created_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sso_profile_deleted_event
        if self.sso_profile_deleted_event:
            _dict['ssoProfileDeletedEvent'] = self.sso_profile_deleted_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sso_profile_updated_event
        if self.sso_profile_updated_event:
            _dict['ssoProfileUpdatedEvent'] = self.sso_profile_updated_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of super_admin_password_reset_event
        if self.super_admin_password_reset_event:
            _dict['superAdminPasswordResetEvent'] = self.super_admin_password_reset_event.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SensitiveAdminAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actorEmail": obj.get("actorEmail"),
            "eventTime": obj.get("eventTime"),
            "primaryAdminChangedEvent": PrimaryAdminChangedEvent.from_dict(obj["primaryAdminChangedEvent"]) if obj.get("primaryAdminChangedEvent") is not None else None,
            "ssoProfileCreatedEvent": SSOProfileCreatedEvent.from_dict(obj["ssoProfileCreatedEvent"]) if obj.get("ssoProfileCreatedEvent") is not None else None,
            "ssoProfileDeletedEvent": SSOProfileDeletedEvent.from_dict(obj["ssoProfileDeletedEvent"]) if obj.get("ssoProfileDeletedEvent") is not None else None,
            "ssoProfileUpdatedEvent": SSOProfileUpdatedEvent.from_dict(obj["ssoProfileUpdatedEvent"]) if obj.get("ssoProfileUpdatedEvent") is not None else None,
            "superAdminPasswordResetEvent": SuperAdminPasswordResetEvent.from_dict(obj["superAdminPasswordResetEvent"]) if obj.get("superAdminPasswordResetEvent") is not None else None
        })
        return _obj



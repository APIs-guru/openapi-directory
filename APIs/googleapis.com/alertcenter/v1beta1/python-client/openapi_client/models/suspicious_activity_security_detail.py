# coding: utf-8

"""
    Google Workspace Alert Center API

    Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SuspiciousActivitySecurityDetail(BaseModel):
    """
    Detailed information of a single MDM suspicious activity event.
    """ # noqa: E501
    device_id: Optional[StrictStr] = Field(default=None, description="Required. The device ID.", alias="deviceId")
    device_model: Optional[StrictStr] = Field(default=None, description="The model of the device.", alias="deviceModel")
    device_property: Optional[StrictStr] = Field(default=None, description="The device property which was changed.", alias="deviceProperty")
    device_type: Optional[StrictStr] = Field(default=None, description="The type of the device.", alias="deviceType")
    ios_vendor_id: Optional[StrictStr] = Field(default=None, description="Required for iOS, empty for others.", alias="iosVendorId")
    new_value: Optional[StrictStr] = Field(default=None, description="The new value of the device property after the change.", alias="newValue")
    old_value: Optional[StrictStr] = Field(default=None, description="The old value of the device property before the change.", alias="oldValue")
    resource_id: Optional[StrictStr] = Field(default=None, description="The device resource ID.", alias="resourceId")
    serial_number: Optional[StrictStr] = Field(default=None, description="The serial number of the device.", alias="serialNumber")
    __properties: ClassVar[List[str]] = ["deviceId", "deviceModel", "deviceProperty", "deviceType", "iosVendorId", "newValue", "oldValue", "resourceId", "serialNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SuspiciousActivitySecurityDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SuspiciousActivitySecurityDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deviceId": obj.get("deviceId"),
            "deviceModel": obj.get("deviceModel"),
            "deviceProperty": obj.get("deviceProperty"),
            "deviceType": obj.get("deviceType"),
            "iosVendorId": obj.get("iosVendorId"),
            "newValue": obj.get("newValue"),
            "oldValue": obj.get("oldValue"),
            "resourceId": obj.get("resourceId"),
            "serialNumber": obj.get("serialNumber")
        })
        return _obj



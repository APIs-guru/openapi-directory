# coding: utf-8

"""
    Google Workspace Alert Center API

    Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.domain_id import DomainId
from openapi_client.models.gmail_message_info import GmailMessageInfo
from openapi_client.models.malicious_entity import MaliciousEntity
from typing import Optional, Set
from typing_extensions import Self

class BadWhitelist(BaseModel):
    """
    Alert for setting the domain or IP that malicious email comes from as whitelisted domain or IP in Gmail advanced settings.
    """ # noqa: E501
    domain_id: Optional[DomainId] = Field(default=None, alias="domainId")
    malicious_entity: Optional[MaliciousEntity] = Field(default=None, alias="maliciousEntity")
    messages: Optional[List[GmailMessageInfo]] = Field(default=None, description="The list of messages contained by this alert.")
    source_ip: Optional[StrictStr] = Field(default=None, description="The source IP address of the malicious email, for example, `127.0.0.1`.", alias="sourceIp")
    __properties: ClassVar[List[str]] = ["domainId", "maliciousEntity", "messages", "sourceIp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BadWhitelist from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of domain_id
        if self.domain_id:
            _dict['domainId'] = self.domain_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of malicious_entity
        if self.malicious_entity:
            _dict['maliciousEntity'] = self.malicious_entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item_messages in self.messages:
                if _item_messages:
                    _items.append(_item_messages.to_dict())
            _dict['messages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BadWhitelist from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "domainId": DomainId.from_dict(obj["domainId"]) if obj.get("domainId") is not None else None,
            "maliciousEntity": MaliciousEntity.from_dict(obj["maliciousEntity"]) if obj.get("maliciousEntity") is not None else None,
            "messages": [GmailMessageInfo.from_dict(_item) for _item in obj["messages"]] if obj.get("messages") is not None else None,
            "sourceIp": obj.get("sourceIp")
        })
        return _obj



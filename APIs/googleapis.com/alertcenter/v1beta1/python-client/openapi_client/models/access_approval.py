# coding: utf-8

"""
    Google Workspace Alert Center API

    Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.support_ticket import SupportTicket
from typing import Optional, Set
from typing_extensions import Self

class AccessApproval(BaseModel):
    """
    Alert that is triggered when Google support requests to access customer data.
    """ # noqa: E501
    justification_reason: Optional[List[StrictStr]] = Field(default=None, description="Justification for data access based on justification enums.", alias="justificationReason")
    office_location: Optional[StrictStr] = Field(default=None, description="Office location of Google staff requesting access such as \"US\".", alias="officeLocation")
    products: Optional[List[StrictStr]] = Field(default=None, description="Products within scope of the Access Approvals request.")
    request_id: Optional[StrictStr] = Field(default=None, description="ID of the Access Approvals request. This is a helpful field when requesting support from Google.", alias="requestId")
    scope: Optional[StrictStr] = Field(default=None, description="Scope of access, also known as a resource. This is further narrowed down by the product field.")
    tickets: Optional[List[SupportTicket]] = Field(default=None, description="Support tickets related to this Access Approvals request. Populated if there is an associated case number.")
    __properties: ClassVar[List[str]] = ["justificationReason", "officeLocation", "products", "requestId", "scope", "tickets"]

    @field_validator('justification_reason')
    def justification_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['JUSTIFICATION_UNSPECIFIED', 'CUSTOMER_INITIATED_SUPPORT', 'GOOGLE_INITIATED_REVIEW', 'GOOGLE_INITIATED_SERVICE', 'THIRD_PARTY_DATA_REQUEST', 'GOOGLE_RESPONSE_TO_PRODUCTION_ALERT']):
                raise ValueError("each list item must be one of ('JUSTIFICATION_UNSPECIFIED', 'CUSTOMER_INITIATED_SUPPORT', 'GOOGLE_INITIATED_REVIEW', 'GOOGLE_INITIATED_SERVICE', 'THIRD_PARTY_DATA_REQUEST', 'GOOGLE_RESPONSE_TO_PRODUCTION_ALERT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccessApproval from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tickets (list)
        _items = []
        if self.tickets:
            for _item_tickets in self.tickets:
                if _item_tickets:
                    _items.append(_item_tickets.to_dict())
            _dict['tickets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccessApproval from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "justificationReason": obj.get("justificationReason"),
            "officeLocation": obj.get("officeLocation"),
            "products": obj.get("products"),
            "requestId": obj.get("requestId"),
            "scope": obj.get("scope"),
            "tickets": [SupportTicket.from_dict(_item) for _item in obj["tickets"]] if obj.get("tickets") is not None else None
        })
        return _obj



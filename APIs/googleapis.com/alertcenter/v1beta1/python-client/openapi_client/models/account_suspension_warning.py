# coding: utf-8

"""
    Google Workspace Alert Center API

    Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account_suspension_details import AccountSuspensionDetails
from typing import Optional, Set
from typing_extensions import Self

class AccountSuspensionWarning(BaseModel):
    """
    A warning that the customer's account is about to be suspended.
    """ # noqa: E501
    appeal_window: Optional[StrictStr] = Field(default=None, description="The amount of time remaining to appeal an imminent suspension. After this window has elapsed, the account will be suspended. Only populated if the account suspension is in WARNING state.", alias="appealWindow")
    state: Optional[StrictStr] = Field(default=None, description="Account suspension warning state.")
    suspension_details: Optional[List[AccountSuspensionDetails]] = Field(default=None, description="Details about why an account is being suspended.", alias="suspensionDetails")
    __properties: ClassVar[List[str]] = ["appealWindow", "state", "suspensionDetails"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACCOUNT_SUSPENSION_WARNING_STATE_UNSPECIFIED', 'WARNING', 'SUSPENDED', 'APPEAL_APPROVED', 'APPEAL_SUBMITTED']):
            raise ValueError("must be one of enum values ('ACCOUNT_SUSPENSION_WARNING_STATE_UNSPECIFIED', 'WARNING', 'SUSPENDED', 'APPEAL_APPROVED', 'APPEAL_SUBMITTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountSuspensionWarning from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in suspension_details (list)
        _items = []
        if self.suspension_details:
            for _item_suspension_details in self.suspension_details:
                if _item_suspension_details:
                    _items.append(_item_suspension_details.to_dict())
            _dict['suspensionDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountSuspensionWarning from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appealWindow": obj.get("appealWindow"),
            "state": obj.get("state"),
            "suspensionDetails": [AccountSuspensionDetails.from_dict(_item) for _item in obj["suspensionDetails"]] if obj.get("suspensionDetails") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Workspace Alert Center API

    Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.match_info import MatchInfo
from openapi_client.models.resource_info import ResourceInfo
from openapi_client.models.rule_info import RuleInfo
from typing import Optional, Set
from typing_extensions import Self

class RuleViolationInfo(BaseModel):
    """
    Common alert information about violated rules that are configured by Google Workspace administrators.
    """ # noqa: E501
    data_source: Optional[StrictStr] = Field(default=None, description="Source of the data.", alias="dataSource")
    match_info: Optional[List[MatchInfo]] = Field(default=None, description="List of matches that were found in the resource content.", alias="matchInfo")
    recipients: Optional[List[StrictStr]] = Field(default=None, description="Resource recipients. For Drive, they are grantees that the Drive file was shared with at the time of rule triggering. Valid values include user emails, group emails, domains, or 'anyone' if the file was publicly accessible. If the file was private the recipients list will be empty. For Gmail, they are emails of the users or groups that the Gmail message was sent to.")
    resource_info: Optional[ResourceInfo] = Field(default=None, alias="resourceInfo")
    rule_info: Optional[RuleInfo] = Field(default=None, alias="ruleInfo")
    suppressed_action_types: Optional[List[StrictStr]] = Field(default=None, description="Actions suppressed due to other actions with higher priority.", alias="suppressedActionTypes")
    trigger: Optional[StrictStr] = Field(default=None, description="Trigger of the rule.")
    triggered_action_info: Optional[List[Dict[str, Any]]] = Field(default=None, description="Metadata related to the triggered actions.", alias="triggeredActionInfo")
    triggered_action_types: Optional[List[StrictStr]] = Field(default=None, description="Actions applied as a consequence of the rule being triggered.", alias="triggeredActionTypes")
    triggering_user_email: Optional[StrictStr] = Field(default=None, description="Email of the user who caused the violation. Value could be empty if not applicable, for example, a violation found by drive continuous scan.", alias="triggeringUserEmail")
    __properties: ClassVar[List[str]] = ["dataSource", "matchInfo", "recipients", "resourceInfo", "ruleInfo", "suppressedActionTypes", "trigger", "triggeredActionInfo", "triggeredActionTypes", "triggeringUserEmail"]

    @field_validator('data_source')
    def data_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_SOURCE_UNSPECIFIED', 'DRIVE']):
            raise ValueError("must be one of enum values ('DATA_SOURCE_UNSPECIFIED', 'DRIVE')")
        return value

    @field_validator('suppressed_action_types')
    def suppressed_action_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['ACTION_TYPE_UNSPECIFIED', 'DRIVE_BLOCK_EXTERNAL_SHARING', 'DRIVE_WARN_ON_EXTERNAL_SHARING', 'DELETE_WEBPROTECT_EVIDENCE', 'ALERT', 'RULE_ACTIVATE', 'RULE_DEACTIVATE']):
                raise ValueError("each list item must be one of ('ACTION_TYPE_UNSPECIFIED', 'DRIVE_BLOCK_EXTERNAL_SHARING', 'DRIVE_WARN_ON_EXTERNAL_SHARING', 'DELETE_WEBPROTECT_EVIDENCE', 'ALERT', 'RULE_ACTIVATE', 'RULE_DEACTIVATE')")
        return value

    @field_validator('trigger')
    def trigger_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRIGGER_UNSPECIFIED', 'DRIVE_SHARE']):
            raise ValueError("must be one of enum values ('TRIGGER_UNSPECIFIED', 'DRIVE_SHARE')")
        return value

    @field_validator('triggered_action_types')
    def triggered_action_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['ACTION_TYPE_UNSPECIFIED', 'DRIVE_BLOCK_EXTERNAL_SHARING', 'DRIVE_WARN_ON_EXTERNAL_SHARING', 'DELETE_WEBPROTECT_EVIDENCE', 'ALERT', 'RULE_ACTIVATE', 'RULE_DEACTIVATE']):
                raise ValueError("each list item must be one of ('ACTION_TYPE_UNSPECIFIED', 'DRIVE_BLOCK_EXTERNAL_SHARING', 'DRIVE_WARN_ON_EXTERNAL_SHARING', 'DELETE_WEBPROTECT_EVIDENCE', 'ALERT', 'RULE_ACTIVATE', 'RULE_DEACTIVATE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RuleViolationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in match_info (list)
        _items = []
        if self.match_info:
            for _item_match_info in self.match_info:
                if _item_match_info:
                    _items.append(_item_match_info.to_dict())
            _dict['matchInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of resource_info
        if self.resource_info:
            _dict['resourceInfo'] = self.resource_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rule_info
        if self.rule_info:
            _dict['ruleInfo'] = self.rule_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RuleViolationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataSource": obj.get("dataSource"),
            "matchInfo": [MatchInfo.from_dict(_item) for _item in obj["matchInfo"]] if obj.get("matchInfo") is not None else None,
            "recipients": obj.get("recipients"),
            "resourceInfo": ResourceInfo.from_dict(obj["resourceInfo"]) if obj.get("resourceInfo") is not None else None,
            "ruleInfo": RuleInfo.from_dict(obj["ruleInfo"]) if obj.get("ruleInfo") is not None else None,
            "suppressedActionTypes": obj.get("suppressedActionTypes"),
            "trigger": obj.get("trigger"),
            "triggeredActionInfo": obj.get("triggeredActionInfo"),
            "triggeredActionTypes": obj.get("triggeredActionTypes"),
            "triggeringUserEmail": obj.get("triggeringUserEmail")
        })
        return _obj



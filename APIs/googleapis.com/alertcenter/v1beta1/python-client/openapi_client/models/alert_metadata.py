# coding: utf-8

"""
    Google Workspace Alert Center API

    Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AlertMetadata(BaseModel):
    """
    An alert metadata.
    """ # noqa: E501
    alert_id: Optional[StrictStr] = Field(default=None, description="Output only. The alert identifier.", alias="alertId")
    assignee: Optional[StrictStr] = Field(default=None, description="The email address of the user assigned to the alert.")
    customer_id: Optional[StrictStr] = Field(default=None, description="Output only. The unique identifier of the Google Workspace account of the customer.", alias="customerId")
    etag: Optional[StrictStr] = Field(default=None, description="Optional. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of an alert metadata from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform metadata updates in order to avoid race conditions: An `etag` is returned in the response which contains alert metadata, and systems are expected to put that etag in the request to update alert metadata to ensure that their change will be applied to the same version of the alert metadata. If no `etag` is provided in the call to update alert metadata, then the existing alert metadata is overwritten blindly.")
    severity: Optional[StrictStr] = Field(default=None, description="The severity value of the alert. Alert Center will set this field at alert creation time, default's to an empty string when it could not be determined. The supported values for update actions on this field are the following: * HIGH * MEDIUM * LOW")
    status: Optional[StrictStr] = Field(default=None, description="The current status of the alert. The supported values are the following: * NOT_STARTED * IN_PROGRESS * CLOSED")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time this metadata was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["alertId", "assignee", "customerId", "etag", "severity", "status", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alertId": obj.get("alertId"),
            "assignee": obj.get("assignee"),
            "customerId": obj.get("customerId"),
            "etag": obj.get("etag"),
            "severity": obj.get("severity"),
            "status": obj.get("status"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



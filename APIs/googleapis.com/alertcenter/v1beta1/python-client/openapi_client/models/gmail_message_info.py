# coding: utf-8

"""
    Google Workspace Alert Center API

    Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GmailMessageInfo(BaseModel):
    """
    Details of a message in phishing spike alert.
    """ # noqa: E501
    attachments_sha256_hash: Optional[List[StrictStr]] = Field(default=None, description="The `SHA256` hash of email's attachment and all MIME parts.", alias="attachmentsSha256Hash")
    var_date: Optional[StrictStr] = Field(default=None, description="The date of the event related to this email.", alias="date")
    md5_hash_message_body: Optional[StrictStr] = Field(default=None, description="The hash of the message body text.", alias="md5HashMessageBody")
    md5_hash_subject: Optional[StrictStr] = Field(default=None, description="The MD5 Hash of email's subject (only available for reported emails).", alias="md5HashSubject")
    message_body_snippet: Optional[StrictStr] = Field(default=None, description="The snippet of the message body text (only available for reported emails).", alias="messageBodySnippet")
    message_id: Optional[StrictStr] = Field(default=None, description="The message ID.", alias="messageId")
    recipient: Optional[StrictStr] = Field(default=None, description="The recipient of this email.")
    sent_time: Optional[StrictStr] = Field(default=None, description="The sent time of the email.", alias="sentTime")
    subject_text: Optional[StrictStr] = Field(default=None, description="The email subject text (only available for reported emails).", alias="subjectText")
    __properties: ClassVar[List[str]] = ["attachmentsSha256Hash", "date", "md5HashMessageBody", "md5HashSubject", "messageBodySnippet", "messageId", "recipient", "sentTime", "subjectText"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GmailMessageInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GmailMessageInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attachmentsSha256Hash": obj.get("attachmentsSha256Hash"),
            "date": obj.get("date"),
            "md5HashMessageBody": obj.get("md5HashMessageBody"),
            "md5HashSubject": obj.get("md5HashSubject"),
            "messageBodySnippet": obj.get("messageBodySnippet"),
            "messageId": obj.get("messageId"),
            "recipient": obj.get("recipient"),
            "sentTime": obj.get("sentTime"),
            "subjectText": obj.get("subjectText")
        })
        return _obj



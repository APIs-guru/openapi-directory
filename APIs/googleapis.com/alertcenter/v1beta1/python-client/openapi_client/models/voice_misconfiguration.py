# coding: utf-8

"""
    Google Workspace Alert Center API

    Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.transfer_misconfiguration import TransferMisconfiguration
from openapi_client.models.voicemail_misconfiguration import VoicemailMisconfiguration
from typing import Optional, Set
from typing_extensions import Self

class VoiceMisconfiguration(BaseModel):
    """
    An alert triggered when Google Voice configuration becomes invalid, generally due to an external entity being modified or deleted.
    """ # noqa: E501
    entity_name: Optional[StrictStr] = Field(default=None, description="Name of the entity whose configuration is now invalid.", alias="entityName")
    entity_type: Optional[StrictStr] = Field(default=None, description="Type of the entity whose configuration is now invalid.", alias="entityType")
    fix_uri: Optional[StrictStr] = Field(default=None, description="Link that the admin can follow to fix the issue.", alias="fixUri")
    members_misconfiguration: Optional[TransferMisconfiguration] = Field(default=None, alias="membersMisconfiguration")
    transfer_misconfiguration: Optional[TransferMisconfiguration] = Field(default=None, alias="transferMisconfiguration")
    voicemail_misconfiguration: Optional[VoicemailMisconfiguration] = Field(default=None, alias="voicemailMisconfiguration")
    __properties: ClassVar[List[str]] = ["entityName", "entityType", "fixUri", "membersMisconfiguration", "transferMisconfiguration", "voicemailMisconfiguration"]

    @field_validator('entity_type')
    def entity_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENTITY_TYPE_UNSPECIFIED', 'AUTO_ATTENDANT', 'RING_GROUP']):
            raise ValueError("must be one of enum values ('ENTITY_TYPE_UNSPECIFIED', 'AUTO_ATTENDANT', 'RING_GROUP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VoiceMisconfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of members_misconfiguration
        if self.members_misconfiguration:
            _dict['membersMisconfiguration'] = self.members_misconfiguration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transfer_misconfiguration
        if self.transfer_misconfiguration:
            _dict['transferMisconfiguration'] = self.transfer_misconfiguration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of voicemail_misconfiguration
        if self.voicemail_misconfiguration:
            _dict['voicemailMisconfiguration'] = self.voicemail_misconfiguration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VoiceMisconfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "entityName": obj.get("entityName"),
            "entityType": obj.get("entityType"),
            "fixUri": obj.get("fixUri"),
            "membersMisconfiguration": TransferMisconfiguration.from_dict(obj["membersMisconfiguration"]) if obj.get("membersMisconfiguration") is not None else None,
            "transferMisconfiguration": TransferMisconfiguration.from_dict(obj["transferMisconfiguration"]) if obj.get("transferMisconfiguration") is not None else None,
            "voicemailMisconfiguration": VoicemailMisconfiguration.from_dict(obj["voicemailMisconfiguration"]) if obj.get("voicemailMisconfiguration") is not None else None
        })
        return _obj



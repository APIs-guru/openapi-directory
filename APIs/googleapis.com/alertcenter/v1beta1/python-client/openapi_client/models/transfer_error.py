# coding: utf-8

"""
    Google Workspace Alert Center API

    Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TransferError(BaseModel):
    """
    Details for an invalid transfer or forward.
    """ # noqa: E501
    email: Optional[StrictStr] = Field(default=None, description="User's email address. This may be unavailable if the entity was deleted.")
    entity_type: Optional[StrictStr] = Field(default=None, description="Type of entity being transferred to. For ring group members, this should always be USER.", alias="entityType")
    id: Optional[StrictStr] = Field(default=None, description="Ring group or auto attendant ID. Not set for users.")
    invalid_reason: Optional[StrictStr] = Field(default=None, description="Reason for the error.", alias="invalidReason")
    name: Optional[StrictStr] = Field(default=None, description="User's full name, or the ring group / auto attendant name. This may be unavailable if the entity was deleted.")
    __properties: ClassVar[List[str]] = ["email", "entityType", "id", "invalidReason", "name"]

    @field_validator('entity_type')
    def entity_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRANSFER_ENTITY_TYPE_UNSPECIFIED', 'TRANSFER_AUTO_ATTENDANT', 'TRANSFER_RING_GROUP', 'TRANSFER_USER']):
            raise ValueError("must be one of enum values ('TRANSFER_ENTITY_TYPE_UNSPECIFIED', 'TRANSFER_AUTO_ATTENDANT', 'TRANSFER_RING_GROUP', 'TRANSFER_USER')")
        return value

    @field_validator('invalid_reason')
    def invalid_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRANSFER_INVALID_REASON_UNSPECIFIED', 'TRANSFER_TARGET_DELETED', 'UNLICENSED', 'SUSPENDED', 'NO_PHONE_NUMBER']):
            raise ValueError("must be one of enum values ('TRANSFER_INVALID_REASON_UNSPECIFIED', 'TRANSFER_TARGET_DELETED', 'UNLICENSED', 'SUSPENDED', 'NO_PHONE_NUMBER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransferError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransferError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email": obj.get("email"),
            "entityType": obj.get("entityType"),
            "id": obj.get("id"),
            "invalidReason": obj.get("invalidReason"),
            "name": obj.get("name")
        })
        return _obj



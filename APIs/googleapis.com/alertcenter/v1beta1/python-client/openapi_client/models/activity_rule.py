# coding: utf-8

"""
    Google Workspace Alert Center API

    Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ActivityRule(BaseModel):
    """
    Alerts from Google Workspace Security Center rules service configured by an admin.
    """ # noqa: E501
    action_names: Optional[List[StrictStr]] = Field(default=None, description="List of action names associated with the rule threshold.", alias="actionNames")
    create_time: Optional[StrictStr] = Field(default=None, description="Rule create timestamp.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Description of the rule.")
    display_name: Optional[StrictStr] = Field(default=None, description="Alert display name.", alias="displayName")
    name: Optional[StrictStr] = Field(default=None, description="Rule name.")
    query: Optional[StrictStr] = Field(default=None, description="Query that is used to get the data from the associated source.")
    superseded_alerts: Optional[List[StrictStr]] = Field(default=None, description="List of alert IDs superseded by this alert. It is used to indicate that this alert is essentially extension of superseded alerts and we found the relationship after creating these alerts.", alias="supersededAlerts")
    superseding_alert: Optional[StrictStr] = Field(default=None, description="Alert ID superseding this alert. It is used to indicate that superseding alert is essentially extension of this alert and we found the relationship after creating both alerts.", alias="supersedingAlert")
    threshold: Optional[StrictStr] = Field(default=None, description="Alert threshold is for example “COUNT > 5”.")
    trigger_source: Optional[StrictStr] = Field(default=None, description="The trigger sources for this rule. * GMAIL_EVENTS * DEVICE_EVENTS * USER_EVENTS", alias="triggerSource")
    update_time: Optional[StrictStr] = Field(default=None, description="The timestamp of the last update to the rule.", alias="updateTime")
    window_size: Optional[StrictStr] = Field(default=None, description="Rule window size. Possible values are 1 hour or 24 hours.", alias="windowSize")
    __properties: ClassVar[List[str]] = ["actionNames", "createTime", "description", "displayName", "name", "query", "supersededAlerts", "supersedingAlert", "threshold", "triggerSource", "updateTime", "windowSize"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActivityRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActivityRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionNames": obj.get("actionNames"),
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "name": obj.get("name"),
            "query": obj.get("query"),
            "supersededAlerts": obj.get("supersededAlerts"),
            "supersedingAlert": obj.get("supersedingAlert"),
            "threshold": obj.get("threshold"),
            "triggerSource": obj.get("triggerSource"),
            "updateTime": obj.get("updateTime"),
            "windowSize": obj.get("windowSize")
        })
        return _obj



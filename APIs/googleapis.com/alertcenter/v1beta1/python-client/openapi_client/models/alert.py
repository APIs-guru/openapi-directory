# coding: utf-8

"""
    Google Workspace Alert Center API

    Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.alert_metadata import AlertMetadata
from typing import Optional, Set
from typing_extensions import Self

class Alert(BaseModel):
    """
    An alert affecting a customer.
    """ # noqa: E501
    alert_id: Optional[StrictStr] = Field(default=None, description="Output only. The unique identifier for the alert.", alias="alertId")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time this alert was created.", alias="createTime")
    customer_id: Optional[StrictStr] = Field(default=None, description="Output only. The unique identifier of the Google Workspace account of the customer.", alias="customerId")
    data: Optional[Dict[str, Any]] = Field(default=None, description="Optional. The data associated with this alert, for example google.apps.alertcenter.type.DeviceCompromised.")
    deleted: Optional[StrictBool] = Field(default=None, description="Output only. `True` if this alert is marked for deletion.")
    end_time: Optional[StrictStr] = Field(default=None, description="Optional. The time the event that caused this alert ceased being active. If provided, the end time must not be earlier than the start time. If not provided, it indicates an ongoing alert.", alias="endTime")
    etag: Optional[StrictStr] = Field(default=None, description="Optional. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of an alert from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform alert updates in order to avoid race conditions: An `etag` is returned in the response which contains alerts, and systems are expected to put that etag in the request to update alert to ensure that their change will be applied to the same version of the alert. If no `etag` is provided in the call to update alert, then the existing alert is overwritten blindly.")
    metadata: Optional[AlertMetadata] = None
    security_investigation_tool_link: Optional[StrictStr] = Field(default=None, description="Output only. An optional [Security Investigation Tool](https://support.google.com/a/answer/7575955) query for this alert.", alias="securityInvestigationToolLink")
    source: Optional[StrictStr] = Field(default=None, description="Required. A unique identifier for the system that reported the alert. This is output only after alert is created. Supported sources are any of the following: * Google Operations * Mobile device management * Gmail phishing * Data Loss Prevention * Domain wide takeout * State sponsored attack * Google identity * Apps outage")
    start_time: Optional[StrictStr] = Field(default=None, description="Required. The time the event that caused this alert was started or detected.", alias="startTime")
    type: Optional[StrictStr] = Field(default=None, description="Required. The type of the alert. This is output only after alert is created. For a list of available alert types see [Google Workspace Alert types](https://developers.google.com/admin-sdk/alertcenter/reference/alert-types).")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time this alert was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["alertId", "createTime", "customerId", "data", "deleted", "endTime", "etag", "metadata", "securityInvestigationToolLink", "source", "startTime", "type", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Alert from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Alert from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alertId": obj.get("alertId"),
            "createTime": obj.get("createTime"),
            "customerId": obj.get("customerId"),
            "data": obj.get("data"),
            "deleted": obj.get("deleted"),
            "endTime": obj.get("endTime"),
            "etag": obj.get("etag"),
            "metadata": AlertMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "securityInvestigationToolLink": obj.get("securityInvestigationToolLink"),
            "source": obj.get("source"),
            "startTime": obj.get("startTime"),
            "type": obj.get("type"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



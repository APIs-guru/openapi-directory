# coding: utf-8

"""
    Cloud SQL Admin API

    API for Cloud SQL database instance management

    The version of the OpenAPI document: v1beta4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MySqlReplicaConfiguration(BaseModel):
    """
    Read-replica configuration specific to MySQL databases.
    """ # noqa: E501
    ca_certificate: Optional[StrictStr] = Field(default=None, description="PEM representation of the trusted CA's x509 certificate.", alias="caCertificate")
    client_certificate: Optional[StrictStr] = Field(default=None, description="PEM representation of the replica's x509 certificate.", alias="clientCertificate")
    client_key: Optional[StrictStr] = Field(default=None, description="PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.", alias="clientKey")
    connect_retry_interval: Optional[StrictInt] = Field(default=None, description="Seconds to wait between connect retries. MySQL's default is 60 seconds.", alias="connectRetryInterval")
    dump_file_path: Optional[StrictStr] = Field(default=None, description="Path to a SQL dump file in Google Cloud Storage from which the replica instance is to be created. The URI is in the form gs://bucketName/fileName. Compressed gzip files (.gz) are also supported. Dumps have the binlog co-ordinates from which replication begins. This can be accomplished by setting --master-data to 1 when using mysqldump.", alias="dumpFilePath")
    kind: Optional[StrictStr] = Field(default=None, description="This is always `sql#mysqlReplicaConfiguration`.")
    master_heartbeat_period: Optional[StrictStr] = Field(default=None, description="Interval in milliseconds between replication heartbeats.", alias="masterHeartbeatPeriod")
    password: Optional[StrictStr] = Field(default=None, description="The password for the replication connection.")
    ssl_cipher: Optional[StrictStr] = Field(default=None, description="A list of permissible ciphers to use for SSL encryption.", alias="sslCipher")
    username: Optional[StrictStr] = Field(default=None, description="The username for the replication connection.")
    verify_server_certificate: Optional[StrictBool] = Field(default=None, description="Whether or not to check the primary instance's Common Name value in the certificate that it sends during the SSL handshake.", alias="verifyServerCertificate")
    __properties: ClassVar[List[str]] = ["caCertificate", "clientCertificate", "clientKey", "connectRetryInterval", "dumpFilePath", "kind", "masterHeartbeatPeriod", "password", "sslCipher", "username", "verifyServerCertificate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MySqlReplicaConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MySqlReplicaConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "caCertificate": obj.get("caCertificate"),
            "clientCertificate": obj.get("clientCertificate"),
            "clientKey": obj.get("clientKey"),
            "connectRetryInterval": obj.get("connectRetryInterval"),
            "dumpFilePath": obj.get("dumpFilePath"),
            "kind": obj.get("kind"),
            "masterHeartbeatPeriod": obj.get("masterHeartbeatPeriod"),
            "password": obj.get("password"),
            "sslCipher": obj.get("sslCipher"),
            "username": obj.get("username"),
            "verifyServerCertificate": obj.get("verifyServerCertificate")
        })
        return _obj



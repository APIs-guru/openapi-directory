# coding: utf-8

"""
    Cloud SQL Admin API

    API for Cloud SQL database instance management

    The version of the OpenAPI document: v1beta4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sql_server_user_details import SqlServerUserDetails
from openapi_client.models.user_password_validation_policy import UserPasswordValidationPolicy
from typing import Optional, Set
from typing_extensions import Self

class User(BaseModel):
    """
    A Cloud SQL user resource.
    """ # noqa: E501
    dual_password_type: Optional[StrictStr] = Field(default=None, description="Dual password status for the user.", alias="dualPasswordType")
    etag: Optional[StrictStr] = Field(default=None, description="This field is deprecated and will be removed from a future version of the API.")
    host: Optional[StrictStr] = Field(default=None, description="Optional. The host from which the user can connect. For `insert` operations, host defaults to an empty string. For `update` operations, host is specified as part of the request URL. The host name cannot be updated after insertion. For a MySQL instance, it's required; for a PostgreSQL or SQL Server instance, it's optional.")
    instance: Optional[StrictStr] = Field(default=None, description="The name of the Cloud SQL instance. This does not include the project ID. Can be omitted for *update* because it is already specified on the URL.")
    kind: Optional[StrictStr] = Field(default=None, description="This is always `sql#user`.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the user in the Cloud SQL instance. Can be omitted for `update` because it is already specified in the URL.")
    password: Optional[StrictStr] = Field(default=None, description="The password for the user.")
    password_policy: Optional[UserPasswordValidationPolicy] = Field(default=None, alias="passwordPolicy")
    project: Optional[StrictStr] = Field(default=None, description="The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable. Can be omitted for *update* because it is already specified on the URL.")
    sqlserver_user_details: Optional[SqlServerUserDetails] = Field(default=None, alias="sqlserverUserDetails")
    type: Optional[StrictStr] = Field(default=None, description="The user type. It determines the method to authenticate the user during login. The default is the database's built-in user type.")
    __properties: ClassVar[List[str]] = ["dualPasswordType", "etag", "host", "instance", "kind", "name", "password", "passwordPolicy", "project", "sqlserverUserDetails", "type"]

    @field_validator('dual_password_type')
    def dual_password_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DUAL_PASSWORD_TYPE_UNSPECIFIED', 'NO_MODIFY_DUAL_PASSWORD', 'NO_DUAL_PASSWORD', 'DUAL_PASSWORD']):
            raise ValueError("must be one of enum values ('DUAL_PASSWORD_TYPE_UNSPECIFIED', 'NO_MODIFY_DUAL_PASSWORD', 'NO_DUAL_PASSWORD', 'DUAL_PASSWORD')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BUILT_IN', 'CLOUD_IAM_USER', 'CLOUD_IAM_SERVICE_ACCOUNT', 'CLOUD_IAM_GROUP', 'CLOUD_IAM_GROUP_USER', 'CLOUD_IAM_GROUP_SERVICE_ACCOUNT']):
            raise ValueError("must be one of enum values ('BUILT_IN', 'CLOUD_IAM_USER', 'CLOUD_IAM_SERVICE_ACCOUNT', 'CLOUD_IAM_GROUP', 'CLOUD_IAM_GROUP_USER', 'CLOUD_IAM_GROUP_SERVICE_ACCOUNT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of password_policy
        if self.password_policy:
            _dict['passwordPolicy'] = self.password_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sqlserver_user_details
        if self.sqlserver_user_details:
            _dict['sqlserverUserDetails'] = self.sqlserver_user_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dualPasswordType": obj.get("dualPasswordType"),
            "etag": obj.get("etag"),
            "host": obj.get("host"),
            "instance": obj.get("instance"),
            "kind": obj.get("kind"),
            "name": obj.get("name"),
            "password": obj.get("password"),
            "passwordPolicy": UserPasswordValidationPolicy.from_dict(obj["passwordPolicy"]) if obj.get("passwordPolicy") is not None else None,
            "project": obj.get("project"),
            "sqlserverUserDetails": SqlServerUserDetails.from_dict(obj["sqlserverUserDetails"]) if obj.get("sqlserverUserDetails") is not None else None,
            "type": obj.get("type")
        })
        return _obj



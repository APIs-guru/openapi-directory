# coding: utf-8

"""
    Cloud SQL Admin API

    API for Cloud SQL database instance management

    The version of the OpenAPI document: v1beta4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.password_status import PasswordStatus
from typing import Optional, Set
from typing_extensions import Self

class UserPasswordValidationPolicy(BaseModel):
    """
    User level password validation policy.
    """ # noqa: E501
    allowed_failed_attempts: Optional[StrictInt] = Field(default=None, description="Number of failed login attempts allowed before user get locked.", alias="allowedFailedAttempts")
    enable_failed_attempts_check: Optional[StrictBool] = Field(default=None, description="If true, failed login attempts check will be enabled.", alias="enableFailedAttemptsCheck")
    enable_password_verification: Optional[StrictBool] = Field(default=None, description="If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.", alias="enablePasswordVerification")
    password_expiration_duration: Optional[StrictStr] = Field(default=None, description="Expiration duration after password is updated.", alias="passwordExpirationDuration")
    status: Optional[PasswordStatus] = None
    __properties: ClassVar[List[str]] = ["allowedFailedAttempts", "enableFailedAttemptsCheck", "enablePasswordVerification", "passwordExpirationDuration", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserPasswordValidationPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserPasswordValidationPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedFailedAttempts": obj.get("allowedFailedAttempts"),
            "enableFailedAttemptsCheck": obj.get("enableFailedAttemptsCheck"),
            "enablePasswordVerification": obj.get("enablePasswordVerification"),
            "passwordExpirationDuration": obj.get("passwordExpirationDuration"),
            "status": PasswordStatus.from_dict(obj["status"]) if obj.get("status") is not None else None
        })
        return _obj



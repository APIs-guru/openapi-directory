# coding: utf-8

"""
    Cloud SQL Admin API

    API for Cloud SQL database instance management

    The version of the OpenAPI document: v1beta4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ExportContextBakExportOptions(BaseModel):
    """
    Options for exporting BAK files (SQL Server-only)
    """ # noqa: E501
    bak_type: Optional[StrictStr] = Field(default=None, description="Type of this bak file will be export, FULL or DIFF, SQL Server only", alias="bakType")
    copy_only: Optional[StrictBool] = Field(default=None, description="Deprecated: copy_only is deprecated. Use differential_base instead", alias="copyOnly")
    differential_base: Optional[StrictBool] = Field(default=None, description="Whether or not the backup can be used as a differential base copy_only backup can not be served as differential base", alias="differentialBase")
    stripe_count: Optional[StrictInt] = Field(default=None, description="Option for specifying how many stripes to use for the export. If blank, and the value of the striped field is true, the number of stripes is automatically chosen.", alias="stripeCount")
    striped: Optional[StrictBool] = Field(default=None, description="Whether or not the export should be striped.")
    __properties: ClassVar[List[str]] = ["bakType", "copyOnly", "differentialBase", "stripeCount", "striped"]

    @field_validator('bak_type')
    def bak_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BAK_TYPE_UNSPECIFIED', 'FULL', 'DIFF', 'TLOG']):
            raise ValueError("must be one of enum values ('BAK_TYPE_UNSPECIFIED', 'FULL', 'DIFF', 'TLOG')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExportContextBakExportOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExportContextBakExportOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bakType": obj.get("bakType"),
            "copyOnly": obj.get("copyOnly"),
            "differentialBase": obj.get("differentialBase"),
            "stripeCount": obj.get("stripeCount"),
            "striped": obj.get("striped")
        })
        return _obj



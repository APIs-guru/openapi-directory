# coding: utf-8

"""
    Cloud SQL Admin API

    API for Cloud SQL database instance management

    The version of the OpenAPI document: v1beta4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.demote_master_configuration import DemoteMasterConfiguration
from typing import Optional, Set
from typing_extensions import Self

class DemoteMasterContext(BaseModel):
    """
    Database instance demote primary instance context.
    """ # noqa: E501
    kind: Optional[StrictStr] = Field(default=None, description="This is always `sql#demoteMasterContext`.")
    master_instance_name: Optional[StrictStr] = Field(default=None, description="The name of the instance which will act as on-premises primary instance in the replication setup.", alias="masterInstanceName")
    replica_configuration: Optional[DemoteMasterConfiguration] = Field(default=None, alias="replicaConfiguration")
    skip_replication_setup: Optional[StrictBool] = Field(default=None, description="Flag to skip replication setup on the instance.", alias="skipReplicationSetup")
    verify_gtid_consistency: Optional[StrictBool] = Field(default=None, description="Verify the GTID consistency for demote operation. Default value: `True`. Setting this flag to `false` enables you to bypass the GTID consistency check between on-premises primary instance and Cloud SQL instance during the demotion operation but also exposes you to the risk of future replication failures. Change the value only if you know the reason for the GTID divergence and are confident that doing so will not cause any replication issues.", alias="verifyGtidConsistency")
    __properties: ClassVar[List[str]] = ["kind", "masterInstanceName", "replicaConfiguration", "skipReplicationSetup", "verifyGtidConsistency"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DemoteMasterContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of replica_configuration
        if self.replica_configuration:
            _dict['replicaConfiguration'] = self.replica_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DemoteMasterContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "kind": obj.get("kind"),
            "masterInstanceName": obj.get("masterInstanceName"),
            "replicaConfiguration": DemoteMasterConfiguration.from_dict(obj["replicaConfiguration"]) if obj.get("replicaConfiguration") is not None else None,
            "skipReplicationSetup": obj.get("skipReplicationSetup"),
            "verifyGtidConsistency": obj.get("verifyGtidConsistency")
        })
        return _obj



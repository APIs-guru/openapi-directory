# coding: utf-8

"""
    Cloud SQL Admin API

    API for Cloud SQL database instance management

    The version of the OpenAPI document: v1beta4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.my_sql_replica_configuration import MySqlReplicaConfiguration
from typing import Optional, Set
from typing_extensions import Self

class ReplicaConfiguration(BaseModel):
    """
    Read-replica configuration for connecting to the primary instance.
    """ # noqa: E501
    cascadable_replica: Optional[StrictBool] = Field(default=None, description="Optional. Specifies if a SQL Server replica is a cascadable replica. A cascadable replica is a SQL Server cross region replica that supports replica(s) under it.", alias="cascadableReplica")
    failover_target: Optional[StrictBool] = Field(default=None, description="Specifies if the replica is the failover target. If the field is set to `true` the replica will be designated as a failover replica. In case the primary instance fails, the replica instance will be promoted as the new primary instance. Only one replica can be specified as failover target, and the replica has to be in different zone with the primary instance.", alias="failoverTarget")
    kind: Optional[StrictStr] = Field(default=None, description="This is always `sql#replicaConfiguration`.")
    mysql_replica_configuration: Optional[MySqlReplicaConfiguration] = Field(default=None, alias="mysqlReplicaConfiguration")
    __properties: ClassVar[List[str]] = ["cascadableReplica", "failoverTarget", "kind", "mysqlReplicaConfiguration"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReplicaConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of mysql_replica_configuration
        if self.mysql_replica_configuration:
            _dict['mysqlReplicaConfiguration'] = self.mysql_replica_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReplicaConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cascadableReplica": obj.get("cascadableReplica"),
            "failoverTarget": obj.get("failoverTarget"),
            "kind": obj.get("kind"),
            "mysqlReplicaConfiguration": MySqlReplicaConfiguration.from_dict(obj["mysqlReplicaConfiguration"]) if obj.get("mysqlReplicaConfiguration") is not None else None
        })
        return _obj



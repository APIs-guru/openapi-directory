# coding: utf-8

"""
    Cloud SQL Admin API

    API for Cloud SQL database instance management

    The version of the OpenAPI document: v1beta4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.export_context_sql_export_options_mysql_export_options import ExportContextSqlExportOptionsMysqlExportOptions
from typing import Optional, Set
from typing_extensions import Self

class ExportContextSqlExportOptions(BaseModel):
    """
    Options for exporting data as SQL statements.
    """ # noqa: E501
    mysql_export_options: Optional[ExportContextSqlExportOptionsMysqlExportOptions] = Field(default=None, alias="mysqlExportOptions")
    parallel: Optional[StrictBool] = Field(default=None, description="Optional. Whether or not the export should be parallel.")
    schema_only: Optional[StrictBool] = Field(default=None, description="Export only schemas.", alias="schemaOnly")
    tables: Optional[List[StrictStr]] = Field(default=None, description="Tables to export, or that were exported, from the specified database. If you specify tables, specify one and only one database. For PostgreSQL instances, you can specify only one table.")
    threads: Optional[StrictInt] = Field(default=None, description="Optional. The number of threads to use for parallel export.")
    __properties: ClassVar[List[str]] = ["mysqlExportOptions", "parallel", "schemaOnly", "tables", "threads"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExportContextSqlExportOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of mysql_export_options
        if self.mysql_export_options:
            _dict['mysqlExportOptions'] = self.mysql_export_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExportContextSqlExportOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mysqlExportOptions": ExportContextSqlExportOptionsMysqlExportOptions.from_dict(obj["mysqlExportOptions"]) if obj.get("mysqlExportOptions") is not None else None,
            "parallel": obj.get("parallel"),
            "schemaOnly": obj.get("schemaOnly"),
            "tables": obj.get("tables"),
            "threads": obj.get("threads")
        })
        return _obj



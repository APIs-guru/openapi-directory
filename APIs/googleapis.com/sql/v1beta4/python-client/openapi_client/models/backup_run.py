# coding: utf-8

"""
    Cloud SQL Admin API

    API for Cloud SQL database instance management

    The version of the OpenAPI document: v1beta4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.disk_encryption_configuration import DiskEncryptionConfiguration
from openapi_client.models.disk_encryption_status import DiskEncryptionStatus
from openapi_client.models.operation_error import OperationError
from typing import Optional, Set
from typing_extensions import Self

class BackupRun(BaseModel):
    """
    A BackupRun resource.
    """ # noqa: E501
    backup_kind: Optional[StrictStr] = Field(default=None, description="Specifies the kind of backup, PHYSICAL or DEFAULT_SNAPSHOT.", alias="backupKind")
    description: Optional[StrictStr] = Field(default=None, description="The description of this run, only applicable to on-demand backups.")
    disk_encryption_configuration: Optional[DiskEncryptionConfiguration] = Field(default=None, alias="diskEncryptionConfiguration")
    disk_encryption_status: Optional[DiskEncryptionStatus] = Field(default=None, alias="diskEncryptionStatus")
    end_time: Optional[StrictStr] = Field(default=None, description="The time the backup operation completed in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.", alias="endTime")
    enqueued_time: Optional[StrictStr] = Field(default=None, description="The time the run was enqueued in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.", alias="enqueuedTime")
    error: Optional[OperationError] = None
    id: Optional[StrictStr] = Field(default=None, description="The identifier for this backup run. Unique only for a specific Cloud SQL instance.")
    instance: Optional[StrictStr] = Field(default=None, description="Name of the database instance.")
    kind: Optional[StrictStr] = Field(default=None, description="This is always `sql#backupRun`.")
    location: Optional[StrictStr] = Field(default=None, description="Location of the backups.")
    self_link: Optional[StrictStr] = Field(default=None, description="The URI of this resource.", alias="selfLink")
    start_time: Optional[StrictStr] = Field(default=None, description="The time the backup operation actually started in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.", alias="startTime")
    status: Optional[StrictStr] = Field(default=None, description="The status of this run.")
    time_zone: Optional[StrictStr] = Field(default=None, description="Backup time zone to prevent restores to an instance with a different time zone. Now relevant only for SQL Server.", alias="timeZone")
    type: Optional[StrictStr] = Field(default=None, description="The type of this run; can be either \"AUTOMATED\" or \"ON_DEMAND\" or \"FINAL\". This field defaults to \"ON_DEMAND\" and is ignored, when specified for insert requests.")
    window_start_time: Optional[StrictStr] = Field(default=None, description="The start time of the backup window during which this the backup was attempted in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.", alias="windowStartTime")
    __properties: ClassVar[List[str]] = ["backupKind", "description", "diskEncryptionConfiguration", "diskEncryptionStatus", "endTime", "enqueuedTime", "error", "id", "instance", "kind", "location", "selfLink", "startTime", "status", "timeZone", "type", "windowStartTime"]

    @field_validator('backup_kind')
    def backup_kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SQL_BACKUP_KIND_UNSPECIFIED', 'SNAPSHOT', 'PHYSICAL']):
            raise ValueError("must be one of enum values ('SQL_BACKUP_KIND_UNSPECIFIED', 'SNAPSHOT', 'PHYSICAL')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SQL_BACKUP_RUN_STATUS_UNSPECIFIED', 'ENQUEUED', 'OVERDUE', 'RUNNING', 'FAILED', 'SUCCESSFUL', 'SKIPPED', 'DELETION_PENDING', 'DELETION_FAILED', 'DELETED']):
            raise ValueError("must be one of enum values ('SQL_BACKUP_RUN_STATUS_UNSPECIFIED', 'ENQUEUED', 'OVERDUE', 'RUNNING', 'FAILED', 'SUCCESSFUL', 'SKIPPED', 'DELETION_PENDING', 'DELETION_FAILED', 'DELETED')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SQL_BACKUP_RUN_TYPE_UNSPECIFIED', 'AUTOMATED', 'ON_DEMAND']):
            raise ValueError("must be one of enum values ('SQL_BACKUP_RUN_TYPE_UNSPECIFIED', 'AUTOMATED', 'ON_DEMAND')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackupRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of disk_encryption_configuration
        if self.disk_encryption_configuration:
            _dict['diskEncryptionConfiguration'] = self.disk_encryption_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of disk_encryption_status
        if self.disk_encryption_status:
            _dict['diskEncryptionStatus'] = self.disk_encryption_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackupRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupKind": obj.get("backupKind"),
            "description": obj.get("description"),
            "diskEncryptionConfiguration": DiskEncryptionConfiguration.from_dict(obj["diskEncryptionConfiguration"]) if obj.get("diskEncryptionConfiguration") is not None else None,
            "diskEncryptionStatus": DiskEncryptionStatus.from_dict(obj["diskEncryptionStatus"]) if obj.get("diskEncryptionStatus") is not None else None,
            "endTime": obj.get("endTime"),
            "enqueuedTime": obj.get("enqueuedTime"),
            "error": OperationError.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "id": obj.get("id"),
            "instance": obj.get("instance"),
            "kind": obj.get("kind"),
            "location": obj.get("location"),
            "selfLink": obj.get("selfLink"),
            "startTime": obj.get("startTime"),
            "status": obj.get("status"),
            "timeZone": obj.get("timeZone"),
            "type": obj.get("type"),
            "windowStartTime": obj.get("windowStartTime")
        })
        return _obj



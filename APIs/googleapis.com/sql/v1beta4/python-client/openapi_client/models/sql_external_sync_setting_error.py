# coding: utf-8

"""
    Cloud SQL Admin API

    API for Cloud SQL database instance management

    The version of the OpenAPI document: v1beta4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SqlExternalSyncSettingError(BaseModel):
    """
    External primary instance migration setting error/warning.
    """ # noqa: E501
    detail: Optional[StrictStr] = Field(default=None, description="Additional information about the error encountered.")
    kind: Optional[StrictStr] = Field(default=None, description="Can be `sql#externalSyncSettingError` or `sql#externalSyncSettingWarning`.")
    type: Optional[StrictStr] = Field(default=None, description="Identifies the specific error that occurred.")
    __properties: ClassVar[List[str]] = ["detail", "kind", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SQL_EXTERNAL_SYNC_SETTING_ERROR_TYPE_UNSPECIFIED', 'CONNECTION_FAILURE', 'BINLOG_NOT_ENABLED', 'INCOMPATIBLE_DATABASE_VERSION', 'REPLICA_ALREADY_SETUP', 'INSUFFICIENT_PRIVILEGE', 'UNSUPPORTED_MIGRATION_TYPE', 'NO_PGLOGICAL_INSTALLED', 'PGLOGICAL_NODE_ALREADY_EXISTS', 'INVALID_WAL_LEVEL', 'INVALID_SHARED_PRELOAD_LIBRARY', 'INSUFFICIENT_MAX_REPLICATION_SLOTS', 'INSUFFICIENT_MAX_WAL_SENDERS', 'INSUFFICIENT_MAX_WORKER_PROCESSES', 'UNSUPPORTED_EXTENSIONS', 'INVALID_RDS_LOGICAL_REPLICATION', 'INVALID_LOGGING_SETUP', 'INVALID_DB_PARAM', 'UNSUPPORTED_GTID_MODE', 'SQLSERVER_AGENT_NOT_RUNNING', 'UNSUPPORTED_TABLE_DEFINITION', 'UNSUPPORTED_DEFINER', 'SQLSERVER_SERVERNAME_MISMATCH', 'PRIMARY_ALREADY_SETUP', 'UNSUPPORTED_BINLOG_FORMAT', 'BINLOG_RETENTION_SETTING', 'UNSUPPORTED_STORAGE_ENGINE', 'LIMITED_SUPPORT_TABLES', 'EXISTING_DATA_IN_REPLICA', 'MISSING_OPTIONAL_PRIVILEGES', 'RISKY_BACKUP_ADMIN_PRIVILEGE', 'INSUFFICIENT_GCS_PERMISSIONS', 'INVALID_FILE_INFO', 'UNSUPPORTED_DATABASE_SETTINGS', 'MYSQL_PARALLEL_IMPORT_INSUFFICIENT_PRIVILEGE', 'LOCAL_INFILE_OFF', 'TURN_ON_PITR_AFTER_PROMOTE', 'INCOMPATIBLE_DATABASE_MINOR_VERSION', 'SOURCE_MAX_SUBSCRIPTIONS', 'UNABLE_TO_VERIFY_DEFINERS', 'SUBSCRIPTION_CALCULATION_STATUS', 'PG_SUBSCRIPTION_COUNT', 'PG_SYNC_PARALLEL_LEVEL', 'INSUFFICIENT_DISK_SIZE', 'INSUFFICIENT_MACHINE_TIER']):
            raise ValueError("must be one of enum values ('SQL_EXTERNAL_SYNC_SETTING_ERROR_TYPE_UNSPECIFIED', 'CONNECTION_FAILURE', 'BINLOG_NOT_ENABLED', 'INCOMPATIBLE_DATABASE_VERSION', 'REPLICA_ALREADY_SETUP', 'INSUFFICIENT_PRIVILEGE', 'UNSUPPORTED_MIGRATION_TYPE', 'NO_PGLOGICAL_INSTALLED', 'PGLOGICAL_NODE_ALREADY_EXISTS', 'INVALID_WAL_LEVEL', 'INVALID_SHARED_PRELOAD_LIBRARY', 'INSUFFICIENT_MAX_REPLICATION_SLOTS', 'INSUFFICIENT_MAX_WAL_SENDERS', 'INSUFFICIENT_MAX_WORKER_PROCESSES', 'UNSUPPORTED_EXTENSIONS', 'INVALID_RDS_LOGICAL_REPLICATION', 'INVALID_LOGGING_SETUP', 'INVALID_DB_PARAM', 'UNSUPPORTED_GTID_MODE', 'SQLSERVER_AGENT_NOT_RUNNING', 'UNSUPPORTED_TABLE_DEFINITION', 'UNSUPPORTED_DEFINER', 'SQLSERVER_SERVERNAME_MISMATCH', 'PRIMARY_ALREADY_SETUP', 'UNSUPPORTED_BINLOG_FORMAT', 'BINLOG_RETENTION_SETTING', 'UNSUPPORTED_STORAGE_ENGINE', 'LIMITED_SUPPORT_TABLES', 'EXISTING_DATA_IN_REPLICA', 'MISSING_OPTIONAL_PRIVILEGES', 'RISKY_BACKUP_ADMIN_PRIVILEGE', 'INSUFFICIENT_GCS_PERMISSIONS', 'INVALID_FILE_INFO', 'UNSUPPORTED_DATABASE_SETTINGS', 'MYSQL_PARALLEL_IMPORT_INSUFFICIENT_PRIVILEGE', 'LOCAL_INFILE_OFF', 'TURN_ON_PITR_AFTER_PROMOTE', 'INCOMPATIBLE_DATABASE_MINOR_VERSION', 'SOURCE_MAX_SUBSCRIPTIONS', 'UNABLE_TO_VERIFY_DEFINERS', 'SUBSCRIPTION_CALCULATION_STATUS', 'PG_SUBSCRIPTION_COUNT', 'PG_SYNC_PARALLEL_LEVEL', 'INSUFFICIENT_DISK_SIZE', 'INSUFFICIENT_MACHINE_TIER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SqlExternalSyncSettingError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SqlExternalSyncSettingError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "detail": obj.get("detail"),
            "kind": obj.get("kind"),
            "type": obj.get("type")
        })
        return _obj



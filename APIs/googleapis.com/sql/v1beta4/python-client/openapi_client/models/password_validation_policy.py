# coding: utf-8

"""
    Cloud SQL Admin API

    API for Cloud SQL database instance management

    The version of the OpenAPI document: v1beta4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PasswordValidationPolicy(BaseModel):
    """
    Database instance local user password validation policy
    """ # noqa: E501
    complexity: Optional[StrictStr] = Field(default=None, description="The complexity of the password.")
    disallow_compromised_credentials: Optional[StrictBool] = Field(default=None, description="This field is deprecated and will be removed in a future version of the API.", alias="disallowCompromisedCredentials")
    disallow_username_substring: Optional[StrictBool] = Field(default=None, description="Disallow username as a part of the password.", alias="disallowUsernameSubstring")
    enable_password_policy: Optional[StrictBool] = Field(default=None, description="Whether the password policy is enabled or not.", alias="enablePasswordPolicy")
    min_length: Optional[StrictInt] = Field(default=None, description="Minimum number of characters allowed.", alias="minLength")
    password_change_interval: Optional[StrictStr] = Field(default=None, description="Minimum interval after which the password can be changed. This flag is only supported for PostgreSQL.", alias="passwordChangeInterval")
    reuse_interval: Optional[StrictInt] = Field(default=None, description="Number of previous passwords that cannot be reused.", alias="reuseInterval")
    __properties: ClassVar[List[str]] = ["complexity", "disallowCompromisedCredentials", "disallowUsernameSubstring", "enablePasswordPolicy", "minLength", "passwordChangeInterval", "reuseInterval"]

    @field_validator('complexity')
    def complexity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMPLEXITY_UNSPECIFIED', 'COMPLEXITY_DEFAULT']):
            raise ValueError("must be one of enum values ('COMPLEXITY_UNSPECIFIED', 'COMPLEXITY_DEFAULT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PasswordValidationPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PasswordValidationPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "complexity": obj.get("complexity"),
            "disallowCompromisedCredentials": obj.get("disallowCompromisedCredentials"),
            "disallowUsernameSubstring": obj.get("disallowUsernameSubstring"),
            "enablePasswordPolicy": obj.get("enablePasswordPolicy"),
            "minLength": obj.get("minLength"),
            "passwordChangeInterval": obj.get("passwordChangeInterval"),
            "reuseInterval": obj.get("reuseInterval")
        })
        return _obj



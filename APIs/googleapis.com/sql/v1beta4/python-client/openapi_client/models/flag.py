# coding: utf-8

"""
    Cloud SQL Admin API

    API for Cloud SQL database instance management

    The version of the OpenAPI document: v1beta4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Flag(BaseModel):
    """
    A flag resource.
    """ # noqa: E501
    allowed_int_values: Optional[List[StrictStr]] = Field(default=None, description="Use this field if only certain integers are accepted. Can be combined with min_value and max_value to add additional values.", alias="allowedIntValues")
    allowed_string_values: Optional[List[StrictStr]] = Field(default=None, description="For `STRING` flags, a list of strings that the value can be set to.", alias="allowedStringValues")
    applies_to: Optional[List[StrictStr]] = Field(default=None, description="The database version this flag applies to. Can be MySQL instances: `MYSQL_8_0`, `MYSQL_8_0_18`, `MYSQL_8_0_26`, `MYSQL_5_7`, or `MYSQL_5_6`. PostgreSQL instances: `POSTGRES_9_6`, `POSTGRES_10`, `POSTGRES_11` or `POSTGRES_12`. SQL Server instances: `SQLSERVER_2017_STANDARD`, `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`, `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`, or `SQLSERVER_2019_WEB`. See [the complete list](/sql/docs/mysql/admin-api/rest/v1/SqlDatabaseVersion).", alias="appliesTo")
    in_beta: Optional[StrictBool] = Field(default=None, description="Whether or not the flag is considered in beta.", alias="inBeta")
    kind: Optional[StrictStr] = Field(default=None, description="This is always `sql#flag`.")
    max_value: Optional[StrictStr] = Field(default=None, description="For `INTEGER` flags, the maximum allowed value.", alias="maxValue")
    min_value: Optional[StrictStr] = Field(default=None, description="For `INTEGER` flags, the minimum allowed value.", alias="minValue")
    name: Optional[StrictStr] = Field(default=None, description="This is the name of the flag. Flag names always use underscores, not hyphens, for example: `max_allowed_packet`")
    requires_restart: Optional[StrictBool] = Field(default=None, description="Indicates whether changing this flag will trigger a database restart. Only applicable to Second Generation instances.", alias="requiresRestart")
    type: Optional[StrictStr] = Field(default=None, description="The type of the flag. Flags are typed to being `BOOLEAN`, `STRING`, `INTEGER` or `NONE`. `NONE` is used for flags which do not take a value, such as `skip_grant_tables`.")
    __properties: ClassVar[List[str]] = ["allowedIntValues", "allowedStringValues", "appliesTo", "inBeta", "kind", "maxValue", "minValue", "name", "requiresRestart", "type"]

    @field_validator('applies_to')
    def applies_to_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['SQL_DATABASE_VERSION_UNSPECIFIED', 'MYSQL_5_1', 'MYSQL_5_5', 'MYSQL_5_6', 'MYSQL_5_7', 'SQLSERVER_2017_STANDARD', 'SQLSERVER_2017_ENTERPRISE', 'SQLSERVER_2017_EXPRESS', 'SQLSERVER_2017_WEB', 'POSTGRES_9_6', 'POSTGRES_10', 'POSTGRES_11', 'POSTGRES_12', 'POSTGRES_13', 'POSTGRES_14', 'POSTGRES_15', 'MYSQL_8_0', 'MYSQL_8_0_18', 'MYSQL_8_0_26', 'MYSQL_8_0_27', 'MYSQL_8_0_28', 'MYSQL_8_0_29', 'MYSQL_8_0_30', 'MYSQL_8_0_31', 'MYSQL_8_0_32', 'MYSQL_8_0_33', 'MYSQL_8_0_34', 'MYSQL_8_0_35', 'MYSQL_8_0_36', 'SQLSERVER_2019_STANDARD', 'SQLSERVER_2019_ENTERPRISE', 'SQLSERVER_2019_EXPRESS', 'SQLSERVER_2019_WEB', 'SQLSERVER_2022_STANDARD', 'SQLSERVER_2022_ENTERPRISE', 'SQLSERVER_2022_EXPRESS', 'SQLSERVER_2022_WEB']):
                raise ValueError("each list item must be one of ('SQL_DATABASE_VERSION_UNSPECIFIED', 'MYSQL_5_1', 'MYSQL_5_5', 'MYSQL_5_6', 'MYSQL_5_7', 'SQLSERVER_2017_STANDARD', 'SQLSERVER_2017_ENTERPRISE', 'SQLSERVER_2017_EXPRESS', 'SQLSERVER_2017_WEB', 'POSTGRES_9_6', 'POSTGRES_10', 'POSTGRES_11', 'POSTGRES_12', 'POSTGRES_13', 'POSTGRES_14', 'POSTGRES_15', 'MYSQL_8_0', 'MYSQL_8_0_18', 'MYSQL_8_0_26', 'MYSQL_8_0_27', 'MYSQL_8_0_28', 'MYSQL_8_0_29', 'MYSQL_8_0_30', 'MYSQL_8_0_31', 'MYSQL_8_0_32', 'MYSQL_8_0_33', 'MYSQL_8_0_34', 'MYSQL_8_0_35', 'MYSQL_8_0_36', 'SQLSERVER_2019_STANDARD', 'SQLSERVER_2019_ENTERPRISE', 'SQLSERVER_2019_EXPRESS', 'SQLSERVER_2019_WEB', 'SQLSERVER_2022_STANDARD', 'SQLSERVER_2022_ENTERPRISE', 'SQLSERVER_2022_EXPRESS', 'SQLSERVER_2022_WEB')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SQL_FLAG_TYPE_UNSPECIFIED', 'BOOLEAN', 'STRING', 'INTEGER', 'NONE', 'MYSQL_TIMEZONE_OFFSET', 'FLOAT', 'REPEATED_STRING']):
            raise ValueError("must be one of enum values ('SQL_FLAG_TYPE_UNSPECIFIED', 'BOOLEAN', 'STRING', 'INTEGER', 'NONE', 'MYSQL_TIMEZONE_OFFSET', 'FLOAT', 'REPEATED_STRING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Flag from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Flag from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedIntValues": obj.get("allowedIntValues"),
            "allowedStringValues": obj.get("allowedStringValues"),
            "appliesTo": obj.get("appliesTo"),
            "inBeta": obj.get("inBeta"),
            "kind": obj.get("kind"),
            "maxValue": obj.get("maxValue"),
            "minValue": obj.get("minValue"),
            "name": obj.get("name"),
            "requiresRestart": obj.get("requiresRestart"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    Cloud SQL Admin API

    API for Cloud SQL database instance management

    The version of the OpenAPI document: v1beta4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.database_instance import DatabaseInstance

class TestDatabaseInstance(unittest.TestCase):
    """DatabaseInstance unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DatabaseInstance:
        """Test DatabaseInstance
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DatabaseInstance`
        """
        model = DatabaseInstance()
        if include_optional:
            return DatabaseInstance(
                available_maintenance_versions = [
                    ''
                    ],
                backend_type = 'SQL_BACKEND_TYPE_UNSPECIFIED',
                connection_name = '',
                create_time = '',
                current_disk_size = '',
                database_installed_version = '',
                database_version = 'SQL_DATABASE_VERSION_UNSPECIFIED',
                disk_encryption_configuration = openapi_client.models.disk_encryption_configuration.DiskEncryptionConfiguration(
                    kind = '', 
                    kms_key_name = '', ),
                disk_encryption_status = openapi_client.models.disk_encryption_status.DiskEncryptionStatus(
                    kind = '', 
                    kms_key_version_name = '', ),
                dns_name = '',
                etag = '',
                failover_replica = openapi_client.models.database_instance_failover_replica.DatabaseInstance_failoverReplica(
                    available = True, 
                    name = '', ),
                gce_zone = '',
                instance_type = 'SQL_INSTANCE_TYPE_UNSPECIFIED',
                ip_addresses = [
                    openapi_client.models.ip_mapping.IpMapping(
                        ip_address = '', 
                        time_to_retire = '', 
                        type = 'SQL_IP_ADDRESS_TYPE_UNSPECIFIED', )
                    ],
                ipv6_address = '',
                kind = '',
                maintenance_version = '',
                master_instance_name = '',
                max_disk_size = '',
                name = '',
                on_premises_configuration = openapi_client.models.on_premises_configuration.OnPremisesConfiguration(
                    ca_certificate = '', 
                    client_certificate = '', 
                    client_key = '', 
                    dump_file_path = '', 
                    host_port = '', 
                    kind = '', 
                    password = '', 
                    source_instance = openapi_client.models.instance_reference.InstanceReference(
                        name = '', 
                        project = '', 
                        region = '', ), 
                    username = '', ),
                out_of_disk_report = openapi_client.models.sql_out_of_disk_report.SqlOutOfDiskReport(
                    sql_min_recommended_increase_size_gb = 56, 
                    sql_out_of_disk_state = 'SQL_OUT_OF_DISK_STATE_UNSPECIFIED', ),
                primary_dns_name = '',
                project = '',
                psc_service_attachment_link = '',
                region = '',
                replica_configuration = openapi_client.models.replica_configuration.ReplicaConfiguration(
                    cascadable_replica = True, 
                    failover_target = True, 
                    kind = '', 
                    mysql_replica_configuration = openapi_client.models.my_sql_replica_configuration.MySqlReplicaConfiguration(
                        ca_certificate = '', 
                        client_certificate = '', 
                        client_key = '', 
                        connect_retry_interval = 56, 
                        dump_file_path = '', 
                        kind = '', 
                        master_heartbeat_period = '', 
                        password = '', 
                        ssl_cipher = '', 
                        username = '', 
                        verify_server_certificate = True, ), ),
                replica_names = [
                    ''
                    ],
                root_password = '',
                satisfies_pzs = True,
                scheduled_maintenance = openapi_client.models.sql_scheduled_maintenance.SqlScheduledMaintenance(
                    can_defer = True, 
                    can_reschedule = True, 
                    schedule_deadline_time = '', 
                    start_time = '', ),
                secondary_gce_zone = '',
                self_link = '',
                server_ca_cert = openapi_client.models.ssl_cert.SslCert(
                    cert = '', 
                    cert_serial_number = '', 
                    common_name = '', 
                    create_time = '', 
                    expiration_time = '', 
                    instance = '', 
                    kind = '', 
                    self_link = '', 
                    sha1_fingerprint = '', ),
                service_account_email_address = '',
                settings = openapi_client.models.settings.Settings(
                    activation_policy = 'SQL_ACTIVATION_POLICY_UNSPECIFIED', 
                    active_directory_config = openapi_client.models.sql_active_directory_config.SqlActiveDirectoryConfig(
                        domain = '', 
                        kind = '', ), 
                    advanced_machine_features = openapi_client.models.advanced_machine_features.AdvancedMachineFeatures(
                        threads_per_core = 56, ), 
                    authorized_gae_applications = [
                        ''
                        ], 
                    availability_type = 'SQL_AVAILABILITY_TYPE_UNSPECIFIED', 
                    backup_configuration = openapi_client.models.backup_configuration.BackupConfiguration(
                        backup_retention_settings = openapi_client.models.backup_retention_settings.BackupRetentionSettings(
                            retained_backups = 56, 
                            retention_unit = 'RETENTION_UNIT_UNSPECIFIED', ), 
                        binary_log_enabled = True, 
                        enabled = True, 
                        kind = '', 
                        location = '', 
                        point_in_time_recovery_enabled = True, 
                        replication_log_archiving_enabled = True, 
                        start_time = '', 
                        transaction_log_retention_days = 56, ), 
                    collation = '', 
                    connector_enforcement = 'CONNECTOR_ENFORCEMENT_UNSPECIFIED', 
                    crash_safe_replication_enabled = True, 
                    data_cache_config = openapi_client.models.data_cache_config.DataCacheConfig(
                        data_cache_enabled = True, ), 
                    data_disk_size_gb = '', 
                    data_disk_type = 'SQL_DATA_DISK_TYPE_UNSPECIFIED', 
                    database_flags = [
                        openapi_client.models.database_flags.DatabaseFlags(
                            name = '', 
                            value = '', )
                        ], 
                    database_replication_enabled = True, 
                    deletion_protection_enabled = True, 
                    deny_maintenance_periods = [
                        openapi_client.models.deny_maintenance_period.DenyMaintenancePeriod(
                            end_date = '', 
                            start_date = '', 
                            time = '', )
                        ], 
                    edition = 'EDITION_UNSPECIFIED', 
                    insights_config = openapi_client.models.insights_config.InsightsConfig(
                        query_insights_enabled = True, 
                        query_plans_per_minute = 56, 
                        query_string_length = 56, 
                        record_application_tags = True, 
                        record_client_address = True, ), 
                    ip_configuration = openapi_client.models.ip_configuration.IpConfiguration(
                        allocated_ip_range = '', 
                        authorized_networks = [
                            openapi_client.models.acl_entry.AclEntry(
                                expiration_time = '', 
                                kind = '', 
                                name = '', 
                                value = '', )
                            ], 
                        enable_private_path_for_google_cloud_services = True, 
                        ipv4_enabled = True, 
                        private_network = '', 
                        psc_config = openapi_client.models.psc_config.PscConfig(
                            allowed_consumer_projects = [
                                ''
                                ], 
                            psc_enabled = True, ), 
                        require_ssl = True, 
                        ssl_mode = 'SSL_MODE_UNSPECIFIED', ), 
                    kind = '', 
                    location_preference = openapi_client.models.location_preference.LocationPreference(
                        follow_gae_application = '', 
                        kind = '', 
                        secondary_zone = '', 
                        zone = '', ), 
                    maintenance_window = openapi_client.models.maintenance_window.MaintenanceWindow(
                        day = 56, 
                        hour = 56, 
                        kind = '', 
                        update_track = 'SQL_UPDATE_TRACK_UNSPECIFIED', ), 
                    password_validation_policy = openapi_client.models.password_validation_policy.PasswordValidationPolicy(
                        complexity = 'COMPLEXITY_UNSPECIFIED', 
                        disallow_compromised_credentials = True, 
                        disallow_username_substring = True, 
                        enable_password_policy = True, 
                        min_length = 56, 
                        password_change_interval = '', 
                        reuse_interval = 56, ), 
                    pricing_plan = 'SQL_PRICING_PLAN_UNSPECIFIED', 
                    replication_type = 'SQL_REPLICATION_TYPE_UNSPECIFIED', 
                    settings_version = '', 
                    sql_server_audit_config = openapi_client.models.sql_server_audit_config.SqlServerAuditConfig(
                        bucket = '', 
                        kind = '', 
                        retention_interval = '', 
                        upload_interval = '', ), 
                    storage_auto_resize = True, 
                    storage_auto_resize_limit = '', 
                    tier = '', 
                    time_zone = '', 
                    user_labels = {
                        'key' : ''
                        }, ),
                sql_network_architecture = 'SQL_NETWORK_ARCHITECTURE_UNSPECIFIED',
                state = 'SQL_INSTANCE_STATE_UNSPECIFIED',
                suspension_reason = [
                    'SQL_SUSPENSION_REASON_UNSPECIFIED'
                    ],
                write_endpoint = ''
            )
        else:
            return DatabaseInstance(
        )
        """

    def testDatabaseInstance(self):
        """Test DatabaseInstance"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

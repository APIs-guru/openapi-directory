# coding: utf-8

"""
    Cloud SQL Admin API

    API for Cloud SQL database instance management

    The version of the OpenAPI document: v1beta4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.ip_configuration import IpConfiguration

class TestIpConfiguration(unittest.TestCase):
    """IpConfiguration unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IpConfiguration:
        """Test IpConfiguration
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IpConfiguration`
        """
        model = IpConfiguration()
        if include_optional:
            return IpConfiguration(
                allocated_ip_range = '',
                authorized_networks = [
                    openapi_client.models.acl_entry.AclEntry(
                        expiration_time = '', 
                        kind = '', 
                        name = '', 
                        value = '', )
                    ],
                enable_private_path_for_google_cloud_services = True,
                ipv4_enabled = True,
                private_network = '',
                psc_config = openapi_client.models.psc_config.PscConfig(
                    allowed_consumer_projects = [
                        ''
                        ], 
                    psc_enabled = True, ),
                require_ssl = True,
                ssl_mode = 'SSL_MODE_UNSPECIFIED'
            )
        else:
            return IpConfiguration(
        )
        """

    def testIpConfiguration(self):
        """Test IpConfiguration"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

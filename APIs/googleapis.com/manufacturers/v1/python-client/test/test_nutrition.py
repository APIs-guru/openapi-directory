# coding: utf-8

"""
    Manufacturer Center API

    Public API for managing Manufacturer Center related data.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.nutrition import Nutrition

class TestNutrition(unittest.TestCase):
    """Nutrition unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Nutrition:
        """Test Nutrition
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Nutrition`
        """
        model = Nutrition()
        if include_optional:
            return Nutrition(
                added_sugars = openapi_client.models.float_unit.FloatUnit(
                    amount = 1.337, 
                    unit = '', ),
                added_sugars_daily_percentage = 1.337,
                calcium = openapi_client.models.float_unit.FloatUnit(
                    amount = 1.337, 
                    unit = '', ),
                calcium_daily_percentage = 1.337,
                cholesterol = openapi_client.models.float_unit.FloatUnit(
                    amount = 1.337, 
                    unit = '', ),
                cholesterol_daily_percentage = 1.337,
                dietary_fiber = openapi_client.models.float_unit.FloatUnit(
                    amount = 1.337, 
                    unit = '', ),
                dietary_fiber_daily_percentage = 1.337,
                energy = openapi_client.models.float_unit.FloatUnit(
                    amount = 1.337, 
                    unit = '', ),
                energy_from_fat = openapi_client.models.float_unit.FloatUnit(
                    amount = 1.337, 
                    unit = '', ),
                folate_daily_percentage = 1.337,
                folate_folic_acid = openapi_client.models.float_unit.FloatUnit(
                    amount = 1.337, 
                    unit = '', ),
                folate_mcg_dfe = 1.337,
                iron = openapi_client.models.float_unit.FloatUnit(
                    amount = 1.337, 
                    unit = '', ),
                iron_daily_percentage = 1.337,
                monounsaturated_fat = openapi_client.models.float_unit.FloatUnit(
                    amount = 1.337, 
                    unit = '', ),
                nutrition_fact_measure = '',
                polyols = openapi_client.models.float_unit.FloatUnit(
                    amount = 1.337, 
                    unit = '', ),
                polyunsaturated_fat = openapi_client.models.float_unit.FloatUnit(
                    amount = 1.337, 
                    unit = '', ),
                potassium = openapi_client.models.float_unit.FloatUnit(
                    amount = 1.337, 
                    unit = '', ),
                potassium_daily_percentage = 1.337,
                prepared_size_description = '',
                protein = openapi_client.models.float_unit.FloatUnit(
                    amount = 1.337, 
                    unit = '', ),
                protein_daily_percentage = 1.337,
                saturated_fat = openapi_client.models.float_unit.FloatUnit(
                    amount = 1.337, 
                    unit = '', ),
                saturated_fat_daily_percentage = 1.337,
                serving_size_description = '',
                serving_size_measure = openapi_client.models.float_unit.FloatUnit(
                    amount = 1.337, 
                    unit = '', ),
                servings_per_container = '',
                sodium = openapi_client.models.float_unit.FloatUnit(
                    amount = 1.337, 
                    unit = '', ),
                sodium_daily_percentage = 1.337,
                starch = openapi_client.models.float_unit.FloatUnit(
                    amount = 1.337, 
                    unit = '', ),
                total_carbohydrate = openapi_client.models.float_unit.FloatUnit(
                    amount = 1.337, 
                    unit = '', ),
                total_carbohydrate_daily_percentage = 1.337,
                total_fat = openapi_client.models.float_unit.FloatUnit(
                    amount = 1.337, 
                    unit = '', ),
                total_fat_daily_percentage = 1.337,
                total_sugars = openapi_client.models.float_unit.FloatUnit(
                    amount = 1.337, 
                    unit = '', ),
                total_sugars_daily_percentage = 1.337,
                trans_fat = openapi_client.models.float_unit.FloatUnit(
                    amount = 1.337, 
                    unit = '', ),
                trans_fat_daily_percentage = 1.337,
                vitamin_d = openapi_client.models.float_unit.FloatUnit(
                    amount = 1.337, 
                    unit = '', ),
                vitamin_d_daily_percentage = 1.337,
                voluntary_nutrition_fact = [
                    openapi_client.models.voluntary_nutrition_fact.VoluntaryNutritionFact(
                        daily_percentage = 1.337, 
                        name = '', 
                        value = openapi_client.models.float_unit.FloatUnit(
                            amount = 1.337, 
                            unit = '', ), )
                    ]
            )
        else:
            return Nutrition(
        )
        """

    def testNutrition(self):
        """Test Nutrition"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

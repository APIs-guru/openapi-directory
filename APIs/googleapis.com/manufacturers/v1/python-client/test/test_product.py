# coding: utf-8

"""
    Manufacturer Center API

    Public API for managing Manufacturer Center related data.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.product import Product

class TestProduct(unittest.TestCase):
    """Product unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Product:
        """Test Product
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Product`
        """
        model = Product()
        if include_optional:
            return Product(
                attributes = openapi_client.models.attributes.Attributes(
                    additional_image_link = [
                        openapi_client.models.image.Image(
                            image_url = '', 
                            status = 'STATUS_UNSPECIFIED', 
                            type = 'TYPE_UNSPECIFIED', )
                        ], 
                    age_group = '', 
                    brand = '', 
                    capacity = openapi_client.models.capacity.Capacity(
                        unit = '', 
                        value = '', ), 
                    certification = [
                        openapi_client.models.google_shopping_manufacturers_v1_product_certification.GoogleShoppingManufacturersV1ProductCertification(
                            authority = '', 
                            code = '', 
                            name = '', )
                        ], 
                    color = '', 
                    count = openapi_client.models.count.Count(
                        unit = '', 
                        value = '', ), 
                    description = '', 
                    disclosure_date = '', 
                    excluded_destination = [
                        ''
                        ], 
                    feature_description = [
                        openapi_client.models.feature_description.FeatureDescription(
                            headline = '', 
                            image = openapi_client.models.image.Image(
                                image_url = '', 
                                status = 'STATUS_UNSPECIFIED', 
                                type = 'TYPE_UNSPECIFIED', ), 
                            text = '', )
                        ], 
                    flavor = '', 
                    format = '', 
                    gender = '', 
                    grocery = openapi_client.models.grocery.Grocery(
                        active_ingredients = '', 
                        alcohol_by_volume = 1.337, 
                        allergens = '', 
                        derived_nutrition_claim = [
                            ''
                            ], 
                        directions = '', 
                        indications = '', 
                        ingredients = '', 
                        nutrition_claim = [
                            ''
                            ], 
                        storage_instructions = '', ), 
                    gtin = [
                        ''
                        ], 
                    image_link = , 
                    included_destination = [
                        ''
                        ], 
                    item_group_id = '', 
                    material = '', 
                    mpn = '', 
                    nutrition = openapi_client.models.nutrition.Nutrition(
                        added_sugars = openapi_client.models.float_unit.FloatUnit(
                            amount = 1.337, 
                            unit = '', ), 
                        added_sugars_daily_percentage = 1.337, 
                        calcium = openapi_client.models.float_unit.FloatUnit(
                            amount = 1.337, 
                            unit = '', ), 
                        calcium_daily_percentage = 1.337, 
                        cholesterol = , 
                        cholesterol_daily_percentage = 1.337, 
                        dietary_fiber = , 
                        dietary_fiber_daily_percentage = 1.337, 
                        energy = , 
                        energy_from_fat = , 
                        folate_daily_percentage = 1.337, 
                        folate_folic_acid = , 
                        folate_mcg_dfe = 1.337, 
                        iron = , 
                        iron_daily_percentage = 1.337, 
                        monounsaturated_fat = , 
                        nutrition_fact_measure = '', 
                        polyols = , 
                        polyunsaturated_fat = , 
                        potassium = , 
                        potassium_daily_percentage = 1.337, 
                        prepared_size_description = '', 
                        protein = , 
                        protein_daily_percentage = 1.337, 
                        saturated_fat = , 
                        saturated_fat_daily_percentage = 1.337, 
                        serving_size_description = '', 
                        serving_size_measure = , 
                        servings_per_container = '', 
                        sodium = , 
                        sodium_daily_percentage = 1.337, 
                        starch = , 
                        total_carbohydrate = , 
                        total_carbohydrate_daily_percentage = 1.337, 
                        total_fat = , 
                        total_fat_daily_percentage = 1.337, 
                        total_sugars = , 
                        total_sugars_daily_percentage = 1.337, 
                        trans_fat = , 
                        trans_fat_daily_percentage = 1.337, 
                        vitamin_d = , 
                        vitamin_d_daily_percentage = 1.337, 
                        voluntary_nutrition_fact = [
                            openapi_client.models.voluntary_nutrition_fact.VoluntaryNutritionFact(
                                daily_percentage = 1.337, 
                                name = '', 
                                value = , )
                            ], ), 
                    pattern = '', 
                    product_detail = [
                        openapi_client.models.product_detail.ProductDetail(
                            attribute_name = '', 
                            attribute_value = '', 
                            section_name = '', )
                        ], 
                    product_highlight = [
                        ''
                        ], 
                    product_line = '', 
                    product_name = '', 
                    product_page_url = '', 
                    product_type = [
                        ''
                        ], 
                    release_date = '', 
                    rich_product_content = [
                        ''
                        ], 
                    scent = '', 
                    size = '', 
                    size_system = '', 
                    size_type = [
                        ''
                        ], 
                    suggested_retail_price = openapi_client.models.price.Price(
                        amount = '', 
                        currency = '', ), 
                    target_client_id = '', 
                    theme = '', 
                    title = '', 
                    video_link = [
                        ''
                        ], 
                    virtual_model_link = '', ),
                content_language = '',
                destination_statuses = [
                    openapi_client.models.destination_status.DestinationStatus(
                        destination = '', 
                        status = 'UNKNOWN', )
                    ],
                issues = [
                    openapi_client.models.issue.Issue(
                        attribute = '', 
                        description = '', 
                        destination = '', 
                        resolution = 'RESOLUTION_UNSPECIFIED', 
                        severity = 'SEVERITY_UNSPECIFIED', 
                        timestamp = '', 
                        title = '', 
                        type = '', )
                    ],
                name = '',
                parent = '',
                product_id = '',
                target_country = ''
            )
        else:
            return Product(
        )
        """

    def testProduct(self):
        """Test Product"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

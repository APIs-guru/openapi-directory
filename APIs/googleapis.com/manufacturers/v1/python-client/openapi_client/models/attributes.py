# coding: utf-8

"""
    Manufacturer Center API

    Public API for managing Manufacturer Center related data.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.capacity import Capacity
from openapi_client.models.count import Count
from openapi_client.models.feature_description import FeatureDescription
from openapi_client.models.google_shopping_manufacturers_v1_product_certification import GoogleShoppingManufacturersV1ProductCertification
from openapi_client.models.grocery import Grocery
from openapi_client.models.image import Image
from openapi_client.models.nutrition import Nutrition
from openapi_client.models.price import Price
from openapi_client.models.product_detail import ProductDetail
from typing import Optional, Set
from typing_extensions import Self

class Attributes(BaseModel):
    """
    Attributes of the product. For more information, see https://support.google.com/manufacturers/answer/6124116.
    """ # noqa: E501
    additional_image_link: Optional[List[Image]] = Field(default=None, description="The additional images of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#addlimage.", alias="additionalImageLink")
    age_group: Optional[StrictStr] = Field(default=None, description="The target age group of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#agegroup.", alias="ageGroup")
    brand: Optional[StrictStr] = Field(default=None, description="The brand name of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#brand.")
    capacity: Optional[Capacity] = None
    certification: Optional[List[GoogleShoppingManufacturersV1ProductCertification]] = Field(default=None, description="Optional. List of certifications claimed by this product.")
    color: Optional[StrictStr] = Field(default=None, description="The color of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#color.")
    count: Optional[Count] = None
    description: Optional[StrictStr] = Field(default=None, description="The description of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#description.")
    disclosure_date: Optional[StrictStr] = Field(default=None, description="The disclosure date of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#disclosure.", alias="disclosureDate")
    excluded_destination: Optional[List[StrictStr]] = Field(default=None, description="A list of excluded destinations such as \"ClientExport\", \"ClientShoppingCatalog\" or \"PartnerShoppingCatalog\". For more information, see https://support.google.com/manufacturers/answer/7443550", alias="excludedDestination")
    feature_description: Optional[List[FeatureDescription]] = Field(default=None, description="The rich format description of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#featuredesc.", alias="featureDescription")
    flavor: Optional[StrictStr] = Field(default=None, description="The flavor of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#flavor.")
    format: Optional[StrictStr] = Field(default=None, description="The format of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#format.")
    gender: Optional[StrictStr] = Field(default=None, description="The target gender of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#gender.")
    grocery: Optional[Grocery] = None
    gtin: Optional[List[StrictStr]] = Field(default=None, description="The Global Trade Item Number (GTIN) of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#gtin.")
    image_link: Optional[Image] = Field(default=None, alias="imageLink")
    included_destination: Optional[List[StrictStr]] = Field(default=None, description="A list of included destinations such as \"ClientExport\", \"ClientShoppingCatalog\" or \"PartnerShoppingCatalog\". For more information, see https://support.google.com/manufacturers/answer/7443550", alias="includedDestination")
    item_group_id: Optional[StrictStr] = Field(default=None, description="The item group id of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#itemgroupid.", alias="itemGroupId")
    material: Optional[StrictStr] = Field(default=None, description="The material of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#material.")
    mpn: Optional[StrictStr] = Field(default=None, description="The Manufacturer Part Number (MPN) of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#mpn.")
    nutrition: Optional[Nutrition] = None
    pattern: Optional[StrictStr] = Field(default=None, description="The pattern of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#pattern.")
    product_detail: Optional[List[ProductDetail]] = Field(default=None, description="The details of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#productdetail.", alias="productDetail")
    product_highlight: Optional[List[StrictStr]] = Field(default=None, description="The product highlights. For more information, see https://support.google.com/manufacturers/answer/10066942", alias="productHighlight")
    product_line: Optional[StrictStr] = Field(default=None, description="The name of the group of products related to the product. For more information, see https://support.google.com/manufacturers/answer/6124116#productline.", alias="productLine")
    product_name: Optional[StrictStr] = Field(default=None, description="The canonical name of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#productname.", alias="productName")
    product_page_url: Optional[StrictStr] = Field(default=None, description="The URL of the detail page of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#productpage.", alias="productPageUrl")
    product_type: Optional[List[StrictStr]] = Field(default=None, description="The type or category of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#producttype.", alias="productType")
    release_date: Optional[StrictStr] = Field(default=None, description="The release date of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#release.", alias="releaseDate")
    rich_product_content: Optional[List[StrictStr]] = Field(default=None, description="Rich product content. For more information, see https://support.google.com/manufacturers/answer/9389865", alias="richProductContent")
    scent: Optional[StrictStr] = Field(default=None, description="The scent of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#scent.")
    size: Optional[StrictStr] = Field(default=None, description="The size of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#size.")
    size_system: Optional[StrictStr] = Field(default=None, description="The size system of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#sizesystem.", alias="sizeSystem")
    size_type: Optional[List[StrictStr]] = Field(default=None, description="The size type of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#sizetype.", alias="sizeType")
    suggested_retail_price: Optional[Price] = Field(default=None, alias="suggestedRetailPrice")
    target_client_id: Optional[StrictStr] = Field(default=None, description="The target client id. Should only be used in the accounts of the data partners. For more information, see https://support.google.com/manufacturers/answer/10857344", alias="targetClientId")
    theme: Optional[StrictStr] = Field(default=None, description="The theme of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#theme.")
    title: Optional[StrictStr] = Field(default=None, description="The title of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#title.")
    video_link: Optional[List[StrictStr]] = Field(default=None, description="The videos of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#video.", alias="videoLink")
    virtual_model_link: Optional[StrictStr] = Field(default=None, description="Virtual Model (3d) asset link.", alias="virtualModelLink")
    __properties: ClassVar[List[str]] = ["additionalImageLink", "ageGroup", "brand", "capacity", "certification", "color", "count", "description", "disclosureDate", "excludedDestination", "featureDescription", "flavor", "format", "gender", "grocery", "gtin", "imageLink", "includedDestination", "itemGroupId", "material", "mpn", "nutrition", "pattern", "productDetail", "productHighlight", "productLine", "productName", "productPageUrl", "productType", "releaseDate", "richProductContent", "scent", "size", "sizeSystem", "sizeType", "suggestedRetailPrice", "targetClientId", "theme", "title", "videoLink", "virtualModelLink"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Attributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_image_link (list)
        _items = []
        if self.additional_image_link:
            for _item_additional_image_link in self.additional_image_link:
                if _item_additional_image_link:
                    _items.append(_item_additional_image_link.to_dict())
            _dict['additionalImageLink'] = _items
        # override the default output from pydantic by calling `to_dict()` of capacity
        if self.capacity:
            _dict['capacity'] = self.capacity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in certification (list)
        _items = []
        if self.certification:
            for _item_certification in self.certification:
                if _item_certification:
                    _items.append(_item_certification.to_dict())
            _dict['certification'] = _items
        # override the default output from pydantic by calling `to_dict()` of count
        if self.count:
            _dict['count'] = self.count.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in feature_description (list)
        _items = []
        if self.feature_description:
            for _item_feature_description in self.feature_description:
                if _item_feature_description:
                    _items.append(_item_feature_description.to_dict())
            _dict['featureDescription'] = _items
        # override the default output from pydantic by calling `to_dict()` of grocery
        if self.grocery:
            _dict['grocery'] = self.grocery.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_link
        if self.image_link:
            _dict['imageLink'] = self.image_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nutrition
        if self.nutrition:
            _dict['nutrition'] = self.nutrition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in product_detail (list)
        _items = []
        if self.product_detail:
            for _item_product_detail in self.product_detail:
                if _item_product_detail:
                    _items.append(_item_product_detail.to_dict())
            _dict['productDetail'] = _items
        # override the default output from pydantic by calling `to_dict()` of suggested_retail_price
        if self.suggested_retail_price:
            _dict['suggestedRetailPrice'] = self.suggested_retail_price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Attributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalImageLink": [Image.from_dict(_item) for _item in obj["additionalImageLink"]] if obj.get("additionalImageLink") is not None else None,
            "ageGroup": obj.get("ageGroup"),
            "brand": obj.get("brand"),
            "capacity": Capacity.from_dict(obj["capacity"]) if obj.get("capacity") is not None else None,
            "certification": [GoogleShoppingManufacturersV1ProductCertification.from_dict(_item) for _item in obj["certification"]] if obj.get("certification") is not None else None,
            "color": obj.get("color"),
            "count": Count.from_dict(obj["count"]) if obj.get("count") is not None else None,
            "description": obj.get("description"),
            "disclosureDate": obj.get("disclosureDate"),
            "excludedDestination": obj.get("excludedDestination"),
            "featureDescription": [FeatureDescription.from_dict(_item) for _item in obj["featureDescription"]] if obj.get("featureDescription") is not None else None,
            "flavor": obj.get("flavor"),
            "format": obj.get("format"),
            "gender": obj.get("gender"),
            "grocery": Grocery.from_dict(obj["grocery"]) if obj.get("grocery") is not None else None,
            "gtin": obj.get("gtin"),
            "imageLink": Image.from_dict(obj["imageLink"]) if obj.get("imageLink") is not None else None,
            "includedDestination": obj.get("includedDestination"),
            "itemGroupId": obj.get("itemGroupId"),
            "material": obj.get("material"),
            "mpn": obj.get("mpn"),
            "nutrition": Nutrition.from_dict(obj["nutrition"]) if obj.get("nutrition") is not None else None,
            "pattern": obj.get("pattern"),
            "productDetail": [ProductDetail.from_dict(_item) for _item in obj["productDetail"]] if obj.get("productDetail") is not None else None,
            "productHighlight": obj.get("productHighlight"),
            "productLine": obj.get("productLine"),
            "productName": obj.get("productName"),
            "productPageUrl": obj.get("productPageUrl"),
            "productType": obj.get("productType"),
            "releaseDate": obj.get("releaseDate"),
            "richProductContent": obj.get("richProductContent"),
            "scent": obj.get("scent"),
            "size": obj.get("size"),
            "sizeSystem": obj.get("sizeSystem"),
            "sizeType": obj.get("sizeType"),
            "suggestedRetailPrice": Price.from_dict(obj["suggestedRetailPrice"]) if obj.get("suggestedRetailPrice") is not None else None,
            "targetClientId": obj.get("targetClientId"),
            "theme": obj.get("theme"),
            "title": obj.get("title"),
            "videoLink": obj.get("videoLink"),
            "virtualModelLink": obj.get("virtualModelLink")
        })
        return _obj



# coding: utf-8

"""
    Manufacturer Center API

    Public API for managing Manufacturer Center related data.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.attributes import Attributes
from openapi_client.models.destination_status import DestinationStatus
from openapi_client.models.issue import Issue
from typing import Optional, Set
from typing_extensions import Self

class Product(BaseModel):
    """
    Product data.
    """ # noqa: E501
    attributes: Optional[Attributes] = None
    content_language: Optional[StrictStr] = Field(default=None, description="The content language of the product as a two-letter ISO 639-1 language code (for example, en).", alias="contentLanguage")
    destination_statuses: Optional[List[DestinationStatus]] = Field(default=None, description="The status of the destinations.", alias="destinationStatuses")
    issues: Optional[List[Issue]] = Field(default=None, description="A server-generated list of issues associated with the product.")
    name: Optional[StrictStr] = Field(default=None, description="Name in the format `{target_country}:{content_language}:{product_id}`. `target_country` - The target country of the product as a CLDR territory code (for example, US). `content_language` - The content language of the product as a two-letter ISO 639-1 language code (for example, en). `product_id` - The ID of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#id.")
    parent: Optional[StrictStr] = Field(default=None, description="Parent ID in the format `accounts/{account_id}`. `account_id` - The ID of the Manufacturer Center account.")
    product_id: Optional[StrictStr] = Field(default=None, description="The ID of the product. For more information, see https://support.google.com/manufacturers/answer/6124116#id.", alias="productId")
    target_country: Optional[StrictStr] = Field(default=None, description="The target country of the product as a CLDR territory code (for example, US).", alias="targetCountry")
    __properties: ClassVar[List[str]] = ["attributes", "contentLanguage", "destinationStatuses", "issues", "name", "parent", "productId", "targetCountry"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Product from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attributes
        if self.attributes:
            _dict['attributes'] = self.attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in destination_statuses (list)
        _items = []
        if self.destination_statuses:
            for _item_destination_statuses in self.destination_statuses:
                if _item_destination_statuses:
                    _items.append(_item_destination_statuses.to_dict())
            _dict['destinationStatuses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in issues (list)
        _items = []
        if self.issues:
            for _item_issues in self.issues:
                if _item_issues:
                    _items.append(_item_issues.to_dict())
            _dict['issues'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Product from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributes": Attributes.from_dict(obj["attributes"]) if obj.get("attributes") is not None else None,
            "contentLanguage": obj.get("contentLanguage"),
            "destinationStatuses": [DestinationStatus.from_dict(_item) for _item in obj["destinationStatuses"]] if obj.get("destinationStatuses") is not None else None,
            "issues": [Issue.from_dict(_item) for _item in obj["issues"]] if obj.get("issues") is not None else None,
            "name": obj.get("name"),
            "parent": obj.get("parent"),
            "productId": obj.get("productId"),
            "targetCountry": obj.get("targetCountry")
        })
        return _obj



# coding: utf-8

"""
    Manufacturer Center API

    Public API for managing Manufacturer Center related data.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.float_unit import FloatUnit
from openapi_client.models.voluntary_nutrition_fact import VoluntaryNutritionFact
from typing import Optional, Set
from typing_extensions import Self

class Nutrition(BaseModel):
    """
    Nutrition
    """ # noqa: E501
    added_sugars: Optional[FloatUnit] = Field(default=None, alias="addedSugars")
    added_sugars_daily_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Added sugars daily percentage.", alias="addedSugarsDailyPercentage")
    calcium: Optional[FloatUnit] = None
    calcium_daily_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Calcium daily percentage.", alias="calciumDailyPercentage")
    cholesterol: Optional[FloatUnit] = None
    cholesterol_daily_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Cholesterol daily percentage.", alias="cholesterolDailyPercentage")
    dietary_fiber: Optional[FloatUnit] = Field(default=None, alias="dietaryFiber")
    dietary_fiber_daily_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Dietary fiber daily percentage.", alias="dietaryFiberDailyPercentage")
    energy: Optional[FloatUnit] = None
    energy_from_fat: Optional[FloatUnit] = Field(default=None, alias="energyFromFat")
    folate_daily_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Folate daily percentage.", alias="folateDailyPercentage")
    folate_folic_acid: Optional[FloatUnit] = Field(default=None, alias="folateFolicAcid")
    folate_mcg_dfe: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Folate mcg DFE.", alias="folateMcgDfe")
    iron: Optional[FloatUnit] = None
    iron_daily_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Iron daily percentage.", alias="ironDailyPercentage")
    monounsaturated_fat: Optional[FloatUnit] = Field(default=None, alias="monounsaturatedFat")
    nutrition_fact_measure: Optional[StrictStr] = Field(default=None, description="Nutrition fact measure.", alias="nutritionFactMeasure")
    polyols: Optional[FloatUnit] = None
    polyunsaturated_fat: Optional[FloatUnit] = Field(default=None, alias="polyunsaturatedFat")
    potassium: Optional[FloatUnit] = None
    potassium_daily_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Potassium daily percentage.", alias="potassiumDailyPercentage")
    prepared_size_description: Optional[StrictStr] = Field(default=None, description="Prepared size description.", alias="preparedSizeDescription")
    protein: Optional[FloatUnit] = None
    protein_daily_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Protein daily percentage.", alias="proteinDailyPercentage")
    saturated_fat: Optional[FloatUnit] = Field(default=None, alias="saturatedFat")
    saturated_fat_daily_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Saturated fat daily percentage.", alias="saturatedFatDailyPercentage")
    serving_size_description: Optional[StrictStr] = Field(default=None, description="Food Serving Size. Serving size description.", alias="servingSizeDescription")
    serving_size_measure: Optional[FloatUnit] = Field(default=None, alias="servingSizeMeasure")
    servings_per_container: Optional[StrictStr] = Field(default=None, description="Servings per container.", alias="servingsPerContainer")
    sodium: Optional[FloatUnit] = None
    sodium_daily_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Sodium daily percentage.", alias="sodiumDailyPercentage")
    starch: Optional[FloatUnit] = None
    total_carbohydrate: Optional[FloatUnit] = Field(default=None, alias="totalCarbohydrate")
    total_carbohydrate_daily_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total carbohydrate daily percentage.", alias="totalCarbohydrateDailyPercentage")
    total_fat: Optional[FloatUnit] = Field(default=None, alias="totalFat")
    total_fat_daily_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total fat daily percentage.", alias="totalFatDailyPercentage")
    total_sugars: Optional[FloatUnit] = Field(default=None, alias="totalSugars")
    total_sugars_daily_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total sugars daily percentage.", alias="totalSugarsDailyPercentage")
    trans_fat: Optional[FloatUnit] = Field(default=None, alias="transFat")
    trans_fat_daily_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Trans fat daily percentage.", alias="transFatDailyPercentage")
    vitamin_d: Optional[FloatUnit] = Field(default=None, alias="vitaminD")
    vitamin_d_daily_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Vitamin D daily percentage.", alias="vitaminDDailyPercentage")
    voluntary_nutrition_fact: Optional[List[VoluntaryNutritionFact]] = Field(default=None, description="Voluntary nutrition fact.", alias="voluntaryNutritionFact")
    __properties: ClassVar[List[str]] = ["addedSugars", "addedSugarsDailyPercentage", "calcium", "calciumDailyPercentage", "cholesterol", "cholesterolDailyPercentage", "dietaryFiber", "dietaryFiberDailyPercentage", "energy", "energyFromFat", "folateDailyPercentage", "folateFolicAcid", "folateMcgDfe", "iron", "ironDailyPercentage", "monounsaturatedFat", "nutritionFactMeasure", "polyols", "polyunsaturatedFat", "potassium", "potassiumDailyPercentage", "preparedSizeDescription", "protein", "proteinDailyPercentage", "saturatedFat", "saturatedFatDailyPercentage", "servingSizeDescription", "servingSizeMeasure", "servingsPerContainer", "sodium", "sodiumDailyPercentage", "starch", "totalCarbohydrate", "totalCarbohydrateDailyPercentage", "totalFat", "totalFatDailyPercentage", "totalSugars", "totalSugarsDailyPercentage", "transFat", "transFatDailyPercentage", "vitaminD", "vitaminDDailyPercentage", "voluntaryNutritionFact"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Nutrition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of added_sugars
        if self.added_sugars:
            _dict['addedSugars'] = self.added_sugars.to_dict()
        # override the default output from pydantic by calling `to_dict()` of calcium
        if self.calcium:
            _dict['calcium'] = self.calcium.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cholesterol
        if self.cholesterol:
            _dict['cholesterol'] = self.cholesterol.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dietary_fiber
        if self.dietary_fiber:
            _dict['dietaryFiber'] = self.dietary_fiber.to_dict()
        # override the default output from pydantic by calling `to_dict()` of energy
        if self.energy:
            _dict['energy'] = self.energy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of energy_from_fat
        if self.energy_from_fat:
            _dict['energyFromFat'] = self.energy_from_fat.to_dict()
        # override the default output from pydantic by calling `to_dict()` of folate_folic_acid
        if self.folate_folic_acid:
            _dict['folateFolicAcid'] = self.folate_folic_acid.to_dict()
        # override the default output from pydantic by calling `to_dict()` of iron
        if self.iron:
            _dict['iron'] = self.iron.to_dict()
        # override the default output from pydantic by calling `to_dict()` of monounsaturated_fat
        if self.monounsaturated_fat:
            _dict['monounsaturatedFat'] = self.monounsaturated_fat.to_dict()
        # override the default output from pydantic by calling `to_dict()` of polyols
        if self.polyols:
            _dict['polyols'] = self.polyols.to_dict()
        # override the default output from pydantic by calling `to_dict()` of polyunsaturated_fat
        if self.polyunsaturated_fat:
            _dict['polyunsaturatedFat'] = self.polyunsaturated_fat.to_dict()
        # override the default output from pydantic by calling `to_dict()` of potassium
        if self.potassium:
            _dict['potassium'] = self.potassium.to_dict()
        # override the default output from pydantic by calling `to_dict()` of protein
        if self.protein:
            _dict['protein'] = self.protein.to_dict()
        # override the default output from pydantic by calling `to_dict()` of saturated_fat
        if self.saturated_fat:
            _dict['saturatedFat'] = self.saturated_fat.to_dict()
        # override the default output from pydantic by calling `to_dict()` of serving_size_measure
        if self.serving_size_measure:
            _dict['servingSizeMeasure'] = self.serving_size_measure.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sodium
        if self.sodium:
            _dict['sodium'] = self.sodium.to_dict()
        # override the default output from pydantic by calling `to_dict()` of starch
        if self.starch:
            _dict['starch'] = self.starch.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_carbohydrate
        if self.total_carbohydrate:
            _dict['totalCarbohydrate'] = self.total_carbohydrate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_fat
        if self.total_fat:
            _dict['totalFat'] = self.total_fat.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_sugars
        if self.total_sugars:
            _dict['totalSugars'] = self.total_sugars.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trans_fat
        if self.trans_fat:
            _dict['transFat'] = self.trans_fat.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vitamin_d
        if self.vitamin_d:
            _dict['vitaminD'] = self.vitamin_d.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in voluntary_nutrition_fact (list)
        _items = []
        if self.voluntary_nutrition_fact:
            for _item_voluntary_nutrition_fact in self.voluntary_nutrition_fact:
                if _item_voluntary_nutrition_fact:
                    _items.append(_item_voluntary_nutrition_fact.to_dict())
            _dict['voluntaryNutritionFact'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Nutrition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addedSugars": FloatUnit.from_dict(obj["addedSugars"]) if obj.get("addedSugars") is not None else None,
            "addedSugarsDailyPercentage": obj.get("addedSugarsDailyPercentage"),
            "calcium": FloatUnit.from_dict(obj["calcium"]) if obj.get("calcium") is not None else None,
            "calciumDailyPercentage": obj.get("calciumDailyPercentage"),
            "cholesterol": FloatUnit.from_dict(obj["cholesterol"]) if obj.get("cholesterol") is not None else None,
            "cholesterolDailyPercentage": obj.get("cholesterolDailyPercentage"),
            "dietaryFiber": FloatUnit.from_dict(obj["dietaryFiber"]) if obj.get("dietaryFiber") is not None else None,
            "dietaryFiberDailyPercentage": obj.get("dietaryFiberDailyPercentage"),
            "energy": FloatUnit.from_dict(obj["energy"]) if obj.get("energy") is not None else None,
            "energyFromFat": FloatUnit.from_dict(obj["energyFromFat"]) if obj.get("energyFromFat") is not None else None,
            "folateDailyPercentage": obj.get("folateDailyPercentage"),
            "folateFolicAcid": FloatUnit.from_dict(obj["folateFolicAcid"]) if obj.get("folateFolicAcid") is not None else None,
            "folateMcgDfe": obj.get("folateMcgDfe"),
            "iron": FloatUnit.from_dict(obj["iron"]) if obj.get("iron") is not None else None,
            "ironDailyPercentage": obj.get("ironDailyPercentage"),
            "monounsaturatedFat": FloatUnit.from_dict(obj["monounsaturatedFat"]) if obj.get("monounsaturatedFat") is not None else None,
            "nutritionFactMeasure": obj.get("nutritionFactMeasure"),
            "polyols": FloatUnit.from_dict(obj["polyols"]) if obj.get("polyols") is not None else None,
            "polyunsaturatedFat": FloatUnit.from_dict(obj["polyunsaturatedFat"]) if obj.get("polyunsaturatedFat") is not None else None,
            "potassium": FloatUnit.from_dict(obj["potassium"]) if obj.get("potassium") is not None else None,
            "potassiumDailyPercentage": obj.get("potassiumDailyPercentage"),
            "preparedSizeDescription": obj.get("preparedSizeDescription"),
            "protein": FloatUnit.from_dict(obj["protein"]) if obj.get("protein") is not None else None,
            "proteinDailyPercentage": obj.get("proteinDailyPercentage"),
            "saturatedFat": FloatUnit.from_dict(obj["saturatedFat"]) if obj.get("saturatedFat") is not None else None,
            "saturatedFatDailyPercentage": obj.get("saturatedFatDailyPercentage"),
            "servingSizeDescription": obj.get("servingSizeDescription"),
            "servingSizeMeasure": FloatUnit.from_dict(obj["servingSizeMeasure"]) if obj.get("servingSizeMeasure") is not None else None,
            "servingsPerContainer": obj.get("servingsPerContainer"),
            "sodium": FloatUnit.from_dict(obj["sodium"]) if obj.get("sodium") is not None else None,
            "sodiumDailyPercentage": obj.get("sodiumDailyPercentage"),
            "starch": FloatUnit.from_dict(obj["starch"]) if obj.get("starch") is not None else None,
            "totalCarbohydrate": FloatUnit.from_dict(obj["totalCarbohydrate"]) if obj.get("totalCarbohydrate") is not None else None,
            "totalCarbohydrateDailyPercentage": obj.get("totalCarbohydrateDailyPercentage"),
            "totalFat": FloatUnit.from_dict(obj["totalFat"]) if obj.get("totalFat") is not None else None,
            "totalFatDailyPercentage": obj.get("totalFatDailyPercentage"),
            "totalSugars": FloatUnit.from_dict(obj["totalSugars"]) if obj.get("totalSugars") is not None else None,
            "totalSugarsDailyPercentage": obj.get("totalSugarsDailyPercentage"),
            "transFat": FloatUnit.from_dict(obj["transFat"]) if obj.get("transFat") is not None else None,
            "transFatDailyPercentage": obj.get("transFatDailyPercentage"),
            "vitaminD": FloatUnit.from_dict(obj["vitaminD"]) if obj.get("vitaminD") is not None else None,
            "vitaminDDailyPercentage": obj.get("vitaminDDailyPercentage"),
            "voluntaryNutritionFact": [VoluntaryNutritionFact.from_dict(_item) for _item in obj["voluntaryNutritionFact"]] if obj.get("voluntaryNutritionFact") is not None else None
        })
        return _obj



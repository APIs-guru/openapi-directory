# coding: utf-8

"""
    Manufacturer Center API

    Public API for managing Manufacturer Center related data.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.certification import Certification
from openapi_client.models.destination_status import DestinationStatus
from openapi_client.models.issue import Issue
from typing import Optional, Set
from typing_extensions import Self

class ProductCertification(BaseModel):
    """
    Product certification data.
    """ # noqa: E501
    brand: Optional[StrictStr] = Field(default=None, description="Required. This is the product's brand name. The brand is used to help identify your product.")
    certification: Optional[List[Certification]] = Field(default=None, description="Required. A list of certifications to link to the described product.")
    country_code: Optional[List[StrictStr]] = Field(default=None, description="Optional. A 2-letter country code (ISO 3166-1 Alpha 2).", alias="countryCode")
    destination_statuses: Optional[List[DestinationStatus]] = Field(default=None, description="Output only. The statuses of the destinations.", alias="destinationStatuses")
    issues: Optional[List[Issue]] = Field(default=None, description="Output only. A server-generated list of issues associated with the product.")
    mpn: Optional[List[StrictStr]] = Field(default=None, description="Optional. These are the Manufacturer Part Numbers (MPN). MPNs are used to uniquely identify a specific product among all products from the same manufacturer")
    name: Optional[StrictStr] = Field(default=None, description="Required. The unique name identifier of a product certification Format: accounts/{account}/languages/{language_code}/productCertifications/{id} Where `id` is a some unique identifier and `language_code` is a 2-letter ISO 639-1 code of a Shopping supported language according to https://support.google.com/merchants/answer/160637.")
    product_code: Optional[List[StrictStr]] = Field(default=None, description="Optional. Another name for GTIN.", alias="productCode")
    product_type: Optional[List[StrictStr]] = Field(default=None, description="Optional. These are your own product categorization system in your product data.", alias="productType")
    title: Optional[StrictStr] = Field(default=None, description="Required. This is to clearly identify the product you are certifying.")
    __properties: ClassVar[List[str]] = ["brand", "certification", "countryCode", "destinationStatuses", "issues", "mpn", "name", "productCode", "productType", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductCertification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "destination_statuses",
            "issues",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in certification (list)
        _items = []
        if self.certification:
            for _item_certification in self.certification:
                if _item_certification:
                    _items.append(_item_certification.to_dict())
            _dict['certification'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in destination_statuses (list)
        _items = []
        if self.destination_statuses:
            for _item_destination_statuses in self.destination_statuses:
                if _item_destination_statuses:
                    _items.append(_item_destination_statuses.to_dict())
            _dict['destinationStatuses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in issues (list)
        _items = []
        if self.issues:
            for _item_issues in self.issues:
                if _item_issues:
                    _items.append(_item_issues.to_dict())
            _dict['issues'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductCertification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "brand": obj.get("brand"),
            "certification": [Certification.from_dict(_item) for _item in obj["certification"]] if obj.get("certification") is not None else None,
            "countryCode": obj.get("countryCode"),
            "destinationStatuses": [DestinationStatus.from_dict(_item) for _item in obj["destinationStatuses"]] if obj.get("destinationStatuses") is not None else None,
            "issues": [Issue.from_dict(_item) for _item in obj["issues"]] if obj.get("issues") is not None else None,
            "mpn": obj.get("mpn"),
            "name": obj.get("name"),
            "productCode": obj.get("productCode"),
            "productType": obj.get("productType"),
            "title": obj.get("title")
        })
        return _obj



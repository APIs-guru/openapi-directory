# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.xps_tables_dataset_metadata import XPSTablesDatasetMetadata

class TestXPSTablesDatasetMetadata(unittest.TestCase):
    """XPSTablesDatasetMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> XPSTablesDatasetMetadata:
        """Test XPSTablesDatasetMetadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `XPSTablesDatasetMetadata`
        """
        model = XPSTablesDatasetMetadata()
        if include_optional:
            return XPSTablesDatasetMetadata(
                ml_use_column_id = 56,
                primary_table_spec = openapi_client.models.xps_table_spec.XPSTableSpec(
                    column_specs = {
                        'key' : openapi_client.models.xps_column_spec.XPSColumnSpec(
                            column_id = 56, 
                            data_stats = openapi_client.models.xps_data_stats.XPSDataStats(
                                array_stats = openapi_client.models.xps_array_stats.XPSArrayStats(
                                    common_stats = openapi_client.models.xps_common_stats.XPSCommonStats(
                                        distinct_value_count = '', 
                                        null_value_count = '', 
                                        valid_value_count = '', ), 
                                    member_stats = openapi_client.models.xps_data_stats.XPSDataStats(
                                        category_stats = openapi_client.models.xps_category_stats.XPSCategoryStats(
                                            top_category_stats = [
                                                openapi_client.models.xps_category_stats_single_category_stats.XPSCategoryStatsSingleCategoryStats(
                                                    count = '', 
                                                    value = '', )
                                                ], ), 
                                        distinct_value_count = '', 
                                        float64_stats = openapi_client.models.xps_float64_stats.XPSFloat64Stats(
                                            histogram_buckets = [
                                                openapi_client.models.xps_float64_stats_histogram_bucket.XPSFloat64StatsHistogramBucket(
                                                    count = '', 
                                                    max = 1.337, 
                                                    min = 1.337, )
                                                ], 
                                            mean = 1.337, 
                                            quantiles = [
                                                1.337
                                                ], 
                                            standard_deviation = 1.337, ), 
                                        null_value_count = '', 
                                        string_stats = openapi_client.models.xps_string_stats.XPSStringStats(
                                            top_unigram_stats = [
                                                openapi_client.models.xps_string_stats_unigram_stats.XPSStringStatsUnigramStats(
                                                    count = '', 
                                                    value = '', )
                                                ], ), 
                                        struct_stats = openapi_client.models.xps_struct_stats.XPSStructStats(
                                            field_stats = {
                                                'key' : 
                                                }, ), 
                                        timestamp_stats = openapi_client.models.xps_timestamp_stats.XPSTimestampStats(
                                            granular_stats = {
                                                'key' : openapi_client.models.xps_timestamp_stats_granular_stats.XPSTimestampStatsGranularStats(
                                                    buckets = {
                                                        'key' : ''
                                                        }, )
                                                }, 
                                            median_timestamp_nanos = '', ), 
                                        valid_value_count = '', ), ), 
                                category_stats = openapi_client.models.xps_category_stats.XPSCategoryStats(), 
                                distinct_value_count = '', 
                                float64_stats = openapi_client.models.xps_float64_stats.XPSFloat64Stats(
                                    mean = 1.337, 
                                    standard_deviation = 1.337, ), 
                                null_value_count = '', 
                                string_stats = openapi_client.models.xps_string_stats.XPSStringStats(), 
                                struct_stats = openapi_client.models.xps_struct_stats.XPSStructStats(), 
                                timestamp_stats = openapi_client.models.xps_timestamp_stats.XPSTimestampStats(
                                    median_timestamp_nanos = '', ), 
                                valid_value_count = '', ), 
                            data_type = openapi_client.models.xps_data_type.XPSDataType(
                                compatible_data_types = [
                                    openapi_client.models.xps_data_type.XPSDataType(
                                        list_element_type = , 
                                        nullable = True, 
                                        struct_type = openapi_client.models.xps_struct_type.XPSStructType(
                                            fields = {
                                                'key' : 
                                                }, ), 
                                        time_format = '', 
                                        type_code = 'TYPE_CODE_UNSPECIFIED', )
                                    ], 
                                list_element_type = , 
                                nullable = True, 
                                struct_type = openapi_client.models.xps_struct_type.XPSStructType(), 
                                time_format = '', 
                                type_code = 'TYPE_CODE_UNSPECIFIED', ), 
                            display_name = '', 
                            forecasting_metadata = openapi_client.models.xps_column_spec_forecasting_metadata.XPSColumnSpecForecastingMetadata(
                                column_type = 'COLUMN_TYPE_UNSPECIFIED', ), 
                            top_correlated_columns = [
                                openapi_client.models.xps_column_spec_correlated_column.XPSColumnSpecCorrelatedColumn(
                                    column_id = 56, 
                                    correlation_stats = openapi_client.models.xps_correlation_stats.XPSCorrelationStats(
                                        cramers_v = 1.337, ), )
                                ], )
                        }, 
                    imported_data_size_in_bytes = '', 
                    row_count = '', 
                    time_column_id = 56, 
                    valid_row_count = '', ),
                target_column_correlations = {
                    'key' : openapi_client.models.xps_correlation_stats.XPSCorrelationStats(
                        cramers_v = 1.337, )
                    },
                target_column_id = 56,
                weight_column_id = 56
            )
        else:
            return XPSTablesDatasetMetadata(
        )
        """

    def testXPSTablesDatasetMetadata(self):
        """Test XPSTablesDatasetMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.annotate_text_response import AnnotateTextResponse

class TestAnnotateTextResponse(unittest.TestCase):
    """AnnotateTextResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AnnotateTextResponse:
        """Test AnnotateTextResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AnnotateTextResponse`
        """
        model = AnnotateTextResponse()
        if include_optional:
            return AnnotateTextResponse(
                categories = [
                    openapi_client.models.classification_category.ClassificationCategory(
                        confidence = 1.337, 
                        name = '', )
                    ],
                document_sentiment = openapi_client.models.sentiment.Sentiment(
                    magnitude = 1.337, 
                    score = 1.337, ),
                entities = [
                    openapi_client.models.entity.Entity(
                        mentions = [
                            openapi_client.models.entity_mention.EntityMention(
                                probability = 1.337, 
                                sentiment = openapi_client.models.sentiment.Sentiment(
                                    magnitude = 1.337, 
                                    score = 1.337, ), 
                                text = openapi_client.models.text_span.TextSpan(
                                    begin_offset = 56, 
                                    content = '', ), 
                                type = 'TYPE_UNKNOWN', )
                            ], 
                        metadata = {
                            'key' : ''
                            }, 
                        name = '', 
                        sentiment = openapi_client.models.sentiment.Sentiment(
                            magnitude = 1.337, 
                            score = 1.337, ), 
                        type = 'UNKNOWN', )
                    ],
                language_code = '',
                language_supported = True,
                moderation_categories = [
                    openapi_client.models.classification_category.ClassificationCategory(
                        confidence = 1.337, 
                        name = '', )
                    ],
                sentences = [
                    openapi_client.models.sentence.Sentence(
                        sentiment = openapi_client.models.sentiment.Sentiment(
                            magnitude = 1.337, 
                            score = 1.337, ), 
                        text = openapi_client.models.text_span.TextSpan(
                            begin_offset = 56, 
                            content = '', ), )
                    ]
            )
        else:
            return AnnotateTextResponse(
        )
        """

    def testAnnotateTextResponse(self):
        """Test AnnotateTextResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

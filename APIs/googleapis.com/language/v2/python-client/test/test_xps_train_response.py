# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.xps_train_response import XPSTrainResponse

class TestXPSTrainResponse(unittest.TestCase):
    """XPSTrainResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> XPSTrainResponse:
        """Test XPSTrainResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `XPSTrainResponse`
        """
        model = XPSTrainResponse()
        if include_optional:
            return XPSTrainResponse(
                deployed_model_size_bytes = '',
                error_analysis_configs = [
                    openapi_client.models.xps_vision_error_analysis_config.XPSVisionErrorAnalysisConfig(
                        example_count = 56, 
                        query_type = 'QUERY_TYPE_UNSPECIFIED', )
                    ],
                evaluated_example_set = openapi_client.models.xps_example_set.XPSExampleSet(
                    file_spec = openapi_client.models.xps_file_spec.XPSFileSpec(
                        directory_path = '', 
                        file_format = 'FILE_FORMAT_UNKNOWN', 
                        single_file_path = '', ), 
                    fingerprint = '', 
                    num_examples = '', 
                    num_input_sources = '', ),
                evaluation_metrics_set = openapi_client.models.xps_evaluation_metrics_set.XPSEvaluationMetricsSet(
                    evaluation_metrics = [
                        openapi_client.models.xps_evaluation_metrics.XPSEvaluationMetrics(
                            annotation_spec_id_token = '', 
                            category = 56, 
                            evaluated_example_count = 56, 
                            image_classification_eval_metrics = openapi_client.models.xps_classification_evaluation_metrics.XPSClassificationEvaluationMetrics(
                                au_prc = 1.337, 
                                au_roc = 1.337, 
                                base_au_prc = 1.337, 
                                confidence_metrics_entries = [
                                    openapi_client.models.xps_confidence_metrics_entry.XPSConfidenceMetricsEntry(
                                        confidence_threshold = 1.337, 
                                        f1_score = 1.337, 
                                        f1_score_at1 = 1.337, 
                                        false_negative_count = '', 
                                        false_positive_count = '', 
                                        false_positive_rate = 1.337, 
                                        false_positive_rate_at1 = 1.337, 
                                        position_threshold = 56, 
                                        precision = 1.337, 
                                        precision_at1 = 1.337, 
                                        recall = 1.337, 
                                        recall_at1 = 1.337, 
                                        true_negative_count = '', 
                                        true_positive_count = '', )
                                    ], 
                                confusion_matrix = openapi_client.models.xps_confusion_matrix.XPSConfusionMatrix(
                                    annotation_spec_id_token = [
                                        ''
                                        ], 
                                    category = [
                                        56
                                        ], 
                                    row = [
                                        openapi_client.models.xps_confusion_matrix_row.XPSConfusionMatrixRow(
                                            count = [
                                                ''
                                                ], 
                                            example_count = [
                                                56
                                                ], )
                                        ], 
                                    sentiment_label = [
                                        56
                                        ], ), 
                                evaluated_examples_count = 56, 
                                log_loss = 1.337, ), 
                            image_object_detection_eval_metrics = openapi_client.models.xps_image_object_detection_evaluation_metrics.XPSImageObjectDetectionEvaluationMetrics(
                                bounding_box_mean_average_precision = 1.337, 
                                bounding_box_metrics_entries = [
                                    openapi_client.models.xps_bounding_box_metrics_entry.XPSBoundingBoxMetricsEntry(
                                        iou_threshold = 1.337, 
                                        mean_average_precision = 1.337, )
                                    ], 
                                evaluated_bounding_box_count = 56, ), 
                            image_segmentation_eval_metrics = openapi_client.models.xps_image_segmentation_evaluation_metrics.XPSImageSegmentationEvaluationMetrics(), 
                            label = '', 
                            regression_eval_metrics = openapi_client.models.xps_regression_evaluation_metrics.XPSRegressionEvaluationMetrics(
                                mean_absolute_error = 1.337, 
                                mean_absolute_percentage_error = 1.337, 
                                r_squared = 1.337, 
                                regression_metrics_entries = [
                                    openapi_client.models.xps_regression_metrics_entry.XPSRegressionMetricsEntry(
                                        predicted_value = 1.337, 
                                        true_value = 1.337, )
                                    ], 
                                root_mean_squared_error = 1.337, 
                                root_mean_squared_log_error = 1.337, ), 
                            tables_classification_eval_metrics = openapi_client.models.xps_classification_evaluation_metrics.XPSClassificationEvaluationMetrics(
                                au_prc = 1.337, 
                                au_roc = 1.337, 
                                base_au_prc = 1.337, 
                                evaluated_examples_count = 56, 
                                log_loss = 1.337, ), 
                            tables_eval_metrics = openapi_client.models.xps_tables_evaluation_metrics.XPSTablesEvaluationMetrics(
                                classification_metrics = openapi_client.models.xps_tables_classification_metrics.XPSTablesClassificationMetrics(
                                    curve_metrics = [
                                        openapi_client.models.xps_tables_classification_metrics_curve_metrics.XPSTablesClassificationMetricsCurveMetrics(
                                            auc_pr = 1.337, 
                                            auc_roc = 1.337, 
                                            log_loss = 1.337, 
                                            position_threshold = 56, 
                                            value = '', )
                                        ], ), 
                                regression_metrics = openapi_client.models.xps_tables_regression_metrics.XPSTablesRegressionMetrics(
                                    mean_absolute_error = 1.337, 
                                    mean_absolute_percentage_error = 1.337, 
                                    r_squared = 1.337, 
                                    root_mean_squared_error = 1.337, 
                                    root_mean_squared_log_error = 1.337, ), ), 
                            text_classification_eval_metrics = , 
                            text_extraction_eval_metrics = openapi_client.models.xps_text_extraction_evaluation_metrics.XPSTextExtractionEvaluationMetrics(
                                best_f1_confidence_metrics = openapi_client.models.xps_confidence_metrics_entry.XPSConfidenceMetricsEntry(
                                    confidence_threshold = 1.337, 
                                    f1_score = 1.337, 
                                    f1_score_at1 = 1.337, 
                                    false_negative_count = '', 
                                    false_positive_count = '', 
                                    false_positive_rate = 1.337, 
                                    false_positive_rate_at1 = 1.337, 
                                    position_threshold = 56, 
                                    precision = 1.337, 
                                    precision_at1 = 1.337, 
                                    recall = 1.337, 
                                    recall_at1 = 1.337, 
                                    true_negative_count = '', 
                                    true_positive_count = '', ), 
                                per_label_confidence_metrics = {
                                    'key' : 
                                    }, ), 
                            text_sentiment_eval_metrics = openapi_client.models.xps_text_sentiment_evaluation_metrics.XPSTextSentimentEvaluationMetrics(
                                f1_score = 1.337, 
                                linear_kappa = 1.337, 
                                mean_absolute_error = 1.337, 
                                mean_squared_error = 1.337, 
                                precision = 1.337, 
                                quadratic_kappa = 1.337, 
                                recall = 1.337, ), 
                            translation_eval_metrics = openapi_client.models.xps_translation_evaluation_metrics.XPSTranslationEvaluationMetrics(
                                base_bleu_score = 1.337, 
                                bleu_score = 1.337, ), 
                            video_action_recognition_eval_metrics = openapi_client.models.xps_video_action_recognition_evaluation_metrics.XPSVideoActionRecognitionEvaluationMetrics(
                                evaluated_action_count = 56, 
                                video_action_metrics_entries = [
                                    openapi_client.models.xps_video_action_metrics_entry.XPSVideoActionMetricsEntry(
                                        mean_average_precision = 1.337, 
                                        precision_window_length = '', )
                                    ], ), 
                            video_classification_eval_metrics = , 
                            video_object_tracking_eval_metrics = openapi_client.models.xps_video_object_tracking_evaluation_metrics.XPSVideoObjectTrackingEvaluationMetrics(
                                bounding_box_mean_average_precision = 1.337, 
                                evaluated_boundingbox_count = 56, 
                                evaluated_frame_count = 56, 
                                evaluated_track_count = 56, 
                                track_mean_average_precision = 1.337, 
                                track_mean_bounding_box_iou = 1.337, 
                                track_mean_mismatch_rate = 1.337, 
                                track_metrics_entries = [
                                    openapi_client.models.xps_track_metrics_entry.XPSTrackMetricsEntry(
                                        iou_threshold = 1.337, 
                                        mean_bounding_box_iou = 1.337, 
                                        mean_mismatch_rate = 1.337, 
                                        mean_tracking_average_precision = 1.337, )
                                    ], ), )
                        ], 
                    file_spec = openapi_client.models.xps_file_spec.XPSFileSpec(
                        directory_path = '', 
                        file_format = 'FILE_FORMAT_UNKNOWN', 
                        single_file_path = '', ), 
                    num_evaluation_metrics = '', ),
                explanation_configs = [
                    openapi_client.models.xps_response_explanation_spec.XPSResponseExplanationSpec(
                        explanation_type = '', 
                        metadata = openapi_client.models.xps_response_explanation_metadata.XPSResponseExplanationMetadata(
                            inputs = {
                                'key' : openapi_client.models.xps_response_explanation_metadata_input_metadata.XPSResponseExplanationMetadataInputMetadata(
                                    input_tensor_name = '', 
                                    modality = 'MODALITY_UNSPECIFIED', 
                                    visualization_config = openapi_client.models.xps_visualization.XPSVisualization(
                                        clip_percent_lowerbound = 1.337, 
                                        clip_percent_upperbound = 1.337, 
                                        color_map = 'COLOR_MAP_UNSPECIFIED', 
                                        overlay_type = 'OVERLAY_TYPE_UNSPECIFIED', 
                                        polarity = 'POLARITY_UNSPECIFIED', 
                                        type = 'TYPE_UNSPECIFIED', ), )
                                }, 
                            outputs = {
                                'key' : openapi_client.models.xps_response_explanation_metadata_output_metadata.XPSResponseExplanationMetadataOutputMetadata(
                                    output_tensor_name = '', )
                                }, ), 
                        parameters = openapi_client.models.xps_response_explanation_parameters.XPSResponseExplanationParameters(
                            integrated_gradients_attribution = openapi_client.models.xps_integrated_gradients_attribution.XPSIntegratedGradientsAttribution(
                                step_count = 56, ), 
                            xrai_attribution = openapi_client.models.xps_xrai_attribution.XPSXraiAttribution(
                                step_count = 56, ), ), )
                    ],
                image_classification_train_resp = openapi_client.models.xps_image_classification_train_response.XPSImageClassificationTrainResponse(
                    class_count = '', 
                    export_model_spec = openapi_client.models.xps_image_export_model_spec.XPSImageExportModelSpec(
                        export_model_output_config = [
                            openapi_client.models.xps_export_model_output_config.XPSExportModelOutputConfig(
                                core_ml_format = openapi_client.models.core_ml_format.coreMlFormat(), 
                                docker_format = openapi_client.models.xps_docker_format.XPSDockerFormat(
                                    cpu_architecture = 'CPU_ARCHITECTURE_UNSPECIFIED', 
                                    gpu_architecture = 'GPU_ARCHITECTURE_UNSPECIFIED', ), 
                                edge_tpu_tf_lite_format = openapi_client.models.edge_tpu_tf_lite_format.edgeTpuTfLiteFormat(), 
                                export_firebase_auxiliary_info = True, 
                                output_gcr_uri = '', 
                                output_gcs_uri = '', 
                                tf_js_format = openapi_client.models.tf_js_format.tfJsFormat(), 
                                tf_lite_format = openapi_client.models.tf_lite_format.tfLiteFormat(), 
                                tf_saved_model_format = openapi_client.models.tf_saved_model_format.tfSavedModelFormat(), )
                            ], ), 
                    model_artifact_spec = openapi_client.models.xps_image_model_artifact_spec.XPSImageModelArtifactSpec(
                        checkpoint_artifact = openapi_client.models.xps_model_artifact_item.XPSModelArtifactItem(
                            artifact_format = 'ARTIFACT_FORMAT_UNSPECIFIED', 
                            gcs_uri = '', ), 
                        export_artifact = [
                            openapi_client.models.xps_model_artifact_item.XPSModelArtifactItem(
                                artifact_format = 'ARTIFACT_FORMAT_UNSPECIFIED', 
                                gcs_uri = '', )
                            ], 
                        label_gcs_uri = '', 
                        serving_artifact = , 
                        tf_js_binary_gcs_prefix = '', 
                        tf_lite_metadata_gcs_uri = '', ), 
                    model_serving_spec = openapi_client.models.xps_image_model_serving_spec.XPSImageModelServingSpec(
                        model_throughput_estimation = [
                            openapi_client.models.xps_image_model_serving_spec_model_throughput_estimation.XPSImageModelServingSpecModelThroughputEstimation(
                                compute_engine_accelerator_type = 'UNSPECIFIED', 
                                latency_in_milliseconds = 1.337, 
                                node_qps = 1.337, 
                                servomatic_partition_type = 'PARTITION_TYPE_UNSPECIFIED', )
                            ], 
                        node_qps = 1.337, 
                        tf_runtime_version = '', ), 
                    stop_reason = 'TRAIN_STOP_REASON_UNSPECIFIED', 
                    train_cost_in_node_time = '', 
                    train_cost_node_seconds = '', ),
                image_object_detection_train_resp = openapi_client.models.xps_image_object_detection_model_spec.XPSImageObjectDetectionModelSpec(
                    class_count = '', 
                    export_model_spec = openapi_client.models.xps_image_export_model_spec.XPSImageExportModelSpec(
                        export_model_output_config = [
                            openapi_client.models.xps_export_model_output_config.XPSExportModelOutputConfig(
                                core_ml_format = openapi_client.models.core_ml_format.coreMlFormat(), 
                                docker_format = openapi_client.models.xps_docker_format.XPSDockerFormat(
                                    cpu_architecture = 'CPU_ARCHITECTURE_UNSPECIFIED', 
                                    gpu_architecture = 'GPU_ARCHITECTURE_UNSPECIFIED', ), 
                                edge_tpu_tf_lite_format = openapi_client.models.edge_tpu_tf_lite_format.edgeTpuTfLiteFormat(), 
                                export_firebase_auxiliary_info = True, 
                                output_gcr_uri = '', 
                                output_gcs_uri = '', 
                                tf_js_format = openapi_client.models.tf_js_format.tfJsFormat(), 
                                tf_lite_format = openapi_client.models.tf_lite_format.tfLiteFormat(), 
                                tf_saved_model_format = openapi_client.models.tf_saved_model_format.tfSavedModelFormat(), )
                            ], ), 
                    max_bounding_box_count = '', 
                    model_artifact_spec = openapi_client.models.xps_image_model_artifact_spec.XPSImageModelArtifactSpec(
                        checkpoint_artifact = openapi_client.models.xps_model_artifact_item.XPSModelArtifactItem(
                            artifact_format = 'ARTIFACT_FORMAT_UNSPECIFIED', 
                            gcs_uri = '', ), 
                        export_artifact = [
                            openapi_client.models.xps_model_artifact_item.XPSModelArtifactItem(
                                artifact_format = 'ARTIFACT_FORMAT_UNSPECIFIED', 
                                gcs_uri = '', )
                            ], 
                        label_gcs_uri = '', 
                        serving_artifact = , 
                        tf_js_binary_gcs_prefix = '', 
                        tf_lite_metadata_gcs_uri = '', ), 
                    model_serving_spec = openapi_client.models.xps_image_model_serving_spec.XPSImageModelServingSpec(
                        model_throughput_estimation = [
                            openapi_client.models.xps_image_model_serving_spec_model_throughput_estimation.XPSImageModelServingSpecModelThroughputEstimation(
                                compute_engine_accelerator_type = 'UNSPECIFIED', 
                                latency_in_milliseconds = 1.337, 
                                node_qps = 1.337, 
                                servomatic_partition_type = 'PARTITION_TYPE_UNSPECIFIED', )
                            ], 
                        node_qps = 1.337, 
                        tf_runtime_version = '', ), 
                    stop_reason = 'TRAIN_STOP_REASON_UNSPECIFIED', 
                    train_cost_node_seconds = '', ),
                image_segmentation_train_resp = openapi_client.models.xps_image_segmentation_train_response.XPSImageSegmentationTrainResponse(
                    color_maps = [
                        openapi_client.models.xps_color_map.XPSColorMap(
                            annotation_spec_id_token = '', 
                            color = openapi_client.models.color.Color(
                                alpha = 1.337, 
                                blue = 1.337, 
                                green = 1.337, 
                                red = 1.337, ), 
                            display_name = '', 
                            int_color = openapi_client.models.xps_color_map_int_color.XPSColorMapIntColor(
                                blue = 56, 
                                green = 56, 
                                red = 56, ), )
                        ], 
                    export_model_spec = openapi_client.models.xps_image_export_model_spec.XPSImageExportModelSpec(
                        export_model_output_config = [
                            openapi_client.models.xps_export_model_output_config.XPSExportModelOutputConfig(
                                core_ml_format = openapi_client.models.core_ml_format.coreMlFormat(), 
                                docker_format = openapi_client.models.xps_docker_format.XPSDockerFormat(
                                    cpu_architecture = 'CPU_ARCHITECTURE_UNSPECIFIED', 
                                    gpu_architecture = 'GPU_ARCHITECTURE_UNSPECIFIED', ), 
                                edge_tpu_tf_lite_format = openapi_client.models.edge_tpu_tf_lite_format.edgeTpuTfLiteFormat(), 
                                export_firebase_auxiliary_info = True, 
                                output_gcr_uri = '', 
                                output_gcs_uri = '', 
                                tf_js_format = openapi_client.models.tf_js_format.tfJsFormat(), 
                                tf_lite_format = openapi_client.models.tf_lite_format.tfLiteFormat(), 
                                tf_saved_model_format = openapi_client.models.tf_saved_model_format.tfSavedModelFormat(), )
                            ], ), 
                    model_artifact_spec = openapi_client.models.xps_image_model_artifact_spec.XPSImageModelArtifactSpec(
                        checkpoint_artifact = openapi_client.models.xps_model_artifact_item.XPSModelArtifactItem(
                            artifact_format = 'ARTIFACT_FORMAT_UNSPECIFIED', 
                            gcs_uri = '', ), 
                        export_artifact = [
                            openapi_client.models.xps_model_artifact_item.XPSModelArtifactItem(
                                artifact_format = 'ARTIFACT_FORMAT_UNSPECIFIED', 
                                gcs_uri = '', )
                            ], 
                        label_gcs_uri = '', 
                        serving_artifact = , 
                        tf_js_binary_gcs_prefix = '', 
                        tf_lite_metadata_gcs_uri = '', ), 
                    model_serving_spec = openapi_client.models.xps_image_model_serving_spec.XPSImageModelServingSpec(
                        model_throughput_estimation = [
                            openapi_client.models.xps_image_model_serving_spec_model_throughput_estimation.XPSImageModelServingSpecModelThroughputEstimation(
                                compute_engine_accelerator_type = 'UNSPECIFIED', 
                                latency_in_milliseconds = 1.337, 
                                node_qps = 1.337, 
                                servomatic_partition_type = 'PARTITION_TYPE_UNSPECIFIED', )
                            ], 
                        node_qps = 1.337, 
                        tf_runtime_version = '', ), 
                    stop_reason = 'TRAIN_STOP_REASON_UNSPECIFIED', 
                    train_cost_node_seconds = '', ),
                model_token = 'YQ==',
                speech_train_resp = openapi_client.models.xps_speech_model_spec.XPSSpeechModelSpec(
                    dataset_id = '', 
                    language = '', 
                    sub_model_specs = [
                        openapi_client.models.xps_speech_model_spec_sub_model_spec.XPSSpeechModelSpecSubModelSpec(
                            biasing_model_type = 'BIASING_MODEL_TYPE_UNSPECIFIED', 
                            client_id = '', 
                            context_id = '', 
                            is_enhanced_model = True, )
                        ], ),
                tables_train_resp = openapi_client.models.xps_tables_train_response.XPSTablesTrainResponse(
                    model_structure = openapi_client.models.xps_tables_model_structure.XPSTablesModelStructure(
                        model_parameters = [
                            openapi_client.models.xps_tables_model_structure_model_parameters.XPSTablesModelStructureModelParameters(
                                hyperparameters = [
                                    openapi_client.models.xps_tables_model_structure_model_parameters_parameter.XPSTablesModelStructureModelParametersParameter(
                                        float_value = 1.337, 
                                        int_value = '', 
                                        name = '', 
                                        string_value = '', )
                                    ], )
                            ], ), 
                    prediction_sample_rows = [
                        openapi_client.models.xps_row.XPSRow(
                            column_ids = [
                                56
                                ], 
                            values = [
                                null
                                ], )
                        ], 
                    tables_model_column_info = [
                        openapi_client.models.xps_tables_model_column_info.XPSTablesModelColumnInfo(
                            column_id = 56, 
                            feature_importance = 1.337, )
                        ], 
                    train_cost_milli_node_hours = '', ),
                text_to_speech_train_resp = None,
                text_train_resp = openapi_client.models.xps_text_train_response.XPSTextTrainResponse(
                    component_model = [
                        openapi_client.models.xps_text_component_model.XPSTextComponentModel(
                            batch_prediction_model_gcs_uri = '', 
                            online_prediction_model_gcs_uri = '', 
                            partition = 'PARTITION_TYPE_UNSPECIFIED', 
                            serving_artifact = openapi_client.models.xps_model_artifact_item.XPSModelArtifactItem(
                                artifact_format = 'ARTIFACT_FORMAT_UNSPECIFIED', 
                                gcs_uri = '', ), 
                            servo_model_name = '', 
                            submodel_name = '', 
                            submodel_type = 'TEXT_MODEL_TYPE_UNSPECIFIED', 
                            tf_runtime_version = '', 
                            version_number = '', )
                        ], ),
                translation_train_resp = openapi_client.models.xps_translation_train_response.XPSTranslationTrainResponse(
                    model_type = 'MODEL_TYPE_UNSPECIFIED', ),
                video_action_recognition_train_resp = openapi_client.models.xps_video_action_recognition_train_response.XPSVideoActionRecognitionTrainResponse(
                    model_artifact_spec = openapi_client.models.xps_video_model_artifact_spec.XPSVideoModelArtifactSpec(
                        export_artifact = [
                            openapi_client.models.xps_model_artifact_item.XPSModelArtifactItem(
                                artifact_format = 'ARTIFACT_FORMAT_UNSPECIFIED', 
                                gcs_uri = '', )
                            ], 
                        serving_artifact = openapi_client.models.xps_model_artifact_item.XPSModelArtifactItem(
                            artifact_format = 'ARTIFACT_FORMAT_UNSPECIFIED', 
                            gcs_uri = '', ), ), 
                    train_cost_node_seconds = '', ),
                video_classification_train_resp = openapi_client.models.xps_video_classification_train_response.XPSVideoClassificationTrainResponse(
                    model_artifact_spec = openapi_client.models.xps_video_model_artifact_spec.XPSVideoModelArtifactSpec(
                        export_artifact = [
                            openapi_client.models.xps_model_artifact_item.XPSModelArtifactItem(
                                artifact_format = 'ARTIFACT_FORMAT_UNSPECIFIED', 
                                gcs_uri = '', )
                            ], 
                        serving_artifact = openapi_client.models.xps_model_artifact_item.XPSModelArtifactItem(
                            artifact_format = 'ARTIFACT_FORMAT_UNSPECIFIED', 
                            gcs_uri = '', ), ), 
                    train_cost_node_seconds = '', ),
                video_object_tracking_train_resp = openapi_client.models.xps_video_object_tracking_train_response.XPSVideoObjectTrackingTrainResponse(
                    export_model_spec = openapi_client.models.xps_video_export_model_spec.XPSVideoExportModelSpec(
                        export_model_output_config = [
                            openapi_client.models.xps_export_model_output_config.XPSExportModelOutputConfig(
                                core_ml_format = openapi_client.models.core_ml_format.coreMlFormat(), 
                                docker_format = openapi_client.models.xps_docker_format.XPSDockerFormat(
                                    cpu_architecture = 'CPU_ARCHITECTURE_UNSPECIFIED', 
                                    gpu_architecture = 'GPU_ARCHITECTURE_UNSPECIFIED', ), 
                                edge_tpu_tf_lite_format = openapi_client.models.edge_tpu_tf_lite_format.edgeTpuTfLiteFormat(), 
                                export_firebase_auxiliary_info = True, 
                                output_gcr_uri = '', 
                                output_gcs_uri = '', 
                                tf_js_format = openapi_client.models.tf_js_format.tfJsFormat(), 
                                tf_lite_format = openapi_client.models.tf_lite_format.tfLiteFormat(), 
                                tf_saved_model_format = openapi_client.models.tf_saved_model_format.tfSavedModelFormat(), )
                            ], ), 
                    model_artifact_spec = openapi_client.models.xps_video_model_artifact_spec.XPSVideoModelArtifactSpec(
                        export_artifact = [
                            openapi_client.models.xps_model_artifact_item.XPSModelArtifactItem(
                                artifact_format = 'ARTIFACT_FORMAT_UNSPECIFIED', 
                                gcs_uri = '', )
                            ], 
                        serving_artifact = openapi_client.models.xps_model_artifact_item.XPSModelArtifactItem(
                            artifact_format = 'ARTIFACT_FORMAT_UNSPECIFIED', 
                            gcs_uri = '', ), ), 
                    train_cost_node_seconds = '', )
            )
        else:
            return XPSTrainResponse(
        )
        """

    def testXPSTrainResponse(self):
        """Test XPSTrainResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

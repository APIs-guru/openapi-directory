# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.xps_xps_operation_metadata import XPSXpsOperationMetadata

class TestXPSXpsOperationMetadata(unittest.TestCase):
    """XPSXpsOperationMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> XPSXpsOperationMetadata:
        """Test XPSXpsOperationMetadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `XPSXpsOperationMetadata`
        """
        model = XPSXpsOperationMetadata()
        if include_optional:
            return XPSXpsOperationMetadata(
                example_count = '',
                reporting_metrics = openapi_client.models.xps_reporting_metrics.XPSReportingMetrics(
                    effective_training_duration = '', 
                    metric_entries = [
                        openapi_client.models.xps_metric_entry.XPSMetricEntry(
                            argentum_metric_id = '', 
                            double_value = 1.337, 
                            int64_value = '', 
                            metric_name = '', 
                            system_labels = [
                                openapi_client.models.xps_metric_entry_label.XPSMetricEntryLabel(
                                    label_name = '', 
                                    label_value = '', )
                                ], )
                        ], ),
                tables_training_operation_metadata = openapi_client.models.xps_tables_training_operation_metadata.XPSTablesTrainingOperationMetadata(
                    create_model_stage = 'CREATE_MODEL_STAGE_UNSPECIFIED', 
                    optimization_objective = '', 
                    top_trials = [
                        openapi_client.models.xps_tuning_trial.XPSTuningTrial(
                            model_structure = openapi_client.models.xps_tables_model_structure.XPSTablesModelStructure(
                                model_parameters = [
                                    openapi_client.models.xps_tables_model_structure_model_parameters.XPSTablesModelStructureModelParameters(
                                        hyperparameters = [
                                            openapi_client.models.xps_tables_model_structure_model_parameters_parameter.XPSTablesModelStructureModelParametersParameter(
                                                float_value = 1.337, 
                                                int_value = '', 
                                                name = '', 
                                                string_value = '', )
                                            ], )
                                    ], ), 
                            training_objective_point = openapi_client.models.xps_training_objective_point.XPSTrainingObjectivePoint(
                                create_time = '', 
                                value = 1.337, ), )
                        ], 
                    train_budget_milli_node_hours = '', 
                    training_objective_points = [
                        openapi_client.models.xps_training_objective_point.XPSTrainingObjectivePoint(
                            create_time = '', 
                            value = 1.337, )
                        ], 
                    training_start_time = '', ),
                video_batch_predict_operation_metadata = openapi_client.models.xps_video_batch_predict_operation_metadata.XPSVideoBatchPredictOperationMetadata(
                    output_examples = [
                        ''
                        ], ),
                video_training_operation_metadata = openapi_client.models.xps_video_training_operation_metadata.XPSVideoTrainingOperationMetadata(
                    train_cost_milli_node_hour = '', ),
                vision_training_operation_metadata = openapi_client.models.xps_vision_training_operation_metadata.XPSVisionTrainingOperationMetadata(
                    explanation_usage = openapi_client.models.infra_usage.InfraUsage(
                        cpu_metrics = [
                            openapi_client.models.cpu_metric.CpuMetric(
                                core_number = '', 
                                core_sec = '', 
                                cpu_type = 'UNKNOWN_CPU_TYPE', 
                                machine_spec = 'UNKNOWN_MACHINE_SPEC', 
                                tracking_labels = {
                                    'key' : ''
                                    }, )
                            ], 
                        disk_metrics = [
                            openapi_client.models.disk_metric.DiskMetric(
                                disk_type = 'UNKNOWN_DISK_TYPE', 
                                gib_sec = '', )
                            ], 
                        gpu_metrics = [
                            openapi_client.models.gpu_metric.GpuMetric(
                                gpu_sec = '', 
                                gpu_type = 'UNKNOWN_GPU_TYPE', 
                                machine_spec = 'UNKNOWN_MACHINE_SPEC', )
                            ], 
                        ram_metrics = [
                            openapi_client.models.ram_metric.RamMetric(
                                gib_sec = '', 
                                machine_spec = 'UNKNOWN_MACHINE_SPEC', 
                                memories = 1.337, 
                                ram_type = 'UNKNOWN_RAM_TYPE', )
                            ], 
                        tpu_metrics = [
                            openapi_client.models.tpu_metric.TpuMetric(
                                tpu_sec = '', 
                                tpu_type = 'UNKNOWN_TPU_TYPE', )
                            ], ), )
            )
        else:
            return XPSXpsOperationMetadata(
        )
        """

    def testXPSXpsOperationMetadata(self):
        """Test XPSXpsOperationMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.xps_row import XPSRow
from openapi_client.models.xps_tables_model_column_info import XPSTablesModelColumnInfo
from openapi_client.models.xps_tables_model_structure import XPSTablesModelStructure
from typing import Optional, Set
from typing_extensions import Self

class XPSTablesTrainResponse(BaseModel):
    """
    XPSTablesTrainResponse
    """ # noqa: E501
    model_structure: Optional[XPSTablesModelStructure] = Field(default=None, alias="modelStructure")
    prediction_sample_rows: Optional[List[XPSRow]] = Field(default=None, description="Sample rows from the dataset this model was trained.", alias="predictionSampleRows")
    tables_model_column_info: Optional[List[XPSTablesModelColumnInfo]] = Field(default=None, description="Output only. Auxiliary information for each of the input_feature_column_specs, with respect to this particular model.", alias="tablesModelColumnInfo")
    train_cost_milli_node_hours: Optional[StrictStr] = Field(default=None, description="The actual training cost of the model, expressed in milli node hours, i.e. 1,000 value in this field means 1 node hour. Guaranteed to not exceed the train budget.", alias="trainCostMilliNodeHours")
    __properties: ClassVar[List[str]] = ["modelStructure", "predictionSampleRows", "tablesModelColumnInfo", "trainCostMilliNodeHours"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of XPSTablesTrainResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of model_structure
        if self.model_structure:
            _dict['modelStructure'] = self.model_structure.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in prediction_sample_rows (list)
        _items = []
        if self.prediction_sample_rows:
            for _item_prediction_sample_rows in self.prediction_sample_rows:
                if _item_prediction_sample_rows:
                    _items.append(_item_prediction_sample_rows.to_dict())
            _dict['predictionSampleRows'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tables_model_column_info (list)
        _items = []
        if self.tables_model_column_info:
            for _item_tables_model_column_info in self.tables_model_column_info:
                if _item_tables_model_column_info:
                    _items.append(_item_tables_model_column_info.to_dict())
            _dict['tablesModelColumnInfo'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of XPSTablesTrainResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "modelStructure": XPSTablesModelStructure.from_dict(obj["modelStructure"]) if obj.get("modelStructure") is not None else None,
            "predictionSampleRows": [XPSRow.from_dict(_item) for _item in obj["predictionSampleRows"]] if obj.get("predictionSampleRows") is not None else None,
            "tablesModelColumnInfo": [XPSTablesModelColumnInfo.from_dict(_item) for _item in obj["tablesModelColumnInfo"]] if obj.get("tablesModelColumnInfo") is not None else None,
            "trainCostMilliNodeHours": obj.get("trainCostMilliNodeHours")
        })
        return _obj



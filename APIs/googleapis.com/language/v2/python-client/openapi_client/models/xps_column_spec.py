# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.xps_column_spec_correlated_column import XPSColumnSpecCorrelatedColumn
from openapi_client.models.xps_column_spec_forecasting_metadata import XPSColumnSpecForecastingMetadata
from openapi_client.models.xps_data_stats import XPSDataStats
from openapi_client.models.xps_data_type import XPSDataType
from typing import Optional, Set
from typing_extensions import Self

class XPSColumnSpec(BaseModel):
    """
    XPSColumnSpec
    """ # noqa: E501
    column_id: Optional[StrictInt] = Field(default=None, description="The unique id of the column. When Preprocess, the Tables BE will popuate the order id of the column, which reflects the order of the column inside the table, i.e. 0 means the first column in the table, N-1 means the last column. AutoML BE will persist this order id in Spanner and set the order id here when calling RefreshTablesStats and Train. Note: it's different than the column_spec_id that is generated in AutoML BE.", alias="columnId")
    data_stats: Optional[XPSDataStats] = Field(default=None, alias="dataStats")
    data_type: Optional[XPSDataType] = Field(default=None, alias="dataType")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the column. It's outputed in Preprocess and a required input for RefreshTablesStats and Train.", alias="displayName")
    forecasting_metadata: Optional[XPSColumnSpecForecastingMetadata] = Field(default=None, alias="forecastingMetadata")
    top_correlated_columns: Optional[List[XPSColumnSpecCorrelatedColumn]] = Field(default=None, description="It's outputed in RefreshTablesStats, and a required input in Train.", alias="topCorrelatedColumns")
    __properties: ClassVar[List[str]] = ["columnId", "dataStats", "dataType", "displayName", "forecastingMetadata", "topCorrelatedColumns"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of XPSColumnSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_stats
        if self.data_stats:
            _dict['dataStats'] = self.data_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_type
        if self.data_type:
            _dict['dataType'] = self.data_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of forecasting_metadata
        if self.forecasting_metadata:
            _dict['forecastingMetadata'] = self.forecasting_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in top_correlated_columns (list)
        _items = []
        if self.top_correlated_columns:
            for _item_top_correlated_columns in self.top_correlated_columns:
                if _item_top_correlated_columns:
                    _items.append(_item_top_correlated_columns.to_dict())
            _dict['topCorrelatedColumns'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of XPSColumnSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "columnId": obj.get("columnId"),
            "dataStats": XPSDataStats.from_dict(obj["dataStats"]) if obj.get("dataStats") is not None else None,
            "dataType": XPSDataType.from_dict(obj["dataType"]) if obj.get("dataType") is not None else None,
            "displayName": obj.get("displayName"),
            "forecastingMetadata": XPSColumnSpecForecastingMetadata.from_dict(obj["forecastingMetadata"]) if obj.get("forecastingMetadata") is not None else None,
            "topCorrelatedColumns": [XPSColumnSpecCorrelatedColumn.from_dict(_item) for _item in obj["topCorrelatedColumns"]] if obj.get("topCorrelatedColumns") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.xps_image_export_model_spec import XPSImageExportModelSpec
from openapi_client.models.xps_image_model_artifact_spec import XPSImageModelArtifactSpec
from openapi_client.models.xps_image_model_serving_spec import XPSImageModelServingSpec
from typing import Optional, Set
from typing_extensions import Self

class XPSImageObjectDetectionModelSpec(BaseModel):
    """
    XPSImageObjectDetectionModelSpec
    """ # noqa: E501
    class_count: Optional[StrictStr] = Field(default=None, description="Total number of classes.", alias="classCount")
    export_model_spec: Optional[XPSImageExportModelSpec] = Field(default=None, alias="exportModelSpec")
    max_bounding_box_count: Optional[StrictStr] = Field(default=None, description="Max number of bounding box.", alias="maxBoundingBoxCount")
    model_artifact_spec: Optional[XPSImageModelArtifactSpec] = Field(default=None, alias="modelArtifactSpec")
    model_serving_spec: Optional[XPSImageModelServingSpec] = Field(default=None, alias="modelServingSpec")
    stop_reason: Optional[StrictStr] = Field(default=None, description="Stop reason for training job, e.g. 'TRAIN_BUDGET_REACHED', 'MODEL_CONVERGED'.", alias="stopReason")
    train_cost_node_seconds: Optional[StrictStr] = Field(default=None, description="The actual train cost of creating this model, expressed in node seconds, i.e. 3,600 value in this field means 1 node hour.", alias="trainCostNodeSeconds")
    __properties: ClassVar[List[str]] = ["classCount", "exportModelSpec", "maxBoundingBoxCount", "modelArtifactSpec", "modelServingSpec", "stopReason", "trainCostNodeSeconds"]

    @field_validator('stop_reason')
    def stop_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRAIN_STOP_REASON_UNSPECIFIED', 'TRAIN_STOP_REASON_BUDGET_REACHED', 'TRAIN_STOP_REASON_MODEL_CONVERGED', 'TRAIN_STOP_REASON_MODEL_EARLY_STOPPED']):
            raise ValueError("must be one of enum values ('TRAIN_STOP_REASON_UNSPECIFIED', 'TRAIN_STOP_REASON_BUDGET_REACHED', 'TRAIN_STOP_REASON_MODEL_CONVERGED', 'TRAIN_STOP_REASON_MODEL_EARLY_STOPPED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of XPSImageObjectDetectionModelSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of export_model_spec
        if self.export_model_spec:
            _dict['exportModelSpec'] = self.export_model_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model_artifact_spec
        if self.model_artifact_spec:
            _dict['modelArtifactSpec'] = self.model_artifact_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model_serving_spec
        if self.model_serving_spec:
            _dict['modelServingSpec'] = self.model_serving_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of XPSImageObjectDetectionModelSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "classCount": obj.get("classCount"),
            "exportModelSpec": XPSImageExportModelSpec.from_dict(obj["exportModelSpec"]) if obj.get("exportModelSpec") is not None else None,
            "maxBoundingBoxCount": obj.get("maxBoundingBoxCount"),
            "modelArtifactSpec": XPSImageModelArtifactSpec.from_dict(obj["modelArtifactSpec"]) if obj.get("modelArtifactSpec") is not None else None,
            "modelServingSpec": XPSImageModelServingSpec.from_dict(obj["modelServingSpec"]) if obj.get("modelServingSpec") is not None else None,
            "stopReason": obj.get("stopReason"),
            "trainCostNodeSeconds": obj.get("trainCostNodeSeconds")
        })
        return _obj



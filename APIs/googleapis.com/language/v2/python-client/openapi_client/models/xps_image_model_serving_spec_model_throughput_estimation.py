# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class XPSImageModelServingSpecModelThroughputEstimation(BaseModel):
    """
    XPSImageModelServingSpecModelThroughputEstimation
    """ # noqa: E501
    compute_engine_accelerator_type: Optional[StrictStr] = Field(default=None, alias="computeEngineAcceleratorType")
    latency_in_milliseconds: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Estimated latency.", alias="latencyInMilliseconds")
    node_qps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The approximate qps a deployed node can serve.", alias="nodeQps")
    servomatic_partition_type: Optional[StrictStr] = Field(default=None, alias="servomaticPartitionType")
    __properties: ClassVar[List[str]] = ["computeEngineAcceleratorType", "latencyInMilliseconds", "nodeQps", "servomaticPartitionType"]

    @field_validator('compute_engine_accelerator_type')
    def compute_engine_accelerator_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'NVIDIA_TESLA_K80', 'NVIDIA_TESLA_P100', 'NVIDIA_TESLA_V100', 'NVIDIA_TESLA_P4', 'NVIDIA_TESLA_T4', 'NVIDIA_TESLA_A100', 'NVIDIA_A100_80GB', 'NVIDIA_L4', 'NVIDIA_H100_80GB', 'TPU_V2', 'TPU_V3', 'TPU_V4_POD', 'TPU_V5_LITEPOD']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'NVIDIA_TESLA_K80', 'NVIDIA_TESLA_P100', 'NVIDIA_TESLA_V100', 'NVIDIA_TESLA_P4', 'NVIDIA_TESLA_T4', 'NVIDIA_TESLA_A100', 'NVIDIA_A100_80GB', 'NVIDIA_L4', 'NVIDIA_H100_80GB', 'TPU_V2', 'TPU_V3', 'TPU_V4_POD', 'TPU_V5_LITEPOD')")
        return value

    @field_validator('servomatic_partition_type')
    def servomatic_partition_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PARTITION_TYPE_UNSPECIFIED', 'PARTITION_ZERO', 'PARTITION_REDUCED_HOMING', 'PARTITION_JELLYFISH', 'PARTITION_CPU', 'PARTITION_CUSTOM_STORAGE_CPU']):
            raise ValueError("must be one of enum values ('PARTITION_TYPE_UNSPECIFIED', 'PARTITION_ZERO', 'PARTITION_REDUCED_HOMING', 'PARTITION_JELLYFISH', 'PARTITION_CPU', 'PARTITION_CUSTOM_STORAGE_CPU')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of XPSImageModelServingSpecModelThroughputEstimation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of XPSImageModelServingSpecModelThroughputEstimation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "computeEngineAcceleratorType": obj.get("computeEngineAcceleratorType"),
            "latencyInMilliseconds": obj.get("latencyInMilliseconds"),
            "nodeQps": obj.get("nodeQps"),
            "servomaticPartitionType": obj.get("servomaticPartitionType")
        })
        return _obj



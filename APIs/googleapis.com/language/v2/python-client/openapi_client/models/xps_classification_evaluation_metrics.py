# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.xps_confidence_metrics_entry import XPSConfidenceMetricsEntry
from openapi_client.models.xps_confusion_matrix import XPSConfusionMatrix
from typing import Optional, Set
from typing_extensions import Self

class XPSClassificationEvaluationMetrics(BaseModel):
    """
    Model evaluation metrics for classification problems. It can be used for image and video classification. Next tag: 9.
    """ # noqa: E501
    au_prc: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Area under precision recall curve metric.", alias="auPrc")
    au_roc: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Area Under Receiver Operating Characteristic curve metric. Micro-averaged for the overall evaluation.", alias="auRoc")
    base_au_prc: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Area under precision recall curve metric based on priors.", alias="baseAuPrc")
    confidence_metrics_entries: Optional[List[XPSConfidenceMetricsEntry]] = Field(default=None, description="Metrics that have confidence thresholds. Precision-recall curve can be derived from it.", alias="confidenceMetricsEntries")
    confusion_matrix: Optional[XPSConfusionMatrix] = Field(default=None, alias="confusionMatrix")
    evaluated_examples_count: Optional[StrictInt] = Field(default=None, description="The number of examples used for model evaluation.", alias="evaluatedExamplesCount")
    log_loss: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Log Loss metric.", alias="logLoss")
    __properties: ClassVar[List[str]] = ["auPrc", "auRoc", "baseAuPrc", "confidenceMetricsEntries", "confusionMatrix", "evaluatedExamplesCount", "logLoss"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of XPSClassificationEvaluationMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in confidence_metrics_entries (list)
        _items = []
        if self.confidence_metrics_entries:
            for _item_confidence_metrics_entries in self.confidence_metrics_entries:
                if _item_confidence_metrics_entries:
                    _items.append(_item_confidence_metrics_entries.to_dict())
            _dict['confidenceMetricsEntries'] = _items
        # override the default output from pydantic by calling `to_dict()` of confusion_matrix
        if self.confusion_matrix:
            _dict['confusionMatrix'] = self.confusion_matrix.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of XPSClassificationEvaluationMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auPrc": obj.get("auPrc"),
            "auRoc": obj.get("auRoc"),
            "baseAuPrc": obj.get("baseAuPrc"),
            "confidenceMetricsEntries": [XPSConfidenceMetricsEntry.from_dict(_item) for _item in obj["confidenceMetricsEntries"]] if obj.get("confidenceMetricsEntries") is not None else None,
            "confusionMatrix": XPSConfusionMatrix.from_dict(obj["confusionMatrix"]) if obj.get("confusionMatrix") is not None else None,
            "evaluatedExamplesCount": obj.get("evaluatedExamplesCount"),
            "logLoss": obj.get("logLoss")
        })
        return _obj



# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class XPSDataType(BaseModel):
    """
    Indicated the type of data that can be stored in a structured data entity (e.g. a table).
    """ # noqa: E501
    compatible_data_types: Optional[List[XPSDataType]] = Field(default=None, description="The highly compatible data types to this data type.", alias="compatibleDataTypes")
    list_element_type: Optional[XPSDataType] = Field(default=None, alias="listElementType")
    nullable: Optional[StrictBool] = Field(default=None, description="If true, this DataType can also be `null`.")
    struct_type: Optional[XPSStructType] = Field(default=None, alias="structType")
    time_format: Optional[StrictStr] = Field(default=None, description="If type_code == TIMESTAMP then `time_format` provides the format in which that time field is expressed. The time_format must be written in `strftime` syntax. If time_format is not set, then the default format as described on the field is used.", alias="timeFormat")
    type_code: Optional[StrictStr] = Field(default=None, description="Required. The TypeCode for this type.", alias="typeCode")
    __properties: ClassVar[List[str]] = ["compatibleDataTypes", "listElementType", "nullable", "structType", "timeFormat", "typeCode"]

    @field_validator('type_code')
    def type_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_CODE_UNSPECIFIED', 'FLOAT64', 'TIMESTAMP', 'STRING', 'ARRAY', 'STRUCT', 'CATEGORY']):
            raise ValueError("must be one of enum values ('TYPE_CODE_UNSPECIFIED', 'FLOAT64', 'TIMESTAMP', 'STRING', 'ARRAY', 'STRUCT', 'CATEGORY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of XPSDataType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in compatible_data_types (list)
        _items = []
        if self.compatible_data_types:
            for _item_compatible_data_types in self.compatible_data_types:
                if _item_compatible_data_types:
                    _items.append(_item_compatible_data_types.to_dict())
            _dict['compatibleDataTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of list_element_type
        if self.list_element_type:
            _dict['listElementType'] = self.list_element_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of struct_type
        if self.struct_type:
            _dict['structType'] = self.struct_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of XPSDataType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "compatibleDataTypes": [XPSDataType.from_dict(_item) for _item in obj["compatibleDataTypes"]] if obj.get("compatibleDataTypes") is not None else None,
            "listElementType": XPSDataType.from_dict(obj["listElementType"]) if obj.get("listElementType") is not None else None,
            "nullable": obj.get("nullable"),
            "structType": XPSStructType.from_dict(obj["structType"]) if obj.get("structType") is not None else None,
            "timeFormat": obj.get("timeFormat"),
            "typeCode": obj.get("typeCode")
        })
        return _obj

from openapi_client.models.xps_struct_type import XPSStructType
# TODO: Rewrite to not use raise_errors
XPSDataType.model_rebuild(raise_errors=False)


# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.xps_metric_entry_label import XPSMetricEntryLabel
from typing import Optional, Set
from typing_extensions import Self

class XPSMetricEntry(BaseModel):
    """
    XPSMetricEntry
    """ # noqa: E501
    argentum_metric_id: Optional[StrictStr] = Field(default=None, description="For billing metrics that are using legacy sku's, set the legacy billing metric id here. This will be sent to Chemist as the \"cloudbilling.googleapis.com/argentum_metric_id\" label. Otherwise leave empty.", alias="argentumMetricId")
    double_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A double value.", alias="doubleValue")
    int64_value: Optional[StrictStr] = Field(default=None, description="A signed 64-bit integer value.", alias="int64Value")
    metric_name: Optional[StrictStr] = Field(default=None, description="The metric name defined in the service configuration.", alias="metricName")
    system_labels: Optional[List[XPSMetricEntryLabel]] = Field(default=None, description="Billing system labels for this (metric, value) pair.", alias="systemLabels")
    __properties: ClassVar[List[str]] = ["argentumMetricId", "doubleValue", "int64Value", "metricName", "systemLabels"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of XPSMetricEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in system_labels (list)
        _items = []
        if self.system_labels:
            for _item_system_labels in self.system_labels:
                if _item_system_labels:
                    _items.append(_item_system_labels.to_dict())
            _dict['systemLabels'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of XPSMetricEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "argentumMetricId": obj.get("argentumMetricId"),
            "doubleValue": obj.get("doubleValue"),
            "int64Value": obj.get("int64Value"),
            "metricName": obj.get("metricName"),
            "systemLabels": [XPSMetricEntryLabel.from_dict(_item) for _item in obj["systemLabels"]] if obj.get("systemLabels") is not None else None
        })
        return _obj



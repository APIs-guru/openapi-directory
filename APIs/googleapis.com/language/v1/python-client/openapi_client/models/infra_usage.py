# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cpu_metric import CpuMetric
from openapi_client.models.disk_metric import DiskMetric
from openapi_client.models.gpu_metric import GpuMetric
from openapi_client.models.ram_metric import RamMetric
from openapi_client.models.tpu_metric import TpuMetric
from typing import Optional, Set
from typing_extensions import Self

class InfraUsage(BaseModel):
    """
    Infra Usage of billing metrics. Next ID: 6
    """ # noqa: E501
    cpu_metrics: Optional[List[CpuMetric]] = Field(default=None, description="Aggregated core metrics since requested start_time.", alias="cpuMetrics")
    disk_metrics: Optional[List[DiskMetric]] = Field(default=None, description="Aggregated persistent disk metrics since requested start_time.", alias="diskMetrics")
    gpu_metrics: Optional[List[GpuMetric]] = Field(default=None, description="Aggregated gpu metrics since requested start_time.", alias="gpuMetrics")
    ram_metrics: Optional[List[RamMetric]] = Field(default=None, description="Aggregated ram metrics since requested start_time.", alias="ramMetrics")
    tpu_metrics: Optional[List[TpuMetric]] = Field(default=None, description="Aggregated tpu metrics since requested start_time.", alias="tpuMetrics")
    __properties: ClassVar[List[str]] = ["cpuMetrics", "diskMetrics", "gpuMetrics", "ramMetrics", "tpuMetrics"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InfraUsage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cpu_metrics (list)
        _items = []
        if self.cpu_metrics:
            for _item_cpu_metrics in self.cpu_metrics:
                if _item_cpu_metrics:
                    _items.append(_item_cpu_metrics.to_dict())
            _dict['cpuMetrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in disk_metrics (list)
        _items = []
        if self.disk_metrics:
            for _item_disk_metrics in self.disk_metrics:
                if _item_disk_metrics:
                    _items.append(_item_disk_metrics.to_dict())
            _dict['diskMetrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in gpu_metrics (list)
        _items = []
        if self.gpu_metrics:
            for _item_gpu_metrics in self.gpu_metrics:
                if _item_gpu_metrics:
                    _items.append(_item_gpu_metrics.to_dict())
            _dict['gpuMetrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ram_metrics (list)
        _items = []
        if self.ram_metrics:
            for _item_ram_metrics in self.ram_metrics:
                if _item_ram_metrics:
                    _items.append(_item_ram_metrics.to_dict())
            _dict['ramMetrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tpu_metrics (list)
        _items = []
        if self.tpu_metrics:
            for _item_tpu_metrics in self.tpu_metrics:
                if _item_tpu_metrics:
                    _items.append(_item_tpu_metrics.to_dict())
            _dict['tpuMetrics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InfraUsage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cpuMetrics": [CpuMetric.from_dict(_item) for _item in obj["cpuMetrics"]] if obj.get("cpuMetrics") is not None else None,
            "diskMetrics": [DiskMetric.from_dict(_item) for _item in obj["diskMetrics"]] if obj.get("diskMetrics") is not None else None,
            "gpuMetrics": [GpuMetric.from_dict(_item) for _item in obj["gpuMetrics"]] if obj.get("gpuMetrics") is not None else None,
            "ramMetrics": [RamMetric.from_dict(_item) for _item in obj["ramMetrics"]] if obj.get("ramMetrics") is not None else None,
            "tpuMetrics": [TpuMetric.from_dict(_item) for _item in obj["tpuMetrics"]] if obj.get("tpuMetrics") is not None else None
        })
        return _obj



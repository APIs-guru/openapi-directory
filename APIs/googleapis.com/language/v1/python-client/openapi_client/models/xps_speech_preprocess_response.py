# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.xps_speech_evaluation_metrics import XPSSpeechEvaluationMetrics
from openapi_client.models.xps_speech_preprocess_stats import XPSSpeechPreprocessStats
from typing import Optional, Set
from typing_extensions import Self

class XPSSpeechPreprocessResponse(BaseModel):
    """
    XPSSpeechPreprocessResponse
    """ # noqa: E501
    cns_test_data_path: Optional[StrictStr] = Field(default=None, description="Location od shards of sstables (test data) of DataUtterance protos.", alias="cnsTestDataPath")
    cns_train_data_path: Optional[StrictStr] = Field(default=None, description="Location of shards of sstables (training data) of DataUtterance protos.", alias="cnsTrainDataPath")
    prebuilt_model_evaluation_metrics: Optional[XPSSpeechEvaluationMetrics] = Field(default=None, alias="prebuiltModelEvaluationMetrics")
    speech_preprocess_stats: Optional[XPSSpeechPreprocessStats] = Field(default=None, alias="speechPreprocessStats")
    __properties: ClassVar[List[str]] = ["cnsTestDataPath", "cnsTrainDataPath", "prebuiltModelEvaluationMetrics", "speechPreprocessStats"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of XPSSpeechPreprocessResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of prebuilt_model_evaluation_metrics
        if self.prebuilt_model_evaluation_metrics:
            _dict['prebuiltModelEvaluationMetrics'] = self.prebuilt_model_evaluation_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of speech_preprocess_stats
        if self.speech_preprocess_stats:
            _dict['speechPreprocessStats'] = self.speech_preprocess_stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of XPSSpeechPreprocessResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cnsTestDataPath": obj.get("cnsTestDataPath"),
            "cnsTrainDataPath": obj.get("cnsTrainDataPath"),
            "prebuiltModelEvaluationMetrics": XPSSpeechEvaluationMetrics.from_dict(obj["prebuiltModelEvaluationMetrics"]) if obj.get("prebuiltModelEvaluationMetrics") is not None else None,
            "speechPreprocessStats": XPSSpeechPreprocessStats.from_dict(obj["speechPreprocessStats"]) if obj.get("speechPreprocessStats") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GpuMetric(BaseModel):
    """
    GpuMetric
    """ # noqa: E501
    gpu_sec: Optional[StrictStr] = Field(default=None, description="Required. Seconds of GPU usage, e.g. 3600.", alias="gpuSec")
    gpu_type: Optional[StrictStr] = Field(default=None, description="Required. Type of GPU, e.g. NVIDIA_TESLA_V100.", alias="gpuType")
    machine_spec: Optional[StrictStr] = Field(default=None, description="Required. Machine spec, e.g. N1_STANDARD_4.", alias="machineSpec")
    tracking_labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Billing tracking labels. They do not contain any user data but only the labels set by Vertex Core Infra itself. Tracking labels' keys are defined with special format: goog-[\\p{Ll}\\p{N}]+ E.g. \"key\": \"goog-k8s-cluster-name\",\"value\": \"us-east1-b4rk\"", alias="trackingLabels")
    __properties: ClassVar[List[str]] = ["gpuSec", "gpuType", "machineSpec", "trackingLabels"]

    @field_validator('gpu_type')
    def gpu_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN_GPU_TYPE', 'NVIDIA_TESLA_A100', 'NVIDIA_A100_80GB', 'NVIDIA_TESLA_K80', 'NVIDIA_L4', 'NVIDIA_TESLA_P100', 'NVIDIA_TESLA_P4', 'NVIDIA_TESLA_T4', 'NVIDIA_TESLA_V100', 'NVIDIA_H100_80GB']):
            raise ValueError("must be one of enum values ('UNKNOWN_GPU_TYPE', 'NVIDIA_TESLA_A100', 'NVIDIA_A100_80GB', 'NVIDIA_TESLA_K80', 'NVIDIA_L4', 'NVIDIA_TESLA_P100', 'NVIDIA_TESLA_P4', 'NVIDIA_TESLA_T4', 'NVIDIA_TESLA_V100', 'NVIDIA_H100_80GB')")
        return value

    @field_validator('machine_spec')
    def machine_spec_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN_MACHINE_SPEC', 'N1_STANDARD_2', 'N1_STANDARD_4', 'N1_STANDARD_8', 'N1_STANDARD_16', 'N1_STANDARD_32', 'N1_STANDARD_64', 'N1_STANDARD_96', 'N1_HIGHMEM_2', 'N1_HIGHMEM_4', 'N1_HIGHMEM_8', 'N1_HIGHMEM_16', 'N1_HIGHMEM_32', 'N1_HIGHMEM_64', 'N1_HIGHMEM_96', 'N1_HIGHCPU_2', 'N1_HIGHCPU_4', 'N1_HIGHCPU_8', 'N1_HIGHCPU_16', 'N1_HIGHCPU_32', 'N1_HIGHCPU_64', 'N1_HIGHCPU_96', 'A2_HIGHGPU_1G', 'A2_HIGHGPU_2G', 'A2_HIGHGPU_4G', 'A2_HIGHGPU_8G', 'A2_MEGAGPU_16G', 'A2_ULTRAGPU_1G', 'A2_ULTRAGPU_2G', 'A2_ULTRAGPU_4G', 'A2_ULTRAGPU_8G', 'A3_HIGHGPU_8G', 'E2_STANDARD_2', 'E2_STANDARD_4', 'E2_STANDARD_8', 'E2_STANDARD_16', 'E2_STANDARD_32', 'E2_HIGHMEM_2', 'E2_HIGHMEM_4', 'E2_HIGHMEM_8', 'E2_HIGHMEM_16', 'E2_HIGHCPU_2', 'E2_HIGHCPU_4', 'E2_HIGHCPU_8', 'E2_HIGHCPU_16', 'E2_HIGHCPU_32', 'N2_STANDARD_2', 'N2_STANDARD_4', 'N2_STANDARD_8', 'N2_STANDARD_16', 'N2_STANDARD_32', 'N2_STANDARD_48', 'N2_STANDARD_64', 'N2_STANDARD_80', 'N2_STANDARD_96', 'N2_STANDARD_128', 'N2_HIGHMEM_2', 'N2_HIGHMEM_4', 'N2_HIGHMEM_8', 'N2_HIGHMEM_16', 'N2_HIGHMEM_32', 'N2_HIGHMEM_48', 'N2_HIGHMEM_64', 'N2_HIGHMEM_80', 'N2_HIGHMEM_96', 'N2_HIGHMEM_128', 'N2_HIGHCPU_2', 'N2_HIGHCPU_4', 'N2_HIGHCPU_8', 'N2_HIGHCPU_16', 'N2_HIGHCPU_32', 'N2_HIGHCPU_48', 'N2_HIGHCPU_64', 'N2_HIGHCPU_80', 'N2_HIGHCPU_96', 'N2D_STANDARD_2', 'N2D_STANDARD_4', 'N2D_STANDARD_8', 'N2D_STANDARD_16', 'N2D_STANDARD_32', 'N2D_STANDARD_48', 'N2D_STANDARD_64', 'N2D_STANDARD_80', 'N2D_STANDARD_96', 'N2D_STANDARD_128', 'N2D_STANDARD_224', 'N2D_HIGHMEM_2', 'N2D_HIGHMEM_4', 'N2D_HIGHMEM_8', 'N2D_HIGHMEM_16', 'N2D_HIGHMEM_32', 'N2D_HIGHMEM_48', 'N2D_HIGHMEM_64', 'N2D_HIGHMEM_80', 'N2D_HIGHMEM_96', 'N2D_HIGHCPU_2', 'N2D_HIGHCPU_4', 'N2D_HIGHCPU_8', 'N2D_HIGHCPU_16', 'N2D_HIGHCPU_32', 'N2D_HIGHCPU_48', 'N2D_HIGHCPU_64', 'N2D_HIGHCPU_80', 'N2D_HIGHCPU_96', 'N2D_HIGHCPU_128', 'N2D_HIGHCPU_224', 'C2_STANDARD_4', 'C2_STANDARD_8', 'C2_STANDARD_16', 'C2_STANDARD_30', 'C2_STANDARD_60', 'C2D_STANDARD_2', 'C2D_STANDARD_4', 'C2D_STANDARD_8', 'C2D_STANDARD_16', 'C2D_STANDARD_32', 'C2D_STANDARD_56', 'C2D_STANDARD_112', 'C2D_HIGHCPU_2', 'C2D_HIGHCPU_4', 'C2D_HIGHCPU_8', 'C2D_HIGHCPU_16', 'C2D_HIGHCPU_32', 'C2D_HIGHCPU_56', 'C2D_HIGHCPU_112', 'C2D_HIGHMEM_2', 'C2D_HIGHMEM_4', 'C2D_HIGHMEM_8', 'C2D_HIGHMEM_16', 'C2D_HIGHMEM_32', 'C2D_HIGHMEM_56', 'C2D_HIGHMEM_112', 'G2_STANDARD_4', 'G2_STANDARD_8', 'G2_STANDARD_12', 'G2_STANDARD_16', 'G2_STANDARD_24', 'G2_STANDARD_32', 'G2_STANDARD_48', 'G2_STANDARD_96', 'C3_STANDARD_4', 'C3_STANDARD_8', 'C3_STANDARD_22', 'C3_STANDARD_44', 'C3_STANDARD_88', 'C3_STANDARD_176', 'C3_HIGHCPU_4', 'C3_HIGHCPU_8', 'C3_HIGHCPU_22', 'C3_HIGHCPU_44', 'C3_HIGHCPU_88', 'C3_HIGHCPU_176', 'C3_HIGHMEM_4', 'C3_HIGHMEM_8', 'C3_HIGHMEM_22', 'C3_HIGHMEM_44', 'C3_HIGHMEM_88', 'C3_HIGHMEM_176']):
            raise ValueError("must be one of enum values ('UNKNOWN_MACHINE_SPEC', 'N1_STANDARD_2', 'N1_STANDARD_4', 'N1_STANDARD_8', 'N1_STANDARD_16', 'N1_STANDARD_32', 'N1_STANDARD_64', 'N1_STANDARD_96', 'N1_HIGHMEM_2', 'N1_HIGHMEM_4', 'N1_HIGHMEM_8', 'N1_HIGHMEM_16', 'N1_HIGHMEM_32', 'N1_HIGHMEM_64', 'N1_HIGHMEM_96', 'N1_HIGHCPU_2', 'N1_HIGHCPU_4', 'N1_HIGHCPU_8', 'N1_HIGHCPU_16', 'N1_HIGHCPU_32', 'N1_HIGHCPU_64', 'N1_HIGHCPU_96', 'A2_HIGHGPU_1G', 'A2_HIGHGPU_2G', 'A2_HIGHGPU_4G', 'A2_HIGHGPU_8G', 'A2_MEGAGPU_16G', 'A2_ULTRAGPU_1G', 'A2_ULTRAGPU_2G', 'A2_ULTRAGPU_4G', 'A2_ULTRAGPU_8G', 'A3_HIGHGPU_8G', 'E2_STANDARD_2', 'E2_STANDARD_4', 'E2_STANDARD_8', 'E2_STANDARD_16', 'E2_STANDARD_32', 'E2_HIGHMEM_2', 'E2_HIGHMEM_4', 'E2_HIGHMEM_8', 'E2_HIGHMEM_16', 'E2_HIGHCPU_2', 'E2_HIGHCPU_4', 'E2_HIGHCPU_8', 'E2_HIGHCPU_16', 'E2_HIGHCPU_32', 'N2_STANDARD_2', 'N2_STANDARD_4', 'N2_STANDARD_8', 'N2_STANDARD_16', 'N2_STANDARD_32', 'N2_STANDARD_48', 'N2_STANDARD_64', 'N2_STANDARD_80', 'N2_STANDARD_96', 'N2_STANDARD_128', 'N2_HIGHMEM_2', 'N2_HIGHMEM_4', 'N2_HIGHMEM_8', 'N2_HIGHMEM_16', 'N2_HIGHMEM_32', 'N2_HIGHMEM_48', 'N2_HIGHMEM_64', 'N2_HIGHMEM_80', 'N2_HIGHMEM_96', 'N2_HIGHMEM_128', 'N2_HIGHCPU_2', 'N2_HIGHCPU_4', 'N2_HIGHCPU_8', 'N2_HIGHCPU_16', 'N2_HIGHCPU_32', 'N2_HIGHCPU_48', 'N2_HIGHCPU_64', 'N2_HIGHCPU_80', 'N2_HIGHCPU_96', 'N2D_STANDARD_2', 'N2D_STANDARD_4', 'N2D_STANDARD_8', 'N2D_STANDARD_16', 'N2D_STANDARD_32', 'N2D_STANDARD_48', 'N2D_STANDARD_64', 'N2D_STANDARD_80', 'N2D_STANDARD_96', 'N2D_STANDARD_128', 'N2D_STANDARD_224', 'N2D_HIGHMEM_2', 'N2D_HIGHMEM_4', 'N2D_HIGHMEM_8', 'N2D_HIGHMEM_16', 'N2D_HIGHMEM_32', 'N2D_HIGHMEM_48', 'N2D_HIGHMEM_64', 'N2D_HIGHMEM_80', 'N2D_HIGHMEM_96', 'N2D_HIGHCPU_2', 'N2D_HIGHCPU_4', 'N2D_HIGHCPU_8', 'N2D_HIGHCPU_16', 'N2D_HIGHCPU_32', 'N2D_HIGHCPU_48', 'N2D_HIGHCPU_64', 'N2D_HIGHCPU_80', 'N2D_HIGHCPU_96', 'N2D_HIGHCPU_128', 'N2D_HIGHCPU_224', 'C2_STANDARD_4', 'C2_STANDARD_8', 'C2_STANDARD_16', 'C2_STANDARD_30', 'C2_STANDARD_60', 'C2D_STANDARD_2', 'C2D_STANDARD_4', 'C2D_STANDARD_8', 'C2D_STANDARD_16', 'C2D_STANDARD_32', 'C2D_STANDARD_56', 'C2D_STANDARD_112', 'C2D_HIGHCPU_2', 'C2D_HIGHCPU_4', 'C2D_HIGHCPU_8', 'C2D_HIGHCPU_16', 'C2D_HIGHCPU_32', 'C2D_HIGHCPU_56', 'C2D_HIGHCPU_112', 'C2D_HIGHMEM_2', 'C2D_HIGHMEM_4', 'C2D_HIGHMEM_8', 'C2D_HIGHMEM_16', 'C2D_HIGHMEM_32', 'C2D_HIGHMEM_56', 'C2D_HIGHMEM_112', 'G2_STANDARD_4', 'G2_STANDARD_8', 'G2_STANDARD_12', 'G2_STANDARD_16', 'G2_STANDARD_24', 'G2_STANDARD_32', 'G2_STANDARD_48', 'G2_STANDARD_96', 'C3_STANDARD_4', 'C3_STANDARD_8', 'C3_STANDARD_22', 'C3_STANDARD_44', 'C3_STANDARD_88', 'C3_STANDARD_176', 'C3_HIGHCPU_4', 'C3_HIGHCPU_8', 'C3_HIGHCPU_22', 'C3_HIGHCPU_44', 'C3_HIGHCPU_88', 'C3_HIGHCPU_176', 'C3_HIGHMEM_4', 'C3_HIGHMEM_8', 'C3_HIGHMEM_22', 'C3_HIGHMEM_44', 'C3_HIGHMEM_88', 'C3_HIGHMEM_176')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GpuMetric from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GpuMetric from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gpuSec": obj.get("gpuSec"),
            "gpuType": obj.get("gpuType"),
            "machineSpec": obj.get("machineSpec"),
            "trackingLabels": obj.get("trackingLabels")
        })
        return _obj



# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.xps_text_extraction_evaluation_metrics import XPSTextExtractionEvaluationMetrics

class TestXPSTextExtractionEvaluationMetrics(unittest.TestCase):
    """XPSTextExtractionEvaluationMetrics unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> XPSTextExtractionEvaluationMetrics:
        """Test XPSTextExtractionEvaluationMetrics
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `XPSTextExtractionEvaluationMetrics`
        """
        model = XPSTextExtractionEvaluationMetrics()
        if include_optional:
            return XPSTextExtractionEvaluationMetrics(
                best_f1_confidence_metrics = openapi_client.models.xps_confidence_metrics_entry.XPSConfidenceMetricsEntry(
                    confidence_threshold = 1.337, 
                    f1_score = 1.337, 
                    f1_score_at1 = 1.337, 
                    false_negative_count = '', 
                    false_positive_count = '', 
                    false_positive_rate = 1.337, 
                    false_positive_rate_at1 = 1.337, 
                    position_threshold = 56, 
                    precision = 1.337, 
                    precision_at1 = 1.337, 
                    recall = 1.337, 
                    recall_at1 = 1.337, 
                    true_negative_count = '', 
                    true_positive_count = '', ),
                confidence_metrics_entries = [
                    openapi_client.models.xps_confidence_metrics_entry.XPSConfidenceMetricsEntry(
                        confidence_threshold = 1.337, 
                        f1_score = 1.337, 
                        f1_score_at1 = 1.337, 
                        false_negative_count = '', 
                        false_positive_count = '', 
                        false_positive_rate = 1.337, 
                        false_positive_rate_at1 = 1.337, 
                        position_threshold = 56, 
                        precision = 1.337, 
                        precision_at1 = 1.337, 
                        recall = 1.337, 
                        recall_at1 = 1.337, 
                        true_negative_count = '', 
                        true_positive_count = '', )
                    ],
                confusion_matrix = openapi_client.models.xps_confusion_matrix.XPSConfusionMatrix(
                    annotation_spec_id_token = [
                        ''
                        ], 
                    category = [
                        56
                        ], 
                    row = [
                        openapi_client.models.xps_confusion_matrix_row.XPSConfusionMatrixRow(
                            count = [
                                ''
                                ], 
                            example_count = [
                                56
                                ], )
                        ], 
                    sentiment_label = [
                        56
                        ], ),
                per_label_confidence_metrics = {
                    'key' : openapi_client.models.xps_confidence_metrics_entry.XPSConfidenceMetricsEntry(
                        confidence_threshold = 1.337, 
                        f1_score = 1.337, 
                        f1_score_at1 = 1.337, 
                        false_negative_count = '', 
                        false_positive_count = '', 
                        false_positive_rate = 1.337, 
                        false_positive_rate_at1 = 1.337, 
                        position_threshold = 56, 
                        precision = 1.337, 
                        precision_at1 = 1.337, 
                        recall = 1.337, 
                        recall_at1 = 1.337, 
                        true_negative_count = '', 
                        true_positive_count = '', )
                    }
            )
        else:
            return XPSTextExtractionEvaluationMetrics(
        )
        """

    def testXPSTextExtractionEvaluationMetrics(self):
        """Test XPSTextExtractionEvaluationMetrics"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.xps_image_object_detection_model_spec import XPSImageObjectDetectionModelSpec

class TestXPSImageObjectDetectionModelSpec(unittest.TestCase):
    """XPSImageObjectDetectionModelSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> XPSImageObjectDetectionModelSpec:
        """Test XPSImageObjectDetectionModelSpec
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `XPSImageObjectDetectionModelSpec`
        """
        model = XPSImageObjectDetectionModelSpec()
        if include_optional:
            return XPSImageObjectDetectionModelSpec(
                class_count = '',
                export_model_spec = openapi_client.models.xps_image_export_model_spec.XPSImageExportModelSpec(
                    export_model_output_config = [
                        openapi_client.models.xps_export_model_output_config.XPSExportModelOutputConfig(
                            core_ml_format = openapi_client.models.core_ml_format.coreMlFormat(), 
                            docker_format = openapi_client.models.xps_docker_format.XPSDockerFormat(
                                cpu_architecture = 'CPU_ARCHITECTURE_UNSPECIFIED', 
                                gpu_architecture = 'GPU_ARCHITECTURE_UNSPECIFIED', ), 
                            edge_tpu_tf_lite_format = openapi_client.models.edge_tpu_tf_lite_format.edgeTpuTfLiteFormat(), 
                            export_firebase_auxiliary_info = True, 
                            output_gcr_uri = '', 
                            output_gcs_uri = '', 
                            tf_js_format = openapi_client.models.tf_js_format.tfJsFormat(), 
                            tf_lite_format = openapi_client.models.tf_lite_format.tfLiteFormat(), 
                            tf_saved_model_format = openapi_client.models.tf_saved_model_format.tfSavedModelFormat(), )
                        ], ),
                max_bounding_box_count = '',
                model_artifact_spec = openapi_client.models.xps_image_model_artifact_spec.XPSImageModelArtifactSpec(
                    checkpoint_artifact = openapi_client.models.xps_model_artifact_item.XPSModelArtifactItem(
                        artifact_format = 'ARTIFACT_FORMAT_UNSPECIFIED', 
                        gcs_uri = '', ), 
                    export_artifact = [
                        openapi_client.models.xps_model_artifact_item.XPSModelArtifactItem(
                            artifact_format = 'ARTIFACT_FORMAT_UNSPECIFIED', 
                            gcs_uri = '', )
                        ], 
                    label_gcs_uri = '', 
                    serving_artifact = , 
                    tf_js_binary_gcs_prefix = '', 
                    tf_lite_metadata_gcs_uri = '', ),
                model_serving_spec = openapi_client.models.xps_image_model_serving_spec.XPSImageModelServingSpec(
                    model_throughput_estimation = [
                        openapi_client.models.xps_image_model_serving_spec_model_throughput_estimation.XPSImageModelServingSpecModelThroughputEstimation(
                            compute_engine_accelerator_type = 'UNSPECIFIED', 
                            latency_in_milliseconds = 1.337, 
                            node_qps = 1.337, 
                            servomatic_partition_type = 'PARTITION_TYPE_UNSPECIFIED', )
                        ], 
                    node_qps = 1.337, 
                    tf_runtime_version = '', ),
                stop_reason = 'TRAIN_STOP_REASON_UNSPECIFIED',
                train_cost_node_seconds = ''
            )
        else:
            return XPSImageObjectDetectionModelSpec(
        )
        """

    def testXPSImageObjectDetectionModelSpec(self):
        """Test XPSImageObjectDetectionModelSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

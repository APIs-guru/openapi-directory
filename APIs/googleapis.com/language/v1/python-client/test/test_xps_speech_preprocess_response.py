# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.xps_speech_preprocess_response import XPSSpeechPreprocessResponse

class TestXPSSpeechPreprocessResponse(unittest.TestCase):
    """XPSSpeechPreprocessResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> XPSSpeechPreprocessResponse:
        """Test XPSSpeechPreprocessResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `XPSSpeechPreprocessResponse`
        """
        model = XPSSpeechPreprocessResponse()
        if include_optional:
            return XPSSpeechPreprocessResponse(
                cns_test_data_path = '',
                cns_train_data_path = '',
                prebuilt_model_evaluation_metrics = openapi_client.models.xps_speech_evaluation_metrics.XPSSpeechEvaluationMetrics(
                    sub_model_evaluation_metrics = [
                        openapi_client.models.xps_speech_evaluation_metrics_sub_model_evaluation_metric.XPSSpeechEvaluationMetricsSubModelEvaluationMetric(
                            biasing_model_type = 'BIASING_MODEL_TYPE_UNSPECIFIED', 
                            is_enhanced_model = True, 
                            num_deletions = 56, 
                            num_insertions = 56, 
                            num_substitutions = 56, 
                            num_utterances = 56, 
                            num_words = 56, 
                            sentence_accuracy = 1.337, 
                            wer = 1.337, )
                        ], ),
                speech_preprocess_stats = openapi_client.models.xps_speech_preprocess_stats.XPSSpeechPreprocessStats(
                    data_errors = [
                        openapi_client.models.xps_data_errors.XPSDataErrors(
                            count = 56, 
                            error_type = 'ERROR_TYPE_UNSPECIFIED', )
                        ], 
                    num_human_labeled_examples = 56, 
                    num_logs_examples = 56, 
                    num_machine_transcribed_examples = 56, 
                    test_examples_count = 56, 
                    test_sentences_count = 56, 
                    test_words_count = 56, 
                    train_examples_count = 56, 
                    train_sentences_count = 56, 
                    train_words_count = 56, )
            )
        else:
            return XPSSpeechPreprocessResponse(
        )
        """

    def testXPSSpeechPreprocessResponse(self):
        """Test XPSSpeechPreprocessResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

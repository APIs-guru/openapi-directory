# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.xps_classification_evaluation_metrics import XPSClassificationEvaluationMetrics

class TestXPSClassificationEvaluationMetrics(unittest.TestCase):
    """XPSClassificationEvaluationMetrics unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> XPSClassificationEvaluationMetrics:
        """Test XPSClassificationEvaluationMetrics
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `XPSClassificationEvaluationMetrics`
        """
        model = XPSClassificationEvaluationMetrics()
        if include_optional:
            return XPSClassificationEvaluationMetrics(
                au_prc = 1.337,
                au_roc = 1.337,
                base_au_prc = 1.337,
                confidence_metrics_entries = [
                    openapi_client.models.xps_confidence_metrics_entry.XPSConfidenceMetricsEntry(
                        confidence_threshold = 1.337, 
                        f1_score = 1.337, 
                        f1_score_at1 = 1.337, 
                        false_negative_count = '', 
                        false_positive_count = '', 
                        false_positive_rate = 1.337, 
                        false_positive_rate_at1 = 1.337, 
                        position_threshold = 56, 
                        precision = 1.337, 
                        precision_at1 = 1.337, 
                        recall = 1.337, 
                        recall_at1 = 1.337, 
                        true_negative_count = '', 
                        true_positive_count = '', )
                    ],
                confusion_matrix = openapi_client.models.xps_confusion_matrix.XPSConfusionMatrix(
                    annotation_spec_id_token = [
                        ''
                        ], 
                    category = [
                        56
                        ], 
                    row = [
                        openapi_client.models.xps_confusion_matrix_row.XPSConfusionMatrixRow(
                            count = [
                                ''
                                ], 
                            example_count = [
                                56
                                ], )
                        ], 
                    sentiment_label = [
                        56
                        ], ),
                evaluated_examples_count = 56,
                log_loss = 1.337
            )
        else:
            return XPSClassificationEvaluationMetrics(
        )
        """

    def testXPSClassificationEvaluationMetrics(self):
        """Test XPSClassificationEvaluationMetrics"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

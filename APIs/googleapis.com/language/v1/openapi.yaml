openapi: 3.0.0
servers:
  - url: https://language.googleapis.com/
info:
  contact:
    name: Google
    url: https://google.com
    x-twitter: youtube
  description: Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.
  license:
    name: Creative Commons Attribution 3.0
    url: http://creativecommons.org/licenses/by/3.0/
  termsOfService: https://developers.google.com/terms/
  title: Cloud Natural Language API
  version: v1
  x-apiClientRegistration:
    url: https://console.developers.google.com
  x-apisguru-categories:
    - analytics
    - media
  x-logo:
    url: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png
  x-origin:
    - format: google
      url: https://language.googleapis.com/$discovery/rest?version=v1
      version: v1
  x-preferred: false
  x-providerName: googleapis.com
  x-serviceName: language
externalDocs:
  url: https://cloud.google.com/natural-language/
tags:
  - name: documents
paths:
  /v1/documents:analyzeEntities:
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Finds named entities (currently proper names and common nouns) in the text along with entity types, salience, mentions for each entity, and other properties.
      operationId: language.documents.analyzeEntities
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnalyzeEntitiesRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalyzeEntitiesResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-language
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-language
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - documents
  /v1/documents:analyzeEntitySentiment:
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Finds entities, similar to AnalyzeEntities in the text and analyzes sentiment associated with each entity and its mentions.
      operationId: language.documents.analyzeEntitySentiment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnalyzeEntitySentimentRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalyzeEntitySentimentResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-language
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-language
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - documents
  /v1/documents:analyzeSentiment:
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Analyzes the sentiment of the provided text.
      operationId: language.documents.analyzeSentiment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnalyzeSentimentRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalyzeSentimentResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-language
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-language
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - documents
  /v1/documents:analyzeSyntax:
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Analyzes the syntax of the text and provides sentence boundaries and tokenization along with part of speech tags, dependency trees, and other properties.
      operationId: language.documents.analyzeSyntax
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnalyzeSyntaxRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalyzeSyntaxResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-language
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-language
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - documents
  /v1/documents:annotateText:
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: A convenience method that provides all the features that analyzeSentiment, analyzeEntities, and analyzeSyntax provide in one call.
      operationId: language.documents.annotateText
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnnotateTextRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotateTextResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-language
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-language
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - documents
  /v1/documents:classifyText:
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Classifies a document into categories.
      operationId: language.documents.classifyText
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClassifyTextRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClassifyTextResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-language
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-language
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - documents
  /v1/documents:moderateText:
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Moderates a document for harmful and sensitive categories.
      operationId: language.documents.moderateText
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModerateTextRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModerateTextResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-language
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-language
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - documents
components:
  parameters:
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        enum:
          - "1"
          - "2"
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        enum:
          - json
          - media
          - proto
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
  schemas:
    AnalyzeEntitiesRequest:
      description: The entity analysis request message.
      properties:
        document:
          $ref: "#/components/schemas/Document"
          description: Required. Input document.
        encodingType:
          description: The encoding type used by the API to calculate offsets.
          enum:
            - NONE
            - UTF8
            - UTF16
            - UTF32
          type: string
      type: object
    AnalyzeEntitiesResponse:
      description: The entity analysis response message.
      properties:
        entities:
          description: The recognized entities in the input document.
          items:
            $ref: "#/components/schemas/Entity"
          type: array
        language:
          description: The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.
          type: string
      type: object
    AnalyzeEntitySentimentRequest:
      description: The entity-level sentiment analysis request message.
      properties:
        document:
          $ref: "#/components/schemas/Document"
          description: Required. Input document.
        encodingType:
          description: The encoding type used by the API to calculate offsets.
          enum:
            - NONE
            - UTF8
            - UTF16
            - UTF32
          type: string
      type: object
    AnalyzeEntitySentimentResponse:
      description: The entity-level sentiment analysis response message.
      properties:
        entities:
          description: The recognized entities in the input document with associated sentiments.
          items:
            $ref: "#/components/schemas/Entity"
          type: array
        language:
          description: The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.
          type: string
      type: object
    AnalyzeSentimentRequest:
      description: The sentiment analysis request message.
      properties:
        document:
          $ref: "#/components/schemas/Document"
          description: Required. Input document.
        encodingType:
          description: The encoding type used by the API to calculate sentence offsets.
          enum:
            - NONE
            - UTF8
            - UTF16
            - UTF32
          type: string
      type: object
    AnalyzeSentimentResponse:
      description: The sentiment analysis response message.
      properties:
        documentSentiment:
          $ref: "#/components/schemas/Sentiment"
          description: The overall sentiment of the input document.
        language:
          description: The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.
          type: string
        sentences:
          description: The sentiment for all the sentences in the document.
          items:
            $ref: "#/components/schemas/Sentence"
          type: array
      type: object
    AnalyzeSyntaxRequest:
      description: The syntax analysis request message.
      properties:
        document:
          $ref: "#/components/schemas/Document"
          description: Required. Input document.
        encodingType:
          description: The encoding type used by the API to calculate offsets.
          enum:
            - NONE
            - UTF8
            - UTF16
            - UTF32
          type: string
      type: object
    AnalyzeSyntaxResponse:
      description: The syntax analysis response message.
      properties:
        language:
          description: The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.
          type: string
        sentences:
          description: Sentences in the input document.
          items:
            $ref: "#/components/schemas/Sentence"
          type: array
        tokens:
          description: Tokens, along with their syntactic information, in the input document.
          items:
            $ref: "#/components/schemas/Token"
          type: array
      type: object
    AnnotateTextRequest:
      description: The request message for the text annotation API, which can perform multiple analysis types (sentiment, entities, and syntax) in one call.
      properties:
        document:
          $ref: "#/components/schemas/Document"
          description: Required. Input document.
        encodingType:
          description: The encoding type used by the API to calculate offsets.
          enum:
            - NONE
            - UTF8
            - UTF16
            - UTF32
          type: string
        features:
          $ref: "#/components/schemas/AnnotateTextRequestFeatures"
          description: Required. The enabled features.
      type: object
    AnnotateTextRequestFeatures:
      description: All available features for sentiment, syntax, and semantic analysis. Setting each one to true will enable that specific analysis for the input.
      properties:
        classificationModelOptions:
          $ref: "#/components/schemas/ClassificationModelOptions"
          description: Optional. The model options to use for classification. Defaults to v1 options if not specified. Only used if `classify_text` is set to true.
        classifyText:
          description: Classify the full document into categories.
          type: boolean
        extractDocumentSentiment:
          description: Extract document-level sentiment.
          type: boolean
        extractEntities:
          description: Extract entities.
          type: boolean
        extractEntitySentiment:
          description: Extract entities and their associated sentiment.
          type: boolean
        extractSyntax:
          description: Extract syntax information.
          type: boolean
        moderateText:
          description: Moderate the document for harmful and sensitive categories.
          type: boolean
      type: object
    AnnotateTextResponse:
      description: The text annotations response message.
      properties:
        categories:
          description: Categories identified in the input document.
          items:
            $ref: "#/components/schemas/ClassificationCategory"
          type: array
        documentSentiment:
          $ref: "#/components/schemas/Sentiment"
          description: The overall sentiment for the document. Populated if the user enables AnnotateTextRequest.Features.extract_document_sentiment.
        entities:
          description: Entities, along with their semantic information, in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_entities.
          items:
            $ref: "#/components/schemas/Entity"
          type: array
        language:
          description: The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.
          type: string
        moderationCategories:
          description: Harmful and sensitive categories identified in the input document.
          items:
            $ref: "#/components/schemas/ClassificationCategory"
          type: array
        sentences:
          description: Sentences in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_syntax.
          items:
            $ref: "#/components/schemas/Sentence"
          type: array
        tokens:
          description: Tokens, along with their syntactic information, in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_syntax.
          items:
            $ref: "#/components/schemas/Token"
          type: array
      type: object
    ClassificationCategory:
      description: Represents a category returned from the text classifier.
      properties:
        confidence:
          description: The classifier's confidence of the category. Number represents how certain the classifier is that this category represents the given text.
          format: float
          type: number
        name:
          description: The name of the category representing the document.
          type: string
      type: object
    ClassificationModelOptions:
      description: Model options available for classification requests.
      properties:
        v1Model:
          $ref: "#/components/schemas/ClassificationModelOptionsV1Model"
          description: Setting this field will use the V1 model and V1 content categories version. The V1 model is a legacy model; support for this will be discontinued in the future.
        v2Model:
          $ref: "#/components/schemas/ClassificationModelOptionsV2Model"
          description: Setting this field will use the V2 model with the appropriate content categories version. The V2 model is a better performing model.
      type: object
    ClassificationModelOptionsV1Model:
      description: Options for the V1 model.
      properties: {}
      type: object
    ClassificationModelOptionsV2Model:
      description: Options for the V2 model.
      properties:
        contentCategoriesVersion:
          description: The content categories used for classification.
          enum:
            - CONTENT_CATEGORIES_VERSION_UNSPECIFIED
            - V1
            - V2
          type: string
      type: object
    ClassifyTextRequest:
      description: The document classification request message.
      properties:
        classificationModelOptions:
          $ref: "#/components/schemas/ClassificationModelOptions"
          description: Optional. Model options to use for classification. Defaults to v1 options if not specified.
        document:
          $ref: "#/components/schemas/Document"
          description: Required. Input document.
      type: object
    ClassifyTextResponse:
      description: The document classification response message.
      properties:
        categories:
          description: Categories representing the input document.
          items:
            $ref: "#/components/schemas/ClassificationCategory"
          type: array
      type: object
    Color:
      description: "Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ..."
      properties:
        alpha:
          description: "The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0)."
          format: float
          type: number
        blue:
          description: The amount of blue in the color as a value in the interval [0, 1].
          format: float
          type: number
        green:
          description: The amount of green in the color as a value in the interval [0, 1].
          format: float
          type: number
        red:
          description: The amount of red in the color as a value in the interval [0, 1].
          format: float
          type: number
      type: object
    CpuMetric:
      description: Metric for billing reports.
      properties:
        coreNumber:
          description: Required. Number of CPU cores.
          format: int64
          type: string
        coreSec:
          description: Required. Total seconds of core usage, e.g. 4.
          format: int64
          type: string
        cpuType:
          description: Required. Type of cpu, e.g. N2.
          enum:
            - UNKNOWN_CPU_TYPE
            - A2
            - A3
            - C2
            - C2D
            - CUSTOM
            - E2
            - G2
            - C3
            - M2
            - M1
            - N1
            - N2_CUSTOM
            - N2
            - N2D
          type: string
        machineSpec:
          description: Required. Machine spec, e.g. N1_STANDARD_4.
          enum:
            - UNKNOWN_MACHINE_SPEC
            - N1_STANDARD_2
            - N1_STANDARD_4
            - N1_STANDARD_8
            - N1_STANDARD_16
            - N1_STANDARD_32
            - N1_STANDARD_64
            - N1_STANDARD_96
            - N1_HIGHMEM_2
            - N1_HIGHMEM_4
            - N1_HIGHMEM_8
            - N1_HIGHMEM_16
            - N1_HIGHMEM_32
            - N1_HIGHMEM_64
            - N1_HIGHMEM_96
            - N1_HIGHCPU_2
            - N1_HIGHCPU_4
            - N1_HIGHCPU_8
            - N1_HIGHCPU_16
            - N1_HIGHCPU_32
            - N1_HIGHCPU_64
            - N1_HIGHCPU_96
            - A2_HIGHGPU_1G
            - A2_HIGHGPU_2G
            - A2_HIGHGPU_4G
            - A2_HIGHGPU_8G
            - A2_MEGAGPU_16G
            - A2_ULTRAGPU_1G
            - A2_ULTRAGPU_2G
            - A2_ULTRAGPU_4G
            - A2_ULTRAGPU_8G
            - A3_HIGHGPU_8G
            - E2_STANDARD_2
            - E2_STANDARD_4
            - E2_STANDARD_8
            - E2_STANDARD_16
            - E2_STANDARD_32
            - E2_HIGHMEM_2
            - E2_HIGHMEM_4
            - E2_HIGHMEM_8
            - E2_HIGHMEM_16
            - E2_HIGHCPU_2
            - E2_HIGHCPU_4
            - E2_HIGHCPU_8
            - E2_HIGHCPU_16
            - E2_HIGHCPU_32
            - N2_STANDARD_2
            - N2_STANDARD_4
            - N2_STANDARD_8
            - N2_STANDARD_16
            - N2_STANDARD_32
            - N2_STANDARD_48
            - N2_STANDARD_64
            - N2_STANDARD_80
            - N2_STANDARD_96
            - N2_STANDARD_128
            - N2_HIGHMEM_2
            - N2_HIGHMEM_4
            - N2_HIGHMEM_8
            - N2_HIGHMEM_16
            - N2_HIGHMEM_32
            - N2_HIGHMEM_48
            - N2_HIGHMEM_64
            - N2_HIGHMEM_80
            - N2_HIGHMEM_96
            - N2_HIGHMEM_128
            - N2_HIGHCPU_2
            - N2_HIGHCPU_4
            - N2_HIGHCPU_8
            - N2_HIGHCPU_16
            - N2_HIGHCPU_32
            - N2_HIGHCPU_48
            - N2_HIGHCPU_64
            - N2_HIGHCPU_80
            - N2_HIGHCPU_96
            - N2D_STANDARD_2
            - N2D_STANDARD_4
            - N2D_STANDARD_8
            - N2D_STANDARD_16
            - N2D_STANDARD_32
            - N2D_STANDARD_48
            - N2D_STANDARD_64
            - N2D_STANDARD_80
            - N2D_STANDARD_96
            - N2D_STANDARD_128
            - N2D_STANDARD_224
            - N2D_HIGHMEM_2
            - N2D_HIGHMEM_4
            - N2D_HIGHMEM_8
            - N2D_HIGHMEM_16
            - N2D_HIGHMEM_32
            - N2D_HIGHMEM_48
            - N2D_HIGHMEM_64
            - N2D_HIGHMEM_80
            - N2D_HIGHMEM_96
            - N2D_HIGHCPU_2
            - N2D_HIGHCPU_4
            - N2D_HIGHCPU_8
            - N2D_HIGHCPU_16
            - N2D_HIGHCPU_32
            - N2D_HIGHCPU_48
            - N2D_HIGHCPU_64
            - N2D_HIGHCPU_80
            - N2D_HIGHCPU_96
            - N2D_HIGHCPU_128
            - N2D_HIGHCPU_224
            - C2_STANDARD_4
            - C2_STANDARD_8
            - C2_STANDARD_16
            - C2_STANDARD_30
            - C2_STANDARD_60
            - C2D_STANDARD_2
            - C2D_STANDARD_4
            - C2D_STANDARD_8
            - C2D_STANDARD_16
            - C2D_STANDARD_32
            - C2D_STANDARD_56
            - C2D_STANDARD_112
            - C2D_HIGHCPU_2
            - C2D_HIGHCPU_4
            - C2D_HIGHCPU_8
            - C2D_HIGHCPU_16
            - C2D_HIGHCPU_32
            - C2D_HIGHCPU_56
            - C2D_HIGHCPU_112
            - C2D_HIGHMEM_2
            - C2D_HIGHMEM_4
            - C2D_HIGHMEM_8
            - C2D_HIGHMEM_16
            - C2D_HIGHMEM_32
            - C2D_HIGHMEM_56
            - C2D_HIGHMEM_112
            - G2_STANDARD_4
            - G2_STANDARD_8
            - G2_STANDARD_12
            - G2_STANDARD_16
            - G2_STANDARD_24
            - G2_STANDARD_32
            - G2_STANDARD_48
            - G2_STANDARD_96
            - C3_STANDARD_4
            - C3_STANDARD_8
            - C3_STANDARD_22
            - C3_STANDARD_44
            - C3_STANDARD_88
            - C3_STANDARD_176
            - C3_HIGHCPU_4
            - C3_HIGHCPU_8
            - C3_HIGHCPU_22
            - C3_HIGHCPU_44
            - C3_HIGHCPU_88
            - C3_HIGHCPU_176
            - C3_HIGHMEM_4
            - C3_HIGHMEM_8
            - C3_HIGHMEM_22
            - C3_HIGHMEM_44
            - C3_HIGHMEM_88
            - C3_HIGHMEM_176
          type: string
        trackingLabels:
          additionalProperties:
            type: string
          description: "Billing tracking labels. They do not contain any user data but only the labels set by Vertex Core Infra itself. Tracking labels' keys are defined with special format: goog-[\\p{Ll}\\p{N}]+ E.g. \"key\": \"goog-k8s-cluster-name\",\"value\": \"us-east1-b4rk\""
          type: object
      type: object
    DependencyEdge:
      description: Represents dependency parse tree information for a token. (For more information on dependency labels, see http://www.aclweb.org/anthology/P13-2017
      properties:
        headTokenIndex:
          description: Represents the head of this token in the dependency tree. This is the index of the token which has an arc going to this token. The index is the position of the token in the array of tokens returned by the API method. If this token is a root token, then the `head_token_index` is its own index.
          format: int32
          type: integer
        label:
          description: The parse label for the token.
          enum:
            - UNKNOWN
            - ABBREV
            - ACOMP
            - ADVCL
            - ADVMOD
            - AMOD
            - APPOS
            - ATTR
            - AUX
            - AUXPASS
            - CC
            - CCOMP
            - CONJ
            - CSUBJ
            - CSUBJPASS
            - DEP
            - DET
            - DISCOURSE
            - DOBJ
            - EXPL
            - GOESWITH
            - IOBJ
            - MARK
            - MWE
            - MWV
            - NEG
            - NN
            - NPADVMOD
            - NSUBJ
            - NSUBJPASS
            - NUM
            - NUMBER
            - P
            - PARATAXIS
            - PARTMOD
            - PCOMP
            - POBJ
            - POSS
            - POSTNEG
            - PRECOMP
            - PRECONJ
            - PREDET
            - PREF
            - PREP
            - PRONL
            - PRT
            - PS
            - QUANTMOD
            - RCMOD
            - RCMODREL
            - RDROP
            - REF
            - REMNANT
            - REPARANDUM
            - ROOT
            - SNUM
            - SUFF
            - TMOD
            - TOPIC
            - VMOD
            - VOCATIVE
            - XCOMP
            - SUFFIX
            - TITLE
            - ADVPHMOD
            - AUXCAUS
            - AUXVV
            - DTMOD
            - FOREIGN
            - KW
            - LIST
            - NOMC
            - NOMCSUBJ
            - NOMCSUBJPASS
            - NUMC
            - COP
            - DISLOCATED
            - ASP
            - GMOD
            - GOBJ
            - INFMOD
            - MES
            - NCOMP
          type: string
      type: object
    DiskMetric:
      properties:
        diskType:
          description: Required. Type of Disk, e.g. REGIONAL_SSD.
          enum:
            - UNKNOWN_DISK_TYPE
            - REGIONAL_SSD
            - REGIONAL_STORAGE
            - PD_SSD
            - PD_STANDARD
            - STORAGE_SNAPSHOT
          type: string
        gibSec:
          description: Required. Seconds of physical disk usage, e.g. 3600.
          format: int64
          type: string
      type: object
    Document:
      description: Represents the input to API methods.
      properties:
        content:
          description: The content of the input in string format. Cloud audit logging exempt since it is based on user data.
          type: string
        gcsContentUri:
          description: "The Google Cloud Storage URI where the file content is located. This URI must be of the form: gs://bucket_name/object_name. For more details, see https://cloud.google.com/storage/docs/reference-uris. NOTE: Cloud Storage object versioning is not supported."
          type: string
        language:
          description: The language of the document (if not specified, the language is automatically detected). Both ISO and BCP-47 language codes are accepted. [Language Support](https://cloud.google.com/natural-language/docs/languages) lists currently supported languages for each API method. If the language (either specified by the caller or automatically detected) is not supported by the called API method, an `INVALID_ARGUMENT` error is returned.
          type: string
        type:
          description: Required. If the type is not set or is `TYPE_UNSPECIFIED`, returns an `INVALID_ARGUMENT` error.
          enum:
            - TYPE_UNSPECIFIED
            - PLAIN_TEXT
            - HTML
          type: string
      type: object
    Entity:
      description: Represents a phrase in the text that is a known entity, such as a person, an organization, or location. The API associates information, such as salience and mentions, with entities.
      properties:
        mentions:
          description: The mentions of this entity in the input document. The API currently supports proper noun mentions.
          items:
            $ref: "#/components/schemas/EntityMention"
          type: array
        metadata:
          additionalProperties:
            type: string
          description: Metadata associated with the entity. For most entity types, the metadata is a Wikipedia URL (`wikipedia_url`) and Knowledge Graph MID (`mid`), if they are available. For the metadata associated with other entity types, see the Type table below.
          type: object
        name:
          description: The representative name for the entity.
          type: string
        salience:
          description: The salience score associated with the entity in the [0, 1.0] range. The salience score for an entity provides information about the importance or centrality of that entity to the entire document text. Scores closer to 0 are less salient, while scores closer to 1.0 are highly salient.
          format: float
          type: number
        sentiment:
          $ref: "#/components/schemas/Sentiment"
          description: For calls to AnalyzeEntitySentiment or if AnnotateTextRequest.Features.extract_entity_sentiment is set to true, this field will contain the aggregate sentiment expressed for this entity in the provided document.
        type:
          description: The entity type.
          enum:
            - UNKNOWN
            - PERSON
            - LOCATION
            - ORGANIZATION
            - EVENT
            - WORK_OF_ART
            - CONSUMER_GOOD
            - OTHER
            - PHONE_NUMBER
            - ADDRESS
            - DATE
            - NUMBER
            - PRICE
          type: string
      type: object
    EntityMention:
      description: Represents a mention for an entity in the text. Currently, proper noun mentions are supported.
      properties:
        sentiment:
          $ref: "#/components/schemas/Sentiment"
          description: For calls to AnalyzeEntitySentiment or if AnnotateTextRequest.Features.extract_entity_sentiment is set to true, this field will contain the sentiment expressed for this mention of the entity in the provided document.
        text:
          $ref: "#/components/schemas/TextSpan"
          description: The mention text.
        type:
          description: The type of the entity mention.
          enum:
            - TYPE_UNKNOWN
            - PROPER
            - COMMON
          type: string
      type: object
    GpuMetric:
      properties:
        gpuSec:
          description: Required. Seconds of GPU usage, e.g. 3600.
          format: int64
          type: string
        gpuType:
          description: Required. Type of GPU, e.g. NVIDIA_TESLA_V100.
          enum:
            - UNKNOWN_GPU_TYPE
            - NVIDIA_TESLA_A100
            - NVIDIA_A100_80GB
            - NVIDIA_TESLA_K80
            - NVIDIA_L4
            - NVIDIA_TESLA_P100
            - NVIDIA_TESLA_P4
            - NVIDIA_TESLA_T4
            - NVIDIA_TESLA_V100
            - NVIDIA_H100_80GB
          type: string
        machineSpec:
          description: Required. Machine spec, e.g. N1_STANDARD_4.
          enum:
            - UNKNOWN_MACHINE_SPEC
            - N1_STANDARD_2
            - N1_STANDARD_4
            - N1_STANDARD_8
            - N1_STANDARD_16
            - N1_STANDARD_32
            - N1_STANDARD_64
            - N1_STANDARD_96
            - N1_HIGHMEM_2
            - N1_HIGHMEM_4
            - N1_HIGHMEM_8
            - N1_HIGHMEM_16
            - N1_HIGHMEM_32
            - N1_HIGHMEM_64
            - N1_HIGHMEM_96
            - N1_HIGHCPU_2
            - N1_HIGHCPU_4
            - N1_HIGHCPU_8
            - N1_HIGHCPU_16
            - N1_HIGHCPU_32
            - N1_HIGHCPU_64
            - N1_HIGHCPU_96
            - A2_HIGHGPU_1G
            - A2_HIGHGPU_2G
            - A2_HIGHGPU_4G
            - A2_HIGHGPU_8G
            - A2_MEGAGPU_16G
            - A2_ULTRAGPU_1G
            - A2_ULTRAGPU_2G
            - A2_ULTRAGPU_4G
            - A2_ULTRAGPU_8G
            - A3_HIGHGPU_8G
            - E2_STANDARD_2
            - E2_STANDARD_4
            - E2_STANDARD_8
            - E2_STANDARD_16
            - E2_STANDARD_32
            - E2_HIGHMEM_2
            - E2_HIGHMEM_4
            - E2_HIGHMEM_8
            - E2_HIGHMEM_16
            - E2_HIGHCPU_2
            - E2_HIGHCPU_4
            - E2_HIGHCPU_8
            - E2_HIGHCPU_16
            - E2_HIGHCPU_32
            - N2_STANDARD_2
            - N2_STANDARD_4
            - N2_STANDARD_8
            - N2_STANDARD_16
            - N2_STANDARD_32
            - N2_STANDARD_48
            - N2_STANDARD_64
            - N2_STANDARD_80
            - N2_STANDARD_96
            - N2_STANDARD_128
            - N2_HIGHMEM_2
            - N2_HIGHMEM_4
            - N2_HIGHMEM_8
            - N2_HIGHMEM_16
            - N2_HIGHMEM_32
            - N2_HIGHMEM_48
            - N2_HIGHMEM_64
            - N2_HIGHMEM_80
            - N2_HIGHMEM_96
            - N2_HIGHMEM_128
            - N2_HIGHCPU_2
            - N2_HIGHCPU_4
            - N2_HIGHCPU_8
            - N2_HIGHCPU_16
            - N2_HIGHCPU_32
            - N2_HIGHCPU_48
            - N2_HIGHCPU_64
            - N2_HIGHCPU_80
            - N2_HIGHCPU_96
            - N2D_STANDARD_2
            - N2D_STANDARD_4
            - N2D_STANDARD_8
            - N2D_STANDARD_16
            - N2D_STANDARD_32
            - N2D_STANDARD_48
            - N2D_STANDARD_64
            - N2D_STANDARD_80
            - N2D_STANDARD_96
            - N2D_STANDARD_128
            - N2D_STANDARD_224
            - N2D_HIGHMEM_2
            - N2D_HIGHMEM_4
            - N2D_HIGHMEM_8
            - N2D_HIGHMEM_16
            - N2D_HIGHMEM_32
            - N2D_HIGHMEM_48
            - N2D_HIGHMEM_64
            - N2D_HIGHMEM_80
            - N2D_HIGHMEM_96
            - N2D_HIGHCPU_2
            - N2D_HIGHCPU_4
            - N2D_HIGHCPU_8
            - N2D_HIGHCPU_16
            - N2D_HIGHCPU_32
            - N2D_HIGHCPU_48
            - N2D_HIGHCPU_64
            - N2D_HIGHCPU_80
            - N2D_HIGHCPU_96
            - N2D_HIGHCPU_128
            - N2D_HIGHCPU_224
            - C2_STANDARD_4
            - C2_STANDARD_8
            - C2_STANDARD_16
            - C2_STANDARD_30
            - C2_STANDARD_60
            - C2D_STANDARD_2
            - C2D_STANDARD_4
            - C2D_STANDARD_8
            - C2D_STANDARD_16
            - C2D_STANDARD_32
            - C2D_STANDARD_56
            - C2D_STANDARD_112
            - C2D_HIGHCPU_2
            - C2D_HIGHCPU_4
            - C2D_HIGHCPU_8
            - C2D_HIGHCPU_16
            - C2D_HIGHCPU_32
            - C2D_HIGHCPU_56
            - C2D_HIGHCPU_112
            - C2D_HIGHMEM_2
            - C2D_HIGHMEM_4
            - C2D_HIGHMEM_8
            - C2D_HIGHMEM_16
            - C2D_HIGHMEM_32
            - C2D_HIGHMEM_56
            - C2D_HIGHMEM_112
            - G2_STANDARD_4
            - G2_STANDARD_8
            - G2_STANDARD_12
            - G2_STANDARD_16
            - G2_STANDARD_24
            - G2_STANDARD_32
            - G2_STANDARD_48
            - G2_STANDARD_96
            - C3_STANDARD_4
            - C3_STANDARD_8
            - C3_STANDARD_22
            - C3_STANDARD_44
            - C3_STANDARD_88
            - C3_STANDARD_176
            - C3_HIGHCPU_4
            - C3_HIGHCPU_8
            - C3_HIGHCPU_22
            - C3_HIGHCPU_44
            - C3_HIGHCPU_88
            - C3_HIGHCPU_176
            - C3_HIGHMEM_4
            - C3_HIGHMEM_8
            - C3_HIGHMEM_22
            - C3_HIGHMEM_44
            - C3_HIGHMEM_88
            - C3_HIGHMEM_176
          type: string
        trackingLabels:
          additionalProperties:
            type: string
          description: "Billing tracking labels. They do not contain any user data but only the labels set by Vertex Core Infra itself. Tracking labels' keys are defined with special format: goog-[\\p{Ll}\\p{N}]+ E.g. \"key\": \"goog-k8s-cluster-name\",\"value\": \"us-east1-b4rk\""
          type: object
      type: object
    InfraUsage:
      description: "Infra Usage of billing metrics. Next ID: 6"
      properties:
        cpuMetrics:
          description: Aggregated core metrics since requested start_time.
          items:
            $ref: "#/components/schemas/CpuMetric"
          type: array
        diskMetrics:
          description: Aggregated persistent disk metrics since requested start_time.
          items:
            $ref: "#/components/schemas/DiskMetric"
          type: array
        gpuMetrics:
          description: Aggregated gpu metrics since requested start_time.
          items:
            $ref: "#/components/schemas/GpuMetric"
          type: array
        ramMetrics:
          description: Aggregated ram metrics since requested start_time.
          items:
            $ref: "#/components/schemas/RamMetric"
          type: array
        tpuMetrics:
          description: Aggregated tpu metrics since requested start_time.
          items:
            $ref: "#/components/schemas/TpuMetric"
          type: array
      type: object
    ModerateTextRequest:
      description: The document moderation request message.
      properties:
        document:
          $ref: "#/components/schemas/Document"
          description: Required. Input document.
      type: object
    ModerateTextResponse:
      description: The document moderation response message.
      properties:
        moderationCategories:
          description: Harmful and sensitive categories representing the input document.
          items:
            $ref: "#/components/schemas/ClassificationCategory"
          type: array
      type: object
    PartOfSpeech:
      description: Represents part of speech information for a token. Parts of speech are as defined in http://www.lrec-conf.org/proceedings/lrec2012/pdf/274_Paper.pdf
      properties:
        aspect:
          description: The grammatical aspect.
          enum:
            - ASPECT_UNKNOWN
            - PERFECTIVE
            - IMPERFECTIVE
            - PROGRESSIVE
          type: string
        case:
          description: The grammatical case.
          enum:
            - CASE_UNKNOWN
            - ACCUSATIVE
            - ADVERBIAL
            - COMPLEMENTIVE
            - DATIVE
            - GENITIVE
            - INSTRUMENTAL
            - LOCATIVE
            - NOMINATIVE
            - OBLIQUE
            - PARTITIVE
            - PREPOSITIONAL
            - REFLEXIVE_CASE
            - RELATIVE_CASE
            - VOCATIVE
          type: string
        form:
          description: The grammatical form.
          enum:
            - FORM_UNKNOWN
            - ADNOMIAL
            - AUXILIARY
            - COMPLEMENTIZER
            - FINAL_ENDING
            - GERUND
            - REALIS
            - IRREALIS
            - SHORT
            - LONG
            - ORDER
            - SPECIFIC
          type: string
        gender:
          description: The grammatical gender.
          enum:
            - GENDER_UNKNOWN
            - FEMININE
            - MASCULINE
            - NEUTER
          type: string
        mood:
          description: The grammatical mood.
          enum:
            - MOOD_UNKNOWN
            - CONDITIONAL_MOOD
            - IMPERATIVE
            - INDICATIVE
            - INTERROGATIVE
            - JUSSIVE
            - SUBJUNCTIVE
          type: string
        number:
          description: The grammatical number.
          enum:
            - NUMBER_UNKNOWN
            - SINGULAR
            - PLURAL
            - DUAL
          type: string
        person:
          description: The grammatical person.
          enum:
            - PERSON_UNKNOWN
            - FIRST
            - SECOND
            - THIRD
            - REFLEXIVE_PERSON
          type: string
        proper:
          description: The grammatical properness.
          enum:
            - PROPER_UNKNOWN
            - PROPER
            - NOT_PROPER
          type: string
        reciprocity:
          description: The grammatical reciprocity.
          enum:
            - RECIPROCITY_UNKNOWN
            - RECIPROCAL
            - NON_RECIPROCAL
          type: string
        tag:
          description: The part of speech tag.
          enum:
            - UNKNOWN
            - ADJ
            - ADP
            - ADV
            - CONJ
            - DET
            - NOUN
            - NUM
            - PRON
            - PRT
            - PUNCT
            - VERB
            - X
            - AFFIX
          type: string
        tense:
          description: The grammatical tense.
          enum:
            - TENSE_UNKNOWN
            - CONDITIONAL_TENSE
            - FUTURE
            - PAST
            - PRESENT
            - IMPERFECT
            - PLUPERFECT
          type: string
        voice:
          description: The grammatical voice.
          enum:
            - VOICE_UNKNOWN
            - ACTIVE
            - CAUSATIVE
            - PASSIVE
          type: string
      type: object
    RamMetric:
      properties:
        gibSec:
          description: Required. VM memory in Gigabyte second, e.g. 3600. Using int64 type to match billing metrics definition.
          format: int64
          type: string
        machineSpec:
          description: Required. Machine spec, e.g. N1_STANDARD_4.
          enum:
            - UNKNOWN_MACHINE_SPEC
            - N1_STANDARD_2
            - N1_STANDARD_4
            - N1_STANDARD_8
            - N1_STANDARD_16
            - N1_STANDARD_32
            - N1_STANDARD_64
            - N1_STANDARD_96
            - N1_HIGHMEM_2
            - N1_HIGHMEM_4
            - N1_HIGHMEM_8
            - N1_HIGHMEM_16
            - N1_HIGHMEM_32
            - N1_HIGHMEM_64
            - N1_HIGHMEM_96
            - N1_HIGHCPU_2
            - N1_HIGHCPU_4
            - N1_HIGHCPU_8
            - N1_HIGHCPU_16
            - N1_HIGHCPU_32
            - N1_HIGHCPU_64
            - N1_HIGHCPU_96
            - A2_HIGHGPU_1G
            - A2_HIGHGPU_2G
            - A2_HIGHGPU_4G
            - A2_HIGHGPU_8G
            - A2_MEGAGPU_16G
            - A2_ULTRAGPU_1G
            - A2_ULTRAGPU_2G
            - A2_ULTRAGPU_4G
            - A2_ULTRAGPU_8G
            - A3_HIGHGPU_8G
            - E2_STANDARD_2
            - E2_STANDARD_4
            - E2_STANDARD_8
            - E2_STANDARD_16
            - E2_STANDARD_32
            - E2_HIGHMEM_2
            - E2_HIGHMEM_4
            - E2_HIGHMEM_8
            - E2_HIGHMEM_16
            - E2_HIGHCPU_2
            - E2_HIGHCPU_4
            - E2_HIGHCPU_8
            - E2_HIGHCPU_16
            - E2_HIGHCPU_32
            - N2_STANDARD_2
            - N2_STANDARD_4
            - N2_STANDARD_8
            - N2_STANDARD_16
            - N2_STANDARD_32
            - N2_STANDARD_48
            - N2_STANDARD_64
            - N2_STANDARD_80
            - N2_STANDARD_96
            - N2_STANDARD_128
            - N2_HIGHMEM_2
            - N2_HIGHMEM_4
            - N2_HIGHMEM_8
            - N2_HIGHMEM_16
            - N2_HIGHMEM_32
            - N2_HIGHMEM_48
            - N2_HIGHMEM_64
            - N2_HIGHMEM_80
            - N2_HIGHMEM_96
            - N2_HIGHMEM_128
            - N2_HIGHCPU_2
            - N2_HIGHCPU_4
            - N2_HIGHCPU_8
            - N2_HIGHCPU_16
            - N2_HIGHCPU_32
            - N2_HIGHCPU_48
            - N2_HIGHCPU_64
            - N2_HIGHCPU_80
            - N2_HIGHCPU_96
            - N2D_STANDARD_2
            - N2D_STANDARD_4
            - N2D_STANDARD_8
            - N2D_STANDARD_16
            - N2D_STANDARD_32
            - N2D_STANDARD_48
            - N2D_STANDARD_64
            - N2D_STANDARD_80
            - N2D_STANDARD_96
            - N2D_STANDARD_128
            - N2D_STANDARD_224
            - N2D_HIGHMEM_2
            - N2D_HIGHMEM_4
            - N2D_HIGHMEM_8
            - N2D_HIGHMEM_16
            - N2D_HIGHMEM_32
            - N2D_HIGHMEM_48
            - N2D_HIGHMEM_64
            - N2D_HIGHMEM_80
            - N2D_HIGHMEM_96
            - N2D_HIGHCPU_2
            - N2D_HIGHCPU_4
            - N2D_HIGHCPU_8
            - N2D_HIGHCPU_16
            - N2D_HIGHCPU_32
            - N2D_HIGHCPU_48
            - N2D_HIGHCPU_64
            - N2D_HIGHCPU_80
            - N2D_HIGHCPU_96
            - N2D_HIGHCPU_128
            - N2D_HIGHCPU_224
            - C2_STANDARD_4
            - C2_STANDARD_8
            - C2_STANDARD_16
            - C2_STANDARD_30
            - C2_STANDARD_60
            - C2D_STANDARD_2
            - C2D_STANDARD_4
            - C2D_STANDARD_8
            - C2D_STANDARD_16
            - C2D_STANDARD_32
            - C2D_STANDARD_56
            - C2D_STANDARD_112
            - C2D_HIGHCPU_2
            - C2D_HIGHCPU_4
            - C2D_HIGHCPU_8
            - C2D_HIGHCPU_16
            - C2D_HIGHCPU_32
            - C2D_HIGHCPU_56
            - C2D_HIGHCPU_112
            - C2D_HIGHMEM_2
            - C2D_HIGHMEM_4
            - C2D_HIGHMEM_8
            - C2D_HIGHMEM_16
            - C2D_HIGHMEM_32
            - C2D_HIGHMEM_56
            - C2D_HIGHMEM_112
            - G2_STANDARD_4
            - G2_STANDARD_8
            - G2_STANDARD_12
            - G2_STANDARD_16
            - G2_STANDARD_24
            - G2_STANDARD_32
            - G2_STANDARD_48
            - G2_STANDARD_96
            - C3_STANDARD_4
            - C3_STANDARD_8
            - C3_STANDARD_22
            - C3_STANDARD_44
            - C3_STANDARD_88
            - C3_STANDARD_176
            - C3_HIGHCPU_4
            - C3_HIGHCPU_8
            - C3_HIGHCPU_22
            - C3_HIGHCPU_44
            - C3_HIGHCPU_88
            - C3_HIGHCPU_176
            - C3_HIGHMEM_4
            - C3_HIGHMEM_8
            - C3_HIGHMEM_22
            - C3_HIGHMEM_44
            - C3_HIGHMEM_88
            - C3_HIGHMEM_176
          type: string
        memories:
          description: Required. VM memory in gb.
          format: double
          type: number
        ramType:
          description: Required. Type of ram.
          enum:
            - UNKNOWN_RAM_TYPE
            - A2
            - A3
            - C2
            - C2D
            - CUSTOM
            - E2
            - G2
            - C3
            - M2
            - M1
            - N1
            - N2_CUSTOM
            - N2
            - N2D
          type: string
        trackingLabels:
          additionalProperties:
            type: string
          description: "Billing tracking labels. They do not contain any user data but only the labels set by Vertex Core Infra itself. Tracking labels' keys are defined with special format: goog-[\\p{Ll}\\p{N}]+ E.g. \"key\": \"goog-k8s-cluster-name\",\"value\": \"us-east1-b4rk\""
          type: object
      type: object
    Sentence:
      description: Represents a sentence in the input document.
      properties:
        sentiment:
          $ref: "#/components/schemas/Sentiment"
          description: For calls to AnalyzeSentiment or if AnnotateTextRequest.Features.extract_document_sentiment is set to true, this field will contain the sentiment for the sentence.
        text:
          $ref: "#/components/schemas/TextSpan"
          description: The sentence text.
      type: object
    Sentiment:
      description: Represents the feeling associated with the entire text or entities in the text.
      properties:
        magnitude:
          description: A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment regardless of score (positive or negative).
          format: float
          type: number
        score:
          description: Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment).
          format: float
          type: number
      type: object
    Status:
      description: "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          format: int32
          type: integer
        details:
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
        message:
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
          type: string
      type: object
    TextSpan:
      description: Represents a text span in the input document.
      properties:
        beginOffset:
          description: The API calculates the beginning offset of the content in the original document according to the EncodingType specified in the API request.
          format: int32
          type: integer
        content:
          description: The content of the text span, which is a substring of the document.
          type: string
      type: object
    Token:
      description: Represents the smallest syntactic building block of the text.
      properties:
        dependencyEdge:
          $ref: "#/components/schemas/DependencyEdge"
          description: Dependency tree parse for this token.
        lemma:
          description: "[Lemma](https://en.wikipedia.org/wiki/Lemma_%28morphology%29) of the token."
          type: string
        partOfSpeech:
          $ref: "#/components/schemas/PartOfSpeech"
          description: Parts of speech tag for this token.
        text:
          $ref: "#/components/schemas/TextSpan"
          description: The token text.
      type: object
    TpuMetric:
      properties:
        tpuSec:
          description: Required. Seconds of TPU usage, e.g. 3600.
          format: int64
          type: string
        tpuType:
          description: Required. Type of TPU, e.g. TPU_V2, TPU_V3_POD.
          enum:
            - UNKNOWN_TPU_TYPE
            - TPU_V2_POD
            - TPU_V2
            - TPU_V3_POD
            - TPU_V3
            - TPU_V5_LITEPOD
          type: string
      type: object
    XPSArrayStats:
      description: The data statistics of a series of ARRAY values.
      properties:
        commonStats:
          $ref: "#/components/schemas/XPSCommonStats"
        memberStats:
          $ref: "#/components/schemas/XPSDataStats"
          description: Stats of all the values of all arrays, as if they were a single long series of data. The type depends on the element type of the array.
      type: object
    XPSBatchPredictResponse:
      properties:
        exampleSet:
          $ref: "#/components/schemas/XPSExampleSet"
          description: Examples for batch prediction result. Under full API implementation, results are stored in shared RecordIO of AnnotatedExample protobufs, the annotations field of which is populated by XPS backend.
      type: object
    XPSBoundingBoxMetricsEntry:
      description: Bounding box matching model metrics for a single intersection-over-union threshold and multiple label match confidence thresholds.
      properties:
        confidenceMetricsEntries:
          description: Metrics for each label-match confidence_threshold from 0.05,0.10,...,0.95,0.96,0.97,0.98,0.99.
          items:
            $ref: "#/components/schemas/XPSBoundingBoxMetricsEntryConfidenceMetricsEntry"
          type: array
        iouThreshold:
          description: The intersection-over-union threshold value used to compute this metrics entry.
          format: float
          type: number
        meanAveragePrecision:
          description: The mean average precision.
          format: float
          type: number
      type: object
    XPSBoundingBoxMetricsEntryConfidenceMetricsEntry:
      description: Metrics for a single confidence threshold.
      properties:
        confidenceThreshold:
          description: The confidence threshold value used to compute the metrics.
          format: float
          type: number
        f1Score:
          description: The harmonic mean of recall and precision.
          format: float
          type: number
        precision:
          description: Precision for the given confidence threshold.
          format: float
          type: number
        recall:
          description: Recall for the given confidence threshold.
          format: float
          type: number
      type: object
    XPSCategoryStats:
      description: The data statistics of a series of CATEGORY values.
      properties:
        commonStats:
          $ref: "#/components/schemas/XPSCommonStats"
        topCategoryStats:
          description: The statistics of the top 20 CATEGORY values, ordered by CategoryStats.SingleCategoryStats.count.
          items:
            $ref: "#/components/schemas/XPSCategoryStatsSingleCategoryStats"
          type: array
      type: object
    XPSCategoryStatsSingleCategoryStats:
      description: The statistics of a single CATEGORY value.
      properties:
        count:
          description: The number of occurrences of this value in the series.
          format: int64
          type: string
        value:
          description: The CATEGORY value.
          type: string
      type: object
    XPSClassificationEvaluationMetrics:
      description: "Model evaluation metrics for classification problems. It can be used for image and video classification. Next tag: 9."
      properties:
        auPrc:
          description: The Area under precision recall curve metric.
          format: float
          type: number
        auRoc:
          description: The Area Under Receiver Operating Characteristic curve metric. Micro-averaged for the overall evaluation.
          format: float
          type: number
        baseAuPrc:
          description: The Area under precision recall curve metric based on priors.
          format: float
          type: number
        confidenceMetricsEntries:
          description: Metrics that have confidence thresholds. Precision-recall curve can be derived from it.
          items:
            $ref: "#/components/schemas/XPSConfidenceMetricsEntry"
          type: array
        confusionMatrix:
          $ref: "#/components/schemas/XPSConfusionMatrix"
          description: Confusion matrix of the evaluation. Only set for MULTICLASS classification problems where number of annotation specs is no more than 10. Only set for model level evaluation, not for evaluation per label.
        evaluatedExamplesCount:
          description: The number of examples used for model evaluation.
          format: int32
          type: integer
        logLoss:
          description: The Log Loss metric.
          format: float
          type: number
      type: object
    XPSColorMap:
      description: Map from color to display name. Will only be used by Image Segmentation for uCAIP.
      properties:
        annotationSpecIdToken:
          description: Should be used during training.
          type: string
        color:
          $ref: "#/components/schemas/Color"
          deprecated: true
          description: This type is deprecated in favor of the IntColor below. This is because google.type.Color represent color has a float which semantically does not reflect discrete classes/categories concept. Moreover, to handle it well we need to have some tolerance when converting to a discretized color. As such, the recommendation is to have API surface still use google.type.Color while internally IntColor is used.
        displayName:
          description: Should be used during preprocessing.
          type: string
        intColor:
          $ref: "#/components/schemas/XPSColorMapIntColor"
      type: object
    XPSColorMapIntColor:
      description: RGB color and each channel is represented by an integer.
      properties:
        blue:
          description: The value should be in range of [0, 255].
          format: int32
          type: integer
        green:
          description: The value should be in range of [0, 255].
          format: int32
          type: integer
        red:
          description: The value should be in range of [0, 255].
          format: int32
          type: integer
      type: object
    XPSColumnSpec:
      properties:
        columnId:
          description: "The unique id of the column. When Preprocess, the Tables BE will popuate the order id of the column, which reflects the order of the column inside the table, i.e. 0 means the first column in the table, N-1 means the last column. AutoML BE will persist this order id in Spanner and set the order id here when calling RefreshTablesStats and Train. Note: it's different than the column_spec_id that is generated in AutoML BE."
          format: int32
          type: integer
        dataStats:
          $ref: "#/components/schemas/XPSDataStats"
          description: The data stats of the column. It's outputed in RefreshTablesStats and a required input for Train.
        dataType:
          $ref: "#/components/schemas/XPSDataType"
          description: The data type of the column. It's outputed in Preprocess rpc and a required input for RefreshTablesStats and Train.
        displayName:
          description: The display name of the column. It's outputed in Preprocess and a required input for RefreshTablesStats and Train.
          type: string
        forecastingMetadata:
          $ref: "#/components/schemas/XPSColumnSpecForecastingMetadata"
        topCorrelatedColumns:
          description: It's outputed in RefreshTablesStats, and a required input in Train.
          items:
            $ref: "#/components/schemas/XPSColumnSpecCorrelatedColumn"
          type: array
      type: object
    XPSColumnSpecCorrelatedColumn:
      description: Identifies a table's column, and its correlation with the column this ColumnSpec describes.
      properties:
        columnId:
          format: int32
          type: integer
        correlationStats:
          $ref: "#/components/schemas/XPSCorrelationStats"
      type: object
    XPSColumnSpecForecastingMetadata:
      description: "=========================================================================== # The fields below are used exclusively for Forecasting."
      properties:
        columnType:
          description: The type of the column for FORECASTING model training purposes.
          enum:
            - COLUMN_TYPE_UNSPECIFIED
            - KEY
            - KEY_METADATA
            - TIME_SERIES_AVAILABLE_PAST_ONLY
            - TIME_SERIES_AVAILABLE_PAST_AND_FUTURE
          type: string
      type: object
    XPSCommonStats:
      description: Common statistics for a column with a specified data type.
      properties:
        distinctValueCount:
          format: int64
          type: string
        nullValueCount:
          format: int64
          type: string
        validValueCount:
          format: int64
          type: string
      type: object
    XPSConfidenceMetricsEntry:
      description: "ConfidenceMetricsEntry includes generic precision, recall, f1 score etc. Next tag: 16."
      properties:
        confidenceThreshold:
          description: Metrics are computed with an assumption that the model never return predictions with score lower than this value.
          format: float
          type: number
        f1Score:
          description: The harmonic mean of recall and precision.
          format: float
          type: number
        f1ScoreAt1:
          description: The harmonic mean of recall_at1 and precision_at1.
          format: float
          type: number
        falseNegativeCount:
          description: The number of ground truth labels that are not matched by a model created label.
          format: int64
          type: string
        falsePositiveCount:
          description: The number of model created labels that do not match a ground truth label.
          format: int64
          type: string
        falsePositiveRate:
          description: False Positive Rate for the given confidence threshold.
          format: float
          type: number
        falsePositiveRateAt1:
          description: The False Positive Rate when only considering the label that has the highest prediction score and not below the confidence threshold for each example.
          format: float
          type: number
        positionThreshold:
          description: Metrics are computed with an assumption that the model always returns at most this many predictions (ordered by their score, descendingly), but they all still need to meet the confidence_threshold.
          format: int32
          type: integer
        precision:
          description: Precision for the given confidence threshold.
          format: float
          type: number
        precisionAt1:
          description: The precision when only considering the label that has the highest prediction score and not below the confidence threshold for each example.
          format: float
          type: number
        recall:
          description: Recall (true positive rate) for the given confidence threshold.
          format: float
          type: number
        recallAt1:
          description: The recall (true positive rate) when only considering the label that has the highest prediction score and not below the confidence threshold for each example.
          format: float
          type: number
        trueNegativeCount:
          description: The number of labels that were not created by the model, but if they would, they would not match a ground truth label.
          format: int64
          type: string
        truePositiveCount:
          description: The number of model created labels that match a ground truth label.
          format: int64
          type: string
      type: object
    XPSConfusionMatrix:
      description: Confusion matrix of the model running the classification.
      properties:
        annotationSpecIdToken:
          description: For the following three repeated fields, only one is intended to be set. annotation_spec_id_token is preferable to be set. ID tokens of the annotation specs used in the confusion matrix.
          items:
            type: string
          type: array
        category:
          description: "Category (mainly for segmentation). Set only for image segmentation models. Note: uCAIP Image Segmentation should use annotation_spec_id_token."
          items:
            format: int32
            type: integer
          type: array
        row:
          description: Rows in the confusion matrix. The number of rows is equal to the size of `annotation_spec_id_token`. `row[i].value[j]` is the number of examples that have ground truth of the `annotation_spec_id_token[i]` and are predicted as `annotation_spec_id_token[j]` by the model being evaluated.
          items:
            $ref: "#/components/schemas/XPSConfusionMatrixRow"
          type: array
        sentimentLabel:
          description: Sentiment labels used in the confusion matrix. Set only for text sentiment models. For AutoML Text Revamp, use `annotation_spec_id_token` instead and leave this field empty.
          items:
            format: int32
            type: integer
          type: array
      type: object
    XPSConfusionMatrixRow:
      description: A row in the confusion matrix.
      properties:
        count:
          description: "Same as above except intended to represent other counts (for e.g. for segmentation this is pixel count). NOTE(params): Only example_count or count is set (oneoff does not support repeated fields unless they are embedded inside another message)."
          items:
            format: int64
            type: string
          type: array
        exampleCount:
          description: Value of the specific cell in the confusion matrix. The number of values each row has (i.e. the length of the row) is equal to the length of the annotation_spec_id_token field.
          items:
            format: int32
            type: integer
          type: array
      type: object
    XPSCoreMlFormat:
      description: A model format used for iOS mobile devices.
      properties: {}
      type: object
    XPSCorrelationStats:
      description: A correlation statistics between two series of DataType values. The series may have differing DataType-s, but within a single series the DataType must be the same.
      properties:
        cramersV:
          description: The correlation value using the Cramer's V measure.
          format: double
          type: number
      type: object
    XPSDataErrors:
      description: Different types of errors and the stats associatesd with each error.
      properties:
        count:
          description: Number of records having errors associated with the enum.
          format: int32
          type: integer
        errorType:
          description: Type of the error.
          enum:
            - ERROR_TYPE_UNSPECIFIED
            - UNSUPPORTED_AUDIO_FORMAT
            - FILE_EXTENSION_MISMATCH_WITH_AUDIO_FORMAT
            - FILE_TOO_LARGE
            - MISSING_TRANSCRIPTION
          type: string
      type: object
    XPSDataStats:
      description: The data statistics of a series of values that share the same DataType.
      properties:
        arrayStats:
          $ref: "#/components/schemas/XPSArrayStats"
          description: The statistics for ARRAY DataType.
        categoryStats:
          $ref: "#/components/schemas/XPSCategoryStats"
          description: The statistics for CATEGORY DataType.
        distinctValueCount:
          description: The number of distinct values.
          format: int64
          type: string
        float64Stats:
          $ref: "#/components/schemas/XPSFloat64Stats"
          description: The statistics for FLOAT64 DataType.
        nullValueCount:
          description: The number of values that are null.
          format: int64
          type: string
        stringStats:
          $ref: "#/components/schemas/XPSStringStats"
          description: The statistics for STRING DataType.
        structStats:
          $ref: "#/components/schemas/XPSStructStats"
          description: The statistics for STRUCT DataType.
        timestampStats:
          $ref: "#/components/schemas/XPSTimestampStats"
          description: The statistics for TIMESTAMP DataType.
        validValueCount:
          description: The number of values that are valid.
          format: int64
          type: string
      type: object
    XPSDataType:
      description: Indicated the type of data that can be stored in a structured data entity (e.g. a table).
      properties:
        compatibleDataTypes:
          description: The highly compatible data types to this data type.
          items:
            $ref: "#/components/schemas/XPSDataType"
          type: array
        listElementType:
          $ref: "#/components/schemas/XPSDataType"
          description: If type_code == ARRAY, then `list_element_type` is the type of the elements.
        nullable:
          description: If true, this DataType can also be `null`.
          type: boolean
        structType:
          $ref: "#/components/schemas/XPSStructType"
          description: If type_code == STRUCT, then `struct_type` provides type information for the struct's fields.
        timeFormat:
          description: If type_code == TIMESTAMP then `time_format` provides the format in which that time field is expressed. The time_format must be written in `strftime` syntax. If time_format is not set, then the default format as described on the field is used.
          type: string
        typeCode:
          description: Required. The TypeCode for this type.
          enum:
            - TYPE_CODE_UNSPECIFIED
            - FLOAT64
            - TIMESTAMP
            - STRING
            - ARRAY
            - STRUCT
            - CATEGORY
          type: string
      type: object
    XPSDockerFormat:
      description: A model format used for Docker containers. Use the params field to customize the container. The container is verified to work correctly on ubuntu 16.04 operating system.
      properties:
        cpuArchitecture:
          description: Optional. Additional cpu information describing the requirements for the to be exported model files.
          enum:
            - CPU_ARCHITECTURE_UNSPECIFIED
            - CPU_ARCHITECTURE_X86_64
          type: string
        gpuArchitecture:
          description: Optional. Additional gpu information describing the requirements for the to be exported model files.
          enum:
            - GPU_ARCHITECTURE_UNSPECIFIED
            - GPU_ARCHITECTURE_NVIDIA
          type: string
      type: object
    XPSEdgeTpuTfLiteFormat:
      description: A model format used for [Edge TPU](https://cloud.google.com/edge-tpu/) devices.
      properties: {}
      type: object
    XPSEvaluationMetrics:
      description: "Contains xPS-specific model evaluation metrics either for a single annotation spec (label), or for the model overall. Next tag: 18."
      properties:
        annotationSpecIdToken:
          description: The annotation_spec for which this evaluation metrics instance had been created. Empty iff this is an overall model evaluation (like Tables evaluation metrics), i.e. aggregated across all labels. The value comes from the input annotations in AnnotatedExample. For MVP product or for text sentiment models where annotation_spec_id_token is not available, set label instead.
          type: string
        category:
          description: "The integer category label for which this evaluation metric instance had been created. Valid categories are 0 or higher. Overall model evaluation should set this to negative values (rather than implicit zero). Only used for Image Segmentation (prefer to set annotation_spec_id_token instead). Note: uCAIP Image Segmentation should use annotation_spec_id_token."
          format: int32
          type: integer
        evaluatedExampleCount:
          description: The number of examples used to create this evaluation metrics instance.
          format: int32
          type: integer
        imageClassificationEvalMetrics:
          $ref: "#/components/schemas/XPSClassificationEvaluationMetrics"
        imageObjectDetectionEvalMetrics:
          $ref: "#/components/schemas/XPSImageObjectDetectionEvaluationMetrics"
        imageSegmentationEvalMetrics:
          $ref: "#/components/schemas/XPSImageSegmentationEvaluationMetrics"
        label:
          description: The label for which this evaluation metrics instance had been created. Empty iff this is an overall model evaluation (like Tables evaluation metrics), i.e. aggregated across all labels. The label maps to AnnotationSpec.display_name in Public API protos. Only used by MVP implementation and text sentiment FULL implementation.
          type: string
        regressionEvalMetrics:
          $ref: "#/components/schemas/XPSRegressionEvaluationMetrics"
        tablesClassificationEvalMetrics:
          $ref: "#/components/schemas/XPSClassificationEvaluationMetrics"
        tablesEvalMetrics:
          $ref: "#/components/schemas/XPSTablesEvaluationMetrics"
        textClassificationEvalMetrics:
          $ref: "#/components/schemas/XPSClassificationEvaluationMetrics"
        textExtractionEvalMetrics:
          $ref: "#/components/schemas/XPSTextExtractionEvaluationMetrics"
        textSentimentEvalMetrics:
          $ref: "#/components/schemas/XPSTextSentimentEvaluationMetrics"
        translationEvalMetrics:
          $ref: "#/components/schemas/XPSTranslationEvaluationMetrics"
        videoActionRecognitionEvalMetrics:
          $ref: "#/components/schemas/XPSVideoActionRecognitionEvaluationMetrics"
        videoClassificationEvalMetrics:
          $ref: "#/components/schemas/XPSClassificationEvaluationMetrics"
        videoObjectTrackingEvalMetrics:
          $ref: "#/components/schemas/XPSVideoObjectTrackingEvaluationMetrics"
      type: object
    XPSEvaluationMetricsSet:
      description: Specifies location of model evaluation metrics.
      properties:
        evaluationMetrics:
          description: Inline EvaluationMetrics - should be relatively small. For passing large quantities of exhaustive metrics, use file_spec.
          items:
            $ref: "#/components/schemas/XPSEvaluationMetrics"
          type: array
        fileSpec:
          $ref: "#/components/schemas/XPSFileSpec"
          description: File spec containing evaluation metrics of a model, must point to RecordIO file(s) of intelligence.cloud.automl.xps.EvaluationMetrics messages.
        numEvaluationMetrics:
          description: Number of the evaluation metrics (usually one per label plus overall).
          format: int64
          type: string
      type: object
    XPSExampleSet:
      description: Set of examples or input sources.
      properties:
        fileSpec:
          $ref: "#/components/schemas/XPSFileSpec"
          description: File spec of the examples or input sources.
        fingerprint:
          description: Fingerprint of the example set.
          format: int64
          type: string
        numExamples:
          description: Number of examples.
          format: int64
          type: string
        numInputSources:
          description: Number of input sources.
          format: int64
          type: string
      type: object
    XPSExportModelOutputConfig:
      properties:
        coreMlFormat:
          $ref: "#/components/schemas/XPSCoreMlFormat"
        dockerFormat:
          $ref: "#/components/schemas/XPSDockerFormat"
        edgeTpuTfLiteFormat:
          $ref: "#/components/schemas/XPSEdgeTpuTfLiteFormat"
        exportFirebaseAuxiliaryInfo:
          description: "For any model and format: If true, will additionally export FirebaseExportedModelInfo in a firebase.txt file."
          type: boolean
        outputGcrUri:
          description: The Google Contained Registry (GCR) path the exported files to be pushed to. This location is set if the exported format is DOCKDER.
          type: string
        outputGcsUri:
          description: "The Google Cloud Storage (GCS) directory where XPS will output the exported models and related files. Format: gs://bucket/directory"
          type: string
        tfJsFormat:
          $ref: "#/components/schemas/XPSTfJsFormat"
        tfLiteFormat:
          $ref: "#/components/schemas/XPSTfLiteFormat"
        tfSavedModelFormat:
          $ref: "#/components/schemas/XPSTfSavedModelFormat"
      type: object
    XPSFileSpec:
      description: Spec of input and output files, on external file systems (CNS, GCS, etc).
      properties:
        directoryPath:
          deprecated: true
          description: Deprecated. Use file_spec.
          type: string
        fileFormat:
          enum:
            - FILE_FORMAT_UNKNOWN
            - FILE_FORMAT_SSTABLE
            - FILE_FORMAT_TRANSLATION_RKV
            - FILE_FORMAT_RECORDIO
            - FILE_FORMAT_RAW_CSV
            - FILE_FORMAT_RAW_CAPACITOR
          type: string
          x-enumDeprecated:
            - false
            - true
            - false
            - false
            - false
            - false
        fileSpec:
          description: 'Single file path, or file pattern of format "/path/to/file@shard_count". E.g. /cns/cell-d/somewhere/file@2 is expanded to two files: /cns/cell-d/somewhere/file-00000-of-00002 and /cns/cell-d/somewhere/file-00001-of-00002.'
          type: string
        singleFilePath:
          deprecated: true
          description: Deprecated. Use file_spec.
          type: string
      type: object
    XPSFloat64Stats:
      description: The data statistics of a series of FLOAT64 values.
      properties:
        commonStats:
          $ref: "#/components/schemas/XPSCommonStats"
        histogramBuckets:
          description: Histogram buckets of the data series. Sorted by the min value of the bucket, ascendingly, and the number of the buckets is dynamically generated. The buckets are non-overlapping and completely cover whole FLOAT64 range with min of first bucket being `"-Infinity"`, and max of the last one being `"Infinity"`.
          items:
            $ref: "#/components/schemas/XPSFloat64StatsHistogramBucket"
          type: array
        mean:
          description: The mean of the series.
          format: double
          type: number
        quantiles:
          description: Ordered from 0 to k k-quantile values of the data series of n values. The value at index i is, approximately, the i*n/k-th smallest value in the series; for i = 0 and i = k these are, respectively, the min and max values.
          items:
            format: double
            type: number
          type: array
        standardDeviation:
          description: The standard deviation of the series.
          format: double
          type: number
      type: object
    XPSFloat64StatsHistogramBucket:
      description: A bucket of a histogram.
      properties:
        count:
          description: The number of data values that are in the bucket, i.e. are between min and max values.
          format: int64
          type: string
        max:
          description: The maximum value of the bucket, exclusive unless max = `"Infinity"`, in which case it's inclusive.
          format: double
          type: number
        min:
          description: The minimum value of the bucket, inclusive.
          format: double
          type: number
      type: object
    XPSImageClassificationTrainResponse:
      properties:
        classCount:
          description: Total number of classes.
          format: int64
          type: string
        exportModelSpec:
          $ref: "#/components/schemas/XPSImageExportModelSpec"
          description: Information of downloadable models that are pre-generated as part of training flow and will be persisted in AutoMl backend. Populated for AutoMl requests.
        modelArtifactSpec:
          $ref: "#/components/schemas/XPSImageModelArtifactSpec"
          description: "## The fields below are only populated under uCAIP request scope."
        modelServingSpec:
          $ref: "#/components/schemas/XPSImageModelServingSpec"
        stopReason:
          description: Stop reason for training job, e.g. 'TRAIN_BUDGET_REACHED', 'MODEL_CONVERGED', 'MODEL_EARLY_STOPPED'.
          enum:
            - TRAIN_STOP_REASON_UNSPECIFIED
            - TRAIN_STOP_REASON_BUDGET_REACHED
            - TRAIN_STOP_REASON_MODEL_CONVERGED
            - TRAIN_STOP_REASON_MODEL_EARLY_STOPPED
          type: string
        trainCostInNodeTime:
          description: The actual cost to create this model. - For edge type model, the cost is expressed in node hour. - For cloud type model,the cost is expressed in compute hour. - Populated for models created before GA. To be deprecated after GA.
          format: google-duration
          type: string
        trainCostNodeSeconds:
          description: The actual training cost, expressed in node seconds. Populated for models trained in node time.
          format: int64
          type: string
      type: object
    XPSImageExportModelSpec:
      description: Information of downloadable models that are pre-generated as part of training flow and will be persisted in AutoMl backend. Upon receiving ExportModel request from user, AutoMl backend can serve the pre-generated models to user if exists (by copying the files from internal path to user provided location), otherwise, AutoMl backend will call xPS ExportModel API to generate the model on the fly with the requesting format.
      properties:
        exportModelOutputConfig:
          description: Contains the model format and internal location of the model files to be exported/downloaded. Use the GCS bucket name which is provided via TrainRequest.gcs_bucket_name to store the model files.
          items:
            $ref: "#/components/schemas/XPSExportModelOutputConfig"
          type: array
      type: object
    XPSImageModelArtifactSpec:
      description: Stores the locations and related metadata of the model artifacts. Populated for uCAIP requests only.
      properties:
        checkpointArtifact:
          $ref: "#/components/schemas/XPSModelArtifactItem"
          description: The Tensorflow checkpoint files. e.g. Used for resumable training.
        exportArtifact:
          description: The model binary files in different formats for model export.
          items:
            $ref: "#/components/schemas/XPSModelArtifactItem"
          type: array
        labelGcsUri:
          description: GCS uri of decoded labels file for model export 'dict.txt'.
          type: string
        servingArtifact:
          $ref: "#/components/schemas/XPSModelArtifactItem"
          description: The default model binary file used for serving (e.g. online predict, batch predict) via public Cloud AI Platform API.
        tfJsBinaryGcsPrefix:
          description: GCS uri prefix of Tensorflow JavaScript binary files 'groupX-shardXofX.bin' Deprecated.
          type: string
        tfLiteMetadataGcsUri:
          description: GCS uri of Tensorflow Lite metadata 'tflite_metadata.json'.
          type: string
      type: object
    XPSImageModelServingSpec:
      description: Serving specification for image models.
      properties:
        modelThroughputEstimation:
          description: Populate under uCAIP request scope.
          items:
            $ref: "#/components/schemas/XPSImageModelServingSpecModelThroughputEstimation"
          type: array
        nodeQps:
          description: An estimated value of how much traffic a node can serve. Populated for AutoMl request only.
          format: double
          type: number
        tfRuntimeVersion:
          description: "## The fields below are only populated under uCAIP request scope. https://cloud.google.com/ml-engine/docs/runtime-version-list"
          type: string
      type: object
    XPSImageModelServingSpecModelThroughputEstimation:
      properties:
        computeEngineAcceleratorType:
          enum:
            - UNSPECIFIED
            - NVIDIA_TESLA_K80
            - NVIDIA_TESLA_P100
            - NVIDIA_TESLA_V100
            - NVIDIA_TESLA_P4
            - NVIDIA_TESLA_T4
            - NVIDIA_TESLA_A100
            - NVIDIA_A100_80GB
            - NVIDIA_L4
            - NVIDIA_H100_80GB
            - TPU_V2
            - TPU_V3
            - TPU_V4_POD
            - TPU_V5_LITEPOD
          type: string
        latencyInMilliseconds:
          description: Estimated latency.
          format: double
          type: number
        nodeQps:
          description: The approximate qps a deployed node can serve.
          format: double
          type: number
        servomaticPartitionType:
          enum:
            - PARTITION_TYPE_UNSPECIFIED
            - PARTITION_ZERO
            - PARTITION_REDUCED_HOMING
            - PARTITION_JELLYFISH
            - PARTITION_CPU
            - PARTITION_CUSTOM_STORAGE_CPU
          type: string
      type: object
    XPSImageObjectDetectionEvaluationMetrics:
      description: Model evaluation metrics for image object detection problems. Evaluates prediction quality of labeled bounding boxes.
      properties:
        boundingBoxMeanAveragePrecision:
          description: "The single metric for bounding boxes evaluation: the mean_average_precision averaged over all bounding_box_metrics_entries."
          format: float
          type: number
        boundingBoxMetricsEntries:
          description: The bounding boxes match metrics for each Intersection-over-union threshold 0.05,0.10,...,0.95,0.96,0.97,0.98,0.99 and each label confidence threshold 0.05,0.10,...,0.95,0.96,0.97,0.98,0.99 pair.
          items:
            $ref: "#/components/schemas/XPSBoundingBoxMetricsEntry"
          type: array
        evaluatedBoundingBoxCount:
          description: The total number of bounding boxes (i.e. summed over all images) the ground truth used to create this evaluation had.
          format: int32
          type: integer
      type: object
    XPSImageObjectDetectionModelSpec:
      properties:
        classCount:
          description: Total number of classes.
          format: int64
          type: string
        exportModelSpec:
          $ref: "#/components/schemas/XPSImageExportModelSpec"
        maxBoundingBoxCount:
          description: Max number of bounding box.
          format: int64
          type: string
        modelArtifactSpec:
          $ref: "#/components/schemas/XPSImageModelArtifactSpec"
          description: "## The fields below are only populated under uCAIP request scope."
        modelServingSpec:
          $ref: "#/components/schemas/XPSImageModelServingSpec"
        stopReason:
          description: Stop reason for training job, e.g. 'TRAIN_BUDGET_REACHED', 'MODEL_CONVERGED'.
          enum:
            - TRAIN_STOP_REASON_UNSPECIFIED
            - TRAIN_STOP_REASON_BUDGET_REACHED
            - TRAIN_STOP_REASON_MODEL_CONVERGED
            - TRAIN_STOP_REASON_MODEL_EARLY_STOPPED
          type: string
        trainCostNodeSeconds:
          description: The actual train cost of creating this model, expressed in node seconds, i.e. 3,600 value in this field means 1 node hour.
          format: int64
          type: string
      type: object
    XPSImageSegmentationEvaluationMetrics:
      description: "Model evaluation metrics for image segmentation problems. Next tag: 4."
      properties:
        confidenceMetricsEntries:
          description: Metrics that have confidence thresholds. Precision-recall curve can be derived from it.
          items:
            $ref: "#/components/schemas/XPSImageSegmentationEvaluationMetricsConfidenceMetricsEntry"
          type: array
      type: object
    XPSImageSegmentationEvaluationMetricsConfidenceMetricsEntry:
      description: Metrics for a single confidence threshold.
      properties:
        confidenceThreshold:
          description: The confidence threshold value used to compute the metrics.
          format: float
          type: number
        confusionMatrix:
          $ref: "#/components/schemas/XPSConfusionMatrix"
          description: Confusion matrix of the per confidence_threshold evaluation. Pixel counts are set here. Only set for model level evaluation, not for evaluation per label.
        diceScoreCoefficient:
          description: "DSC or the F1 score: The harmonic mean of recall and precision."
          format: float
          type: number
        iouScore:
          description: IOU score.
          format: float
          type: number
        precision:
          description: Precision for the given confidence threshold.
          format: float
          type: number
        recall:
          description: Recall for the given confidence threshold.
          format: float
          type: number
      type: object
    XPSImageSegmentationTrainResponse:
      properties:
        colorMaps:
          description: Color map of the model.
          items:
            $ref: "#/components/schemas/XPSColorMap"
          type: array
        exportModelSpec:
          $ref: "#/components/schemas/XPSImageExportModelSpec"
          description: "NOTE: These fields are not used/needed in EAP but will be set later."
        modelArtifactSpec:
          $ref: "#/components/schemas/XPSImageModelArtifactSpec"
          description: "## The fields below are only populated under uCAIP request scope. Model artifact spec stores and model gcs pathes and related metadata"
        modelServingSpec:
          $ref: "#/components/schemas/XPSImageModelServingSpec"
        stopReason:
          description: Stop reason for training job, e.g. 'TRAIN_BUDGET_REACHED', 'MODEL_CONVERGED'.
          enum:
            - TRAIN_STOP_REASON_UNSPECIFIED
            - TRAIN_STOP_REASON_BUDGET_REACHED
            - TRAIN_STOP_REASON_MODEL_CONVERGED
            - TRAIN_STOP_REASON_MODEL_EARLY_STOPPED
          type: string
        trainCostNodeSeconds:
          description: The actual train cost of creating this model, expressed in node seconds, i.e. 3,600 value in this field means 1 node hour.
          format: int64
          type: string
      type: object
    XPSIntegratedGradientsAttribution:
      deprecated: true
      description: "An attribution method that computes the Aumann-Shapley value taking advantage of the model's fully differentiable structure. Refer to this paper for more details: https://arxiv.org/abs/1703.01365"
      properties:
        stepCount:
          description: The number of steps for approximating the path integral. A good value to start is 50 and gradually increase until the sum to diff property is within the desired error range. Valid range of its value is [1, 100], inclusively.
          format: int32
          type: integer
      type: object
    XPSMetricEntry:
      properties:
        argentumMetricId:
          description: For billing metrics that are using legacy sku's, set the legacy billing metric id here. This will be sent to Chemist as the "cloudbilling.googleapis.com/argentum_metric_id" label. Otherwise leave empty.
          type: string
        doubleValue:
          description: A double value.
          format: double
          type: number
        int64Value:
          description: A signed 64-bit integer value.
          format: int64
          type: string
        metricName:
          description: The metric name defined in the service configuration.
          type: string
        systemLabels:
          description: Billing system labels for this (metric, value) pair.
          items:
            $ref: "#/components/schemas/XPSMetricEntryLabel"
          type: array
      type: object
    XPSMetricEntryLabel:
      properties:
        labelName:
          description: The name of the label.
          type: string
        labelValue:
          description: The value of the label.
          type: string
      type: object
    XPSModelArtifactItem:
      description: A single model artifact item.
      properties:
        artifactFormat:
          description: The model artifact format.
          enum:
            - ARTIFACT_FORMAT_UNSPECIFIED
            - TF_CHECKPOINT
            - TF_SAVED_MODEL
            - TF_LITE
            - EDGE_TPU_TF_LITE
            - TF_JS
            - CORE_ML
          type: string
        gcsUri:
          description: The Google Cloud Storage (GCS) uri that stores the model binary files.
          type: string
      type: object
    XPSPreprocessResponse:
      description: "Next ID: 8"
      properties:
        outputExampleSet:
          $ref: "#/components/schemas/XPSExampleSet"
          description: Preprocessed examples, that are to be imported into AutoML storage. This should point to RecordIO file(s) of PreprocessedExample messages. The PreprocessedExample.mvp_training_data-s returned here are later verbatim passed to Train() call in TrainExample.mvp_training_data.
        speechPreprocessResp:
          $ref: "#/components/schemas/XPSSpeechPreprocessResponse"
        tablesPreprocessResponse:
          $ref: "#/components/schemas/XPSTablesPreprocessResponse"
        translationPreprocessResp:
          $ref: "#/components/schemas/XPSTranslationPreprocessResponse"
      type: object
    XPSRegressionEvaluationMetrics:
      description: Model evaluation metrics for regression problems. It can be used for Tables.
      properties:
        meanAbsoluteError:
          description: Mean Absolute Error (MAE).
          format: float
          type: number
        meanAbsolutePercentageError:
          description: Mean absolute percentage error. Only set if all ground truth values are positive.
          format: float
          type: number
        rSquared:
          description: R squared.
          format: float
          type: number
        regressionMetricsEntries:
          description: A list of actual versus predicted points for the model being evaluated.
          items:
            $ref: "#/components/schemas/XPSRegressionMetricsEntry"
          type: array
        rootMeanSquaredError:
          description: Root Mean Squared Error (RMSE).
          format: float
          type: number
        rootMeanSquaredLogError:
          description: Root mean squared log error.
          format: float
          type: number
      type: object
    XPSRegressionMetricsEntry:
      description: A pair of actual & observed values for the model being evaluated.
      properties:
        predictedValue:
          description: The observed value for a row in the dataset.
          format: float
          type: number
        trueValue:
          description: The actual target value for a row in the dataset.
          format: float
          type: number
      type: object
    XPSReportingMetrics:
      properties:
        effectiveTrainingDuration:
          deprecated: true
          description: The effective time training used. If set, this is used for quota management and billing. Deprecated. AutoML BE doesn't use this. Don't set.
          format: google-duration
          type: string
        metricEntries:
          description: One entry per metric name. The values must be aggregated per metric name.
          items:
            $ref: "#/components/schemas/XPSMetricEntry"
          type: array
      type: object
    XPSResponseExplanationMetadata:
      deprecated: true
      properties:
        inputs:
          additionalProperties:
            $ref: "#/components/schemas/XPSResponseExplanationMetadataInputMetadata"
          description: Metadata of the input.
          type: object
        outputs:
          additionalProperties:
            $ref: "#/components/schemas/XPSResponseExplanationMetadataOutputMetadata"
          description: Metadata of the output.
          type: object
      type: object
    XPSResponseExplanationMetadataInputMetadata:
      description: Metadata of the input of a feature.
      properties:
        inputTensorName:
          description: Name of the input tensor for this model. Only needed in train response.
          type: string
        modality:
          description: "Modality of the feature. Valid values are: numeric, image. Defaults to numeric."
          enum:
            - MODALITY_UNSPECIFIED
            - NUMERIC
            - IMAGE
            - CATEGORICAL
          type: string
        visualizationConfig:
          $ref: "#/components/schemas/XPSVisualization"
          description: Visualization configurations for image explanation.
      type: object
    XPSResponseExplanationMetadataOutputMetadata:
      description: Metadata of the prediction output to be explained.
      properties:
        outputTensorName:
          description: Name of the output tensor. Only needed in train response.
          type: string
      type: object
    XPSResponseExplanationParameters:
      deprecated: true
      properties:
        integratedGradientsAttribution:
          $ref: "#/components/schemas/XPSIntegratedGradientsAttribution"
          description: "An attribution method that computes Aumann-Shapley values taking advantage of the model's fully differentiable structure. Refer to this paper for more details: https://arxiv.org/abs/1703.01365"
        xraiAttribution:
          $ref: "#/components/schemas/XPSXraiAttribution"
          description: "An attribution method that redistributes Integrated Gradients attribution to segmented regions, taking advantage of the model's fully differentiable structure. Refer to this paper for more details: https://arxiv.org/abs/1906.02825 XRAI currently performs better on natural images, like a picture of a house or an animal. If the images are taken in artificial environments, like a lab or manufacturing line, or from diagnostic equipment, like x-rays or quality-control cameras, use Integrated Gradients instead."
      type: object
    XPSResponseExplanationSpec:
      deprecated: true
      description: Specification of Model explanation. Feature-based XAI in AutoML Vision ICN is deprecated, see b/288407203 for context.
      properties:
        explanationType:
          description: "Explanation type. For AutoML Image Classification models, possible values are: * `image-integrated-gradients` * `image-xrai`"
          type: string
        metadata:
          $ref: "#/components/schemas/XPSResponseExplanationMetadata"
          description: Metadata describing the Model's input and output for explanation.
        parameters:
          $ref: "#/components/schemas/XPSResponseExplanationParameters"
          description: Parameters that configure explaining of the Model's predictions.
      type: object
    XPSRow:
      properties:
        columnIds:
          description: "The ids of the columns. Note: The below `values` field must match order of this field, if this field is set."
          items:
            format: int32
            type: integer
          type: array
        values:
          description: The values of the row cells, given in the same order as the column_ids. If column_ids is not set, then in the same order as the input_feature_column_ids in TablesModelMetadata.
          items: {}
          type: array
      type: object
    XPSSpeechEvaluationMetrics:
      properties:
        subModelEvaluationMetrics:
          description: Evaluation metrics for all submodels contained in this model.
          items:
            $ref: "#/components/schemas/XPSSpeechEvaluationMetricsSubModelEvaluationMetric"
          type: array
      type: object
    XPSSpeechEvaluationMetricsSubModelEvaluationMetric:
      properties:
        biasingModelType:
          description: Type of the biasing model.
          enum:
            - BIASING_MODEL_TYPE_UNSPECIFIED
            - COMMAND_AND_SEARCH
            - PHONE_CALL
            - VIDEO
            - DEFAULT
          type: string
        isEnhancedModel:
          description: If true then it means we have an enhanced version of the biasing models.
          type: boolean
        numDeletions:
          format: int32
          type: integer
        numInsertions:
          format: int32
          type: integer
        numSubstitutions:
          format: int32
          type: integer
        numUtterances:
          description: Number of utterances used in the wer computation.
          format: int32
          type: integer
        numWords:
          description: Number of words over which the word error rate was computed.
          format: int32
          type: integer
        sentenceAccuracy:
          description: Below fields are used for debugging purposes
          format: double
          type: number
        wer:
          description: Word error rate (standard error metric used for speech recognition).
          format: double
          type: number
      type: object
    XPSSpeechModelSpec:
      properties:
        datasetId:
          description: Required for speech xps backend. Speech xps has to use dataset_id and model_id as the primary key in db so that speech API can query the db directly.
          format: int64
          type: string
        language:
          type: string
        subModelSpecs:
          description: Model specs for all submodels contained in this model.
          items:
            $ref: "#/components/schemas/XPSSpeechModelSpecSubModelSpec"
          type: array
      type: object
    XPSSpeechModelSpecSubModelSpec:
      properties:
        biasingModelType:
          description: Type of the biasing model.
          enum:
            - BIASING_MODEL_TYPE_UNSPECIFIED
            - COMMAND_AND_SEARCH
            - PHONE_CALL
            - VIDEO
            - DEFAULT
          type: string
        clientId:
          description: In S3, Recognition ClientContextId.client_id
          type: string
        contextId:
          description: In S3, Recognition ClientContextId.context_id
          type: string
        isEnhancedModel:
          description: If true then it means we have an enhanced version of the biasing models.
          type: boolean
      type: object
    XPSSpeechPreprocessResponse:
      properties:
        cnsTestDataPath:
          description: Location od shards of sstables (test data) of DataUtterance protos.
          type: string
        cnsTrainDataPath:
          description: Location of shards of sstables (training data) of DataUtterance protos.
          type: string
        prebuiltModelEvaluationMetrics:
          $ref: "#/components/schemas/XPSSpeechEvaluationMetrics"
          description: The metrics for prebuilt speech models. They are included here because there is no prebuilt speech models stored in the AutoML.
        speechPreprocessStats:
          $ref: "#/components/schemas/XPSSpeechPreprocessStats"
          description: Stats associated with the data.
      type: object
    XPSSpeechPreprocessStats:
      properties:
        dataErrors:
          description: Different types of data errors and the counts associated with them.
          items:
            $ref: "#/components/schemas/XPSDataErrors"
          type: array
        numHumanLabeledExamples:
          description: The number of rows marked HUMAN_LABELLED
          format: int32
          type: integer
        numLogsExamples:
          description: The number of samples found in the previously recorded logs data.
          format: int32
          type: integer
        numMachineTranscribedExamples:
          description: The number of rows marked as MACHINE_TRANSCRIBED
          format: int32
          type: integer
        testExamplesCount:
          description: The number of examples labelled as TEST by Speech xps server.
          format: int32
          type: integer
        testSentencesCount:
          description: The number of sentences in the test data set.
          format: int32
          type: integer
        testWordsCount:
          description: The number of words in the test data set.
          format: int32
          type: integer
        trainExamplesCount:
          description: The number of examples labeled as TRAIN by Speech xps server.
          format: int32
          type: integer
        trainSentencesCount:
          description: The number of sentences in the training data set.
          format: int32
          type: integer
        trainWordsCount:
          description: The number of words in the training data set.
          format: int32
          type: integer
      type: object
    XPSStringStats:
      description: The data statistics of a series of STRING values.
      properties:
        commonStats:
          $ref: "#/components/schemas/XPSCommonStats"
        topUnigramStats:
          description: The statistics of the top 20 unigrams, ordered by StringStats.UnigramStats.count.
          items:
            $ref: "#/components/schemas/XPSStringStatsUnigramStats"
          type: array
      type: object
    XPSStringStatsUnigramStats:
      description: The statistics of a unigram.
      properties:
        count:
          description: The number of occurrences of this unigram in the series.
          format: int64
          type: string
        value:
          description: The unigram.
          type: string
      type: object
    XPSStructStats:
      description: The data statistics of a series of STRUCT values.
      properties:
        commonStats:
          $ref: "#/components/schemas/XPSCommonStats"
        fieldStats:
          additionalProperties:
            $ref: "#/components/schemas/XPSDataStats"
          description: Map from a field name of the struct to data stats aggregated over series of all data in that field across all the structs.
          type: object
      type: object
    XPSStructType:
      description: "`StructType` defines the DataType-s of a STRUCT type."
      properties:
        fields:
          additionalProperties:
            $ref: "#/components/schemas/XPSDataType"
          description: Unordered map of struct field names to their data types.
          type: object
      type: object
    XPSTableSpec:
      properties:
        columnSpecs:
          additionalProperties:
            $ref: "#/components/schemas/XPSColumnSpec"
          description: Mapping from column id to column spec.
          type: object
        importedDataSizeInBytes:
          description: The total size of imported data of the table.
          format: int64
          type: string
        rowCount:
          description: The number of rows in the table.
          format: int64
          type: string
        timeColumnId:
          description: The id of the time column.
          format: int32
          type: integer
        validRowCount:
          description: The number of valid rows.
          format: int64
          type: string
      type: object
    XPSTablesClassificationMetrics:
      description: Metrics for Tables classification problems.
      properties:
        curveMetrics:
          description: Metrics building a curve.
          items:
            $ref: "#/components/schemas/XPSTablesClassificationMetricsCurveMetrics"
          type: array
      type: object
    XPSTablesClassificationMetricsCurveMetrics:
      description: Metrics curve data point for a single value.
      properties:
        aucPr:
          description: The area under the precision-recall curve.
          format: double
          type: number
        aucRoc:
          description: The area under receiver operating characteristic curve.
          format: double
          type: number
        confidenceMetricsEntries:
          description: Metrics that have confidence thresholds. Precision-recall curve and ROC curve can be derived from them.
          items:
            $ref: "#/components/schemas/XPSTablesConfidenceMetricsEntry"
          type: array
        logLoss:
          description: The Log loss metric.
          format: double
          type: number
        positionThreshold:
          description: The position threshold value used to compute the metrics.
          format: int32
          type: integer
        value:
          description: The CATEGORY row value (for ARRAY unnested) the curve metrics are for.
          type: string
      type: object
    XPSTablesConfidenceMetricsEntry:
      description: Metrics for a single confidence threshold.
      properties:
        confidenceThreshold:
          description: The confidence threshold value used to compute the metrics.
          format: double
          type: number
        f1Score:
          description: The harmonic mean of recall and precision. (2 * precision * recall) / (precision + recall)
          format: double
          type: number
        falseNegativeCount:
          description: False negative count.
          format: int64
          type: string
        falsePositiveCount:
          description: False positive count.
          format: int64
          type: string
        falsePositiveRate:
          description: "FPR = #false positives / (#false positives + #true negatives)"
          format: double
          type: number
        precision:
          description: "Precision = #true positives / (#true positives + #false positives)."
          format: double
          type: number
        recall:
          description: "Recall = #true positives / (#true positives + #false negatives)."
          format: double
          type: number
        trueNegativeCount:
          description: True negative count.
          format: int64
          type: string
        truePositiveCount:
          description: True positive count.
          format: int64
          type: string
        truePositiveRate:
          description: "TPR = #true positives / (#true positives + #false negatvies)"
          format: double
          type: number
      type: object
    XPSTablesDatasetMetadata:
      description: "Metadata for a dataset used for AutoML Tables. Next ID: 6"
      properties:
        mlUseColumnId:
          description: Id the column to split the table.
          format: int32
          type: integer
        primaryTableSpec:
          $ref: "#/components/schemas/XPSTableSpec"
          description: Primary table.
        targetColumnCorrelations:
          additionalProperties:
            $ref: "#/components/schemas/XPSCorrelationStats"
          description: "(the column id : its CorrelationStats with target column)."
          type: object
        targetColumnId:
          description: Id of the primary table column that should be used as the training label.
          format: int32
          type: integer
        weightColumnId:
          description: Id of the primary table column that should be used as the weight column.
          format: int32
          type: integer
      type: object
    XPSTablesEvaluationMetrics:
      properties:
        classificationMetrics:
          $ref: "#/components/schemas/XPSTablesClassificationMetrics"
          description: Classification metrics.
        regressionMetrics:
          $ref: "#/components/schemas/XPSTablesRegressionMetrics"
          description: Regression metrics.
      type: object
    XPSTablesModelColumnInfo:
      description: An information specific to given column and Tables Model, in context of the Model and the predictions created by it.
      properties:
        columnId:
          description: The ID of the column.
          format: int32
          type: integer
        featureImportance:
          description: "When given as part of a Model: Measurement of how much model predictions correctness on the TEST data depend on values in this column. A value between 0 and 1, higher means higher influence. These values are normalized - for all input feature columns of a given model they add to 1. When given back by Predict or Batch Predict: Measurement of how impactful for the prediction returned for the given row the value in this column was. Specifically, the feature importance specifies the marginal contribution that the feature made to the prediction score compared to the baseline score. These values are computed using the Sampled Shapley method."
          format: float
          type: number
      type: object
    XPSTablesModelStructure:
      description: A description of Tables model structure.
      properties:
        modelParameters:
          description: A list of models.
          items:
            $ref: "#/components/schemas/XPSTablesModelStructureModelParameters"
          type: array
      type: object
    XPSTablesModelStructureModelParameters:
      description: Model hyper-parameters for a model.
      properties:
        hyperparameters:
          items:
            $ref: "#/components/schemas/XPSTablesModelStructureModelParametersParameter"
          type: array
      type: object
    XPSTablesModelStructureModelParametersParameter:
      properties:
        floatValue:
          description: Float type parameter value.
          format: double
          type: number
        intValue:
          description: Integer type parameter value.
          format: int64
          type: string
        name:
          description: Parameter name.
          type: string
        stringValue:
          description: String type parameter value.
          type: string
      type: object
    XPSTablesPreprocessResponse:
      properties:
        tablesDatasetMetadata:
          $ref: "#/components/schemas/XPSTablesDatasetMetadata"
          description: The table/column id, column_name and the DataTypes of the columns will be populated.
      type: object
    XPSTablesRegressionMetrics:
      description: Metrics for Tables regression problems.
      properties:
        meanAbsoluteError:
          description: Mean absolute error.
          format: double
          type: number
        meanAbsolutePercentageError:
          description: Mean absolute percentage error, only set if all of the target column's values are positive.
          format: double
          type: number
        rSquared:
          description: R squared.
          format: double
          type: number
        regressionMetricsEntries:
          description: A list of actual versus predicted points for the model being evaluated.
          items:
            $ref: "#/components/schemas/XPSRegressionMetricsEntry"
          type: array
        rootMeanSquaredError:
          description: Root mean squared error.
          format: double
          type: number
        rootMeanSquaredLogError:
          description: Root mean squared log error.
          format: double
          type: number
      type: object
    XPSTablesTrainResponse:
      properties:
        modelStructure:
          $ref: "#/components/schemas/XPSTablesModelStructure"
        predictionSampleRows:
          description: Sample rows from the dataset this model was trained.
          items:
            $ref: "#/components/schemas/XPSRow"
          type: array
        tablesModelColumnInfo:
          description: Output only. Auxiliary information for each of the input_feature_column_specs, with respect to this particular model.
          items:
            $ref: "#/components/schemas/XPSTablesModelColumnInfo"
          type: array
        trainCostMilliNodeHours:
          description: The actual training cost of the model, expressed in milli node hours, i.e. 1,000 value in this field means 1 node hour. Guaranteed to not exceed the train budget.
          format: int64
          type: string
      type: object
    XPSTablesTrainingOperationMetadata:
      properties:
        createModelStage:
          description: Current stage of creating model.
          enum:
            - CREATE_MODEL_STAGE_UNSPECIFIED
            - DATA_PREPROCESSING
            - TRAINING
            - EVALUATING
            - MODEL_POST_PROCESSING
          type: string
        optimizationObjective:
          description: The optimization objective for model.
          type: string
        topTrials:
          description: This field is for training. When the operation is terminated successfully, AutoML Backend post this field to operation metadata in spanner. If the metadata has no trials returned, the training operation is supposed to be a failure.
          items:
            $ref: "#/components/schemas/XPSTuningTrial"
          type: array
        trainBudgetMilliNodeHours:
          description: Creating model budget.
          format: int64
          type: string
        trainingObjectivePoints:
          description: This field records the training objective value with respect to time, giving insight into how the model architecture search is performing as training time elapses.
          items:
            $ref: "#/components/schemas/XPSTrainingObjectivePoint"
          type: array
        trainingStartTime:
          description: Timestamp when training process starts.
          format: google-datetime
          type: string
      type: object
    XPSTextComponentModel:
      description: "Component model. Next ID: 10"
      properties:
        batchPredictionModelGcsUri:
          description: The Cloud Storage resource path to hold batch prediction model.
          type: string
        onlinePredictionModelGcsUri:
          description: The Cloud Storage resource path to hold online prediction model.
          type: string
        partition:
          description: The partition where the model is deployed. Populated by uCAIP BE as part of online PredictRequest.
          enum:
            - PARTITION_TYPE_UNSPECIFIED
            - PARTITION_ZERO
            - PARTITION_REDUCED_HOMING
            - PARTITION_JELLYFISH
            - PARTITION_CPU
            - PARTITION_CUSTOM_STORAGE_CPU
          type: string
        servingArtifact:
          $ref: "#/components/schemas/XPSModelArtifactItem"
          description: The default model binary file used for serving (e.g. online predict, batch predict) via public Cloud Ai Platform API.
        servoModelName:
          description: The name of servo model. Populated by uCAIP BE as part of online PredictRequest.
          type: string
        submodelName:
          description: The name of the trained NL submodel.
          type: string
        submodelType:
          description: The type of trained NL submodel
          enum:
            - TEXT_MODEL_TYPE_UNSPECIFIED
            - TEXT_MODEL_TYPE_DEFAULT
            - TEXT_MODEL_TYPE_META_ARCHITECT
            - TEXT_MODEL_TYPE_ATC
            - TEXT_MODEL_TYPE_CLARA2
            - TEXT_MODEL_TYPE_CHATBASE
            - TEXT_MODEL_TYPE_SAFT_SPAN_LABELING
            - TEXT_MODEL_TYPE_TEXT_EXTRACTION
            - TEXT_MODEL_TYPE_RELATIONSHIP_EXTRACTION
            - TEXT_MODEL_TYPE_COMPOSITE
            - TEXT_MODEL_TYPE_ALL_MODELS
            - TEXT_MODEL_TYPE_BERT
            - TEXT_MODEL_TYPE_ENC_PALM
          type: string
        tfRuntimeVersion:
          description: "## The fields below are only populated under uCAIP request scope. https://cloud.google.com/ml-engine/docs/runtime-version-list"
          type: string
        versionNumber:
          description: The servomatic model version number. Populated by uCAIP BE as part of online PredictRequest.
          format: int64
          type: string
      type: object
    XPSTextExtractionEvaluationMetrics:
      properties:
        bestF1ConfidenceMetrics:
          $ref: "#/components/schemas/XPSConfidenceMetricsEntry"
          deprecated: true
          description: Values are at the highest F1 score on the precision-recall curve. Only confidence_threshold, recall, precision, and f1_score will be set.
        confidenceMetricsEntries:
          description: If the enclosing EvaluationMetrics.label is empty, confidence_metrics_entries is an evaluation of the entire model across all labels. If the enclosing EvaluationMetrics.label is set, confidence_metrics_entries applies to that label.
          items:
            $ref: "#/components/schemas/XPSConfidenceMetricsEntry"
          type: array
        confusionMatrix:
          $ref: "#/components/schemas/XPSConfusionMatrix"
          description: Confusion matrix of the model, at the default confidence threshold (0.0). Only set for whole-model evaluation, not for evaluation per label.
        perLabelConfidenceMetrics:
          additionalProperties:
            $ref: "#/components/schemas/XPSConfidenceMetricsEntry"
          deprecated: true
          description: Only recall, precision, and f1_score will be set.
          type: object
      type: object
    XPSTextSentimentEvaluationMetrics:
      description: Model evaluation metrics for text sentiment problems.
      properties:
        confusionMatrix:
          $ref: "#/components/schemas/XPSConfusionMatrix"
          description: Output only. Confusion matrix of the evaluation. Only set for the overall model evaluation, not for evaluation of a single annotation spec.
        f1Score:
          description: Output only. The harmonic mean of recall and precision.
          format: float
          type: number
        linearKappa:
          description: Output only. Linear weighted kappa. Only set for the overall model evaluation, not for evaluation of a single annotation spec.
          format: float
          type: number
        meanAbsoluteError:
          description: Output only. Mean absolute error. Only set for the overall model evaluation, not for evaluation of a single annotation spec.
          format: float
          type: number
        meanSquaredError:
          description: Output only. Mean squared error. Only set for the overall model evaluation, not for evaluation of a single annotation spec.
          format: float
          type: number
        precision:
          description: Output only. Precision.
          format: float
          type: number
        quadraticKappa:
          description: Output only. Quadratic weighted kappa. Only set for the overall model evaluation, not for evaluation of a single annotation spec.
          format: float
          type: number
        recall:
          description: Output only. Recall.
          format: float
          type: number
      type: object
    XPSTextToSpeechTrainResponse:
      description: TextToSpeech train response
      properties: {}
      type: object
    XPSTextTrainResponse:
      properties:
        componentModel:
          description: Component submodels.
          items:
            $ref: "#/components/schemas/XPSTextComponentModel"
          type: array
      type: object
    XPSTfJsFormat:
      description: A [TensorFlow.js](https://www.tensorflow.org/js) model that can be used in the browser and in Node.js using JavaScript.
      properties: {}
      type: object
    XPSTfLiteFormat:
      description: LINT.IfChange A model format used for mobile and IoT devices. See https://www.tensorflow.org/lite.
      properties: {}
      type: object
    XPSTfSavedModelFormat:
      description: A tensorflow model format in SavedModel format.
      properties: {}
      type: object
    XPSTimestampStats:
      description: The data statistics of a series of TIMESTAMP values.
      properties:
        commonStats:
          $ref: "#/components/schemas/XPSCommonStats"
        granularStats:
          additionalProperties:
            $ref: "#/components/schemas/XPSTimestampStatsGranularStats"
          description: "The string key is the pre-defined granularity. Currently supported: hour_of_day, day_of_week, month_of_year. Granularities finer that the granularity of timestamp data are not populated (e.g. if timestamps are at day granularity, then hour_of_day is not populated)."
          type: object
        medianTimestampNanos:
          format: int64
          type: string
      type: object
    XPSTimestampStatsGranularStats:
      description: Stats split by a defined in context granularity.
      properties:
        buckets:
          additionalProperties:
            format: int64
            type: string
          description: A map from granularity key to example count for that key. E.g. for hour_of_day `13` means 1pm, or for month_of_year `5` means May).
          type: object
      type: object
    XPSTrackMetricsEntry:
      description: "Track matching model metrics for a single track match threshold and multiple label match confidence thresholds. Next tag: 6."
      properties:
        confidenceMetricsEntries:
          description: Output only. Metrics for each label-match confidence_threshold from 0.05,0.10,...,0.95,0.96,0.97,0.98,0.99. Precision-recall curve is derived from them.
          items:
            $ref: "#/components/schemas/XPSTrackMetricsEntryConfidenceMetricsEntry"
          type: array
        iouThreshold:
          description: Output only. The intersection-over-union threshold value between bounding boxes across frames used to compute this metric entry.
          format: float
          type: number
        meanBoundingBoxIou:
          description: Output only. The mean bounding box iou over all confidence thresholds.
          format: float
          type: number
        meanMismatchRate:
          description: Output only. The mean mismatch rate over all confidence thresholds.
          format: float
          type: number
        meanTrackingAveragePrecision:
          description: Output only. The mean average precision over all confidence thresholds.
          format: float
          type: number
      type: object
    XPSTrackMetricsEntryConfidenceMetricsEntry:
      description: "Metrics for a single confidence threshold. Next tag: 6."
      properties:
        boundingBoxIou:
          description: Output only. Bounding box intersection-over-union precision. Measures how well the bounding boxes overlap between each other (e.g. complete overlap or just barely above iou_threshold).
          format: float
          type: number
        confidenceThreshold:
          description: Output only. The confidence threshold value used to compute the metrics.
          format: float
          type: number
        mismatchRate:
          description: Output only. Mismatch rate, which measures the tracking consistency, i.e. correctness of instance ID continuity.
          format: float
          type: number
        trackingPrecision:
          description: Output only. Tracking precision.
          format: float
          type: number
        trackingRecall:
          description: Output only. Tracking recall.
          format: float
          type: number
      type: object
    XPSTrainResponse:
      description: "Next ID: 18"
      properties:
        deployedModelSizeBytes:
          description: Estimated model size in bytes once deployed.
          format: int64
          type: string
        errorAnalysisConfigs:
          description: Optional vision model error analysis configuration. The field is set when model error analysis is enabled in the training request. The results of error analysis will be binded together with evaluation results (in the format of AnnotatedExample).
          items:
            $ref: "#/components/schemas/XPSVisionErrorAnalysisConfig"
          type: array
        evaluatedExampleSet:
          $ref: "#/components/schemas/XPSExampleSet"
          description: Examples used to evaluate the model (usually the test set), with the predicted annotations. The file_spec should point to recordio file(s) of AnnotatedExample. For each returned example, the example_id_token and annotations predicted by the model must be set. The example payload can and is recommended to be omitted.
        evaluationMetricsSet:
          $ref: "#/components/schemas/XPSEvaluationMetricsSet"
          description: The trained model evaluation metrics. This can be optionally returned.
        explanationConfigs:
          deprecated: true
          description: VisionExplanationConfig for XAI on test set. Optional for when XAI is enable in training request.
          items:
            $ref: "#/components/schemas/XPSResponseExplanationSpec"
          type: array
        imageClassificationTrainResp:
          $ref: "#/components/schemas/XPSImageClassificationTrainResponse"
        imageObjectDetectionTrainResp:
          $ref: "#/components/schemas/XPSImageObjectDetectionModelSpec"
        imageSegmentationTrainResp:
          $ref: "#/components/schemas/XPSImageSegmentationTrainResponse"
        modelToken:
          description: Token that represents the trained model. This is considered immutable and is persisted in AutoML. xPS can put their own proto in the byte string, to e.g. point to the model checkpoints. The token is passed to other xPS APIs to refer to the model.
          format: byte
          type: string
        speechTrainResp:
          $ref: "#/components/schemas/XPSSpeechModelSpec"
        tablesTrainResp:
          $ref: "#/components/schemas/XPSTablesTrainResponse"
        textToSpeechTrainResp:
          $ref: "#/components/schemas/XPSTextToSpeechTrainResponse"
        textTrainResp:
          $ref: "#/components/schemas/XPSTextTrainResponse"
          description: Will only be needed for uCAIP from Beta.
        translationTrainResp:
          $ref: "#/components/schemas/XPSTranslationTrainResponse"
        videoActionRecognitionTrainResp:
          $ref: "#/components/schemas/XPSVideoActionRecognitionTrainResponse"
        videoClassificationTrainResp:
          $ref: "#/components/schemas/XPSVideoClassificationTrainResponse"
        videoObjectTrackingTrainResp:
          $ref: "#/components/schemas/XPSVideoObjectTrackingTrainResponse"
      type: object
    XPSTrainingObjectivePoint:
      properties:
        createTime:
          description: The time at which this point was recorded.
          format: google-datetime
          type: string
        value:
          description: The objective value when this point was recorded.
          format: float
          type: number
      type: object
    XPSTranslationEvaluationMetrics:
      description: Evaluation metrics for the dataset.
      properties:
        baseBleuScore:
          description: BLEU score for base model.
          format: double
          type: number
        bleuScore:
          description: BLEU score.
          format: double
          type: number
      type: object
    XPSTranslationPreprocessResponse:
      description: Translation preprocess response.
      properties:
        parsedExampleCount:
          description: Total example count parsed.
          format: int64
          type: string
        validExampleCount:
          description: Total valid example count.
          format: int64
          type: string
      type: object
    XPSTranslationTrainResponse:
      description: Train response for translation.
      properties:
        modelType:
          description: Type of the model.
          enum:
            - MODEL_TYPE_UNSPECIFIED
            - LEGACY
            - CURRENT
          type: string
      type: object
    XPSTuningTrial:
      description: Metrics for a tuning job generated, will get forwarded to Stackdriver as model tuning logs. Setting this as a standalone message out of CreateModelMetadata to avoid confusion as we expose this message only to users.
      properties:
        modelStructure:
          $ref: "#/components/schemas/XPSTablesModelStructure"
          description: Model parameters for the trial.
        trainingObjectivePoint:
          $ref: "#/components/schemas/XPSTrainingObjectivePoint"
          description: The optimization objective evaluation of the eval split data.
      type: object
    XPSVideoActionMetricsEntry:
      description: The Evaluation metrics entry given a specific precision_window_length.
      properties:
        confidenceMetricsEntries:
          description: Metrics for each label-match confidence_threshold from 0.05,0.10,...,0.95,0.96,0.97,0.98,0.99.
          items:
            $ref: "#/components/schemas/XPSVideoActionMetricsEntryConfidenceMetricsEntry"
          type: array
        meanAveragePrecision:
          description: The mean average precision.
          format: float
          type: number
        precisionWindowLength:
          description: This VideoActionMetricsEntry is calculated based on this prediction window length. If the predicted action's timestamp is inside the time window whose center is the ground truth action's timestamp with this specific length, the prediction result is treated as a true positive.
          format: google-duration
          type: string
      type: object
    XPSVideoActionMetricsEntryConfidenceMetricsEntry:
      description: Metrics for a single confidence threshold.
      properties:
        confidenceThreshold:
          description: Output only. The confidence threshold value used to compute the metrics.
          format: float
          type: number
        f1Score:
          description: Output only. The harmonic mean of recall and precision.
          format: float
          type: number
        precision:
          description: Output only. Precision for the given confidence threshold.
          format: float
          type: number
        recall:
          description: Output only. Recall for the given confidence threshold.
          format: float
          type: number
      type: object
    XPSVideoActionRecognitionEvaluationMetrics:
      description: Model evaluation metrics for video action recognition.
      properties:
        evaluatedActionCount:
          description: Output only. The number of ground truth actions used to create this evaluation.
          format: int32
          type: integer
        videoActionMetricsEntries:
          description: "Output only. The metric entries for precision window lengths: 1s,2s,3s,4s, 5s."
          items:
            $ref: "#/components/schemas/XPSVideoActionMetricsEntry"
          type: array
      type: object
    XPSVideoActionRecognitionTrainResponse:
      properties:
        modelArtifactSpec:
          $ref: "#/components/schemas/XPSVideoModelArtifactSpec"
          description: "## The fields below are only populated under uCAIP request scope."
        trainCostNodeSeconds:
          description: The actual train cost of creating this model, expressed in node seconds, i.e. 3,600 value in this field means 1 node hour.
          format: int64
          type: string
      type: object
    XPSVideoBatchPredictOperationMetadata:
      properties:
        outputExamples:
          description: All the partial batch prediction results that are completed at the moment. Output examples are sorted by completion time. The order will not be changed. Each output example should be the path of a single RecordIO file of AnnotatedExamples.
          items:
            type: string
          type: array
      type: object
    XPSVideoClassificationTrainResponse:
      properties:
        modelArtifactSpec:
          $ref: "#/components/schemas/XPSVideoModelArtifactSpec"
          description: "## The fields below are only populated under uCAIP request scope."
        trainCostNodeSeconds:
          description: The actual train cost of creating this model, expressed in node seconds, i.e. 3,600 value in this field means 1 node hour.
          format: int64
          type: string
      type: object
    XPSVideoExportModelSpec:
      description: Information of downloadable models that are pre-generated as part of training flow and will be persisted in AutoMl backend. Upon receiving ExportModel request from user, AutoMl backend can serve the pre-generated models to user if exists (by copying the files from internal path to user provided location), otherwise, AutoMl backend will call xPS ExportModel API to generate the model on the fly with the requesting format.
      properties:
        exportModelOutputConfig:
          description: Contains the model format and internal location of the model files to be exported/downloaded. Use the GCS bucket name which is provided via TrainRequest.gcs_bucket_name to store the model files.
          items:
            $ref: "#/components/schemas/XPSExportModelOutputConfig"
          type: array
      type: object
    XPSVideoModelArtifactSpec:
      properties:
        exportArtifact:
          description: The model binary files in different formats for model export.
          items:
            $ref: "#/components/schemas/XPSModelArtifactItem"
          type: array
        servingArtifact:
          $ref: "#/components/schemas/XPSModelArtifactItem"
          description: The default model binary file used for serving (e.g. batch predict) via public Cloud AI Platform API.
      type: object
    XPSVideoObjectTrackingEvaluationMetrics:
      description: "Model evaluation metrics for ObjectTracking problems. Next tag: 10."
      properties:
        boundingBoxMeanAveragePrecision:
          description: "Output only. The single metric for bounding boxes evaluation: the mean_average_precision averaged over all bounding_box_metrics_entries."
          format: float
          type: number
        boundingBoxMetricsEntries:
          description: Output only. The bounding boxes match metrics for each Intersection-over-union threshold 0.05,0.10,...,0.95,0.96,0.97,0.98,0.99.
          items:
            $ref: "#/components/schemas/XPSBoundingBoxMetricsEntry"
          type: array
        evaluatedBoundingboxCount:
          description: The number of bounding boxes used for model evaluation.
          format: int32
          type: integer
        evaluatedFrameCount:
          description: The number of video frames used for model evaluation.
          format: int32
          type: integer
        evaluatedTrackCount:
          description: The number of tracks used for model evaluation.
          format: int32
          type: integer
        trackMeanAveragePrecision:
          description: "Output only. The single metric for tracks accuracy evaluation: the mean_average_precision averaged over all track_metrics_entries."
          format: float
          type: number
        trackMeanBoundingBoxIou:
          description: "Output only. The single metric for tracks bounding box iou evaluation: the mean_bounding_box_iou averaged over all track_metrics_entries."
          format: float
          type: number
        trackMeanMismatchRate:
          description: "Output only. The single metric for tracking consistency evaluation: the mean_mismatch_rate averaged over all track_metrics_entries."
          format: float
          type: number
        trackMetricsEntries:
          description: Output only. The tracks match metrics for each Intersection-over-union threshold 0.05,0.10,...,0.95,0.96,0.97,0.98,0.99.
          items:
            $ref: "#/components/schemas/XPSTrackMetricsEntry"
          type: array
      type: object
    XPSVideoObjectTrackingTrainResponse:
      properties:
        exportModelSpec:
          $ref: "#/components/schemas/XPSVideoExportModelSpec"
          description: Populated for AutoML request only.
        modelArtifactSpec:
          $ref: "#/components/schemas/XPSVideoModelArtifactSpec"
          description: "## The fields below are only populated under uCAIP request scope."
        trainCostNodeSeconds:
          description: The actual train cost of creating this model, expressed in node seconds, i.e. 3,600 value in this field means 1 node hour.
          format: int64
          type: string
      type: object
    XPSVideoTrainingOperationMetadata:
      properties:
        trainCostMilliNodeHour:
          description: This is an estimation of the node hours necessary for training a model, expressed in milli node hours (i.e. 1,000 value in this field means 1 node hour). A node hour represents the time a virtual machine spends running your training job. The cost of one node running for one hour is a node hour.
          format: int64
          type: string
      type: object
    XPSVisionErrorAnalysisConfig:
      description: "The vision model error analysis configuration. Next tag: 3"
      properties:
        exampleCount:
          description: The number of query examples in error analysis.
          format: int32
          type: integer
        queryType:
          description: The query type used in retrieval. The enum values are frozen in the foreseeable future.
          enum:
            - QUERY_TYPE_UNSPECIFIED
            - QUERY_TYPE_ALL_SIMILAR
            - QUERY_TYPE_SAME_CLASS_SIMILAR
            - QUERY_TYPE_SAME_CLASS_DISSIMILAR
          type: string
      type: object
    XPSVisionTrainingOperationMetadata:
      deprecated: true
      properties:
        explanationUsage:
          $ref: "#/components/schemas/InfraUsage"
          description: Aggregated infra usage within certain time period, for billing report purpose if XAI is enable in training request.
      type: object
    XPSVisualization:
      deprecated: true
      description: Visualization configurations for image explanation.
      properties:
        clipPercentLowerbound:
          description: Excludes attributions below the specified percentile, from the highlighted areas. Defaults to 62.
          format: float
          type: number
        clipPercentUpperbound:
          description: Excludes attributions above the specified percentile from the highlighted areas. Using the clip_percent_upperbound and clip_percent_lowerbound together can be useful for filtering out noise and making it easier to see areas of strong attribution. Defaults to 99.9.
          format: float
          type: number
        colorMap:
          description: The color scheme used for the highlighted areas. Defaults to PINK_GREEN for Integrated Gradients attribution, which shows positive attributions in green and negative in pink. Defaults to VIRIDIS for XRAI attribution, which highlights the most influential regions in yellow and the least influential in blue.
          enum:
            - COLOR_MAP_UNSPECIFIED
            - PINK_GREEN
            - VIRIDIS
            - RED
            - GREEN
            - RED_GREEN
            - PINK_WHITE_GREEN
          type: string
        overlayType:
          description: How the original image is displayed in the visualization. Adjusting the overlay can help increase visual clarity if the original image makes it difficult to view the visualization. Defaults to NONE.
          enum:
            - OVERLAY_TYPE_UNSPECIFIED
            - NONE
            - ORIGINAL
            - GRAYSCALE
            - MASK_BLACK
          type: string
        polarity:
          description: Whether to only highlight pixels with positive contributions, negative or both. Defaults to POSITIVE.
          enum:
            - POLARITY_UNSPECIFIED
            - POSITIVE
            - NEGATIVE
            - BOTH
          type: string
        type:
          description: Type of the image visualization. Only applicable to Integrated Gradients attribution. OUTLINES shows regions of attribution, while PIXELS shows per-pixel attribution. Defaults to OUTLINES.
          enum:
            - TYPE_UNSPECIFIED
            - PIXELS
            - OUTLINES
          type: string
      type: object
    XPSXpsOperationMetadata:
      properties:
        exampleCount:
          description: Optional. XPS server can opt to provide example count of the long running operation (e.g. training, data importing, batch prediction).
          format: int64
          type: string
        reportingMetrics:
          $ref: "#/components/schemas/XPSReportingMetrics"
          description: Metrics for the operation. By the time the operation is terminated (whether succeeded or failed) as returned from XPS, AutoML BE assumes the metrics are finalized. AutoML BE transparently posts the metrics to Chemist if it's not empty, regardless of the response content or error type. If user is supposed to be charged in case of cancellation/error, this field should be set. In the case where the type of LRO doesn't require any billing, this field should be left unset.
        tablesTrainingOperationMetadata:
          $ref: "#/components/schemas/XPSTablesTrainingOperationMetadata"
        videoBatchPredictOperationMetadata:
          $ref: "#/components/schemas/XPSVideoBatchPredictOperationMetadata"
        videoTrainingOperationMetadata:
          $ref: "#/components/schemas/XPSVideoTrainingOperationMetadata"
        visionTrainingOperationMetadata:
          $ref: "#/components/schemas/XPSVisionTrainingOperationMetadata"
      type: object
    XPSXraiAttribution:
      deprecated: true
      description: "An explanation method that redistributes Integrated Gradients attributions to segmented regions, taking advantage of the model's fully differentiable structure. Refer to this paper for more details: https://arxiv.org/abs/1906.02825 Only supports image Models (modality is IMAGE)."
      properties:
        stepCount:
          description: The number of steps for approximating the path integral. A good value to start is 50 and gradually increase until the sum to diff property is met within the desired error range. Valid range of its value is [1, 100], inclusively.
          format: int32
          type: integer
      type: object
  securitySchemes:
    Oauth2:
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/cloud-language: Apply machine learning models to reveal the structure and meaning of text
            https://www.googleapis.com/auth/cloud-platform: See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.
      type: oauth2
    Oauth2c:
      description: Oauth 2.0 authorizationCode authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/cloud-language: Apply machine learning models to reveal the structure and meaning of text
            https://www.googleapis.com/auth/cloud-platform: See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.
          tokenUrl: https://accounts.google.com/o/oauth2/token
      type: oauth2

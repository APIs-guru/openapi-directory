# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.xps_image_segmentation_evaluation_metrics import XPSImageSegmentationEvaluationMetrics

class TestXPSImageSegmentationEvaluationMetrics(unittest.TestCase):
    """XPSImageSegmentationEvaluationMetrics unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> XPSImageSegmentationEvaluationMetrics:
        """Test XPSImageSegmentationEvaluationMetrics
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `XPSImageSegmentationEvaluationMetrics`
        """
        model = XPSImageSegmentationEvaluationMetrics()
        if include_optional:
            return XPSImageSegmentationEvaluationMetrics(
                confidence_metrics_entries = [
                    openapi_client.models.xps_image_segmentation_evaluation_metrics_confidence_metrics_entry.XPSImageSegmentationEvaluationMetricsConfidenceMetricsEntry(
                        confidence_threshold = 1.337, 
                        confusion_matrix = openapi_client.models.xps_confusion_matrix.XPSConfusionMatrix(
                            annotation_spec_id_token = [
                                ''
                                ], 
                            category = [
                                56
                                ], 
                            row = [
                                openapi_client.models.xps_confusion_matrix_row.XPSConfusionMatrixRow(
                                    count = [
                                        ''
                                        ], 
                                    example_count = [
                                        56
                                        ], )
                                ], 
                            sentiment_label = [
                                56
                                ], ), 
                        dice_score_coefficient = 1.337, 
                        iou_score = 1.337, 
                        precision = 1.337, 
                        recall = 1.337, )
                    ]
            )
        else:
            return XPSImageSegmentationEvaluationMetrics(
        )
        """

    def testXPSImageSegmentationEvaluationMetrics(self):
        """Test XPSImageSegmentationEvaluationMetrics"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

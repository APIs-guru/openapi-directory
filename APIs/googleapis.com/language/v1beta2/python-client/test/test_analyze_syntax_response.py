# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.analyze_syntax_response import AnalyzeSyntaxResponse

class TestAnalyzeSyntaxResponse(unittest.TestCase):
    """AnalyzeSyntaxResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AnalyzeSyntaxResponse:
        """Test AnalyzeSyntaxResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AnalyzeSyntaxResponse`
        """
        model = AnalyzeSyntaxResponse()
        if include_optional:
            return AnalyzeSyntaxResponse(
                language = '',
                sentences = [
                    openapi_client.models.sentence.Sentence(
                        sentiment = openapi_client.models.sentiment.Sentiment(
                            magnitude = 1.337, 
                            score = 1.337, ), 
                        text = openapi_client.models.text_span.TextSpan(
                            begin_offset = 56, 
                            content = '', ), )
                    ],
                tokens = [
                    openapi_client.models.token.Token(
                        dependency_edge = openapi_client.models.dependency_edge.DependencyEdge(
                            head_token_index = 56, 
                            label = 'UNKNOWN', ), 
                        lemma = '', 
                        part_of_speech = openapi_client.models.part_of_speech.PartOfSpeech(
                            aspect = 'ASPECT_UNKNOWN', 
                            case = 'CASE_UNKNOWN', 
                            form = 'FORM_UNKNOWN', 
                            gender = 'GENDER_UNKNOWN', 
                            mood = 'MOOD_UNKNOWN', 
                            number = 'NUMBER_UNKNOWN', 
                            person = 'PERSON_UNKNOWN', 
                            proper = 'PROPER_UNKNOWN', 
                            reciprocity = 'RECIPROCITY_UNKNOWN', 
                            tag = 'UNKNOWN', 
                            tense = 'TENSE_UNKNOWN', 
                            voice = 'VOICE_UNKNOWN', ), 
                        text = openapi_client.models.text_span.TextSpan(
                            begin_offset = 56, 
                            content = '', ), )
                    ]
            )
        else:
            return AnalyzeSyntaxResponse(
        )
        """

    def testAnalyzeSyntaxResponse(self):
        """Test AnalyzeSyntaxResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.xps_correlation_stats import XPSCorrelationStats
from openapi_client.models.xps_table_spec import XPSTableSpec
from typing import Optional, Set
from typing_extensions import Self

class XPSTablesDatasetMetadata(BaseModel):
    """
    Metadata for a dataset used for AutoML Tables. Next ID: 6
    """ # noqa: E501
    ml_use_column_id: Optional[StrictInt] = Field(default=None, description="Id the column to split the table.", alias="mlUseColumnId")
    primary_table_spec: Optional[XPSTableSpec] = Field(default=None, alias="primaryTableSpec")
    target_column_correlations: Optional[Dict[str, XPSCorrelationStats]] = Field(default=None, description="(the column id : its CorrelationStats with target column).", alias="targetColumnCorrelations")
    target_column_id: Optional[StrictInt] = Field(default=None, description="Id of the primary table column that should be used as the training label.", alias="targetColumnId")
    weight_column_id: Optional[StrictInt] = Field(default=None, description="Id of the primary table column that should be used as the weight column.", alias="weightColumnId")
    __properties: ClassVar[List[str]] = ["mlUseColumnId", "primaryTableSpec", "targetColumnCorrelations", "targetColumnId", "weightColumnId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of XPSTablesDatasetMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of primary_table_spec
        if self.primary_table_spec:
            _dict['primaryTableSpec'] = self.primary_table_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in target_column_correlations (dict)
        _field_dict = {}
        if self.target_column_correlations:
            for _key_target_column_correlations in self.target_column_correlations:
                if self.target_column_correlations[_key_target_column_correlations]:
                    _field_dict[_key_target_column_correlations] = self.target_column_correlations[_key_target_column_correlations].to_dict()
            _dict['targetColumnCorrelations'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of XPSTablesDatasetMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mlUseColumnId": obj.get("mlUseColumnId"),
            "primaryTableSpec": XPSTableSpec.from_dict(obj["primaryTableSpec"]) if obj.get("primaryTableSpec") is not None else None,
            "targetColumnCorrelations": dict(
                (_k, XPSCorrelationStats.from_dict(_v))
                for _k, _v in obj["targetColumnCorrelations"].items()
            )
            if obj.get("targetColumnCorrelations") is not None
            else None,
            "targetColumnId": obj.get("targetColumnId"),
            "weightColumnId": obj.get("weightColumnId")
        })
        return _obj



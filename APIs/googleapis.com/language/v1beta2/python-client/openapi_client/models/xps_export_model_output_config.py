# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.xps_docker_format import XPSDockerFormat
from typing import Optional, Set
from typing_extensions import Self

class XPSExportModelOutputConfig(BaseModel):
    """
    XPSExportModelOutputConfig
    """ # noqa: E501
    core_ml_format: Optional[Dict[str, Any]] = Field(default=None, description="A model format used for iOS mobile devices.", alias="coreMlFormat")
    docker_format: Optional[XPSDockerFormat] = Field(default=None, alias="dockerFormat")
    edge_tpu_tf_lite_format: Optional[Dict[str, Any]] = Field(default=None, description="A model format used for [Edge TPU](https://cloud.google.com/edge-tpu/) devices.", alias="edgeTpuTfLiteFormat")
    export_firebase_auxiliary_info: Optional[StrictBool] = Field(default=None, description="For any model and format: If true, will additionally export FirebaseExportedModelInfo in a firebase.txt file.", alias="exportFirebaseAuxiliaryInfo")
    output_gcr_uri: Optional[StrictStr] = Field(default=None, description="The Google Contained Registry (GCR) path the exported files to be pushed to. This location is set if the exported format is DOCKDER.", alias="outputGcrUri")
    output_gcs_uri: Optional[StrictStr] = Field(default=None, description="The Google Cloud Storage (GCS) directory where XPS will output the exported models and related files. Format: gs://bucket/directory", alias="outputGcsUri")
    tf_js_format: Optional[Dict[str, Any]] = Field(default=None, description="A [TensorFlow.js](https://www.tensorflow.org/js) model that can be used in the browser and in Node.js using JavaScript.", alias="tfJsFormat")
    tf_lite_format: Optional[Dict[str, Any]] = Field(default=None, description="LINT.IfChange A model format used for mobile and IoT devices. See https://www.tensorflow.org/lite.", alias="tfLiteFormat")
    tf_saved_model_format: Optional[Dict[str, Any]] = Field(default=None, description="A tensorflow model format in SavedModel format.", alias="tfSavedModelFormat")
    __properties: ClassVar[List[str]] = ["coreMlFormat", "dockerFormat", "edgeTpuTfLiteFormat", "exportFirebaseAuxiliaryInfo", "outputGcrUri", "outputGcsUri", "tfJsFormat", "tfLiteFormat", "tfSavedModelFormat"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of XPSExportModelOutputConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of docker_format
        if self.docker_format:
            _dict['dockerFormat'] = self.docker_format.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of XPSExportModelOutputConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "coreMlFormat": obj.get("coreMlFormat"),
            "dockerFormat": XPSDockerFormat.from_dict(obj["dockerFormat"]) if obj.get("dockerFormat") is not None else None,
            "edgeTpuTfLiteFormat": obj.get("edgeTpuTfLiteFormat"),
            "exportFirebaseAuxiliaryInfo": obj.get("exportFirebaseAuxiliaryInfo"),
            "outputGcrUri": obj.get("outputGcrUri"),
            "outputGcsUri": obj.get("outputGcsUri"),
            "tfJsFormat": obj.get("tfJsFormat"),
            "tfLiteFormat": obj.get("tfLiteFormat"),
            "tfSavedModelFormat": obj.get("tfSavedModelFormat")
        })
        return _obj



# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.xps_data_errors import XPSDataErrors
from typing import Optional, Set
from typing_extensions import Self

class XPSSpeechPreprocessStats(BaseModel):
    """
    XPSSpeechPreprocessStats
    """ # noqa: E501
    data_errors: Optional[List[XPSDataErrors]] = Field(default=None, description="Different types of data errors and the counts associated with them.", alias="dataErrors")
    num_human_labeled_examples: Optional[StrictInt] = Field(default=None, description="The number of rows marked HUMAN_LABELLED", alias="numHumanLabeledExamples")
    num_logs_examples: Optional[StrictInt] = Field(default=None, description="The number of samples found in the previously recorded logs data.", alias="numLogsExamples")
    num_machine_transcribed_examples: Optional[StrictInt] = Field(default=None, description="The number of rows marked as MACHINE_TRANSCRIBED", alias="numMachineTranscribedExamples")
    test_examples_count: Optional[StrictInt] = Field(default=None, description="The number of examples labelled as TEST by Speech xps server.", alias="testExamplesCount")
    test_sentences_count: Optional[StrictInt] = Field(default=None, description="The number of sentences in the test data set.", alias="testSentencesCount")
    test_words_count: Optional[StrictInt] = Field(default=None, description="The number of words in the test data set.", alias="testWordsCount")
    train_examples_count: Optional[StrictInt] = Field(default=None, description="The number of examples labeled as TRAIN by Speech xps server.", alias="trainExamplesCount")
    train_sentences_count: Optional[StrictInt] = Field(default=None, description="The number of sentences in the training data set.", alias="trainSentencesCount")
    train_words_count: Optional[StrictInt] = Field(default=None, description="The number of words in the training data set.", alias="trainWordsCount")
    __properties: ClassVar[List[str]] = ["dataErrors", "numHumanLabeledExamples", "numLogsExamples", "numMachineTranscribedExamples", "testExamplesCount", "testSentencesCount", "testWordsCount", "trainExamplesCount", "trainSentencesCount", "trainWordsCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of XPSSpeechPreprocessStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data_errors (list)
        _items = []
        if self.data_errors:
            for _item_data_errors in self.data_errors:
                if _item_data_errors:
                    _items.append(_item_data_errors.to_dict())
            _dict['dataErrors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of XPSSpeechPreprocessStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataErrors": [XPSDataErrors.from_dict(_item) for _item in obj["dataErrors"]] if obj.get("dataErrors") is not None else None,
            "numHumanLabeledExamples": obj.get("numHumanLabeledExamples"),
            "numLogsExamples": obj.get("numLogsExamples"),
            "numMachineTranscribedExamples": obj.get("numMachineTranscribedExamples"),
            "testExamplesCount": obj.get("testExamplesCount"),
            "testSentencesCount": obj.get("testSentencesCount"),
            "testWordsCount": obj.get("testWordsCount"),
            "trainExamplesCount": obj.get("trainExamplesCount"),
            "trainSentencesCount": obj.get("trainSentencesCount"),
            "trainWordsCount": obj.get("trainWordsCount")
        })
        return _obj



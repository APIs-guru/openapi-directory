# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Document(BaseModel):
    """
    Represents the input to API methods.
    """ # noqa: E501
    boilerplate_handling: Optional[StrictStr] = Field(default=None, description="Indicates how detected boilerplate(e.g. advertisements, copyright declarations, banners) should be handled for this document. If not specified, boilerplate will be treated the same as content.", alias="boilerplateHandling")
    content: Optional[StrictStr] = Field(default=None, description="The content of the input in string format. Cloud audit logging exempt since it is based on user data.")
    gcs_content_uri: Optional[StrictStr] = Field(default=None, description="The Google Cloud Storage URI where the file content is located. This URI must be of the form: gs://bucket_name/object_name. For more details, see https://cloud.google.com/storage/docs/reference-uris. NOTE: Cloud Storage object versioning is not supported.", alias="gcsContentUri")
    language: Optional[StrictStr] = Field(default=None, description="The language of the document (if not specified, the language is automatically detected). Both ISO and BCP-47 language codes are accepted. [Language Support](https://cloud.google.com/natural-language/docs/languages) lists currently supported languages for each API method. If the language (either specified by the caller or automatically detected) is not supported by the called API method, an `INVALID_ARGUMENT` error is returned.")
    reference_web_uri: Optional[StrictStr] = Field(default=None, description="The web URI where the document comes from. This URI is not used for fetching the content, but as a hint for analyzing the document.", alias="referenceWebUri")
    type: Optional[StrictStr] = Field(default=None, description="Required. If the type is not set or is `TYPE_UNSPECIFIED`, returns an `INVALID_ARGUMENT` error.")
    __properties: ClassVar[List[str]] = ["boilerplateHandling", "content", "gcsContentUri", "language", "referenceWebUri", "type"]

    @field_validator('boilerplate_handling')
    def boilerplate_handling_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BOILERPLATE_HANDLING_UNSPECIFIED', 'SKIP_BOILERPLATE', 'KEEP_BOILERPLATE']):
            raise ValueError("must be one of enum values ('BOILERPLATE_HANDLING_UNSPECIFIED', 'SKIP_BOILERPLATE', 'KEEP_BOILERPLATE')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'PLAIN_TEXT', 'HTML']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'PLAIN_TEXT', 'HTML')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Document from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Document from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boilerplateHandling": obj.get("boilerplateHandling"),
            "content": obj.get("content"),
            "gcsContentUri": obj.get("gcsContentUri"),
            "language": obj.get("language"),
            "referenceWebUri": obj.get("referenceWebUri"),
            "type": obj.get("type")
        })
        return _obj



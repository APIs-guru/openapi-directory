# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.xps_common_stats import XPSCommonStats
from openapi_client.models.xps_float64_stats_histogram_bucket import XPSFloat64StatsHistogramBucket
from typing import Optional, Set
from typing_extensions import Self

class XPSFloat64Stats(BaseModel):
    """
    The data statistics of a series of FLOAT64 values.
    """ # noqa: E501
    common_stats: Optional[XPSCommonStats] = Field(default=None, alias="commonStats")
    histogram_buckets: Optional[List[XPSFloat64StatsHistogramBucket]] = Field(default=None, description="Histogram buckets of the data series. Sorted by the min value of the bucket, ascendingly, and the number of the buckets is dynamically generated. The buckets are non-overlapping and completely cover whole FLOAT64 range with min of first bucket being `\"-Infinity\"`, and max of the last one being `\"Infinity\"`.", alias="histogramBuckets")
    mean: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The mean of the series.")
    quantiles: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Ordered from 0 to k k-quantile values of the data series of n values. The value at index i is, approximately, the i*n/k-th smallest value in the series; for i = 0 and i = k these are, respectively, the min and max values.")
    standard_deviation: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The standard deviation of the series.", alias="standardDeviation")
    __properties: ClassVar[List[str]] = ["commonStats", "histogramBuckets", "mean", "quantiles", "standardDeviation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of XPSFloat64Stats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of common_stats
        if self.common_stats:
            _dict['commonStats'] = self.common_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in histogram_buckets (list)
        _items = []
        if self.histogram_buckets:
            for _item_histogram_buckets in self.histogram_buckets:
                if _item_histogram_buckets:
                    _items.append(_item_histogram_buckets.to_dict())
            _dict['histogramBuckets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of XPSFloat64Stats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commonStats": XPSCommonStats.from_dict(obj["commonStats"]) if obj.get("commonStats") is not None else None,
            "histogramBuckets": [XPSFloat64StatsHistogramBucket.from_dict(_item) for _item in obj["histogramBuckets"]] if obj.get("histogramBuckets") is not None else None,
            "mean": obj.get("mean"),
            "quantiles": obj.get("quantiles"),
            "standardDeviation": obj.get("standardDeviation")
        })
        return _obj



# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.xps_reporting_metrics import XPSReportingMetrics
from openapi_client.models.xps_tables_training_operation_metadata import XPSTablesTrainingOperationMetadata
from openapi_client.models.xps_video_batch_predict_operation_metadata import XPSVideoBatchPredictOperationMetadata
from openapi_client.models.xps_video_training_operation_metadata import XPSVideoTrainingOperationMetadata
from openapi_client.models.xps_vision_training_operation_metadata import XPSVisionTrainingOperationMetadata
from typing import Optional, Set
from typing_extensions import Self

class XPSXpsOperationMetadata(BaseModel):
    """
    XPSXpsOperationMetadata
    """ # noqa: E501
    example_count: Optional[StrictStr] = Field(default=None, description="Optional. XPS server can opt to provide example count of the long running operation (e.g. training, data importing, batch prediction).", alias="exampleCount")
    reporting_metrics: Optional[XPSReportingMetrics] = Field(default=None, alias="reportingMetrics")
    tables_training_operation_metadata: Optional[XPSTablesTrainingOperationMetadata] = Field(default=None, alias="tablesTrainingOperationMetadata")
    video_batch_predict_operation_metadata: Optional[XPSVideoBatchPredictOperationMetadata] = Field(default=None, alias="videoBatchPredictOperationMetadata")
    video_training_operation_metadata: Optional[XPSVideoTrainingOperationMetadata] = Field(default=None, alias="videoTrainingOperationMetadata")
    vision_training_operation_metadata: Optional[XPSVisionTrainingOperationMetadata] = Field(default=None, alias="visionTrainingOperationMetadata")
    __properties: ClassVar[List[str]] = ["exampleCount", "reportingMetrics", "tablesTrainingOperationMetadata", "videoBatchPredictOperationMetadata", "videoTrainingOperationMetadata", "visionTrainingOperationMetadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of XPSXpsOperationMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of reporting_metrics
        if self.reporting_metrics:
            _dict['reportingMetrics'] = self.reporting_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tables_training_operation_metadata
        if self.tables_training_operation_metadata:
            _dict['tablesTrainingOperationMetadata'] = self.tables_training_operation_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_batch_predict_operation_metadata
        if self.video_batch_predict_operation_metadata:
            _dict['videoBatchPredictOperationMetadata'] = self.video_batch_predict_operation_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_training_operation_metadata
        if self.video_training_operation_metadata:
            _dict['videoTrainingOperationMetadata'] = self.video_training_operation_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vision_training_operation_metadata
        if self.vision_training_operation_metadata:
            _dict['visionTrainingOperationMetadata'] = self.vision_training_operation_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of XPSXpsOperationMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exampleCount": obj.get("exampleCount"),
            "reportingMetrics": XPSReportingMetrics.from_dict(obj["reportingMetrics"]) if obj.get("reportingMetrics") is not None else None,
            "tablesTrainingOperationMetadata": XPSTablesTrainingOperationMetadata.from_dict(obj["tablesTrainingOperationMetadata"]) if obj.get("tablesTrainingOperationMetadata") is not None else None,
            "videoBatchPredictOperationMetadata": XPSVideoBatchPredictOperationMetadata.from_dict(obj["videoBatchPredictOperationMetadata"]) if obj.get("videoBatchPredictOperationMetadata") is not None else None,
            "videoTrainingOperationMetadata": XPSVideoTrainingOperationMetadata.from_dict(obj["videoTrainingOperationMetadata"]) if obj.get("videoTrainingOperationMetadata") is not None else None,
            "visionTrainingOperationMetadata": XPSVisionTrainingOperationMetadata.from_dict(obj["visionTrainingOperationMetadata"]) if obj.get("visionTrainingOperationMetadata") is not None else None
        })
        return _obj



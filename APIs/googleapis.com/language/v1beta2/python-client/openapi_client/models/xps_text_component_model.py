# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.xps_model_artifact_item import XPSModelArtifactItem
from typing import Optional, Set
from typing_extensions import Self

class XPSTextComponentModel(BaseModel):
    """
    Component model. Next ID: 10
    """ # noqa: E501
    batch_prediction_model_gcs_uri: Optional[StrictStr] = Field(default=None, description="The Cloud Storage resource path to hold batch prediction model.", alias="batchPredictionModelGcsUri")
    online_prediction_model_gcs_uri: Optional[StrictStr] = Field(default=None, description="The Cloud Storage resource path to hold online prediction model.", alias="onlinePredictionModelGcsUri")
    partition: Optional[StrictStr] = Field(default=None, description="The partition where the model is deployed. Populated by uCAIP BE as part of online PredictRequest.")
    serving_artifact: Optional[XPSModelArtifactItem] = Field(default=None, alias="servingArtifact")
    servo_model_name: Optional[StrictStr] = Field(default=None, description="The name of servo model. Populated by uCAIP BE as part of online PredictRequest.", alias="servoModelName")
    submodel_name: Optional[StrictStr] = Field(default=None, description="The name of the trained NL submodel.", alias="submodelName")
    submodel_type: Optional[StrictStr] = Field(default=None, description="The type of trained NL submodel", alias="submodelType")
    tf_runtime_version: Optional[StrictStr] = Field(default=None, description="## The fields below are only populated under uCAIP request scope. https://cloud.google.com/ml-engine/docs/runtime-version-list", alias="tfRuntimeVersion")
    version_number: Optional[StrictStr] = Field(default=None, description="The servomatic model version number. Populated by uCAIP BE as part of online PredictRequest.", alias="versionNumber")
    __properties: ClassVar[List[str]] = ["batchPredictionModelGcsUri", "onlinePredictionModelGcsUri", "partition", "servingArtifact", "servoModelName", "submodelName", "submodelType", "tfRuntimeVersion", "versionNumber"]

    @field_validator('partition')
    def partition_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PARTITION_TYPE_UNSPECIFIED', 'PARTITION_ZERO', 'PARTITION_REDUCED_HOMING', 'PARTITION_JELLYFISH', 'PARTITION_CPU', 'PARTITION_CUSTOM_STORAGE_CPU']):
            raise ValueError("must be one of enum values ('PARTITION_TYPE_UNSPECIFIED', 'PARTITION_ZERO', 'PARTITION_REDUCED_HOMING', 'PARTITION_JELLYFISH', 'PARTITION_CPU', 'PARTITION_CUSTOM_STORAGE_CPU')")
        return value

    @field_validator('submodel_type')
    def submodel_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TEXT_MODEL_TYPE_UNSPECIFIED', 'TEXT_MODEL_TYPE_DEFAULT', 'TEXT_MODEL_TYPE_META_ARCHITECT', 'TEXT_MODEL_TYPE_ATC', 'TEXT_MODEL_TYPE_CLARA2', 'TEXT_MODEL_TYPE_CHATBASE', 'TEXT_MODEL_TYPE_SAFT_SPAN_LABELING', 'TEXT_MODEL_TYPE_TEXT_EXTRACTION', 'TEXT_MODEL_TYPE_RELATIONSHIP_EXTRACTION', 'TEXT_MODEL_TYPE_COMPOSITE', 'TEXT_MODEL_TYPE_ALL_MODELS', 'TEXT_MODEL_TYPE_BERT', 'TEXT_MODEL_TYPE_ENC_PALM']):
            raise ValueError("must be one of enum values ('TEXT_MODEL_TYPE_UNSPECIFIED', 'TEXT_MODEL_TYPE_DEFAULT', 'TEXT_MODEL_TYPE_META_ARCHITECT', 'TEXT_MODEL_TYPE_ATC', 'TEXT_MODEL_TYPE_CLARA2', 'TEXT_MODEL_TYPE_CHATBASE', 'TEXT_MODEL_TYPE_SAFT_SPAN_LABELING', 'TEXT_MODEL_TYPE_TEXT_EXTRACTION', 'TEXT_MODEL_TYPE_RELATIONSHIP_EXTRACTION', 'TEXT_MODEL_TYPE_COMPOSITE', 'TEXT_MODEL_TYPE_ALL_MODELS', 'TEXT_MODEL_TYPE_BERT', 'TEXT_MODEL_TYPE_ENC_PALM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of XPSTextComponentModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of serving_artifact
        if self.serving_artifact:
            _dict['servingArtifact'] = self.serving_artifact.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of XPSTextComponentModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "batchPredictionModelGcsUri": obj.get("batchPredictionModelGcsUri"),
            "onlinePredictionModelGcsUri": obj.get("onlinePredictionModelGcsUri"),
            "partition": obj.get("partition"),
            "servingArtifact": XPSModelArtifactItem.from_dict(obj["servingArtifact"]) if obj.get("servingArtifact") is not None else None,
            "servoModelName": obj.get("servoModelName"),
            "submodelName": obj.get("submodelName"),
            "submodelType": obj.get("submodelType"),
            "tfRuntimeVersion": obj.get("tfRuntimeVersion"),
            "versionNumber": obj.get("versionNumber")
        })
        return _obj



# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.xps_category_stats import XPSCategoryStats
from openapi_client.models.xps_float64_stats import XPSFloat64Stats
from openapi_client.models.xps_string_stats import XPSStringStats
from openapi_client.models.xps_timestamp_stats import XPSTimestampStats
from typing import Optional, Set
from typing_extensions import Self

class XPSDataStats(BaseModel):
    """
    The data statistics of a series of values that share the same DataType.
    """ # noqa: E501
    array_stats: Optional[XPSArrayStats] = Field(default=None, alias="arrayStats")
    category_stats: Optional[XPSCategoryStats] = Field(default=None, alias="categoryStats")
    distinct_value_count: Optional[StrictStr] = Field(default=None, description="The number of distinct values.", alias="distinctValueCount")
    float64_stats: Optional[XPSFloat64Stats] = Field(default=None, alias="float64Stats")
    null_value_count: Optional[StrictStr] = Field(default=None, description="The number of values that are null.", alias="nullValueCount")
    string_stats: Optional[XPSStringStats] = Field(default=None, alias="stringStats")
    struct_stats: Optional[XPSStructStats] = Field(default=None, alias="structStats")
    timestamp_stats: Optional[XPSTimestampStats] = Field(default=None, alias="timestampStats")
    valid_value_count: Optional[StrictStr] = Field(default=None, description="The number of values that are valid.", alias="validValueCount")
    __properties: ClassVar[List[str]] = ["arrayStats", "categoryStats", "distinctValueCount", "float64Stats", "nullValueCount", "stringStats", "structStats", "timestampStats", "validValueCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of XPSDataStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of array_stats
        if self.array_stats:
            _dict['arrayStats'] = self.array_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of category_stats
        if self.category_stats:
            _dict['categoryStats'] = self.category_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of float64_stats
        if self.float64_stats:
            _dict['float64Stats'] = self.float64_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of string_stats
        if self.string_stats:
            _dict['stringStats'] = self.string_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of struct_stats
        if self.struct_stats:
            _dict['structStats'] = self.struct_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timestamp_stats
        if self.timestamp_stats:
            _dict['timestampStats'] = self.timestamp_stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of XPSDataStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arrayStats": XPSArrayStats.from_dict(obj["arrayStats"]) if obj.get("arrayStats") is not None else None,
            "categoryStats": XPSCategoryStats.from_dict(obj["categoryStats"]) if obj.get("categoryStats") is not None else None,
            "distinctValueCount": obj.get("distinctValueCount"),
            "float64Stats": XPSFloat64Stats.from_dict(obj["float64Stats"]) if obj.get("float64Stats") is not None else None,
            "nullValueCount": obj.get("nullValueCount"),
            "stringStats": XPSStringStats.from_dict(obj["stringStats"]) if obj.get("stringStats") is not None else None,
            "structStats": XPSStructStats.from_dict(obj["structStats"]) if obj.get("structStats") is not None else None,
            "timestampStats": XPSTimestampStats.from_dict(obj["timestampStats"]) if obj.get("timestampStats") is not None else None,
            "validValueCount": obj.get("validValueCount")
        })
        return _obj

from openapi_client.models.xps_array_stats import XPSArrayStats
from openapi_client.models.xps_struct_stats import XPSStructStats
# TODO: Rewrite to not use raise_errors
XPSDataStats.model_rebuild(raise_errors=False)


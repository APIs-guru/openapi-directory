# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class XPSTablesConfidenceMetricsEntry(BaseModel):
    """
    Metrics for a single confidence threshold.
    """ # noqa: E501
    confidence_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The confidence threshold value used to compute the metrics.", alias="confidenceThreshold")
    f1_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The harmonic mean of recall and precision. (2 * precision * recall) / (precision + recall)", alias="f1Score")
    false_negative_count: Optional[StrictStr] = Field(default=None, description="False negative count.", alias="falseNegativeCount")
    false_positive_count: Optional[StrictStr] = Field(default=None, description="False positive count.", alias="falsePositiveCount")
    false_positive_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="FPR = #false positives / (#false positives + #true negatives)", alias="falsePositiveRate")
    precision: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Precision = #true positives / (#true positives + #false positives).")
    recall: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Recall = #true positives / (#true positives + #false negatives).")
    true_negative_count: Optional[StrictStr] = Field(default=None, description="True negative count.", alias="trueNegativeCount")
    true_positive_count: Optional[StrictStr] = Field(default=None, description="True positive count.", alias="truePositiveCount")
    true_positive_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="TPR = #true positives / (#true positives + #false negatvies)", alias="truePositiveRate")
    __properties: ClassVar[List[str]] = ["confidenceThreshold", "f1Score", "falseNegativeCount", "falsePositiveCount", "falsePositiveRate", "precision", "recall", "trueNegativeCount", "truePositiveCount", "truePositiveRate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of XPSTablesConfidenceMetricsEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of XPSTablesConfidenceMetricsEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "confidenceThreshold": obj.get("confidenceThreshold"),
            "f1Score": obj.get("f1Score"),
            "falseNegativeCount": obj.get("falseNegativeCount"),
            "falsePositiveCount": obj.get("falsePositiveCount"),
            "falsePositiveRate": obj.get("falsePositiveRate"),
            "precision": obj.get("precision"),
            "recall": obj.get("recall"),
            "trueNegativeCount": obj.get("trueNegativeCount"),
            "truePositiveCount": obj.get("truePositiveCount"),
            "truePositiveRate": obj.get("truePositiveRate")
        })
        return _obj



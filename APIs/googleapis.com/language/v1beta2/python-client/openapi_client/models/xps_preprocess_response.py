# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.xps_example_set import XPSExampleSet
from openapi_client.models.xps_speech_preprocess_response import XPSSpeechPreprocessResponse
from openapi_client.models.xps_tables_preprocess_response import XPSTablesPreprocessResponse
from openapi_client.models.xps_translation_preprocess_response import XPSTranslationPreprocessResponse
from typing import Optional, Set
from typing_extensions import Self

class XPSPreprocessResponse(BaseModel):
    """
    Next ID: 8
    """ # noqa: E501
    output_example_set: Optional[XPSExampleSet] = Field(default=None, alias="outputExampleSet")
    speech_preprocess_resp: Optional[XPSSpeechPreprocessResponse] = Field(default=None, alias="speechPreprocessResp")
    tables_preprocess_response: Optional[XPSTablesPreprocessResponse] = Field(default=None, alias="tablesPreprocessResponse")
    translation_preprocess_resp: Optional[XPSTranslationPreprocessResponse] = Field(default=None, alias="translationPreprocessResp")
    __properties: ClassVar[List[str]] = ["outputExampleSet", "speechPreprocessResp", "tablesPreprocessResponse", "translationPreprocessResp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of XPSPreprocessResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of output_example_set
        if self.output_example_set:
            _dict['outputExampleSet'] = self.output_example_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of speech_preprocess_resp
        if self.speech_preprocess_resp:
            _dict['speechPreprocessResp'] = self.speech_preprocess_resp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tables_preprocess_response
        if self.tables_preprocess_response:
            _dict['tablesPreprocessResponse'] = self.tables_preprocess_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of translation_preprocess_resp
        if self.translation_preprocess_resp:
            _dict['translationPreprocessResp'] = self.translation_preprocess_resp.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of XPSPreprocessResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "outputExampleSet": XPSExampleSet.from_dict(obj["outputExampleSet"]) if obj.get("outputExampleSet") is not None else None,
            "speechPreprocessResp": XPSSpeechPreprocessResponse.from_dict(obj["speechPreprocessResp"]) if obj.get("speechPreprocessResp") is not None else None,
            "tablesPreprocessResponse": XPSTablesPreprocessResponse.from_dict(obj["tablesPreprocessResponse"]) if obj.get("tablesPreprocessResponse") is not None else None,
            "translationPreprocessResp": XPSTranslationPreprocessResponse.from_dict(obj["translationPreprocessResp"]) if obj.get("translationPreprocessResp") is not None else None
        })
        return _obj



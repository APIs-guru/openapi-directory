# coding: utf-8

"""
    Cloud Natural Language API

    Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.xps_training_objective_point import XPSTrainingObjectivePoint
from openapi_client.models.xps_tuning_trial import XPSTuningTrial
from typing import Optional, Set
from typing_extensions import Self

class XPSTablesTrainingOperationMetadata(BaseModel):
    """
    XPSTablesTrainingOperationMetadata
    """ # noqa: E501
    create_model_stage: Optional[StrictStr] = Field(default=None, description="Current stage of creating model.", alias="createModelStage")
    optimization_objective: Optional[StrictStr] = Field(default=None, description="The optimization objective for model.", alias="optimizationObjective")
    top_trials: Optional[List[XPSTuningTrial]] = Field(default=None, description="This field is for training. When the operation is terminated successfully, AutoML Backend post this field to operation metadata in spanner. If the metadata has no trials returned, the training operation is supposed to be a failure.", alias="topTrials")
    train_budget_milli_node_hours: Optional[StrictStr] = Field(default=None, description="Creating model budget.", alias="trainBudgetMilliNodeHours")
    training_objective_points: Optional[List[XPSTrainingObjectivePoint]] = Field(default=None, description="This field records the training objective value with respect to time, giving insight into how the model architecture search is performing as training time elapses.", alias="trainingObjectivePoints")
    training_start_time: Optional[StrictStr] = Field(default=None, description="Timestamp when training process starts.", alias="trainingStartTime")
    __properties: ClassVar[List[str]] = ["createModelStage", "optimizationObjective", "topTrials", "trainBudgetMilliNodeHours", "trainingObjectivePoints", "trainingStartTime"]

    @field_validator('create_model_stage')
    def create_model_stage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CREATE_MODEL_STAGE_UNSPECIFIED', 'DATA_PREPROCESSING', 'TRAINING', 'EVALUATING', 'MODEL_POST_PROCESSING']):
            raise ValueError("must be one of enum values ('CREATE_MODEL_STAGE_UNSPECIFIED', 'DATA_PREPROCESSING', 'TRAINING', 'EVALUATING', 'MODEL_POST_PROCESSING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of XPSTablesTrainingOperationMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in top_trials (list)
        _items = []
        if self.top_trials:
            for _item_top_trials in self.top_trials:
                if _item_top_trials:
                    _items.append(_item_top_trials.to_dict())
            _dict['topTrials'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in training_objective_points (list)
        _items = []
        if self.training_objective_points:
            for _item_training_objective_points in self.training_objective_points:
                if _item_training_objective_points:
                    _items.append(_item_training_objective_points.to_dict())
            _dict['trainingObjectivePoints'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of XPSTablesTrainingOperationMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createModelStage": obj.get("createModelStage"),
            "optimizationObjective": obj.get("optimizationObjective"),
            "topTrials": [XPSTuningTrial.from_dict(_item) for _item in obj["topTrials"]] if obj.get("topTrials") is not None else None,
            "trainBudgetMilliNodeHours": obj.get("trainBudgetMilliNodeHours"),
            "trainingObjectivePoints": [XPSTrainingObjectivePoint.from_dict(_item) for _item in obj["trainingObjectivePoints"]] if obj.get("trainingObjectivePoints") is not None else None,
            "trainingStartTime": obj.get("trainingStartTime")
        })
        return _obj



# coding: utf-8

"""
    Cloud Spanner API

    Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Type(BaseModel):
    """
    `Type` indicates the type of a Cloud Spanner value, as might be stored in a table cell or returned from an SQL query.
    """ # noqa: E501
    array_element_type: Optional[Type] = Field(default=None, alias="arrayElementType")
    code: Optional[StrictStr] = Field(default=None, description="Required. The TypeCode for this type.")
    proto_type_fqn: Optional[StrictStr] = Field(default=None, description="If code == PROTO or code == ENUM, then `proto_type_fqn` is the fully qualified name of the proto type representing the proto/enum definition.", alias="protoTypeFqn")
    struct_type: Optional[StructType] = Field(default=None, alias="structType")
    type_annotation: Optional[StrictStr] = Field(default=None, description="The TypeAnnotationCode that disambiguates SQL type that Spanner will use to represent values of this type during query processing. This is necessary for some type codes because a single TypeCode can be mapped to different SQL types depending on the SQL dialect. type_annotation typically is not needed to process the content of a value (it doesn't affect serialization) and clients can ignore it on the read path.", alias="typeAnnotation")
    __properties: ClassVar[List[str]] = ["arrayElementType", "code", "protoTypeFqn", "structType", "typeAnnotation"]

    @field_validator('code')
    def code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_CODE_UNSPECIFIED', 'BOOL', 'INT64', 'FLOAT64', 'FLOAT32', 'TIMESTAMP', 'DATE', 'STRING', 'BYTES', 'ARRAY', 'STRUCT', 'NUMERIC', 'JSON', 'PROTO', 'ENUM']):
            raise ValueError("must be one of enum values ('TYPE_CODE_UNSPECIFIED', 'BOOL', 'INT64', 'FLOAT64', 'FLOAT32', 'TIMESTAMP', 'DATE', 'STRING', 'BYTES', 'ARRAY', 'STRUCT', 'NUMERIC', 'JSON', 'PROTO', 'ENUM')")
        return value

    @field_validator('type_annotation')
    def type_annotation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_ANNOTATION_CODE_UNSPECIFIED', 'PG_NUMERIC', 'PG_JSONB']):
            raise ValueError("must be one of enum values ('TYPE_ANNOTATION_CODE_UNSPECIFIED', 'PG_NUMERIC', 'PG_JSONB')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Type from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of array_element_type
        if self.array_element_type:
            _dict['arrayElementType'] = self.array_element_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of struct_type
        if self.struct_type:
            _dict['structType'] = self.struct_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Type from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arrayElementType": Type.from_dict(obj["arrayElementType"]) if obj.get("arrayElementType") is not None else None,
            "code": obj.get("code"),
            "protoTypeFqn": obj.get("protoTypeFqn"),
            "structType": StructType.from_dict(obj["structType"]) if obj.get("structType") is not None else None,
            "typeAnnotation": obj.get("typeAnnotation")
        })
        return _obj

from openapi_client.models.struct_type import StructType
# TODO: Rewrite to not use raise_errors
Type.model_rebuild(raise_errors=False)


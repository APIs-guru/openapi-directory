# coding: utf-8

"""
    Cloud Spanner API

    Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ddl_statement_action_info import DdlStatementActionInfo
from openapi_client.models.operation_progress import OperationProgress
from typing import Optional, Set
from typing_extensions import Self

class UpdateDatabaseDdlMetadata(BaseModel):
    """
    Metadata type for the operation returned by UpdateDatabaseDdl.
    """ # noqa: E501
    actions: Optional[List[DdlStatementActionInfo]] = Field(default=None, description="The brief action info for the DDL statements. `actions[i]` is the brief info for `statements[i]`.")
    commit_timestamps: Optional[List[StrictStr]] = Field(default=None, description="Reports the commit timestamps of all statements that have succeeded so far, where `commit_timestamps[i]` is the commit timestamp for the statement `statements[i]`.", alias="commitTimestamps")
    database: Optional[StrictStr] = Field(default=None, description="The database being modified.")
    progress: Optional[List[OperationProgress]] = Field(default=None, description="The progress of the UpdateDatabaseDdl operations. All DDL statements will have continuously updating progress, and `progress[i]` is the operation progress for `statements[i]`. Also, `progress[i]` will have start time and end time populated with commit timestamp of operation, as well as a progress of 100% once the operation has completed.")
    statements: Optional[List[StrictStr]] = Field(default=None, description="For an update this list contains all the statements. For an individual statement, this list contains only that statement.")
    throttled: Optional[StrictBool] = Field(default=None, description="Output only. When true, indicates that the operation is throttled e.g. due to resource constraints. When resources become available the operation will resume and this field will be false again.")
    __properties: ClassVar[List[str]] = ["actions", "commitTimestamps", "database", "progress", "statements", "throttled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateDatabaseDdlMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "throttled",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in progress (list)
        _items = []
        if self.progress:
            for _item_progress in self.progress:
                if _item_progress:
                    _items.append(_item_progress.to_dict())
            _dict['progress'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateDatabaseDdlMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actions": [DdlStatementActionInfo.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None,
            "commitTimestamps": obj.get("commitTimestamps"),
            "database": obj.get("database"),
            "progress": [OperationProgress.from_dict(_item) for _item in obj["progress"]] if obj.get("progress") is not None else None,
            "statements": obj.get("statements"),
            "throttled": obj.get("throttled")
        })
        return _obj



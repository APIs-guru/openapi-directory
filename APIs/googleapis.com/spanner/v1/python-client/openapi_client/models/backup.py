# coding: utf-8

"""
    Cloud Spanner API

    Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.encryption_info import EncryptionInfo
from typing import Optional, Set
from typing_extensions import Self

class Backup(BaseModel):
    """
    A backup of a Cloud Spanner database.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the CreateBackup request is received. If the request does not specify `version_time`, the `version_time` of the backup will be equivalent to the `create_time`.", alias="createTime")
    database: Optional[StrictStr] = Field(default=None, description="Required for the CreateBackup operation. Name of the database from which this backup was created. This needs to be in the same instance as the backup. Values are of the form `projects//instances//databases/`.")
    database_dialect: Optional[StrictStr] = Field(default=None, description="Output only. The database dialect information for the backup.", alias="databaseDialect")
    encryption_info: Optional[EncryptionInfo] = Field(default=None, alias="encryptionInfo")
    expire_time: Optional[StrictStr] = Field(default=None, description="Required for the CreateBackup operation. The expiration time of the backup, with microseconds granularity that must be at least 6 hours and at most 366 days from the time the CreateBackup request is processed. Once the `expire_time` has passed, the backup is eligible to be automatically deleted by Cloud Spanner to free the resources used by the backup.", alias="expireTime")
    max_expire_time: Optional[StrictStr] = Field(default=None, description="Output only. The max allowed expiration time of the backup, with microseconds granularity. A backup's expiration time can be configured in multiple APIs: CreateBackup, UpdateBackup, CopyBackup. When updating or copying an existing backup, the expiration time specified must be less than `Backup.max_expire_time`.", alias="maxExpireTime")
    name: Optional[StrictStr] = Field(default=None, description="Output only for the CreateBackup operation. Required for the UpdateBackup operation. A globally unique identifier for the backup which cannot be changed. Values are of the form `projects//instances//backups/a-z*[a-z0-9]` The final segment of the name must be between 2 and 60 characters in length. The backup is stored in the location(s) specified in the instance configuration of the instance containing the backup, identified by the prefix of the backup name of the form `projects//instances/`.")
    referencing_backups: Optional[List[StrictStr]] = Field(default=None, description="Output only. The names of the destination backups being created by copying this source backup. The backup names are of the form `projects//instances//backups/`. Referencing backups may exist in different instances. The existence of any referencing backup prevents the backup from being deleted. When the copy operation is done (either successfully completed or cancelled or the destination backup is deleted), the reference to the backup is removed.", alias="referencingBackups")
    referencing_databases: Optional[List[StrictStr]] = Field(default=None, description="Output only. The names of the restored databases that reference the backup. The database names are of the form `projects//instances//databases/`. Referencing databases may exist in different instances. The existence of any referencing database prevents the backup from being deleted. When a restored database from the backup enters the `READY` state, the reference to the backup is removed.", alias="referencingDatabases")
    size_bytes: Optional[StrictStr] = Field(default=None, description="Output only. Size of the backup in bytes.", alias="sizeBytes")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of the backup.")
    version_time: Optional[StrictStr] = Field(default=None, description="The backup will contain an externally consistent copy of the database at the timestamp specified by `version_time`. If `version_time` is not specified, the system will set `version_time` to the `create_time` of the backup.", alias="versionTime")
    __properties: ClassVar[List[str]] = ["createTime", "database", "databaseDialect", "encryptionInfo", "expireTime", "maxExpireTime", "name", "referencingBackups", "referencingDatabases", "sizeBytes", "state", "versionTime"]

    @field_validator('database_dialect')
    def database_dialect_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATABASE_DIALECT_UNSPECIFIED', 'GOOGLE_STANDARD_SQL', 'POSTGRESQL']):
            raise ValueError("must be one of enum values ('DATABASE_DIALECT_UNSPECIFIED', 'GOOGLE_STANDARD_SQL', 'POSTGRESQL')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'READY']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'READY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Backup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "database_dialect",
            "max_expire_time",
            "referencing_backups",
            "referencing_databases",
            "size_bytes",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption_info
        if self.encryption_info:
            _dict['encryptionInfo'] = self.encryption_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Backup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "database": obj.get("database"),
            "databaseDialect": obj.get("databaseDialect"),
            "encryptionInfo": EncryptionInfo.from_dict(obj["encryptionInfo"]) if obj.get("encryptionInfo") is not None else None,
            "expireTime": obj.get("expireTime"),
            "maxExpireTime": obj.get("maxExpireTime"),
            "name": obj.get("name"),
            "referencingBackups": obj.get("referencingBackups"),
            "referencingDatabases": obj.get("referencingDatabases"),
            "sizeBytes": obj.get("sizeBytes"),
            "state": obj.get("state"),
            "versionTime": obj.get("versionTime")
        })
        return _obj



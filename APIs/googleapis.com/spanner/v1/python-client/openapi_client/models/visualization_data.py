# coding: utf-8

"""
    Cloud Spanner API

    Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.diagnostic_message import DiagnosticMessage
from openapi_client.models.metric import Metric
from openapi_client.models.prefix_node import PrefixNode
from typing import Optional, Set
from typing_extensions import Self

class VisualizationData(BaseModel):
    """
    VisualizationData
    """ # noqa: E501
    data_source_end_token: Optional[StrictStr] = Field(default=None, description="The token signifying the end of a data_source.", alias="dataSourceEndToken")
    data_source_separator_token: Optional[StrictStr] = Field(default=None, description="The token delimiting a datasource name from the rest of a key in a data_source.", alias="dataSourceSeparatorToken")
    diagnostic_messages: Optional[List[DiagnosticMessage]] = Field(default=None, description="The list of messages (info, alerts, ...)", alias="diagnosticMessages")
    end_key_strings: Optional[List[StrictStr]] = Field(default=None, description="We discretize the entire keyspace into buckets. Assuming each bucket has an inclusive keyrange and covers keys from k(i) ... k(n). In this case k(n) would be an end key for a given range. end_key_string is the collection of all such end keys", alias="endKeyStrings")
    has_pii: Optional[StrictBool] = Field(default=None, description="Whether this scan contains PII.", alias="hasPii")
    indexed_keys: Optional[List[StrictStr]] = Field(default=None, description="Keys of key ranges that contribute significantly to a given metric Can be thought of as heavy hitters.", alias="indexedKeys")
    key_separator: Optional[StrictStr] = Field(default=None, description="The token delimiting the key prefixes.", alias="keySeparator")
    key_unit: Optional[StrictStr] = Field(default=None, description="The unit for the key: e.g. 'key' or 'chunk'.", alias="keyUnit")
    metrics: Optional[List[Metric]] = Field(default=None, description="The list of data objects for each metric.")
    prefix_nodes: Optional[List[PrefixNode]] = Field(default=None, description="The list of extracted key prefix nodes used in the key prefix hierarchy.", alias="prefixNodes")
    __properties: ClassVar[List[str]] = ["dataSourceEndToken", "dataSourceSeparatorToken", "diagnosticMessages", "endKeyStrings", "hasPii", "indexedKeys", "keySeparator", "keyUnit", "metrics", "prefixNodes"]

    @field_validator('key_unit')
    def key_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['KEY_UNIT_UNSPECIFIED', 'KEY', 'CHUNK']):
            raise ValueError("must be one of enum values ('KEY_UNIT_UNSPECIFIED', 'KEY', 'CHUNK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VisualizationData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in diagnostic_messages (list)
        _items = []
        if self.diagnostic_messages:
            for _item_diagnostic_messages in self.diagnostic_messages:
                if _item_diagnostic_messages:
                    _items.append(_item_diagnostic_messages.to_dict())
            _dict['diagnosticMessages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in metrics (list)
        _items = []
        if self.metrics:
            for _item_metrics in self.metrics:
                if _item_metrics:
                    _items.append(_item_metrics.to_dict())
            _dict['metrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in prefix_nodes (list)
        _items = []
        if self.prefix_nodes:
            for _item_prefix_nodes in self.prefix_nodes:
                if _item_prefix_nodes:
                    _items.append(_item_prefix_nodes.to_dict())
            _dict['prefixNodes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VisualizationData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataSourceEndToken": obj.get("dataSourceEndToken"),
            "dataSourceSeparatorToken": obj.get("dataSourceSeparatorToken"),
            "diagnosticMessages": [DiagnosticMessage.from_dict(_item) for _item in obj["diagnosticMessages"]] if obj.get("diagnosticMessages") is not None else None,
            "endKeyStrings": obj.get("endKeyStrings"),
            "hasPii": obj.get("hasPii"),
            "indexedKeys": obj.get("indexedKeys"),
            "keySeparator": obj.get("keySeparator"),
            "keyUnit": obj.get("keyUnit"),
            "metrics": [Metric.from_dict(_item) for _item in obj["metrics"]] if obj.get("metrics") is not None else None,
            "prefixNodes": [PrefixNode.from_dict(_item) for _item in obj["prefixNodes"]] if obj.get("prefixNodes") is not None else None
        })
        return _obj



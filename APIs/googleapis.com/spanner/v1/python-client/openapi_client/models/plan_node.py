# coding: utf-8

"""
    Cloud Spanner API

    Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.child_link import ChildLink
from openapi_client.models.short_representation import ShortRepresentation
from typing import Optional, Set
from typing_extensions import Self

class PlanNode(BaseModel):
    """
    Node information for nodes appearing in a QueryPlan.plan_nodes.
    """ # noqa: E501
    child_links: Optional[List[ChildLink]] = Field(default=None, description="List of child node `index`es and their relationship to this parent.", alias="childLinks")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name for the node.", alias="displayName")
    execution_stats: Optional[Dict[str, Any]] = Field(default=None, description="The execution statistics associated with the node, contained in a group of key-value pairs. Only present if the plan was returned as a result of a profile query. For example, number of executions, number of rows/time per execution etc.", alias="executionStats")
    index: Optional[StrictInt] = Field(default=None, description="The `PlanNode`'s index in node list.")
    kind: Optional[StrictStr] = Field(default=None, description="Used to determine the type of node. May be needed for visualizing different kinds of nodes differently. For example, If the node is a SCALAR node, it will have a condensed representation which can be used to directly embed a description of the node in its parent.")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Attributes relevant to the node contained in a group of key-value pairs. For example, a Parameter Reference node could have the following information in its metadata: { \"parameter_reference\": \"param1\", \"parameter_type\": \"array\" }")
    short_representation: Optional[ShortRepresentation] = Field(default=None, alias="shortRepresentation")
    __properties: ClassVar[List[str]] = ["childLinks", "displayName", "executionStats", "index", "kind", "metadata", "shortRepresentation"]

    @field_validator('kind')
    def kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['KIND_UNSPECIFIED', 'RELATIONAL', 'SCALAR']):
            raise ValueError("must be one of enum values ('KIND_UNSPECIFIED', 'RELATIONAL', 'SCALAR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlanNode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in child_links (list)
        _items = []
        if self.child_links:
            for _item_child_links in self.child_links:
                if _item_child_links:
                    _items.append(_item_child_links.to_dict())
            _dict['childLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of short_representation
        if self.short_representation:
            _dict['shortRepresentation'] = self.short_representation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlanNode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "childLinks": [ChildLink.from_dict(_item) for _item in obj["childLinks"]] if obj.get("childLinks") is not None else None,
            "displayName": obj.get("displayName"),
            "executionStats": obj.get("executionStats"),
            "index": obj.get("index"),
            "kind": obj.get("kind"),
            "metadata": obj.get("metadata"),
            "shortRepresentation": ShortRepresentation.from_dict(obj["shortRepresentation"]) if obj.get("shortRepresentation") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Spanner API

    Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.replica_info import ReplicaInfo
from typing import Optional, Set
from typing_extensions import Self

class InstanceConfig(BaseModel):
    """
    A possible configuration for a Cloud Spanner instance. Configurations define the geographic placement of nodes and their replication.
    """ # noqa: E501
    base_config: Optional[StrictStr] = Field(default=None, description="Base configuration name, e.g. projects//instanceConfigs/nam3, based on which this configuration is created. Only set for user managed configurations. `base_config` must refer to a configuration of type GOOGLE_MANAGED in the same project as this configuration.", alias="baseConfig")
    config_type: Optional[StrictStr] = Field(default=None, description="Output only. Whether this instance config is a Google or User Managed Configuration.", alias="configType")
    display_name: Optional[StrictStr] = Field(default=None, description="The name of this instance configuration as it appears in UIs.", alias="displayName")
    etag: Optional[StrictStr] = Field(default=None, description="etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a instance config from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform instance config updates in order to avoid race conditions: An etag is returned in the response which contains instance configs, and systems are expected to put that etag in the request to update instance config to ensure that their change will be applied to the same version of the instance config. If no etag is provided in the call to update instance config, then the existing instance config is overwritten blindly.")
    free_instance_availability: Optional[StrictStr] = Field(default=None, description="Output only. Describes whether free instances are available to be created in this instance config.", alias="freeInstanceAvailability")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Cloud Labels are a flexible and lightweight mechanism for organizing cloud resources into groups that reflect a customer's organizational needs and deployment strategies. Cloud Labels can be used to filter collections of resources. They can be used to control how resource metrics are aggregated. And they can be used as arguments to policy management rules (e.g. route, firewall, load balancing, etc.). * Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `a-z{0,62}`. * Label values must be between 0 and 63 characters long and must conform to the regular expression `[a-z0-9_-]{0,63}`. * No more than 64 labels can be associated with a given resource. See https://goo.gl/xmQnxf for more information on and examples of labels. If you plan to use labels in your own code, please note that additional characters may be allowed in the future. Therefore, you are advised to use an internal label representation, such as JSON, which doesn't rely upon specific characters being disallowed. For example, representing labels as the string: name + \"_\" + value would prove problematic if we were to allow \"_\" in a future release.")
    leader_options: Optional[List[StrictStr]] = Field(default=None, description="Allowed values of the \"default_leader\" schema option for databases in instances that use this instance configuration.", alias="leaderOptions")
    name: Optional[StrictStr] = Field(default=None, description="A unique identifier for the instance configuration. Values are of the form `projects//instanceConfigs/a-z*`.")
    optional_replicas: Optional[List[ReplicaInfo]] = Field(default=None, description="Output only. The available optional replicas to choose from for user managed configurations. Populated for Google managed configurations.", alias="optionalReplicas")
    reconciling: Optional[StrictBool] = Field(default=None, description="Output only. If true, the instance config is being created or updated. If false, there are no ongoing operations for the instance config.")
    replicas: Optional[List[ReplicaInfo]] = Field(default=None, description="The geographic placement of nodes in this instance configuration and their replication properties.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current instance config state. Applicable only for USER_MANAGED configs.")
    storage_limit_per_processing_unit: Optional[StrictStr] = Field(default=None, description="Output only. The storage limit in bytes per processing unit.", alias="storageLimitPerProcessingUnit")
    __properties: ClassVar[List[str]] = ["baseConfig", "configType", "displayName", "etag", "freeInstanceAvailability", "labels", "leaderOptions", "name", "optionalReplicas", "reconciling", "replicas", "state", "storageLimitPerProcessingUnit"]

    @field_validator('config_type')
    def config_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'GOOGLE_MANAGED', 'USER_MANAGED']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'GOOGLE_MANAGED', 'USER_MANAGED')")
        return value

    @field_validator('free_instance_availability')
    def free_instance_availability_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FREE_INSTANCE_AVAILABILITY_UNSPECIFIED', 'AVAILABLE', 'UNSUPPORTED', 'DISABLED', 'QUOTA_EXCEEDED']):
            raise ValueError("must be one of enum values ('FREE_INSTANCE_AVAILABILITY_UNSPECIFIED', 'AVAILABLE', 'UNSUPPORTED', 'DISABLED', 'QUOTA_EXCEEDED')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'READY']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'READY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InstanceConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "config_type",
            "free_instance_availability",
            "optional_replicas",
            "reconciling",
            "state",
            "storage_limit_per_processing_unit",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in optional_replicas (list)
        _items = []
        if self.optional_replicas:
            for _item_optional_replicas in self.optional_replicas:
                if _item_optional_replicas:
                    _items.append(_item_optional_replicas.to_dict())
            _dict['optionalReplicas'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in replicas (list)
        _items = []
        if self.replicas:
            for _item_replicas in self.replicas:
                if _item_replicas:
                    _items.append(_item_replicas.to_dict())
            _dict['replicas'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InstanceConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "baseConfig": obj.get("baseConfig"),
            "configType": obj.get("configType"),
            "displayName": obj.get("displayName"),
            "etag": obj.get("etag"),
            "freeInstanceAvailability": obj.get("freeInstanceAvailability"),
            "labels": obj.get("labels"),
            "leaderOptions": obj.get("leaderOptions"),
            "name": obj.get("name"),
            "optionalReplicas": [ReplicaInfo.from_dict(_item) for _item in obj["optionalReplicas"]] if obj.get("optionalReplicas") is not None else None,
            "reconciling": obj.get("reconciling"),
            "replicas": [ReplicaInfo.from_dict(_item) for _item in obj["replicas"]] if obj.get("replicas") is not None else None,
            "state": obj.get("state"),
            "storageLimitPerProcessingUnit": obj.get("storageLimitPerProcessingUnit")
        })
        return _obj



# coding: utf-8

"""
    Cloud Spanner API

    Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.context_value import ContextValue
from openapi_client.models.localized_string import LocalizedString
from typing import Optional, Set
from typing_extensions import Self

class KeyRangeInfo(BaseModel):
    """
    A message representing information for a key range (possibly one key).
    """ # noqa: E501
    context_values: Optional[List[ContextValue]] = Field(default=None, description="The list of context values for this key range.", alias="contextValues")
    end_key_index: Optional[StrictInt] = Field(default=None, description="The index of the end key in indexed_keys.", alias="endKeyIndex")
    info: Optional[LocalizedString] = None
    keys_count: Optional[StrictStr] = Field(default=None, description="The number of keys this range covers.", alias="keysCount")
    metric: Optional[LocalizedString] = None
    start_key_index: Optional[StrictInt] = Field(default=None, description="The index of the start key in indexed_keys.", alias="startKeyIndex")
    time_offset: Optional[StrictStr] = Field(default=None, description="The time offset. This is the time since the start of the time interval.", alias="timeOffset")
    unit: Optional[LocalizedString] = None
    value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The value of the metric.")
    __properties: ClassVar[List[str]] = ["contextValues", "endKeyIndex", "info", "keysCount", "metric", "startKeyIndex", "timeOffset", "unit", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KeyRangeInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in context_values (list)
        _items = []
        if self.context_values:
            for _item_context_values in self.context_values:
                if _item_context_values:
                    _items.append(_item_context_values.to_dict())
            _dict['contextValues'] = _items
        # override the default output from pydantic by calling `to_dict()` of info
        if self.info:
            _dict['info'] = self.info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metric
        if self.metric:
            _dict['metric'] = self.metric.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unit
        if self.unit:
            _dict['unit'] = self.unit.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KeyRangeInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contextValues": [ContextValue.from_dict(_item) for _item in obj["contextValues"]] if obj.get("contextValues") is not None else None,
            "endKeyIndex": obj.get("endKeyIndex"),
            "info": LocalizedString.from_dict(obj["info"]) if obj.get("info") is not None else None,
            "keysCount": obj.get("keysCount"),
            "metric": LocalizedString.from_dict(obj["metric"]) if obj.get("metric") is not None else None,
            "startKeyIndex": obj.get("startKeyIndex"),
            "timeOffset": obj.get("timeOffset"),
            "unit": LocalizedString.from_dict(obj["unit"]) if obj.get("unit") is not None else None,
            "value": obj.get("value")
        })
        return _obj



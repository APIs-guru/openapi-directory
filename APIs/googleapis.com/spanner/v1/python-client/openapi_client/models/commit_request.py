# coding: utf-8

"""
    Cloud Spanner API

    Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.mutation import Mutation
from openapi_client.models.request_options import RequestOptions
from openapi_client.models.transaction_options import TransactionOptions
from typing import Optional, Set
from typing_extensions import Self

class CommitRequest(BaseModel):
    """
    The request for Commit.
    """ # noqa: E501
    max_commit_delay: Optional[StrictStr] = Field(default=None, description="Optional. The amount of latency this request is willing to incur in order to improve throughput. If this field is not set, Spanner assumes requests are relatively latency sensitive and automatically determines an appropriate delay time. You can specify a batching delay value between 0 and 500 ms.", alias="maxCommitDelay")
    mutations: Optional[List[Mutation]] = Field(default=None, description="The mutations to be executed when this transaction commits. All mutations are applied atomically, in the order they appear in this list.")
    request_options: Optional[RequestOptions] = Field(default=None, alias="requestOptions")
    return_commit_stats: Optional[StrictBool] = Field(default=None, description="If `true`, then statistics related to the transaction will be included in the CommitResponse. Default value is `false`.", alias="returnCommitStats")
    single_use_transaction: Optional[TransactionOptions] = Field(default=None, alias="singleUseTransaction")
    transaction_id: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Commit a previously-started transaction.", alias="transactionId")
    __properties: ClassVar[List[str]] = ["maxCommitDelay", "mutations", "requestOptions", "returnCommitStats", "singleUseTransaction", "transactionId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommitRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in mutations (list)
        _items = []
        if self.mutations:
            for _item_mutations in self.mutations:
                if _item_mutations:
                    _items.append(_item_mutations.to_dict())
            _dict['mutations'] = _items
        # override the default output from pydantic by calling `to_dict()` of request_options
        if self.request_options:
            _dict['requestOptions'] = self.request_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of single_use_transaction
        if self.single_use_transaction:
            _dict['singleUseTransaction'] = self.single_use_transaction.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommitRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "maxCommitDelay": obj.get("maxCommitDelay"),
            "mutations": [Mutation.from_dict(_item) for _item in obj["mutations"]] if obj.get("mutations") is not None else None,
            "requestOptions": RequestOptions.from_dict(obj["requestOptions"]) if obj.get("requestOptions") is not None else None,
            "returnCommitStats": obj.get("returnCommitStats"),
            "singleUseTransaction": TransactionOptions.from_dict(obj["singleUseTransaction"]) if obj.get("singleUseTransaction") is not None else None,
            "transactionId": obj.get("transactionId")
        })
        return _obj



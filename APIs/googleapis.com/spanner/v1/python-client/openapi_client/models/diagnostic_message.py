# coding: utf-8

"""
    Cloud Spanner API

    Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.localized_string import LocalizedString
from typing import Optional, Set
from typing_extensions import Self

class DiagnosticMessage(BaseModel):
    """
    A message representing the key visualizer diagnostic messages.
    """ # noqa: E501
    info: Optional[LocalizedString] = None
    metric: Optional[LocalizedString] = None
    metric_specific: Optional[StrictBool] = Field(default=None, description="Whether this message is specific only for the current metric. By default Diagnostics are shown for all metrics, regardless which metric is the currently selected metric in the UI. However occasionally a metric will generate so many messages that the resulting visual clutter becomes overwhelming. In this case setting this to true, will show the diagnostic messages for that metric only if it is the currently selected metric.", alias="metricSpecific")
    severity: Optional[StrictStr] = Field(default=None, description="The severity of the diagnostic message.")
    short_message: Optional[LocalizedString] = Field(default=None, alias="shortMessage")
    __properties: ClassVar[List[str]] = ["info", "metric", "metricSpecific", "severity", "shortMessage"]

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SEVERITY_UNSPECIFIED', 'INFO', 'WARNING', 'ERROR', 'FATAL']):
            raise ValueError("must be one of enum values ('SEVERITY_UNSPECIFIED', 'INFO', 'WARNING', 'ERROR', 'FATAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DiagnosticMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of info
        if self.info:
            _dict['info'] = self.info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metric
        if self.metric:
            _dict['metric'] = self.metric.to_dict()
        # override the default output from pydantic by calling `to_dict()` of short_message
        if self.short_message:
            _dict['shortMessage'] = self.short_message.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DiagnosticMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "info": LocalizedString.from_dict(obj["info"]) if obj.get("info") is not None else None,
            "metric": LocalizedString.from_dict(obj["metric"]) if obj.get("metric") is not None else None,
            "metricSpecific": obj.get("metricSpecific"),
            "severity": obj.get("severity"),
            "shortMessage": LocalizedString.from_dict(obj["shortMessage"]) if obj.get("shortMessage") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Spanner API

    Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.autoscaling_config import AutoscalingConfig
from openapi_client.models.free_instance_metadata import FreeInstanceMetadata
from typing import Optional, Set
from typing_extensions import Self

class Instance(BaseModel):
    """
    An isolated set of Cloud Spanner resources on which databases can be hosted.
    """ # noqa: E501
    autoscaling_config: Optional[AutoscalingConfig] = Field(default=None, alias="autoscalingConfig")
    config: Optional[StrictStr] = Field(default=None, description="Required. The name of the instance's configuration. Values are of the form `projects//instanceConfigs/`. See also InstanceConfig and ListInstanceConfigs.")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which the instance was created.", alias="createTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The descriptive name for this instance as it appears in UIs. Must be unique per project and between 4 and 30 characters in length.", alias="displayName")
    endpoint_uris: Optional[List[StrictStr]] = Field(default=None, description="Deprecated. This field is not populated.", alias="endpointUris")
    free_instance_metadata: Optional[FreeInstanceMetadata] = Field(default=None, alias="freeInstanceMetadata")
    instance_type: Optional[StrictStr] = Field(default=None, description="The `InstanceType` of the current instance.", alias="instanceType")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Cloud Labels are a flexible and lightweight mechanism for organizing cloud resources into groups that reflect a customer's organizational needs and deployment strategies. Cloud Labels can be used to filter collections of resources. They can be used to control how resource metrics are aggregated. And they can be used as arguments to policy management rules (e.g. route, firewall, load balancing, etc.). * Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `a-z{0,62}`. * Label values must be between 0 and 63 characters long and must conform to the regular expression `[a-z0-9_-]{0,63}`. * No more than 64 labels can be associated with a given resource. See https://goo.gl/xmQnxf for more information on and examples of labels. If you plan to use labels in your own code, please note that additional characters may be allowed in the future. And so you are advised to use an internal label representation, such as JSON, which doesn't rely upon specific characters being disallowed. For example, representing labels as the string: name + \"_\" + value would prove problematic if we were to allow \"_\" in a future release.")
    name: Optional[StrictStr] = Field(default=None, description="Required. A unique identifier for the instance, which cannot be changed after the instance is created. Values are of the form `projects//instances/a-z*[a-z0-9]`. The final segment of the name must be between 2 and 64 characters in length.")
    node_count: Optional[StrictInt] = Field(default=None, description="The number of nodes allocated to this instance. At most one of either node_count or processing_units should be present in the message. Users can set the node_count field to specify the target number of nodes allocated to the instance. This may be zero in API responses for instances that are not yet in state `READY`. See [the documentation](https://cloud.google.com/spanner/docs/compute-capacity) for more information about nodes and processing units.", alias="nodeCount")
    processing_units: Optional[StrictInt] = Field(default=None, description="The number of processing units allocated to this instance. At most one of processing_units or node_count should be present in the message. Users can set the processing_units field to specify the target number of processing units allocated to the instance. This may be zero in API responses for instances that are not yet in state `READY`. See [the documentation](https://cloud.google.com/spanner/docs/compute-capacity) for more information about nodes and processing units.", alias="processingUnits")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current instance state. For CreateInstance, the state must be either omitted or set to `CREATING`. For UpdateInstance, the state must be either omitted or set to `READY`.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which the instance was most recently updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["autoscalingConfig", "config", "createTime", "displayName", "endpointUris", "freeInstanceMetadata", "instanceType", "labels", "name", "nodeCount", "processingUnits", "state", "updateTime"]

    @field_validator('instance_type')
    def instance_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INSTANCE_TYPE_UNSPECIFIED', 'PROVISIONED', 'FREE_INSTANCE']):
            raise ValueError("must be one of enum values ('INSTANCE_TYPE_UNSPECIFIED', 'PROVISIONED', 'FREE_INSTANCE')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'READY']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'READY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Instance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of autoscaling_config
        if self.autoscaling_config:
            _dict['autoscalingConfig'] = self.autoscaling_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of free_instance_metadata
        if self.free_instance_metadata:
            _dict['freeInstanceMetadata'] = self.free_instance_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Instance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoscalingConfig": AutoscalingConfig.from_dict(obj["autoscalingConfig"]) if obj.get("autoscalingConfig") is not None else None,
            "config": obj.get("config"),
            "createTime": obj.get("createTime"),
            "displayName": obj.get("displayName"),
            "endpointUris": obj.get("endpointUris"),
            "freeInstanceMetadata": FreeInstanceMetadata.from_dict(obj["freeInstanceMetadata"]) if obj.get("freeInstanceMetadata") is not None else None,
            "instanceType": obj.get("instanceType"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "nodeCount": obj.get("nodeCount"),
            "processingUnits": obj.get("processingUnits"),
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



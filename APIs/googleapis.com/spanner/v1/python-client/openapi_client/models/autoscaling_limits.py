# coding: utf-8

"""
    Cloud Spanner API

    Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AutoscalingLimits(BaseModel):
    """
    The autoscaling limits for the instance. Users can define the minimum and maximum compute capacity allocated to the instance, and the autoscaler will only scale within that range. Users can either use nodes or processing units to specify the limits, but should use the same unit to set both the min_limit and max_limit.
    """ # noqa: E501
    max_nodes: Optional[StrictInt] = Field(default=None, description="Maximum number of nodes allocated to the instance. If set, this number should be greater than or equal to min_nodes.", alias="maxNodes")
    max_processing_units: Optional[StrictInt] = Field(default=None, description="Maximum number of processing units allocated to the instance. If set, this number should be multiples of 1000 and be greater than or equal to min_processing_units.", alias="maxProcessingUnits")
    min_nodes: Optional[StrictInt] = Field(default=None, description="Minimum number of nodes allocated to the instance. If set, this number should be greater than or equal to 1.", alias="minNodes")
    min_processing_units: Optional[StrictInt] = Field(default=None, description="Minimum number of processing units allocated to the instance. If set, this number should be multiples of 1000.", alias="minProcessingUnits")
    __properties: ClassVar[List[str]] = ["maxNodes", "maxProcessingUnits", "minNodes", "minProcessingUnits"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AutoscalingLimits from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AutoscalingLimits from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "maxNodes": obj.get("maxNodes"),
            "maxProcessingUnits": obj.get("maxProcessingUnits"),
            "minNodes": obj.get("minNodes"),
            "minProcessingUnits": obj.get("minProcessingUnits")
        })
        return _obj



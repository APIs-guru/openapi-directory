# coding: utf-8

"""
    Cloud Spanner API

    Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.key_set import KeySet
from openapi_client.models.partition_options import PartitionOptions
from openapi_client.models.transaction_selector import TransactionSelector
from typing import Optional, Set
from typing_extensions import Self

class PartitionReadRequest(BaseModel):
    """
    The request for PartitionRead
    """ # noqa: E501
    columns: Optional[List[StrictStr]] = Field(default=None, description="The columns of table to be returned for each row matching this request.")
    index: Optional[StrictStr] = Field(default=None, description="If non-empty, the name of an index on table. This index is used instead of the table primary key when interpreting key_set and sorting result rows. See key_set for further information.")
    key_set: Optional[KeySet] = Field(default=None, alias="keySet")
    partition_options: Optional[PartitionOptions] = Field(default=None, alias="partitionOptions")
    table: Optional[StrictStr] = Field(default=None, description="Required. The name of the table in the database to be read.")
    transaction: Optional[TransactionSelector] = None
    __properties: ClassVar[List[str]] = ["columns", "index", "keySet", "partitionOptions", "table", "transaction"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PartitionReadRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of key_set
        if self.key_set:
            _dict['keySet'] = self.key_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of partition_options
        if self.partition_options:
            _dict['partitionOptions'] = self.partition_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transaction
        if self.transaction:
            _dict['transaction'] = self.transaction.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PartitionReadRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "columns": obj.get("columns"),
            "index": obj.get("index"),
            "keySet": KeySet.from_dict(obj["keySet"]) if obj.get("keySet") is not None else None,
            "partitionOptions": PartitionOptions.from_dict(obj["partitionOptions"]) if obj.get("partitionOptions") is not None else None,
            "table": obj.get("table"),
            "transaction": TransactionSelector.from_dict(obj["transaction"]) if obj.get("transaction") is not None else None
        })
        return _obj



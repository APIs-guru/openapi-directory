# coding: utf-8

"""
    Cloud Spanner API

    Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.scan_data import ScanData

class TestScanData(unittest.TestCase):
    """ScanData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ScanData:
        """Test ScanData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ScanData`
        """
        model = ScanData()
        if include_optional:
            return ScanData(
                data = openapi_client.models.visualization_data.VisualizationData(
                    data_source_end_token = '', 
                    data_source_separator_token = '', 
                    diagnostic_messages = [
                        openapi_client.models.diagnostic_message.DiagnosticMessage(
                            info = openapi_client.models.localized_string.LocalizedString(
                                args = {
                                    'key' : ''
                                    }, 
                                message = '', 
                                token = '', ), 
                            metric = openapi_client.models.localized_string.LocalizedString(
                                message = '', 
                                token = '', ), 
                            metric_specific = True, 
                            severity = 'SEVERITY_UNSPECIFIED', 
                            short_message = , )
                        ], 
                    end_key_strings = [
                        ''
                        ], 
                    has_pii = True, 
                    indexed_keys = [
                        ''
                        ], 
                    key_separator = '', 
                    key_unit = 'KEY_UNIT_UNSPECIFIED', 
                    metrics = [
                        openapi_client.models.metric.Metric(
                            aggregation = 'AGGREGATION_UNSPECIFIED', 
                            category = , 
                            derived = openapi_client.models.derived_metric.DerivedMetric(
                                denominator = , 
                                numerator = , ), 
                            display_label = , 
                            has_nonzero_data = True, 
                            hot_value = 1.337, 
                            indexed_hot_keys = {
                                'key' : openapi_client.models.indexed_hot_key.IndexedHotKey(
                                    sparse_hot_keys = {
                                        'key' : 56
                                        }, )
                                }, 
                            indexed_key_range_infos = {
                                'key' : openapi_client.models.indexed_key_range_infos.IndexedKeyRangeInfos(
                                    key_range_infos = {
                                        'key' : openapi_client.models.key_range_infos.KeyRangeInfos(
                                            infos = [
                                                openapi_client.models.key_range_info.KeyRangeInfo(
                                                    context_values = [
                                                        openapi_client.models.context_value.ContextValue(
                                                            label = , 
                                                            severity = 'SEVERITY_UNSPECIFIED', 
                                                            unit = '', 
                                                            value = 1.337, )
                                                        ], 
                                                    end_key_index = 56, 
                                                    keys_count = '', 
                                                    start_key_index = 56, 
                                                    time_offset = '', 
                                                    unit = , 
                                                    value = 1.337, )
                                                ], 
                                            total_size = 56, )
                                        }, )
                                }, 
                            matrix = openapi_client.models.metric_matrix.MetricMatrix(
                                rows = [
                                    openapi_client.models.metric_matrix_row.MetricMatrixRow(
                                        cols = [
                                            1.337
                                            ], )
                                    ], ), 
                            unit = , 
                            visible = True, )
                        ], 
                    prefix_nodes = [
                        openapi_client.models.prefix_node.PrefixNode(
                            data_source_node = True, 
                            depth = 56, 
                            end_index = 56, 
                            start_index = 56, 
                            word = '', )
                        ], ),
                end_time = '',
                start_time = ''
            )
        else:
            return ScanData(
        )
        """

    def testScanData(self):
        """Test ScanData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

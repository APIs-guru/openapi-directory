# coding: utf-8

"""
    Cloud Spanner API

    Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.diagnostic_message import DiagnosticMessage

class TestDiagnosticMessage(unittest.TestCase):
    """DiagnosticMessage unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DiagnosticMessage:
        """Test DiagnosticMessage
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DiagnosticMessage`
        """
        model = DiagnosticMessage()
        if include_optional:
            return DiagnosticMessage(
                info = openapi_client.models.localized_string.LocalizedString(
                    args = {
                        'key' : ''
                        }, 
                    message = '', 
                    token = '', ),
                metric = openapi_client.models.localized_string.LocalizedString(
                    args = {
                        'key' : ''
                        }, 
                    message = '', 
                    token = '', ),
                metric_specific = True,
                severity = 'SEVERITY_UNSPECIFIED',
                short_message = openapi_client.models.localized_string.LocalizedString(
                    args = {
                        'key' : ''
                        }, 
                    message = '', 
                    token = '', )
            )
        else:
            return DiagnosticMessage(
        )
        """

    def testDiagnosticMessage(self):
        """Test DiagnosticMessage"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Spanner API

    Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.result_set_metadata import ResultSetMetadata

class TestResultSetMetadata(unittest.TestCase):
    """ResultSetMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ResultSetMetadata:
        """Test ResultSetMetadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ResultSetMetadata`
        """
        model = ResultSetMetadata()
        if include_optional:
            return ResultSetMetadata(
                row_type = openapi_client.models.struct_type.StructType(
                    fields = [
                        openapi_client.models.field.Field(
                            name = '', 
                            type = openapi_client.models.type.Type(
                                array_element_type = openapi_client.models.type.Type(
                                    code = 'TYPE_CODE_UNSPECIFIED', 
                                    proto_type_fqn = '', 
                                    struct_type = openapi_client.models.struct_type.StructType(), 
                                    type_annotation = 'TYPE_ANNOTATION_CODE_UNSPECIFIED', ), 
                                code = 'TYPE_CODE_UNSPECIFIED', 
                                proto_type_fqn = '', 
                                struct_type = , 
                                type_annotation = 'TYPE_ANNOTATION_CODE_UNSPECIFIED', ), )
                        ], ),
                transaction = openapi_client.models.transaction.Transaction(
                    id = 'YQ==', 
                    read_timestamp = '', ),
                undeclared_parameters = openapi_client.models.struct_type.StructType(
                    fields = [
                        openapi_client.models.field.Field(
                            name = '', 
                            type = openapi_client.models.type.Type(
                                array_element_type = openapi_client.models.type.Type(
                                    code = 'TYPE_CODE_UNSPECIFIED', 
                                    proto_type_fqn = '', 
                                    struct_type = openapi_client.models.struct_type.StructType(), 
                                    type_annotation = 'TYPE_ANNOTATION_CODE_UNSPECIFIED', ), 
                                code = 'TYPE_CODE_UNSPECIFIED', 
                                proto_type_fqn = '', 
                                struct_type = , 
                                type_annotation = 'TYPE_ANNOTATION_CODE_UNSPECIFIED', ), )
                        ], )
            )
        else:
            return ResultSetMetadata(
        )
        """

    def testResultSetMetadata(self):
        """Test ResultSetMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

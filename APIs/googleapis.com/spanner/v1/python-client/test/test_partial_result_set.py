# coding: utf-8

"""
    Cloud Spanner API

    Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.partial_result_set import PartialResultSet

class TestPartialResultSet(unittest.TestCase):
    """PartialResultSet unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PartialResultSet:
        """Test PartialResultSet
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PartialResultSet`
        """
        model = PartialResultSet()
        if include_optional:
            return PartialResultSet(
                chunked_value = True,
                metadata = openapi_client.models.result_set_metadata.ResultSetMetadata(
                    row_type = openapi_client.models.struct_type.StructType(
                        fields = [
                            openapi_client.models.field.Field(
                                name = '', 
                                type = openapi_client.models.type.Type(
                                    array_element_type = openapi_client.models.type.Type(
                                        code = 'TYPE_CODE_UNSPECIFIED', 
                                        proto_type_fqn = '', 
                                        struct_type = openapi_client.models.struct_type.StructType(), 
                                        type_annotation = 'TYPE_ANNOTATION_CODE_UNSPECIFIED', ), 
                                    code = 'TYPE_CODE_UNSPECIFIED', 
                                    proto_type_fqn = '', 
                                    struct_type = , 
                                    type_annotation = 'TYPE_ANNOTATION_CODE_UNSPECIFIED', ), )
                            ], ), 
                    transaction = openapi_client.models.transaction.Transaction(
                        id = 'YQ==', 
                        read_timestamp = '', ), 
                    undeclared_parameters = , ),
                resume_token = 'YQ==',
                stats = openapi_client.models.result_set_stats.ResultSetStats(
                    query_plan = openapi_client.models.query_plan.QueryPlan(
                        plan_nodes = [
                            openapi_client.models.plan_node.PlanNode(
                                child_links = [
                                    openapi_client.models.child_link.ChildLink(
                                        child_index = 56, 
                                        type = '', 
                                        variable = '', )
                                    ], 
                                display_name = '', 
                                execution_stats = {
                                    'key' : null
                                    }, 
                                index = 56, 
                                kind = 'KIND_UNSPECIFIED', 
                                metadata = {
                                    'key' : null
                                    }, 
                                short_representation = openapi_client.models.short_representation.ShortRepresentation(
                                    description = '', 
                                    subqueries = {
                                        'key' : 56
                                        }, ), )
                            ], 
                        query_advice = openapi_client.models.query_advisor_result.QueryAdvisorResult(
                            index_advice = [
                                openapi_client.models.index_advice.IndexAdvice(
                                    ddl = [
                                        ''
                                        ], 
                                    improvement_factor = 1.337, )
                                ], ), ), 
                    query_stats = {
                        'key' : null
                        }, 
                    row_count_exact = '', 
                    row_count_lower_bound = '', ),
                values = [
                    null
                    ]
            )
        else:
            return PartialResultSet(
        )
        """

    def testPartialResultSet(self):
        """Test PartialResultSet"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

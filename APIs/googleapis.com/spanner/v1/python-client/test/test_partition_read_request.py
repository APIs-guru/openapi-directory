# coding: utf-8

"""
    Cloud Spanner API

    Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.partition_read_request import PartitionReadRequest

class TestPartitionReadRequest(unittest.TestCase):
    """PartitionReadRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PartitionReadRequest:
        """Test PartitionReadRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PartitionReadRequest`
        """
        model = PartitionReadRequest()
        if include_optional:
            return PartitionReadRequest(
                columns = [
                    ''
                    ],
                index = '',
                key_set = openapi_client.models.key_set.KeySet(
                    all = True, 
                    keys = [
                        [
                            null
                            ]
                        ], 
                    ranges = [
                        openapi_client.models.key_range.KeyRange(
                            end_closed = [
                                null
                                ], 
                            end_open = [
                                null
                                ], 
                            start_closed = [
                                null
                                ], 
                            start_open = [
                                null
                                ], )
                        ], ),
                partition_options = openapi_client.models.partition_options.PartitionOptions(
                    max_partitions = '', 
                    partition_size_bytes = '', ),
                table = '',
                transaction = openapi_client.models.transaction_selector.TransactionSelector(
                    begin = openapi_client.models.transaction_options.TransactionOptions(
                        partitioned_dml = openapi_client.models.partitioned_dml.PartitionedDml(), 
                        read_only = openapi_client.models.read_only.ReadOnly(
                            exact_staleness = '', 
                            max_staleness = '', 
                            min_read_timestamp = '', 
                            read_timestamp = '', 
                            return_read_timestamp = True, 
                            strong = True, ), 
                        read_write = openapi_client.models.read_write.ReadWrite(
                            read_lock_mode = 'READ_LOCK_MODE_UNSPECIFIED', ), ), 
                    id = 'YQ==', 
                    single_use = openapi_client.models.transaction_options.TransactionOptions(), )
            )
        else:
            return PartitionReadRequest(
        )
        """

    def testPartitionReadRequest(self):
        """Test PartitionReadRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

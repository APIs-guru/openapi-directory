# coding: utf-8

"""
    Cloud Spanner API

    Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.metric import Metric

class TestMetric(unittest.TestCase):
    """Metric unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Metric:
        """Test Metric
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Metric`
        """
        model = Metric()
        if include_optional:
            return Metric(
                aggregation = 'AGGREGATION_UNSPECIFIED',
                category = openapi_client.models.localized_string.LocalizedString(
                    args = {
                        'key' : ''
                        }, 
                    message = '', 
                    token = '', ),
                derived = openapi_client.models.derived_metric.DerivedMetric(
                    denominator = openapi_client.models.localized_string.LocalizedString(
                        args = {
                            'key' : ''
                            }, 
                        message = '', 
                        token = '', ), 
                    numerator = openapi_client.models.localized_string.LocalizedString(
                        message = '', 
                        token = '', ), ),
                display_label = openapi_client.models.localized_string.LocalizedString(
                    args = {
                        'key' : ''
                        }, 
                    message = '', 
                    token = '', ),
                has_nonzero_data = True,
                hot_value = 1.337,
                indexed_hot_keys = {
                    'key' : openapi_client.models.indexed_hot_key.IndexedHotKey(
                        sparse_hot_keys = {
                            'key' : 56
                            }, )
                    },
                indexed_key_range_infos = {
                    'key' : openapi_client.models.indexed_key_range_infos.IndexedKeyRangeInfos(
                        key_range_infos = {
                            'key' : openapi_client.models.key_range_infos.KeyRangeInfos(
                                infos = [
                                    openapi_client.models.key_range_info.KeyRangeInfo(
                                        context_values = [
                                            openapi_client.models.context_value.ContextValue(
                                                label = openapi_client.models.localized_string.LocalizedString(
                                                    args = {
                                                        'key' : ''
                                                        }, 
                                                    message = '', 
                                                    token = '', ), 
                                                severity = 'SEVERITY_UNSPECIFIED', 
                                                unit = '', 
                                                value = 1.337, )
                                            ], 
                                        end_key_index = 56, 
                                        info = openapi_client.models.localized_string.LocalizedString(
                                            message = '', 
                                            token = '', ), 
                                        keys_count = '', 
                                        metric = , 
                                        start_key_index = 56, 
                                        time_offset = '', 
                                        unit = , 
                                        value = 1.337, )
                                    ], 
                                total_size = 56, )
                            }, )
                    },
                info = openapi_client.models.localized_string.LocalizedString(
                    args = {
                        'key' : ''
                        }, 
                    message = '', 
                    token = '', ),
                matrix = openapi_client.models.metric_matrix.MetricMatrix(
                    rows = [
                        openapi_client.models.metric_matrix_row.MetricMatrixRow(
                            cols = [
                                1.337
                                ], )
                        ], ),
                unit = openapi_client.models.localized_string.LocalizedString(
                    args = {
                        'key' : ''
                        }, 
                    message = '', 
                    token = '', ),
                visible = True
            )
        else:
            return Metric(
        )
        """

    def testMetric(self):
        """Test Metric"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

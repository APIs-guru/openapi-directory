# coding: utf-8

"""
    Cloud OS Login API

    You can use OS Login to manage access to your VM instances using IAM roles.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PosixAccount(BaseModel):
    """
    The POSIX account information associated with a Google account.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Output only. A POSIX account identifier.", alias="accountId")
    gecos: Optional[StrictStr] = Field(default=None, description="The GECOS (user information) entry for this account.")
    gid: Optional[StrictStr] = Field(default=None, description="The default group ID.")
    home_directory: Optional[StrictStr] = Field(default=None, description="The path to the home directory for this account.", alias="homeDirectory")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The canonical resource name.")
    operating_system_type: Optional[StrictStr] = Field(default=None, description="The operating system type where this account applies.", alias="operatingSystemType")
    primary: Optional[StrictBool] = Field(default=None, description="Only one POSIX account can be marked as primary.")
    shell: Optional[StrictStr] = Field(default=None, description="The path to the logic shell for this account.")
    system_id: Optional[StrictStr] = Field(default=None, description="System identifier for which account the username or uid applies to. By default, the empty value is used.", alias="systemId")
    uid: Optional[StrictStr] = Field(default=None, description="The user ID.")
    username: Optional[StrictStr] = Field(default=None, description="The username of the POSIX account.")
    __properties: ClassVar[List[str]] = ["accountId", "gecos", "gid", "homeDirectory", "name", "operatingSystemType", "primary", "shell", "systemId", "uid", "username"]

    @field_validator('operating_system_type')
    def operating_system_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OPERATING_SYSTEM_TYPE_UNSPECIFIED', 'LINUX', 'WINDOWS']):
            raise ValueError("must be one of enum values ('OPERATING_SYSTEM_TYPE_UNSPECIFIED', 'LINUX', 'WINDOWS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PosixAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "account_id",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PosixAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "gecos": obj.get("gecos"),
            "gid": obj.get("gid"),
            "homeDirectory": obj.get("homeDirectory"),
            "name": obj.get("name"),
            "operatingSystemType": obj.get("operatingSystemType"),
            "primary": obj.get("primary"),
            "shell": obj.get("shell"),
            "systemId": obj.get("systemId"),
            "uid": obj.get("uid"),
            "username": obj.get("username")
        })
        return _obj



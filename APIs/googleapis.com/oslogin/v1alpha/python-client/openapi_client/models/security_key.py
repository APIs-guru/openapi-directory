# coding: utf-8

"""
    Cloud OS Login API

    You can use OS Login to manage access to your VM instances using IAM roles.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.universal_two_factor import UniversalTwoFactor
from openapi_client.models.web_authn import WebAuthn
from typing import Optional, Set
from typing_extensions import Self

class SecurityKey(BaseModel):
    """
    The credential information for a Google registered security key.
    """ # noqa: E501
    device_nickname: Optional[StrictStr] = Field(default=None, description="The security key nickname explicitly set by the user.", alias="deviceNickname")
    private_key: Optional[StrictStr] = Field(default=None, description="Hardware-backed private key text in SSH format.", alias="privateKey")
    public_key: Optional[StrictStr] = Field(default=None, description="Public key text in SSH format, defined by [RFC4253](\"https://www.ietf.org/rfc/rfc4253.txt\") section 6.6.", alias="publicKey")
    universal_two_factor: Optional[UniversalTwoFactor] = Field(default=None, alias="universalTwoFactor")
    web_authn: Optional[WebAuthn] = Field(default=None, alias="webAuthn")
    __properties: ClassVar[List[str]] = ["deviceNickname", "privateKey", "publicKey", "universalTwoFactor", "webAuthn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecurityKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of universal_two_factor
        if self.universal_two_factor:
            _dict['universalTwoFactor'] = self.universal_two_factor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of web_authn
        if self.web_authn:
            _dict['webAuthn'] = self.web_authn.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecurityKey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deviceNickname": obj.get("deviceNickname"),
            "privateKey": obj.get("privateKey"),
            "publicKey": obj.get("publicKey"),
            "universalTwoFactor": UniversalTwoFactor.from_dict(obj["universalTwoFactor"]) if obj.get("universalTwoFactor") is not None else None,
            "webAuthn": WebAuthn.from_dict(obj["webAuthn"]) if obj.get("webAuthn") is not None else None
        })
        return _obj



# coding: utf-8

"""
    AdSense Management API

    Accesses AdSense publishers' inventory and generates performance reports.

    The version of the OpenAPI document: v1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AdCode(BaseModel):
    """
    AdCode
    """ # noqa: E501
    ad_code: Optional[StrictStr] = Field(default=None, description="The Auto ad code snippet. The ad code snippet.", alias="adCode")
    amp_body: Optional[StrictStr] = Field(default=None, description="The AMP Auto ad code snippet that goes in the body of an AMP page.", alias="ampBody")
    amp_head: Optional[StrictStr] = Field(default=None, description="The AMP Auto ad code snippet that goes in the head of an AMP page.", alias="ampHead")
    kind: Optional[StrictStr] = Field(default='adsense#adCode', description="Kind this is, in this case adsense#adCode.")
    __properties: ClassVar[List[str]] = ["adCode", "ampBody", "ampHead", "kind"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdCode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdCode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adCode": obj.get("adCode"),
            "ampBody": obj.get("ampBody"),
            "ampHead": obj.get("ampHead"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'adsense#adCode'
        })
        return _obj



# coding: utf-8

"""
    AdSense Management API

    Accesses AdSense publishers' inventory and generates performance reports.

    The version of the OpenAPI document: v1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ReportingMetadataEntry(BaseModel):
    """
    ReportingMetadataEntry
    """ # noqa: E501
    compatible_dimensions: Optional[List[StrictStr]] = Field(default=None, description="For metrics this is a list of dimension IDs which the metric is compatible with, for dimensions it is a list of compatibility groups the dimension belongs to.", alias="compatibleDimensions")
    compatible_metrics: Optional[List[StrictStr]] = Field(default=None, description="The names of the metrics the dimension or metric this reporting metadata entry describes is compatible with.", alias="compatibleMetrics")
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier of this reporting metadata entry, corresponding to the name of the appropriate dimension or metric.")
    kind: Optional[StrictStr] = Field(default='adsense#reportingMetadataEntry', description="Kind of resource this is, in this case adsense#reportingMetadataEntry.")
    required_dimensions: Optional[List[StrictStr]] = Field(default=None, description="The names of the dimensions which the dimension or metric this reporting metadata entry describes requires to also be present in order for the report to be valid. Omitting these will not cause an error or warning, but may result in data which cannot be correctly interpreted.", alias="requiredDimensions")
    required_metrics: Optional[List[StrictStr]] = Field(default=None, description="The names of the metrics which the dimension or metric this reporting metadata entry describes requires to also be present in order for the report to be valid. Omitting these will not cause an error or warning, but may result in data which cannot be correctly interpreted.", alias="requiredMetrics")
    supported_products: Optional[List[StrictStr]] = Field(default=None, description="The codes of the projects supported by the dimension or metric this reporting metadata entry describes.", alias="supportedProducts")
    __properties: ClassVar[List[str]] = ["compatibleDimensions", "compatibleMetrics", "id", "kind", "requiredDimensions", "requiredMetrics", "supportedProducts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportingMetadataEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportingMetadataEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "compatibleDimensions": obj.get("compatibleDimensions"),
            "compatibleMetrics": obj.get("compatibleMetrics"),
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'adsense#reportingMetadataEntry',
            "requiredDimensions": obj.get("requiredDimensions"),
            "requiredMetrics": obj.get("requiredMetrics"),
            "supportedProducts": obj.get("supportedProducts")
        })
        return _obj



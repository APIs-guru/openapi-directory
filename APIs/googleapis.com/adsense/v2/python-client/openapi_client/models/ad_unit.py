# coding: utf-8

"""
    AdSense Management API

    The AdSense Management API allows publishers to access their inventory and run earnings and performance reports.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.content_ads_settings import ContentAdsSettings
from typing import Optional, Set
from typing_extensions import Self

class AdUnit(BaseModel):
    """
    Representation of an ad unit. An ad unit represents a saved ad unit with a specific set of ad settings that have been customized within an account.
    """ # noqa: E501
    content_ads_settings: Optional[ContentAdsSettings] = Field(default=None, alias="contentAdsSettings")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. Display name of the ad unit, as provided when the ad unit was created.", alias="displayName")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of the ad unit. Format: accounts/{account}/adclients/{adclient}/adunits/{adunit}")
    reporting_dimension_id: Optional[StrictStr] = Field(default=None, description="Output only. Unique ID of the ad unit as used in the `AD_UNIT_ID` reporting dimension.", alias="reportingDimensionId")
    state: Optional[StrictStr] = Field(default=None, description="Required. State of the ad unit.")
    __properties: ClassVar[List[str]] = ["contentAdsSettings", "displayName", "name", "reportingDimensionId", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'ARCHIVED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'ARCHIVED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdUnit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "reporting_dimension_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of content_ads_settings
        if self.content_ads_settings:
            _dict['contentAdsSettings'] = self.content_ads_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdUnit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contentAdsSettings": ContentAdsSettings.from_dict(obj["contentAdsSettings"]) if obj.get("contentAdsSettings") is not None else None,
            "displayName": obj.get("displayName"),
            "name": obj.get("name"),
            "reportingDimensionId": obj.get("reportingDimensionId"),
            "state": obj.get("state")
        })
        return _obj



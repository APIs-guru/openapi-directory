# coding: utf-8

"""
    AdSense Management API

    The AdSense Management API allows publishers to access their inventory and run earnings and performance reports.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.header import Header
from openapi_client.models.model_date import ModelDate
from openapi_client.models.row import Row
from typing import Optional, Set
from typing_extensions import Self

class ReportResult(BaseModel):
    """
    Result of a generated report.
    """ # noqa: E501
    averages: Optional[Row] = None
    end_date: Optional[ModelDate] = Field(default=None, alias="endDate")
    headers: Optional[List[Header]] = Field(default=None, description="The header information; one for each dimension in the request, followed by one for each metric in the request.")
    rows: Optional[List[Row]] = Field(default=None, description="The output rows of the report. Each row is a list of cells; one for each dimension in the request, followed by one for each metric in the request.")
    start_date: Optional[ModelDate] = Field(default=None, alias="startDate")
    total_matched_rows: Optional[StrictStr] = Field(default=None, description="The total number of rows matched by the report request.", alias="totalMatchedRows")
    totals: Optional[Row] = None
    warnings: Optional[List[StrictStr]] = Field(default=None, description="Any warnings associated with generation of the report. These warnings are always returned in English.")
    __properties: ClassVar[List[str]] = ["averages", "endDate", "headers", "rows", "startDate", "totalMatchedRows", "totals", "warnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of averages
        if self.averages:
            _dict['averages'] = self.averages.to_dict()
        # override the default output from pydantic by calling `to_dict()` of end_date
        if self.end_date:
            _dict['endDate'] = self.end_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in headers (list)
        _items = []
        if self.headers:
            for _item_headers in self.headers:
                if _item_headers:
                    _items.append(_item_headers.to_dict())
            _dict['headers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rows (list)
        _items = []
        if self.rows:
            for _item_rows in self.rows:
                if _item_rows:
                    _items.append(_item_rows.to_dict())
            _dict['rows'] = _items
        # override the default output from pydantic by calling `to_dict()` of start_date
        if self.start_date:
            _dict['startDate'] = self.start_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of totals
        if self.totals:
            _dict['totals'] = self.totals.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "averages": Row.from_dict(obj["averages"]) if obj.get("averages") is not None else None,
            "endDate": ModelDate.from_dict(obj["endDate"]) if obj.get("endDate") is not None else None,
            "headers": [Header.from_dict(_item) for _item in obj["headers"]] if obj.get("headers") is not None else None,
            "rows": [Row.from_dict(_item) for _item in obj["rows"]] if obj.get("rows") is not None else None,
            "startDate": ModelDate.from_dict(obj["startDate"]) if obj.get("startDate") is not None else None,
            "totalMatchedRows": obj.get("totalMatchedRows"),
            "totals": Row.from_dict(obj["totals"]) if obj.get("totals") is not None else None,
            "warnings": obj.get("warnings")
        })
        return _obj



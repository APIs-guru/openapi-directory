# coding: utf-8

"""
    Cloud Logging API

    Writes log entries and manages your Cloud Logging configuration.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_log_entries_response import ListLogEntriesResponse

class TestListLogEntriesResponse(unittest.TestCase):
    """ListLogEntriesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListLogEntriesResponse:
        """Test ListLogEntriesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListLogEntriesResponse`
        """
        model = ListLogEntriesResponse()
        if include_optional:
            return ListLogEntriesResponse(
                entries = [
                    openapi_client.models.log_entry.LogEntry(
                        error_groups = [
                            openapi_client.models.log_error_group.LogErrorGroup(
                                id = '', )
                            ], 
                        http_request = openapi_client.models.http_request.HttpRequest(
                            cache_fill_bytes = '', 
                            cache_hit = True, 
                            cache_lookup = True, 
                            cache_validated_with_origin_server = True, 
                            latency = '', 
                            protocol = '', 
                            referer = '', 
                            remote_ip = '', 
                            request_method = '', 
                            request_size = '', 
                            request_url = '', 
                            response_size = '', 
                            server_ip = '', 
                            status = 56, 
                            user_agent = '', ), 
                        insert_id = '', 
                        json_payload = {
                            'key' : null
                            }, 
                        labels = {
                            'key' : ''
                            }, 
                        log_name = '', 
                        metadata = openapi_client.models.monitored_resource_metadata.MonitoredResourceMetadata(
                            system_labels = {
                                'key' : null
                                }, 
                            user_labels = {
                                'key' : ''
                                }, ), 
                        operation = openapi_client.models.log_entry_operation.LogEntryOperation(
                            first = True, 
                            id = '', 
                            last = True, 
                            producer = '', ), 
                        proto_payload = {
                            'key' : null
                            }, 
                        receive_timestamp = '', 
                        resource = openapi_client.models.monitored_resource.MonitoredResource(
                            type = '', ), 
                        severity = 'DEFAULT', 
                        source_location = openapi_client.models.log_entry_source_location.LogEntrySourceLocation(
                            file = '', 
                            function = '', 
                            line = '', ), 
                        span_id = '', 
                        split = openapi_client.models.log_split.LogSplit(
                            index = 56, 
                            total_splits = 56, 
                            uid = '', ), 
                        text_payload = '', 
                        timestamp = '', 
                        trace = '', 
                        trace_sampled = True, )
                    ],
                next_page_token = ''
            )
        else:
            return ListLogEntriesResponse(
        )
        """

    def testListLogEntriesResponse(self):
        """Test ListLogEntriesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

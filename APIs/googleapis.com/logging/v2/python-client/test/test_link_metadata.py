# coding: utf-8

"""
    Cloud Logging API

    Writes log entries and manages your Cloud Logging configuration.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.link_metadata import LinkMetadata

class TestLinkMetadata(unittest.TestCase):
    """LinkMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LinkMetadata:
        """Test LinkMetadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LinkMetadata`
        """
        model = LinkMetadata()
        if include_optional:
            return LinkMetadata(
                create_link_request = openapi_client.models.create_link_request.CreateLinkRequest(
                    link = openapi_client.models.link.Link(
                        bigquery_dataset = openapi_client.models.big_query_dataset.BigQueryDataset(
                            dataset_id = '', ), 
                        create_time = '', 
                        description = '', 
                        lifecycle_state = 'LIFECYCLE_STATE_UNSPECIFIED', 
                        name = '', ), 
                    link_id = '', 
                    parent = '', ),
                delete_link_request = openapi_client.models.delete_link_request.DeleteLinkRequest(
                    name = '', ),
                end_time = '',
                start_time = '',
                state = 'OPERATION_STATE_UNSPECIFIED'
            )
        else:
            return LinkMetadata(
        )
        """

    def testLinkMetadata(self):
        """Test LinkMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

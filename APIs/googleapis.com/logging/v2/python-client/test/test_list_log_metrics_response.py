# coding: utf-8

"""
    Cloud Logging API

    Writes log entries and manages your Cloud Logging configuration.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_log_metrics_response import ListLogMetricsResponse

class TestListLogMetricsResponse(unittest.TestCase):
    """ListLogMetricsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListLogMetricsResponse:
        """Test ListLogMetricsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListLogMetricsResponse`
        """
        model = ListLogMetricsResponse()
        if include_optional:
            return ListLogMetricsResponse(
                metrics = [
                    openapi_client.models.log_metric.LogMetric(
                        bucket_name = '', 
                        bucket_options = openapi_client.models.bucket_options.BucketOptions(
                            explicit_buckets = openapi_client.models.explicit.Explicit(
                                bounds = [
                                    1.337
                                    ], ), 
                            exponential_buckets = openapi_client.models.exponential.Exponential(
                                growth_factor = 1.337, 
                                num_finite_buckets = 56, 
                                scale = 1.337, ), 
                            linear_buckets = openapi_client.models.linear.Linear(
                                num_finite_buckets = 56, 
                                offset = 1.337, 
                                width = 1.337, ), ), 
                        create_time = '', 
                        description = '', 
                        disabled = True, 
                        filter = '', 
                        label_extractors = {
                            'key' : ''
                            }, 
                        metric_descriptor = openapi_client.models.metric_descriptor.MetricDescriptor(
                            description = '', 
                            display_name = '', 
                            labels = [
                                openapi_client.models.label_descriptor.LabelDescriptor(
                                    description = '', 
                                    key = '', 
                                    value_type = 'STRING', )
                                ], 
                            launch_stage = 'LAUNCH_STAGE_UNSPECIFIED', 
                            metadata = openapi_client.models.metric_descriptor_metadata.MetricDescriptorMetadata(
                                ingest_delay = '', 
                                launch_stage = 'LAUNCH_STAGE_UNSPECIFIED', 
                                sample_period = '', ), 
                            metric_kind = 'METRIC_KIND_UNSPECIFIED', 
                            monitored_resource_types = [
                                ''
                                ], 
                            name = '', 
                            type = '', 
                            unit = '', 
                            value_type = 'VALUE_TYPE_UNSPECIFIED', ), 
                        name = '', 
                        update_time = '', 
                        value_extractor = '', 
                        version = 'V2', )
                    ],
                next_page_token = ''
            )
        else:
            return ListLogMetricsResponse(
        )
        """

    def testListLogMetricsResponse(self):
        """Test ListLogMetricsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Logging API

    Writes log entries and manages your Cloud Logging configuration.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cmek_settings import CmekSettings
from openapi_client.models.index_config import IndexConfig
from typing import Optional, Set
from typing_extensions import Self

class LogBucket(BaseModel):
    """
    Describes a repository in which log entries are stored.
    """ # noqa: E501
    analytics_enabled: Optional[StrictBool] = Field(default=None, description="Optional. Whether log analytics is enabled for this bucket.Once enabled, log analytics features cannot be disabled.", alias="analyticsEnabled")
    cmek_settings: Optional[CmekSettings] = Field(default=None, alias="cmekSettings")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The creation timestamp of the bucket. This is not set for any of the default buckets.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Optional. Describes this bucket.")
    index_configs: Optional[List[IndexConfig]] = Field(default=None, description="Optional. A list of indexed fields and related configuration data.", alias="indexConfigs")
    lifecycle_state: Optional[StrictStr] = Field(default=None, description="Output only. The bucket lifecycle state.", alias="lifecycleState")
    locked: Optional[StrictBool] = Field(default=None, description="Optional. Whether the bucket is locked.The retention period on a locked bucket cannot be changed. Locked buckets may only be deleted if they are empty.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the bucket.For example:projects/my-project/locations/global/buckets/my-bucketFor a list of supported locations, see Supported Regions (https://cloud.google.com/logging/docs/region-support)For the location of global it is unspecified where log entries are actually stored.After a bucket has been created, the location cannot be changed.")
    restricted_fields: Optional[List[StrictStr]] = Field(default=None, description="Optional. Log entry field paths that are denied access in this bucket.The following fields and their children are eligible: textPayload, jsonPayload, protoPayload, httpRequest, labels, sourceLocation.Restricting a repeated field will restrict all values. Adding a parent will block all child fields. (e.g. foo.bar will block foo.bar.baz)", alias="restrictedFields")
    retention_days: Optional[StrictInt] = Field(default=None, description="Optional. Logs will be retained by default for this amount of time, after which they will automatically be deleted. The minimum retention period is 1 day. If this value is set to zero at bucket creation time, the default time of 30 days will be used.", alias="retentionDays")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The last update timestamp of the bucket.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["analyticsEnabled", "cmekSettings", "createTime", "description", "indexConfigs", "lifecycleState", "locked", "name", "restrictedFields", "retentionDays", "updateTime"]

    @field_validator('lifecycle_state')
    def lifecycle_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LIFECYCLE_STATE_UNSPECIFIED', 'ACTIVE', 'DELETE_REQUESTED', 'UPDATING', 'CREATING', 'FAILED']):
            raise ValueError("must be one of enum values ('LIFECYCLE_STATE_UNSPECIFIED', 'ACTIVE', 'DELETE_REQUESTED', 'UPDATING', 'CREATING', 'FAILED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LogBucket from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "lifecycle_state",
            "name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cmek_settings
        if self.cmek_settings:
            _dict['cmekSettings'] = self.cmek_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in index_configs (list)
        _items = []
        if self.index_configs:
            for _item_index_configs in self.index_configs:
                if _item_index_configs:
                    _items.append(_item_index_configs.to_dict())
            _dict['indexConfigs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LogBucket from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "analyticsEnabled": obj.get("analyticsEnabled"),
            "cmekSettings": CmekSettings.from_dict(obj["cmekSettings"]) if obj.get("cmekSettings") is not None else None,
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "indexConfigs": [IndexConfig.from_dict(_item) for _item in obj["indexConfigs"]] if obj.get("indexConfigs") is not None else None,
            "lifecycleState": obj.get("lifecycleState"),
            "locked": obj.get("locked"),
            "name": obj.get("name"),
            "restrictedFields": obj.get("restrictedFields"),
            "retentionDays": obj.get("retentionDays"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



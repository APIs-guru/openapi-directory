# coding: utf-8

"""
    Cloud Logging API

    Writes log entries and manages your Cloud Logging configuration.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.summary_field import SummaryField
from typing import Optional, Set
from typing_extensions import Self

class LoggingQuery(BaseModel):
    """
    Describes a Cloud Logging query that can be run in Logs Explorer UI or via the logging API.In addition to the query itself, additional information may be stored to capture the display configuration and other UI state used in association with analysis of query results.
    """ # noqa: E501
    filter: Optional[StrictStr] = Field(default=None, description="Required. An advanced query using the Logging Query Language (https://cloud.google.com/logging/docs/view/logging-query-language). The maximum length of the filter is 20000 characters.")
    summary_field_end: Optional[StrictInt] = Field(default=None, description="Characters will be counted from the end of the string.", alias="summaryFieldEnd")
    summary_field_start: Optional[StrictInt] = Field(default=None, description="Characters will be counted from the start of the string.", alias="summaryFieldStart")
    summary_fields: Optional[List[SummaryField]] = Field(default=None, description="Optional. The set of summary fields to display for this saved query.", alias="summaryFields")
    __properties: ClassVar[List[str]] = ["filter", "summaryFieldEnd", "summaryFieldStart", "summaryFields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoggingQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in summary_fields (list)
        _items = []
        if self.summary_fields:
            for _item_summary_fields in self.summary_fields:
                if _item_summary_fields:
                    _items.append(_item_summary_fields.to_dict())
            _dict['summaryFields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoggingQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filter": obj.get("filter"),
            "summaryFieldEnd": obj.get("summaryFieldEnd"),
            "summaryFieldStart": obj.get("summaryFieldStart"),
            "summaryFields": [SummaryField.from_dict(_item) for _item in obj["summaryFields"]] if obj.get("summaryFields") is not None else None
        })
        return _obj



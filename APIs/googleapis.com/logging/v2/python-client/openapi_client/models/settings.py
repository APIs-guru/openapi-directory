# coding: utf-8

"""
    Cloud Logging API

    Writes log entries and manages your Cloud Logging configuration.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.default_sink_config import DefaultSinkConfig
from typing import Optional, Set
from typing_extensions import Self

class Settings(BaseModel):
    """
    Describes the settings associated with a project, folder, organization, or billing account.
    """ # noqa: E501
    default_sink_config: Optional[DefaultSinkConfig] = Field(default=None, alias="defaultSinkConfig")
    disable_default_sink: Optional[StrictBool] = Field(default=None, description="Optional. If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log storage if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.", alias="disableDefaultSink")
    kms_key_name: Optional[StrictStr] = Field(default=None, description="Optional. The resource name for the configured Cloud KMS key.KMS key name format: \"projects/[PROJECT_ID]/locations/[LOCATION]/keyRings/[KEYRING]/cryptoKeys/[KEY]\" For example:\"projects/my-project/locations/us-central1/keyRings/my-ring/cryptoKeys/my-key\"To enable CMEK, set this field to a valid kms_key_name for which the associated service account has the required roles/cloudkms.cryptoKeyEncrypterDecrypter role assigned for the key.The Cloud KMS key used by the Log Router can be updated by changing the kms_key_name to a new valid key name.To disable CMEK for the Log Router, set this field to an empty string.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.", alias="kmsKeyName")
    kms_service_account_id: Optional[StrictStr] = Field(default=None, description="Output only. The service account that will be used by the Log Router to access your Cloud KMS key.Before enabling CMEK, you must first assign the role roles/cloudkms.cryptoKeyEncrypterDecrypter to the service account that will be used to access your Cloud KMS key. Use GetSettings to obtain the service account ID.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.", alias="kmsServiceAccountId")
    logging_service_account_id: Optional[StrictStr] = Field(default=None, description="Output only. The service account for the given resource container, such as project or folder. Log sinks use this service account as their writer_identity if no custom service account is provided in the request when calling the create sink method.", alias="loggingServiceAccountId")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the settings.")
    storage_location: Optional[StrictStr] = Field(default=None, description="Optional. The storage location for the _Default and _Required log buckets of newly created projects and folders, unless the storage location is explicitly provided.Example value: europe-west1.Note: this setting does not affect the location of resources where a location is explicitly provided when created, such as custom log buckets.", alias="storageLocation")
    __properties: ClassVar[List[str]] = ["defaultSinkConfig", "disableDefaultSink", "kmsKeyName", "kmsServiceAccountId", "loggingServiceAccountId", "name", "storageLocation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Settings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "kms_service_account_id",
            "logging_service_account_id",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_sink_config
        if self.default_sink_config:
            _dict['defaultSinkConfig'] = self.default_sink_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Settings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultSinkConfig": DefaultSinkConfig.from_dict(obj["defaultSinkConfig"]) if obj.get("defaultSinkConfig") is not None else None,
            "disableDefaultSink": obj.get("disableDefaultSink"),
            "kmsKeyName": obj.get("kmsKeyName"),
            "kmsServiceAccountId": obj.get("kmsServiceAccountId"),
            "loggingServiceAccountId": obj.get("loggingServiceAccountId"),
            "name": obj.get("name"),
            "storageLocation": obj.get("storageLocation")
        })
        return _obj



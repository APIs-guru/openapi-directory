# coding: utf-8

"""
    Cloud Logging API

    Writes log entries and manages your Cloud Logging configuration.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.copy_log_entries_request import CopyLogEntriesRequest
from typing import Optional, Set
from typing_extensions import Self

class CopyLogEntriesMetadata(BaseModel):
    """
    Metadata for CopyLogEntries long running operations.
    """ # noqa: E501
    cancellation_requested: Optional[StrictBool] = Field(default=None, description="Identifies whether the user has requested cancellation of the operation.", alias="cancellationRequested")
    destination: Optional[StrictStr] = Field(default=None, description="Destination to which to copy log entries.For example, a Cloud Storage bucket:\"storage.googleapis.com/my-cloud-storage-bucket\"")
    end_time: Optional[StrictStr] = Field(default=None, description="The end time of an operation.", alias="endTime")
    progress: Optional[StrictInt] = Field(default=None, description="Estimated progress of the operation (0 - 100%).")
    request: Optional[CopyLogEntriesRequest] = None
    source: Optional[StrictStr] = Field(default=None, description="Source from which to copy log entries.For example, a log bucket:\"projects/my-project/locations/global/buckets/my-source-bucket\"")
    start_time: Optional[StrictStr] = Field(default=None, description="The create time of an operation.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of an operation.")
    verb: Optional[StrictStr] = Field(default=None, description="Name of the verb executed by the operation.For example,\"copy\"")
    writer_identity: Optional[StrictStr] = Field(default=None, description="The IAM identity of a service account that must be granted access to the destination.If the service account is not granted permission to the destination within an hour, the operation will be cancelled.For example: \"serviceAccount:foo@bar.com\"", alias="writerIdentity")
    __properties: ClassVar[List[str]] = ["cancellationRequested", "destination", "endTime", "progress", "request", "source", "startTime", "state", "verb", "writerIdentity"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OPERATION_STATE_UNSPECIFIED', 'OPERATION_STATE_SCHEDULED', 'OPERATION_STATE_WAITING_FOR_PERMISSIONS', 'OPERATION_STATE_RUNNING', 'OPERATION_STATE_SUCCEEDED', 'OPERATION_STATE_FAILED', 'OPERATION_STATE_CANCELLED', 'OPERATION_STATE_PENDING']):
            raise ValueError("must be one of enum values ('OPERATION_STATE_UNSPECIFIED', 'OPERATION_STATE_SCHEDULED', 'OPERATION_STATE_WAITING_FOR_PERMISSIONS', 'OPERATION_STATE_RUNNING', 'OPERATION_STATE_SUCCEEDED', 'OPERATION_STATE_FAILED', 'OPERATION_STATE_CANCELLED', 'OPERATION_STATE_PENDING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CopyLogEntriesMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of request
        if self.request:
            _dict['request'] = self.request.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CopyLogEntriesMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cancellationRequested": obj.get("cancellationRequested"),
            "destination": obj.get("destination"),
            "endTime": obj.get("endTime"),
            "progress": obj.get("progress"),
            "request": CopyLogEntriesRequest.from_dict(obj["request"]) if obj.get("request") is not None else None,
            "source": obj.get("source"),
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "verb": obj.get("verb"),
            "writerIdentity": obj.get("writerIdentity")
        })
        return _obj



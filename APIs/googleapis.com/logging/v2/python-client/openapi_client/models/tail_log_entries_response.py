# coding: utf-8

"""
    Cloud Logging API

    Writes log entries and manages your Cloud Logging configuration.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.log_entry import LogEntry
from openapi_client.models.suppression_info import SuppressionInfo
from typing import Optional, Set
from typing_extensions import Self

class TailLogEntriesResponse(BaseModel):
    """
    Result returned from TailLogEntries.
    """ # noqa: E501
    entries: Optional[List[LogEntry]] = Field(default=None, description="A list of log entries. Each response in the stream will order entries with increasing values of LogEntry.timestamp. Ordering is not guaranteed between separate responses.")
    suppression_info: Optional[List[SuppressionInfo]] = Field(default=None, description="If entries that otherwise would have been included in the session were not sent back to the client, counts of relevant entries omitted from the session with the reason that they were not included. There will be at most one of each reason per response. The counts represent the number of suppressed entries since the last streamed response.", alias="suppressionInfo")
    __properties: ClassVar[List[str]] = ["entries", "suppressionInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TailLogEntriesResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in entries (list)
        _items = []
        if self.entries:
            for _item_entries in self.entries:
                if _item_entries:
                    _items.append(_item_entries.to_dict())
            _dict['entries'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in suppression_info (list)
        _items = []
        if self.suppression_info:
            for _item_suppression_info in self.suppression_info:
                if _item_suppression_info:
                    _items.append(_item_suppression_info.to_dict())
            _dict['suppressionInfo'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TailLogEntriesResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "entries": [LogEntry.from_dict(_item) for _item in obj["entries"]] if obj.get("entries") is not None else None,
            "suppressionInfo": [SuppressionInfo.from_dict(_item) for _item in obj["suppressionInfo"]] if obj.get("suppressionInfo") is not None else None
        })
        return _obj



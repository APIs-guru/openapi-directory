# coding: utf-8

"""
    Cloud Logging API

    Writes log entries and manages your Cloud Logging configuration.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.logging_query import LoggingQuery
from openapi_client.models.ops_analytics_query import OpsAnalyticsQuery
from typing import Optional, Set
from typing_extensions import Self

class SavedQuery(BaseModel):
    """
    Describes a query that has been saved by a user.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the saved query was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Optional. A human readable description of the saved query.")
    display_name: Optional[StrictStr] = Field(default=None, description="Optional. The user specified title for the SavedQuery.", alias="displayName")
    logging_query: Optional[LoggingQuery] = Field(default=None, alias="loggingQuery")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of the saved query.In the format: \"projects/[PROJECT_ID]/locations/[LOCATION_ID]/savedQueries/[QUERY_ID]\" For a list of supported locations, see Supported Regions (https://cloud.google.com/logging/docs/region-support#bucket-regions)After the saved query is created, the location cannot be changed.If the user doesn't provide a QUERY_ID, the system will generate an alphanumeric ID.")
    ops_analytics_query: Optional[OpsAnalyticsQuery] = Field(default=None, alias="opsAnalyticsQuery")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the saved query was last updated.", alias="updateTime")
    visibility: Optional[StrictStr] = Field(default=None, description="Required. The visibility status of this query, which determines its ownership.")
    __properties: ClassVar[List[str]] = ["createTime", "description", "displayName", "loggingQuery", "name", "opsAnalyticsQuery", "updateTime", "visibility"]

    @field_validator('visibility')
    def visibility_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VISIBILITY_UNSPECIFIED', 'PRIVATE', 'SHARED']):
            raise ValueError("must be one of enum values ('VISIBILITY_UNSPECIFIED', 'PRIVATE', 'SHARED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SavedQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of logging_query
        if self.logging_query:
            _dict['loggingQuery'] = self.logging_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ops_analytics_query
        if self.ops_analytics_query:
            _dict['opsAnalyticsQuery'] = self.ops_analytics_query.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SavedQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "loggingQuery": LoggingQuery.from_dict(obj["loggingQuery"]) if obj.get("loggingQuery") is not None else None,
            "name": obj.get("name"),
            "opsAnalyticsQuery": OpsAnalyticsQuery.from_dict(obj["opsAnalyticsQuery"]) if obj.get("opsAnalyticsQuery") is not None else None,
            "updateTime": obj.get("updateTime"),
            "visibility": obj.get("visibility")
        })
        return _obj



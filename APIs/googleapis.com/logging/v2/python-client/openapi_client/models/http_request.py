# coding: utf-8

"""
    Cloud Logging API

    Writes log entries and manages your Cloud Logging configuration.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class HttpRequest(BaseModel):
    """
    A common proto for logging HTTP requests. Only contains semantics defined by the HTTP specification. Product-specific logging information MUST be defined in a separate message.
    """ # noqa: E501
    cache_fill_bytes: Optional[StrictStr] = Field(default=None, description="The number of HTTP response bytes inserted into cache. Set only when a cache fill was attempted.", alias="cacheFillBytes")
    cache_hit: Optional[StrictBool] = Field(default=None, description="Whether or not an entity was served from cache (with or without validation).", alias="cacheHit")
    cache_lookup: Optional[StrictBool] = Field(default=None, description="Whether or not a cache lookup was attempted.", alias="cacheLookup")
    cache_validated_with_origin_server: Optional[StrictBool] = Field(default=None, description="Whether or not the response was validated with the origin server before being served from cache. This field is only meaningful if cache_hit is True.", alias="cacheValidatedWithOriginServer")
    latency: Optional[StrictStr] = Field(default=None, description="The request processing latency on the server, from the time the request was received until the response was sent.")
    protocol: Optional[StrictStr] = Field(default=None, description="Protocol used for the request. Examples: \"HTTP/1.1\", \"HTTP/2\", \"websocket\"")
    referer: Optional[StrictStr] = Field(default=None, description="The referer URL of the request, as defined in HTTP/1.1 Header Field Definitions (https://datatracker.ietf.org/doc/html/rfc2616#section-14.36).")
    remote_ip: Optional[StrictStr] = Field(default=None, description="The IP address (IPv4 or IPv6) of the client that issued the HTTP request. This field can include port information. Examples: \"192.168.1.1\", \"10.0.0.1:80\", \"FE80::0202:B3FF:FE1E:8329\".", alias="remoteIp")
    request_method: Optional[StrictStr] = Field(default=None, description="The request method. Examples: \"GET\", \"HEAD\", \"PUT\", \"POST\".", alias="requestMethod")
    request_size: Optional[StrictStr] = Field(default=None, description="The size of the HTTP request message in bytes, including the request headers and the request body.", alias="requestSize")
    request_url: Optional[StrictStr] = Field(default=None, description="The scheme (http, https), the host name, the path and the query portion of the URL that was requested. Example: \"http://example.com/some/info?color=red\".", alias="requestUrl")
    response_size: Optional[StrictStr] = Field(default=None, description="The size of the HTTP response message sent back to the client, in bytes, including the response headers and the response body.", alias="responseSize")
    server_ip: Optional[StrictStr] = Field(default=None, description="The IP address (IPv4 or IPv6) of the origin server that the request was sent to. This field can include port information. Examples: \"192.168.1.1\", \"10.0.0.1:80\", \"FE80::0202:B3FF:FE1E:8329\".", alias="serverIp")
    status: Optional[StrictInt] = Field(default=None, description="The response code indicating the status of response. Examples: 200, 404.")
    user_agent: Optional[StrictStr] = Field(default=None, description="The user agent sent by the client. Example: \"Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; Q312461; .NET CLR 1.0.3705)\".", alias="userAgent")
    __properties: ClassVar[List[str]] = ["cacheFillBytes", "cacheHit", "cacheLookup", "cacheValidatedWithOriginServer", "latency", "protocol", "referer", "remoteIp", "requestMethod", "requestSize", "requestUrl", "responseSize", "serverIp", "status", "userAgent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HttpRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HttpRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cacheFillBytes": obj.get("cacheFillBytes"),
            "cacheHit": obj.get("cacheHit"),
            "cacheLookup": obj.get("cacheLookup"),
            "cacheValidatedWithOriginServer": obj.get("cacheValidatedWithOriginServer"),
            "latency": obj.get("latency"),
            "protocol": obj.get("protocol"),
            "referer": obj.get("referer"),
            "remoteIp": obj.get("remoteIp"),
            "requestMethod": obj.get("requestMethod"),
            "requestSize": obj.get("requestSize"),
            "requestUrl": obj.get("requestUrl"),
            "responseSize": obj.get("responseSize"),
            "serverIp": obj.get("serverIp"),
            "status": obj.get("status"),
            "userAgent": obj.get("userAgent")
        })
        return _obj



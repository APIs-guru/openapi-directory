# coding: utf-8

"""
    Google Cloud Support API

    Manages Google Cloud technical support cases for Customer Care support offerings. 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.actor import Actor
from openapi_client.models.case_classification import CaseClassification
from typing import Optional, Set
from typing_extensions import Self

class Case(BaseModel):
    """
    A Case is an object that contains the details of a support case. It contains fields for the time it was created, its priority, its classification, and more. Cases can also have comments and attachments that get added over time. A case is parented by a Google Cloud organization or project. Organizations are identified by a number, so the name of a case parented by an organization would look like this: ``` organizations/123/cases/456 ``` Projects have two unique identifiers, an ID and a number, and they look like this: ``` projects/abc/cases/456 ``` ``` projects/123/cases/456 ``` You can use either of them when calling the API. To learn more about project identifiers, see [AIP-2510](https://google.aip.dev/cloud/2510). Next ID: 38
    """ # noqa: E501
    classification: Optional[CaseClassification] = None
    contact_email: Optional[StrictStr] = Field(default=None, description="A user-supplied email address to send case update notifications for. This should only be used in BYOID flows, where we cannot infer the user's email address directly from their EUCs.", alias="contactEmail")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time this case was created.", alias="createTime")
    creator: Optional[Actor] = None
    description: Optional[StrictStr] = Field(default=None, description="A broad description of the issue.")
    display_name: Optional[StrictStr] = Field(default=None, description="The short summary of the issue reported in this case.", alias="displayName")
    escalated: Optional[StrictBool] = Field(default=None, description="Whether the case is currently escalated.")
    language_code: Optional[StrictStr] = Field(default=None, description="The language the user has requested to receive support in. This should be a BCP 47 language code (e.g., `\"en\"`, `\"zh-CN\"`, `\"zh-TW\"`, `\"ja\"`, `\"ko\"`). If no language or an unsupported language is specified, this field defaults to English (en). Language selection during case creation may affect your available support options. For a list of supported languages and their support working hours, see: https://cloud.google.com/support/docs/language-working-hours", alias="languageCode")
    name: Optional[StrictStr] = Field(default=None, description="The resource name for the case.")
    priority: Optional[StrictStr] = Field(default=None, description="The priority of this case.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current status of the support case.")
    subscriber_email_addresses: Optional[List[StrictStr]] = Field(default=None, description="The email addresses to receive updates on this case.", alias="subscriberEmailAddresses")
    test_case: Optional[StrictBool] = Field(default=None, description="Whether this case was created for internal API testing and should not be acted on by the support team.", alias="testCase")
    time_zone: Optional[StrictStr] = Field(default=None, description="The timezone of the user who created the support case. It should be in a format IANA recognizes: https://www.iana.org/time-zones. There is no additional validation done by the API.", alias="timeZone")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time this case was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["classification", "contactEmail", "createTime", "creator", "description", "displayName", "escalated", "languageCode", "name", "priority", "state", "subscriberEmailAddresses", "testCase", "timeZone", "updateTime"]

    @field_validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRIORITY_UNSPECIFIED', 'P0', 'P1', 'P2', 'P3', 'P4']):
            raise ValueError("must be one of enum values ('PRIORITY_UNSPECIFIED', 'P0', 'P1', 'P2', 'P3', 'P4')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'NEW', 'IN_PROGRESS_GOOGLE_SUPPORT', 'ACTION_REQUIRED', 'SOLUTION_PROVIDED', 'CLOSED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'NEW', 'IN_PROGRESS_GOOGLE_SUPPORT', 'ACTION_REQUIRED', 'SOLUTION_PROVIDED', 'CLOSED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Case from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of classification
        if self.classification:
            _dict['classification'] = self.classification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creator
        if self.creator:
            _dict['creator'] = self.creator.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Case from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "classification": CaseClassification.from_dict(obj["classification"]) if obj.get("classification") is not None else None,
            "contactEmail": obj.get("contactEmail"),
            "createTime": obj.get("createTime"),
            "creator": Actor.from_dict(obj["creator"]) if obj.get("creator") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "escalated": obj.get("escalated"),
            "languageCode": obj.get("languageCode"),
            "name": obj.get("name"),
            "priority": obj.get("priority"),
            "state": obj.get("state"),
            "subscriberEmailAddresses": obj.get("subscriberEmailAddresses"),
            "testCase": obj.get("testCase"),
            "timeZone": obj.get("timeZone"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Google Cloud Support API

    Manages Google Cloud technical support cases for Customer Care support offerings. 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.actor import Actor
from typing import Optional, Set
from typing_extensions import Self

class Attachment(BaseModel):
    """
    An Attachment contains metadata about a file that was uploaded to a case - it is NOT a file itself. That being said, the name of an Attachment object can be used to download its accompanying file through the `media.download` endpoint. While attachments can be uploaded in the console at the same time as a comment, they're associated on a \"case\" level, not a \"comment\" level.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which the attachment was created.", alias="createTime")
    creator: Optional[Actor] = None
    filename: Optional[StrictStr] = Field(default=None, description="The filename of the attachment (e.g. `\"graph.jpg\"`).")
    mime_type: Optional[StrictStr] = Field(default=None, description="Output only. The MIME type of the attachment (e.g. text/plain).", alias="mimeType")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the attachment.")
    size_bytes: Optional[StrictStr] = Field(default=None, description="Output only. The size of the attachment in bytes.", alias="sizeBytes")
    __properties: ClassVar[List[str]] = ["createTime", "creator", "filename", "mimeType", "name", "sizeBytes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Attachment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "mime_type",
            "name",
            "size_bytes",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creator
        if self.creator:
            _dict['creator'] = self.creator.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Attachment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "creator": Actor.from_dict(obj["creator"]) if obj.get("creator") is not None else None,
            "filename": obj.get("filename"),
            "mimeType": obj.get("mimeType"),
            "name": obj.get("name"),
            "sizeBytes": obj.get("sizeBytes")
        })
        return _obj



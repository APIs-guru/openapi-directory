# coding: utf-8

"""
    Google Cloud Support API

    Manages Google Cloud technical support cases for Customer Care support offerings. 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.media import Media

class TestMedia(unittest.TestCase):
    """Media unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Media:
        """Test Media
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Media`
        """
        model = Media()
        if include_optional:
            return Media(
                algorithm = '',
                bigstore_object_ref = 'YQ==',
                blob_ref = 'YQ==',
                blobstore2_info = openapi_client.models.blobstore2_info.Blobstore2Info(
                    blob_generation = '', 
                    blob_id = '', 
                    download_read_handle = 'YQ==', 
                    read_token = '', 
                    upload_metadata_container = 'YQ==', ),
                composite_media = [
                    openapi_client.models.composite_media.CompositeMedia(
                        blob_ref = 'YQ==', 
                        blobstore2_info = openapi_client.models.blobstore2_info.Blobstore2Info(
                            blob_generation = '', 
                            blob_id = '', 
                            download_read_handle = 'YQ==', 
                            read_token = '', 
                            upload_metadata_container = 'YQ==', ), 
                        cosmo_binary_reference = 'YQ==', 
                        crc32c_hash = 56, 
                        inline = 'YQ==', 
                        length = '', 
                        md5_hash = 'YQ==', 
                        object_id = openapi_client.models.object_id.ObjectId(
                            bucket_name = '', 
                            generation = '', 
                            object_name = '', ), 
                        path = '', 
                        reference_type = 'PATH', 
                        sha1_hash = 'YQ==', )
                    ],
                content_type = '',
                content_type_info = openapi_client.models.content_type_info.ContentTypeInfo(
                    best_guess = '', 
                    from_bytes = '', 
                    from_file_name = '', 
                    from_header = '', 
                    from_url_path = '', ),
                cosmo_binary_reference = 'YQ==',
                crc32c_hash = 56,
                diff_checksums_response = openapi_client.models.diff_checksums_response.DiffChecksumsResponse(
                    checksums_location = openapi_client.models.composite_media.CompositeMedia(
                        blob_ref = 'YQ==', 
                        blobstore2_info = openapi_client.models.blobstore2_info.Blobstore2Info(
                            blob_generation = '', 
                            blob_id = '', 
                            download_read_handle = 'YQ==', 
                            read_token = '', 
                            upload_metadata_container = 'YQ==', ), 
                        cosmo_binary_reference = 'YQ==', 
                        crc32c_hash = 56, 
                        inline = 'YQ==', 
                        length = '', 
                        md5_hash = 'YQ==', 
                        object_id = openapi_client.models.object_id.ObjectId(
                            bucket_name = '', 
                            generation = '', 
                            object_name = '', ), 
                        path = '', 
                        reference_type = 'PATH', 
                        sha1_hash = 'YQ==', ), 
                    chunk_size_bytes = '', 
                    object_location = openapi_client.models.composite_media.CompositeMedia(
                        blob_ref = 'YQ==', 
                        cosmo_binary_reference = 'YQ==', 
                        crc32c_hash = 56, 
                        inline = 'YQ==', 
                        length = '', 
                        md5_hash = 'YQ==', 
                        path = '', 
                        reference_type = 'PATH', 
                        sha1_hash = 'YQ==', ), 
                    object_size_bytes = '', 
                    object_version = '', ),
                diff_download_response = openapi_client.models.diff_download_response.DiffDownloadResponse(
                    object_location = openapi_client.models.composite_media.CompositeMedia(
                        blob_ref = 'YQ==', 
                        blobstore2_info = openapi_client.models.blobstore2_info.Blobstore2Info(
                            blob_generation = '', 
                            blob_id = '', 
                            download_read_handle = 'YQ==', 
                            read_token = '', 
                            upload_metadata_container = 'YQ==', ), 
                        cosmo_binary_reference = 'YQ==', 
                        crc32c_hash = 56, 
                        inline = 'YQ==', 
                        length = '', 
                        md5_hash = 'YQ==', 
                        object_id = openapi_client.models.object_id.ObjectId(
                            bucket_name = '', 
                            generation = '', 
                            object_name = '', ), 
                        path = '', 
                        reference_type = 'PATH', 
                        sha1_hash = 'YQ==', ), ),
                diff_upload_request = openapi_client.models.diff_upload_request.DiffUploadRequest(
                    checksums_info = openapi_client.models.composite_media.CompositeMedia(
                        blob_ref = 'YQ==', 
                        blobstore2_info = openapi_client.models.blobstore2_info.Blobstore2Info(
                            blob_generation = '', 
                            blob_id = '', 
                            download_read_handle = 'YQ==', 
                            read_token = '', 
                            upload_metadata_container = 'YQ==', ), 
                        cosmo_binary_reference = 'YQ==', 
                        crc32c_hash = 56, 
                        inline = 'YQ==', 
                        length = '', 
                        md5_hash = 'YQ==', 
                        object_id = openapi_client.models.object_id.ObjectId(
                            bucket_name = '', 
                            generation = '', 
                            object_name = '', ), 
                        path = '', 
                        reference_type = 'PATH', 
                        sha1_hash = 'YQ==', ), 
                    object_info = openapi_client.models.composite_media.CompositeMedia(
                        blob_ref = 'YQ==', 
                        cosmo_binary_reference = 'YQ==', 
                        crc32c_hash = 56, 
                        inline = 'YQ==', 
                        length = '', 
                        md5_hash = 'YQ==', 
                        path = '', 
                        reference_type = 'PATH', 
                        sha1_hash = 'YQ==', ), 
                    object_version = '', ),
                diff_upload_response = openapi_client.models.diff_upload_response.DiffUploadResponse(
                    object_version = '', 
                    original_object = openapi_client.models.composite_media.CompositeMedia(
                        blob_ref = 'YQ==', 
                        blobstore2_info = openapi_client.models.blobstore2_info.Blobstore2Info(
                            blob_generation = '', 
                            blob_id = '', 
                            download_read_handle = 'YQ==', 
                            read_token = '', 
                            upload_metadata_container = 'YQ==', ), 
                        cosmo_binary_reference = 'YQ==', 
                        crc32c_hash = 56, 
                        inline = 'YQ==', 
                        length = '', 
                        md5_hash = 'YQ==', 
                        object_id = openapi_client.models.object_id.ObjectId(
                            bucket_name = '', 
                            generation = '', 
                            object_name = '', ), 
                        path = '', 
                        reference_type = 'PATH', 
                        sha1_hash = 'YQ==', ), ),
                diff_version_response = openapi_client.models.diff_version_response.DiffVersionResponse(
                    object_size_bytes = '', 
                    object_version = '', ),
                download_parameters = openapi_client.models.download_parameters.DownloadParameters(
                    allow_gzip_compression = True, 
                    ignore_range = True, ),
                filename = '',
                hash = '',
                hash_verified = True,
                inline = 'YQ==',
                is_potential_retry = True,
                length = '',
                md5_hash = 'YQ==',
                media_id = 'YQ==',
                object_id = openapi_client.models.object_id.ObjectId(
                    bucket_name = '', 
                    generation = '', 
                    object_name = '', ),
                path = '',
                reference_type = 'PATH',
                sha1_hash = 'YQ==',
                sha256_hash = 'YQ==',
                timestamp = '',
                token = ''
            )
        else:
            return Media(
        )
        """

    def testMedia(self):
        """Test Media"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Firebase Management API

    The Firebase Management API enables programmatic setup and management of Firebase projects, including a project's Firebase resources and Firebase apps.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RemoveIosAppRequest(BaseModel):
    """
    RemoveIosAppRequest
    """ # noqa: E501
    allow_missing: Optional[StrictBool] = Field(default=None, description="If set to true, and the App is not found, the request will succeed but no action will be taken on the server.", alias="allowMissing")
    etag: Optional[StrictStr] = Field(default=None, description="Checksum provided in the IosApp resource. If provided, this checksum ensures that the client has an up-to-date value before proceeding.")
    immediate: Optional[StrictBool] = Field(default=None, description="Determines whether to _immediately_ delete the IosApp. If set to true, the App is immediately deleted from the Project and cannot be restored to the Project. If not set, defaults to false, which means the App will be set to expire in 30 days. Within the 30 days, the App may be restored to the Project using UndeleteIosApp")
    validate_only: Optional[StrictBool] = Field(default=None, description="If set to true, the request is only validated. The App will _not_ be removed.", alias="validateOnly")
    __properties: ClassVar[List[str]] = ["allowMissing", "etag", "immediate", "validateOnly"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RemoveIosAppRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RemoveIosAppRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowMissing": obj.get("allowMissing"),
            "etag": obj.get("etag"),
            "immediate": obj.get("immediate"),
            "validateOnly": obj.get("validateOnly")
        })
        return _obj



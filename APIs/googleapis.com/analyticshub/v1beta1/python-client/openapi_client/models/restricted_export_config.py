# coding: utf-8

"""
    Analytics Hub API

    Exchange data and analytics assets securely and efficiently.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RestrictedExportConfig(BaseModel):
    """
    Restricted export config, used to configure restricted export on linked dataset.
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=None, description="Optional. If true, enable restricted export.")
    restrict_direct_table_access: Optional[StrictBool] = Field(default=None, description="Output only. If true, restrict direct table access(read api/tabledata.list) on linked table.", alias="restrictDirectTableAccess")
    restrict_query_result: Optional[StrictBool] = Field(default=None, description="Optional. If true, restrict export of query result derived from restricted linked dataset table.", alias="restrictQueryResult")
    __properties: ClassVar[List[str]] = ["enabled", "restrictDirectTableAccess", "restrictQueryResult"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestrictedExportConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "restrict_direct_table_access",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestrictedExportConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled"),
            "restrictDirectTableAccess": obj.get("restrictDirectTableAccess"),
            "restrictQueryResult": obj.get("restrictQueryResult")
        })
        return _obj



# coding: utf-8

"""
    Analytics Hub API

    Exchange data and analytics assets securely and efficiently.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.linked_resource import LinkedResource
from typing import Optional, Set
from typing_extensions import Self

class Subscription(BaseModel):
    """
    A subscription represents a subscribers' access to a particular set of published data. It contains references to associated listings, data exchanges, and linked datasets.
    """ # noqa: E501
    creation_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when the subscription was created.", alias="creationTime")
    data_exchange: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of the source Data Exchange. e.g. projects/123/locations/US/dataExchanges/456", alias="dataExchange")
    last_modify_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when the subscription was last modified.", alias="lastModifyTime")
    linked_dataset_map: Optional[Dict[str, LinkedResource]] = Field(default=None, description="Output only. Map of listing resource names to associated linked resource, e.g. projects/123/locations/US/dataExchanges/456/listings/789 -> projects/123/datasets/my_dataset For listing-level subscriptions, this is a map of size 1. Only contains values if state == STATE_ACTIVE.", alias="linkedDatasetMap")
    listing: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of the source Listing. e.g. projects/123/locations/US/dataExchanges/456/listings/789")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the subscription. e.g. `projects/myproject/locations/US/subscriptions/123`.")
    organization_display_name: Optional[StrictStr] = Field(default=None, description="Output only. Display name of the project of this subscription.", alias="organizationDisplayName")
    organization_id: Optional[StrictStr] = Field(default=None, description="Output only. Organization of the project this subscription belongs to.", alias="organizationId")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Current state of the subscription.")
    subscriber_contact: Optional[StrictStr] = Field(default=None, description="Output only. Email of the subscriber.", alias="subscriberContact")
    __properties: ClassVar[List[str]] = ["creationTime", "dataExchange", "lastModifyTime", "linkedDatasetMap", "listing", "name", "organizationDisplayName", "organizationId", "state", "subscriberContact"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'STATE_ACTIVE', 'STATE_STALE', 'STATE_INACTIVE']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'STATE_ACTIVE', 'STATE_STALE', 'STATE_INACTIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Subscription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creation_time",
            "data_exchange",
            "last_modify_time",
            "linked_dataset_map",
            "listing",
            "name",
            "organization_display_name",
            "organization_id",
            "state",
            "subscriber_contact",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in linked_dataset_map (dict)
        _field_dict = {}
        if self.linked_dataset_map:
            for _key_linked_dataset_map in self.linked_dataset_map:
                if self.linked_dataset_map[_key_linked_dataset_map]:
                    _field_dict[_key_linked_dataset_map] = self.linked_dataset_map[_key_linked_dataset_map].to_dict()
            _dict['linkedDatasetMap'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Subscription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationTime": obj.get("creationTime"),
            "dataExchange": obj.get("dataExchange"),
            "lastModifyTime": obj.get("lastModifyTime"),
            "linkedDatasetMap": dict(
                (_k, LinkedResource.from_dict(_v))
                for _k, _v in obj["linkedDatasetMap"].items()
            )
            if obj.get("linkedDatasetMap") is not None
            else None,
            "listing": obj.get("listing"),
            "name": obj.get("name"),
            "organizationDisplayName": obj.get("organizationDisplayName"),
            "organizationId": obj.get("organizationId"),
            "state": obj.get("state"),
            "subscriberContact": obj.get("subscriberContact")
        })
        return _obj



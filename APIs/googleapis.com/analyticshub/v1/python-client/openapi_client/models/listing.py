# coding: utf-8

"""
    Analytics Hub API

    Exchange data and analytics assets securely and efficiently.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.big_query_dataset_source import BigQueryDatasetSource
from openapi_client.models.data_provider import DataProvider
from openapi_client.models.publisher import Publisher
from openapi_client.models.restricted_export_config import RestrictedExportConfig
from typing import Optional, Set
from typing_extensions import Self

class Listing(BaseModel):
    """
    A listing is what gets published into a data exchange that a subscriber can subscribe to. It contains a reference to the data source along with descriptive information that will help subscribers find and subscribe the data.
    """ # noqa: E501
    bigquery_dataset: Optional[BigQueryDatasetSource] = Field(default=None, alias="bigqueryDataset")
    categories: Optional[List[StrictStr]] = Field(default=None, description="Optional. Categories of the listing. Up to two categories are allowed.")
    data_provider: Optional[DataProvider] = Field(default=None, alias="dataProvider")
    description: Optional[StrictStr] = Field(default=None, description="Optional. Short description of the listing. The description must not contain Unicode non-characters and C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF). Default value is an empty string. Max length: 2000 bytes.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. Human-readable display name of the listing. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&) and can't start or end with spaces. Default value is an empty string. Max length: 63 bytes.", alias="displayName")
    documentation: Optional[StrictStr] = Field(default=None, description="Optional. Documentation describing the listing.")
    icon: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Optional. Base64 encoded image representing the listing. Max Size: 3.0MiB Expected image dimensions are 512x512 pixels, however the API only performs validation on size of the encoded data. Note: For byte fields, the contents of the field are base64-encoded (which increases the size of the data by 33-36%) when using JSON on the wire.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the listing. e.g. `projects/myproject/locations/US/dataExchanges/123/listings/456`")
    primary_contact: Optional[StrictStr] = Field(default=None, description="Optional. Email or URL of the primary point of contact of the listing. Max Length: 1000 bytes.", alias="primaryContact")
    publisher: Optional[Publisher] = None
    request_access: Optional[StrictStr] = Field(default=None, description="Optional. Email or URL of the request access of the listing. Subscribers can use this reference to request access. Max Length: 1000 bytes.", alias="requestAccess")
    restricted_export_config: Optional[RestrictedExportConfig] = Field(default=None, alias="restrictedExportConfig")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Current state of the listing.")
    __properties: ClassVar[List[str]] = ["bigqueryDataset", "categories", "dataProvider", "description", "displayName", "documentation", "icon", "name", "primaryContact", "publisher", "requestAccess", "restrictedExportConfig", "state"]

    @field_validator('categories')
    def categories_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['CATEGORY_UNSPECIFIED', 'CATEGORY_OTHERS', 'CATEGORY_ADVERTISING_AND_MARKETING', 'CATEGORY_COMMERCE', 'CATEGORY_CLIMATE_AND_ENVIRONMENT', 'CATEGORY_DEMOGRAPHICS', 'CATEGORY_ECONOMICS', 'CATEGORY_EDUCATION', 'CATEGORY_ENERGY', 'CATEGORY_FINANCIAL', 'CATEGORY_GAMING', 'CATEGORY_GEOSPATIAL', 'CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE', 'CATEGORY_MEDIA', 'CATEGORY_PUBLIC_SECTOR', 'CATEGORY_RETAIL', 'CATEGORY_SPORTS', 'CATEGORY_SCIENCE_AND_RESEARCH', 'CATEGORY_TRANSPORTATION_AND_LOGISTICS', 'CATEGORY_TRAVEL_AND_TOURISM']):
                raise ValueError("each list item must be one of ('CATEGORY_UNSPECIFIED', 'CATEGORY_OTHERS', 'CATEGORY_ADVERTISING_AND_MARKETING', 'CATEGORY_COMMERCE', 'CATEGORY_CLIMATE_AND_ENVIRONMENT', 'CATEGORY_DEMOGRAPHICS', 'CATEGORY_ECONOMICS', 'CATEGORY_EDUCATION', 'CATEGORY_ENERGY', 'CATEGORY_FINANCIAL', 'CATEGORY_GAMING', 'CATEGORY_GEOSPATIAL', 'CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE', 'CATEGORY_MEDIA', 'CATEGORY_PUBLIC_SECTOR', 'CATEGORY_RETAIL', 'CATEGORY_SPORTS', 'CATEGORY_SCIENCE_AND_RESEARCH', 'CATEGORY_TRANSPORTATION_AND_LOGISTICS', 'CATEGORY_TRAVEL_AND_TOURISM')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Listing from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bigquery_dataset
        if self.bigquery_dataset:
            _dict['bigqueryDataset'] = self.bigquery_dataset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_provider
        if self.data_provider:
            _dict['dataProvider'] = self.data_provider.to_dict()
        # override the default output from pydantic by calling `to_dict()` of publisher
        if self.publisher:
            _dict['publisher'] = self.publisher.to_dict()
        # override the default output from pydantic by calling `to_dict()` of restricted_export_config
        if self.restricted_export_config:
            _dict['restrictedExportConfig'] = self.restricted_export_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Listing from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bigqueryDataset": BigQueryDatasetSource.from_dict(obj["bigqueryDataset"]) if obj.get("bigqueryDataset") is not None else None,
            "categories": obj.get("categories"),
            "dataProvider": DataProvider.from_dict(obj["dataProvider"]) if obj.get("dataProvider") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "documentation": obj.get("documentation"),
            "icon": obj.get("icon"),
            "name": obj.get("name"),
            "primaryContact": obj.get("primaryContact"),
            "publisher": Publisher.from_dict(obj["publisher"]) if obj.get("publisher") is not None else None,
            "requestAccess": obj.get("requestAccess"),
            "restrictedExportConfig": RestrictedExportConfig.from_dict(obj["restrictedExportConfig"]) if obj.get("restrictedExportConfig") is not None else None,
            "state": obj.get("state")
        })
        return _obj



# coding: utf-8

"""
    Analytics Hub API

    Exchange data and analytics assets securely and efficiently.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.sharing_environment_config import SharingEnvironmentConfig
from typing import Optional, Set
from typing_extensions import Self

class DataExchange(BaseModel):
    """
    A data exchange is a container that lets you share data. Along with the descriptive information about the data exchange, it contains listings that reference shared datasets.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Optional. Description of the data exchange. The description must not contain Unicode non-characters as well as C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF). Default value is an empty string. Max length: 2000 bytes.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. Human-readable display name of the data exchange. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&) and must not start or end with spaces. Default value is an empty string. Max length: 63 bytes.", alias="displayName")
    documentation: Optional[StrictStr] = Field(default=None, description="Optional. Documentation describing the data exchange.")
    icon: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Optional. Base64 encoded image representing the data exchange. Max Size: 3.0MiB Expected image dimensions are 512x512 pixels, however the API only performs validation on size of the encoded data. Note: For byte fields, the content of the fields are base64-encoded (which increases the size of the data by 33-36%) when using JSON on the wire.")
    listing_count: Optional[StrictInt] = Field(default=None, description="Output only. Number of listings contained in the data exchange.", alias="listingCount")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the data exchange. e.g. `projects/myproject/locations/US/dataExchanges/123`.")
    primary_contact: Optional[StrictStr] = Field(default=None, description="Optional. Email or URL of the primary point of contact of the data exchange. Max Length: 1000 bytes.", alias="primaryContact")
    sharing_environment_config: Optional[SharingEnvironmentConfig] = Field(default=None, alias="sharingEnvironmentConfig")
    __properties: ClassVar[List[str]] = ["description", "displayName", "documentation", "icon", "listingCount", "name", "primaryContact", "sharingEnvironmentConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataExchange from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "listing_count",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sharing_environment_config
        if self.sharing_environment_config:
            _dict['sharingEnvironmentConfig'] = self.sharing_environment_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataExchange from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "documentation": obj.get("documentation"),
            "icon": obj.get("icon"),
            "listingCount": obj.get("listingCount"),
            "name": obj.get("name"),
            "primaryContact": obj.get("primaryContact"),
            "sharingEnvironmentConfig": SharingEnvironmentConfig.from_dict(obj["sharingEnvironmentConfig"]) if obj.get("sharingEnvironmentConfig") is not None else None
        })
        return _obj



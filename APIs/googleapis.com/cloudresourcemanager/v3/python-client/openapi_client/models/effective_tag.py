# coding: utf-8

"""
    Cloud Resource Manager API

    Creates, reads, and updates metadata for Google Cloud Platform resource containers.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EffectiveTag(BaseModel):
    """
    An EffectiveTag represents a tag that applies to a resource during policy evaluation. Tags can be either directly bound to a resource or inherited from its ancestor. EffectiveTag contains the name and namespaced_name of the tag value and tag key, with additional fields of `inherited` to indicate the inheritance status of the effective tag.
    """ # noqa: E501
    inherited: Optional[StrictBool] = Field(default=None, description="Indicates the inheritance status of a tag value attached to the given resource. If the tag value is inherited from one of the resource's ancestors, inherited will be true. If false, then the tag value is directly attached to the resource, inherited will be false.")
    namespaced_tag_key: Optional[StrictStr] = Field(default=None, description="The namespaced name of the TagKey. Can be in the form `{organization_id}/{tag_key_short_name}` or `{project_id}/{tag_key_short_name}` or `{project_number}/{tag_key_short_name}`.", alias="namespacedTagKey")
    namespaced_tag_value: Optional[StrictStr] = Field(default=None, description="The namespaced name of the TagValue. Can be in the form `{organization_id}/{tag_key_short_name}/{tag_value_short_name}` or `{project_id}/{tag_key_short_name}/{tag_value_short_name}` or `{project_number}/{tag_key_short_name}/{tag_value_short_name}`.", alias="namespacedTagValue")
    tag_key: Optional[StrictStr] = Field(default=None, description="The name of the TagKey, in the format `tagKeys/{id}`, such as `tagKeys/123`.", alias="tagKey")
    tag_key_parent_name: Optional[StrictStr] = Field(default=None, description="The parent name of the tag key. Must be in the format `organizations/{organization_id}` or `projects/{project_number}`", alias="tagKeyParentName")
    tag_value: Optional[StrictStr] = Field(default=None, description="Resource name for TagValue in the format `tagValues/456`.", alias="tagValue")
    __properties: ClassVar[List[str]] = ["inherited", "namespacedTagKey", "namespacedTagValue", "tagKey", "tagKeyParentName", "tagValue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EffectiveTag from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EffectiveTag from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "inherited": obj.get("inherited"),
            "namespacedTagKey": obj.get("namespacedTagKey"),
            "namespacedTagValue": obj.get("namespacedTagValue"),
            "tagKey": obj.get("tagKey"),
            "tagKeyParentName": obj.get("tagKeyParentName"),
            "tagValue": obj.get("tagValue")
        })
        return _obj



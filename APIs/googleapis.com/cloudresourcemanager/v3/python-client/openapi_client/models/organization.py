# coding: utf-8

"""
    Cloud Resource Manager API

    Creates, reads, and updates metadata for Google Cloud Platform resource containers.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Organization(BaseModel):
    """
    The root node in the resource hierarchy to which a particular entity's (a company, for example) resources belong.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when the Organization was created.", alias="createTime")
    delete_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when the Organization was requested for deletion.", alias="deleteTime")
    directory_customer_id: Optional[StrictStr] = Field(default=None, description="Immutable. The G Suite / Workspace customer id used in the Directory API.", alias="directoryCustomerId")
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. A human-readable string that refers to the organization in the Google Cloud Console. This string is set by the server and cannot be changed. The string will be set to the primary domain (for example, \"google.com\") of the Google Workspace customer that owns the organization.", alias="displayName")
    etag: Optional[StrictStr] = Field(default=None, description="Output only. A checksum computed by the server based on the current value of the Organization resource. This may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the organization. This is the organization's relative path in the API. Its format is \"organizations/[organization_id]\". For example, \"organizations/1234\".")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The organization's current lifecycle state.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when the Organization was last modified.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "deleteTime", "directoryCustomerId", "displayName", "etag", "name", "state", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'DELETE_REQUESTED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'DELETE_REQUESTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Organization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "delete_time",
            "display_name",
            "etag",
            "name",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Organization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "deleteTime": obj.get("deleteTime"),
            "directoryCustomerId": obj.get("directoryCustomerId"),
            "displayName": obj.get("displayName"),
            "etag": obj.get("etag"),
            "name": obj.get("name"),
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



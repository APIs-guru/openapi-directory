# coding: utf-8

"""
    Cloud Resource Manager API

    Creates, reads, and updates metadata for Google Cloud Platform resource containers.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.cloudresourcemanager_google_cloud_resourcemanager_v2alpha1_folder_operation import CloudresourcemanagerGoogleCloudResourcemanagerV2alpha1FolderOperation

class TestCloudresourcemanagerGoogleCloudResourcemanagerV2alpha1FolderOperation(unittest.TestCase):
    """CloudresourcemanagerGoogleCloudResourcemanagerV2alpha1FolderOperation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CloudresourcemanagerGoogleCloudResourcemanagerV2alpha1FolderOperation:
        """Test CloudresourcemanagerGoogleCloudResourcemanagerV2alpha1FolderOperation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CloudresourcemanagerGoogleCloudResourcemanagerV2alpha1FolderOperation`
        """
        model = CloudresourcemanagerGoogleCloudResourcemanagerV2alpha1FolderOperation()
        if include_optional:
            return CloudresourcemanagerGoogleCloudResourcemanagerV2alpha1FolderOperation(
                destination_parent = '',
                display_name = '',
                operation_type = 'OPERATION_TYPE_UNSPECIFIED',
                source_parent = ''
            )
        else:
            return CloudresourcemanagerGoogleCloudResourcemanagerV2alpha1FolderOperation(
        )
        """

    def testCloudresourcemanagerGoogleCloudResourcemanagerV2alpha1FolderOperation(self):
        """Test CloudresourcemanagerGoogleCloudResourcemanagerV2alpha1FolderOperation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

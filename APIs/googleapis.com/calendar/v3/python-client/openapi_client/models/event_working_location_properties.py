# coding: utf-8

"""
    Calendar API

    Manipulates events and other calendar data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.event_working_location_properties_custom_location import EventWorkingLocationPropertiesCustomLocation
from openapi_client.models.event_working_location_properties_office_location import EventWorkingLocationPropertiesOfficeLocation
from typing import Optional, Set
from typing_extensions import Self

class EventWorkingLocationProperties(BaseModel):
    """
    EventWorkingLocationProperties
    """ # noqa: E501
    custom_location: Optional[EventWorkingLocationPropertiesCustomLocation] = Field(default=None, alias="customLocation")
    home_office: Optional[Any] = Field(default=None, description="If present, specifies that the user is working at home.", alias="homeOffice")
    office_location: Optional[EventWorkingLocationPropertiesOfficeLocation] = Field(default=None, alias="officeLocation")
    type: Optional[StrictStr] = Field(default=None, description="Type of the working location. Possible values are:   - \"homeOffice\" - The user is working at home.  - \"officeLocation\" - The user is working from an office.  - \"customLocation\" - The user is working from a custom location.  Any details are specified in a sub-field of the specified name, but this field may be missing if empty. Any other fields are ignored. Required when adding working location properties.")
    __properties: ClassVar[List[str]] = ["customLocation", "homeOffice", "officeLocation", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventWorkingLocationProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_location
        if self.custom_location:
            _dict['customLocation'] = self.custom_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of office_location
        if self.office_location:
            _dict['officeLocation'] = self.office_location.to_dict()
        # set to None if home_office (nullable) is None
        # and model_fields_set contains the field
        if self.home_office is None and "home_office" in self.model_fields_set:
            _dict['homeOffice'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventWorkingLocationProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customLocation": EventWorkingLocationPropertiesCustomLocation.from_dict(obj["customLocation"]) if obj.get("customLocation") is not None else None,
            "homeOffice": obj.get("homeOffice"),
            "officeLocation": EventWorkingLocationPropertiesOfficeLocation.from_dict(obj["officeLocation"]) if obj.get("officeLocation") is not None else None,
            "type": obj.get("type")
        })
        return _obj



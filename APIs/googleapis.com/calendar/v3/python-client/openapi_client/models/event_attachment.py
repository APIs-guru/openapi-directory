# coding: utf-8

"""
    Calendar API

    Manipulates events and other calendar data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EventAttachment(BaseModel):
    """
    EventAttachment
    """ # noqa: E501
    file_id: Optional[StrictStr] = Field(default=None, description="ID of the attached file. Read-only. For Google Drive files, this is the ID of the corresponding Files resource entry in the Drive API.", alias="fileId")
    file_url: Optional[StrictStr] = Field(default=None, description="URL link to the attachment. For adding Google Drive file attachments use the same format as in alternateLink property of the Files resource in the Drive API. Required when adding an attachment.", alias="fileUrl")
    icon_link: Optional[StrictStr] = Field(default=None, description="URL link to the attachment's icon. This field can only be modified for custom third-party attachments.", alias="iconLink")
    mime_type: Optional[StrictStr] = Field(default=None, description="Internet media type (MIME type) of the attachment.", alias="mimeType")
    title: Optional[StrictStr] = Field(default=None, description="Attachment title.")
    __properties: ClassVar[List[str]] = ["fileId", "fileUrl", "iconLink", "mimeType", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventAttachment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventAttachment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fileId": obj.get("fileId"),
            "fileUrl": obj.get("fileUrl"),
            "iconLink": obj.get("iconLink"),
            "mimeType": obj.get("mimeType"),
            "title": obj.get("title")
        })
        return _obj



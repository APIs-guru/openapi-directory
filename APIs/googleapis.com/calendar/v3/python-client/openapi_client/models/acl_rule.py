# coding: utf-8

"""
    Calendar API

    Manipulates events and other calendar data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.acl_rule_scope import AclRuleScope
from typing import Optional, Set
from typing_extensions import Self

class AclRule(BaseModel):
    """
    AclRule
    """ # noqa: E501
    etag: Optional[StrictStr] = Field(default=None, description="ETag of the resource.")
    id: Optional[StrictStr] = Field(default=None, description="Identifier of the Access Control List (ACL) rule. See Sharing calendars.")
    kind: Optional[StrictStr] = Field(default='calendar#aclRule', description="Type of the resource (\"calendar#aclRule\").")
    role: Optional[StrictStr] = Field(default=None, description="The role assigned to the scope. Possible values are:   - \"none\" - Provides no access.  - \"freeBusyReader\" - Provides read access to free/busy information.  - \"reader\" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden.  - \"writer\" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible.  - \"owner\" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.")
    scope: Optional[AclRuleScope] = None
    __properties: ClassVar[List[str]] = ["etag", "id", "kind", "role", "scope"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AclRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of scope
        if self.scope:
            _dict['scope'] = self.scope.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AclRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "etag": obj.get("etag"),
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'calendar#aclRule',
            "role": obj.get("role"),
            "scope": AclRuleScope.from_dict(obj["scope"]) if obj.get("scope") is not None else None
        })
        return _obj



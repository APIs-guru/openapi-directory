# coding: utf-8

"""
    Calendar API

    Manipulates events and other calendar data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.calendar_list_entry_notification_settings import CalendarListEntryNotificationSettings
from openapi_client.models.conference_properties import ConferenceProperties
from openapi_client.models.event_reminder import EventReminder
from typing import Optional, Set
from typing_extensions import Self

class CalendarListEntry(BaseModel):
    """
    CalendarListEntry
    """ # noqa: E501
    access_role: Optional[StrictStr] = Field(default=None, description="The effective access role that the authenticated user has on the calendar. Read-only. Possible values are:   - \"freeBusyReader\" - Provides read access to free/busy information.  - \"reader\" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden.  - \"writer\" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible.  - \"owner\" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.", alias="accessRole")
    background_color: Optional[StrictStr] = Field(default=None, description="The main color of the calendar in the hexadecimal format \"#0088aa\". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional.", alias="backgroundColor")
    color_id: Optional[StrictStr] = Field(default=None, description="The color of the calendar. This is an ID referring to an entry in the calendar section of the colors definition (see the colors endpoint). This property is superseded by the backgroundColor and foregroundColor properties and can be ignored when using these properties. Optional.", alias="colorId")
    conference_properties: Optional[ConferenceProperties] = Field(default=None, alias="conferenceProperties")
    default_reminders: Optional[List[EventReminder]] = Field(default=None, description="The default reminders that the authenticated user has for this calendar.", alias="defaultReminders")
    deleted: Optional[StrictBool] = Field(default=False, description="Whether this calendar list entry has been deleted from the calendar list. Read-only. Optional. The default is False.")
    description: Optional[StrictStr] = Field(default=None, description="Description of the calendar. Optional. Read-only.")
    etag: Optional[StrictStr] = Field(default=None, description="ETag of the resource.")
    foreground_color: Optional[StrictStr] = Field(default=None, description="The foreground color of the calendar in the hexadecimal format \"#ffffff\". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional.", alias="foregroundColor")
    hidden: Optional[StrictBool] = Field(default=False, description="Whether the calendar has been hidden from the list. Optional. The attribute is only returned when the calendar is hidden, in which case the value is true.")
    id: Optional[StrictStr] = Field(default=None, description="Identifier of the calendar.")
    kind: Optional[StrictStr] = Field(default='calendar#calendarListEntry', description="Type of the resource (\"calendar#calendarListEntry\").")
    location: Optional[StrictStr] = Field(default=None, description="Geographic location of the calendar as free-form text. Optional. Read-only.")
    notification_settings: Optional[CalendarListEntryNotificationSettings] = Field(default=None, alias="notificationSettings")
    primary: Optional[StrictBool] = Field(default=False, description="Whether the calendar is the primary calendar of the authenticated user. Read-only. Optional. The default is False.")
    selected: Optional[StrictBool] = Field(default=False, description="Whether the calendar content shows up in the calendar UI. Optional. The default is False.")
    summary: Optional[StrictStr] = Field(default=None, description="Title of the calendar. Read-only.")
    summary_override: Optional[StrictStr] = Field(default=None, description="The summary that the authenticated user has set for this calendar. Optional.", alias="summaryOverride")
    time_zone: Optional[StrictStr] = Field(default=None, description="The time zone of the calendar. Optional. Read-only.", alias="timeZone")
    __properties: ClassVar[List[str]] = ["accessRole", "backgroundColor", "colorId", "conferenceProperties", "defaultReminders", "deleted", "description", "etag", "foregroundColor", "hidden", "id", "kind", "location", "notificationSettings", "primary", "selected", "summary", "summaryOverride", "timeZone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CalendarListEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of conference_properties
        if self.conference_properties:
            _dict['conferenceProperties'] = self.conference_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in default_reminders (list)
        _items = []
        if self.default_reminders:
            for _item_default_reminders in self.default_reminders:
                if _item_default_reminders:
                    _items.append(_item_default_reminders.to_dict())
            _dict['defaultReminders'] = _items
        # override the default output from pydantic by calling `to_dict()` of notification_settings
        if self.notification_settings:
            _dict['notificationSettings'] = self.notification_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CalendarListEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessRole": obj.get("accessRole"),
            "backgroundColor": obj.get("backgroundColor"),
            "colorId": obj.get("colorId"),
            "conferenceProperties": ConferenceProperties.from_dict(obj["conferenceProperties"]) if obj.get("conferenceProperties") is not None else None,
            "defaultReminders": [EventReminder.from_dict(_item) for _item in obj["defaultReminders"]] if obj.get("defaultReminders") is not None else None,
            "deleted": obj.get("deleted") if obj.get("deleted") is not None else False,
            "description": obj.get("description"),
            "etag": obj.get("etag"),
            "foregroundColor": obj.get("foregroundColor"),
            "hidden": obj.get("hidden") if obj.get("hidden") is not None else False,
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'calendar#calendarListEntry',
            "location": obj.get("location"),
            "notificationSettings": CalendarListEntryNotificationSettings.from_dict(obj["notificationSettings"]) if obj.get("notificationSettings") is not None else None,
            "primary": obj.get("primary") if obj.get("primary") is not None else False,
            "selected": obj.get("selected") if obj.get("selected") is not None else False,
            "summary": obj.get("summary"),
            "summaryOverride": obj.get("summaryOverride"),
            "timeZone": obj.get("timeZone")
        })
        return _obj



# coding: utf-8

"""
    Calendar API

    Manipulates events and other calendar data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EventAttendee(BaseModel):
    """
    EventAttendee
    """ # noqa: E501
    additional_guests: Optional[StrictInt] = Field(default=0, description="Number of additional guests. Optional. The default is 0.", alias="additionalGuests")
    comment: Optional[StrictStr] = Field(default=None, description="The attendee's response comment. Optional.")
    display_name: Optional[StrictStr] = Field(default=None, description="The attendee's name, if available. Optional.", alias="displayName")
    email: Optional[StrictStr] = Field(default=None, description="The attendee's email address, if available. This field must be present when adding an attendee. It must be a valid email address as per RFC5322. Required when adding an attendee.")
    id: Optional[StrictStr] = Field(default=None, description="The attendee's Profile ID, if available.")
    optional: Optional[StrictBool] = Field(default=False, description="Whether this is an optional attendee. Optional. The default is False.")
    organizer: Optional[StrictBool] = Field(default=None, description="Whether the attendee is the organizer of the event. Read-only. The default is False.")
    resource: Optional[StrictBool] = Field(default=False, description="Whether the attendee is a resource. Can only be set when the attendee is added to the event for the first time. Subsequent modifications are ignored. Optional. The default is False.")
    response_status: Optional[StrictStr] = Field(default=None, description="The attendee's response status. Possible values are:   - \"needsAction\" - The attendee has not responded to the invitation (recommended for new events).  - \"declined\" - The attendee has declined the invitation.  - \"tentative\" - The attendee has tentatively accepted the invitation.  - \"accepted\" - The attendee has accepted the invitation.  Warning: If you add an event using the values declined, tentative, or accepted, attendees with the \"Add invitations to my calendar\" setting set to \"When I respond to invitation in email\" won't see an event on their calendar unless they choose to change their invitation response in the event invitation email.", alias="responseStatus")
    var_self: Optional[StrictBool] = Field(default=False, description="Whether this entry represents the calendar on which this copy of the event appears. Read-only. The default is False.", alias="self")
    __properties: ClassVar[List[str]] = ["additionalGuests", "comment", "displayName", "email", "id", "optional", "organizer", "resource", "responseStatus", "self"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventAttendee from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventAttendee from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalGuests": obj.get("additionalGuests") if obj.get("additionalGuests") is not None else 0,
            "comment": obj.get("comment"),
            "displayName": obj.get("displayName"),
            "email": obj.get("email"),
            "id": obj.get("id"),
            "optional": obj.get("optional") if obj.get("optional") is not None else False,
            "organizer": obj.get("organizer"),
            "resource": obj.get("resource") if obj.get("resource") is not None else False,
            "responseStatus": obj.get("responseStatus"),
            "self": obj.get("self") if obj.get("self") is not None else False
        })
        return _obj



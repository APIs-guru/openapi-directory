# coding: utf-8

"""
    Calendar API

    Manipulates events and other calendar data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.conference_parameters import ConferenceParameters
from openapi_client.models.conference_solution import ConferenceSolution
from openapi_client.models.create_conference_request import CreateConferenceRequest
from openapi_client.models.entry_point import EntryPoint
from typing import Optional, Set
from typing_extensions import Self

class ConferenceData(BaseModel):
    """
    ConferenceData
    """ # noqa: E501
    conference_id: Optional[StrictStr] = Field(default=None, description="The ID of the conference. Can be used by developers to keep track of conferences, should not be displayed to users. The ID value is formed differently for each conference solution type:   - eventHangout: ID is not set. (This conference type is deprecated.) - eventNamedHangout: ID is the name of the Hangout. (This conference type is deprecated.) - hangoutsMeet: ID is the 10-letter meeting code, for example aaa-bbbb-ccc. - addOn: ID is defined by the third-party provider.  Optional.", alias="conferenceId")
    conference_solution: Optional[ConferenceSolution] = Field(default=None, alias="conferenceSolution")
    create_request: Optional[CreateConferenceRequest] = Field(default=None, alias="createRequest")
    entry_points: Optional[List[EntryPoint]] = Field(default=None, description="Information about individual conference entry points, such as URLs or phone numbers. All of them must belong to the same conference. Either conferenceSolution and at least one entryPoint, or createRequest is required.", alias="entryPoints")
    notes: Optional[StrictStr] = Field(default=None, description="Additional notes (such as instructions from the domain administrator, legal notices) to display to the user. Can contain HTML. The maximum length is 2048 characters. Optional.")
    parameters: Optional[ConferenceParameters] = None
    signature: Optional[StrictStr] = Field(default=None, description="The signature of the conference data. Generated on server side. Unset for a conference with a failed create request. Optional for a conference with a pending create request.")
    __properties: ClassVar[List[str]] = ["conferenceId", "conferenceSolution", "createRequest", "entryPoints", "notes", "parameters", "signature"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConferenceData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of conference_solution
        if self.conference_solution:
            _dict['conferenceSolution'] = self.conference_solution.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_request
        if self.create_request:
            _dict['createRequest'] = self.create_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in entry_points (list)
        _items = []
        if self.entry_points:
            for _item_entry_points in self.entry_points:
                if _item_entry_points:
                    _items.append(_item_entry_points.to_dict())
            _dict['entryPoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of parameters
        if self.parameters:
            _dict['parameters'] = self.parameters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConferenceData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conferenceId": obj.get("conferenceId"),
            "conferenceSolution": ConferenceSolution.from_dict(obj["conferenceSolution"]) if obj.get("conferenceSolution") is not None else None,
            "createRequest": CreateConferenceRequest.from_dict(obj["createRequest"]) if obj.get("createRequest") is not None else None,
            "entryPoints": [EntryPoint.from_dict(_item) for _item in obj["entryPoints"]] if obj.get("entryPoints") is not None else None,
            "notes": obj.get("notes"),
            "parameters": ConferenceParameters.from_dict(obj["parameters"]) if obj.get("parameters") is not None else None,
            "signature": obj.get("signature")
        })
        return _obj



# coding: utf-8

"""
    Calendar API

    Manipulates events and other calendar data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EntryPoint(BaseModel):
    """
    EntryPoint
    """ # noqa: E501
    access_code: Optional[StrictStr] = Field(default=None, description="The access code to access the conference. The maximum length is 128 characters. When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed. Optional.", alias="accessCode")
    entry_point_features: Optional[List[StrictStr]] = Field(default=None, description="Features of the entry point, such as being toll or toll-free. One entry point can have multiple features. However, toll and toll-free cannot be both set on the same entry point.", alias="entryPointFeatures")
    entry_point_type: Optional[StrictStr] = Field(default=None, description="The type of the conference entry point. Possible values are:   - \"video\" - joining a conference over HTTP. A conference can have zero or one video entry point. - \"phone\" - joining a conference by dialing a phone number. A conference can have zero or more phone entry points. - \"sip\" - joining a conference over SIP. A conference can have zero or one sip entry point. - \"more\" - further conference joining instructions, for example additional phone numbers. A conference can have zero or one more entry point. A conference with only a more entry point is not a valid conference.", alias="entryPointType")
    label: Optional[StrictStr] = Field(default=None, description="The label for the URI. Visible to end users. Not localized. The maximum length is 512 characters. Examples:   - for video: meet.google.com/aaa-bbbb-ccc - for phone: +1 123 268 2601 - for sip: 12345678@altostrat.com - for more: should not be filled   Optional.")
    meeting_code: Optional[StrictStr] = Field(default=None, description="The meeting code to access the conference. The maximum length is 128 characters. When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed. Optional.", alias="meetingCode")
    passcode: Optional[StrictStr] = Field(default=None, description="The passcode to access the conference. The maximum length is 128 characters. When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed.")
    password: Optional[StrictStr] = Field(default=None, description="The password to access the conference. The maximum length is 128 characters. When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed. Optional.")
    pin: Optional[StrictStr] = Field(default=None, description="The PIN to access the conference. The maximum length is 128 characters. When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed. Optional.")
    region_code: Optional[StrictStr] = Field(default=None, description="The CLDR/ISO 3166 region code for the country associated with this phone access. Example: \"SE\" for Sweden. Calendar backend will populate this field only for EntryPointType.PHONE.", alias="regionCode")
    uri: Optional[StrictStr] = Field(default=None, description="The URI of the entry point. The maximum length is 1300 characters. Format:   - for video, http: or https: schema is required. - for phone, tel: schema is required. The URI should include the entire dial sequence (e.g., tel:+12345678900,,,123456789;1234). - for sip, sip: schema is required, e.g., sip:12345678@myprovider.com. - for more, http: or https: schema is required.")
    __properties: ClassVar[List[str]] = ["accessCode", "entryPointFeatures", "entryPointType", "label", "meetingCode", "passcode", "password", "pin", "regionCode", "uri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EntryPoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EntryPoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessCode": obj.get("accessCode"),
            "entryPointFeatures": obj.get("entryPointFeatures"),
            "entryPointType": obj.get("entryPointType"),
            "label": obj.get("label"),
            "meetingCode": obj.get("meetingCode"),
            "passcode": obj.get("passcode"),
            "password": obj.get("password"),
            "pin": obj.get("pin"),
            "regionCode": obj.get("regionCode"),
            "uri": obj.get("uri")
        })
        return _obj



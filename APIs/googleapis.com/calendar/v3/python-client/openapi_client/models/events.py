# coding: utf-8

"""
    Calendar API

    Manipulates events and other calendar data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.event import Event
from openapi_client.models.event_reminder import EventReminder
from typing import Optional, Set
from typing_extensions import Self

class Events(BaseModel):
    """
    Events
    """ # noqa: E501
    access_role: Optional[StrictStr] = Field(default=None, description="The user's access role for this calendar. Read-only. Possible values are:   - \"none\" - The user has no access.  - \"freeBusyReader\" - The user has read access to free/busy information.  - \"reader\" - The user has read access to the calendar. Private events will appear to users with reader access, but event details will be hidden.  - \"writer\" - The user has read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible.  - \"owner\" - The user has ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.", alias="accessRole")
    default_reminders: Optional[List[EventReminder]] = Field(default=None, description="The default reminders on the calendar for the authenticated user. These reminders apply to all events on this calendar that do not explicitly override them (i.e. do not have reminders.useDefault set to True).", alias="defaultReminders")
    description: Optional[StrictStr] = Field(default=None, description="Description of the calendar. Read-only.")
    etag: Optional[StrictStr] = Field(default=None, description="ETag of the collection.")
    items: Optional[List[Event]] = Field(default=None, description="List of events on the calendar.")
    kind: Optional[StrictStr] = Field(default='calendar#events', description="Type of the collection (\"calendar#events\").")
    next_page_token: Optional[StrictStr] = Field(default=None, description="Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided.", alias="nextPageToken")
    next_sync_token: Optional[StrictStr] = Field(default=None, description="Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided.", alias="nextSyncToken")
    summary: Optional[StrictStr] = Field(default=None, description="Title of the calendar. Read-only.")
    time_zone: Optional[StrictStr] = Field(default=None, description="The time zone of the calendar. Read-only.", alias="timeZone")
    updated: Optional[datetime] = Field(default=None, description="Last modification time of the calendar (as a RFC3339 timestamp). Read-only.")
    __properties: ClassVar[List[str]] = ["accessRole", "defaultReminders", "description", "etag", "items", "kind", "nextPageToken", "nextSyncToken", "summary", "timeZone", "updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Events from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in default_reminders (list)
        _items = []
        if self.default_reminders:
            for _item_default_reminders in self.default_reminders:
                if _item_default_reminders:
                    _items.append(_item_default_reminders.to_dict())
            _dict['defaultReminders'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Events from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessRole": obj.get("accessRole"),
            "defaultReminders": [EventReminder.from_dict(_item) for _item in obj["defaultReminders"]] if obj.get("defaultReminders") is not None else None,
            "description": obj.get("description"),
            "etag": obj.get("etag"),
            "items": [Event.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "kind": obj.get("kind") if obj.get("kind") is not None else 'calendar#events',
            "nextPageToken": obj.get("nextPageToken"),
            "nextSyncToken": obj.get("nextSyncToken"),
            "summary": obj.get("summary"),
            "timeZone": obj.get("timeZone"),
            "updated": obj.get("updated")
        })
        return _obj



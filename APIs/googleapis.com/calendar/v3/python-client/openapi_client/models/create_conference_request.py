# coding: utf-8

"""
    Calendar API

    Manipulates events and other calendar data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.conference_request_status import ConferenceRequestStatus
from openapi_client.models.conference_solution_key import ConferenceSolutionKey
from typing import Optional, Set
from typing_extensions import Self

class CreateConferenceRequest(BaseModel):
    """
    CreateConferenceRequest
    """ # noqa: E501
    conference_solution_key: Optional[ConferenceSolutionKey] = Field(default=None, alias="conferenceSolutionKey")
    request_id: Optional[StrictStr] = Field(default=None, description="The client-generated unique ID for this request. Clients should regenerate this ID for every new request. If an ID provided is the same as for the previous request, the request is ignored.", alias="requestId")
    status: Optional[ConferenceRequestStatus] = None
    __properties: ClassVar[List[str]] = ["conferenceSolutionKey", "requestId", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateConferenceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of conference_solution_key
        if self.conference_solution_key:
            _dict['conferenceSolutionKey'] = self.conference_solution_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateConferenceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conferenceSolutionKey": ConferenceSolutionKey.from_dict(obj["conferenceSolutionKey"]) if obj.get("conferenceSolutionKey") is not None else None,
            "requestId": obj.get("requestId"),
            "status": ConferenceRequestStatus.from_dict(obj["status"]) if obj.get("status") is not None else None
        })
        return _obj



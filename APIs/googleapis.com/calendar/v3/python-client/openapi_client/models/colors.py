# coding: utf-8

"""
    Calendar API

    Manipulates events and other calendar data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.color_definition import ColorDefinition
from typing import Optional, Set
from typing_extensions import Self

class Colors(BaseModel):
    """
    Colors
    """ # noqa: E501
    calendar: Optional[Dict[str, ColorDefinition]] = Field(default=None, description="A global palette of calendar colors, mapping from the color ID to its definition. A calendarListEntry resource refers to one of these color IDs in its colorId field. Read-only.")
    event: Optional[Dict[str, ColorDefinition]] = Field(default=None, description="A global palette of event colors, mapping from the color ID to its definition. An event resource may refer to one of these color IDs in its colorId field. Read-only.")
    kind: Optional[StrictStr] = Field(default='calendar#colors', description="Type of the resource (\"calendar#colors\").")
    updated: Optional[datetime] = Field(default=None, description="Last modification time of the color palette (as a RFC3339 timestamp). Read-only.")
    __properties: ClassVar[List[str]] = ["calendar", "event", "kind", "updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Colors from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in calendar (dict)
        _field_dict = {}
        if self.calendar:
            for _key_calendar in self.calendar:
                if self.calendar[_key_calendar]:
                    _field_dict[_key_calendar] = self.calendar[_key_calendar].to_dict()
            _dict['calendar'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in event (dict)
        _field_dict = {}
        if self.event:
            for _key_event in self.event:
                if self.event[_key_event]:
                    _field_dict[_key_event] = self.event[_key_event].to_dict()
            _dict['event'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Colors from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "calendar": dict(
                (_k, ColorDefinition.from_dict(_v))
                for _k, _v in obj["calendar"].items()
            )
            if obj.get("calendar") is not None
            else None,
            "event": dict(
                (_k, ColorDefinition.from_dict(_v))
                for _k, _v in obj["event"].items()
            )
            if obj.get("event") is not None
            else None,
            "kind": obj.get("kind") if obj.get("kind") is not None else 'calendar#colors',
            "updated": obj.get("updated")
        })
        return _obj



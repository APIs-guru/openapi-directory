# coding: utf-8

"""
    Calendar API

    Manipulates events and other calendar data.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.events import Events

class TestEvents(unittest.TestCase):
    """Events unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Events:
        """Test Events
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Events`
        """
        model = Events()
        if include_optional:
            return Events(
                access_role = '',
                default_reminders = [
                    openapi_client.models.event_reminder.EventReminder(
                        method = '', 
                        minutes = 56, )
                    ],
                description = '',
                etag = '',
                items = [
                    openapi_client.models.event.Event(
                        anyone_can_add_self = True, 
                        attachments = [
                            openapi_client.models.event_attachment.EventAttachment(
                                file_id = '', 
                                file_url = '', 
                                icon_link = '', 
                                mime_type = '', 
                                title = '', )
                            ], 
                        attendees = [
                            openapi_client.models.event_attendee.EventAttendee(
                                additional_guests = 56, 
                                comment = '', 
                                display_name = '', 
                                email = '', 
                                id = '', 
                                optional = True, 
                                organizer = True, 
                                resource = True, 
                                response_status = '', 
                                self = True, )
                            ], 
                        attendees_omitted = True, 
                        color_id = '', 
                        conference_data = openapi_client.models.conference_data.ConferenceData(
                            conference_id = '', 
                            conference_solution = openapi_client.models.conference_solution.ConferenceSolution(
                                icon_uri = '', 
                                key = openapi_client.models.conference_solution_key.ConferenceSolutionKey(
                                    type = '', ), 
                                name = '', ), 
                            create_request = openapi_client.models.create_conference_request.CreateConferenceRequest(
                                conference_solution_key = openapi_client.models.conference_solution_key.ConferenceSolutionKey(
                                    type = '', ), 
                                request_id = '', 
                                status = openapi_client.models.conference_request_status.ConferenceRequestStatus(
                                    status_code = '', ), ), 
                            entry_points = [
                                openapi_client.models.entry_point.EntryPoint(
                                    access_code = '', 
                                    entry_point_features = [
                                        ''
                                        ], 
                                    entry_point_type = '', 
                                    label = '', 
                                    meeting_code = '', 
                                    passcode = '', 
                                    password = '', 
                                    pin = '', 
                                    region_code = '', 
                                    uri = '', )
                                ], 
                            notes = '', 
                            parameters = openapi_client.models.conference_parameters.ConferenceParameters(
                                add_on_parameters = openapi_client.models.conference_parameters_add_on_parameters.ConferenceParametersAddOnParameters(), ), 
                            signature = '', ), 
                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        creator = openapi_client.models.event_creator.Event_creator(
                            display_name = '', 
                            email = '', 
                            id = '', 
                            self = True, ), 
                        description = '', 
                        end = openapi_client.models.event_date_time.EventDateTime(
                            date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            time_zone = '', ), 
                        end_time_unspecified = True, 
                        etag = '', 
                        event_type = 'default', 
                        extended_properties = openapi_client.models.event_extended_properties.Event_extendedProperties(
                            private = {
                                'key' : ''
                                }, 
                            shared = {
                                'key' : ''
                                }, ), 
                        focus_time_properties = openapi_client.models.event_focus_time_properties.EventFocusTimeProperties(
                            auto_decline_mode = '', 
                            chat_status = '', 
                            decline_message = '', ), 
                        gadget = openapi_client.models.event_gadget.Event_gadget(
                            display = '', 
                            height = 56, 
                            icon_link = '', 
                            link = '', 
                            preferences = {
                                'key' : ''
                                }, 
                            title = '', 
                            type = '', 
                            width = 56, ), 
                        guests_can_invite_others = True, 
                        guests_can_modify = True, 
                        guests_can_see_other_guests = True, 
                        hangout_link = '', 
                        html_link = '', 
                        i_cal_uid = '', 
                        id = '', 
                        kind = 'calendar#event', 
                        location = '', 
                        locked = True, 
                        organizer = openapi_client.models.event_organizer.Event_organizer(
                            display_name = '', 
                            email = '', 
                            id = '', 
                            self = True, ), 
                        original_start_time = openapi_client.models.event_date_time.EventDateTime(
                            date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            time_zone = '', ), 
                        out_of_office_properties = openapi_client.models.event_out_of_office_properties.EventOutOfOfficeProperties(
                            auto_decline_mode = '', 
                            decline_message = '', ), 
                        private_copy = True, 
                        recurrence = [
                            ''
                            ], 
                        recurring_event_id = '', 
                        reminders = openapi_client.models.event_reminders.Event_reminders(
                            overrides = [
                                openapi_client.models.event_reminder.EventReminder(
                                    method = '', 
                                    minutes = 56, )
                                ], 
                            use_default = True, ), 
                        sequence = 56, 
                        source = openapi_client.models.event_source.Event_source(
                            title = '', 
                            url = '', ), 
                        start = , 
                        status = '', 
                        summary = '', 
                        transparency = 'opaque', 
                        updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        visibility = 'default', 
                        working_location_properties = openapi_client.models.event_working_location_properties.EventWorkingLocationProperties(
                            custom_location = openapi_client.models.event_working_location_properties_custom_location.EventWorkingLocationProperties_customLocation(
                                label = '', ), 
                            home_office = null, 
                            office_location = openapi_client.models.event_working_location_properties_office_location.EventWorkingLocationProperties_officeLocation(
                                building_id = '', 
                                desk_id = '', 
                                floor_id = '', 
                                floor_section_id = '', 
                                label = '', ), 
                            type = '', ), )
                    ],
                kind = 'calendar#events',
                next_page_token = '',
                next_sync_token = '',
                summary = '',
                time_zone = '',
                updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return Events(
        )
        """

    def testEvents(self):
        """Test Events"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

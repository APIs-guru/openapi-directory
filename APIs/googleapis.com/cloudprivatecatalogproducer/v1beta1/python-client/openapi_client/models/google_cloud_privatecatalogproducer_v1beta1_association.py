# coding: utf-8

"""
    Cloud Private Catalog Producer

    Enables cloud users to manage and share enterprise catalogs intheir organizations.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudPrivatecatalogproducerV1beta1Association(BaseModel):
    """
    An association tuple that pairs a `Catalog` to a resource that can use the `Catalog`. After association, a google.cloud.privatecatalog.v1beta1.Catalog becomes available to consumers under specified Association.resource and all of its child nodes. Users who have the `cloudprivatecatalog.targets.get` permission on any of the resource nodes can access the catalog and child products under the node.  For example, suppose the cloud resource hierarchy is as follows:  * organizations/example.com   * folders/team     * projects/test  After creating an association with `organizations/example.com`, the catalog `catalogs/1`  is accessible from the following paths:  * organizations/example.com * folders/team * projects/test  Users can access them by google.cloud.v1beta1.PrivateCatalog.SearchCatalogs action.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="The creation time of the association.", alias="createTime")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the catalog association, in the format `catalogs/{catalog_id}/associations/{association_id}'.  A unique identifier for the catalog association, which is generated by catalog service.")
    resource: Optional[StrictStr] = Field(default=None, description="Required. The user-supplied fully qualified name of the `Resource` associated to the `Catalog`. It supports `Organization`, `Folder`, and `Project`. Values are of the form  * `//cloudresourcemanager.googleapis.com/projects/{product_number}` * `//cloudresourcemanager.googleapis.com/folders/{folder_id}` * `//cloudresourcemanager.googleapis.com/organizations/{organization_id}`")
    __properties: ClassVar[List[str]] = ["createTime", "name", "resource"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudPrivatecatalogproducerV1beta1Association from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudPrivatecatalogproducerV1beta1Association from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "name": obj.get("name"),
            "resource": obj.get("resource")
        })
        return _obj



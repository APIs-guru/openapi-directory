# coding: utf-8

"""
    Cloud Private Catalog Producer

    Enables cloud users to manage and share enterprise catalogs intheir organizations.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudPrivatecatalogproducerV1beta1Version(BaseModel):
    """
    The producer representation of a version, which is a child resource under a `Product` with asset data.
    """ # noqa: E501
    asset: Optional[Dict[str, Any]] = Field(default=None, description="Output only. The asset which has been validated and is ready to be provisioned. See Version.original_asset for the schema.")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the version was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="The user-supplied description of the version. Maximum of 256 characters.")
    name: Optional[StrictStr] = Field(default=None, description="Required. The resource name of the version, in the format `catalogs/{catalog_id}/products/{product_id}/versions/a-z*[a-z0-9]'.  A unique identifier for the version under a product, which can't be changed after the version is created. The final segment of the name must between 1 and 63 characters in length.")
    original_asset: Optional[Dict[str, Any]] = Field(default=None, description="The user-supplied asset payload. The maximum size of the payload is 2MB. The JSON schema of the payload is defined as:  ``` type: object properties:   mainTemplate:     type: string     description: The file name of the main template and name prefix of     schema file. The content of the main template should be set in the     imports list. The schema file name is expected to be     <mainTemplate>.schema in the imports list. required: true   imports:     type: array     description: Import template and schema file contents. Required to have     both <mainTemplate> and <mainTemplate>.schema files. required: true     minItems: 2     items:       type: object       properties:         name:           type: string         content:           type: string ```", alias="originalAsset")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the version was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["asset", "createTime", "description", "name", "originalAsset", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudPrivatecatalogproducerV1beta1Version from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudPrivatecatalogproducerV1beta1Version from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asset": obj.get("asset"),
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "name": obj.get("name"),
            "originalAsset": obj.get("originalAsset"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



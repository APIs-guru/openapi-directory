# coding: utf-8

"""
    Google Play Developer

    Accesses Android application developers' Google Play accounts.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.page_info import PageInfo
from openapi_client.models.token_pagination import TokenPagination
from openapi_client.models.voided_purchase import VoidedPurchase
from typing import Optional, Set
from typing_extensions import Self

class VoidedPurchasesListResponse(BaseModel):
    """
    VoidedPurchasesListResponse
    """ # noqa: E501
    page_info: Optional[PageInfo] = Field(default=None, alias="pageInfo")
    token_pagination: Optional[TokenPagination] = Field(default=None, alias="tokenPagination")
    voided_purchases: Optional[List[VoidedPurchase]] = Field(default=None, alias="voidedPurchases")
    __properties: ClassVar[List[str]] = ["pageInfo", "tokenPagination", "voidedPurchases"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VoidedPurchasesListResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of page_info
        if self.page_info:
            _dict['pageInfo'] = self.page_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of token_pagination
        if self.token_pagination:
            _dict['tokenPagination'] = self.token_pagination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in voided_purchases (list)
        _items = []
        if self.voided_purchases:
            for _item_voided_purchases in self.voided_purchases:
                if _item_voided_purchases:
                    _items.append(_item_voided_purchases.to_dict())
            _dict['voidedPurchases'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VoidedPurchasesListResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pageInfo": PageInfo.from_dict(obj["pageInfo"]) if obj.get("pageInfo") is not None else None,
            "tokenPagination": TokenPagination.from_dict(obj["tokenPagination"]) if obj.get("tokenPagination") is not None else None,
            "voidedPurchases": [VoidedPurchase.from_dict(_item) for _item in obj["voidedPurchases"]] if obj.get("voidedPurchases") is not None else None
        })
        return _obj



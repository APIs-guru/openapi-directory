# coding: utf-8

"""
    Google Play Developer

    Accesses Android application developers' Google Play accounts.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.externally_hosted_apk_uses_permission import ExternallyHostedApkUsesPermission
from typing import Optional, Set
from typing_extensions import Self

class ExternallyHostedApk(BaseModel):
    """
    Defines an APK available for this application that is hosted externally and not uploaded to Google Play. This function is only available to enterprises who are using Google Play for Work, and whos application is restricted to the enterprise private channel
    """ # noqa: E501
    application_label: Optional[StrictStr] = Field(default=None, description="The application label.", alias="applicationLabel")
    certificate_base64s: Optional[List[StrictStr]] = Field(default=None, description="A certificate (or array of certificates if a certificate-chain is used) used to signed this APK, represented as a base64 encoded byte array.", alias="certificateBase64s")
    externally_hosted_url: Optional[StrictStr] = Field(default=None, description="The URL at which the APK is hosted. This must be an https URL.", alias="externallyHostedUrl")
    file_sha1_base64: Optional[StrictStr] = Field(default=None, description="The SHA1 checksum of this APK, represented as a base64 encoded byte array.", alias="fileSha1Base64")
    file_sha256_base64: Optional[StrictStr] = Field(default=None, description="The SHA256 checksum of this APK, represented as a base64 encoded byte array.", alias="fileSha256Base64")
    file_size: Optional[StrictStr] = Field(default=None, description="The file size in bytes of this APK.", alias="fileSize")
    icon_base64: Optional[StrictStr] = Field(default=None, description="The icon image from the APK, as a base64 encoded byte array.", alias="iconBase64")
    maximum_sdk: Optional[StrictInt] = Field(default=None, description="The maximum SDK supported by this APK (optional).", alias="maximumSdk")
    minimum_sdk: Optional[StrictInt] = Field(default=None, description="The minimum SDK targeted by this APK.", alias="minimumSdk")
    native_codes: Optional[List[StrictStr]] = Field(default=None, description="The native code environments supported by this APK (optional).", alias="nativeCodes")
    package_name: Optional[StrictStr] = Field(default=None, description="The package name.", alias="packageName")
    uses_features: Optional[List[StrictStr]] = Field(default=None, description="The features required by this APK (optional).", alias="usesFeatures")
    uses_permissions: Optional[List[ExternallyHostedApkUsesPermission]] = Field(default=None, description="The permissions requested by this APK.", alias="usesPermissions")
    version_code: Optional[StrictInt] = Field(default=None, description="The version code of this APK.", alias="versionCode")
    version_name: Optional[StrictStr] = Field(default=None, description="The version name of this APK.", alias="versionName")
    __properties: ClassVar[List[str]] = ["applicationLabel", "certificateBase64s", "externallyHostedUrl", "fileSha1Base64", "fileSha256Base64", "fileSize", "iconBase64", "maximumSdk", "minimumSdk", "nativeCodes", "packageName", "usesFeatures", "usesPermissions", "versionCode", "versionName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExternallyHostedApk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in uses_permissions (list)
        _items = []
        if self.uses_permissions:
            for _item_uses_permissions in self.uses_permissions:
                if _item_uses_permissions:
                    _items.append(_item_uses_permissions.to_dict())
            _dict['usesPermissions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExternallyHostedApk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationLabel": obj.get("applicationLabel"),
            "certificateBase64s": obj.get("certificateBase64s"),
            "externallyHostedUrl": obj.get("externallyHostedUrl"),
            "fileSha1Base64": obj.get("fileSha1Base64"),
            "fileSha256Base64": obj.get("fileSha256Base64"),
            "fileSize": obj.get("fileSize"),
            "iconBase64": obj.get("iconBase64"),
            "maximumSdk": obj.get("maximumSdk"),
            "minimumSdk": obj.get("minimumSdk"),
            "nativeCodes": obj.get("nativeCodes"),
            "packageName": obj.get("packageName"),
            "usesFeatures": obj.get("usesFeatures"),
            "usesPermissions": [ExternallyHostedApkUsesPermission.from_dict(_item) for _item in obj["usesPermissions"]] if obj.get("usesPermissions") is not None else None,
            "versionCode": obj.get("versionCode"),
            "versionName": obj.get("versionName")
        })
        return _obj



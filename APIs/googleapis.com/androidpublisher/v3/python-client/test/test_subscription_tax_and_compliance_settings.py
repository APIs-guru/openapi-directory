# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.subscription_tax_and_compliance_settings import SubscriptionTaxAndComplianceSettings

class TestSubscriptionTaxAndComplianceSettings(unittest.TestCase):
    """SubscriptionTaxAndComplianceSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SubscriptionTaxAndComplianceSettings:
        """Test SubscriptionTaxAndComplianceSettings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SubscriptionTaxAndComplianceSettings`
        """
        model = SubscriptionTaxAndComplianceSettings()
        if include_optional:
            return SubscriptionTaxAndComplianceSettings(
                eea_withdrawal_right_type = 'WITHDRAWAL_RIGHT_TYPE_UNSPECIFIED',
                is_tokenized_digital_asset = True,
                tax_rate_info_by_region_code = {
                    'key' : openapi_client.models.regional_tax_rate_info.RegionalTaxRateInfo(
                        eligible_for_streaming_service_tax_rate = True, 
                        streaming_tax_type = 'STREAMING_TAX_TYPE_UNSPECIFIED', 
                        tax_tier = 'TAX_TIER_UNSPECIFIED', )
                    }
            )
        else:
            return SubscriptionTaxAndComplianceSettings(
        )
        """

    def testSubscriptionTaxAndComplianceSettings(self):
        """Test SubscriptionTaxAndComplianceSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

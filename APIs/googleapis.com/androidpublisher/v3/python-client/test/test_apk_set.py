# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.apk_set import ApkSet

class TestApkSet(unittest.TestCase):
    """ApkSet unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApkSet:
        """Test ApkSet
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApkSet`
        """
        model = ApkSet()
        if include_optional:
            return ApkSet(
                apk_description = [
                    openapi_client.models.apk_description.ApkDescription(
                        asset_slice_metadata = openapi_client.models.split_apk_metadata.SplitApkMetadata(
                            is_master_split = True, 
                            split_id = '', ), 
                        instant_apk_metadata = openapi_client.models.split_apk_metadata.SplitApkMetadata(
                            is_master_split = True, 
                            split_id = '', ), 
                        path = '', 
                        split_apk_metadata = , 
                        standalone_apk_metadata = openapi_client.models.standalone_apk_metadata.StandaloneApkMetadata(
                            fused_module_name = [
                                ''
                                ], ), 
                        targeting = openapi_client.models.apk_targeting.ApkTargeting(
                            abi_targeting = openapi_client.models.abi_targeting.AbiTargeting(
                                alternatives = [
                                    openapi_client.models.abi.Abi(
                                        alias = 'UNSPECIFIED_CPU_ARCHITECTURE', )
                                    ], 
                                value = [
                                    openapi_client.models.abi.Abi(
                                        alias = 'UNSPECIFIED_CPU_ARCHITECTURE', )
                                    ], ), 
                            language_targeting = openapi_client.models.language_targeting.LanguageTargeting(), 
                            multi_abi_targeting = openapi_client.models.multi_abi_targeting.MultiAbiTargeting(), 
                            screen_density_targeting = openapi_client.models.screen_density_targeting.ScreenDensityTargeting(), 
                            sdk_version_targeting = openapi_client.models.sdk_version_targeting.SdkVersionTargeting(), 
                            texture_compression_format_targeting = openapi_client.models.texture_compression_format_targeting.TextureCompressionFormatTargeting(), ), )
                    ],
                module_metadata = openapi_client.models.module_metadata.ModuleMetadata(
                    delivery_type = 'UNKNOWN_DELIVERY_TYPE', 
                    dependencies = [
                        ''
                        ], 
                    module_type = 'UNKNOWN_MODULE_TYPE', 
                    name = '', 
                    targeting = openapi_client.models.module_targeting.ModuleTargeting(
                        device_feature_targeting = [
                            openapi_client.models.device_feature_targeting.DeviceFeatureTargeting(
                                required_feature = openapi_client.models.device_feature.DeviceFeature(
                                    feature_name = '', 
                                    feature_version = 56, ), )
                            ], 
                        sdk_version_targeting = openapi_client.models.sdk_version_targeting.SdkVersionTargeting(
                            alternatives = [
                                openapi_client.models.sdk_version.SdkVersion(
                                    min = 56, )
                                ], 
                            value = [
                                openapi_client.models.sdk_version.SdkVersion(
                                    min = 56, )
                                ], ), 
                        user_countries_targeting = openapi_client.models.user_countries_targeting.UserCountriesTargeting(
                            country_codes = [
                                ''
                                ], 
                            exclude = True, ), ), )
            )
        else:
            return ApkSet(
        )
        """

    def testApkSet(self):
        """Test ApkSet"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

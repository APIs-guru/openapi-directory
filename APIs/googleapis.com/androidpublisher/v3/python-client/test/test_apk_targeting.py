# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.apk_targeting import ApkTargeting

class TestApkTargeting(unittest.TestCase):
    """ApkTargeting unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApkTargeting:
        """Test ApkTargeting
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApkTargeting`
        """
        model = ApkTargeting()
        if include_optional:
            return ApkTargeting(
                abi_targeting = openapi_client.models.abi_targeting.AbiTargeting(
                    alternatives = [
                        openapi_client.models.abi.Abi(
                            alias = 'UNSPECIFIED_CPU_ARCHITECTURE', )
                        ], 
                    value = [
                        openapi_client.models.abi.Abi(
                            alias = 'UNSPECIFIED_CPU_ARCHITECTURE', )
                        ], ),
                language_targeting = openapi_client.models.language_targeting.LanguageTargeting(
                    alternatives = [
                        ''
                        ], 
                    value = [
                        ''
                        ], ),
                multi_abi_targeting = openapi_client.models.multi_abi_targeting.MultiAbiTargeting(
                    alternatives = [
                        openapi_client.models.multi_abi.MultiAbi(
                            abi = [
                                openapi_client.models.abi.Abi(
                                    alias = 'UNSPECIFIED_CPU_ARCHITECTURE', )
                                ], )
                        ], 
                    value = [
                        openapi_client.models.multi_abi.MultiAbi()
                        ], ),
                screen_density_targeting = openapi_client.models.screen_density_targeting.ScreenDensityTargeting(
                    alternatives = [
                        openapi_client.models.screen_density.ScreenDensity(
                            density_alias = 'DENSITY_UNSPECIFIED', 
                            density_dpi = 56, )
                        ], 
                    value = [
                        openapi_client.models.screen_density.ScreenDensity(
                            density_alias = 'DENSITY_UNSPECIFIED', 
                            density_dpi = 56, )
                        ], ),
                sdk_version_targeting = openapi_client.models.sdk_version_targeting.SdkVersionTargeting(
                    alternatives = [
                        openapi_client.models.sdk_version.SdkVersion(
                            min = 56, )
                        ], 
                    value = [
                        openapi_client.models.sdk_version.SdkVersion(
                            min = 56, )
                        ], ),
                texture_compression_format_targeting = openapi_client.models.texture_compression_format_targeting.TextureCompressionFormatTargeting(
                    alternatives = [
                        openapi_client.models.texture_compression_format.TextureCompressionFormat(
                            alias = 'UNSPECIFIED_TEXTURE_COMPRESSION_FORMAT', )
                        ], 
                    value = [
                        openapi_client.models.texture_compression_format.TextureCompressionFormat(
                            alias = 'UNSPECIFIED_TEXTURE_COMPRESSION_FORMAT', )
                        ], )
            )
        else:
            return ApkTargeting(
        )
        """

    def testApkTargeting(self):
        """Test ApkTargeting"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

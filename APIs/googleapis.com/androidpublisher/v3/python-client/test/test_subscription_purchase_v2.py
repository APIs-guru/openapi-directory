# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.subscription_purchase_v2 import SubscriptionPurchaseV2

class TestSubscriptionPurchaseV2(unittest.TestCase):
    """SubscriptionPurchaseV2 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SubscriptionPurchaseV2:
        """Test SubscriptionPurchaseV2
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SubscriptionPurchaseV2`
        """
        model = SubscriptionPurchaseV2()
        if include_optional:
            return SubscriptionPurchaseV2(
                acknowledgement_state = 'ACKNOWLEDGEMENT_STATE_UNSPECIFIED',
                canceled_state_context = openapi_client.models.canceled_state_context.CanceledStateContext(
                    developer_initiated_cancellation = openapi_client.models.developer_initiated_cancellation.developerInitiatedCancellation(), 
                    replacement_cancellation = openapi_client.models.replacement_cancellation.replacementCancellation(), 
                    system_initiated_cancellation = openapi_client.models.system_initiated_cancellation.systemInitiatedCancellation(), 
                    user_initiated_cancellation = openapi_client.models.user_initiated_cancellation.UserInitiatedCancellation(
                        cancel_survey_result = openapi_client.models.cancel_survey_result.CancelSurveyResult(
                            reason = 'CANCEL_SURVEY_REASON_UNSPECIFIED', 
                            reason_user_input = '', ), 
                        cancel_time = '', ), ),
                external_account_identifiers = openapi_client.models.external_account_identifiers.ExternalAccountIdentifiers(
                    external_account_id = '', 
                    obfuscated_external_account_id = '', 
                    obfuscated_external_profile_id = '', ),
                kind = '',
                latest_order_id = '',
                line_items = [
                    openapi_client.models.subscription_purchase_line_item.SubscriptionPurchaseLineItem(
                        auto_renewing_plan = openapi_client.models.auto_renewing_plan.AutoRenewingPlan(
                            auto_renew_enabled = True, 
                            price_change_details = openapi_client.models.subscription_item_price_change_details.SubscriptionItemPriceChangeDetails(
                                expected_new_price_charge_time = '', 
                                new_price = openapi_client.models.money.Money(
                                    currency_code = '', 
                                    nanos = 56, 
                                    units = '', ), 
                                price_change_mode = 'PRICE_CHANGE_MODE_UNSPECIFIED', 
                                price_change_state = 'PRICE_CHANGE_STATE_UNSPECIFIED', ), ), 
                        deferred_item_replacement = openapi_client.models.deferred_item_replacement.DeferredItemReplacement(
                            product_id = '', ), 
                        expiry_time = '', 
                        offer_details = openapi_client.models.offer_details.OfferDetails(
                            base_plan_id = '', 
                            offer_id = '', 
                            offer_tags = [
                                ''
                                ], ), 
                        prepaid_plan = openapi_client.models.prepaid_plan.PrepaidPlan(
                            allow_extend_after_time = '', ), 
                        product_id = '', )
                    ],
                linked_purchase_token = '',
                paused_state_context = openapi_client.models.paused_state_context.PausedStateContext(
                    auto_resume_time = '', ),
                region_code = '',
                start_time = '',
                subscribe_with_google_info = openapi_client.models.subscribe_with_google_info.SubscribeWithGoogleInfo(
                    email_address = '', 
                    family_name = '', 
                    given_name = '', 
                    profile_id = '', 
                    profile_name = '', ),
                subscription_state = 'SUBSCRIPTION_STATE_UNSPECIFIED',
                test_purchase = None
            )
        else:
            return SubscriptionPurchaseV2(
        )
        """

    def testSubscriptionPurchaseV2(self):
        """Test SubscriptionPurchaseV2"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.subscription_offer import SubscriptionOffer

class TestSubscriptionOffer(unittest.TestCase):
    """SubscriptionOffer unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SubscriptionOffer:
        """Test SubscriptionOffer
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SubscriptionOffer`
        """
        model = SubscriptionOffer()
        if include_optional:
            return SubscriptionOffer(
                base_plan_id = '',
                offer_id = '',
                offer_tags = [
                    openapi_client.models.offer_tag.OfferTag(
                        tag = '', )
                    ],
                other_regions_config = openapi_client.models.other_regions_subscription_offer_config.OtherRegionsSubscriptionOfferConfig(
                    other_regions_new_subscriber_availability = True, ),
                package_name = '',
                phases = [
                    openapi_client.models.subscription_offer_phase.SubscriptionOfferPhase(
                        duration = '', 
                        other_regions_config = openapi_client.models.other_regions_subscription_offer_phase_config.OtherRegionsSubscriptionOfferPhaseConfig(
                            absolute_discounts = openapi_client.models.other_regions_subscription_offer_phase_prices.OtherRegionsSubscriptionOfferPhasePrices(
                                eur_price = openapi_client.models.money.Money(
                                    currency_code = '', 
                                    nanos = 56, 
                                    units = '', ), 
                                usd_price = openapi_client.models.money.Money(
                                    currency_code = '', 
                                    nanos = 56, 
                                    units = '', ), ), 
                            other_regions_prices = openapi_client.models.other_regions_subscription_offer_phase_prices.OtherRegionsSubscriptionOfferPhasePrices(), 
                            relative_discount = 1.337, ), 
                        recurrence_count = 56, 
                        regional_configs = [
                            openapi_client.models.regional_subscription_offer_phase_config.RegionalSubscriptionOfferPhaseConfig(
                                absolute_discount = , 
                                price = , 
                                region_code = '', 
                                relative_discount = 1.337, )
                            ], )
                    ],
                product_id = '',
                regional_configs = [
                    openapi_client.models.regional_subscription_offer_config.RegionalSubscriptionOfferConfig(
                        new_subscriber_availability = True, 
                        region_code = '', )
                    ],
                state = 'STATE_UNSPECIFIED',
                targeting = openapi_client.models.subscription_offer_targeting.SubscriptionOfferTargeting(
                    acquisition_rule = openapi_client.models.acquisition_targeting_rule.AcquisitionTargetingRule(
                        scope = openapi_client.models.targeting_rule_scope.TargetingRuleScope(
                            specific_subscription_in_app = '', ), ), 
                    upgrade_rule = openapi_client.models.upgrade_targeting_rule.UpgradeTargetingRule(
                        billing_period_duration = '', 
                        once_per_user = True, ), )
            )
        else:
            return SubscriptionOffer(
        )
        """

    def testSubscriptionOffer(self):
        """Test SubscriptionOffer"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

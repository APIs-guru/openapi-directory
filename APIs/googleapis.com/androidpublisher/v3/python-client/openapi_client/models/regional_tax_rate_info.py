# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RegionalTaxRateInfo(BaseModel):
    """
    Specified details about taxation in a given geographical region.
    """ # noqa: E501
    eligible_for_streaming_service_tax_rate: Optional[StrictBool] = Field(default=None, description="You must tell us if your app contains streaming products to correctly charge US state and local sales tax. Field only supported in the United States.", alias="eligibleForStreamingServiceTaxRate")
    streaming_tax_type: Optional[StrictStr] = Field(default=None, description="To collect communications or amusement taxes in the United States, choose the appropriate tax category. [Learn more](https://support.google.com/googleplay/android-developer/answer/10463498#streaming_tax).", alias="streamingTaxType")
    tax_tier: Optional[StrictStr] = Field(default=None, description="Tax tier to specify reduced tax rate. Developers who sell digital news, magazines, newspapers, books, or audiobooks in various regions may be eligible for reduced tax rates. [Learn more](https://support.google.com/googleplay/android-developer/answer/10463498).", alias="taxTier")
    __properties: ClassVar[List[str]] = ["eligibleForStreamingServiceTaxRate", "streamingTaxType", "taxTier"]

    @field_validator('streaming_tax_type')
    def streaming_tax_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STREAMING_TAX_TYPE_UNSPECIFIED', 'STREAMING_TAX_TYPE_TELCO_VIDEO_RENTAL', 'STREAMING_TAX_TYPE_TELCO_VIDEO_SALES', 'STREAMING_TAX_TYPE_TELCO_VIDEO_MULTI_CHANNEL', 'STREAMING_TAX_TYPE_TELCO_AUDIO_RENTAL', 'STREAMING_TAX_TYPE_TELCO_AUDIO_SALES', 'STREAMING_TAX_TYPE_TELCO_AUDIO_MULTI_CHANNEL']):
            raise ValueError("must be one of enum values ('STREAMING_TAX_TYPE_UNSPECIFIED', 'STREAMING_TAX_TYPE_TELCO_VIDEO_RENTAL', 'STREAMING_TAX_TYPE_TELCO_VIDEO_SALES', 'STREAMING_TAX_TYPE_TELCO_VIDEO_MULTI_CHANNEL', 'STREAMING_TAX_TYPE_TELCO_AUDIO_RENTAL', 'STREAMING_TAX_TYPE_TELCO_AUDIO_SALES', 'STREAMING_TAX_TYPE_TELCO_AUDIO_MULTI_CHANNEL')")
        return value

    @field_validator('tax_tier')
    def tax_tier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TAX_TIER_UNSPECIFIED', 'TAX_TIER_BOOKS_1', 'TAX_TIER_NEWS_1', 'TAX_TIER_NEWS_2', 'TAX_TIER_MUSIC_OR_AUDIO_1', 'TAX_TIER_LIVE_OR_BROADCAST_1']):
            raise ValueError("must be one of enum values ('TAX_TIER_UNSPECIFIED', 'TAX_TIER_BOOKS_1', 'TAX_TIER_NEWS_1', 'TAX_TIER_NEWS_2', 'TAX_TIER_MUSIC_OR_AUDIO_1', 'TAX_TIER_LIVE_OR_BROADCAST_1')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RegionalTaxRateInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RegionalTaxRateInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eligibleForStreamingServiceTaxRate": obj.get("eligibleForStreamingServiceTaxRate"),
            "streamingTaxType": obj.get("streamingTaxType"),
            "taxTier": obj.get("taxTier")
        })
        return _obj



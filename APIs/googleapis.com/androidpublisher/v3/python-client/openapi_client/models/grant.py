# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Grant(BaseModel):
    """
    An access grant resource.
    """ # noqa: E501
    app_level_permissions: Optional[List[StrictStr]] = Field(default=None, description="The permissions granted to the user for this app.", alias="appLevelPermissions")
    name: Optional[StrictStr] = Field(default=None, description="Required. Resource name for this grant, following the pattern \"developers/{developer}/users/{email}/grants/{package_name}\". If this grant is for a draft app, the app ID will be used in this resource name instead of the package name.")
    package_name: Optional[StrictStr] = Field(default=None, description="Immutable. The package name of the app. This will be empty for draft apps.", alias="packageName")
    __properties: ClassVar[List[str]] = ["appLevelPermissions", "name", "packageName"]

    @field_validator('app_level_permissions')
    def app_level_permissions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['APP_LEVEL_PERMISSION_UNSPECIFIED', 'CAN_ACCESS_APP', 'CAN_VIEW_FINANCIAL_DATA', 'CAN_MANAGE_PERMISSIONS', 'CAN_REPLY_TO_REVIEWS', 'CAN_MANAGE_PUBLIC_APKS', 'CAN_MANAGE_TRACK_APKS', 'CAN_MANAGE_TRACK_USERS', 'CAN_MANAGE_PUBLIC_LISTING', 'CAN_MANAGE_DRAFT_APPS', 'CAN_MANAGE_ORDERS', 'CAN_MANAGE_APP_CONTENT', 'CAN_VIEW_NON_FINANCIAL_DATA', 'CAN_VIEW_APP_QUALITY']):
                raise ValueError("each list item must be one of ('APP_LEVEL_PERMISSION_UNSPECIFIED', 'CAN_ACCESS_APP', 'CAN_VIEW_FINANCIAL_DATA', 'CAN_MANAGE_PERMISSIONS', 'CAN_REPLY_TO_REVIEWS', 'CAN_MANAGE_PUBLIC_APKS', 'CAN_MANAGE_TRACK_APKS', 'CAN_MANAGE_TRACK_USERS', 'CAN_MANAGE_PUBLIC_LISTING', 'CAN_MANAGE_DRAFT_APPS', 'CAN_MANAGE_ORDERS', 'CAN_MANAGE_APP_CONTENT', 'CAN_VIEW_NON_FINANCIAL_DATA', 'CAN_VIEW_APP_QUALITY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Grant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Grant from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appLevelPermissions": obj.get("appLevelPermissions"),
            "name": obj.get("name"),
            "packageName": obj.get("packageName")
        })
        return _obj



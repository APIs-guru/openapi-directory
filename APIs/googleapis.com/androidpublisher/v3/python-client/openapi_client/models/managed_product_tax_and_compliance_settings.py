# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.regional_tax_rate_info import RegionalTaxRateInfo
from typing import Optional, Set
from typing_extensions import Self

class ManagedProductTaxAndComplianceSettings(BaseModel):
    """
    Details about taxation and legal compliance for managed products.
    """ # noqa: E501
    eea_withdrawal_right_type: Optional[StrictStr] = Field(default=None, description="Digital content or service classification for products distributed to users in the European Economic Area (EEA). The withdrawal regime under EEA consumer laws depends on this classification. Refer to the [Help Center article](https://support.google.com/googleplay/android-developer/answer/10463498) for more information.", alias="eeaWithdrawalRightType")
    is_tokenized_digital_asset: Optional[StrictBool] = Field(default=None, description="Whether this in-app product is declared as a product representing a tokenized digital asset.", alias="isTokenizedDigitalAsset")
    tax_rate_info_by_region_code: Optional[Dict[str, RegionalTaxRateInfo]] = Field(default=None, description="A mapping from region code to tax rate details. The keys are region codes as defined by Unicode's \"CLDR\".", alias="taxRateInfoByRegionCode")
    __properties: ClassVar[List[str]] = ["eeaWithdrawalRightType", "isTokenizedDigitalAsset", "taxRateInfoByRegionCode"]

    @field_validator('eea_withdrawal_right_type')
    def eea_withdrawal_right_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WITHDRAWAL_RIGHT_TYPE_UNSPECIFIED', 'WITHDRAWAL_RIGHT_DIGITAL_CONTENT', 'WITHDRAWAL_RIGHT_SERVICE']):
            raise ValueError("must be one of enum values ('WITHDRAWAL_RIGHT_TYPE_UNSPECIFIED', 'WITHDRAWAL_RIGHT_DIGITAL_CONTENT', 'WITHDRAWAL_RIGHT_SERVICE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagedProductTaxAndComplianceSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in tax_rate_info_by_region_code (dict)
        _field_dict = {}
        if self.tax_rate_info_by_region_code:
            for _key_tax_rate_info_by_region_code in self.tax_rate_info_by_region_code:
                if self.tax_rate_info_by_region_code[_key_tax_rate_info_by_region_code]:
                    _field_dict[_key_tax_rate_info_by_region_code] = self.tax_rate_info_by_region_code[_key_tax_rate_info_by_region_code].to_dict()
            _dict['taxRateInfoByRegionCode'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagedProductTaxAndComplianceSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eeaWithdrawalRightType": obj.get("eeaWithdrawalRightType"),
            "isTokenizedDigitalAsset": obj.get("isTokenizedDigitalAsset"),
            "taxRateInfoByRegionCode": dict(
                (_k, RegionalTaxRateInfo.from_dict(_v))
                for _k, _v in obj["taxRateInfoByRegionCode"].items()
            )
            if obj.get("taxRateInfoByRegionCode") is not None
            else None
        })
        return _obj



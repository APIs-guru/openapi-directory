# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.in_app_product import InAppProduct
from typing import Optional, Set
from typing_extensions import Self

class InappproductsUpdateRequest(BaseModel):
    """
    Request to update an in-app product.
    """ # noqa: E501
    allow_missing: Optional[StrictBool] = Field(default=None, description="If set to true, and the in-app product with the given package_name and sku doesn't exist, the in-app product will be created.", alias="allowMissing")
    auto_convert_missing_prices: Optional[StrictBool] = Field(default=None, description="If true the prices for all regions targeted by the parent app that don't have a price specified for this in-app product will be auto converted to the target currency based on the default price. Defaults to false.", alias="autoConvertMissingPrices")
    inappproduct: Optional[InAppProduct] = None
    latency_tolerance: Optional[StrictStr] = Field(default=None, description="Optional. The latency tolerance for the propagation of this product update. Defaults to latency-sensitive.", alias="latencyTolerance")
    package_name: Optional[StrictStr] = Field(default=None, description="Package name of the app.", alias="packageName")
    sku: Optional[StrictStr] = Field(default=None, description="Unique identifier for the in-app product.")
    __properties: ClassVar[List[str]] = ["allowMissing", "autoConvertMissingPrices", "inappproduct", "latencyTolerance", "packageName", "sku"]

    @field_validator('latency_tolerance')
    def latency_tolerance_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRODUCT_UPDATE_LATENCY_TOLERANCE_UNSPECIFIED', 'PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_SENSITIVE', 'PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_TOLERANT']):
            raise ValueError("must be one of enum values ('PRODUCT_UPDATE_LATENCY_TOLERANCE_UNSPECIFIED', 'PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_SENSITIVE', 'PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_TOLERANT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InappproductsUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of inappproduct
        if self.inappproduct:
            _dict['inappproduct'] = self.inappproduct.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InappproductsUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowMissing": obj.get("allowMissing"),
            "autoConvertMissingPrices": obj.get("autoConvertMissingPrices"),
            "inappproduct": InAppProduct.from_dict(obj["inappproduct"]) if obj.get("inappproduct") is not None else None,
            "latencyTolerance": obj.get("latencyTolerance"),
            "packageName": obj.get("packageName"),
            "sku": obj.get("sku")
        })
        return _obj



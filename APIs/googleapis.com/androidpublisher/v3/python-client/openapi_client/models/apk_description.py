# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.apk_targeting import ApkTargeting
from openapi_client.models.split_apk_metadata import SplitApkMetadata
from openapi_client.models.standalone_apk_metadata import StandaloneApkMetadata
from typing import Optional, Set
from typing_extensions import Self

class ApkDescription(BaseModel):
    """
    Description of the created apks.
    """ # noqa: E501
    asset_slice_metadata: Optional[SplitApkMetadata] = Field(default=None, alias="assetSliceMetadata")
    instant_apk_metadata: Optional[SplitApkMetadata] = Field(default=None, alias="instantApkMetadata")
    path: Optional[StrictStr] = Field(default=None, description="Path of the Apk, will be in the following format: .apk where DownloadId is the ID used to download the apk using GeneratedApks.Download API.")
    split_apk_metadata: Optional[SplitApkMetadata] = Field(default=None, alias="splitApkMetadata")
    standalone_apk_metadata: Optional[StandaloneApkMetadata] = Field(default=None, alias="standaloneApkMetadata")
    targeting: Optional[ApkTargeting] = None
    __properties: ClassVar[List[str]] = ["assetSliceMetadata", "instantApkMetadata", "path", "splitApkMetadata", "standaloneApkMetadata", "targeting"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApkDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of asset_slice_metadata
        if self.asset_slice_metadata:
            _dict['assetSliceMetadata'] = self.asset_slice_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of instant_apk_metadata
        if self.instant_apk_metadata:
            _dict['instantApkMetadata'] = self.instant_apk_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of split_apk_metadata
        if self.split_apk_metadata:
            _dict['splitApkMetadata'] = self.split_apk_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of standalone_apk_metadata
        if self.standalone_apk_metadata:
            _dict['standaloneApkMetadata'] = self.standalone_apk_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of targeting
        if self.targeting:
            _dict['targeting'] = self.targeting.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApkDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assetSliceMetadata": SplitApkMetadata.from_dict(obj["assetSliceMetadata"]) if obj.get("assetSliceMetadata") is not None else None,
            "instantApkMetadata": SplitApkMetadata.from_dict(obj["instantApkMetadata"]) if obj.get("instantApkMetadata") is not None else None,
            "path": obj.get("path"),
            "splitApkMetadata": SplitApkMetadata.from_dict(obj["splitApkMetadata"]) if obj.get("splitApkMetadata") is not None else None,
            "standaloneApkMetadata": StandaloneApkMetadata.from_dict(obj["standaloneApkMetadata"]) if obj.get("standaloneApkMetadata") is not None else None,
            "targeting": ApkTargeting.from_dict(obj["targeting"]) if obj.get("targeting") is not None else None
        })
        return _obj



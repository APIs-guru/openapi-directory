# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auto_renewing_base_plan_type import AutoRenewingBasePlanType
from openapi_client.models.offer_tag import OfferTag
from openapi_client.models.other_regions_base_plan_config import OtherRegionsBasePlanConfig
from openapi_client.models.prepaid_base_plan_type import PrepaidBasePlanType
from openapi_client.models.regional_base_plan_config import RegionalBasePlanConfig
from typing import Optional, Set
from typing_extensions import Self

class BasePlan(BaseModel):
    """
    A single base plan for a subscription.
    """ # noqa: E501
    auto_renewing_base_plan_type: Optional[AutoRenewingBasePlanType] = Field(default=None, alias="autoRenewingBasePlanType")
    base_plan_id: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The unique identifier of this base plan. Must be unique within the subscription, and conform with RFC-1034. That is, this ID can only contain lower-case letters (a-z), numbers (0-9), and hyphens (-), and be at most 63 characters.", alias="basePlanId")
    offer_tags: Optional[List[OfferTag]] = Field(default=None, description="List of up to 20 custom tags specified for this base plan, and returned to the app through the billing library. Subscription offers for this base plan will also receive these offer tags in the billing library.", alias="offerTags")
    other_regions_config: Optional[OtherRegionsBasePlanConfig] = Field(default=None, alias="otherRegionsConfig")
    prepaid_base_plan_type: Optional[PrepaidBasePlanType] = Field(default=None, alias="prepaidBasePlanType")
    regional_configs: Optional[List[RegionalBasePlanConfig]] = Field(default=None, description="Region-specific information for this base plan.", alias="regionalConfigs")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the base plan, i.e. whether it's active. Draft and inactive base plans can be activated or deleted. Active base plans can be made inactive. Inactive base plans can be canceled. This field cannot be changed by updating the resource. Use the dedicated endpoints instead.")
    __properties: ClassVar[List[str]] = ["autoRenewingBasePlanType", "basePlanId", "offerTags", "otherRegionsConfig", "prepaidBasePlanType", "regionalConfigs", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'DRAFT', 'ACTIVE', 'INACTIVE']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'DRAFT', 'ACTIVE', 'INACTIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BasePlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auto_renewing_base_plan_type
        if self.auto_renewing_base_plan_type:
            _dict['autoRenewingBasePlanType'] = self.auto_renewing_base_plan_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in offer_tags (list)
        _items = []
        if self.offer_tags:
            for _item_offer_tags in self.offer_tags:
                if _item_offer_tags:
                    _items.append(_item_offer_tags.to_dict())
            _dict['offerTags'] = _items
        # override the default output from pydantic by calling `to_dict()` of other_regions_config
        if self.other_regions_config:
            _dict['otherRegionsConfig'] = self.other_regions_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prepaid_base_plan_type
        if self.prepaid_base_plan_type:
            _dict['prepaidBasePlanType'] = self.prepaid_base_plan_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in regional_configs (list)
        _items = []
        if self.regional_configs:
            for _item_regional_configs in self.regional_configs:
                if _item_regional_configs:
                    _items.append(_item_regional_configs.to_dict())
            _dict['regionalConfigs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BasePlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoRenewingBasePlanType": AutoRenewingBasePlanType.from_dict(obj["autoRenewingBasePlanType"]) if obj.get("autoRenewingBasePlanType") is not None else None,
            "basePlanId": obj.get("basePlanId"),
            "offerTags": [OfferTag.from_dict(_item) for _item in obj["offerTags"]] if obj.get("offerTags") is not None else None,
            "otherRegionsConfig": OtherRegionsBasePlanConfig.from_dict(obj["otherRegionsConfig"]) if obj.get("otherRegionsConfig") is not None else None,
            "prepaidBasePlanType": PrepaidBasePlanType.from_dict(obj["prepaidBasePlanType"]) if obj.get("prepaidBasePlanType") is not None else None,
            "regionalConfigs": [RegionalBasePlanConfig.from_dict(_item) for _item in obj["regionalConfigs"]] if obj.get("regionalConfigs") is not None else None,
            "state": obj.get("state")
        })
        return _obj



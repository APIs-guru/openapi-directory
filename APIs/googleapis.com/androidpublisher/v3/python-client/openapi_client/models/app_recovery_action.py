# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.remote_in_app_update_data import RemoteInAppUpdateData
from openapi_client.models.targeting import Targeting
from typing import Optional, Set
from typing_extensions import Self

class AppRecoveryAction(BaseModel):
    """
    Information about an app recovery action.
    """ # noqa: E501
    app_recovery_id: Optional[StrictStr] = Field(default=None, description="ID corresponding to the app recovery action.", alias="appRecoveryId")
    cancel_time: Optional[StrictStr] = Field(default=None, description="Timestamp of when the app recovery action is canceled by the developer. Only set if the recovery action has been canceled.", alias="cancelTime")
    create_time: Optional[StrictStr] = Field(default=None, description="Timestamp of when the app recovery action is created by the developer. It is always set after creation of the recovery action.", alias="createTime")
    deploy_time: Optional[StrictStr] = Field(default=None, description="Timestamp of when the app recovery action is deployed to the users. Only set if the recovery action has been deployed.", alias="deployTime")
    last_update_time: Optional[StrictStr] = Field(default=None, description="Timestamp of when the developer last updated recovery action. In case the action is cancelled, it corresponds to cancellation time. It is always set after creation of the recovery action.", alias="lastUpdateTime")
    remote_in_app_update_data: Optional[RemoteInAppUpdateData] = Field(default=None, alias="remoteInAppUpdateData")
    status: Optional[StrictStr] = Field(default=None, description="The status of the recovery action.")
    targeting: Optional[Targeting] = None
    __properties: ClassVar[List[str]] = ["appRecoveryId", "cancelTime", "createTime", "deployTime", "lastUpdateTime", "remoteInAppUpdateData", "status", "targeting"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RECOVERY_STATUS_UNSPECIFIED', 'RECOVERY_STATUS_ACTIVE', 'RECOVERY_STATUS_CANCELED', 'RECOVERY_STATUS_DRAFT', 'RECOVERY_STATUS_GENERATION_IN_PROGRESS', 'RECOVERY_STATUS_GENERATION_FAILED']):
            raise ValueError("must be one of enum values ('RECOVERY_STATUS_UNSPECIFIED', 'RECOVERY_STATUS_ACTIVE', 'RECOVERY_STATUS_CANCELED', 'RECOVERY_STATUS_DRAFT', 'RECOVERY_STATUS_GENERATION_IN_PROGRESS', 'RECOVERY_STATUS_GENERATION_FAILED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppRecoveryAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of remote_in_app_update_data
        if self.remote_in_app_update_data:
            _dict['remoteInAppUpdateData'] = self.remote_in_app_update_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of targeting
        if self.targeting:
            _dict['targeting'] = self.targeting.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppRecoveryAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appRecoveryId": obj.get("appRecoveryId"),
            "cancelTime": obj.get("cancelTime"),
            "createTime": obj.get("createTime"),
            "deployTime": obj.get("deployTime"),
            "lastUpdateTime": obj.get("lastUpdateTime"),
            "remoteInAppUpdateData": RemoteInAppUpdateData.from_dict(obj["remoteInAppUpdateData"]) if obj.get("remoteInAppUpdateData") is not None else None,
            "status": obj.get("status"),
            "targeting": Targeting.from_dict(obj["targeting"]) if obj.get("targeting") is not None else None
        })
        return _obj



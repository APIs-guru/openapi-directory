# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IntroductoryPriceInfo(BaseModel):
    """
    Contains the introductory price information for a subscription.
    """ # noqa: E501
    introductory_price_amount_micros: Optional[StrictStr] = Field(default=None, description="Introductory price of the subscription, not including tax. The currency is the same as price_currency_code. Price is expressed in micro-units, where 1,000,000 micro-units represents one unit of the currency. For example, if the subscription price is â‚¬1.99, price_amount_micros is 1990000.", alias="introductoryPriceAmountMicros")
    introductory_price_currency_code: Optional[StrictStr] = Field(default=None, description="ISO 4217 currency code for the introductory subscription price. For example, if the price is specified in British pounds sterling, price_currency_code is \"GBP\".", alias="introductoryPriceCurrencyCode")
    introductory_price_cycles: Optional[StrictInt] = Field(default=None, description="The number of billing period to offer introductory pricing.", alias="introductoryPriceCycles")
    introductory_price_period: Optional[StrictStr] = Field(default=None, description="Introductory price period, specified in ISO 8601 format. Common values are (but not limited to) \"P1W\" (one week), \"P1M\" (one month), \"P3M\" (three months), \"P6M\" (six months), and \"P1Y\" (one year).", alias="introductoryPricePeriod")
    __properties: ClassVar[List[str]] = ["introductoryPriceAmountMicros", "introductoryPriceCurrencyCode", "introductoryPriceCycles", "introductoryPricePeriod"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntroductoryPriceInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntroductoryPriceInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "introductoryPriceAmountMicros": obj.get("introductoryPriceAmountMicros"),
            "introductoryPriceCurrencyCode": obj.get("introductoryPriceCurrencyCode"),
            "introductoryPriceCycles": obj.get("introductoryPriceCycles"),
            "introductoryPricePeriod": obj.get("introductoryPricePeriod")
        })
        return _obj



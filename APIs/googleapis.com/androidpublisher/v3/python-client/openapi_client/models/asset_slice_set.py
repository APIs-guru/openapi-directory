# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.apk_description import ApkDescription
from openapi_client.models.asset_module_metadata import AssetModuleMetadata
from typing import Optional, Set
from typing_extensions import Self

class AssetSliceSet(BaseModel):
    """
    Set of asset slices belonging to a single asset module.
    """ # noqa: E501
    apk_description: Optional[List[ApkDescription]] = Field(default=None, description="Asset slices.", alias="apkDescription")
    asset_module_metadata: Optional[AssetModuleMetadata] = Field(default=None, alias="assetModuleMetadata")
    __properties: ClassVar[List[str]] = ["apkDescription", "assetModuleMetadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssetSliceSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in apk_description (list)
        _items = []
        if self.apk_description:
            for _item_apk_description in self.apk_description:
                if _item_apk_description:
                    _items.append(_item_apk_description.to_dict())
            _dict['apkDescription'] = _items
        # override the default output from pydantic by calling `to_dict()` of asset_module_metadata
        if self.asset_module_metadata:
            _dict['assetModuleMetadata'] = self.asset_module_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssetSliceSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apkDescription": [ApkDescription.from_dict(_item) for _item in obj["apkDescription"]] if obj.get("apkDescription") is not None else None,
            "assetModuleMetadata": AssetModuleMetadata.from_dict(obj["assetModuleMetadata"]) if obj.get("assetModuleMetadata") is not None else None
        })
        return _obj



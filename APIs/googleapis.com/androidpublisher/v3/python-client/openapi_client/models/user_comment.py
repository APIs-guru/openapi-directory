# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.device_metadata import DeviceMetadata
from openapi_client.models.timestamp import Timestamp
from typing import Optional, Set
from typing_extensions import Self

class UserComment(BaseModel):
    """
    User entry from conversation between user and developer.
    """ # noqa: E501
    android_os_version: Optional[StrictInt] = Field(default=None, description="Integer Android SDK version of the user's device at the time the review was written, e.g. 23 is Marshmallow. May be absent.", alias="androidOsVersion")
    app_version_code: Optional[StrictInt] = Field(default=None, description="Integer version code of the app as installed at the time the review was written. May be absent.", alias="appVersionCode")
    app_version_name: Optional[StrictStr] = Field(default=None, description="String version name of the app as installed at the time the review was written. May be absent.", alias="appVersionName")
    device: Optional[StrictStr] = Field(default=None, description="Codename for the reviewer's device, e.g. klte, flounder. May be absent.")
    device_metadata: Optional[DeviceMetadata] = Field(default=None, alias="deviceMetadata")
    last_modified: Optional[Timestamp] = Field(default=None, alias="lastModified")
    original_text: Optional[StrictStr] = Field(default=None, description="Untranslated text of the review, where the review was translated. If the review was not translated this is left blank.", alias="originalText")
    reviewer_language: Optional[StrictStr] = Field(default=None, description="Language code for the reviewer. This is taken from the device settings so is not guaranteed to match the language the review is written in. May be absent.", alias="reviewerLanguage")
    star_rating: Optional[StrictInt] = Field(default=None, description="The star rating associated with the review, from 1 to 5.", alias="starRating")
    text: Optional[StrictStr] = Field(default=None, description="The content of the comment, i.e. review body. In some cases users have been able to write a review with separate title and body; in those cases the title and body are concatenated and separated by a tab character.")
    thumbs_down_count: Optional[StrictInt] = Field(default=None, description="Number of users who have given this review a thumbs down.", alias="thumbsDownCount")
    thumbs_up_count: Optional[StrictInt] = Field(default=None, description="Number of users who have given this review a thumbs up.", alias="thumbsUpCount")
    __properties: ClassVar[List[str]] = ["androidOsVersion", "appVersionCode", "appVersionName", "device", "deviceMetadata", "lastModified", "originalText", "reviewerLanguage", "starRating", "text", "thumbsDownCount", "thumbsUpCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserComment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of device_metadata
        if self.device_metadata:
            _dict['deviceMetadata'] = self.device_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_modified
        if self.last_modified:
            _dict['lastModified'] = self.last_modified.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserComment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "androidOsVersion": obj.get("androidOsVersion"),
            "appVersionCode": obj.get("appVersionCode"),
            "appVersionName": obj.get("appVersionName"),
            "device": obj.get("device"),
            "deviceMetadata": DeviceMetadata.from_dict(obj["deviceMetadata"]) if obj.get("deviceMetadata") is not None else None,
            "lastModified": Timestamp.from_dict(obj["lastModified"]) if obj.get("lastModified") is not None else None,
            "originalText": obj.get("originalText"),
            "reviewerLanguage": obj.get("reviewerLanguage"),
            "starRating": obj.get("starRating"),
            "text": obj.get("text"),
            "thumbsDownCount": obj.get("thumbsDownCount"),
            "thumbsUpCount": obj.get("thumbsUpCount")
        })
        return _obj



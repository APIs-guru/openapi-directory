# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.country_targeting import CountryTargeting
from openapi_client.models.localized_text import LocalizedText
from typing import Optional, Set
from typing_extensions import Self

class TrackRelease(BaseModel):
    """
    A release within a track.
    """ # noqa: E501
    country_targeting: Optional[CountryTargeting] = Field(default=None, alias="countryTargeting")
    in_app_update_priority: Optional[StrictInt] = Field(default=None, description="In-app update priority of the release. All newly added APKs in the release will be considered at this priority. Can take values in the range [0, 5], with 5 the highest priority. Defaults to 0. in_app_update_priority can not be updated once the release is rolled out. See https://developer.android.com/guide/playcore/in-app-updates.", alias="inAppUpdatePriority")
    name: Optional[StrictStr] = Field(default=None, description="The release name. Not required to be unique. If not set, the name is generated from the APK's version_name. If the release contains multiple APKs, the name is generated from the date.")
    release_notes: Optional[List[LocalizedText]] = Field(default=None, description="A description of what is new in this release.", alias="releaseNotes")
    status: Optional[StrictStr] = Field(default=None, description="The status of the release.")
    user_fraction: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Fraction of users who are eligible for a staged release. 0 < fraction < 1. Can only be set when status is \"inProgress\" or \"halted\".", alias="userFraction")
    version_codes: Optional[List[StrictStr]] = Field(default=None, description="Version codes of all APKs in the release. Must include version codes to retain from previous releases.", alias="versionCodes")
    __properties: ClassVar[List[str]] = ["countryTargeting", "inAppUpdatePriority", "name", "releaseNotes", "status", "userFraction", "versionCodes"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['statusUnspecified', 'draft', 'inProgress', 'halted', 'completed']):
            raise ValueError("must be one of enum values ('statusUnspecified', 'draft', 'inProgress', 'halted', 'completed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrackRelease from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of country_targeting
        if self.country_targeting:
            _dict['countryTargeting'] = self.country_targeting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in release_notes (list)
        _items = []
        if self.release_notes:
            for _item_release_notes in self.release_notes:
                if _item_release_notes:
                    _items.append(_item_release_notes.to_dict())
            _dict['releaseNotes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrackRelease from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "countryTargeting": CountryTargeting.from_dict(obj["countryTargeting"]) if obj.get("countryTargeting") is not None else None,
            "inAppUpdatePriority": obj.get("inAppUpdatePriority"),
            "name": obj.get("name"),
            "releaseNotes": [LocalizedText.from_dict(_item) for _item in obj["releaseNotes"]] if obj.get("releaseNotes") is not None else None,
            "status": obj.get("status"),
            "userFraction": obj.get("userFraction"),
            "versionCodes": obj.get("versionCodes")
        })
        return _obj



# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.external_subscription import ExternalSubscription
from typing import Optional, Set
from typing_extensions import Self

class RecurringExternalTransaction(BaseModel):
    """
    Represents a transaction that is part of a recurring series of payments. This can be a subscription or a one-time product with multiple payments (such as preorder).
    """ # noqa: E501
    external_subscription: Optional[ExternalSubscription] = Field(default=None, alias="externalSubscription")
    external_transaction_token: Optional[StrictStr] = Field(default=None, description="Input only. Provided during the call to Create. Retrieved from the client when the alternative billing flow is launched. Required only for the initial purchase.", alias="externalTransactionToken")
    initial_external_transaction_id: Optional[StrictStr] = Field(default=None, description="The external transaction id of the first transaction of this recurring series of transactions. For example, for a subscription this would be the transaction id of the first payment. Required when creating recurring external transactions.", alias="initialExternalTransactionId")
    migrated_transaction_program: Optional[StrictStr] = Field(default=None, description="Input only. Provided during the call to Create. Must only be used when migrating a subscription from manual monthly reporting to automated reporting.", alias="migratedTransactionProgram")
    __properties: ClassVar[List[str]] = ["externalSubscription", "externalTransactionToken", "initialExternalTransactionId", "migratedTransactionProgram"]

    @field_validator('migrated_transaction_program')
    def migrated_transaction_program_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXTERNAL_TRANSACTION_PROGRAM_UNSPECIFIED', 'USER_CHOICE_BILLING', 'ALTERTNATIVE_BILLING_ONLY']):
            raise ValueError("must be one of enum values ('EXTERNAL_TRANSACTION_PROGRAM_UNSPECIFIED', 'USER_CHOICE_BILLING', 'ALTERTNATIVE_BILLING_ONLY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecurringExternalTransaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of external_subscription
        if self.external_subscription:
            _dict['externalSubscription'] = self.external_subscription.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecurringExternalTransaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "externalSubscription": ExternalSubscription.from_dict(obj["externalSubscription"]) if obj.get("externalSubscription") is not None else None,
            "externalTransactionToken": obj.get("externalTransactionToken"),
            "initialExternalTransactionId": obj.get("initialExternalTransactionId"),
            "migratedTransactionProgram": obj.get("migratedTransactionProgram")
        })
        return _obj



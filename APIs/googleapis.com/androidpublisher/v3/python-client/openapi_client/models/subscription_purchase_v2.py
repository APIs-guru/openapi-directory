# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.canceled_state_context import CanceledStateContext
from openapi_client.models.external_account_identifiers import ExternalAccountIdentifiers
from openapi_client.models.paused_state_context import PausedStateContext
from openapi_client.models.subscribe_with_google_info import SubscribeWithGoogleInfo
from openapi_client.models.subscription_purchase_line_item import SubscriptionPurchaseLineItem
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionPurchaseV2(BaseModel):
    """
    Indicates the status of a user's subscription purchase.
    """ # noqa: E501
    acknowledgement_state: Optional[StrictStr] = Field(default=None, description="The acknowledgement state of the subscription.", alias="acknowledgementState")
    canceled_state_context: Optional[CanceledStateContext] = Field(default=None, alias="canceledStateContext")
    external_account_identifiers: Optional[ExternalAccountIdentifiers] = Field(default=None, alias="externalAccountIdentifiers")
    kind: Optional[StrictStr] = Field(default=None, description="This kind represents a SubscriptionPurchaseV2 object in the androidpublisher service.")
    latest_order_id: Optional[StrictStr] = Field(default=None, description="The order id of the latest order associated with the purchase of the subscription. For autoRenewing subscription, this is the order id of signup order if it is not renewed yet, or the last recurring order id (success, pending, or declined order). For prepaid subscription, this is the order id associated with the queried purchase token.", alias="latestOrderId")
    line_items: Optional[List[SubscriptionPurchaseLineItem]] = Field(default=None, description="Item-level info for a subscription purchase. The items in the same purchase should be either all with AutoRenewingPlan or all with PrepaidPlan.", alias="lineItems")
    linked_purchase_token: Optional[StrictStr] = Field(default=None, description="The purchase token of the old subscription if this subscription is one of the following: * Re-signup of a canceled but non-lapsed subscription * Upgrade/downgrade from a previous subscription. * Convert from prepaid to auto renewing subscription. * Convert from an auto renewing subscription to prepaid. * Topup a prepaid subscription.", alias="linkedPurchaseToken")
    paused_state_context: Optional[PausedStateContext] = Field(default=None, alias="pausedStateContext")
    region_code: Optional[StrictStr] = Field(default=None, description="ISO 3166-1 alpha-2 billing country/region code of the user at the time the subscription was granted.", alias="regionCode")
    start_time: Optional[StrictStr] = Field(default=None, description="Time at which the subscription was granted. Not set for pending subscriptions (subscription was created but awaiting payment during signup).", alias="startTime")
    subscribe_with_google_info: Optional[SubscribeWithGoogleInfo] = Field(default=None, alias="subscribeWithGoogleInfo")
    subscription_state: Optional[StrictStr] = Field(default=None, description="The current state of the subscription.", alias="subscriptionState")
    test_purchase: Optional[Dict[str, Any]] = Field(default=None, description="Whether this subscription purchase is a test purchase.", alias="testPurchase")
    __properties: ClassVar[List[str]] = ["acknowledgementState", "canceledStateContext", "externalAccountIdentifiers", "kind", "latestOrderId", "lineItems", "linkedPurchaseToken", "pausedStateContext", "regionCode", "startTime", "subscribeWithGoogleInfo", "subscriptionState", "testPurchase"]

    @field_validator('acknowledgement_state')
    def acknowledgement_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACKNOWLEDGEMENT_STATE_UNSPECIFIED', 'ACKNOWLEDGEMENT_STATE_PENDING', 'ACKNOWLEDGEMENT_STATE_ACKNOWLEDGED']):
            raise ValueError("must be one of enum values ('ACKNOWLEDGEMENT_STATE_UNSPECIFIED', 'ACKNOWLEDGEMENT_STATE_PENDING', 'ACKNOWLEDGEMENT_STATE_ACKNOWLEDGED')")
        return value

    @field_validator('subscription_state')
    def subscription_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SUBSCRIPTION_STATE_UNSPECIFIED', 'SUBSCRIPTION_STATE_PENDING', 'SUBSCRIPTION_STATE_ACTIVE', 'SUBSCRIPTION_STATE_PAUSED', 'SUBSCRIPTION_STATE_IN_GRACE_PERIOD', 'SUBSCRIPTION_STATE_ON_HOLD', 'SUBSCRIPTION_STATE_CANCELED', 'SUBSCRIPTION_STATE_EXPIRED']):
            raise ValueError("must be one of enum values ('SUBSCRIPTION_STATE_UNSPECIFIED', 'SUBSCRIPTION_STATE_PENDING', 'SUBSCRIPTION_STATE_ACTIVE', 'SUBSCRIPTION_STATE_PAUSED', 'SUBSCRIPTION_STATE_IN_GRACE_PERIOD', 'SUBSCRIPTION_STATE_ON_HOLD', 'SUBSCRIPTION_STATE_CANCELED', 'SUBSCRIPTION_STATE_EXPIRED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionPurchaseV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of canceled_state_context
        if self.canceled_state_context:
            _dict['canceledStateContext'] = self.canceled_state_context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of external_account_identifiers
        if self.external_account_identifiers:
            _dict['externalAccountIdentifiers'] = self.external_account_identifiers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item_line_items in self.line_items:
                if _item_line_items:
                    _items.append(_item_line_items.to_dict())
            _dict['lineItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of paused_state_context
        if self.paused_state_context:
            _dict['pausedStateContext'] = self.paused_state_context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subscribe_with_google_info
        if self.subscribe_with_google_info:
            _dict['subscribeWithGoogleInfo'] = self.subscribe_with_google_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionPurchaseV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acknowledgementState": obj.get("acknowledgementState"),
            "canceledStateContext": CanceledStateContext.from_dict(obj["canceledStateContext"]) if obj.get("canceledStateContext") is not None else None,
            "externalAccountIdentifiers": ExternalAccountIdentifiers.from_dict(obj["externalAccountIdentifiers"]) if obj.get("externalAccountIdentifiers") is not None else None,
            "kind": obj.get("kind"),
            "latestOrderId": obj.get("latestOrderId"),
            "lineItems": [SubscriptionPurchaseLineItem.from_dict(_item) for _item in obj["lineItems"]] if obj.get("lineItems") is not None else None,
            "linkedPurchaseToken": obj.get("linkedPurchaseToken"),
            "pausedStateContext": PausedStateContext.from_dict(obj["pausedStateContext"]) if obj.get("pausedStateContext") is not None else None,
            "regionCode": obj.get("regionCode"),
            "startTime": obj.get("startTime"),
            "subscribeWithGoogleInfo": SubscribeWithGoogleInfo.from_dict(obj["subscribeWithGoogleInfo"]) if obj.get("subscribeWithGoogleInfo") is not None else None,
            "subscriptionState": obj.get("subscriptionState"),
            "testPurchase": obj.get("testPurchase")
        })
        return _obj



# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.grant import Grant
from typing import Optional, Set
from typing_extensions import Self

class User(BaseModel):
    """
    A user resource.
    """ # noqa: E501
    access_state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the user's access to the Play Console.", alias="accessState")
    developer_account_permissions: Optional[List[StrictStr]] = Field(default=None, description="Permissions for the user which apply across the developer account.", alias="developerAccountPermissions")
    email: Optional[StrictStr] = Field(default=None, description="Immutable. The user's email address.")
    expiration_time: Optional[StrictStr] = Field(default=None, description="The time at which the user's access expires, if set. When setting this value, it must always be in the future.", alias="expirationTime")
    grants: Optional[List[Grant]] = Field(default=None, description="Output only. Per-app permissions for the user.")
    name: Optional[StrictStr] = Field(default=None, description="Required. Resource name for this user, following the pattern \"developers/{developer}/users/{email}\".")
    partial: Optional[StrictBool] = Field(default=None, description="Output only. Whether there are more permissions for the user that are not represented here. This can happen if the caller does not have permission to manage all apps in the account. This is also `true` if this user is the account owner. If this field is `true`, it should be taken as a signal that this user cannot be fully managed via the API. That is, the API caller is not be able to manage all of the permissions this user holds, either because it doesn't know about them or because the user is the account owner.")
    __properties: ClassVar[List[str]] = ["accessState", "developerAccountPermissions", "email", "expirationTime", "grants", "name", "partial"]

    @field_validator('access_state')
    def access_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACCESS_STATE_UNSPECIFIED', 'INVITED', 'INVITATION_EXPIRED', 'ACCESS_GRANTED', 'ACCESS_EXPIRED']):
            raise ValueError("must be one of enum values ('ACCESS_STATE_UNSPECIFIED', 'INVITED', 'INVITATION_EXPIRED', 'ACCESS_GRANTED', 'ACCESS_EXPIRED')")
        return value

    @field_validator('developer_account_permissions')
    def developer_account_permissions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['DEVELOPER_LEVEL_PERMISSION_UNSPECIFIED', 'CAN_SEE_ALL_APPS', 'CAN_VIEW_FINANCIAL_DATA_GLOBAL', 'CAN_MANAGE_PERMISSIONS_GLOBAL', 'CAN_EDIT_GAMES_GLOBAL', 'CAN_PUBLISH_GAMES_GLOBAL', 'CAN_REPLY_TO_REVIEWS_GLOBAL', 'CAN_MANAGE_PUBLIC_APKS_GLOBAL', 'CAN_MANAGE_TRACK_APKS_GLOBAL', 'CAN_MANAGE_TRACK_USERS_GLOBAL', 'CAN_MANAGE_PUBLIC_LISTING_GLOBAL', 'CAN_MANAGE_DRAFT_APPS_GLOBAL', 'CAN_CREATE_MANAGED_PLAY_APPS_GLOBAL', 'CAN_CHANGE_MANAGED_PLAY_SETTING_GLOBAL', 'CAN_MANAGE_ORDERS_GLOBAL', 'CAN_MANAGE_APP_CONTENT_GLOBAL', 'CAN_VIEW_NON_FINANCIAL_DATA_GLOBAL', 'CAN_VIEW_APP_QUALITY_GLOBAL']):
                raise ValueError("each list item must be one of ('DEVELOPER_LEVEL_PERMISSION_UNSPECIFIED', 'CAN_SEE_ALL_APPS', 'CAN_VIEW_FINANCIAL_DATA_GLOBAL', 'CAN_MANAGE_PERMISSIONS_GLOBAL', 'CAN_EDIT_GAMES_GLOBAL', 'CAN_PUBLISH_GAMES_GLOBAL', 'CAN_REPLY_TO_REVIEWS_GLOBAL', 'CAN_MANAGE_PUBLIC_APKS_GLOBAL', 'CAN_MANAGE_TRACK_APKS_GLOBAL', 'CAN_MANAGE_TRACK_USERS_GLOBAL', 'CAN_MANAGE_PUBLIC_LISTING_GLOBAL', 'CAN_MANAGE_DRAFT_APPS_GLOBAL', 'CAN_CREATE_MANAGED_PLAY_APPS_GLOBAL', 'CAN_CHANGE_MANAGED_PLAY_SETTING_GLOBAL', 'CAN_MANAGE_ORDERS_GLOBAL', 'CAN_MANAGE_APP_CONTENT_GLOBAL', 'CAN_VIEW_NON_FINANCIAL_DATA_GLOBAL', 'CAN_VIEW_APP_QUALITY_GLOBAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "access_state",
            "grants",
            "partial",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in grants (list)
        _items = []
        if self.grants:
            for _item_grants in self.grants:
                if _item_grants:
                    _items.append(_item_grants.to_dict())
            _dict['grants'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessState": obj.get("accessState"),
            "developerAccountPermissions": obj.get("developerAccountPermissions"),
            "email": obj.get("email"),
            "expirationTime": obj.get("expirationTime"),
            "grants": [Grant.from_dict(_item) for _item in obj["grants"]] if obj.get("grants") is not None else None,
            "name": obj.get("name"),
            "partial": obj.get("partial")
        })
        return _obj



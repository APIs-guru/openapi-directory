# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.base_plan import BasePlan
from openapi_client.models.subscription_listing import SubscriptionListing
from openapi_client.models.subscription_tax_and_compliance_settings import SubscriptionTaxAndComplianceSettings
from typing import Optional, Set
from typing_extensions import Self

class Subscription(BaseModel):
    """
    A single subscription for an app.
    """ # noqa: E501
    archived: Optional[StrictBool] = Field(default=None, description="Output only. Deprecated: subscription archiving is not supported.")
    base_plans: Optional[List[BasePlan]] = Field(default=None, description="The set of base plans for this subscription. Represents the prices and duration of the subscription if no other offers apply.", alias="basePlans")
    listings: Optional[List[SubscriptionListing]] = Field(default=None, description="Required. List of localized listings for this subscription. Must contain at least an entry for the default language of the parent app.")
    package_name: Optional[StrictStr] = Field(default=None, description="Immutable. Package name of the parent app.", alias="packageName")
    product_id: Optional[StrictStr] = Field(default=None, description="Immutable. Unique product ID of the product. Unique within the parent app. Product IDs must be composed of lower-case letters (a-z), numbers (0-9), underscores (_) and dots (.). It must start with a lower-case letter or number, and be between 1 and 40 (inclusive) characters in length.", alias="productId")
    tax_and_compliance_settings: Optional[SubscriptionTaxAndComplianceSettings] = Field(default=None, alias="taxAndComplianceSettings")
    __properties: ClassVar[List[str]] = ["archived", "basePlans", "listings", "packageName", "productId", "taxAndComplianceSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Subscription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "archived",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in base_plans (list)
        _items = []
        if self.base_plans:
            for _item_base_plans in self.base_plans:
                if _item_base_plans:
                    _items.append(_item_base_plans.to_dict())
            _dict['basePlans'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in listings (list)
        _items = []
        if self.listings:
            for _item_listings in self.listings:
                if _item_listings:
                    _items.append(_item_listings.to_dict())
            _dict['listings'] = _items
        # override the default output from pydantic by calling `to_dict()` of tax_and_compliance_settings
        if self.tax_and_compliance_settings:
            _dict['taxAndComplianceSettings'] = self.tax_and_compliance_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Subscription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "archived": obj.get("archived"),
            "basePlans": [BasePlan.from_dict(_item) for _item in obj["basePlans"]] if obj.get("basePlans") is not None else None,
            "listings": [SubscriptionListing.from_dict(_item) for _item in obj["listings"]] if obj.get("listings") is not None else None,
            "packageName": obj.get("packageName"),
            "productId": obj.get("productId"),
            "taxAndComplianceSettings": SubscriptionTaxAndComplianceSettings.from_dict(obj["taxAndComplianceSettings"]) if obj.get("taxAndComplianceSettings") is not None else None
        })
        return _obj



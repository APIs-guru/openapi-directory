# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auto_renewing_plan import AutoRenewingPlan
from openapi_client.models.deferred_item_replacement import DeferredItemReplacement
from openapi_client.models.offer_details import OfferDetails
from openapi_client.models.prepaid_plan import PrepaidPlan
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionPurchaseLineItem(BaseModel):
    """
    Item-level info for a subscription purchase.
    """ # noqa: E501
    auto_renewing_plan: Optional[AutoRenewingPlan] = Field(default=None, alias="autoRenewingPlan")
    deferred_item_replacement: Optional[DeferredItemReplacement] = Field(default=None, alias="deferredItemReplacement")
    expiry_time: Optional[StrictStr] = Field(default=None, description="Time at which the subscription expired or will expire unless the access is extended (ex. renews).", alias="expiryTime")
    offer_details: Optional[OfferDetails] = Field(default=None, alias="offerDetails")
    prepaid_plan: Optional[PrepaidPlan] = Field(default=None, alias="prepaidPlan")
    product_id: Optional[StrictStr] = Field(default=None, description="The purchased product ID (for example, 'monthly001').", alias="productId")
    __properties: ClassVar[List[str]] = ["autoRenewingPlan", "deferredItemReplacement", "expiryTime", "offerDetails", "prepaidPlan", "productId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionPurchaseLineItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auto_renewing_plan
        if self.auto_renewing_plan:
            _dict['autoRenewingPlan'] = self.auto_renewing_plan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deferred_item_replacement
        if self.deferred_item_replacement:
            _dict['deferredItemReplacement'] = self.deferred_item_replacement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of offer_details
        if self.offer_details:
            _dict['offerDetails'] = self.offer_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prepaid_plan
        if self.prepaid_plan:
            _dict['prepaidPlan'] = self.prepaid_plan.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionPurchaseLineItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoRenewingPlan": AutoRenewingPlan.from_dict(obj["autoRenewingPlan"]) if obj.get("autoRenewingPlan") is not None else None,
            "deferredItemReplacement": DeferredItemReplacement.from_dict(obj["deferredItemReplacement"]) if obj.get("deferredItemReplacement") is not None else None,
            "expiryTime": obj.get("expiryTime"),
            "offerDetails": OfferDetails.from_dict(obj["offerDetails"]) if obj.get("offerDetails") is not None else None,
            "prepaidPlan": PrepaidPlan.from_dict(obj["prepaidPlan"]) if obj.get("prepaidPlan") is not None else None,
            "productId": obj.get("productId")
        })
        return _obj



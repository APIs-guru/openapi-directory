# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceMetadata(BaseModel):
    """
    Characteristics of the user's device.
    """ # noqa: E501
    cpu_make: Optional[StrictStr] = Field(default=None, description="Device CPU make, e.g. \"Qualcomm\"", alias="cpuMake")
    cpu_model: Optional[StrictStr] = Field(default=None, description="Device CPU model, e.g. \"MSM8974\"", alias="cpuModel")
    device_class: Optional[StrictStr] = Field(default=None, description="Device class (e.g. tablet)", alias="deviceClass")
    gl_es_version: Optional[StrictInt] = Field(default=None, description="OpenGL version", alias="glEsVersion")
    manufacturer: Optional[StrictStr] = Field(default=None, description="Device manufacturer (e.g. Motorola)")
    native_platform: Optional[StrictStr] = Field(default=None, description="Comma separated list of native platforms (e.g. \"arm\", \"arm7\")", alias="nativePlatform")
    product_name: Optional[StrictStr] = Field(default=None, description="Device model name (e.g. Droid)", alias="productName")
    ram_mb: Optional[StrictInt] = Field(default=None, description="Device RAM in Megabytes, e.g. \"2048\"", alias="ramMb")
    screen_density_dpi: Optional[StrictInt] = Field(default=None, description="Screen density in DPI", alias="screenDensityDpi")
    screen_height_px: Optional[StrictInt] = Field(default=None, description="Screen height in pixels", alias="screenHeightPx")
    screen_width_px: Optional[StrictInt] = Field(default=None, description="Screen width in pixels", alias="screenWidthPx")
    __properties: ClassVar[List[str]] = ["cpuMake", "cpuModel", "deviceClass", "glEsVersion", "manufacturer", "nativePlatform", "productName", "ramMb", "screenDensityDpi", "screenHeightPx", "screenWidthPx"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cpuMake": obj.get("cpuMake"),
            "cpuModel": obj.get("cpuModel"),
            "deviceClass": obj.get("deviceClass"),
            "glEsVersion": obj.get("glEsVersion"),
            "manufacturer": obj.get("manufacturer"),
            "nativePlatform": obj.get("nativePlatform"),
            "productName": obj.get("productName"),
            "ramMb": obj.get("ramMb"),
            "screenDensityDpi": obj.get("screenDensityDpi"),
            "screenHeightPx": obj.get("screenHeightPx"),
            "screenWidthPx": obj.get("screenWidthPx")
        })
        return _obj



# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.device_id import DeviceId
from openapi_client.models.device_ram import DeviceRam
from openapi_client.models.system_feature import SystemFeature
from typing import Optional, Set
from typing_extensions import Self

class DeviceSelector(BaseModel):
    """
    Selector for a device group. A selector consists of a set of conditions on the device that should all match (logical AND) to determine a device group eligibility. For instance, if a selector specifies RAM conditions, device model inclusion and device model exclusion, a device is considered to match if: device matches RAM conditions AND device matches one of the included device models AND device doesn't match excluded device models
    """ # noqa: E501
    device_ram: Optional[DeviceRam] = Field(default=None, alias="deviceRam")
    excluded_device_ids: Optional[List[DeviceId]] = Field(default=None, description="Device models excluded by this selector, even if they match all other conditions.", alias="excludedDeviceIds")
    forbidden_system_features: Optional[List[SystemFeature]] = Field(default=None, description="A device that has any of these system features is excluded by this selector, even if it matches all other conditions.", alias="forbiddenSystemFeatures")
    included_device_ids: Optional[List[DeviceId]] = Field(default=None, description="Device models included by this selector.", alias="includedDeviceIds")
    required_system_features: Optional[List[SystemFeature]] = Field(default=None, description="A device needs to have all these system features to be included by the selector.", alias="requiredSystemFeatures")
    __properties: ClassVar[List[str]] = ["deviceRam", "excludedDeviceIds", "forbiddenSystemFeatures", "includedDeviceIds", "requiredSystemFeatures"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceSelector from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of device_ram
        if self.device_ram:
            _dict['deviceRam'] = self.device_ram.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in excluded_device_ids (list)
        _items = []
        if self.excluded_device_ids:
            for _item_excluded_device_ids in self.excluded_device_ids:
                if _item_excluded_device_ids:
                    _items.append(_item_excluded_device_ids.to_dict())
            _dict['excludedDeviceIds'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in forbidden_system_features (list)
        _items = []
        if self.forbidden_system_features:
            for _item_forbidden_system_features in self.forbidden_system_features:
                if _item_forbidden_system_features:
                    _items.append(_item_forbidden_system_features.to_dict())
            _dict['forbiddenSystemFeatures'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in included_device_ids (list)
        _items = []
        if self.included_device_ids:
            for _item_included_device_ids in self.included_device_ids:
                if _item_included_device_ids:
                    _items.append(_item_included_device_ids.to_dict())
            _dict['includedDeviceIds'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in required_system_features (list)
        _items = []
        if self.required_system_features:
            for _item_required_system_features in self.required_system_features:
                if _item_required_system_features:
                    _items.append(_item_required_system_features.to_dict())
            _dict['requiredSystemFeatures'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceSelector from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deviceRam": DeviceRam.from_dict(obj["deviceRam"]) if obj.get("deviceRam") is not None else None,
            "excludedDeviceIds": [DeviceId.from_dict(_item) for _item in obj["excludedDeviceIds"]] if obj.get("excludedDeviceIds") is not None else None,
            "forbiddenSystemFeatures": [SystemFeature.from_dict(_item) for _item in obj["forbiddenSystemFeatures"]] if obj.get("forbiddenSystemFeatures") is not None else None,
            "includedDeviceIds": [DeviceId.from_dict(_item) for _item in obj["includedDeviceIds"]] if obj.get("includedDeviceIds") is not None else None,
            "requiredSystemFeatures": [SystemFeature.from_dict(_item) for _item in obj["requiredSystemFeatures"]] if obj.get("requiredSystemFeatures") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RegionalPriceMigrationConfig(BaseModel):
    """
    Configuration for a price migration.
    """ # noqa: E501
    oldest_allowed_price_version_time: Optional[StrictStr] = Field(default=None, description="Required. The cutoff time for historical prices that subscribers can remain paying. Subscribers on prices which were available at this cutoff time or later will stay on their existing price. Subscribers on older prices will be migrated to the currently-offered price. The migrated subscribers will receive a notification that they will be paying a different price. Subscribers who do not agree to the new price will have their subscription ended at the next renewal.", alias="oldestAllowedPriceVersionTime")
    price_increase_type: Optional[StrictStr] = Field(default=None, description="Optional. The behavior the caller wants users to see when there is a price increase during migration. If left unset, the behavior defaults to PRICE_INCREASE_TYPE_OPT_IN. Note that the first opt-out price increase migration for each app must be initiated in Play Console.", alias="priceIncreaseType")
    region_code: Optional[StrictStr] = Field(default=None, description="Required. Region code this configuration applies to, as defined by ISO 3166-2, e.g. \"US\".", alias="regionCode")
    __properties: ClassVar[List[str]] = ["oldestAllowedPriceVersionTime", "priceIncreaseType", "regionCode"]

    @field_validator('price_increase_type')
    def price_increase_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRICE_INCREASE_TYPE_UNSPECIFIED', 'PRICE_INCREASE_TYPE_OPT_IN', 'PRICE_INCREASE_TYPE_OPT_OUT']):
            raise ValueError("must be one of enum values ('PRICE_INCREASE_TYPE_UNSPECIFIED', 'PRICE_INCREASE_TYPE_OPT_IN', 'PRICE_INCREASE_TYPE_OPT_OUT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RegionalPriceMigrationConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RegionalPriceMigrationConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "oldestAllowedPriceVersionTime": obj.get("oldestAllowedPriceVersionTime"),
            "priceIncreaseType": obj.get("priceIncreaseType"),
            "regionCode": obj.get("regionCode")
        })
        return _obj



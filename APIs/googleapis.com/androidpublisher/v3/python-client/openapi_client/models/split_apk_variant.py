# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.apk_set import ApkSet
from openapi_client.models.variant_targeting import VariantTargeting
from typing import Optional, Set
from typing_extensions import Self

class SplitApkVariant(BaseModel):
    """
    Variant is a group of APKs that covers a part of the device configuration space. APKs from multiple variants are never combined on one device.
    """ # noqa: E501
    apk_set: Optional[List[ApkSet]] = Field(default=None, description="Set of APKs, one set per module.", alias="apkSet")
    targeting: Optional[VariantTargeting] = None
    variant_number: Optional[StrictInt] = Field(default=None, description="Number of the variant, starting at 0 (unless overridden). A device will receive APKs from the first variant that matches the device configuration, with higher variant numbers having priority over lower variant numbers.", alias="variantNumber")
    __properties: ClassVar[List[str]] = ["apkSet", "targeting", "variantNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SplitApkVariant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in apk_set (list)
        _items = []
        if self.apk_set:
            for _item_apk_set in self.apk_set:
                if _item_apk_set:
                    _items.append(_item_apk_set.to_dict())
            _dict['apkSet'] = _items
        # override the default output from pydantic by calling `to_dict()` of targeting
        if self.targeting:
            _dict['targeting'] = self.targeting.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SplitApkVariant from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apkSet": [ApkSet.from_dict(_item) for _item in obj["apkSet"]] if obj.get("apkSet") is not None else None,
            "targeting": VariantTargeting.from_dict(obj["targeting"]) if obj.get("targeting") is not None else None,
            "variantNumber": obj.get("variantNumber")
        })
        return _obj



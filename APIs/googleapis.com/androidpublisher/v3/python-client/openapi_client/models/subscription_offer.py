# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.offer_tag import OfferTag
from openapi_client.models.other_regions_subscription_offer_config import OtherRegionsSubscriptionOfferConfig
from openapi_client.models.regional_subscription_offer_config import RegionalSubscriptionOfferConfig
from openapi_client.models.subscription_offer_phase import SubscriptionOfferPhase
from openapi_client.models.subscription_offer_targeting import SubscriptionOfferTargeting
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionOffer(BaseModel):
    """
    A single, temporary offer
    """ # noqa: E501
    base_plan_id: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The ID of the base plan to which this offer is an extension.", alias="basePlanId")
    offer_id: Optional[StrictStr] = Field(default=None, description="Required. Immutable. Unique ID of this subscription offer. Must be unique within the base plan.", alias="offerId")
    offer_tags: Optional[List[OfferTag]] = Field(default=None, description="List of up to 20 custom tags specified for this offer, and returned to the app through the billing library.", alias="offerTags")
    other_regions_config: Optional[OtherRegionsSubscriptionOfferConfig] = Field(default=None, alias="otherRegionsConfig")
    package_name: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The package name of the app the parent subscription belongs to.", alias="packageName")
    phases: Optional[List[SubscriptionOfferPhase]] = Field(default=None, description="Required. The phases of this subscription offer. Must contain at least one entry, and may contain at most five. Users will always receive all these phases in the specified order. Phases may not be added, removed, or reordered after initial creation.")
    product_id: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The ID of the parent subscription this offer belongs to.", alias="productId")
    regional_configs: Optional[List[RegionalSubscriptionOfferConfig]] = Field(default=None, description="Required. The region-specific configuration of this offer. Must contain at least one entry.", alias="regionalConfigs")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of this offer. Can be changed using Activate and Deactivate actions. NB: the base plan state supersedes this state, so an active offer may not be available if the base plan is not active.")
    targeting: Optional[SubscriptionOfferTargeting] = None
    __properties: ClassVar[List[str]] = ["basePlanId", "offerId", "offerTags", "otherRegionsConfig", "packageName", "phases", "productId", "regionalConfigs", "state", "targeting"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'DRAFT', 'ACTIVE', 'INACTIVE']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'DRAFT', 'ACTIVE', 'INACTIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionOffer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in offer_tags (list)
        _items = []
        if self.offer_tags:
            for _item_offer_tags in self.offer_tags:
                if _item_offer_tags:
                    _items.append(_item_offer_tags.to_dict())
            _dict['offerTags'] = _items
        # override the default output from pydantic by calling `to_dict()` of other_regions_config
        if self.other_regions_config:
            _dict['otherRegionsConfig'] = self.other_regions_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in phases (list)
        _items = []
        if self.phases:
            for _item_phases in self.phases:
                if _item_phases:
                    _items.append(_item_phases.to_dict())
            _dict['phases'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in regional_configs (list)
        _items = []
        if self.regional_configs:
            for _item_regional_configs in self.regional_configs:
                if _item_regional_configs:
                    _items.append(_item_regional_configs.to_dict())
            _dict['regionalConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of targeting
        if self.targeting:
            _dict['targeting'] = self.targeting.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionOffer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "basePlanId": obj.get("basePlanId"),
            "offerId": obj.get("offerId"),
            "offerTags": [OfferTag.from_dict(_item) for _item in obj["offerTags"]] if obj.get("offerTags") is not None else None,
            "otherRegionsConfig": OtherRegionsSubscriptionOfferConfig.from_dict(obj["otherRegionsConfig"]) if obj.get("otherRegionsConfig") is not None else None,
            "packageName": obj.get("packageName"),
            "phases": [SubscriptionOfferPhase.from_dict(_item) for _item in obj["phases"]] if obj.get("phases") is not None else None,
            "productId": obj.get("productId"),
            "regionalConfigs": [RegionalSubscriptionOfferConfig.from_dict(_item) for _item in obj["regionalConfigs"]] if obj.get("regionalConfigs") is not None else None,
            "state": obj.get("state"),
            "targeting": SubscriptionOfferTargeting.from_dict(obj["targeting"]) if obj.get("targeting") is not None else None
        })
        return _obj



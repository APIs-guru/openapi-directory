# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AutoRenewingBasePlanType(BaseModel):
    """
    Represents a base plan that automatically renews at the end of its subscription period.
    """ # noqa: E501
    account_hold_duration: Optional[StrictStr] = Field(default=None, description="Optional. Account hold period of the subscription, specified in ISO 8601 format. Acceptable values must be in DAYS and in the range P0D (zero days) to P30D (30 days). If not specified, the default value is P30D (30 days).", alias="accountHoldDuration")
    billing_period_duration: Optional[StrictStr] = Field(default=None, description="Required. Subscription period, specified in ISO 8601 format. For a list of acceptable billing periods, refer to the help center.", alias="billingPeriodDuration")
    grace_period_duration: Optional[StrictStr] = Field(default=None, description="Grace period of the subscription, specified in ISO 8601 format. Acceptable values are P0D (zero days), P3D (3 days), P7D (7 days), P14D (14 days), and P30D (30 days). If not specified, a default value will be used based on the recurring period duration.", alias="gracePeriodDuration")
    legacy_compatible: Optional[StrictBool] = Field(default=None, description="Whether the renewing base plan is backward compatible. The backward compatible base plan is returned by the Google Play Billing Library deprecated method querySkuDetailsAsync(). Only one renewing base plan can be marked as legacy compatible for a given subscription.", alias="legacyCompatible")
    legacy_compatible_subscription_offer_id: Optional[StrictStr] = Field(default=None, description="Subscription offer id which is legacy compatible. The backward compatible subscription offer is returned by the Google Play Billing Library deprecated method querySkuDetailsAsync(). Only one subscription offer can be marked as legacy compatible for a given renewing base plan. To have no Subscription offer as legacy compatible set this field as empty string.", alias="legacyCompatibleSubscriptionOfferId")
    proration_mode: Optional[StrictStr] = Field(default=None, description="The proration mode for the base plan determines what happens when a user switches to this plan from another base plan. If unspecified, defaults to CHARGE_ON_NEXT_BILLING_DATE.", alias="prorationMode")
    resubscribe_state: Optional[StrictStr] = Field(default=None, description="Whether users should be able to resubscribe to this base plan in Google Play surfaces. Defaults to RESUBSCRIBE_STATE_ACTIVE if not specified.", alias="resubscribeState")
    __properties: ClassVar[List[str]] = ["accountHoldDuration", "billingPeriodDuration", "gracePeriodDuration", "legacyCompatible", "legacyCompatibleSubscriptionOfferId", "prorationMode", "resubscribeState"]

    @field_validator('proration_mode')
    def proration_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SUBSCRIPTION_PRORATION_MODE_UNSPECIFIED', 'SUBSCRIPTION_PRORATION_MODE_CHARGE_ON_NEXT_BILLING_DATE', 'SUBSCRIPTION_PRORATION_MODE_CHARGE_FULL_PRICE_IMMEDIATELY']):
            raise ValueError("must be one of enum values ('SUBSCRIPTION_PRORATION_MODE_UNSPECIFIED', 'SUBSCRIPTION_PRORATION_MODE_CHARGE_ON_NEXT_BILLING_DATE', 'SUBSCRIPTION_PRORATION_MODE_CHARGE_FULL_PRICE_IMMEDIATELY')")
        return value

    @field_validator('resubscribe_state')
    def resubscribe_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RESUBSCRIBE_STATE_UNSPECIFIED', 'RESUBSCRIBE_STATE_ACTIVE', 'RESUBSCRIBE_STATE_INACTIVE']):
            raise ValueError("must be one of enum values ('RESUBSCRIBE_STATE_UNSPECIFIED', 'RESUBSCRIBE_STATE_ACTIVE', 'RESUBSCRIBE_STATE_INACTIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AutoRenewingBasePlanType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AutoRenewingBasePlanType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountHoldDuration": obj.get("accountHoldDuration"),
            "billingPeriodDuration": obj.get("billingPeriodDuration"),
            "gracePeriodDuration": obj.get("gracePeriodDuration"),
            "legacyCompatible": obj.get("legacyCompatible"),
            "legacyCompatibleSubscriptionOfferId": obj.get("legacyCompatibleSubscriptionOfferId"),
            "prorationMode": obj.get("prorationMode"),
            "resubscribeState": obj.get("resubscribeState")
        })
        return _obj



# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.device_group import DeviceGroup
from openapi_client.models.device_tier_set import DeviceTierSet
from openapi_client.models.user_country_set import UserCountrySet
from typing import Optional, Set
from typing_extensions import Self

class DeviceTierConfig(BaseModel):
    """
    Configuration describing device targeting criteria for the content of an app.
    """ # noqa: E501
    device_groups: Optional[List[DeviceGroup]] = Field(default=None, description="Definition of device groups for the app.", alias="deviceGroups")
    device_tier_config_id: Optional[StrictStr] = Field(default=None, description="Output only. The device tier config ID.", alias="deviceTierConfigId")
    device_tier_set: Optional[DeviceTierSet] = Field(default=None, alias="deviceTierSet")
    user_country_sets: Optional[List[UserCountrySet]] = Field(default=None, description="Definition of user country sets for the app.", alias="userCountrySets")
    __properties: ClassVar[List[str]] = ["deviceGroups", "deviceTierConfigId", "deviceTierSet", "userCountrySets"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceTierConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "device_tier_config_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in device_groups (list)
        _items = []
        if self.device_groups:
            for _item_device_groups in self.device_groups:
                if _item_device_groups:
                    _items.append(_item_device_groups.to_dict())
            _dict['deviceGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of device_tier_set
        if self.device_tier_set:
            _dict['deviceTierSet'] = self.device_tier_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in user_country_sets (list)
        _items = []
        if self.user_country_sets:
            for _item_user_country_sets in self.user_country_sets:
                if _item_user_country_sets:
                    _items.append(_item_user_country_sets.to_dict())
            _dict['userCountrySets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceTierConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deviceGroups": [DeviceGroup.from_dict(_item) for _item in obj["deviceGroups"]] if obj.get("deviceGroups") is not None else None,
            "deviceTierConfigId": obj.get("deviceTierConfigId"),
            "deviceTierSet": DeviceTierSet.from_dict(obj["deviceTierSet"]) if obj.get("deviceTierSet") is not None else None,
            "userCountrySets": [UserCountrySet.from_dict(_item) for _item in obj["userCountrySets"]] if obj.get("userCountrySets") is not None else None
        })
        return _obj



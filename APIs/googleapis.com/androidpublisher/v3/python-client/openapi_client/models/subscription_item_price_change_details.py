# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.money import Money
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionItemPriceChangeDetails(BaseModel):
    """
    Price change related information of a subscription item.
    """ # noqa: E501
    expected_new_price_charge_time: Optional[StrictStr] = Field(default=None, description="The renewal time at which the price change will become effective for the user. This is subject to change(to a future time) due to cases where the renewal time shifts like pause. This field is only populated if the price change has not taken effect.", alias="expectedNewPriceChargeTime")
    new_price: Optional[Money] = Field(default=None, alias="newPrice")
    price_change_mode: Optional[StrictStr] = Field(default=None, description="Price change mode specifies how the subscription item price is changing.", alias="priceChangeMode")
    price_change_state: Optional[StrictStr] = Field(default=None, description="State the price change is currently in.", alias="priceChangeState")
    __properties: ClassVar[List[str]] = ["expectedNewPriceChargeTime", "newPrice", "priceChangeMode", "priceChangeState"]

    @field_validator('price_change_mode')
    def price_change_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRICE_CHANGE_MODE_UNSPECIFIED', 'PRICE_DECREASE', 'PRICE_INCREASE', 'OPT_OUT_PRICE_INCREASE']):
            raise ValueError("must be one of enum values ('PRICE_CHANGE_MODE_UNSPECIFIED', 'PRICE_DECREASE', 'PRICE_INCREASE', 'OPT_OUT_PRICE_INCREASE')")
        return value

    @field_validator('price_change_state')
    def price_change_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRICE_CHANGE_STATE_UNSPECIFIED', 'OUTSTANDING', 'CONFIRMED', 'APPLIED']):
            raise ValueError("must be one of enum values ('PRICE_CHANGE_STATE_UNSPECIFIED', 'OUTSTANDING', 'CONFIRMED', 'APPLIED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionItemPriceChangeDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of new_price
        if self.new_price:
            _dict['newPrice'] = self.new_price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionItemPriceChangeDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "expectedNewPriceChargeTime": obj.get("expectedNewPriceChargeTime"),
            "newPrice": Money.from_dict(obj["newPrice"]) if obj.get("newPrice") is not None else None,
            "priceChangeMode": obj.get("priceChangeMode"),
            "priceChangeState": obj.get("priceChangeState")
        })
        return _obj



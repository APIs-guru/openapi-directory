# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.generated_asset_pack_slice import GeneratedAssetPackSlice
from openapi_client.models.generated_recovery_apk import GeneratedRecoveryApk
from openapi_client.models.generated_split_apk import GeneratedSplitApk
from openapi_client.models.generated_standalone_apk import GeneratedStandaloneApk
from openapi_client.models.generated_universal_apk import GeneratedUniversalApk
from openapi_client.models.targeting_info import TargetingInfo
from typing import Optional, Set
from typing_extensions import Self

class GeneratedApksPerSigningKey(BaseModel):
    """
    Download metadata for split, standalone and universal APKs, as well as asset pack slices, signed with a given key.
    """ # noqa: E501
    certificate_sha256_hash: Optional[StrictStr] = Field(default=None, description="SHA256 hash of the APK signing public key certificate.", alias="certificateSha256Hash")
    generated_asset_pack_slices: Optional[List[GeneratedAssetPackSlice]] = Field(default=None, description="List of asset pack slices which will be served for this app bundle, signed with a key corresponding to certificate_sha256_hash.", alias="generatedAssetPackSlices")
    generated_recovery_modules: Optional[List[GeneratedRecoveryApk]] = Field(default=None, description="Generated recovery apks for recovery actions signed with a key corresponding to certificate_sha256_hash. This includes all generated recovery APKs, also those in draft or cancelled state. This field is not set if no recovery actions were created for this signing key.", alias="generatedRecoveryModules")
    generated_split_apks: Optional[List[GeneratedSplitApk]] = Field(default=None, description="List of generated split APKs, signed with a key corresponding to certificate_sha256_hash.", alias="generatedSplitApks")
    generated_standalone_apks: Optional[List[GeneratedStandaloneApk]] = Field(default=None, description="List of generated standalone APKs, signed with a key corresponding to certificate_sha256_hash.", alias="generatedStandaloneApks")
    generated_universal_apk: Optional[GeneratedUniversalApk] = Field(default=None, alias="generatedUniversalApk")
    targeting_info: Optional[TargetingInfo] = Field(default=None, alias="targetingInfo")
    __properties: ClassVar[List[str]] = ["certificateSha256Hash", "generatedAssetPackSlices", "generatedRecoveryModules", "generatedSplitApks", "generatedStandaloneApks", "generatedUniversalApk", "targetingInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GeneratedApksPerSigningKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in generated_asset_pack_slices (list)
        _items = []
        if self.generated_asset_pack_slices:
            for _item_generated_asset_pack_slices in self.generated_asset_pack_slices:
                if _item_generated_asset_pack_slices:
                    _items.append(_item_generated_asset_pack_slices.to_dict())
            _dict['generatedAssetPackSlices'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in generated_recovery_modules (list)
        _items = []
        if self.generated_recovery_modules:
            for _item_generated_recovery_modules in self.generated_recovery_modules:
                if _item_generated_recovery_modules:
                    _items.append(_item_generated_recovery_modules.to_dict())
            _dict['generatedRecoveryModules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in generated_split_apks (list)
        _items = []
        if self.generated_split_apks:
            for _item_generated_split_apks in self.generated_split_apks:
                if _item_generated_split_apks:
                    _items.append(_item_generated_split_apks.to_dict())
            _dict['generatedSplitApks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in generated_standalone_apks (list)
        _items = []
        if self.generated_standalone_apks:
            for _item_generated_standalone_apks in self.generated_standalone_apks:
                if _item_generated_standalone_apks:
                    _items.append(_item_generated_standalone_apks.to_dict())
            _dict['generatedStandaloneApks'] = _items
        # override the default output from pydantic by calling `to_dict()` of generated_universal_apk
        if self.generated_universal_apk:
            _dict['generatedUniversalApk'] = self.generated_universal_apk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of targeting_info
        if self.targeting_info:
            _dict['targetingInfo'] = self.targeting_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GeneratedApksPerSigningKey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certificateSha256Hash": obj.get("certificateSha256Hash"),
            "generatedAssetPackSlices": [GeneratedAssetPackSlice.from_dict(_item) for _item in obj["generatedAssetPackSlices"]] if obj.get("generatedAssetPackSlices") is not None else None,
            "generatedRecoveryModules": [GeneratedRecoveryApk.from_dict(_item) for _item in obj["generatedRecoveryModules"]] if obj.get("generatedRecoveryModules") is not None else None,
            "generatedSplitApks": [GeneratedSplitApk.from_dict(_item) for _item in obj["generatedSplitApks"]] if obj.get("generatedSplitApks") is not None else None,
            "generatedStandaloneApks": [GeneratedStandaloneApk.from_dict(_item) for _item in obj["generatedStandaloneApks"]] if obj.get("generatedStandaloneApks") is not None else None,
            "generatedUniversalApk": GeneratedUniversalApk.from_dict(obj["generatedUniversalApk"]) if obj.get("generatedUniversalApk") is not None else None,
            "targetingInfo": TargetingInfo.from_dict(obj["targetingInfo"]) if obj.get("targetingInfo") is not None else None
        })
        return _obj



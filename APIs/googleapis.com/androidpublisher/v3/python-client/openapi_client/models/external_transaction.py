# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.external_transaction_address import ExternalTransactionAddress
from openapi_client.models.one_time_external_transaction import OneTimeExternalTransaction
from openapi_client.models.price import Price
from openapi_client.models.recurring_external_transaction import RecurringExternalTransaction
from typing import Optional, Set
from typing_extensions import Self

class ExternalTransaction(BaseModel):
    """
    The details of an external transaction.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when this transaction was created. This is the time when Google was notified of the transaction.", alias="createTime")
    current_pre_tax_amount: Optional[Price] = Field(default=None, alias="currentPreTaxAmount")
    current_tax_amount: Optional[Price] = Field(default=None, alias="currentTaxAmount")
    external_transaction_id: Optional[StrictStr] = Field(default=None, description="Output only. The id of this transaction. All transaction ids under the same package name must be unique. Set when creating the external transaction.", alias="externalTransactionId")
    one_time_transaction: Optional[OneTimeExternalTransaction] = Field(default=None, alias="oneTimeTransaction")
    original_pre_tax_amount: Optional[Price] = Field(default=None, alias="originalPreTaxAmount")
    original_tax_amount: Optional[Price] = Field(default=None, alias="originalTaxAmount")
    package_name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the external transaction. The package name of the application the inapp products were sold (for example, 'com.some.app').", alias="packageName")
    recurring_transaction: Optional[RecurringExternalTransaction] = Field(default=None, alias="recurringTransaction")
    test_purchase: Optional[Dict[str, Any]] = Field(default=None, description="Represents a transaction performed using a test account. These transactions will not be charged by Google.", alias="testPurchase")
    transaction_state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of the transaction.", alias="transactionState")
    transaction_time: Optional[StrictStr] = Field(default=None, description="Required. The time when the transaction was completed.", alias="transactionTime")
    user_tax_address: Optional[ExternalTransactionAddress] = Field(default=None, alias="userTaxAddress")
    __properties: ClassVar[List[str]] = ["createTime", "currentPreTaxAmount", "currentTaxAmount", "externalTransactionId", "oneTimeTransaction", "originalPreTaxAmount", "originalTaxAmount", "packageName", "recurringTransaction", "testPurchase", "transactionState", "transactionTime", "userTaxAddress"]

    @field_validator('transaction_state')
    def transaction_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRANSACTION_STATE_UNSPECIFIED', 'TRANSACTION_REPORTED', 'TRANSACTION_CANCELED']):
            raise ValueError("must be one of enum values ('TRANSACTION_STATE_UNSPECIFIED', 'TRANSACTION_REPORTED', 'TRANSACTION_CANCELED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExternalTransaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "external_transaction_id",
            "package_name",
            "transaction_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_pre_tax_amount
        if self.current_pre_tax_amount:
            _dict['currentPreTaxAmount'] = self.current_pre_tax_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of current_tax_amount
        if self.current_tax_amount:
            _dict['currentTaxAmount'] = self.current_tax_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of one_time_transaction
        if self.one_time_transaction:
            _dict['oneTimeTransaction'] = self.one_time_transaction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of original_pre_tax_amount
        if self.original_pre_tax_amount:
            _dict['originalPreTaxAmount'] = self.original_pre_tax_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of original_tax_amount
        if self.original_tax_amount:
            _dict['originalTaxAmount'] = self.original_tax_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recurring_transaction
        if self.recurring_transaction:
            _dict['recurringTransaction'] = self.recurring_transaction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_tax_address
        if self.user_tax_address:
            _dict['userTaxAddress'] = self.user_tax_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExternalTransaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "currentPreTaxAmount": Price.from_dict(obj["currentPreTaxAmount"]) if obj.get("currentPreTaxAmount") is not None else None,
            "currentTaxAmount": Price.from_dict(obj["currentTaxAmount"]) if obj.get("currentTaxAmount") is not None else None,
            "externalTransactionId": obj.get("externalTransactionId"),
            "oneTimeTransaction": OneTimeExternalTransaction.from_dict(obj["oneTimeTransaction"]) if obj.get("oneTimeTransaction") is not None else None,
            "originalPreTaxAmount": Price.from_dict(obj["originalPreTaxAmount"]) if obj.get("originalPreTaxAmount") is not None else None,
            "originalTaxAmount": Price.from_dict(obj["originalTaxAmount"]) if obj.get("originalTaxAmount") is not None else None,
            "packageName": obj.get("packageName"),
            "recurringTransaction": RecurringExternalTransaction.from_dict(obj["recurringTransaction"]) if obj.get("recurringTransaction") is not None else None,
            "testPurchase": obj.get("testPurchase"),
            "transactionState": obj.get("transactionState"),
            "transactionTime": obj.get("transactionTime"),
            "userTaxAddress": ExternalTransactionAddress.from_dict(obj["userTaxAddress"]) if obj.get("userTaxAddress") is not None else None
        })
        return _obj



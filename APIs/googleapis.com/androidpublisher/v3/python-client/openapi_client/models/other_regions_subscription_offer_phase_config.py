# coding: utf-8

"""
    Google Play Android Developer API

    Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.other_regions_subscription_offer_phase_prices import OtherRegionsSubscriptionOfferPhasePrices
from typing import Optional, Set
from typing_extensions import Self

class OtherRegionsSubscriptionOfferPhaseConfig(BaseModel):
    """
    Configuration for any new locations Play may launch in for a single offer phase.
    """ # noqa: E501
    absolute_discounts: Optional[OtherRegionsSubscriptionOfferPhasePrices] = Field(default=None, alias="absoluteDiscounts")
    other_regions_prices: Optional[OtherRegionsSubscriptionOfferPhasePrices] = Field(default=None, alias="otherRegionsPrices")
    relative_discount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The fraction of the base plan price prorated over the phase duration that the user pays for this offer phase. For example, if the base plan price for this region is $12 for a period of 1 year, then a 50% discount for a phase of a duration of 3 months would correspond to a price of $1.50. The discount must be specified as a fraction strictly larger than 0 and strictly smaller than 1. The resulting price will be rounded to the nearest billable unit (e.g. cents for USD). The relative discount is considered invalid if the discounted price ends up being smaller than the minimum price allowed in any new locations Play may launch in.", alias="relativeDiscount")
    __properties: ClassVar[List[str]] = ["absoluteDiscounts", "otherRegionsPrices", "relativeDiscount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OtherRegionsSubscriptionOfferPhaseConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of absolute_discounts
        if self.absolute_discounts:
            _dict['absoluteDiscounts'] = self.absolute_discounts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of other_regions_prices
        if self.other_regions_prices:
            _dict['otherRegionsPrices'] = self.other_regions_prices.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OtherRegionsSubscriptionOfferPhaseConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "absoluteDiscounts": OtherRegionsSubscriptionOfferPhasePrices.from_dict(obj["absoluteDiscounts"]) if obj.get("absoluteDiscounts") is not None else None,
            "otherRegionsPrices": OtherRegionsSubscriptionOfferPhasePrices.from_dict(obj["otherRegionsPrices"]) if obj.get("otherRegionsPrices") is not None else None,
            "relativeDiscount": obj.get("relativeDiscount")
        })
        return _obj



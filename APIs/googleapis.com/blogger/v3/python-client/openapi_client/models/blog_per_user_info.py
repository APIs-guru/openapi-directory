# coding: utf-8

"""
    Blogger API

    The Blogger API provides access to posts, comments and pages of a Blogger blog.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BlogPerUserInfo(BaseModel):
    """
    BlogPerUserInfo
    """ # noqa: E501
    blog_id: Optional[StrictStr] = Field(default=None, description="ID of the Blog resource.", alias="blogId")
    has_admin_access: Optional[StrictBool] = Field(default=None, description="True if the user has Admin level access to the blog.", alias="hasAdminAccess")
    kind: Optional[StrictStr] = Field(default=None, description="The kind of this entity. Always blogger#blogPerUserInfo.")
    photos_album_key: Optional[StrictStr] = Field(default=None, description="The Photo Album Key for the user when adding photos to the blog.", alias="photosAlbumKey")
    role: Optional[StrictStr] = Field(default=None, description="Access permissions that the user has for the blog (ADMIN, AUTHOR, or READER).")
    user_id: Optional[StrictStr] = Field(default=None, description="ID of the User.", alias="userId")
    __properties: ClassVar[List[str]] = ["blogId", "hasAdminAccess", "kind", "photosAlbumKey", "role", "userId"]

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VIEW_TYPE_UNSPECIFIED', 'READER', 'AUTHOR', 'ADMIN']):
            raise ValueError("must be one of enum values ('VIEW_TYPE_UNSPECIFIED', 'READER', 'AUTHOR', 'ADMIN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BlogPerUserInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BlogPerUserInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blogId": obj.get("blogId"),
            "hasAdminAccess": obj.get("hasAdminAccess"),
            "kind": obj.get("kind"),
            "photosAlbumKey": obj.get("photosAlbumKey"),
            "role": obj.get("role"),
            "userId": obj.get("userId")
        })
        return _obj



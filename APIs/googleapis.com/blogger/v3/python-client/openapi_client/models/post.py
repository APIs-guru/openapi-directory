# coding: utf-8

"""
    Blogger API

    The Blogger API provides access to posts, comments and pages of a Blogger blog.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.post_author import PostAuthor
from openapi_client.models.post_blog import PostBlog
from openapi_client.models.post_images_inner import PostImagesInner
from openapi_client.models.post_location import PostLocation
from openapi_client.models.post_replies import PostReplies
from typing import Optional, Set
from typing_extensions import Self

class Post(BaseModel):
    """
    Post
    """ # noqa: E501
    author: Optional[PostAuthor] = None
    blog: Optional[PostBlog] = None
    content: Optional[StrictStr] = Field(default=None, description="The content of the Post. May contain HTML markup.")
    custom_meta_data: Optional[StrictStr] = Field(default=None, description="The JSON meta-data for the Post.", alias="customMetaData")
    etag: Optional[StrictStr] = Field(default=None, description="Etag of the resource.")
    id: Optional[StrictStr] = Field(default=None, description="The identifier of this Post.")
    images: Optional[List[PostImagesInner]] = Field(default=None, description="Display image for the Post.")
    kind: Optional[StrictStr] = Field(default=None, description="The kind of this entity. Always blogger#post.")
    labels: Optional[List[StrictStr]] = Field(default=None, description="The list of labels this Post was tagged with.")
    location: Optional[PostLocation] = None
    published: Optional[StrictStr] = Field(default=None, description="RFC 3339 date-time when this Post was published.")
    reader_comments: Optional[StrictStr] = Field(default=None, description="Comment control and display setting for readers of this post.", alias="readerComments")
    replies: Optional[PostReplies] = None
    self_link: Optional[StrictStr] = Field(default=None, description="The API REST URL to fetch this resource from.", alias="selfLink")
    status: Optional[StrictStr] = Field(default=None, description="Status of the post. Only set for admin-level requests.")
    title: Optional[StrictStr] = Field(default=None, description="The title of the Post.")
    title_link: Optional[StrictStr] = Field(default=None, description="The title link URL, similar to atom's related link.", alias="titleLink")
    trashed: Optional[StrictStr] = Field(default=None, description="RFC 3339 date-time when this Post was last trashed.")
    updated: Optional[StrictStr] = Field(default=None, description="RFC 3339 date-time when this Post was last updated.")
    url: Optional[StrictStr] = Field(default=None, description="The URL where this Post is displayed.")
    __properties: ClassVar[List[str]] = ["author", "blog", "content", "customMetaData", "etag", "id", "images", "kind", "labels", "location", "published", "readerComments", "replies", "selfLink", "status", "title", "titleLink", "trashed", "updated", "url"]

    @field_validator('reader_comments')
    def reader_comments_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALLOW', 'DONT_ALLOW_SHOW_EXISTING', 'DONT_ALLOW_HIDE_EXISTING']):
            raise ValueError("must be one of enum values ('ALLOW', 'DONT_ALLOW_SHOW_EXISTING', 'DONT_ALLOW_HIDE_EXISTING')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LIVE', 'DRAFT', 'SCHEDULED', 'SOFT_TRASHED']):
            raise ValueError("must be one of enum values ('LIVE', 'DRAFT', 'SCHEDULED', 'SOFT_TRASHED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Post from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of blog
        if self.blog:
            _dict['blog'] = self.blog.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item_images in self.images:
                if _item_images:
                    _items.append(_item_images.to_dict())
            _dict['images'] = _items
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of replies
        if self.replies:
            _dict['replies'] = self.replies.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Post from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "author": PostAuthor.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "blog": PostBlog.from_dict(obj["blog"]) if obj.get("blog") is not None else None,
            "content": obj.get("content"),
            "customMetaData": obj.get("customMetaData"),
            "etag": obj.get("etag"),
            "id": obj.get("id"),
            "images": [PostImagesInner.from_dict(_item) for _item in obj["images"]] if obj.get("images") is not None else None,
            "kind": obj.get("kind"),
            "labels": obj.get("labels"),
            "location": PostLocation.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "published": obj.get("published"),
            "readerComments": obj.get("readerComments"),
            "replies": PostReplies.from_dict(obj["replies"]) if obj.get("replies") is not None else None,
            "selfLink": obj.get("selfLink"),
            "status": obj.get("status"),
            "title": obj.get("title"),
            "titleLink": obj.get("titleLink"),
            "trashed": obj.get("trashed"),
            "updated": obj.get("updated"),
            "url": obj.get("url")
        })
        return _obj



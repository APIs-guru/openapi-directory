# coding: utf-8

"""
    Blogger API

    The Blogger API provides access to posts, comments and pages of a Blogger blog.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.post_user_info import PostUserInfo

class TestPostUserInfo(unittest.TestCase):
    """PostUserInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PostUserInfo:
        """Test PostUserInfo
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PostUserInfo`
        """
        model = PostUserInfo()
        if include_optional:
            return PostUserInfo(
                kind = '',
                post = openapi_client.models.post.Post(
                    author = openapi_client.models.post_author.Post_author(
                        display_name = '', 
                        id = '', 
                        image = openapi_client.models.comment_author_image.Comment_author_image(
                            url = '', ), 
                        url = '', ), 
                    blog = openapi_client.models.post_blog.Post_blog(
                        id = '', ), 
                    content = '', 
                    custom_meta_data = '', 
                    etag = '', 
                    id = '', 
                    images = [
                        openapi_client.models.post_images_inner.Post_images_inner(
                            url = '', )
                        ], 
                    kind = '', 
                    labels = [
                        ''
                        ], 
                    location = openapi_client.models.post_location.Post_location(
                        lat = 1.337, 
                        lng = 1.337, 
                        name = '', 
                        span = '', ), 
                    published = '', 
                    reader_comments = 'ALLOW', 
                    replies = openapi_client.models.post_replies.Post_replies(
                        items = [
                            openapi_client.models.comment.Comment(
                                content = '', 
                                id = '', 
                                in_reply_to = openapi_client.models.comment_in_reply_to.Comment_inReplyTo(
                                    id = '', ), 
                                kind = '', 
                                post = openapi_client.models.comment_post.Comment_post(
                                    id = '', ), 
                                published = '', 
                                self_link = '', 
                                status = 'LIVE', 
                                updated = '', )
                            ], 
                        self_link = '', 
                        total_items = '', ), 
                    self_link = '', 
                    status = 'LIVE', 
                    title = '', 
                    title_link = '', 
                    trashed = '', 
                    updated = '', 
                    url = '', ),
                post_user_info = openapi_client.models.post_per_user_info.PostPerUserInfo(
                    blog_id = '', 
                    has_edit_access = True, 
                    kind = '', 
                    post_id = '', 
                    user_id = '', )
            )
        else:
            return PostUserInfo(
        )
        """

    def testPostUserInfo(self):
        """Test PostUserInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

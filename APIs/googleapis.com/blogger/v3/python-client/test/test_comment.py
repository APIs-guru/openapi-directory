# coding: utf-8

"""
    Blogger API

    The Blogger API provides access to posts, comments and pages of a Blogger blog.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.comment import Comment

class TestComment(unittest.TestCase):
    """Comment unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Comment:
        """Test Comment
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Comment`
        """
        model = Comment()
        if include_optional:
            return Comment(
                author = openapi_client.models.comment_author.Comment_author(
                    display_name = '', 
                    id = '', 
                    image = openapi_client.models.comment_author_image.Comment_author_image(
                        url = '', ), 
                    url = '', ),
                blog = openapi_client.models.comment_blog.Comment_blog(
                    id = '', ),
                content = '',
                id = '',
                in_reply_to = openapi_client.models.comment_in_reply_to.Comment_inReplyTo(
                    id = '', ),
                kind = '',
                post = openapi_client.models.comment_post.Comment_post(
                    id = '', ),
                published = '',
                self_link = '',
                status = 'LIVE',
                updated = ''
            )
        else:
            return Comment(
        )
        """

    def testComment(self):
        """Test Comment"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

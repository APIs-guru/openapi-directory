# coding: utf-8

"""
    Blogger API

    The Blogger API provides access to posts, comments and pages of a Blogger blog.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.blog_user_info import BlogUserInfo

class TestBlogUserInfo(unittest.TestCase):
    """BlogUserInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BlogUserInfo:
        """Test BlogUserInfo
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BlogUserInfo`
        """
        model = BlogUserInfo()
        if include_optional:
            return BlogUserInfo(
                blog = openapi_client.models.blog.Blog(
                    custom_meta_data = '', 
                    description = '', 
                    id = '', 
                    kind = '', 
                    locale = openapi_client.models.blog_locale.Blog_locale(
                        country = '', 
                        language = '', 
                        variant = '', ), 
                    name = '', 
                    pages = openapi_client.models.blog_pages.Blog_pages(
                        self_link = '', 
                        total_items = 56, ), 
                    posts = openapi_client.models.blog_posts.Blog_posts(
                        items = [
                            openapi_client.models.post.Post(
                                author = openapi_client.models.post_author.Post_author(
                                    display_name = '', 
                                    id = '', 
                                    image = openapi_client.models.comment_author_image.Comment_author_image(
                                        url = '', ), 
                                    url = '', ), 
                                content = '', 
                                custom_meta_data = '', 
                                etag = '', 
                                id = '', 
                                images = [
                                    openapi_client.models.post_images_inner.Post_images_inner(
                                        url = '', )
                                    ], 
                                kind = '', 
                                labels = [
                                    ''
                                    ], 
                                location = openapi_client.models.post_location.Post_location(
                                    lat = 1.337, 
                                    lng = 1.337, 
                                    name = '', 
                                    span = '', ), 
                                published = '', 
                                reader_comments = 'ALLOW', 
                                replies = openapi_client.models.post_replies.Post_replies(
                                    self_link = '', 
                                    total_items = '', ), 
                                self_link = '', 
                                status = 'LIVE', 
                                title = '', 
                                title_link = '', 
                                trashed = '', 
                                updated = '', 
                                url = '', )
                            ], 
                        self_link = '', 
                        total_items = 56, ), 
                    published = '', 
                    self_link = '', 
                    status = 'LIVE', 
                    updated = '', 
                    url = '', ),
                blog_user_info = openapi_client.models.blog_per_user_info.BlogPerUserInfo(
                    blog_id = '', 
                    has_admin_access = True, 
                    kind = '', 
                    photos_album_key = '', 
                    role = 'VIEW_TYPE_UNSPECIFIED', 
                    user_id = '', ),
                kind = ''
            )
        else:
            return BlogUserInfo(
        )
        """

    def testBlogUserInfo(self):
        """Test BlogUserInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

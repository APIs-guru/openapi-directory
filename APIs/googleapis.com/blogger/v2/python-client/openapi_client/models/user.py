# coding: utf-8

"""
    Blogger API

    The Blogger API provides access to posts, comments and pages of a Blogger blog.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user_blogs import UserBlogs
from openapi_client.models.user_locale import UserLocale
from typing import Optional, Set
from typing_extensions import Self

class User(BaseModel):
    """
    User
    """ # noqa: E501
    about: Optional[StrictStr] = Field(default=None, description="Profile summary information.")
    blogs: Optional[UserBlogs] = None
    created: Optional[StrictStr] = Field(default=None, description="The timestamp of when this profile was created, in seconds since epoch.")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name.", alias="displayName")
    id: Optional[StrictStr] = Field(default=None, description="The identifier for this User.")
    kind: Optional[StrictStr] = Field(default=None, description="The kind of this entity. Always blogger#user.")
    locale: Optional[UserLocale] = None
    self_link: Optional[StrictStr] = Field(default=None, description="The API REST URL to fetch this resource from.", alias="selfLink")
    url: Optional[StrictStr] = Field(default=None, description="The user's profile page.")
    __properties: ClassVar[List[str]] = ["about", "blogs", "created", "displayName", "id", "kind", "locale", "selfLink", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of blogs
        if self.blogs:
            _dict['blogs'] = self.blogs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of locale
        if self.locale:
            _dict['locale'] = self.locale.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "about": obj.get("about"),
            "blogs": UserBlogs.from_dict(obj["blogs"]) if obj.get("blogs") is not None else None,
            "created": obj.get("created"),
            "displayName": obj.get("displayName"),
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "locale": UserLocale.from_dict(obj["locale"]) if obj.get("locale") is not None else None,
            "selfLink": obj.get("selfLink"),
            "url": obj.get("url")
        })
        return _obj



# coding: utf-8

"""
    Blogger API

    The Blogger API provides access to posts, comments and pages of a Blogger blog.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.page_author import PageAuthor
from openapi_client.models.page_blog import PageBlog
from typing import Optional, Set
from typing_extensions import Self

class Page(BaseModel):
    """
    Page
    """ # noqa: E501
    author: Optional[PageAuthor] = None
    blog: Optional[PageBlog] = None
    content: Optional[StrictStr] = Field(default=None, description="The body content of this Page, in HTML.")
    etag: Optional[StrictStr] = Field(default=None, description="Etag of the resource.")
    id: Optional[StrictStr] = Field(default=None, description="The identifier for this resource.")
    kind: Optional[StrictStr] = Field(default=None, description="The kind of this entity. Always blogger#page.")
    published: Optional[StrictStr] = Field(default=None, description="RFC 3339 date-time when this Page was published.")
    self_link: Optional[StrictStr] = Field(default=None, description="The API REST URL to fetch this resource from.", alias="selfLink")
    status: Optional[StrictStr] = Field(default=None, description="The status of the page for admin resources (either LIVE or DRAFT).")
    title: Optional[StrictStr] = Field(default=None, description="The title of this entity. This is the name displayed in the Admin user interface.")
    trashed: Optional[StrictStr] = Field(default=None, description="RFC 3339 date-time when this Page was trashed.")
    updated: Optional[StrictStr] = Field(default=None, description="RFC 3339 date-time when this Page was last updated.")
    url: Optional[StrictStr] = Field(default=None, description="The URL that this Page is displayed at.")
    __properties: ClassVar[List[str]] = ["author", "blog", "content", "etag", "id", "kind", "published", "selfLink", "status", "title", "trashed", "updated", "url"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LIVE', 'DRAFT', 'SOFT_TRASHED']):
            raise ValueError("must be one of enum values ('LIVE', 'DRAFT', 'SOFT_TRASHED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Page from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of blog
        if self.blog:
            _dict['blog'] = self.blog.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Page from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "author": PageAuthor.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "blog": PageBlog.from_dict(obj["blog"]) if obj.get("blog") is not None else None,
            "content": obj.get("content"),
            "etag": obj.get("etag"),
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "published": obj.get("published"),
            "selfLink": obj.get("selfLink"),
            "status": obj.get("status"),
            "title": obj.get("title"),
            "trashed": obj.get("trashed"),
            "updated": obj.get("updated"),
            "url": obj.get("url")
        })
        return _obj



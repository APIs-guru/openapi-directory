# coding: utf-8

"""
    PageSpeed Insights

    Analyzes the performance of a web page and provides tailored suggestions to make that page faster.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.pagespeed_api_pagespeed_response_v4 import PagespeedApiPagespeedResponseV4

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class PagespeedapiApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def pagespeedonline_pagespeedapi_runpagespeed(
        self,
        url: Annotated[StrictStr, Field(description="The URL to fetch and analyze")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        filter_third_party_resources: Annotated[Optional[StrictBool], Field(description="Indicates if third party resources should be filtered out before PageSpeed analysis.")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="The locale used to localize formatted results")] = None,
        rule: Annotated[Optional[List[StrictStr]], Field(description="A PageSpeed rule to run; if none are given, all rules are run")] = None,
        screenshot: Annotated[Optional[StrictBool], Field(description="Indicates if binary data containing a screenshot should be included")] = None,
        snapshots: Annotated[Optional[StrictBool], Field(description="Indicates if binary data containing snapshot images should be included")] = None,
        strategy: Annotated[Optional[StrictStr], Field(description="The analysis strategy (desktop or mobile) to use, and desktop is the default")] = None,
        utm_campaign: Annotated[Optional[StrictStr], Field(description="Campaign name for analytics.")] = None,
        utm_source: Annotated[Optional[StrictStr], Field(description="Campaign source for analytics.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PagespeedApiPagespeedResponseV4:
        """pagespeedonline_pagespeedapi_runpagespeed

        Runs PageSpeed analysis on the page at the specified URL, and returns PageSpeed scores, a list of suggestions to make that page faster, and other information.

        :param url: The URL to fetch and analyze (required)
        :type url: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param filter_third_party_resources: Indicates if third party resources should be filtered out before PageSpeed analysis.
        :type filter_third_party_resources: bool
        :param locale: The locale used to localize formatted results
        :type locale: str
        :param rule: A PageSpeed rule to run; if none are given, all rules are run
        :type rule: List[str]
        :param screenshot: Indicates if binary data containing a screenshot should be included
        :type screenshot: bool
        :param snapshots: Indicates if binary data containing snapshot images should be included
        :type snapshots: bool
        :param strategy: The analysis strategy (desktop or mobile) to use, and desktop is the default
        :type strategy: str
        :param utm_campaign: Campaign name for analytics.
        :type utm_campaign: str
        :param utm_source: Campaign source for analytics.
        :type utm_source: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pagespeedonline_pagespeedapi_runpagespeed_serialize(
            url=url,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            user_ip=user_ip,
            filter_third_party_resources=filter_third_party_resources,
            locale=locale,
            rule=rule,
            screenshot=screenshot,
            snapshots=snapshots,
            strategy=strategy,
            utm_campaign=utm_campaign,
            utm_source=utm_source,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagespeedApiPagespeedResponseV4",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def pagespeedonline_pagespeedapi_runpagespeed_with_http_info(
        self,
        url: Annotated[StrictStr, Field(description="The URL to fetch and analyze")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        filter_third_party_resources: Annotated[Optional[StrictBool], Field(description="Indicates if third party resources should be filtered out before PageSpeed analysis.")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="The locale used to localize formatted results")] = None,
        rule: Annotated[Optional[List[StrictStr]], Field(description="A PageSpeed rule to run; if none are given, all rules are run")] = None,
        screenshot: Annotated[Optional[StrictBool], Field(description="Indicates if binary data containing a screenshot should be included")] = None,
        snapshots: Annotated[Optional[StrictBool], Field(description="Indicates if binary data containing snapshot images should be included")] = None,
        strategy: Annotated[Optional[StrictStr], Field(description="The analysis strategy (desktop or mobile) to use, and desktop is the default")] = None,
        utm_campaign: Annotated[Optional[StrictStr], Field(description="Campaign name for analytics.")] = None,
        utm_source: Annotated[Optional[StrictStr], Field(description="Campaign source for analytics.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PagespeedApiPagespeedResponseV4]:
        """pagespeedonline_pagespeedapi_runpagespeed

        Runs PageSpeed analysis on the page at the specified URL, and returns PageSpeed scores, a list of suggestions to make that page faster, and other information.

        :param url: The URL to fetch and analyze (required)
        :type url: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param filter_third_party_resources: Indicates if third party resources should be filtered out before PageSpeed analysis.
        :type filter_third_party_resources: bool
        :param locale: The locale used to localize formatted results
        :type locale: str
        :param rule: A PageSpeed rule to run; if none are given, all rules are run
        :type rule: List[str]
        :param screenshot: Indicates if binary data containing a screenshot should be included
        :type screenshot: bool
        :param snapshots: Indicates if binary data containing snapshot images should be included
        :type snapshots: bool
        :param strategy: The analysis strategy (desktop or mobile) to use, and desktop is the default
        :type strategy: str
        :param utm_campaign: Campaign name for analytics.
        :type utm_campaign: str
        :param utm_source: Campaign source for analytics.
        :type utm_source: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pagespeedonline_pagespeedapi_runpagespeed_serialize(
            url=url,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            user_ip=user_ip,
            filter_third_party_resources=filter_third_party_resources,
            locale=locale,
            rule=rule,
            screenshot=screenshot,
            snapshots=snapshots,
            strategy=strategy,
            utm_campaign=utm_campaign,
            utm_source=utm_source,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagespeedApiPagespeedResponseV4",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def pagespeedonline_pagespeedapi_runpagespeed_without_preload_content(
        self,
        url: Annotated[StrictStr, Field(description="The URL to fetch and analyze")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        filter_third_party_resources: Annotated[Optional[StrictBool], Field(description="Indicates if third party resources should be filtered out before PageSpeed analysis.")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="The locale used to localize formatted results")] = None,
        rule: Annotated[Optional[List[StrictStr]], Field(description="A PageSpeed rule to run; if none are given, all rules are run")] = None,
        screenshot: Annotated[Optional[StrictBool], Field(description="Indicates if binary data containing a screenshot should be included")] = None,
        snapshots: Annotated[Optional[StrictBool], Field(description="Indicates if binary data containing snapshot images should be included")] = None,
        strategy: Annotated[Optional[StrictStr], Field(description="The analysis strategy (desktop or mobile) to use, and desktop is the default")] = None,
        utm_campaign: Annotated[Optional[StrictStr], Field(description="Campaign name for analytics.")] = None,
        utm_source: Annotated[Optional[StrictStr], Field(description="Campaign source for analytics.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """pagespeedonline_pagespeedapi_runpagespeed

        Runs PageSpeed analysis on the page at the specified URL, and returns PageSpeed scores, a list of suggestions to make that page faster, and other information.

        :param url: The URL to fetch and analyze (required)
        :type url: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param filter_third_party_resources: Indicates if third party resources should be filtered out before PageSpeed analysis.
        :type filter_third_party_resources: bool
        :param locale: The locale used to localize formatted results
        :type locale: str
        :param rule: A PageSpeed rule to run; if none are given, all rules are run
        :type rule: List[str]
        :param screenshot: Indicates if binary data containing a screenshot should be included
        :type screenshot: bool
        :param snapshots: Indicates if binary data containing snapshot images should be included
        :type snapshots: bool
        :param strategy: The analysis strategy (desktop or mobile) to use, and desktop is the default
        :type strategy: str
        :param utm_campaign: Campaign name for analytics.
        :type utm_campaign: str
        :param utm_source: Campaign source for analytics.
        :type utm_source: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pagespeedonline_pagespeedapi_runpagespeed_serialize(
            url=url,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            user_ip=user_ip,
            filter_third_party_resources=filter_third_party_resources,
            locale=locale,
            rule=rule,
            screenshot=screenshot,
            snapshots=snapshots,
            strategy=strategy,
            utm_campaign=utm_campaign,
            utm_source=utm_source,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagespeedApiPagespeedResponseV4",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _pagespeedonline_pagespeedapi_runpagespeed_serialize(
        self,
        url,
        alt,
        fields,
        key,
        oauth_token,
        pretty_print,
        quota_user,
        user_ip,
        filter_third_party_resources,
        locale,
        rule,
        screenshot,
        snapshots,
        strategy,
        utm_campaign,
        utm_source,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'rule': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if user_ip is not None:
            
            _query_params.append(('userIp', user_ip))
            
        if url is not None:
            
            _query_params.append(('url', url))
            
        if filter_third_party_resources is not None:
            
            _query_params.append(('filter_third_party_resources', filter_third_party_resources))
            
        if locale is not None:
            
            _query_params.append(('locale', locale))
            
        if rule is not None:
            
            _query_params.append(('rule', rule))
            
        if screenshot is not None:
            
            _query_params.append(('screenshot', screenshot))
            
        if snapshots is not None:
            
            _query_params.append(('snapshots', snapshots))
            
        if strategy is not None:
            
            _query_params.append(('strategy', strategy))
            
        if utm_campaign is not None:
            
            _query_params.append(('utm_campaign', utm_campaign))
            
        if utm_source is not None:
            
            _query_params.append(('utm_source', utm_source))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/runPagespeed',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



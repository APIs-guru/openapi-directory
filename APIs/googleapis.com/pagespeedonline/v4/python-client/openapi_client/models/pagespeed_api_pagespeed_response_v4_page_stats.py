# coding: utf-8

"""
    PageSpeed Insights

    Analyzes the performance of a web page and provides tailored suggestions to make that page faster.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PagespeedApiPagespeedResponseV4PageStats(BaseModel):
    """
    Summary statistics for the page, such as number of JavaScript bytes, number of HTML bytes, etc.
    """ # noqa: E501
    cms: Optional[StrictStr] = Field(default=None, description="Content management system (CMS) used for the page.")
    css_response_bytes: Optional[StrictStr] = Field(default=None, description="Number of uncompressed response bytes for CSS resources on the page.", alias="cssResponseBytes")
    flash_response_bytes: Optional[StrictStr] = Field(default=None, description="Number of response bytes for flash resources on the page.", alias="flashResponseBytes")
    html_response_bytes: Optional[StrictStr] = Field(default=None, description="Number of uncompressed response bytes for the main HTML document and all iframes on the page.", alias="htmlResponseBytes")
    image_response_bytes: Optional[StrictStr] = Field(default=None, description="Number of response bytes for image resources on the page.", alias="imageResponseBytes")
    javascript_response_bytes: Optional[StrictStr] = Field(default=None, description="Number of uncompressed response bytes for JS resources on the page.", alias="javascriptResponseBytes")
    num_render_blocking_round_trips: Optional[StrictInt] = Field(default=None, description="The needed round trips to load render blocking resources", alias="numRenderBlockingRoundTrips")
    num_total_round_trips: Optional[StrictInt] = Field(default=None, description="The needed round trips to load the full page", alias="numTotalRoundTrips")
    number_css_resources: Optional[StrictInt] = Field(default=None, description="Number of CSS resources referenced by the page.", alias="numberCssResources")
    number_hosts: Optional[StrictInt] = Field(default=None, description="Number of unique hosts referenced by the page.", alias="numberHosts")
    number_js_resources: Optional[StrictInt] = Field(default=None, description="Number of JavaScript resources referenced by the page.", alias="numberJsResources")
    number_resources: Optional[StrictInt] = Field(default=None, description="Number of HTTP resources loaded by the page.", alias="numberResources")
    number_roboted_resources: Optional[StrictInt] = Field(default=None, description="Number of roboted resources.", alias="numberRobotedResources")
    number_static_resources: Optional[StrictInt] = Field(default=None, description="Number of static (i.e. cacheable) resources on the page.", alias="numberStaticResources")
    number_transient_fetch_failure_resources: Optional[StrictInt] = Field(default=None, description="Number of transient-failed resources.", alias="numberTransientFetchFailureResources")
    other_response_bytes: Optional[StrictStr] = Field(default=None, description="Number of response bytes for other resources on the page.", alias="otherResponseBytes")
    over_the_wire_response_bytes: Optional[StrictStr] = Field(default=None, description="Number of over-the-wire bytes, uses the default gzip compression strategy as an estimation.", alias="overTheWireResponseBytes")
    roboted_urls: Optional[List[StrictStr]] = Field(default=None, description="List of roboted urls.", alias="robotedUrls")
    text_response_bytes: Optional[StrictStr] = Field(default=None, description="Number of uncompressed response bytes for text resources not covered by other statistics (i.e non-HTML, non-script, non-CSS resources) on the page.", alias="textResponseBytes")
    total_request_bytes: Optional[StrictStr] = Field(default=None, description="Total size of all request bytes sent by the page.", alias="totalRequestBytes")
    transient_fetch_failure_urls: Optional[List[StrictStr]] = Field(default=None, description="List of transient fetch failure urls.", alias="transientFetchFailureUrls")
    __properties: ClassVar[List[str]] = ["cms", "cssResponseBytes", "flashResponseBytes", "htmlResponseBytes", "imageResponseBytes", "javascriptResponseBytes", "numRenderBlockingRoundTrips", "numTotalRoundTrips", "numberCssResources", "numberHosts", "numberJsResources", "numberResources", "numberRobotedResources", "numberStaticResources", "numberTransientFetchFailureResources", "otherResponseBytes", "overTheWireResponseBytes", "robotedUrls", "textResponseBytes", "totalRequestBytes", "transientFetchFailureUrls"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PagespeedApiPagespeedResponseV4PageStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PagespeedApiPagespeedResponseV4PageStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cms": obj.get("cms"),
            "cssResponseBytes": obj.get("cssResponseBytes"),
            "flashResponseBytes": obj.get("flashResponseBytes"),
            "htmlResponseBytes": obj.get("htmlResponseBytes"),
            "imageResponseBytes": obj.get("imageResponseBytes"),
            "javascriptResponseBytes": obj.get("javascriptResponseBytes"),
            "numRenderBlockingRoundTrips": obj.get("numRenderBlockingRoundTrips"),
            "numTotalRoundTrips": obj.get("numTotalRoundTrips"),
            "numberCssResources": obj.get("numberCssResources"),
            "numberHosts": obj.get("numberHosts"),
            "numberJsResources": obj.get("numberJsResources"),
            "numberResources": obj.get("numberResources"),
            "numberRobotedResources": obj.get("numberRobotedResources"),
            "numberStaticResources": obj.get("numberStaticResources"),
            "numberTransientFetchFailureResources": obj.get("numberTransientFetchFailureResources"),
            "otherResponseBytes": obj.get("otherResponseBytes"),
            "overTheWireResponseBytes": obj.get("overTheWireResponseBytes"),
            "robotedUrls": obj.get("robotedUrls"),
            "textResponseBytes": obj.get("textResponseBytes"),
            "totalRequestBytes": obj.get("totalRequestBytes"),
            "transientFetchFailureUrls": obj.get("transientFetchFailureUrls")
        })
        return _obj



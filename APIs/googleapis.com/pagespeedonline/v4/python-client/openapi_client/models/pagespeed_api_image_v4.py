# coding: utf-8

"""
    PageSpeed Insights

    Analyzes the performance of a web page and provides tailored suggestions to make that page faster.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.pagespeed_api_format_string_v4_args_inner_rects_inner import PagespeedApiFormatStringV4ArgsInnerRectsInner
from typing import Optional, Set
from typing_extensions import Self

class PagespeedApiImageV4(BaseModel):
    """
    PagespeedApiImageV4
    """ # noqa: E501
    data: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Image data base64 encoded.")
    height: Optional[StrictInt] = Field(default=None, description="Height of screenshot in pixels.")
    key: Optional[StrictStr] = Field(default=None, description="Unique string key, if any, identifying this image.")
    mime_type: Optional[StrictStr] = Field(default=None, description="Mime type of image data (e.g. \"image/jpeg\").")
    page_rect: Optional[PagespeedApiFormatStringV4ArgsInnerRectsInner] = None
    width: Optional[StrictInt] = Field(default=None, description="Width of screenshot in pixels.")
    __properties: ClassVar[List[str]] = ["data", "height", "key", "mime_type", "page_rect", "width"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PagespeedApiImageV4 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of page_rect
        if self.page_rect:
            _dict['page_rect'] = self.page_rect.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PagespeedApiImageV4 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "data": obj.get("data"),
            "height": obj.get("height"),
            "key": obj.get("key"),
            "mime_type": obj.get("mime_type"),
            "page_rect": PagespeedApiFormatStringV4ArgsInnerRectsInner.from_dict(obj["page_rect"]) if obj.get("page_rect") is not None else None,
            "width": obj.get("width")
        })
        return _obj



# coding: utf-8

"""
    PageSpeed Insights

    Analyzes the performance of a web page and provides tailored suggestions to make that page faster.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.pagespeed_api_format_string_v4 import PagespeedApiFormatStringV4
from openapi_client.models.pagespeed_api_pagespeed_response_v4_formatted_results_rule_results_value_url_blocks_inner import PagespeedApiPagespeedResponseV4FormattedResultsRuleResultsValueUrlBlocksInner
from typing import Optional, Set
from typing_extensions import Self

class PagespeedApiPagespeedResponseV4FormattedResultsRuleResultsValue(BaseModel):
    """
    The enum-like identifier for this rule. For instance \"EnableKeepAlive\" or \"AvoidCssImport\". Not localized.
    """ # noqa: E501
    beta: Optional[StrictBool] = Field(default=None, description="Whether this rule is in 'beta'. Rules in beta are new rules that are being tested, which do not impact the overall score.")
    groups: Optional[List[StrictStr]] = Field(default=None, description="List of rule groups that this rule belongs to. Each entry in the list is one of \"SPEED\", \"USABILITY\", or \"SECURITY\".")
    localized_rule_name: Optional[StrictStr] = Field(default=None, description="Localized name of the rule, intended for presentation to a user.", alias="localizedRuleName")
    rule_impact: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The impact (unbounded floating point value) that implementing the suggestions for this rule would have on making the page faster. Impact is comparable between rules to determine which rule's suggestions would have a higher or lower impact on making a page faster. For instance, if enabling compression would save 1MB, while optimizing images would save 500kB, the enable compression rule would have 2x the impact of the image optimization rule, all other things being equal.", alias="ruleImpact")
    summary: Optional[PagespeedApiFormatStringV4] = None
    url_blocks: Optional[List[PagespeedApiPagespeedResponseV4FormattedResultsRuleResultsValueUrlBlocksInner]] = Field(default=None, description="List of blocks of URLs. Each block may contain a heading and a list of URLs. Each URL may optionally include additional details.", alias="urlBlocks")
    __properties: ClassVar[List[str]] = ["beta", "groups", "localizedRuleName", "ruleImpact", "summary", "urlBlocks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PagespeedApiPagespeedResponseV4FormattedResultsRuleResultsValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict['summary'] = self.summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in url_blocks (list)
        _items = []
        if self.url_blocks:
            for _item_url_blocks in self.url_blocks:
                if _item_url_blocks:
                    _items.append(_item_url_blocks.to_dict())
            _dict['urlBlocks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PagespeedApiPagespeedResponseV4FormattedResultsRuleResultsValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "beta": obj.get("beta"),
            "groups": obj.get("groups"),
            "localizedRuleName": obj.get("localizedRuleName"),
            "ruleImpact": obj.get("ruleImpact"),
            "summary": PagespeedApiFormatStringV4.from_dict(obj["summary"]) if obj.get("summary") is not None else None,
            "urlBlocks": [PagespeedApiPagespeedResponseV4FormattedResultsRuleResultsValueUrlBlocksInner.from_dict(_item) for _item in obj["urlBlocks"]] if obj.get("urlBlocks") is not None else None
        })
        return _obj



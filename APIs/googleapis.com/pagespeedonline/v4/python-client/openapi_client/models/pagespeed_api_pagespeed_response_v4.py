# coding: utf-8

"""
    PageSpeed Insights

    Analyzes the performance of a web page and provides tailored suggestions to make that page faster.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.pagespeed_api_image_v4 import PagespeedApiImageV4
from openapi_client.models.pagespeed_api_pagespeed_response_v4_formatted_results import PagespeedApiPagespeedResponseV4FormattedResults
from openapi_client.models.pagespeed_api_pagespeed_response_v4_loading_experience import PagespeedApiPagespeedResponseV4LoadingExperience
from openapi_client.models.pagespeed_api_pagespeed_response_v4_page_stats import PagespeedApiPagespeedResponseV4PageStats
from openapi_client.models.pagespeed_api_pagespeed_response_v4_rule_groups_value import PagespeedApiPagespeedResponseV4RuleGroupsValue
from openapi_client.models.pagespeed_api_pagespeed_response_v4_version import PagespeedApiPagespeedResponseV4Version
from typing import Optional, Set
from typing_extensions import Self

class PagespeedApiPagespeedResponseV4(BaseModel):
    """
    PagespeedApiPagespeedResponseV4
    """ # noqa: E501
    captcha_result: Optional[StrictStr] = Field(default=None, description="The captcha verify result", alias="captchaResult")
    formatted_results: Optional[PagespeedApiPagespeedResponseV4FormattedResults] = Field(default=None, alias="formattedResults")
    id: Optional[StrictStr] = Field(default=None, description="Canonicalized and final URL for the document, after following page redirects (if any).")
    invalid_rules: Optional[List[StrictStr]] = Field(default=None, description="List of rules that were specified in the request, but which the server did not know how to instantiate.", alias="invalidRules")
    kind: Optional[StrictStr] = Field(default='pagespeedonline#result', description="Kind of result.")
    loading_experience: Optional[PagespeedApiPagespeedResponseV4LoadingExperience] = Field(default=None, alias="loadingExperience")
    page_stats: Optional[PagespeedApiPagespeedResponseV4PageStats] = Field(default=None, alias="pageStats")
    response_code: Optional[StrictInt] = Field(default=None, description="Response code for the document. 200 indicates a normal page load. 4xx/5xx indicates an error.", alias="responseCode")
    rule_groups: Optional[Dict[str, PagespeedApiPagespeedResponseV4RuleGroupsValue]] = Field(default=None, description="A map with one entry for each rule group in these results.", alias="ruleGroups")
    screenshot: Optional[PagespeedApiImageV4] = None
    snapshots: Optional[List[PagespeedApiImageV4]] = Field(default=None, description="Additional base64-encoded screenshots of the page, in various partial render states.")
    title: Optional[StrictStr] = Field(default=None, description="Title of the page, as displayed in the browser's title bar.")
    version: Optional[PagespeedApiPagespeedResponseV4Version] = None
    __properties: ClassVar[List[str]] = ["captchaResult", "formattedResults", "id", "invalidRules", "kind", "loadingExperience", "pageStats", "responseCode", "ruleGroups", "screenshot", "snapshots", "title", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PagespeedApiPagespeedResponseV4 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of formatted_results
        if self.formatted_results:
            _dict['formattedResults'] = self.formatted_results.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loading_experience
        if self.loading_experience:
            _dict['loadingExperience'] = self.loading_experience.to_dict()
        # override the default output from pydantic by calling `to_dict()` of page_stats
        if self.page_stats:
            _dict['pageStats'] = self.page_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in rule_groups (dict)
        _field_dict = {}
        if self.rule_groups:
            for _key_rule_groups in self.rule_groups:
                if self.rule_groups[_key_rule_groups]:
                    _field_dict[_key_rule_groups] = self.rule_groups[_key_rule_groups].to_dict()
            _dict['ruleGroups'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of screenshot
        if self.screenshot:
            _dict['screenshot'] = self.screenshot.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in snapshots (list)
        _items = []
        if self.snapshots:
            for _item_snapshots in self.snapshots:
                if _item_snapshots:
                    _items.append(_item_snapshots.to_dict())
            _dict['snapshots'] = _items
        # override the default output from pydantic by calling `to_dict()` of version
        if self.version:
            _dict['version'] = self.version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PagespeedApiPagespeedResponseV4 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "captchaResult": obj.get("captchaResult"),
            "formattedResults": PagespeedApiPagespeedResponseV4FormattedResults.from_dict(obj["formattedResults"]) if obj.get("formattedResults") is not None else None,
            "id": obj.get("id"),
            "invalidRules": obj.get("invalidRules"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'pagespeedonline#result',
            "loadingExperience": PagespeedApiPagespeedResponseV4LoadingExperience.from_dict(obj["loadingExperience"]) if obj.get("loadingExperience") is not None else None,
            "pageStats": PagespeedApiPagespeedResponseV4PageStats.from_dict(obj["pageStats"]) if obj.get("pageStats") is not None else None,
            "responseCode": obj.get("responseCode"),
            "ruleGroups": dict(
                (_k, PagespeedApiPagespeedResponseV4RuleGroupsValue.from_dict(_v))
                for _k, _v in obj["ruleGroups"].items()
            )
            if obj.get("ruleGroups") is not None
            else None,
            "screenshot": PagespeedApiImageV4.from_dict(obj["screenshot"]) if obj.get("screenshot") is not None else None,
            "snapshots": [PagespeedApiImageV4.from_dict(_item) for _item in obj["snapshots"]] if obj.get("snapshots") is not None else None,
            "title": obj.get("title"),
            "version": PagespeedApiPagespeedResponseV4Version.from_dict(obj["version"]) if obj.get("version") is not None else None
        })
        return _obj



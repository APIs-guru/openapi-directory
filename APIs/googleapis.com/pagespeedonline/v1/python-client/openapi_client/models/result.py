# coding: utf-8

"""
    PageSpeed Insights

    Analyzes the performance of a web page and provides tailored suggestions to make that page faster.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.result_formatted_results import ResultFormattedResults
from openapi_client.models.result_page_stats import ResultPageStats
from openapi_client.models.result_screenshot import ResultScreenshot
from openapi_client.models.result_version import ResultVersion
from typing import Optional, Set
from typing_extensions import Self

class Result(BaseModel):
    """
    Result
    """ # noqa: E501
    captcha_result: Optional[StrictStr] = Field(default=None, description="The captcha verify result", alias="captchaResult")
    formatted_results: Optional[ResultFormattedResults] = Field(default=None, alias="formattedResults")
    id: Optional[StrictStr] = Field(default=None, description="Canonicalized and final URL for the document, after following page redirects (if any).")
    invalid_rules: Optional[List[StrictStr]] = Field(default=None, description="List of rules that were specified in the request, but which the server did not know how to instantiate.", alias="invalidRules")
    kind: Optional[StrictStr] = Field(default='pagespeedonline#result', description="Kind of result.")
    page_stats: Optional[ResultPageStats] = Field(default=None, alias="pageStats")
    response_code: Optional[StrictInt] = Field(default=None, description="Response code for the document. 200 indicates a normal page load. 4xx/5xx indicates an error.", alias="responseCode")
    score: Optional[StrictInt] = Field(default=None, description="The PageSpeed Score (0-100), which indicates how much faster a page could be. A high score indicates little room for improvement, while a lower score indicates more room for improvement.")
    screenshot: Optional[ResultScreenshot] = None
    title: Optional[StrictStr] = Field(default=None, description="Title of the page, as displayed in the browser's title bar.")
    version: Optional[ResultVersion] = None
    __properties: ClassVar[List[str]] = ["captchaResult", "formattedResults", "id", "invalidRules", "kind", "pageStats", "responseCode", "score", "screenshot", "title", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Result from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of formatted_results
        if self.formatted_results:
            _dict['formattedResults'] = self.formatted_results.to_dict()
        # override the default output from pydantic by calling `to_dict()` of page_stats
        if self.page_stats:
            _dict['pageStats'] = self.page_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of screenshot
        if self.screenshot:
            _dict['screenshot'] = self.screenshot.to_dict()
        # override the default output from pydantic by calling `to_dict()` of version
        if self.version:
            _dict['version'] = self.version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Result from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "captchaResult": obj.get("captchaResult"),
            "formattedResults": ResultFormattedResults.from_dict(obj["formattedResults"]) if obj.get("formattedResults") is not None else None,
            "id": obj.get("id"),
            "invalidRules": obj.get("invalidRules"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'pagespeedonline#result',
            "pageStats": ResultPageStats.from_dict(obj["pageStats"]) if obj.get("pageStats") is not None else None,
            "responseCode": obj.get("responseCode"),
            "score": obj.get("score"),
            "screenshot": ResultScreenshot.from_dict(obj["screenshot"]) if obj.get("screenshot") is not None else None,
            "title": obj.get("title"),
            "version": ResultVersion.from_dict(obj["version"]) if obj.get("version") is not None else None
        })
        return _obj



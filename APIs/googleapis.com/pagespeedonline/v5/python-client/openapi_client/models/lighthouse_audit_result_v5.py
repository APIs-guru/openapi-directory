# coding: utf-8

"""
    PageSpeed Insights API

    The PageSpeed Insights API lets you analyze the performance of your website with a simple API. It offers tailored suggestions for how you can optimize your site, and lets you easily integrate PageSpeed Insights analysis into your development tools and workflow. 

    The version of the OpenAPI document: v5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class LighthouseAuditResultV5(BaseModel):
    """
    An audit's result object in a Lighthouse result.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The description of the audit.")
    details: Optional[Dict[str, Any]] = Field(default=None, description="Freeform details section of the audit.")
    display_value: Optional[StrictStr] = Field(default=None, description="The value that should be displayed on the UI for this audit.", alias="displayValue")
    error_message: Optional[StrictStr] = Field(default=None, description="An error message from a thrown error inside the audit.", alias="errorMessage")
    explanation: Optional[StrictStr] = Field(default=None, description="An explanation of the errors in the audit.")
    id: Optional[StrictStr] = Field(default=None, description="The audit's id.")
    numeric_unit: Optional[StrictStr] = Field(default=None, description="The unit of the numeric_value field. Used to format the numeric value for display.", alias="numericUnit")
    numeric_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A numeric value that has a meaning specific to the audit, e.g. the number of nodes in the DOM or the timestamp of a specific load event. More information can be found in the audit details, if present.", alias="numericValue")
    score: Optional[Any] = Field(default=None, description="The score of the audit, can be null.")
    score_display_mode: Optional[StrictStr] = Field(default=None, description="The enumerated score display mode.", alias="scoreDisplayMode")
    title: Optional[StrictStr] = Field(default=None, description="The human readable title.")
    warnings: Optional[Any] = Field(default=None, description="Possible warnings that occurred in the audit, can be null.")
    __properties: ClassVar[List[str]] = ["description", "details", "displayValue", "errorMessage", "explanation", "id", "numericUnit", "numericValue", "score", "scoreDisplayMode", "title", "warnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LighthouseAuditResultV5 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if score (nullable) is None
        # and model_fields_set contains the field
        if self.score is None and "score" in self.model_fields_set:
            _dict['score'] = None

        # set to None if warnings (nullable) is None
        # and model_fields_set contains the field
        if self.warnings is None and "warnings" in self.model_fields_set:
            _dict['warnings'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LighthouseAuditResultV5 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "details": obj.get("details"),
            "displayValue": obj.get("displayValue"),
            "errorMessage": obj.get("errorMessage"),
            "explanation": obj.get("explanation"),
            "id": obj.get("id"),
            "numericUnit": obj.get("numericUnit"),
            "numericValue": obj.get("numericValue"),
            "score": obj.get("score"),
            "scoreDisplayMode": obj.get("scoreDisplayMode"),
            "title": obj.get("title"),
            "warnings": obj.get("warnings")
        })
        return _obj



# coding: utf-8

"""
    PageSpeed Insights API

    The PageSpeed Insights API lets you analyze the performance of your website with a simple API. It offers tailored suggestions for how you can optimize your site, and lets you easily integrate PageSpeed Insights analysis into your development tools and workflow. 

    The version of the OpenAPI document: v5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.lighthouse_result_v5 import LighthouseResultV5
from openapi_client.models.pagespeed_api_loading_experience_v5 import PagespeedApiLoadingExperienceV5
from openapi_client.models.pagespeed_version import PagespeedVersion
from typing import Optional, Set
from typing_extensions import Self

class PagespeedApiPagespeedResponseV5(BaseModel):
    """
    The Pagespeed API response object.
    """ # noqa: E501
    analysis_utc_timestamp: Optional[StrictStr] = Field(default=None, description="The UTC timestamp of this analysis.", alias="analysisUTCTimestamp")
    captcha_result: Optional[StrictStr] = Field(default=None, description="The captcha verify result", alias="captchaResult")
    id: Optional[StrictStr] = Field(default=None, description="Canonicalized and final URL for the document, after following page redirects (if any).")
    kind: Optional[StrictStr] = Field(default=None, description="Kind of result.")
    lighthouse_result: Optional[LighthouseResultV5] = Field(default=None, alias="lighthouseResult")
    loading_experience: Optional[PagespeedApiLoadingExperienceV5] = Field(default=None, alias="loadingExperience")
    origin_loading_experience: Optional[PagespeedApiLoadingExperienceV5] = Field(default=None, alias="originLoadingExperience")
    version: Optional[PagespeedVersion] = None
    __properties: ClassVar[List[str]] = ["analysisUTCTimestamp", "captchaResult", "id", "kind", "lighthouseResult", "loadingExperience", "originLoadingExperience", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PagespeedApiPagespeedResponseV5 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of lighthouse_result
        if self.lighthouse_result:
            _dict['lighthouseResult'] = self.lighthouse_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loading_experience
        if self.loading_experience:
            _dict['loadingExperience'] = self.loading_experience.to_dict()
        # override the default output from pydantic by calling `to_dict()` of origin_loading_experience
        if self.origin_loading_experience:
            _dict['originLoadingExperience'] = self.origin_loading_experience.to_dict()
        # override the default output from pydantic by calling `to_dict()` of version
        if self.version:
            _dict['version'] = self.version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PagespeedApiPagespeedResponseV5 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "analysisUTCTimestamp": obj.get("analysisUTCTimestamp"),
            "captchaResult": obj.get("captchaResult"),
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "lighthouseResult": LighthouseResultV5.from_dict(obj["lighthouseResult"]) if obj.get("lighthouseResult") is not None else None,
            "loadingExperience": PagespeedApiLoadingExperienceV5.from_dict(obj["loadingExperience"]) if obj.get("loadingExperience") is not None else None,
            "originLoadingExperience": PagespeedApiLoadingExperienceV5.from_dict(obj["originLoadingExperience"]) if obj.get("originLoadingExperience") is not None else None,
            "version": PagespeedVersion.from_dict(obj["version"]) if obj.get("version") is not None else None
        })
        return _obj



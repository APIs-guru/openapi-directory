# coding: utf-8

"""
    PageSpeed Insights API

    The PageSpeed Insights API lets you analyze the performance of your website with a simple API. It offers tailored suggestions for how you can optimize your site, and lets you easily integrate PageSpeed Insights analysis into your development tools and workflow. 

    The version of the OpenAPI document: v5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user_page_load_metric_v5 import UserPageLoadMetricV5
from typing import Optional, Set
from typing_extensions import Self

class PagespeedApiLoadingExperienceV5(BaseModel):
    """
    The CrUX loading experience object that contains CrUX data breakdowns.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The url, pattern or origin which the metrics are on.")
    initial_url: Optional[StrictStr] = Field(default=None, description="The requested URL, which may differ from the resolved \"id\".")
    metrics: Optional[Dict[str, UserPageLoadMetricV5]] = Field(default=None, description="The map of .")
    origin_fallback: Optional[StrictBool] = Field(default=None, description="True if the result is an origin fallback from a page, false otherwise.")
    overall_category: Optional[StrictStr] = Field(default=None, description="The human readable speed \"category\" of the id.")
    __properties: ClassVar[List[str]] = ["id", "initial_url", "metrics", "origin_fallback", "overall_category"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PagespeedApiLoadingExperienceV5 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in metrics (dict)
        _field_dict = {}
        if self.metrics:
            for _key_metrics in self.metrics:
                if self.metrics[_key_metrics]:
                    _field_dict[_key_metrics] = self.metrics[_key_metrics].to_dict()
            _dict['metrics'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PagespeedApiLoadingExperienceV5 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "initial_url": obj.get("initial_url"),
            "metrics": dict(
                (_k, UserPageLoadMetricV5.from_dict(_v))
                for _k, _v in obj["metrics"].items()
            )
            if obj.get("metrics") is not None
            else None,
            "origin_fallback": obj.get("origin_fallback"),
            "overall_category": obj.get("overall_category")
        })
        return _obj



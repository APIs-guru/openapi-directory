# coding: utf-8

"""
    PageSpeed Insights API

    The PageSpeed Insights API lets you analyze the performance of your website with a simple API. It offers tailored suggestions for how you can optimize your site, and lets you easily integrate PageSpeed Insights analysis into your development tools and workflow. 

    The version of the OpenAPI document: v5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.bucket import Bucket
from typing import Optional, Set
from typing_extensions import Self

class UserPageLoadMetricV5(BaseModel):
    """
    A CrUX metric object for a single metric and form factor.
    """ # noqa: E501
    category: Optional[StrictStr] = Field(default=None, description="The category of the specific time metric.")
    distributions: Optional[List[Bucket]] = Field(default=None, description="Metric distributions. Proportions should sum up to 1.")
    form_factor: Optional[StrictStr] = Field(default=None, description="Identifies the form factor of the metric being collected.", alias="formFactor")
    median: Optional[StrictInt] = Field(default=None, description="The median number of the metric, in millisecond.")
    metric_id: Optional[StrictStr] = Field(default=None, description="Identifies the type of the metric.", alias="metricId")
    percentile: Optional[StrictInt] = Field(default=None, description="We use this field to store certain percentile value for this metric. For v4, this field contains pc50. For v5, this field contains pc90.")
    __properties: ClassVar[List[str]] = ["category", "distributions", "formFactor", "median", "metricId", "percentile"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserPageLoadMetricV5 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in distributions (list)
        _items = []
        if self.distributions:
            for _item_distributions in self.distributions:
                if _item_distributions:
                    _items.append(_item_distributions.to_dict())
            _dict['distributions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserPageLoadMetricV5 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": obj.get("category"),
            "distributions": [Bucket.from_dict(_item) for _item in obj["distributions"]] if obj.get("distributions") is not None else None,
            "formFactor": obj.get("formFactor"),
            "median": obj.get("median"),
            "metricId": obj.get("metricId"),
            "percentile": obj.get("percentile")
        })
        return _obj



# coding: utf-8

"""
    PageSpeed Insights API

    The PageSpeed Insights API lets you analyze the performance of your website with a simple API. It offers tailored suggestions for how you can optimize your site, and lets you easily integrate PageSpeed Insights analysis into your development tools and workflow. 

    The version of the OpenAPI document: v5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.categories import Categories
from openapi_client.models.category_group_v5 import CategoryGroupV5
from openapi_client.models.config_settings import ConfigSettings
from openapi_client.models.environment import Environment
from openapi_client.models.i18n import I18n
from openapi_client.models.lhr_entity import LhrEntity
from openapi_client.models.lighthouse_audit_result_v5 import LighthouseAuditResultV5
from openapi_client.models.runtime_error import RuntimeError
from openapi_client.models.stack_pack import StackPack
from openapi_client.models.timing import Timing
from typing import Optional, Set
from typing_extensions import Self

class LighthouseResultV5(BaseModel):
    """
    The Lighthouse result object.
    """ # noqa: E501
    audits: Optional[Dict[str, LighthouseAuditResultV5]] = Field(default=None, description="Map of audits in the LHR.")
    categories: Optional[Categories] = None
    category_groups: Optional[Dict[str, CategoryGroupV5]] = Field(default=None, description="Map of category groups in the LHR.", alias="categoryGroups")
    config_settings: Optional[ConfigSettings] = Field(default=None, alias="configSettings")
    entities: Optional[List[LhrEntity]] = Field(default=None, description="Entity classification data.")
    environment: Optional[Environment] = None
    fetch_time: Optional[StrictStr] = Field(default=None, description="The time that this run was fetched.", alias="fetchTime")
    final_displayed_url: Optional[StrictStr] = Field(default=None, description="URL displayed on the page after Lighthouse finishes.", alias="finalDisplayedUrl")
    final_url: Optional[StrictStr] = Field(default=None, description="The final resolved url that was audited.", alias="finalUrl")
    full_page_screenshot: Optional[Any] = Field(default=None, description="Screenshot data of the full page, along with node rects relevant to the audit results.", alias="fullPageScreenshot")
    i18n: Optional[I18n] = None
    lighthouse_version: Optional[StrictStr] = Field(default=None, description="The lighthouse version that was used to generate this LHR.", alias="lighthouseVersion")
    main_document_url: Optional[StrictStr] = Field(default=None, description="URL of the main document request of the final navigation.", alias="mainDocumentUrl")
    requested_url: Optional[StrictStr] = Field(default=None, description="The original requested url.", alias="requestedUrl")
    run_warnings: Optional[List[Any]] = Field(default=None, description="List of all run warnings in the LHR. Will always output to at least `[]`.", alias="runWarnings")
    runtime_error: Optional[RuntimeError] = Field(default=None, alias="runtimeError")
    stack_packs: Optional[List[StackPack]] = Field(default=None, description="The Stack Pack advice strings.", alias="stackPacks")
    timing: Optional[Timing] = None
    user_agent: Optional[StrictStr] = Field(default=None, description="The user agent that was used to run this LHR.", alias="userAgent")
    __properties: ClassVar[List[str]] = ["audits", "categories", "categoryGroups", "configSettings", "entities", "environment", "fetchTime", "finalDisplayedUrl", "finalUrl", "fullPageScreenshot", "i18n", "lighthouseVersion", "mainDocumentUrl", "requestedUrl", "runWarnings", "runtimeError", "stackPacks", "timing", "userAgent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LighthouseResultV5 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in audits (dict)
        _field_dict = {}
        if self.audits:
            for _key_audits in self.audits:
                if self.audits[_key_audits]:
                    _field_dict[_key_audits] = self.audits[_key_audits].to_dict()
            _dict['audits'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of categories
        if self.categories:
            _dict['categories'] = self.categories.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in category_groups (dict)
        _field_dict = {}
        if self.category_groups:
            for _key_category_groups in self.category_groups:
                if self.category_groups[_key_category_groups]:
                    _field_dict[_key_category_groups] = self.category_groups[_key_category_groups].to_dict()
            _dict['categoryGroups'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of config_settings
        if self.config_settings:
            _dict['configSettings'] = self.config_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in entities (list)
        _items = []
        if self.entities:
            for _item_entities in self.entities:
                if _item_entities:
                    _items.append(_item_entities.to_dict())
            _dict['entities'] = _items
        # override the default output from pydantic by calling `to_dict()` of environment
        if self.environment:
            _dict['environment'] = self.environment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of i18n
        if self.i18n:
            _dict['i18n'] = self.i18n.to_dict()
        # override the default output from pydantic by calling `to_dict()` of runtime_error
        if self.runtime_error:
            _dict['runtimeError'] = self.runtime_error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in stack_packs (list)
        _items = []
        if self.stack_packs:
            for _item_stack_packs in self.stack_packs:
                if _item_stack_packs:
                    _items.append(_item_stack_packs.to_dict())
            _dict['stackPacks'] = _items
        # override the default output from pydantic by calling `to_dict()` of timing
        if self.timing:
            _dict['timing'] = self.timing.to_dict()
        # set to None if full_page_screenshot (nullable) is None
        # and model_fields_set contains the field
        if self.full_page_screenshot is None and "full_page_screenshot" in self.model_fields_set:
            _dict['fullPageScreenshot'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LighthouseResultV5 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audits": dict(
                (_k, LighthouseAuditResultV5.from_dict(_v))
                for _k, _v in obj["audits"].items()
            )
            if obj.get("audits") is not None
            else None,
            "categories": Categories.from_dict(obj["categories"]) if obj.get("categories") is not None else None,
            "categoryGroups": dict(
                (_k, CategoryGroupV5.from_dict(_v))
                for _k, _v in obj["categoryGroups"].items()
            )
            if obj.get("categoryGroups") is not None
            else None,
            "configSettings": ConfigSettings.from_dict(obj["configSettings"]) if obj.get("configSettings") is not None else None,
            "entities": [LhrEntity.from_dict(_item) for _item in obj["entities"]] if obj.get("entities") is not None else None,
            "environment": Environment.from_dict(obj["environment"]) if obj.get("environment") is not None else None,
            "fetchTime": obj.get("fetchTime"),
            "finalDisplayedUrl": obj.get("finalDisplayedUrl"),
            "finalUrl": obj.get("finalUrl"),
            "fullPageScreenshot": obj.get("fullPageScreenshot"),
            "i18n": I18n.from_dict(obj["i18n"]) if obj.get("i18n") is not None else None,
            "lighthouseVersion": obj.get("lighthouseVersion"),
            "mainDocumentUrl": obj.get("mainDocumentUrl"),
            "requestedUrl": obj.get("requestedUrl"),
            "runWarnings": obj.get("runWarnings"),
            "runtimeError": RuntimeError.from_dict(obj["runtimeError"]) if obj.get("runtimeError") is not None else None,
            "stackPacks": [StackPack.from_dict(_item) for _item in obj["stackPacks"]] if obj.get("stackPacks") is not None else None,
            "timing": Timing.from_dict(obj["timing"]) if obj.get("timing") is not None else None,
            "userAgent": obj.get("userAgent")
        })
        return _obj



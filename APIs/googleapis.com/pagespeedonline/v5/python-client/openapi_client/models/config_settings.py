# coding: utf-8

"""
    PageSpeed Insights API

    The PageSpeed Insights API lets you analyze the performance of your website with a simple API. It offers tailored suggestions for how you can optimize your site, and lets you easily integrate PageSpeed Insights analysis into your development tools and workflow. 

    The version of the OpenAPI document: v5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ConfigSettings(BaseModel):
    """
    Message containing the configuration settings for the Lighthouse run.
    """ # noqa: E501
    channel: Optional[StrictStr] = Field(default=None, description="How Lighthouse was run, e.g. from the Chrome extension or from the npm module.")
    emulated_form_factor: Optional[StrictStr] = Field(default=None, description="The form factor the emulation should use. This field is deprecated, form_factor should be used instead.", alias="emulatedFormFactor")
    form_factor: Optional[StrictStr] = Field(default=None, description="How Lighthouse should interpret this run in regards to scoring performance metrics and skipping mobile-only tests in desktop.", alias="formFactor")
    locale: Optional[StrictStr] = Field(default=None, description="The locale setting.")
    only_categories: Optional[Any] = Field(default=None, description="List of categories of audits the run should conduct.", alias="onlyCategories")
    __properties: ClassVar[List[str]] = ["channel", "emulatedFormFactor", "formFactor", "locale", "onlyCategories"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if only_categories (nullable) is None
        # and model_fields_set contains the field
        if self.only_categories is None and "only_categories" in self.model_fields_set:
            _dict['onlyCategories'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channel": obj.get("channel"),
            "emulatedFormFactor": obj.get("emulatedFormFactor"),
            "formFactor": obj.get("formFactor"),
            "locale": obj.get("locale"),
            "onlyCategories": obj.get("onlyCategories")
        })
        return _obj



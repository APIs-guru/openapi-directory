# coding: utf-8

"""
    PageSpeed Insights

    Analyzes the performance of a web page and provides tailored suggestions to make that page faster.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.result_formatted_results import ResultFormattedResults

class TestResultFormattedResults(unittest.TestCase):
    """ResultFormattedResults unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ResultFormattedResults:
        """Test ResultFormattedResults
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ResultFormattedResults`
        """
        model = ResultFormattedResults()
        if include_optional:
            return ResultFormattedResults(
                locale = '',
                rule_results = {
                    'key' : openapi_client.models.result_formatted_results_rule_results_value.Result_formattedResults_ruleResults_value(
                        groups = [
                            ''
                            ], 
                        localized_rule_name = '', 
                        rule_impact = 1.337, 
                        summary = openapi_client.models.pagespeed_api_format_string_v2.PagespeedApiFormatStringV2(
                            args = [
                                openapi_client.models.pagespeed_api_format_string_v2_args_inner.PagespeedApiFormatStringV2_args_inner(
                                    key = '', 
                                    rects = [
                                        openapi_client.models.pagespeed_api_format_string_v2_args_inner_rects_inner.PagespeedApiFormatStringV2_args_inner_rects_inner(
                                            height = 56, 
                                            left = 56, 
                                            top = 56, 
                                            width = 56, )
                                        ], 
                                    secondary_rects = [
                                        openapi_client.models.pagespeed_api_format_string_v2_args_inner_rects_inner.PagespeedApiFormatStringV2_args_inner_rects_inner(
                                            height = 56, 
                                            left = 56, 
                                            top = 56, 
                                            width = 56, )
                                        ], 
                                    type = '', 
                                    value = '', )
                                ], 
                            format = '', ), 
                        url_blocks = [
                            openapi_client.models.result_formatted_results_rule_results_value_url_blocks_inner.Result_formattedResults_ruleResults_value_urlBlocks_inner(
                                header = openapi_client.models.pagespeed_api_format_string_v2.PagespeedApiFormatStringV2(
                                    format = '', ), 
                                urls = [
                                    openapi_client.models.result_formatted_results_rule_results_value_url_blocks_inner_urls_inner.Result_formattedResults_ruleResults_value_urlBlocks_inner_urls_inner(
                                        details = [
                                            
                                            ], 
                                        result = , )
                                    ], )
                            ], )
                    }
            )
        else:
            return ResultFormattedResults(
        )
        """

    def testResultFormattedResults(self):
        """Test ResultFormattedResults"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

openapi: 3.0.0
servers:
  - url: https://containeranalysis.googleapis.com/
x-hasEquivalentPaths: true
info:
  contact:
    name: Google
    url: https://google.com
    x-twitter: youtube
  description: This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
  license:
    name: Creative Commons Attribution 3.0
    url: http://creativecommons.org/licenses/by/3.0/
  termsOfService: https://developers.google.com/terms/
  title: Container Analysis API
  version: v1alpha1
  x-apiClientRegistration:
    url: https://console.developers.google.com
  x-apisguru-categories:
    - analytics
    - media
  x-logo:
    url: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png
  x-origin:
    - format: openapi
      url: https://containeranalysis.googleapis.com/$discovery/rest?version=v1alpha1
      version: "3.0"
  x-preferred: false
  x-providerName: googleapis.com
  x-serviceName: containeranalysis
externalDocs:
  url: https://cloud.google.com/container-analysis/api/reference/rest/
tags:
  - name: projects
  - name: providers
paths:
  /v1alpha1/{name}:
    delete:
      description: Deletes the given `Note` from the system.
      operationId: containeranalysis.providers.notes.delete
      parameters:
        - description: The name of the note in the form of "providers/{provider_id}/notes/{NOTE_ID}"
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - providers
    get:
      description: Returns the requested `Note`.
      operationId: containeranalysis.providers.notes.get
      parameters:
        - description: The name of the note in the form of "providers/{provider_id}/notes/{NOTE_ID}"
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - providers
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    patch:
      description: Updates an existing `Note`.
      operationId: containeranalysis.providers.notes.patch
      parameters:
        - description: The name of the note. Should be of the form "projects/{provider_id}/notes/{note_id}".
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: The fields to update.
          in: query
          name: updateMask
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Note"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - providers
  /v1alpha1/{name}/notes:
    get:
      description: Lists all `Notes` for a given project.
      operationId: containeranalysis.providers.notes.list
      parameters:
        - description: 'The name field will contain the project Id for example: "providers/{provider_id} @Deprecated'
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: The filter expression.
          in: query
          name: filter
          schema:
            type: string
        - description: Number of notes to return in the list.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: Token to provide to skip to a particular spot in the list.
          in: query
          name: pageToken
          schema:
            type: string
        - description: 'This field contains the project Id for example: "projects/{PROJECT_ID}".'
          in: query
          name: parent
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListNotesResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - providers
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Creates a new `Note`.
      operationId: containeranalysis.providers.notes.create
      parameters:
        - description: The name of the project. Should be of the form "providers/{provider_id}". @Deprecated
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: The ID to use for this note.
          in: query
          name: noteId
          schema:
            type: string
        - description: 'This field contains the project Id for example: "projects/{project_id}'
          in: query
          name: parent
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Note"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - providers
  /v1alpha1/{name}/occurrences:
    get:
      description: Lists `Occurrences` referencing the specified `Note`. Use this method to get all occurrences referencing your `Note` across all your customer projects.
      operationId: containeranalysis.providers.notes.occurrences.list
      parameters:
        - description: 'The name field will contain the note name for example: "provider/{provider_id}/notes/{note_id}"'
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: The filter expression.
          in: query
          name: filter
          schema:
            type: string
        - description: Number of notes to return in the list.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: Token to provide to skip to a particular spot in the list.
          in: query
          name: pageToken
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListNoteOccurrencesResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - providers
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
  /v1alpha1/{parent}/notes:
    get:
      description: Lists all `Notes` for a given project.
      operationId: containeranalysis.projects.notes.list
      parameters:
        - description: 'This field contains the project Id for example: "projects/{PROJECT_ID}".'
          in: path
          name: parent
          required: true
          schema:
            type: string
        - description: The filter expression.
          in: query
          name: filter
          schema:
            type: string
        - description: 'The name field will contain the project Id for example: "providers/{provider_id} @Deprecated'
          in: query
          name: name
          schema:
            type: string
        - description: Number of notes to return in the list.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: Token to provide to skip to a particular spot in the list.
          in: query
          name: pageToken
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListNotesResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Creates a new `Note`.
      operationId: containeranalysis.projects.notes.create
      parameters:
        - description: 'This field contains the project Id for example: "projects/{project_id}'
          in: path
          name: parent
          required: true
          schema:
            type: string
        - description: The name of the project. Should be of the form "providers/{provider_id}". @Deprecated
          in: query
          name: name
          schema:
            type: string
        - description: The ID to use for this note.
          in: query
          name: noteId
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Note"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  /v1alpha1/{parent}/occurrences:
    get:
      description: Lists active `Occurrences` for a given project matching the filters.
      operationId: containeranalysis.projects.occurrences.list
      parameters:
        - description: "This contains the project Id for example: projects/{project_id}."
          in: path
          name: parent
          required: true
          schema:
            type: string
        - description: The filter expression.
          in: query
          name: filter
          schema:
            type: string
        - description: The kind of occurrences to filter on.
          in: query
          name: kind
          schema:
            enum:
              - KIND_UNSPECIFIED
              - PACKAGE_VULNERABILITY
              - BUILD_DETAILS
              - IMAGE_BASIS
              - PACKAGE_MANAGER
              - DEPLOYABLE
              - DISCOVERY
              - ATTESTATION_AUTHORITY
              - UPGRADE
              - COMPLIANCE
              - SBOM
              - SPDX_PACKAGE
              - SPDX_FILE
              - SPDX_RELATIONSHIP
              - DSSE_ATTESTATION
              - VULNERABILITY_ASSESSMENT
              - SBOM_REFERENCE
            type: string
        - description: 'The name field contains the project Id. For example: "projects/{project_id} @Deprecated'
          in: query
          name: name
          schema:
            type: string
        - description: Number of occurrences to return in the list.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: Token to provide to skip to a particular spot in the list.
          in: query
          name: pageToken
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOccurrencesResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Creates a new `Occurrence`. Use this method to create `Occurrences` for a resource.
      operationId: containeranalysis.projects.occurrences.create
      parameters:
        - description: 'This field contains the project Id for example: "projects/{project_id}"'
          in: path
          name: parent
          required: true
          schema:
            type: string
        - description: The name of the project. Should be of the form "projects/{project_id}". @Deprecated
          in: query
          name: name
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Occurrence"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Occurrence"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  /v1alpha1/{parent}/occurrences:vulnerabilitySummary:
    get:
      description: Gets a summary of the number and severity of occurrences.
      operationId: containeranalysis.projects.occurrences.getVulnerabilitySummary
      parameters:
        - description: "This contains the project Id for example: projects/{project_id}"
          in: path
          name: parent
          required: true
          schema:
            type: string
        - description: The filter expression.
          in: query
          name: filter
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetVulnzOccurrencesSummaryResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
  /v1alpha1/{parent}/operations:
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Creates a new `Operation`.
      operationId: containeranalysis.projects.operations.create
      parameters:
        - description: The project Id that this operation should be created under.
          in: path
          name: parent
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOperationRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  /v1alpha1/{parent}/scanConfigs:
    get:
      description: Lists scan configurations for a project.
      operationId: containeranalysis.projects.scanConfigs.list
      parameters:
        - description: "This containers the project Id i.e.: projects/{project_id}"
          in: path
          name: parent
          required: true
          schema:
            type: string
        - description: The filter expression.
          in: query
          name: filter
          schema:
            type: string
        - description: The number of items to return.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: The page token to use for the next request.
          in: query
          name: pageToken
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListScanConfigsResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
  /v1alpha1/{resource}:getIamPolicy:
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: "Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes"
      operationId: containeranalysis.providers.notes.getIamPolicy
      parameters:
        - description: "REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field."
          in: path
          name: resource
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetIamPolicyRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - providers
  /v1alpha1/{resource}:setIamPolicy:
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: "Sets the access control policy on the specified `Note` or `Occurrence`. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and projects/{projectid}/notes/{noteid} for notes"
      operationId: containeranalysis.providers.notes.setIamPolicy
      parameters:
        - description: "REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field."
          in: path
          name: resource
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetIamPolicyRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - providers
  /v1alpha1/{resource}:testIamPermissions:
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: 'Returns the permissions that a caller has on the specified note or occurrence resource. Requires list permission on the project (for example, "storage.objects.list" on the containing bucket for testing permission of an object). Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`'
      operationId: containeranalysis.providers.notes.testIamPermissions
      parameters:
        - description: "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field."
          in: path
          name: resource
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestIamPermissionsRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestIamPermissionsResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - providers
components:
  parameters:
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        enum:
          - "1"
          - "2"
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        enum:
          - json
          - media
          - proto
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
  schemas:
    AnalysisCompleted:
      description: Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
      properties:
        analysisType:
          description: type of analysis that were completed on a resource.
          items:
            type: string
          type: array
      type: object
    Artifact:
      description: Artifact describes a build product.
      properties:
        checksum:
          description: Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
          type: string
        id:
          description: Artifact ID, if any; for container images, this will be a URL by digest like gcr.io/projectID/imagename@sha256:123456
          type: string
        name:
          deprecated: true
          description: Name of the artifact. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. This field is deprecated in favor of the plural `names` field; it continues to exist here to allow existing BuildProvenance serialized to json in google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to deserialize back into proto.
          type: string
        names:
          description: Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
          items:
            type: string
          type: array
      type: object
    Assessment:
      description: Assessment provides all information that is related to a single vulnerability for this product.
      properties:
        cve:
          description: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability.
          type: string
        impacts:
          description: Contains information about the impact of this vulnerability, this will change with time.
          items:
            type: string
          type: array
        justification:
          $ref: "#/components/schemas/Justification"
          description: Justification provides the justification when the state of the assessment if NOT_AFFECTED.
        longDescription:
          description: A detailed description of this Vex.
          type: string
        relatedUris:
          description: Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
          items:
            $ref: "#/components/schemas/URI"
          type: array
        remediations:
          description: Specifies details on how to handle (and presumably, fix) a vulnerability.
          items:
            $ref: "#/components/schemas/Remediation"
          type: array
        shortDescription:
          description: A one sentence description of this Vex.
          type: string
        state:
          description: Provides the state of this Vulnerability assessment.
          enum:
            - STATE_UNSPECIFIED
            - AFFECTED
            - NOT_AFFECTED
            - FIXED
            - UNDER_INVESTIGATION
          type: string
        vulnerabilityId:
          description: The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
          type: string
      type: object
    Attestation:
      description: Occurrence that represents a single "attestation". The authenticity of an Attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the AttestationAuthority to which this Attestation is attached is primarily useful for look-up (how to find this Attestation if you already know the Authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).
      properties:
        pgpSignedAttestation:
          $ref: "#/components/schemas/PgpSignedAttestation"
      type: object
    AttestationAuthority:
      description: Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `AttestationAuthority` for "QA" and one for "build". This Note is intended to act strictly as a grouping mechanism for the attached Occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an Occurrence to a given Note. It also provides a single point of lookup to find all attached Attestation Occurrences, even if they don't all live in the same project.
      properties:
        hint:
          $ref: "#/components/schemas/AttestationAuthorityHint"
      type: object
    AttestationAuthorityHint:
      description: This submessage provides human-readable hints about the purpose of the AttestationAuthority. Because the name of a Note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should NOT be used to look up AttestationAuthorities in security sensitive contexts, such as when looking up Attestations to verify.
      properties:
        humanReadableName:
          description: The human readable name of this Attestation Authority, for example "qa".
          type: string
      type: object
    Basis:
      description: "Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url."
      properties:
        fingerprint:
          $ref: "#/components/schemas/Fingerprint"
          description: The fingerprint of the base image.
        resourceUrl:
          description: The resource_url for the resource representing the basis of associated occurrence images.
          type: string
      type: object
    Binding:
      description: Associates `members`, or principals, with a `role`.
      properties:
        condition:
          $ref: "#/components/schemas/Expr"
          description: The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        members:
          description: "Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`."
          items:
            type: string
          type: array
        role:
          description: Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles).
          type: string
      type: object
    BuildDefinition:
      properties:
        buildType:
          type: string
        externalParameters:
          additionalProperties:
            description: Properties of the object.
          type: object
        internalParameters:
          additionalProperties:
            description: Properties of the object.
          type: object
        resolvedDependencies:
          items:
            $ref: "#/components/schemas/ResourceDescriptor"
          type: array
      type: object
    BuildDetails:
      description: Message encapsulating build provenance details.
      properties:
        inTotoSlsaProvenanceV1:
          $ref: "#/components/schemas/InTotoSlsaProvenanceV1"
          description: In-Toto Slsa Provenance V1 represents a slsa provenance meeting the slsa spec, wrapped in an in-toto statement. This allows for direct jsonification of a to-spec in-toto slsa statement with a to-spec slsa provenance.
        intotoProvenance:
          $ref: "#/components/schemas/InTotoProvenance"
          description: Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
        intotoStatement:
          $ref: "#/components/schemas/InTotoStatement"
          description: In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope.
        provenance:
          $ref: "#/components/schemas/BuildProvenance"
          description: The actual provenance
        provenanceBytes:
          description: Serialized JSON representation of the provenance, used in generating the `BuildSignature` in the corresponding Result. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
          type: string
      type: object
    BuildMetadata:
      properties:
        finishedOn:
          format: google-datetime
          type: string
        invocationId:
          type: string
        startedOn:
          format: google-datetime
          type: string
      type: object
    BuildProvenance:
      description: Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
      properties:
        buildOptions:
          additionalProperties:
            type: string
          description: Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
          type: object
        builderVersion:
          description: Version string of the builder at the time this build was executed.
          type: string
        builtArtifacts:
          description: Output of the build.
          items:
            $ref: "#/components/schemas/Artifact"
          type: array
        commands:
          description: Commands requested by the build.
          items:
            $ref: "#/components/schemas/Command"
          type: array
        createTime:
          description: Time at which the build was created.
          format: google-datetime
          type: string
        creator:
          description: E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
          type: string
        finishTime:
          description: Time at which execution of the build was finished.
          format: google-datetime
          type: string
        id:
          description: Unique identifier of the build.
          type: string
        logsBucket:
          description: Google Cloud Storage bucket where logs were written.
          type: string
        projectId:
          description: ID of the project.
          type: string
        sourceProvenance:
          $ref: "#/components/schemas/Source"
          description: Details of the Source input to the build.
        startTime:
          description: Time at which execution of the build was started.
          format: google-datetime
          type: string
        triggerId:
          description: Trigger identifier if the build was triggered automatically; empty if not.
          type: string
      type: object
    BuildSignature:
      description: Message encapsulating the signature of the verified build.
      properties:
        keyId:
          description: An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
          type: string
        keyType:
          description: The type of the key, either stored in `public_key` or referenced in `key_id`
          enum:
            - KEY_TYPE_UNSPECIFIED
            - PGP_ASCII_ARMORED
            - PKIX_PEM
          type: string
        publicKey:
          description: "Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`"
          type: string
        signature:
          description: Signature of the related `BuildProvenance`, encoded in a base64 string.
          type: string
      type: object
    BuildStep:
      description: "A step in the build pipeline. Next ID: 21"
      properties:
        allowExitCodes:
          description: Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence.
          items:
            format: int32
            type: integer
          type: array
        allowFailure:
          description: Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field.
          type: boolean
        args:
          description: A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
          items:
            type: string
          type: array
        automapSubstitutions:
          description: Option to include built-in and custom substitutions as env variables for this build step. This option will override the global option in BuildOption.
          type: boolean
        dir:
          description: Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.
          type: string
        entrypoint:
          description: Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.
          type: string
        env:
          description: A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
          items:
            type: string
          type: array
        exitCode:
          description: Output only. Return code from running the step.
          format: int32
          type: integer
        id:
          description: Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.
          type: string
        name:
          description: Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.
          type: string
        pullTiming:
          $ref: "#/components/schemas/TimeSpan"
          description: Output only. Stores timing information for pulling this build step's builder image only.
        script:
          description: A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.
          type: string
        secretEnv:
          description: A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
          items:
            type: string
          type: array
        status:
          description: Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
          type: string
        timeout:
          description: Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.
          format: google-duration
          type: string
        timing:
          $ref: "#/components/schemas/TimeSpan"
          description: Output only. Stores timing information for executing this build step.
        volumes:
          description: List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
          items:
            $ref: "#/components/schemas/Volume"
          type: array
        waitFor:
          description: The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
          items:
            type: string
          type: array
      type: object
    BuildType:
      description: Note holding the version of the provider's builder and the signature of the provenance message in linked BuildDetails.
      properties:
        builderVersion:
          description: Version of the builder which produced this Note.
          type: string
        signature:
          $ref: "#/components/schemas/BuildSignature"
          description: Signature of the build in Occurrences pointing to the Note containing this `BuilderDetails`.
      type: object
    BuilderConfig:
      properties:
        id:
          type: string
      type: object
    CVSS:
      description: "Common Vulnerability Scoring System. This message is compatible with CVSS v2 and v3. For CVSS v2 details, see https://www.first.org/cvss/v2/guide CVSS v2 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator For CVSS v3 details, see https://www.first.org/cvss/specification-document CVSS v3 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator"
      properties:
        attackComplexity:
          description: Defined in CVSS v3, CVSS v2
          enum:
            - ATTACK_COMPLEXITY_UNSPECIFIED
            - ATTACK_COMPLEXITY_LOW
            - ATTACK_COMPLEXITY_HIGH
            - ATTACK_COMPLEXITY_MEDIUM
          type: string
        attackVector:
          description: Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2
          enum:
            - ATTACK_VECTOR_UNSPECIFIED
            - ATTACK_VECTOR_NETWORK
            - ATTACK_VECTOR_ADJACENT
            - ATTACK_VECTOR_LOCAL
            - ATTACK_VECTOR_PHYSICAL
          type: string
        authentication:
          description: Defined in CVSS v2
          enum:
            - AUTHENTICATION_UNSPECIFIED
            - AUTHENTICATION_MULTIPLE
            - AUTHENTICATION_SINGLE
            - AUTHENTICATION_NONE
          type: string
        availabilityImpact:
          description: Defined in CVSS v3, CVSS v2
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
            - IMPACT_PARTIAL
            - IMPACT_COMPLETE
          type: string
        baseScore:
          description: The base score is a function of the base metric scores.
          format: float
          type: number
        confidentialityImpact:
          description: Defined in CVSS v3, CVSS v2
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
            - IMPACT_PARTIAL
            - IMPACT_COMPLETE
          type: string
        exploitabilityScore:
          format: float
          type: number
        impactScore:
          format: float
          type: number
        integrityImpact:
          description: Defined in CVSS v3, CVSS v2
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
            - IMPACT_PARTIAL
            - IMPACT_COMPLETE
          type: string
        privilegesRequired:
          description: Defined in CVSS v3
          enum:
            - PRIVILEGES_REQUIRED_UNSPECIFIED
            - PRIVILEGES_REQUIRED_NONE
            - PRIVILEGES_REQUIRED_LOW
            - PRIVILEGES_REQUIRED_HIGH
          type: string
        scope:
          description: Defined in CVSS v3
          enum:
            - SCOPE_UNSPECIFIED
            - SCOPE_UNCHANGED
            - SCOPE_CHANGED
          type: string
        userInteraction:
          description: Defined in CVSS v3
          enum:
            - USER_INTERACTION_UNSPECIFIED
            - USER_INTERACTION_NONE
            - USER_INTERACTION_REQUIRED
          type: string
      type: object
    CisBenchmark:
      description: A compliance check that is a CIS benchmark.
      properties:
        profileLevel:
          description: The profile level of this CIS benchmark check.
          format: int32
          type: integer
        severity:
          description: The severity level of this CIS benchmark check.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          type: string
      type: object
    Command:
      description: Command describes a step performed as part of the build pipeline.
      properties:
        args:
          description: Command-line arguments used when executing this Command.
          items:
            type: string
          type: array
        dir:
          description: Working directory (relative to project source root) used when running this Command.
          type: string
        env:
          description: Environment variables set before running this Command.
          items:
            type: string
          type: array
        id:
          description: Optional unique identifier for this Command, used in wait_for to reference this Command as a dependency.
          type: string
        name:
          description: Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
          type: string
        waitFor:
          description: The ID(s) of the Command(s) that this Command depends on.
          items:
            type: string
          type: array
      type: object
    Completeness:
      description: Indicates that the builder claims certain fields in this message to be complete.
      properties:
        arguments:
          description: If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
          type: boolean
        environment:
          description: If true, the builder claims that recipe.environment is claimed to be complete.
          type: boolean
        materials:
          description: If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
          type: boolean
      type: object
    ComplianceNote:
      description: ComplianceNote encapsulates all information about a specific compliance check.
      properties:
        cisBenchmark:
          $ref: "#/components/schemas/CisBenchmark"
          description: Right now we only have one compliance type, but we may add additional types in the future.
        description:
          description: A description about this compliance check.
          type: string
        rationale:
          description: A rationale for the existence of this compliance check.
          type: string
        remediation:
          description: A description of remediation steps if the compliance check fails.
          type: string
        scanInstructions:
          description: Serialized scan instructions with a predefined format.
          format: byte
          type: string
        title:
          description: The title that identifies this compliance check.
          type: string
        version:
          description: The OS and config versions the benchmark applies to.
          items:
            $ref: "#/components/schemas/ComplianceVersion"
          type: array
      type: object
    ComplianceOccurrence:
      description: An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
      properties:
        nonComplianceReason:
          description: The reason for non compliance of these files.
          type: string
        nonCompliantFiles:
          description: A list of files which are violating compliance checks.
          items:
            $ref: "#/components/schemas/NonCompliantFile"
          type: array
      type: object
    ComplianceVersion:
      description: Describes the CIS benchmark version that is applicable to a given OS and os version.
      properties:
        benchmarkDocument:
          description: The name of the document that defines this benchmark, e.g. "CIS Container-Optimized OS".
          type: string
        cpeUri:
          description: The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to.
          type: string
        version:
          description: The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in.
          type: string
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig:
      description: ApprovalConfig describes configuration for manual approval of a build.
      properties:
        approvalRequired:
          description: Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.
          type: boolean
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult:
      description: ApprovalResult describes the decision and associated metadata of a manual approval of a build.
      properties:
        approvalTime:
          description: Output only. The time when the approval decision was made.
          format: google-datetime
          readOnly: true
          type: string
        approverAccount:
          description: Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called.
          readOnly: true
          type: string
        comment:
          description: Optional. An optional comment for this manual approval result.
          type: string
        decision:
          description: Required. The decision of this manual approval.
          enum:
            - DECISION_UNSPECIFIED
            - APPROVED
            - REJECTED
          type: string
        url:
          description: Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build.
          type: string
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts:
      description: Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
      properties:
        images:
          description: A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.
          items:
            type: string
          type: array
        mavenArtifacts:
          description: A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any artifacts fail to be pushed, the build is marked FAILURE.
          items:
            $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact"
          type: array
        npmPackages:
          description: A list of npm packages to be uploaded to Artifact Registry upon successful completion of all build steps. Npm packages in the specified paths will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any packages fail to be pushed, the build is marked FAILURE.
          items:
            $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage"
          type: array
        objects:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects"
          description: A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.
        pythonPackages:
          description: A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE.
          items:
            $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage"
          type: array
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects:
      description: Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.
      properties:
        location:
          description: Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.
          type: string
        paths:
          description: Path globs used to match files in the build's workspace.
          items:
            type: string
          type: array
        timing:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan"
          description: Output only. Stores timing information for pushing all artifact objects.
          readOnly: true
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact:
      description: A Maven artifact to upload to Artifact Registry upon successful completion of all build steps.
      properties:
        artifactId:
          description: Maven `artifactId` value used when uploading the artifact to Artifact Registry.
          type: string
        groupId:
          description: Maven `groupId` value used when uploading the artifact to Artifact Registry.
          type: string
        path:
          description: Path to an artifact in the build's workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.
          type: string
        repository:
          description: Artifact Registry repository, in the form "https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY" Artifact in the workspace specified by path will be uploaded to Artifact Registry with this location as a prefix.
          type: string
        version:
          description: Maven `version` value used when uploading the artifact to Artifact Registry.
          type: string
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage:
      description: Npm package to upload to Artifact Registry upon successful completion of all build steps.
      properties:
        packagePath:
          description: Path to the package.json. e.g. workspace/path/to/package
          type: string
        repository:
          description: Artifact Registry repository, in the form "https://$REGION-npm.pkg.dev/$PROJECT/$REPOSITORY" Npm package in the workspace specified by path will be zipped and uploaded to Artifact Registry with this location as a prefix.
          type: string
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage:
      description: Python package to upload to Artifact Registry upon successful completion of all build steps. A package can encapsulate multiple objects to be uploaded to a single repository.
      properties:
        paths:
          description: Path globs used to match files in the build's workspace. For Python/ Twine, this is usually `dist/*`, and sometimes additionally an `.asc` file.
          items:
            type: string
          type: array
        repository:
          description: Artifact Registry repository, in the form "https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY" Files in the workspace matching any path pattern will be uploaded to Artifact Registry with this location as a prefix.
          type: string
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1Build:
      description: "A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA."
      properties:
        approval:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval"
          description: Output only. Describes this build's approval configuration, status, and result.
          readOnly: true
        artifacts:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts"
          description: Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
        availableSecrets:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets"
          description: Secrets and secret environment variables.
        buildTriggerId:
          description: Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.
          readOnly: true
          type: string
        createTime:
          description: Output only. Time at which the request to create the build was received.
          format: google-datetime
          readOnly: true
          type: string
        failureInfo:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo"
          description: Output only. Contains information about the build when status=FAILURE.
          readOnly: true
        finishTime:
          description: Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.
          format: google-datetime
          readOnly: true
          type: string
        id:
          description: Output only. Unique identifier of the build.
          readOnly: true
          type: string
        images:
          description: A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
          items:
            type: string
          type: array
        logUrl:
          description: Output only. URL to logs for this build in Google Cloud Console.
          readOnly: true
          type: string
        logsBucket:
          description: Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
          type: string
        name:
          description: "Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service."
          readOnly: true
          type: string
        options:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions"
          description: Special options for this build.
        projectId:
          description: Output only. ID of the project.
          readOnly: true
          type: string
        queueTtl:
          description: TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
          format: google-duration
          type: string
        results:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Results"
          description: Output only. Results of the build.
          readOnly: true
        secrets:
          description: "Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets"
          items:
            $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Secret"
          type: array
        serviceAccount:
          description: "IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. "
          type: string
        source:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Source"
          description: The location of the source files to build.
        sourceProvenance:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance"
          description: Output only. A permanent fixed identifier for source.
          readOnly: true
        startTime:
          description: Output only. Time at which execution of the build was started.
          format: google-datetime
          readOnly: true
          type: string
        status:
          description: Output only. Status of the build.
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
          readOnly: true
          type: string
        statusDetail:
          description: Output only. Customer-readable message about the current status.
          readOnly: true
          type: string
        steps:
          description: Required. The operations to be performed on the workspace.
          items:
            $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep"
          type: array
        substitutions:
          additionalProperties:
            type: string
          description: Substitutions data for `Build` resource.
          type: object
        tags:
          description: Tags for annotation of a `Build`. These are not docker tags.
          items:
            type: string
          type: array
        timeout:
          description: Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.
          format: google-duration
          type: string
        timing:
          additionalProperties:
            $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan"
          description: "Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included."
          readOnly: true
          type: object
        warnings:
          description: Output only. Non-fatal problems encountered during the execution of the build.
          items:
            $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning"
          readOnly: true
          type: array
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval:
      description: BuildApproval describes a build's approval configuration, state, and result.
      properties:
        config:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig"
          description: Output only. Configuration for manual approval of this build.
          readOnly: true
        result:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult"
          description: Output only. Result of manual approval for this Build.
          readOnly: true
        state:
          description: Output only. The state of this build's approval.
          enum:
            - STATE_UNSPECIFIED
            - PENDING
            - APPROVED
            - REJECTED
            - CANCELLED
          readOnly: true
          type: string
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo:
      description: A fatal problem encountered during the execution of the build.
      properties:
        detail:
          description: Explains the failure issue in more detail using hard-coded text.
          type: string
        type:
          description: The name of the failure.
          enum:
            - FAILURE_TYPE_UNSPECIFIED
            - PUSH_FAILED
            - PUSH_IMAGE_NOT_FOUND
            - PUSH_NOT_AUTHORIZED
            - LOGGING_FAILURE
            - USER_BUILD_STEP
            - FETCH_SOURCE_FAILED
          type: string
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions:
      description: Optional arguments to enable specific features of builds.
      properties:
        automapSubstitutions:
          description: Option to include built-in and custom substitutions as env variables for all build steps.
          type: boolean
        defaultLogsBucketBehavior:
          description: Optional. Option to specify how default logs buckets are setup.
          enum:
            - DEFAULT_LOGS_BUCKET_BEHAVIOR_UNSPECIFIED
            - REGIONAL_USER_OWNED_BUCKET
          type: string
        diskSizeGb:
          description: Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error.
          format: int64
          type: string
        dynamicSubstitutions:
          description: "Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file."
          type: boolean
        env:
          description: A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
          items:
            type: string
          type: array
        logStreamingOption:
          description: Option to define build log streaming behavior to Cloud Storage.
          enum:
            - STREAM_DEFAULT
            - STREAM_ON
            - STREAM_OFF
          type: string
        logging:
          description: Option to specify the logging mode, which determines if and where build logs are stored.
          enum:
            - LOGGING_UNSPECIFIED
            - LEGACY
            - GCS_ONLY
            - STACKDRIVER_ONLY
            - CLOUD_LOGGING_ONLY
            - NONE
          type: string
          x-enumDeprecated:
            - false
            - false
            - false
            - true
            - false
            - false
        machineType:
          description: Compute Engine machine type on which to run the build.
          enum:
            - UNSPECIFIED
            - N1_HIGHCPU_8
            - N1_HIGHCPU_32
            - E2_HIGHCPU_8
            - E2_HIGHCPU_32
            - E2_MEDIUM
          type: string
        pool:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption"
          description: Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
        requestedVerifyOption:
          description: Requested verifiability options.
          enum:
            - NOT_VERIFIED
            - VERIFIED
          type: string
        secretEnv:
          description: A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.
          items:
            type: string
          type: array
        sourceProvenanceHash:
          description: Requested hash for SourceProvenance.
          items:
            enum:
              - NONE
              - SHA256
              - MD5
              - SHA512
            type: string
          type: array
        substitutionOption:
          description: "Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file."
          enum:
            - MUST_MATCH
            - ALLOW_LOOSE
          type: string
        volumes:
          description: Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.
          items:
            $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Volume"
          type: array
        workerPool:
          deprecated: true
          description: This field deprecated; please use `pool.name` instead.
          type: string
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption:
      description: Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
      properties:
        name:
          description: The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId}
          type: string
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep:
      description: A step in the build pipeline.
      properties:
        allowExitCodes:
          description: Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence.
          items:
            format: int32
            type: integer
          type: array
        allowFailure:
          description: Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field.
          type: boolean
        args:
          description: A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
          items:
            type: string
          type: array
        automapSubstitutions:
          description: Option to include built-in and custom substitutions as env variables for this build step. This option will override the global option in BuildOption.
          type: boolean
        dir:
          description: Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.
          type: string
        entrypoint:
          description: Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.
          type: string
        env:
          description: A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
          items:
            type: string
          type: array
        exitCode:
          description: Output only. Return code from running the step.
          format: int32
          readOnly: true
          type: integer
        id:
          description: Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.
          type: string
        name:
          description: Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.
          type: string
        pullTiming:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan"
          description: Output only. Stores timing information for pulling this build step's builder image only.
          readOnly: true
        script:
          description: A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.
          type: string
        secretEnv:
          description: A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
          items:
            type: string
          type: array
        status:
          description: Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
          readOnly: true
          type: string
        timeout:
          description: Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.
          format: google-duration
          type: string
        timing:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan"
          description: Output only. Stores timing information for executing this build step.
          readOnly: true
        volumes:
          description: List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
          items:
            $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Volume"
          type: array
        waitFor:
          description: The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
          items:
            type: string
          type: array
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning:
      description: A non-fatal problem encountered during the execution of the build.
      properties:
        priority:
          description: The priority for this warning.
          enum:
            - PRIORITY_UNSPECIFIED
            - INFO
            - WARNING
            - ALERT
          type: string
        text:
          description: Explanation of the warning generated.
          type: string
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage:
      description: An image built by the pipeline.
      properties:
        digest:
          description: Docker Registry 2.0 digest.
          type: string
        name:
          description: Name used to push the container image to Google Container Registry, as presented to `docker push`.
          type: string
        pushTiming:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan"
          description: Output only. Stores timing information for pushing the specified image.
          readOnly: true
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository:
      description: Location of the source in a 2nd-gen Google Cloud Build repository resource.
      properties:
        dir:
          description: Directory, relative to the source root, in which to run the build.
          type: string
        repository:
          description: Required. Name of the Google Cloud Build repository, formatted as `projects/*/locations/*/connections/*/repositories/*`.
          type: string
        revision:
          description: The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref.
          type: string
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes:
      description: Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.
      properties:
        fileHash:
          description: Collection of file hashes.
          items:
            $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Hash"
          type: array
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource:
      description: Location of the source in any accessible Git repository.
      properties:
        dir:
          description: Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
          type: string
        revision:
          description: The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses `git fetch` to fetch the revision from the Git repository; therefore make sure that the string you provide for `revision` is parsable by the command. For information on string values accepted by `git fetch`, see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on `git fetch`, see https://git-scm.com/docs/git-fetch.
          type: string
        url:
          description: Location of the Git repo to build. This will be used as a `git remote`, see https://git-scm.com/docs/git-remote.
          type: string
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1Hash:
      description: Container message for hash values.
      properties:
        type:
          description: The type of hash that was performed.
          enum:
            - NONE
            - SHA256
            - MD5
            - SHA512
          type: string
        value:
          description: The hash value.
          format: byte
          type: string
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret:
      description: Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.
      properties:
        envMap:
          additionalProperties:
            format: byte
            type: string
          description: Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
          type: object
        kmsKeyName:
          description: "Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*"
          type: string
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource:
      description: Location of the source in a Google Cloud Source Repository.
      properties:
        branchName:
          description: Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
          type: string
        commitSha:
          description: Explicit commit SHA to build.
          type: string
        dir:
          description: Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
          type: string
        invertRegex:
          description: Only trigger a build if the revision regex does NOT match the revision regex.
          type: boolean
        projectId:
          description: ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
          type: string
        repoName:
          description: Name of the Cloud Source Repository.
          type: string
        substitutions:
          additionalProperties:
            type: string
          description: Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
          type: object
        tagName:
          description: Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
          type: string
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1Results:
      description: Artifacts created by the build pipeline.
      properties:
        artifactManifest:
          description: Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.
          type: string
        artifactTiming:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan"
          description: Time to push all non-container artifacts to Cloud Storage.
        buildStepImages:
          description: List of build step digests, in the order corresponding to build step indices.
          items:
            type: string
          type: array
        buildStepOutputs:
          description: List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 50KB of data is stored.
          items:
            format: byte
            type: string
          type: array
        images:
          description: Container images that were built as a part of the build.
          items:
            $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage"
          type: array
        mavenArtifacts:
          description: Maven artifacts uploaded to Artifact Registry at the end of the build.
          items:
            $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact"
          type: array
        npmPackages:
          description: Npm packages uploaded to Artifact Registry at the end of the build.
          items:
            $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage"
          type: array
        numArtifacts:
          description: Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.
          format: int64
          type: string
        pythonPackages:
          description: Python artifacts uploaded to Artifact Registry at the end of the build.
          items:
            $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage"
          type: array
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1Secret:
      description: "Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials."
      properties:
        kmsKeyName:
          description: Cloud KMS key name to use to decrypt these envs.
          type: string
        secretEnv:
          additionalProperties:
            format: byte
            type: string
          description: Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
          type: object
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret:
      description: Pairs a secret environment variable with a SecretVersion in Secret Manager.
      properties:
        env:
          description: Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.
          type: string
        versionName:
          description: "Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*"
          type: string
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets:
      description: Secrets and secret environment variables.
      properties:
        inline:
          description: Secrets encrypted with KMS key and the associated secret environment variable.
          items:
            $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret"
          type: array
        secretManager:
          description: Secrets in Secret Manager and associated secret environment variable.
          items:
            $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret"
          type: array
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1Source:
      description: Location of the source in a supported storage service.
      properties:
        connectedRepository:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository"
          description: Optional. If provided, get the source from this 2nd-gen Google Cloud Build repository resource.
        gitSource:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource"
          description: If provided, get the source from this Git repository.
        repoSource:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource"
          description: If provided, get the source from this location in a Cloud Source Repository.
        storageSource:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource"
          description: If provided, get the source from this location in Cloud Storage.
        storageSourceManifest:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest"
          description: If provided, get the source from this manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance:
      description: Provenance of the source. Ways to find the original source, or verify that some source was used for this build.
      properties:
        fileHashes:
          additionalProperties:
            $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes"
          description: Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.
          readOnly: true
          type: object
        resolvedConnectedRepository:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository"
          description: Output only. A copy of the build's `source.connected_repository`, if exists, with any revisions resolved.
          readOnly: true
        resolvedGitSource:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource"
          description: Output only. A copy of the build's `source.git_source`, if exists, with any revisions resolved.
          readOnly: true
        resolvedRepoSource:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource"
          description: A copy of the build's `source.repo_source`, if exists, with any revisions resolved.
        resolvedStorageSource:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource"
          description: A copy of the build's `source.storage_source`, if exists, with any generations resolved.
        resolvedStorageSourceManifest:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest"
          description: A copy of the build's `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview.
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource:
      description: Location of the source in an archive file in Cloud Storage.
      properties:
        bucket:
          description: Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
          type: string
        generation:
          description: Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
          format: int64
          type: string
        object:
          description: Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build.
          type: string
        sourceFetcher:
          description: Optional. Option to specify the tool to fetch the source file for the build.
          enum:
            - SOURCE_FETCHER_UNSPECIFIED
            - GSUTIL
            - GCS_FETCHER
          type: string
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest:
      description: Location of the source manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
      properties:
        bucket:
          description: Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
          type: string
        generation:
          description: Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
          format: int64
          type: string
        object:
          description: Cloud Storage object containing the source manifest. This object must be a JSON file.
          type: string
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan:
      description: Start and end times for a build execution phase.
      properties:
        endTime:
          description: End of time span.
          format: google-datetime
          type: string
        startTime:
          description: Start of time span.
          format: google-datetime
          type: string
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact:
      description: A Maven artifact uploaded using the MavenArtifact directive.
      properties:
        fileHashes:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes"
          description: Hash types and values of the Maven Artifact.
        pushTiming:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan"
          description: Output only. Stores timing information for pushing the specified artifact.
          readOnly: true
        uri:
          description: URI of the uploaded artifact.
          type: string
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage:
      description: An npm package uploaded to Artifact Registry using the NpmPackage directive.
      properties:
        fileHashes:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes"
          description: Hash types and values of the npm package.
        pushTiming:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan"
          description: Output only. Stores timing information for pushing the specified artifact.
          readOnly: true
        uri:
          description: URI of the uploaded npm package.
          type: string
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage:
      description: Artifact uploaded using the PythonPackage directive.
      properties:
        fileHashes:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes"
          description: Hash types and values of the Python Artifact.
        pushTiming:
          $ref: "#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan"
          description: Output only. Stores timing information for pushing the specified artifact.
          readOnly: true
        uri:
          description: URI of the uploaded artifact.
          type: string
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1Volume:
      description: Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.
      properties:
        name:
          description: Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
          type: string
        path:
          description: Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
          type: string
      type: object
    CreateOperationRequest:
      description: Request for creating an operation
      properties:
        operation:
          $ref: "#/components/schemas/Operation"
          description: The operation to create.
        operationId:
          description: The ID to use for this operation.
          type: string
      type: object
    DSSEAttestationNote:
      description: A note describing an attestation
      properties:
        hint:
          $ref: "#/components/schemas/DSSEHint"
          description: DSSEHint hints at the purpose of the attestation authority.
      type: object
    DSSEAttestationOccurrence:
      description: An occurrence describing an attestation on a resource
      properties:
        envelope:
          $ref: "#/components/schemas/Envelope"
          description: If doing something security critical, make sure to verify the signatures in this metadata.
        statement:
          $ref: "#/components/schemas/InTotoStatement"
      type: object
    DSSEHint:
      description: This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
      properties:
        humanReadableName:
          description: Required. The human readable name of this attestation authority, for example "cloudbuild-prod".
          type: string
      type: object
    Deployable:
      description: An artifact that can be deployed in some runtime.
      properties:
        resourceUri:
          description: Resource URI for the artifact being deployed.
          items:
            type: string
          type: array
      type: object
    Deployment:
      description: The period during which some deployable was active in a runtime.
      properties:
        address:
          description: Address of the runtime element hosting this deployment.
          type: string
        config:
          description: Configuration used to create this deployment.
          type: string
        deployTime:
          description: Beginning of the lifetime of this deployment.
          format: google-datetime
          type: string
        platform:
          description: Platform hosting this deployment.
          enum:
            - PLATFORM_UNSPECIFIED
            - GKE
            - FLEX
            - CUSTOM
          type: string
        resourceUri:
          description: Resource URI for the artifact being deployed taken from the deployable field with the same name.
          items:
            type: string
          type: array
        undeployTime:
          description: End of the lifetime of this deployment.
          format: google-datetime
          type: string
        userEmail:
          description: Identity of the user that triggered this deployment.
          type: string
      type: object
    Derived:
      description: Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
      properties:
        baseResourceUrl:
          description: Output only. This contains the base image URL for the derived image occurrence.
          type: string
        distance:
          description: Output only. The number of layers by which this image differs from the associated image basis.
          format: uint32
          type: integer
        fingerprint:
          $ref: "#/components/schemas/Fingerprint"
          description: The fingerprint of the derived image.
        layerInfo:
          description: This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
          items:
            $ref: "#/components/schemas/Layer"
          type: array
      type: object
    Detail:
      description: "Identifies all occurrences of this vulnerability in the package for a specific distro/location For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2"
      properties:
        cpeUri:
          description: The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.
          type: string
        description:
          description: A vendor-specific description of this note.
          type: string
        fixedLocation:
          $ref: "#/components/schemas/VulnerabilityLocation"
          description: The fix for this specific package version.
        isObsolete:
          description: Whether this Detail is obsolete. Occurrences are expected not to point to obsolete details.
          type: boolean
        maxAffectedVersion:
          $ref: "#/components/schemas/Version"
          description: The max version of the package in which the vulnerability exists.
        minAffectedVersion:
          $ref: "#/components/schemas/Version"
          description: The min version of the package in which the vulnerability exists.
        package:
          description: The name of the package where the vulnerability was found. This field can be used as a filter in list requests.
          type: string
        packageType:
          description: The type of package; whether native or non native(ruby gems, node.js packages etc)
          type: string
        severityName:
          description: "The severity (eg: distro assigned severity) for this vulnerability."
          type: string
        source:
          description: The source from which the information in this Detail was obtained.
          type: string
        vendor:
          description: The vendor of the product. e.g. "google"
          type: string
      type: object
    Digest:
      description: Digest information.
      properties:
        algo:
          description: "`SHA1`, `SHA512` etc."
          type: string
        digestBytes:
          description: Value of the digest.
          format: byte
          type: string
      type: object
    Discovered:
      description: Provides information about the scan status of a discovered resource.
      properties:
        analysisCompleted:
          $ref: "#/components/schemas/AnalysisCompleted"
          description: The list of analysis that were completed for a resource.
        analysisError:
          description: Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
          items:
            $ref: "#/components/schemas/Status"
          type: array
        analysisStatus:
          description: The status of discovery for the resource.
          enum:
            - ANALYSIS_STATUS_UNSPECIFIED
            - PENDING
            - SCANNING
            - COMPLETE
            - FINISHED_SUCCESS
            - FINISHED_FAILED
            - FINISHED_UNSUPPORTED
          type: string
        analysisStatusError:
          $ref: "#/components/schemas/Status"
          description: When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage output only and populated by the API.
        archiveTime:
          description: The time occurrences related to this discovery occurrence were archived.
          format: google-datetime
          type: string
        continuousAnalysis:
          description: Whether the resource is continuously analyzed.
          enum:
            - CONTINUOUS_ANALYSIS_UNSPECIFIED
            - ACTIVE
            - INACTIVE
          type: string
        cpe:
          description: The CPE of the resource being scanned.
          type: string
        lastScanTime:
          description: The last time this resource was scanned.
          format: google-datetime
          type: string
        operation:
          $ref: "#/components/schemas/Operation"
          description: Output only. An operation that indicates the status of the current scan. This field is deprecated, do not use.
        sbomStatus:
          $ref: "#/components/schemas/SBOMStatus"
          description: Output only. The status of an SBOM generation.
          readOnly: true
      type: object
    Discovery:
      description: A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis. The occurrence's operation will indicate the status of the analysis. Absence of an occurrence linked to this note for a resource indicates that analysis hasn't started.
      properties:
        analysisKind:
          description: The kind of analysis that is handled by this discovery.
          enum:
            - KIND_UNSPECIFIED
            - PACKAGE_VULNERABILITY
            - BUILD_DETAILS
            - IMAGE_BASIS
            - PACKAGE_MANAGER
            - DEPLOYABLE
            - DISCOVERY
            - ATTESTATION_AUTHORITY
            - UPGRADE
            - COMPLIANCE
            - SBOM
            - SPDX_PACKAGE
            - SPDX_FILE
            - SPDX_RELATIONSHIP
            - DSSE_ATTESTATION
            - VULNERABILITY_ASSESSMENT
            - SBOM_REFERENCE
          type: string
      type: object
    Distribution:
      description: This represents a particular channel of distribution for a given package. e.g. Debian's jessie-backports dpkg mirror
      properties:
        architecture:
          description: The CPU architecture for which packages in this distribution channel were built
          enum:
            - ARCHITECTURE_UNSPECIFIED
            - X86
            - X64
          type: string
        cpeUri:
          description: The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
          type: string
        description:
          description: The distribution channel-specific description of this package.
          type: string
        latestVersion:
          $ref: "#/components/schemas/Version"
          description: The latest available version of this package in this distribution channel.
        maintainer:
          description: A freeform string denoting the maintainer of this package.
          type: string
        url:
          description: The distribution channel-specific homepage for this package.
          type: string
      type: object
    DocumentNote:
      description: "DocumentNote represents an SPDX Document Creation Infromation section: https://spdx.github.io/spdx-spec/2-document-creation-information/"
      properties:
        dataLicence:
          description: Compliance with the SPDX specification includes populating the SPDX fields therein with data related to such fields ("SPDX-Metadata")
          type: string
        spdxVersion:
          description: Provide a reference number that can be used to understand how to parse and interpret the rest of the file
          type: string
      type: object
    DocumentOccurrence:
      description: "DocumentOccurrence represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/"
      properties:
        createTime:
          description: Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard
          format: google-datetime
          type: string
        creatorComment:
          description: A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields
          type: string
        creators:
          description: Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name
          items:
            type: string
          type: array
        documentComment:
          description: A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document
          type: string
        externalDocumentRefs:
          description: Identify any external SPDX documents referenced within this SPDX document
          items:
            type: string
          type: array
        id:
          description: Identify the current SPDX document which may be referenced in relationships by other files, packages internally and documents externally
          type: string
        licenseListVersion:
          description: A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created
          type: string
        namespace:
          description: Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter
          type: string
        title:
          description: Identify name of this document as designated by creator
          type: string
      type: object
    Empty:
      description: "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }"
      properties: {}
      type: object
    Envelope:
      description: MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
      properties:
        payload:
          description: The bytes being signed
          format: byte
          type: string
        payloadType:
          description: The type of payload being signed
          type: string
        signatures:
          description: The signatures over the payload
          items:
            $ref: "#/components/schemas/EnvelopeSignature"
          type: array
      type: object
    EnvelopeSignature:
      description: A DSSE signature
      properties:
        keyid:
          description: A reference id to the key being used for signing
          type: string
        sig:
          description: The signature itself
          format: byte
          type: string
      type: object
    Expr:
      description: "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() < 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information."
      properties:
        description:
          description: Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
          type: string
        expression:
          description: Textual representation of an expression in Common Expression Language syntax.
          type: string
        location:
          description: Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
          type: string
        title:
          description: Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
          type: string
      type: object
    ExternalRef:
      description: An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
      properties:
        category:
          description: An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
          enum:
            - CATEGORY_UNSPECIFIED
            - SECURITY
            - PACKAGE_MANAGER
            - PERSISTENT_ID
            - OTHER
          type: string
        comment:
          description: Human-readable information about the purpose and target of the reference
          type: string
        locator:
          description: The unique string with no spaces necessary to access the package-specific information, metadata, or content within the target location
          type: string
        type:
          description: Type of category (e.g. 'npm' for the PACKAGE_MANAGER category)
          type: string
      type: object
    FileHashes:
      description: Container message for hashes of byte content of files, used in Source messages to verify integrity of source input to the build.
      properties:
        fileHash:
          description: Collection of file hashes.
          items:
            $ref: "#/components/schemas/Hash"
          type: array
      type: object
    FileLocation:
      description: Indicates the location at which a package was found.
      properties:
        filePath:
          description: For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.
          type: string
      type: object
    FileNote:
      description: "FileNote represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/"
      properties:
        checksum:
          description: Provide a unique identifier to match analysis information on each specific file in a package
          items:
            type: string
          type: array
        fileType:
          description: This field provides information about the type of file identified
          enum:
            - FILE_TYPE_UNSPECIFIED
            - SOURCE
            - BINARY
            - ARCHIVE
            - APPLICATION
            - AUDIO
            - IMAGE
            - TEXT
            - VIDEO
            - DOCUMENTATION
            - SPDX
            - OTHER
          type: string
        title:
          description: Identify the full path and filename that corresponds to the file information in this section
          type: string
      type: object
    FileOccurrence:
      description: "FileOccurrence represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/"
      properties:
        attributions:
          description: This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts
          items:
            type: string
          type: array
        comment:
          description: This field provides a place for the SPDX file creator to record any general comments about the file
          type: string
        contributors:
          description: This field provides a place for the SPDX file creator to record file contributors
          items:
            type: string
          type: array
        copyright:
          description: Identify the copyright holder of the file, as well as any dates present
          type: string
        filesLicenseInfo:
          description: This field contains the license information actually found in the file, if any
          items:
            type: string
          type: array
        id:
          description: Uniquely identify any element in an SPDX document which may be referenced by other elements
          type: string
        licenseConcluded:
          $ref: "#/components/schemas/License"
          description: This field contains the license the SPDX file creator has concluded as governing the file or alternative values if the governing license cannot be determined
        notice:
          description: This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file
          type: string
      type: object
    Fingerprint:
      description: A set of properties that uniquely identify a given Docker image.
      properties:
        v1Name:
          description: The layer-id of the final layer in the Docker image's v1 representation. This field can be used as a filter in list requests.
          type: string
        v2Blob:
          description: The ordered list of v2 blobs that represent a given image.
          items:
            type: string
          type: array
        v2Name:
          description: "Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + \" \" + v2_name[N+1]) Only the name of the final blob is kept. This field can be used as a filter in list requests."
          type: string
      type: object
    GetIamPolicyRequest:
      description: Request message for `GetIamPolicy` method.
      properties:
        options:
          $ref: "#/components/schemas/GetPolicyOptions"
          description: "OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`."
      type: object
    GetPolicyOptions:
      description: Encapsulates settings provided to GetIamPolicy.
      properties:
        requestedPolicyVersion:
          description: Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          format: int32
          type: integer
      type: object
    GetVulnzOccurrencesSummaryResponse:
      description: A summary of how many vulnz occurrences there are per severity type. counts by groups, or if we should have different summary messages like this.
      properties:
        counts:
          description: A map of how many occurrences were found for each severity.
          items:
            $ref: "#/components/schemas/SeverityCount"
          type: array
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1AliasContext:
      description: An alias to a repo revision.
      properties:
        kind:
          description: The alias kind.
          enum:
            - KIND_UNSPECIFIED
            - FIXED
            - MOVABLE
            - OTHER
          type: string
        name:
          description: The alias name.
          type: string
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext:
      description: A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
      properties:
        aliasContext:
          $ref: "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1AliasContext"
          description: An alias, which may be a branch or tag.
        repoId:
          $ref: "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1RepoId"
          description: The ID of the repo.
        revisionId:
          description: A revision ID.
          type: string
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext:
      description: A SourceContext referring to a Gerrit project.
      properties:
        aliasContext:
          $ref: "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1AliasContext"
          description: An alias, which may be a branch or tag.
        gerritProject:
          description: The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
          type: string
        hostUri:
          description: The URI of a running Gerrit instance.
          type: string
        revisionId:
          description: A revision (commit) ID.
          type: string
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext:
      description: A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
      properties:
        revisionId:
          description: Required. Git commit hash.
          type: string
        url:
          description: Git repository URL.
          type: string
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata:
      description: Metadata for all operations used and required for all operations that created by Container Analysis Providers
      properties:
        createTime:
          description: Output only. The time this operation was created.
          format: google-datetime
          type: string
        endTime:
          description: Output only. The time that this operation was marked completed or failed.
          format: google-datetime
          type: string
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId:
      description: Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
      properties:
        projectId:
          description: The ID of the project.
          type: string
        repoName:
          description: The name of the repo. Leave empty for the default repo.
          type: string
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1RepoId:
      description: A unique identifier for a Cloud Repo.
      properties:
        projectRepoId:
          $ref: "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId"
          description: A combination of a project ID and a repo name.
        uid:
          description: A server-assigned, globally unique identifier.
          type: string
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder:
      description: Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
      properties:
        id:
          description: URI indicating the builder’s identity.
          type: string
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness:
      description: Indicates that the builder claims certain fields in this message to be complete.
      properties:
        environment:
          description: If true, the builder claims that invocation.environment is complete.
          type: boolean
        materials:
          description: If true, the builder claims that materials is complete.
          type: boolean
        parameters:
          description: If true, the builder claims that invocation.parameters is complete.
          type: boolean
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource:
      description: Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from.
      properties:
        digest:
          additionalProperties:
            type: string
          description: Collection of cryptographic digests for the contents of the artifact specified by invocation.configSource.uri.
          type: object
        entryPoint:
          description: String identifying the entry point into the build.
          type: string
        uri:
          description: URI indicating the identity of the source of the config.
          type: string
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation:
      description: Identifies the event that kicked off the build.
      properties:
        configSource:
          $ref: "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource"
          description: Describes where the config file that kicked off the build came from.
        environment:
          additionalProperties:
            description: Properties of the object.
          description: Any other builder-controlled inputs necessary for correctly evaluating the build.
          type: object
        parameters:
          additionalProperties:
            description: Properties of the object.
          description: Collection of all external inputs that influenced the build on top of invocation.configSource.
          type: object
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterial:
      description: The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.
      properties:
        digest:
          additionalProperties:
            type: string
          description: Collection of cryptographic digests for the contents of this artifact.
          type: object
        uri:
          description: The method by which this artifact was referenced during the build.
          type: string
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata:
      description: Other properties of the build.
      properties:
        buildFinishedOn:
          description: The timestamp of when the build completed.
          format: google-datetime
          type: string
        buildInvocationId:
          description: Identifies this particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis.
          type: string
        buildStartedOn:
          description: The timestamp of when the build started.
          format: google-datetime
          type: string
        completeness:
          $ref: "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness"
          description: Indicates that the builder claims certain fields in this message to be complete.
        reproducible:
          description: If true, the builder claims that running invocation on materials will produce bit-for-bit identical output.
          type: boolean
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1SourceContext:
      description: A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
      properties:
        cloudRepo:
          $ref: "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext"
          description: A SourceContext referring to a revision in a Google Cloud Source Repo.
        gerrit:
          $ref: "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext"
          description: A SourceContext referring to a Gerrit project.
        git:
          $ref: "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext"
          description: A SourceContext referring to any third party Git repo (e.g., GitHub).
        labels:
          additionalProperties:
            type: string
          description: Labels with user defined metadata.
          type: object
      type: object
    Hash:
      description: Container message for hash values.
      properties:
        type:
          description: The type of hash that was performed.
          enum:
            - NONE
            - SHA256
          type: string
        value:
          description: The hash value.
          format: byte
          type: string
      type: object
    IdentifierHelper:
      description: Helps in identifying the underlying product. This should be treated like a one-of field. Only one field should be set in this proto. This is a workaround because spanner indexes on one-of fields restrict addition and deletion of fields.
      properties:
        field:
          description: The field that is set in the API proto.
          enum:
            - IDENTIFIER_HELPER_FIELD_UNSPECIFIED
            - GENERIC_URI
          type: string
        genericUri:
          description: "Contains a URI which is vendor-specific. Example: The artifact repository URL of an image."
          type: string
      type: object
    InTotoProvenance:
      properties:
        builderConfig:
          $ref: "#/components/schemas/BuilderConfig"
          description: required
        materials:
          description: The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
          items:
            type: string
          type: array
        metadata:
          $ref: "#/components/schemas/Metadata"
        recipe:
          $ref: "#/components/schemas/Recipe"
          description: Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
      type: object
    InTotoSlsaProvenanceV1:
      properties:
        _type:
          description: InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement
          type: string
        predicate:
          $ref: "#/components/schemas/SlsaProvenanceV1"
        predicateType:
          type: string
        subject:
          items:
            $ref: "#/components/schemas/Subject"
          type: array
      type: object
    InTotoStatement:
      description: Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always "application/vnd.in-toto+json".
      properties:
        _type:
          description: Always "https://in-toto.io/Statement/v0.1".
          type: string
        predicateType:
          description: '"https://slsa.dev/provenance/v0.1" for SlsaProvenance.'
          type: string
        provenance:
          $ref: "#/components/schemas/InTotoProvenance"
          description: Generic Grafeas provenance.
        slsaProvenance:
          $ref: "#/components/schemas/SlsaProvenance"
          description: SLSA 0.1 provenance.
        slsaProvenanceZeroTwo:
          $ref: "#/components/schemas/SlsaProvenanceZeroTwo"
          description: SLSA 0.2 provenance.
        subject:
          description: subject is the subjects of the intoto statement
          items:
            $ref: "#/components/schemas/Subject"
          type: array
      type: object
    Installation:
      description: This represents how a particular software package may be installed on a system.
      properties:
        architecture:
          description: Output only. The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
          enum:
            - ARCHITECTURE_UNSPECIFIED
            - X86
            - X64
          readOnly: true
          type: string
        cpeUri:
          description: Output only. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
          readOnly: true
          type: string
        license:
          $ref: "#/components/schemas/License"
          description: Licenses that have been declared by the authors of the package.
        location:
          description: All of the places within the filesystem versions of this package have been found.
          items:
            $ref: "#/components/schemas/Location"
          type: array
        name:
          description: Output only. The name of the installed package.
          readOnly: true
          type: string
        packageType:
          description: Output only. The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
          readOnly: true
          type: string
        version:
          $ref: "#/components/schemas/Version"
          description: Output only. The version of the package.
          readOnly: true
      type: object
    Justification:
      description: Justification provides the justification when the state of the assessment if NOT_AFFECTED.
      properties:
        details:
          description: Additional details on why this justification was chosen.
          type: string
        justificationType:
          description: The justification type for this vulnerability.
          enum:
            - JUSTIFICATION_TYPE_UNSPECIFIED
            - COMPONENT_NOT_PRESENT
            - VULNERABLE_CODE_NOT_PRESENT
            - VULNERABLE_CODE_NOT_IN_EXECUTE_PATH
            - VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY
            - INLINE_MITIGATIONS_ALREADY_EXIST
          type: string
      type: object
    Layer:
      description: Layer holds metadata specific to a layer of a Docker image.
      properties:
        arguments:
          description: The recovered arguments to the Dockerfile directive.
          type: string
        directive:
          description: The recovered Dockerfile directive used to construct this layer.
          enum:
            - DIRECTIVE_UNSPECIFIED
            - MAINTAINER
            - RUN
            - CMD
            - LABEL
            - EXPOSE
            - ENV
            - ADD
            - COPY
            - ENTRYPOINT
            - VOLUME
            - USER
            - WORKDIR
            - ARG
            - ONBUILD
            - STOPSIGNAL
            - HEALTHCHECK
            - SHELL
          type: string
      type: object
    License:
      description: License information.
      properties:
        comments:
          description: Comments
          type: string
        expression:
          description: 'Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".'
          type: string
      type: object
    ListNoteOccurrencesResponse:
      description: Response including listed occurrences for a note.
      properties:
        nextPageToken:
          description: Token to receive the next page of notes.
          type: string
        occurrences:
          description: The occurrences attached to the specified note.
          items:
            $ref: "#/components/schemas/Occurrence"
          type: array
      type: object
    ListNotesResponse:
      description: Response including listed notes.
      properties:
        nextPageToken:
          description: The next pagination token in the list response. It should be used as page_token for the following request. An empty value means no more result.
          type: string
        notes:
          description: The occurrences requested
          items:
            $ref: "#/components/schemas/Note"
          type: array
      type: object
    ListOccurrencesResponse:
      description: Response including listed active occurrences.
      properties:
        nextPageToken:
          description: The next pagination token in the list response. It should be used as `page_token` for the following request. An empty value means no more results.
          type: string
        occurrences:
          description: The occurrences requested.
          items:
            $ref: "#/components/schemas/Occurrence"
          type: array
      type: object
    ListScanConfigsResponse:
      description: A list of scan configs for the project.
      properties:
        nextPageToken:
          description: A page token to pass in order to get more scan configs.
          type: string
        scanConfigs:
          description: The set of scan configs.
          items:
            $ref: "#/components/schemas/ScanConfig"
          type: array
      type: object
    Location:
      description: An occurrence of a particular package installation found within a system's filesystem. e.g. glibc was found in /var/lib/dpkg/status
      properties:
        cpeUri:
          description: Deprecated. The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
          type: string
        path:
          description: The path from which we gathered that this package/version is installed.
          type: string
        version:
          $ref: "#/components/schemas/Version"
          description: Deprecated. The version installed at this location.
      type: object
    Material:
      description: Material is a material used in the generation of the provenance
      properties:
        digest:
          additionalProperties:
            type: string
          description: digest is a map from a hash algorithm (e.g. sha256) to the value in the material
          type: object
        uri:
          description: uri is the uri of the material
          type: string
      type: object
    Metadata:
      description: Other properties of the build.
      properties:
        buildFinishedOn:
          description: The timestamp of when the build completed.
          format: google-datetime
          type: string
        buildInvocationId:
          description: Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
          type: string
        buildStartedOn:
          description: The timestamp of when the build started.
          format: google-datetime
          type: string
        completeness:
          $ref: "#/components/schemas/Completeness"
          description: Indicates that the builder claims certain fields in this message to be complete.
        reproducible:
          description: If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
          type: boolean
      type: object
    NonCompliantFile:
      description: Details about files that caused a compliance check to fail.
      properties:
        displayCommand:
          description: Command to display the non-compliant files.
          type: string
        path:
          description: display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'. Empty if `display_command` is set.
          type: string
        reason:
          description: Explains why a file is non compliant for a CIS check.
          type: string
      type: object
    Note:
      description: Provides a detailed description of a `Note`.
      properties:
        attestationAuthority:
          $ref: "#/components/schemas/AttestationAuthority"
          description: A note describing an attestation role.
        baseImage:
          $ref: "#/components/schemas/Basis"
          description: A note describing a base image.
        buildType:
          $ref: "#/components/schemas/BuildType"
          description: Build provenance type for a verifiable build.
        compliance:
          $ref: "#/components/schemas/ComplianceNote"
          description: A note describing a compliance check.
        createTime:
          description: Output only. The time this note was created. This field can be used as a filter in list requests.
          format: google-datetime
          type: string
        deployable:
          $ref: "#/components/schemas/Deployable"
          description: A note describing something that can be deployed.
        discovery:
          $ref: "#/components/schemas/Discovery"
          description: A note describing a provider/analysis type.
        dsseAttestation:
          $ref: "#/components/schemas/DSSEAttestationNote"
          description: A note describing a dsse attestation note.
        expirationTime:
          description: Time of expiration for this note, null if note does not expire.
          format: google-datetime
          type: string
        kind:
          description: Output only. This explicitly denotes which kind of note is specified. This field can be used as a filter in list requests.
          enum:
            - KIND_UNSPECIFIED
            - PACKAGE_VULNERABILITY
            - BUILD_DETAILS
            - IMAGE_BASIS
            - PACKAGE_MANAGER
            - DEPLOYABLE
            - DISCOVERY
            - ATTESTATION_AUTHORITY
            - UPGRADE
            - COMPLIANCE
            - SBOM
            - SPDX_PACKAGE
            - SPDX_FILE
            - SPDX_RELATIONSHIP
            - DSSE_ATTESTATION
            - VULNERABILITY_ASSESSMENT
            - SBOM_REFERENCE
          type: string
        longDescription:
          description: A detailed description of this `Note`.
          type: string
        name:
          description: The name of the note in the form "projects/{provider_project_id}/notes/{NOTE_ID}"
          type: string
        package:
          $ref: "#/components/schemas/Package"
          description: A note describing a package hosted by various package managers.
        relatedUrl:
          description: URLs associated with this note
          items:
            $ref: "#/components/schemas/RelatedUrl"
          type: array
        sbom:
          $ref: "#/components/schemas/DocumentNote"
          description: A note describing a software bill of materials.
        sbomReference:
          $ref: "#/components/schemas/SBOMReferenceNote"
          description: A note describing a reference to an SBOM.
        shortDescription:
          description: A one sentence description of this `Note`.
          type: string
        spdxFile:
          $ref: "#/components/schemas/FileNote"
          description: A note describing an SPDX File.
        spdxPackage:
          $ref: "#/components/schemas/PackageInfoNote"
          description: A note describing an SPDX Package.
        spdxRelationship:
          $ref: "#/components/schemas/RelationshipNote"
          description: A note describing a relationship between SPDX elements.
        updateTime:
          description: Output only. The time this note was last updated. This field can be used as a filter in list requests.
          format: google-datetime
          type: string
        upgrade:
          $ref: "#/components/schemas/UpgradeNote"
          description: A note describing an upgrade.
        vulnerabilityAssessment:
          $ref: "#/components/schemas/VulnerabilityAssessmentNote"
          description: A note describing a vulnerability assessment.
        vulnerabilityType:
          $ref: "#/components/schemas/VulnerabilityType"
          description: A package vulnerability type of note.
      type: object
    Occurrence:
      description: "`Occurrence` includes information about analysis occurrences for an image."
      properties:
        attestation:
          $ref: "#/components/schemas/Attestation"
          description: Describes an attestation of an artifact.
        buildDetails:
          $ref: "#/components/schemas/BuildDetails"
          description: Build details for a verifiable build.
        compliance:
          $ref: "#/components/schemas/ComplianceOccurrence"
          description: Describes whether or not a resource passes compliance checks.
        createTime:
          description: Output only. The time this `Occurrence` was created.
          format: google-datetime
          type: string
        deployment:
          $ref: "#/components/schemas/Deployment"
          description: Describes the deployment of an artifact on a runtime.
        derivedImage:
          $ref: "#/components/schemas/Derived"
          description: Describes how this resource derives from the basis in the associated note.
        discovered:
          $ref: "#/components/schemas/Discovered"
          description: Describes the initial scan status for this resource.
        dsseAttestation:
          $ref: "#/components/schemas/DSSEAttestationOccurrence"
          description: This represents a DSSE attestation occurrence
        envelope:
          $ref: "#/components/schemas/Envelope"
          description: https://github.com/secure-systems-lab/dsse
        installation:
          $ref: "#/components/schemas/Installation"
          description: Describes the installation of a package on the linked resource.
        kind:
          description: Output only. This explicitly denotes which of the `Occurrence` details are specified. This field can be used as a filter in list requests.
          enum:
            - KIND_UNSPECIFIED
            - PACKAGE_VULNERABILITY
            - BUILD_DETAILS
            - IMAGE_BASIS
            - PACKAGE_MANAGER
            - DEPLOYABLE
            - DISCOVERY
            - ATTESTATION_AUTHORITY
            - UPGRADE
            - COMPLIANCE
            - SBOM
            - SPDX_PACKAGE
            - SPDX_FILE
            - SPDX_RELATIONSHIP
            - DSSE_ATTESTATION
            - VULNERABILITY_ASSESSMENT
            - SBOM_REFERENCE
          type: string
        name:
          description: Output only. The name of the `Occurrence` in the form "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
          type: string
        noteName:
          description: An analysis note associated with this image, in the form "providers/{provider_id}/notes/{NOTE_ID}" This field can be used as a filter in list requests.
          type: string
        remediation:
          description: A description of actions that can be taken to remedy the `Note`
          type: string
        resource:
          $ref: "#/components/schemas/Resource"
          description: " The resource for which the `Occurrence` applies."
        resourceUrl:
          description: The unique URL of the image or the container for which the `Occurrence` applies. For example, https://gcr.io/project/image@sha256:foo This field can be used as a filter in list requests.
          type: string
        sbom:
          $ref: "#/components/schemas/DocumentOccurrence"
          description: Describes a specific software bill of materials document.
        sbomReference:
          $ref: "#/components/schemas/SBOMReferenceOccurrence"
          description: This represents an SBOM reference occurrence
        spdxFile:
          $ref: "#/components/schemas/FileOccurrence"
          description: Describes a specific SPDX File.
        spdxPackage:
          $ref: "#/components/schemas/PackageInfoOccurrence"
          description: Describes a specific SPDX Package.
        spdxRelationship:
          $ref: "#/components/schemas/RelationshipOccurrence"
          description: Describes a specific relationship between SPDX elements.
        updateTime:
          description: Output only. The time this `Occurrence` was last updated.
          format: google-datetime
          type: string
        upgrade:
          $ref: "#/components/schemas/UpgradeOccurrence"
          description: Describes an upgrade.
        vulnerabilityDetails:
          $ref: "#/components/schemas/VulnerabilityDetails"
          description: Details of a security vulnerability note.
      type: object
    Operation:
      description: This resource represents a long-running operation that is the result of a network API call.
      properties:
        done:
          description: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
          type: boolean
        error:
          $ref: "#/components/schemas/Status"
          description: The error result of the operation in case of failure or cancellation.
        metadata:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
          type: object
        name:
          description: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
          type: string
        response:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
          type: object
      type: object
    Package:
      description: This represents a particular package that is distributed over various channels. e.g. glibc (aka libc6) is distributed by many, at various versions.
      properties:
        architecture:
          description: The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
          enum:
            - ARCHITECTURE_UNSPECIFIED
            - X86
            - X64
          type: string
        cpeUri:
          description: The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
          type: string
        description:
          description: The description of this package.
          type: string
        digest:
          description: Hash value, typically a file digest, that allows unique identification a specific package.
          items:
            $ref: "#/components/schemas/Digest"
          type: array
        distribution:
          description: The various channels by which a package is distributed.
          items:
            $ref: "#/components/schemas/Distribution"
          type: array
        license:
          $ref: "#/components/schemas/License"
          description: Licenses that have been declared by the authors of the package.
        maintainer:
          description: A freeform text denoting the maintainer of this package.
          type: string
        name:
          description: The name of the package.
          type: string
        packageType:
          description: The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
          type: string
        url:
          description: The homepage for this package.
          type: string
        version:
          $ref: "#/components/schemas/Version"
          description: The version of the package.
      type: object
    PackageInfoNote:
      description: "PackageInfoNote represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/"
      properties:
        analyzed:
          description: Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document
          type: boolean
        attribution:
          description: A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts
          type: string
        checksum:
          description: Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file
          type: string
        copyright:
          description: Identify the copyright holders of the package, as well as any dates present
          type: string
        detailedDescription:
          description: A more detailed description of the package
          type: string
        downloadLocation:
          description: This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created
          type: string
        externalRefs:
          description: ExternalRef
          items:
            $ref: "#/components/schemas/ExternalRef"
          type: array
        filesLicenseInfo:
          description: Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found
          items:
            type: string
          type: array
        homePage:
          description: Provide a place for the SPDX file creator to record a web site that serves as the package's home page
          type: string
        licenseDeclared:
          $ref: "#/components/schemas/License"
          description: List the licenses that have been declared by the authors of the package
        originator:
          description: If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came
          type: string
        packageType:
          description: "The type of package: OS, MAVEN, GO, GO_STDLIB, etc."
          type: string
        summaryDescription:
          description: A short description of the package
          type: string
        supplier:
          description: Identify the actual distribution source for the package/directory identified in the SPDX file
          type: string
        title:
          description: Identify the full name of the package as given by the Package Originator
          type: string
        verificationCode:
          description: This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file
          type: string
        version:
          description: Identify the version of the package
          type: string
      type: object
    PackageInfoOccurrence:
      description: "PackageInfoOccurrence represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/"
      properties:
        comment:
          description: A place for the SPDX file creator to record any general comments about the package being described
          type: string
        filename:
          description: Provide the actual file name of the package, or path of the directory being treated as a package
          type: string
        homePage:
          description: Output only. Provide a place for the SPDX file creator to record a web site that serves as the package's home page
          readOnly: true
          type: string
        id:
          description: Uniquely identify any element in an SPDX document which may be referenced by other elements
          type: string
        licenseConcluded:
          $ref: "#/components/schemas/License"
          description: package or alternative values, if the governing license cannot be determined
        packageType:
          description: "Output only. The type of package: OS, MAVEN, GO, GO_STDLIB, etc."
          readOnly: true
          type: string
        sourceInfo:
          description: Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package
          type: string
        summaryDescription:
          description: Output only. A short description of the package
          readOnly: true
          type: string
        title:
          description: Output only. Identify the full name of the package as given by the Package Originator
          readOnly: true
          type: string
        version:
          description: Output only. Identify the version of the package
          readOnly: true
          type: string
      type: object
    PackageIssue:
      description: This message wraps a location affected by a vulnerability and its associated fix (if one is available).
      properties:
        affectedLocation:
          $ref: "#/components/schemas/VulnerabilityLocation"
          description: The location of the vulnerability.
        effectiveSeverity:
          description: Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when distro or language system has not yet assigned a severity for this vulnerability.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          readOnly: true
          type: string
        fixedLocation:
          $ref: "#/components/schemas/VulnerabilityLocation"
          description: The location of the available fix for vulnerability.
        packageType:
          description: The type of package (e.g. OS, MAVEN, GO).
          type: string
        severityName:
          type: string
      type: object
    PgpSignedAttestation:
      description: An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.
      properties:
        contentType:
          description: Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
          enum:
            - CONTENT_TYPE_UNSPECIFIED
            - SIMPLE_SIGNING_JSON
          type: string
        pgpKeyId:
          description: 'The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ``` gpg --with-colons --with-fingerprint --force-v4-certs \ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB: ``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.'
          type: string
        signature:
          description: The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
          type: string
      type: object
    Policy:
      description: "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/)."
      properties:
        bindings:
          description: Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
          items:
            $ref: "#/components/schemas/Binding"
          type: array
        etag:
          description: "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."
          format: byte
          type: string
        version:
          description: "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
          format: int32
          type: integer
      type: object
    Product:
      description: Product contains information about a product and how to uniquely identify it.
      properties:
        id:
          description: Token that identifies a product so that it can be referred to from other parts in the document. There is no predefined format as long as it uniquely identifies a group in the context of the current document.
          type: string
        identifierHelper:
          $ref: "#/components/schemas/IdentifierHelper"
          description: Helps in identifying the underlying product.
        name:
          description: Name of the product.
          type: string
      type: object
    ProvenanceBuilder:
      properties:
        builderDependencies:
          items:
            $ref: "#/components/schemas/ResourceDescriptor"
          type: array
        id:
          type: string
        version:
          additionalProperties:
            type: string
          type: object
      type: object
    Publisher:
      description: Publisher contains information about the publisher of this Note.
      properties:
        issuingAuthority:
          description: Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.
          type: string
        name:
          description: "Name of the publisher. Examples: 'Google', 'Google Cloud Platform'."
          type: string
        publisherNamespace:
          description: "The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io"
          type: string
      type: object
    Recipe:
      description: Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
      properties:
        arguments:
          description: Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint.
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
        definedInMaterial:
          description: Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
          format: int64
          type: string
        entryPoint:
          description: String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
          type: string
        environment:
          description: Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy.
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
        type:
          description: URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
          type: string
      type: object
    RelatedUrl:
      description: Metadata for any related URL information
      properties:
        label:
          description: Label to describe usage of the URL
          type: string
        url:
          description: Specific URL to associate with the note
          type: string
      type: object
    RelationshipNote:
      description: "RelationshipNote represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/"
      properties:
        type:
          description: The type of relationship between the source and target SPDX elements
          enum:
            - RELATIONSHIP_TYPE_UNSPECIFIED
            - DESCRIBES
            - DESCRIBED_BY
            - CONTAINS
            - CONTAINED_BY
            - DEPENDS_ON
            - DEPENDENCY_OF
            - DEPENDENCY_MANIFEST_OF
            - BUILD_DEPENDENCY_OF
            - DEV_DEPENDENCY_OF
            - OPTIONAL_DEPENDENCY_OF
            - PROVIDED_DEPENDENCY_OF
            - TEST_DEPENDENCY_OF
            - RUNTIME_DEPENDENCY_OF
            - EXAMPLE_OF
            - GENERATES
            - GENERATED_FROM
            - ANCESTOR_OF
            - DESCENDANT_OF
            - VARIANT_OF
            - DISTRIBUTION_ARTIFACT
            - PATCH_FOR
            - PATCH_APPLIED
            - COPY_OF
            - FILE_ADDED
            - FILE_DELETED
            - FILE_MODIFIED
            - EXPANDED_FROM_ARCHIVE
            - DYNAMIC_LINK
            - STATIC_LINK
            - DATA_FILE_OF
            - TEST_CASE_OF
            - BUILD_TOOL_OF
            - DEV_TOOL_OF
            - TEST_OF
            - TEST_TOOL_OF
            - DOCUMENTATION_OF
            - OPTIONAL_COMPONENT_OF
            - METAFILE_OF
            - PACKAGE_OF
            - AMENDS
            - PREREQUISITE_FOR
            - HAS_PREREQUISITE
            - OTHER
          type: string
      type: object
    RelationshipOccurrence:
      description: "RelationshipOccurrence represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/"
      properties:
        comment:
          description: A place for the SPDX file creator to record any general comments about the relationship
          type: string
        source:
          description: Also referred to as SPDXRef-A The source SPDX element (file, package, etc)
          type: string
        target:
          description: Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are "known unknowns", the use of the keyword NOASSERTION can be used The keywords NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it
          type: string
        type:
          description: Output only. The type of relationship between the source and target SPDX elements
          enum:
            - RELATIONSHIP_TYPE_UNSPECIFIED
            - DESCRIBES
            - DESCRIBED_BY
            - CONTAINS
            - CONTAINED_BY
            - DEPENDS_ON
            - DEPENDENCY_OF
            - DEPENDENCY_MANIFEST_OF
            - BUILD_DEPENDENCY_OF
            - DEV_DEPENDENCY_OF
            - OPTIONAL_DEPENDENCY_OF
            - PROVIDED_DEPENDENCY_OF
            - TEST_DEPENDENCY_OF
            - RUNTIME_DEPENDENCY_OF
            - EXAMPLE_OF
            - GENERATES
            - GENERATED_FROM
            - ANCESTOR_OF
            - DESCENDANT_OF
            - VARIANT_OF
            - DISTRIBUTION_ARTIFACT
            - PATCH_FOR
            - PATCH_APPLIED
            - COPY_OF
            - FILE_ADDED
            - FILE_DELETED
            - FILE_MODIFIED
            - EXPANDED_FROM_ARCHIVE
            - DYNAMIC_LINK
            - STATIC_LINK
            - DATA_FILE_OF
            - TEST_CASE_OF
            - BUILD_TOOL_OF
            - DEV_TOOL_OF
            - TEST_OF
            - TEST_TOOL_OF
            - DOCUMENTATION_OF
            - OPTIONAL_COMPONENT_OF
            - METAFILE_OF
            - PACKAGE_OF
            - AMENDS
            - PREREQUISITE_FOR
            - HAS_PREREQUISITE
            - OTHER
          readOnly: true
          type: string
      type: object
    Remediation:
      description: Specifies details on how to handle (and presumably, fix) a vulnerability.
      properties:
        details:
          description: Contains a comprehensive human-readable discussion of the remediation.
          type: string
        remediationType:
          description: The type of remediation that can be applied.
          enum:
            - REMEDIATION_TYPE_UNSPECIFIED
            - MITIGATION
            - NO_FIX_PLANNED
            - NONE_AVAILABLE
            - VENDOR_FIX
            - WORKAROUND
          type: string
        remediationUri:
          $ref: "#/components/schemas/URI"
          description: Contains the URL where to obtain the remediation.
      type: object
    RepoSource:
      deprecated: true
      description: RepoSource describes the location of the source in a Google Cloud Source Repository.
      properties:
        branchName:
          description: Name of the branch to build.
          type: string
        commitSha:
          description: Explicit commit SHA to build.
          type: string
        projectId:
          description: ID of the project that owns the repo.
          type: string
        repoName:
          description: Name of the repo.
          type: string
        tagName:
          description: Name of the tag to build.
          type: string
      type: object
    Resource:
      description: " Resource is an entity that can have metadata. E.g., a Docker image."
      properties:
        contentHash:
          $ref: "#/components/schemas/Hash"
          description: The hash of the resource content. E.g., the Docker digest.
        name:
          description: The name of the resource. E.g., the name of a Docker image - "Debian".
          type: string
        uri:
          description: The unique URI of the resource. E.g., "https://gcr.io/project/image@sha256:foo" for a Docker image.
          type: string
      type: object
    ResourceDescriptor:
      properties:
        annotations:
          additionalProperties: {}
          type: object
        content:
          format: byte
          type: string
        digest:
          additionalProperties:
            type: string
          type: object
        downloadLocation:
          type: string
        mediaType:
          type: string
        name:
          type: string
        uri:
          type: string
      type: object
    RunDetails:
      properties:
        builder:
          $ref: "#/components/schemas/ProvenanceBuilder"
        byproducts:
          items:
            $ref: "#/components/schemas/ResourceDescriptor"
          type: array
        metadata:
          $ref: "#/components/schemas/BuildMetadata"
      type: object
    SBOMReferenceNote:
      description: The note representing an SBOM reference.
      properties:
        format:
          description: The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...
          type: string
        version:
          description: The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3.
          type: string
      type: object
    SBOMReferenceOccurrence:
      description: The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.
      properties:
        payload:
          $ref: "#/components/schemas/SbomReferenceIntotoPayload"
          description: The actual payload that contains the SBOM reference data.
        payloadType:
          description: The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.
          type: string
        signatures:
          description: The signatures over the payload.
          items:
            $ref: "#/components/schemas/EnvelopeSignature"
          type: array
      type: object
    SBOMStatus:
      description: The status of an SBOM generation.
      properties:
        error:
          description: Output only. If there was an error generating an SBOM, this will indicate what that error was.
          readOnly: true
          type: string
        sbomState:
          description: Output only. The progress of the SBOM generation.
          enum:
            - SBOM_STATE_UNSPECIFIED
            - PENDING
            - COMPLETE
          readOnly: true
          type: string
      type: object
    SbomReferenceIntotoPayload:
      description: The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.
      properties:
        _type:
          description: Identifier for the schema of the Statement.
          type: string
        predicate:
          $ref: "#/components/schemas/SbomReferenceIntotoPredicate"
          description: Additional parameters of the Predicate. Includes the actual data about the SBOM.
        predicateType:
          description: URI identifying the type of the Predicate.
          type: string
        subject:
          description: Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
          items:
            $ref: "#/components/schemas/Subject"
          type: array
      type: object
    SbomReferenceIntotoPredicate:
      description: A predicate which describes the SBOM being referenced.
      properties:
        digest:
          additionalProperties:
            type: string
          description: A map of algorithm to digest of the contents of the SBOM.
          type: object
        location:
          description: The location of the SBOM.
          type: string
        mimeType:
          description: The mime type of the SBOM.
          type: string
        referrerId:
          description: The person or system referring this predicate to the consumer.
          type: string
      type: object
    ScanConfig:
      description: Indicates various scans and whether they are turned on or off.
      properties:
        createTime:
          description: Output only. The time this scan config was created.
          format: google-datetime
          type: string
        description:
          description: Output only. A human-readable description of what the `ScanConfig` does.
          type: string
        enabled:
          description: Indicates whether the Scan is enabled.
          type: boolean
        name:
          description: Output only. The name of the ScanConfig in the form “projects/{project_id}/scanConfigs/{scan_config_id}".
          type: string
        updateTime:
          description: Output only. The time this scan config was last updated.
          format: google-datetime
          type: string
      type: object
    SetIamPolicyRequest:
      description: Request message for `SetIamPolicy` method.
      properties:
        policy:
          $ref: "#/components/schemas/Policy"
          description: "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them."
      type: object
    SeverityCount:
      description: The number of occurrences created for a specific severity.
      properties:
        count:
          description: The number of occurrences with the severity.
          format: int64
          type: string
        severity:
          description: The severity of the occurrences.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          type: string
      type: object
    SlsaBuilder:
      description: SlsaBuilder encapsulates the identity of the builder of this provenance.
      properties:
        id:
          description: id is the id of the slsa provenance builder
          type: string
      type: object
    SlsaCompleteness:
      description: Indicates that the builder claims certain fields in this message to be complete.
      properties:
        arguments:
          description: If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
          type: boolean
        environment:
          description: If true, the builder claims that recipe.environment is claimed to be complete.
          type: boolean
        materials:
          description: If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
          type: boolean
      type: object
    SlsaMetadata:
      description: Other properties of the build.
      properties:
        buildFinishedOn:
          description: The timestamp of when the build completed.
          format: google-datetime
          type: string
        buildInvocationId:
          description: Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
          type: string
        buildStartedOn:
          description: The timestamp of when the build started.
          format: google-datetime
          type: string
        completeness:
          $ref: "#/components/schemas/SlsaCompleteness"
          description: Indicates that the builder claims certain fields in this message to be complete.
        reproducible:
          description: If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
          type: boolean
      type: object
    SlsaProvenance:
      description: SlsaProvenance is the slsa provenance as defined by the slsa spec.
      properties:
        builder:
          $ref: "#/components/schemas/SlsaBuilder"
          description: builder is the builder of this provenance
        materials:
          description: The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
          items:
            $ref: "#/components/schemas/Material"
          type: array
        metadata:
          $ref: "#/components/schemas/SlsaMetadata"
          description: metadata is the metadata of the provenance
        recipe:
          $ref: "#/components/schemas/SlsaRecipe"
          description: Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible).
      type: object
    SlsaProvenanceV1:
      description: Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.
      properties:
        buildDefinition:
          $ref: "#/components/schemas/BuildDefinition"
        runDetails:
          $ref: "#/components/schemas/RunDetails"
      type: object
    SlsaProvenanceZeroTwo:
      description: SlsaProvenanceZeroTwo is the slsa provenance as defined by the slsa spec. See full explanation of fields at slsa.dev/provenance/v0.2.
      properties:
        buildConfig:
          additionalProperties:
            description: Properties of the object.
          description: Lists the steps in the build.
          type: object
        buildType:
          description: URI indicating what type of build was performed.
          type: string
        builder:
          $ref: "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder"
          description: Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
        invocation:
          $ref: "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation"
          description: Identifies the event that kicked off the build.
        materials:
          description: The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.
          items:
            $ref: "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterial"
          type: array
        metadata:
          $ref: "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata"
          description: Other properties of the build.
      type: object
    SlsaRecipe:
      description: Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
      properties:
        arguments:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.
          type: object
        definedInMaterial:
          description: Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
          format: int64
          type: string
        entryPoint:
          description: String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
          type: string
        environment:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.
          type: object
        type:
          description: URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
          type: string
      type: object
    Source:
      description: Source describes the location of the source used for the build.
      properties:
        additionalContexts:
          description: If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
          items:
            $ref: "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1SourceContext"
          type: array
        artifactStorageSource:
          $ref: "#/components/schemas/StorageSource"
          description: If provided, the input binary artifacts for the build came from this location.
        context:
          $ref: "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1SourceContext"
          description: If provided, the source code used for the build came from this location.
        fileHashes:
          additionalProperties:
            $ref: "#/components/schemas/FileHashes"
          description: Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
          type: object
        repoSource:
          $ref: "#/components/schemas/RepoSource"
          deprecated: true
          description: If provided, get source from this location in a Cloud Repo.
        storageSource:
          $ref: "#/components/schemas/StorageSource"
          deprecated: true
          description: If provided, get the source from this location in Google Cloud Storage.
      type: object
    Status:
      description: "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          format: int32
          type: integer
        details:
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
        message:
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
          type: string
      type: object
    StorageSource:
      description: StorageSource describes the location of the source in an archive file in Google Cloud Storage.
      properties:
        bucket:
          description: Google Cloud Storage bucket containing source (see [Bucket Name Requirements] (https://cloud.google.com/storage/docs/bucket-naming#requirements)).
          type: string
        generation:
          description: Google Cloud Storage generation for the object.
          format: int64
          type: string
        object:
          description: Google Cloud Storage object containing source.
          type: string
      type: object
    Subject:
      description: Subject refers to the subject of the intoto statement
      properties:
        digest:
          additionalProperties:
            type: string
          description: '"": "" Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet'
          type: object
        name:
          description: name is the name of the Subject used here
          type: string
      type: object
    TestIamPermissionsRequest:
      description: Request message for `TestIamPermissions` method.
      properties:
        permissions:
          description: The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
          items:
            type: string
          type: array
      type: object
    TestIamPermissionsResponse:
      description: Response message for `TestIamPermissions` method.
      properties:
        permissions:
          description: A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
          items:
            type: string
          type: array
      type: object
    TimeSpan:
      description: "Start and end times for a build execution phase. Next ID: 3"
      properties:
        endTime:
          description: End of time span.
          format: google-datetime
          type: string
        startTime:
          description: Start of time span.
          format: google-datetime
          type: string
      type: object
    URI:
      description: An URI message.
      properties:
        label:
          description: A label for the URI.
          type: string
        uri:
          description: The unique resource identifier.
          type: string
      type: object
    UpdateOperationRequest:
      description: Request for updating an existing operation
      properties:
        operation:
          $ref: "#/components/schemas/Operation"
          description: The operation to create.
        updateMask:
          description: The fields to update.
          format: google-fieldmask
          type: string
      type: object
    UpgradeDistribution:
      description: The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.
      properties:
        classification:
          description: The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed.
          type: string
        cpeUri:
          description: Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.
          type: string
        cve:
          description: The cve that would be resolved by this upgrade.
          items:
            type: string
          type: array
        severity:
          description: The severity as specified by the upstream operating system.
          type: string
      type: object
    UpgradeNote:
      description: An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be a Upgrade Note.
      properties:
        distributions:
          description: Metadata about the upgrade for each specific operating system.
          items:
            $ref: "#/components/schemas/UpgradeDistribution"
          type: array
        package:
          description: Required - The package this Upgrade is for.
          type: string
        version:
          $ref: "#/components/schemas/Version"
          description: Required - The version of the package in machine + human readable form.
      type: object
    UpgradeOccurrence:
      description: An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability).
      properties:
        distribution:
          $ref: "#/components/schemas/UpgradeDistribution"
          description: Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
        package:
          description: Required - The package this Upgrade is for.
          type: string
        parsedVersion:
          $ref: "#/components/schemas/Version"
          description: Required - The version of the package in a machine + human readable form.
      type: object
    Version:
      description: "Version contains structured information about the version of the package. For a discussion of this in Debian/Ubuntu: http://serverfault.com/questions/604541/debian-packages-version-convention For a discussion of this in Redhat/Fedora/Centos: http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/"
      properties:
        epoch:
          description: Used to correct mistakes in the version numbering scheme.
          format: int32
          type: integer
        inclusive:
          description: Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it's not
          type: boolean
        kind:
          description: Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.
          enum:
            - NORMAL
            - MINIMUM
            - MAXIMUM
          type: string
        name:
          description: The main part of the version name.
          type: string
        revision:
          description: The iteration of the package build from the above version.
          type: string
      type: object
    VexAssessment:
      description: VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
      properties:
        cve:
          description: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability.
          type: string
        impacts:
          description: Contains information about the impact of this vulnerability, this will change with time.
          items:
            type: string
          type: array
        justification:
          $ref: "#/components/schemas/Justification"
          description: Justification provides the justification when the state of the assessment if NOT_AFFECTED.
        noteName:
          description: "The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`."
          type: string
        relatedUris:
          description: Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
          items:
            $ref: "#/components/schemas/URI"
          type: array
        remediations:
          description: Specifies details on how to handle (and presumably, fix) a vulnerability.
          items:
            $ref: "#/components/schemas/Remediation"
          type: array
        state:
          description: Provides the state of this Vulnerability assessment.
          enum:
            - STATE_UNSPECIFIED
            - AFFECTED
            - NOT_AFFECTED
            - FIXED
            - UNDER_INVESTIGATION
          type: string
        vulnerabilityId:
          description: The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
          type: string
      type: object
    Volume:
      description: "Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution. Next ID: 3"
      properties:
        name:
          description: Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
          type: string
        path:
          description: Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
          type: string
      type: object
    VulnerabilityAssessmentNote:
      description: A single VulnerabilityAssessmentNote represents one particular product's vulnerability assessment for one CVE. Multiple VulnerabilityAssessmentNotes together form a Vex statement. Please go/sds-vex-example for a sample Vex statement in the CSAF format.
      properties:
        assessment:
          $ref: "#/components/schemas/Assessment"
          description: Represents a vulnerability assessment for the product.
        languageCode:
          description: Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.
          type: string
        longDescription:
          description: A detailed description of this Vex.
          type: string
        product:
          $ref: "#/components/schemas/Product"
          description: The product affected by this vex.
        publisher:
          $ref: "#/components/schemas/Publisher"
          description: Publisher details of this Note.
        shortDescription:
          description: A one sentence description of this Vex.
          type: string
        title:
          description: The title of the note. E.g. `Vex-Debian-11.4`
          type: string
      type: object
    VulnerabilityDetails:
      description: Used by Occurrence to point to where the vulnerability exists and how to fix it.
      properties:
        cvssScore:
          description: Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.
          format: float
          type: number
        cvssV2:
          $ref: "#/components/schemas/CVSS"
          description: The CVSS v2 score of this vulnerability.
        cvssV3:
          $ref: "#/components/schemas/CVSS"
          description: The CVSS v3 score of this vulnerability.
        cvssVersion:
          description: Output only. CVSS version used to populate cvss_score and severity.
          enum:
            - CVSS_VERSION_UNSPECIFIED
            - CVSS_VERSION_2
            - CVSS_VERSION_3
          readOnly: true
          type: string
        effectiveSeverity:
          description: The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          type: string
        extraDetails:
          description: Occurrence-specific extra details about the vulnerability.
          type: string
        packageIssue:
          description: The set of affected locations and their fixes (if available) within the associated resource.
          items:
            $ref: "#/components/schemas/PackageIssue"
          type: array
        severity:
          description: Output only. The note provider assigned Severity of the vulnerability.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          type: string
        type:
          description: The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types.
          type: string
        vexAssessment:
          $ref: "#/components/schemas/VexAssessment"
          description: VexAssessment provides all publisher provided Vex information that is related to this vulnerability for this resource.
      type: object
    VulnerabilityLocation:
      description: The location of the vulnerability
      properties:
        cpeUri:
          description: The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.
          type: string
        fileLocation:
          description: The file location at which this package was found.
          items:
            $ref: "#/components/schemas/FileLocation"
          type: array
        package:
          description: The package being described.
          type: string
        version:
          $ref: "#/components/schemas/Version"
          description: The version of the package being described. This field can be used as a filter in list requests.
      type: object
    VulnerabilityType:
      description: VulnerabilityType provides metadata about a security vulnerability.
      properties:
        cvssScore:
          description: The CVSS score for this Vulnerability.
          format: float
          type: number
        cvssV2:
          $ref: "#/components/schemas/CVSS"
          description: The full description of the CVSS for version 2.
        cvssVersion:
          description: CVSS version used to populate cvss_score and severity.
          enum:
            - CVSS_VERSION_UNSPECIFIED
            - CVSS_VERSION_2
            - CVSS_VERSION_3
          type: string
        cwe:
          description: "A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html"
          items:
            type: string
          type: array
        details:
          description: All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
          items:
            $ref: "#/components/schemas/Detail"
          type: array
        severity:
          description: Note provider assigned impact of the vulnerability
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          type: string
      type: object
  securitySchemes:
    Oauth2:
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/cloud-platform: See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.
      type: oauth2
    Oauth2c:
      description: Oauth 2.0 authorizationCode authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/cloud-platform: See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.
          tokenUrl: https://accounts.google.com/o/oauth2/token
      type: oauth2

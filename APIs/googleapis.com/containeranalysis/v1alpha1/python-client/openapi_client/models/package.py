# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.digest import Digest
from openapi_client.models.distribution import Distribution
from openapi_client.models.license import License
from openapi_client.models.version import Version
from typing import Optional, Set
from typing_extensions import Self

class Package(BaseModel):
    """
    This represents a particular package that is distributed over various channels. e.g. glibc (aka libc6) is distributed by many, at various versions.
    """ # noqa: E501
    architecture: Optional[StrictStr] = Field(default=None, description="The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.")
    cpe_uri: Optional[StrictStr] = Field(default=None, description="The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.", alias="cpeUri")
    description: Optional[StrictStr] = Field(default=None, description="The description of this package.")
    digest: Optional[List[Digest]] = Field(default=None, description="Hash value, typically a file digest, that allows unique identification a specific package.")
    distribution: Optional[List[Distribution]] = Field(default=None, description="The various channels by which a package is distributed.")
    license: Optional[License] = None
    maintainer: Optional[StrictStr] = Field(default=None, description="A freeform text denoting the maintainer of this package.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the package.")
    package_type: Optional[StrictStr] = Field(default=None, description="The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).", alias="packageType")
    url: Optional[StrictStr] = Field(default=None, description="The homepage for this package.")
    version: Optional[Version] = None
    __properties: ClassVar[List[str]] = ["architecture", "cpeUri", "description", "digest", "distribution", "license", "maintainer", "name", "packageType", "url", "version"]

    @field_validator('architecture')
    def architecture_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ARCHITECTURE_UNSPECIFIED', 'X86', 'X64']):
            raise ValueError("must be one of enum values ('ARCHITECTURE_UNSPECIFIED', 'X86', 'X64')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Package from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in digest (list)
        _items = []
        if self.digest:
            for _item_digest in self.digest:
                if _item_digest:
                    _items.append(_item_digest.to_dict())
            _dict['digest'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in distribution (list)
        _items = []
        if self.distribution:
            for _item_distribution in self.distribution:
                if _item_distribution:
                    _items.append(_item_distribution.to_dict())
            _dict['distribution'] = _items
        # override the default output from pydantic by calling `to_dict()` of license
        if self.license:
            _dict['license'] = self.license.to_dict()
        # override the default output from pydantic by calling `to_dict()` of version
        if self.version:
            _dict['version'] = self.version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Package from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "architecture": obj.get("architecture"),
            "cpeUri": obj.get("cpeUri"),
            "description": obj.get("description"),
            "digest": [Digest.from_dict(_item) for _item in obj["digest"]] if obj.get("digest") is not None else None,
            "distribution": [Distribution.from_dict(_item) for _item in obj["distribution"]] if obj.get("distribution") is not None else None,
            "license": License.from_dict(obj["license"]) if obj.get("license") is not None else None,
            "maintainer": obj.get("maintainer"),
            "name": obj.get("name"),
            "packageType": obj.get("packageType"),
            "url": obj.get("url"),
            "version": Version.from_dict(obj["version"]) if obj.get("version") is not None else None
        })
        return _obj



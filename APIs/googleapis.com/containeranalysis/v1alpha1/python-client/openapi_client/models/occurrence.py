# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.attestation import Attestation
from openapi_client.models.build_details import BuildDetails
from openapi_client.models.compliance_occurrence import ComplianceOccurrence
from openapi_client.models.deployment import Deployment
from openapi_client.models.derived import Derived
from openapi_client.models.discovered import Discovered
from openapi_client.models.document_occurrence import DocumentOccurrence
from openapi_client.models.dsse_attestation_occurrence import DSSEAttestationOccurrence
from openapi_client.models.envelope import Envelope
from openapi_client.models.file_occurrence import FileOccurrence
from openapi_client.models.installation import Installation
from openapi_client.models.package_info_occurrence import PackageInfoOccurrence
from openapi_client.models.relationship_occurrence import RelationshipOccurrence
from openapi_client.models.resource import Resource
from openapi_client.models.sbom_reference_occurrence import SBOMReferenceOccurrence
from openapi_client.models.upgrade_occurrence import UpgradeOccurrence
from openapi_client.models.vulnerability_details import VulnerabilityDetails
from typing import Optional, Set
from typing_extensions import Self

class Occurrence(BaseModel):
    """
    `Occurrence` includes information about analysis occurrences for an image.
    """ # noqa: E501
    attestation: Optional[Attestation] = None
    build_details: Optional[BuildDetails] = Field(default=None, alias="buildDetails")
    compliance: Optional[ComplianceOccurrence] = None
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time this `Occurrence` was created.", alias="createTime")
    deployment: Optional[Deployment] = None
    derived_image: Optional[Derived] = Field(default=None, alias="derivedImage")
    discovered: Optional[Discovered] = None
    dsse_attestation: Optional[DSSEAttestationOccurrence] = Field(default=None, alias="dsseAttestation")
    envelope: Optional[Envelope] = None
    installation: Optional[Installation] = None
    kind: Optional[StrictStr] = Field(default=None, description="Output only. This explicitly denotes which of the `Occurrence` details are specified. This field can be used as a filter in list requests.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The name of the `Occurrence` in the form \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\"")
    note_name: Optional[StrictStr] = Field(default=None, description="An analysis note associated with this image, in the form \"providers/{provider_id}/notes/{NOTE_ID}\" This field can be used as a filter in list requests.", alias="noteName")
    remediation: Optional[StrictStr] = Field(default=None, description="A description of actions that can be taken to remedy the `Note`")
    resource: Optional[Resource] = None
    resource_url: Optional[StrictStr] = Field(default=None, description="The unique URL of the image or the container for which the `Occurrence` applies. For example, https://gcr.io/project/image@sha256:foo This field can be used as a filter in list requests.", alias="resourceUrl")
    sbom: Optional[DocumentOccurrence] = None
    sbom_reference: Optional[SBOMReferenceOccurrence] = Field(default=None, alias="sbomReference")
    spdx_file: Optional[FileOccurrence] = Field(default=None, alias="spdxFile")
    spdx_package: Optional[PackageInfoOccurrence] = Field(default=None, alias="spdxPackage")
    spdx_relationship: Optional[RelationshipOccurrence] = Field(default=None, alias="spdxRelationship")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time this `Occurrence` was last updated.", alias="updateTime")
    upgrade: Optional[UpgradeOccurrence] = None
    vulnerability_details: Optional[VulnerabilityDetails] = Field(default=None, alias="vulnerabilityDetails")
    __properties: ClassVar[List[str]] = ["attestation", "buildDetails", "compliance", "createTime", "deployment", "derivedImage", "discovered", "dsseAttestation", "envelope", "installation", "kind", "name", "noteName", "remediation", "resource", "resourceUrl", "sbom", "sbomReference", "spdxFile", "spdxPackage", "spdxRelationship", "updateTime", "upgrade", "vulnerabilityDetails"]

    @field_validator('kind')
    def kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['KIND_UNSPECIFIED', 'PACKAGE_VULNERABILITY', 'BUILD_DETAILS', 'IMAGE_BASIS', 'PACKAGE_MANAGER', 'DEPLOYABLE', 'DISCOVERY', 'ATTESTATION_AUTHORITY', 'UPGRADE', 'COMPLIANCE', 'SBOM', 'SPDX_PACKAGE', 'SPDX_FILE', 'SPDX_RELATIONSHIP', 'DSSE_ATTESTATION', 'VULNERABILITY_ASSESSMENT', 'SBOM_REFERENCE']):
            raise ValueError("must be one of enum values ('KIND_UNSPECIFIED', 'PACKAGE_VULNERABILITY', 'BUILD_DETAILS', 'IMAGE_BASIS', 'PACKAGE_MANAGER', 'DEPLOYABLE', 'DISCOVERY', 'ATTESTATION_AUTHORITY', 'UPGRADE', 'COMPLIANCE', 'SBOM', 'SPDX_PACKAGE', 'SPDX_FILE', 'SPDX_RELATIONSHIP', 'DSSE_ATTESTATION', 'VULNERABILITY_ASSESSMENT', 'SBOM_REFERENCE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Occurrence from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attestation
        if self.attestation:
            _dict['attestation'] = self.attestation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of build_details
        if self.build_details:
            _dict['buildDetails'] = self.build_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compliance
        if self.compliance:
            _dict['compliance'] = self.compliance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deployment
        if self.deployment:
            _dict['deployment'] = self.deployment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of derived_image
        if self.derived_image:
            _dict['derivedImage'] = self.derived_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discovered
        if self.discovered:
            _dict['discovered'] = self.discovered.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dsse_attestation
        if self.dsse_attestation:
            _dict['dsseAttestation'] = self.dsse_attestation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of envelope
        if self.envelope:
            _dict['envelope'] = self.envelope.to_dict()
        # override the default output from pydantic by calling `to_dict()` of installation
        if self.installation:
            _dict['installation'] = self.installation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource
        if self.resource:
            _dict['resource'] = self.resource.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sbom
        if self.sbom:
            _dict['sbom'] = self.sbom.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sbom_reference
        if self.sbom_reference:
            _dict['sbomReference'] = self.sbom_reference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spdx_file
        if self.spdx_file:
            _dict['spdxFile'] = self.spdx_file.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spdx_package
        if self.spdx_package:
            _dict['spdxPackage'] = self.spdx_package.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spdx_relationship
        if self.spdx_relationship:
            _dict['spdxRelationship'] = self.spdx_relationship.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upgrade
        if self.upgrade:
            _dict['upgrade'] = self.upgrade.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vulnerability_details
        if self.vulnerability_details:
            _dict['vulnerabilityDetails'] = self.vulnerability_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Occurrence from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attestation": Attestation.from_dict(obj["attestation"]) if obj.get("attestation") is not None else None,
            "buildDetails": BuildDetails.from_dict(obj["buildDetails"]) if obj.get("buildDetails") is not None else None,
            "compliance": ComplianceOccurrence.from_dict(obj["compliance"]) if obj.get("compliance") is not None else None,
            "createTime": obj.get("createTime"),
            "deployment": Deployment.from_dict(obj["deployment"]) if obj.get("deployment") is not None else None,
            "derivedImage": Derived.from_dict(obj["derivedImage"]) if obj.get("derivedImage") is not None else None,
            "discovered": Discovered.from_dict(obj["discovered"]) if obj.get("discovered") is not None else None,
            "dsseAttestation": DSSEAttestationOccurrence.from_dict(obj["dsseAttestation"]) if obj.get("dsseAttestation") is not None else None,
            "envelope": Envelope.from_dict(obj["envelope"]) if obj.get("envelope") is not None else None,
            "installation": Installation.from_dict(obj["installation"]) if obj.get("installation") is not None else None,
            "kind": obj.get("kind"),
            "name": obj.get("name"),
            "noteName": obj.get("noteName"),
            "remediation": obj.get("remediation"),
            "resource": Resource.from_dict(obj["resource"]) if obj.get("resource") is not None else None,
            "resourceUrl": obj.get("resourceUrl"),
            "sbom": DocumentOccurrence.from_dict(obj["sbom"]) if obj.get("sbom") is not None else None,
            "sbomReference": SBOMReferenceOccurrence.from_dict(obj["sbomReference"]) if obj.get("sbomReference") is not None else None,
            "spdxFile": FileOccurrence.from_dict(obj["spdxFile"]) if obj.get("spdxFile") is not None else None,
            "spdxPackage": PackageInfoOccurrence.from_dict(obj["spdxPackage"]) if obj.get("spdxPackage") is not None else None,
            "spdxRelationship": RelationshipOccurrence.from_dict(obj["spdxRelationship"]) if obj.get("spdxRelationship") is not None else None,
            "updateTime": obj.get("updateTime"),
            "upgrade": UpgradeOccurrence.from_dict(obj["upgrade"]) if obj.get("upgrade") is not None else None,
            "vulnerabilityDetails": VulnerabilityDetails.from_dict(obj["vulnerabilityDetails"]) if obj.get("vulnerabilityDetails") is not None else None
        })
        return _obj



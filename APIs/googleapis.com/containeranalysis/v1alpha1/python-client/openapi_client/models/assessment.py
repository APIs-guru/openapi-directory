# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.justification import Justification
from openapi_client.models.remediation import Remediation
from typing import Optional, Set
from typing_extensions import Self

class Assessment(BaseModel):
    """
    Assessment provides all information that is related to a single vulnerability for this product.
    """ # noqa: E501
    cve: Optional[StrictStr] = Field(default=None, description="Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability.")
    impacts: Optional[List[StrictStr]] = Field(default=None, description="Contains information about the impact of this vulnerability, this will change with time.")
    justification: Optional[Justification] = None
    long_description: Optional[StrictStr] = Field(default=None, description="A detailed description of this Vex.", alias="longDescription")
    related_uris: Optional[List[str]] = Field(default=None, description="Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.", alias="relatedUris")
    remediations: Optional[List[Remediation]] = Field(default=None, description="Specifies details on how to handle (and presumably, fix) a vulnerability.")
    short_description: Optional[StrictStr] = Field(default=None, description="A one sentence description of this Vex.", alias="shortDescription")
    state: Optional[StrictStr] = Field(default=None, description="Provides the state of this Vulnerability assessment.")
    vulnerability_id: Optional[StrictStr] = Field(default=None, description="The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.", alias="vulnerabilityId")
    __properties: ClassVar[List[str]] = ["cve", "impacts", "justification", "longDescription", "relatedUris", "remediations", "shortDescription", "state", "vulnerabilityId"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'AFFECTED', 'NOT_AFFECTED', 'FIXED', 'UNDER_INVESTIGATION']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'AFFECTED', 'NOT_AFFECTED', 'FIXED', 'UNDER_INVESTIGATION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Assessment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of justification
        if self.justification:
            _dict['justification'] = self.justification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in remediations (list)
        _items = []
        if self.remediations:
            for _item_remediations in self.remediations:
                if _item_remediations:
                    _items.append(_item_remediations.to_dict())
            _dict['remediations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Assessment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cve": obj.get("cve"),
            "impacts": obj.get("impacts"),
            "justification": Justification.from_dict(obj["justification"]) if obj.get("justification") is not None else None,
            "longDescription": obj.get("longDescription"),
            "relatedUris": obj.get("relatedUris"),
            "remediations": [Remediation.from_dict(_item) for _item in obj["remediations"]] if obj.get("remediations") is not None else None,
            "shortDescription": obj.get("shortDescription"),
            "state": obj.get("state"),
            "vulnerabilityId": obj.get("vulnerabilityId")
        })
        return _obj



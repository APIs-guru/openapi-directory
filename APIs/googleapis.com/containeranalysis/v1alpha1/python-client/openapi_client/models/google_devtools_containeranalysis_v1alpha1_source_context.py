# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_devtools_containeranalysis_v1alpha1_cloud_repo_source_context import GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext
from openapi_client.models.google_devtools_containeranalysis_v1alpha1_gerrit_source_context import GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext
from openapi_client.models.google_devtools_containeranalysis_v1alpha1_git_source_context import GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext
from typing import Optional, Set
from typing_extensions import Self

class GoogleDevtoolsContaineranalysisV1alpha1SourceContext(BaseModel):
    """
    A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
    """ # noqa: E501
    cloud_repo: Optional[GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext] = Field(default=None, alias="cloudRepo")
    gerrit: Optional[GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext] = None
    git: Optional[GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext] = None
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels with user defined metadata.")
    __properties: ClassVar[List[str]] = ["cloudRepo", "gerrit", "git", "labels"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleDevtoolsContaineranalysisV1alpha1SourceContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cloud_repo
        if self.cloud_repo:
            _dict['cloudRepo'] = self.cloud_repo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gerrit
        if self.gerrit:
            _dict['gerrit'] = self.gerrit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of git
        if self.git:
            _dict['git'] = self.git.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleDevtoolsContaineranalysisV1alpha1SourceContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloudRepo": GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext.from_dict(obj["cloudRepo"]) if obj.get("cloudRepo") is not None else None,
            "gerrit": GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext.from_dict(obj["gerrit"]) if obj.get("gerrit") is not None else None,
            "git": GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext.from_dict(obj["git"]) if obj.get("git") is not None else None,
            "labels": obj.get("labels")
        })
        return _obj



# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.external_ref import ExternalRef
from openapi_client.models.license import License
from typing import Optional, Set
from typing_extensions import Self

class PackageInfoNote(BaseModel):
    """
    PackageInfoNote represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
    """ # noqa: E501
    analyzed: Optional[StrictBool] = Field(default=None, description="Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document")
    attribution: Optional[StrictStr] = Field(default=None, description="A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts")
    checksum: Optional[StrictStr] = Field(default=None, description="Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file")
    copyright: Optional[StrictStr] = Field(default=None, description="Identify the copyright holders of the package, as well as any dates present")
    detailed_description: Optional[StrictStr] = Field(default=None, description="A more detailed description of the package", alias="detailedDescription")
    download_location: Optional[StrictStr] = Field(default=None, description="This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created", alias="downloadLocation")
    external_refs: Optional[List[ExternalRef]] = Field(default=None, description="ExternalRef", alias="externalRefs")
    files_license_info: Optional[List[StrictStr]] = Field(default=None, description="Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field â€“ it is simply a listing of all licenses found", alias="filesLicenseInfo")
    home_page: Optional[StrictStr] = Field(default=None, description="Provide a place for the SPDX file creator to record a web site that serves as the package's home page", alias="homePage")
    license_declared: Optional[License] = Field(default=None, alias="licenseDeclared")
    originator: Optional[StrictStr] = Field(default=None, description="If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came")
    package_type: Optional[StrictStr] = Field(default=None, description="The type of package: OS, MAVEN, GO, GO_STDLIB, etc.", alias="packageType")
    summary_description: Optional[StrictStr] = Field(default=None, description="A short description of the package", alias="summaryDescription")
    supplier: Optional[StrictStr] = Field(default=None, description="Identify the actual distribution source for the package/directory identified in the SPDX file")
    title: Optional[StrictStr] = Field(default=None, description="Identify the full name of the package as given by the Package Originator")
    verification_code: Optional[StrictStr] = Field(default=None, description="This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file", alias="verificationCode")
    version: Optional[StrictStr] = Field(default=None, description="Identify the version of the package")
    __properties: ClassVar[List[str]] = ["analyzed", "attribution", "checksum", "copyright", "detailedDescription", "downloadLocation", "externalRefs", "filesLicenseInfo", "homePage", "licenseDeclared", "originator", "packageType", "summaryDescription", "supplier", "title", "verificationCode", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PackageInfoNote from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in external_refs (list)
        _items = []
        if self.external_refs:
            for _item_external_refs in self.external_refs:
                if _item_external_refs:
                    _items.append(_item_external_refs.to_dict())
            _dict['externalRefs'] = _items
        # override the default output from pydantic by calling `to_dict()` of license_declared
        if self.license_declared:
            _dict['licenseDeclared'] = self.license_declared.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PackageInfoNote from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "analyzed": obj.get("analyzed"),
            "attribution": obj.get("attribution"),
            "checksum": obj.get("checksum"),
            "copyright": obj.get("copyright"),
            "detailedDescription": obj.get("detailedDescription"),
            "downloadLocation": obj.get("downloadLocation"),
            "externalRefs": [ExternalRef.from_dict(_item) for _item in obj["externalRefs"]] if obj.get("externalRefs") is not None else None,
            "filesLicenseInfo": obj.get("filesLicenseInfo"),
            "homePage": obj.get("homePage"),
            "licenseDeclared": License.from_dict(obj["licenseDeclared"]) if obj.get("licenseDeclared") is not None else None,
            "originator": obj.get("originator"),
            "packageType": obj.get("packageType"),
            "summaryDescription": obj.get("summaryDescription"),
            "supplier": obj.get("supplier"),
            "title": obj.get("title"),
            "verificationCode": obj.get("verificationCode"),
            "version": obj.get("version")
        })
        return _obj



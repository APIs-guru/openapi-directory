# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.cis_benchmark import CisBenchmark
from openapi_client.models.compliance_version import ComplianceVersion
from typing import Optional, Set
from typing_extensions import Self

class ComplianceNote(BaseModel):
    """
    ComplianceNote encapsulates all information about a specific compliance check.
    """ # noqa: E501
    cis_benchmark: Optional[CisBenchmark] = Field(default=None, alias="cisBenchmark")
    description: Optional[StrictStr] = Field(default=None, description="A description about this compliance check.")
    rationale: Optional[StrictStr] = Field(default=None, description="A rationale for the existence of this compliance check.")
    remediation: Optional[StrictStr] = Field(default=None, description="A description of remediation steps if the compliance check fails.")
    scan_instructions: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Serialized scan instructions with a predefined format.", alias="scanInstructions")
    title: Optional[StrictStr] = Field(default=None, description="The title that identifies this compliance check.")
    version: Optional[List[ComplianceVersion]] = Field(default=None, description="The OS and config versions the benchmark applies to.")
    __properties: ClassVar[List[str]] = ["cisBenchmark", "description", "rationale", "remediation", "scanInstructions", "title", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ComplianceNote from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cis_benchmark
        if self.cis_benchmark:
            _dict['cisBenchmark'] = self.cis_benchmark.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in version (list)
        _items = []
        if self.version:
            for _item_version in self.version:
                if _item_version:
                    _items.append(_item_version.to_dict())
            _dict['version'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ComplianceNote from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cisBenchmark": CisBenchmark.from_dict(obj["cisBenchmark"]) if obj.get("cisBenchmark") is not None else None,
            "description": obj.get("description"),
            "rationale": obj.get("rationale"),
            "remediation": obj.get("remediation"),
            "scanInstructions": obj.get("scanInstructions"),
            "title": obj.get("title"),
            "version": [ComplianceVersion.from_dict(_item) for _item in obj["version"]] if obj.get("version") is not None else None
        })
        return _obj



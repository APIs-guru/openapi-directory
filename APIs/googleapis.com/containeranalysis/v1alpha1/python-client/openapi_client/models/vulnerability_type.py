# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.cvss import CVSS
from openapi_client.models.detail import Detail
from typing import Optional, Set
from typing_extensions import Self

class VulnerabilityType(BaseModel):
    """
    VulnerabilityType provides metadata about a security vulnerability.
    """ # noqa: E501
    cvss_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The CVSS score for this Vulnerability.", alias="cvssScore")
    cvss_v2: Optional[CVSS] = Field(default=None, alias="cvssV2")
    cvss_version: Optional[StrictStr] = Field(default=None, description="CVSS version used to populate cvss_score and severity.", alias="cvssVersion")
    cwe: Optional[List[StrictStr]] = Field(default=None, description="A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html")
    details: Optional[List[Detail]] = Field(default=None, description="All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.")
    severity: Optional[StrictStr] = Field(default=None, description="Note provider assigned impact of the vulnerability")
    __properties: ClassVar[List[str]] = ["cvssScore", "cvssV2", "cvssVersion", "cwe", "details", "severity"]

    @field_validator('cvss_version')
    def cvss_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CVSS_VERSION_UNSPECIFIED', 'CVSS_VERSION_2', 'CVSS_VERSION_3']):
            raise ValueError("must be one of enum values ('CVSS_VERSION_UNSPECIFIED', 'CVSS_VERSION_2', 'CVSS_VERSION_3')")
        return value

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SEVERITY_UNSPECIFIED', 'MINIMAL', 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL']):
            raise ValueError("must be one of enum values ('SEVERITY_UNSPECIFIED', 'MINIMAL', 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VulnerabilityType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cvss_v2
        if self.cvss_v2:
            _dict['cvssV2'] = self.cvss_v2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in details (list)
        _items = []
        if self.details:
            for _item_details in self.details:
                if _item_details:
                    _items.append(_item_details.to_dict())
            _dict['details'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VulnerabilityType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cvssScore": obj.get("cvssScore"),
            "cvssV2": CVSS.from_dict(obj["cvssV2"]) if obj.get("cvssV2") is not None else None,
            "cvssVersion": obj.get("cvssVersion"),
            "cwe": obj.get("cwe"),
            "details": [Detail.from_dict(_item) for _item in obj["details"]] if obj.get("details") is not None else None,
            "severity": obj.get("severity")
        })
        return _obj



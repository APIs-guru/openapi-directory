# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.attestation_authority import AttestationAuthority
from openapi_client.models.basis import Basis
from openapi_client.models.build_type import BuildType
from openapi_client.models.compliance_note import ComplianceNote
from openapi_client.models.deployable import Deployable
from openapi_client.models.discovery import Discovery
from openapi_client.models.document_note import DocumentNote
from openapi_client.models.dsse_attestation_note import DSSEAttestationNote
from openapi_client.models.file_note import FileNote
from openapi_client.models.package import Package
from openapi_client.models.package_info_note import PackageInfoNote
from openapi_client.models.related_url import RelatedUrl
from openapi_client.models.relationship_note import RelationshipNote
from openapi_client.models.sbom_reference_note import SBOMReferenceNote
from openapi_client.models.upgrade_note import UpgradeNote
from openapi_client.models.vulnerability_assessment_note import VulnerabilityAssessmentNote
from openapi_client.models.vulnerability_type import VulnerabilityType
from typing import Optional, Set
from typing_extensions import Self

class Note(BaseModel):
    """
    Provides a detailed description of a `Note`.
    """ # noqa: E501
    attestation_authority: Optional[AttestationAuthority] = Field(default=None, alias="attestationAuthority")
    base_image: Optional[Basis] = Field(default=None, alias="baseImage")
    build_type: Optional[BuildType] = Field(default=None, alias="buildType")
    compliance: Optional[ComplianceNote] = None
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time this note was created. This field can be used as a filter in list requests.", alias="createTime")
    deployable: Optional[Deployable] = None
    discovery: Optional[Discovery] = None
    dsse_attestation: Optional[DSSEAttestationNote] = Field(default=None, alias="dsseAttestation")
    expiration_time: Optional[StrictStr] = Field(default=None, description="Time of expiration for this note, null if note does not expire.", alias="expirationTime")
    kind: Optional[StrictStr] = Field(default=None, description="Output only. This explicitly denotes which kind of note is specified. This field can be used as a filter in list requests.")
    long_description: Optional[StrictStr] = Field(default=None, description="A detailed description of this `Note`.", alias="longDescription")
    name: Optional[StrictStr] = Field(default=None, description="The name of the note in the form \"projects/{provider_project_id}/notes/{NOTE_ID}\"")
    package: Optional[Package] = None
    related_url: Optional[List[RelatedUrl]] = Field(default=None, description="URLs associated with this note", alias="relatedUrl")
    sbom: Optional[DocumentNote] = None
    sbom_reference: Optional[SBOMReferenceNote] = Field(default=None, alias="sbomReference")
    short_description: Optional[StrictStr] = Field(default=None, description="A one sentence description of this `Note`.", alias="shortDescription")
    spdx_file: Optional[FileNote] = Field(default=None, alias="spdxFile")
    spdx_package: Optional[PackageInfoNote] = Field(default=None, alias="spdxPackage")
    spdx_relationship: Optional[RelationshipNote] = Field(default=None, alias="spdxRelationship")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time this note was last updated. This field can be used as a filter in list requests.", alias="updateTime")
    upgrade: Optional[UpgradeNote] = None
    vulnerability_assessment: Optional[VulnerabilityAssessmentNote] = Field(default=None, alias="vulnerabilityAssessment")
    vulnerability_type: Optional[VulnerabilityType] = Field(default=None, alias="vulnerabilityType")
    __properties: ClassVar[List[str]] = ["attestationAuthority", "baseImage", "buildType", "compliance", "createTime", "deployable", "discovery", "dsseAttestation", "expirationTime", "kind", "longDescription", "name", "package", "relatedUrl", "sbom", "sbomReference", "shortDescription", "spdxFile", "spdxPackage", "spdxRelationship", "updateTime", "upgrade", "vulnerabilityAssessment", "vulnerabilityType"]

    @field_validator('kind')
    def kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['KIND_UNSPECIFIED', 'PACKAGE_VULNERABILITY', 'BUILD_DETAILS', 'IMAGE_BASIS', 'PACKAGE_MANAGER', 'DEPLOYABLE', 'DISCOVERY', 'ATTESTATION_AUTHORITY', 'UPGRADE', 'COMPLIANCE', 'SBOM', 'SPDX_PACKAGE', 'SPDX_FILE', 'SPDX_RELATIONSHIP', 'DSSE_ATTESTATION', 'VULNERABILITY_ASSESSMENT', 'SBOM_REFERENCE']):
            raise ValueError("must be one of enum values ('KIND_UNSPECIFIED', 'PACKAGE_VULNERABILITY', 'BUILD_DETAILS', 'IMAGE_BASIS', 'PACKAGE_MANAGER', 'DEPLOYABLE', 'DISCOVERY', 'ATTESTATION_AUTHORITY', 'UPGRADE', 'COMPLIANCE', 'SBOM', 'SPDX_PACKAGE', 'SPDX_FILE', 'SPDX_RELATIONSHIP', 'DSSE_ATTESTATION', 'VULNERABILITY_ASSESSMENT', 'SBOM_REFERENCE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Note from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attestation_authority
        if self.attestation_authority:
            _dict['attestationAuthority'] = self.attestation_authority.to_dict()
        # override the default output from pydantic by calling `to_dict()` of base_image
        if self.base_image:
            _dict['baseImage'] = self.base_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of build_type
        if self.build_type:
            _dict['buildType'] = self.build_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compliance
        if self.compliance:
            _dict['compliance'] = self.compliance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deployable
        if self.deployable:
            _dict['deployable'] = self.deployable.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discovery
        if self.discovery:
            _dict['discovery'] = self.discovery.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dsse_attestation
        if self.dsse_attestation:
            _dict['dsseAttestation'] = self.dsse_attestation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of package
        if self.package:
            _dict['package'] = self.package.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in related_url (list)
        _items = []
        if self.related_url:
            for _item_related_url in self.related_url:
                if _item_related_url:
                    _items.append(_item_related_url.to_dict())
            _dict['relatedUrl'] = _items
        # override the default output from pydantic by calling `to_dict()` of sbom
        if self.sbom:
            _dict['sbom'] = self.sbom.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sbom_reference
        if self.sbom_reference:
            _dict['sbomReference'] = self.sbom_reference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spdx_file
        if self.spdx_file:
            _dict['spdxFile'] = self.spdx_file.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spdx_package
        if self.spdx_package:
            _dict['spdxPackage'] = self.spdx_package.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spdx_relationship
        if self.spdx_relationship:
            _dict['spdxRelationship'] = self.spdx_relationship.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upgrade
        if self.upgrade:
            _dict['upgrade'] = self.upgrade.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vulnerability_assessment
        if self.vulnerability_assessment:
            _dict['vulnerabilityAssessment'] = self.vulnerability_assessment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vulnerability_type
        if self.vulnerability_type:
            _dict['vulnerabilityType'] = self.vulnerability_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Note from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attestationAuthority": AttestationAuthority.from_dict(obj["attestationAuthority"]) if obj.get("attestationAuthority") is not None else None,
            "baseImage": Basis.from_dict(obj["baseImage"]) if obj.get("baseImage") is not None else None,
            "buildType": BuildType.from_dict(obj["buildType"]) if obj.get("buildType") is not None else None,
            "compliance": ComplianceNote.from_dict(obj["compliance"]) if obj.get("compliance") is not None else None,
            "createTime": obj.get("createTime"),
            "deployable": Deployable.from_dict(obj["deployable"]) if obj.get("deployable") is not None else None,
            "discovery": Discovery.from_dict(obj["discovery"]) if obj.get("discovery") is not None else None,
            "dsseAttestation": DSSEAttestationNote.from_dict(obj["dsseAttestation"]) if obj.get("dsseAttestation") is not None else None,
            "expirationTime": obj.get("expirationTime"),
            "kind": obj.get("kind"),
            "longDescription": obj.get("longDescription"),
            "name": obj.get("name"),
            "package": Package.from_dict(obj["package"]) if obj.get("package") is not None else None,
            "relatedUrl": [RelatedUrl.from_dict(_item) for _item in obj["relatedUrl"]] if obj.get("relatedUrl") is not None else None,
            "sbom": DocumentNote.from_dict(obj["sbom"]) if obj.get("sbom") is not None else None,
            "sbomReference": SBOMReferenceNote.from_dict(obj["sbomReference"]) if obj.get("sbomReference") is not None else None,
            "shortDescription": obj.get("shortDescription"),
            "spdxFile": FileNote.from_dict(obj["spdxFile"]) if obj.get("spdxFile") is not None else None,
            "spdxPackage": PackageInfoNote.from_dict(obj["spdxPackage"]) if obj.get("spdxPackage") is not None else None,
            "spdxRelationship": RelationshipNote.from_dict(obj["spdxRelationship"]) if obj.get("spdxRelationship") is not None else None,
            "updateTime": obj.get("updateTime"),
            "upgrade": UpgradeNote.from_dict(obj["upgrade"]) if obj.get("upgrade") is not None else None,
            "vulnerabilityAssessment": VulnerabilityAssessmentNote.from_dict(obj["vulnerabilityAssessment"]) if obj.get("vulnerabilityAssessment") is not None else None,
            "vulnerabilityType": VulnerabilityType.from_dict(obj["vulnerabilityType"]) if obj.get("vulnerabilityType") is not None else None
        })
        return _obj



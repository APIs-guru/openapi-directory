# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.artifact import Artifact
from openapi_client.models.command import Command
from openapi_client.models.source import Source
from typing import Optional, Set
from typing_extensions import Self

class BuildProvenance(BaseModel):
    """
    Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
    """ # noqa: E501
    build_options: Optional[Dict[str, StrictStr]] = Field(default=None, description="Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.", alias="buildOptions")
    builder_version: Optional[StrictStr] = Field(default=None, description="Version string of the builder at the time this build was executed.", alias="builderVersion")
    built_artifacts: Optional[List[Artifact]] = Field(default=None, description="Output of the build.", alias="builtArtifacts")
    commands: Optional[List[Command]] = Field(default=None, description="Commands requested by the build.")
    create_time: Optional[StrictStr] = Field(default=None, description="Time at which the build was created.", alias="createTime")
    creator: Optional[StrictStr] = Field(default=None, description="E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.")
    finish_time: Optional[StrictStr] = Field(default=None, description="Time at which execution of the build was finished.", alias="finishTime")
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the build.")
    logs_bucket: Optional[StrictStr] = Field(default=None, description="Google Cloud Storage bucket where logs were written.", alias="logsBucket")
    project_id: Optional[StrictStr] = Field(default=None, description="ID of the project.", alias="projectId")
    source_provenance: Optional[Source] = Field(default=None, alias="sourceProvenance")
    start_time: Optional[StrictStr] = Field(default=None, description="Time at which execution of the build was started.", alias="startTime")
    trigger_id: Optional[StrictStr] = Field(default=None, description="Trigger identifier if the build was triggered automatically; empty if not.", alias="triggerId")
    __properties: ClassVar[List[str]] = ["buildOptions", "builderVersion", "builtArtifacts", "commands", "createTime", "creator", "finishTime", "id", "logsBucket", "projectId", "sourceProvenance", "startTime", "triggerId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildProvenance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in built_artifacts (list)
        _items = []
        if self.built_artifacts:
            for _item_built_artifacts in self.built_artifacts:
                if _item_built_artifacts:
                    _items.append(_item_built_artifacts.to_dict())
            _dict['builtArtifacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in commands (list)
        _items = []
        if self.commands:
            for _item_commands in self.commands:
                if _item_commands:
                    _items.append(_item_commands.to_dict())
            _dict['commands'] = _items
        # override the default output from pydantic by calling `to_dict()` of source_provenance
        if self.source_provenance:
            _dict['sourceProvenance'] = self.source_provenance.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildProvenance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buildOptions": obj.get("buildOptions"),
            "builderVersion": obj.get("builderVersion"),
            "builtArtifacts": [Artifact.from_dict(_item) for _item in obj["builtArtifacts"]] if obj.get("builtArtifacts") is not None else None,
            "commands": [Command.from_dict(_item) for _item in obj["commands"]] if obj.get("commands") is not None else None,
            "createTime": obj.get("createTime"),
            "creator": obj.get("creator"),
            "finishTime": obj.get("finishTime"),
            "id": obj.get("id"),
            "logsBucket": obj.get("logsBucket"),
            "projectId": obj.get("projectId"),
            "sourceProvenance": Source.from_dict(obj["sourceProvenance"]) if obj.get("sourceProvenance") is not None else None,
            "startTime": obj.get("startTime"),
            "triggerId": obj.get("triggerId")
        })
        return _obj



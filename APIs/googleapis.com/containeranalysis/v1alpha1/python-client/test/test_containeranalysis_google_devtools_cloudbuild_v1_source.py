# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.containeranalysis_google_devtools_cloudbuild_v1_source import ContaineranalysisGoogleDevtoolsCloudbuildV1Source

class TestContaineranalysisGoogleDevtoolsCloudbuildV1Source(unittest.TestCase):
    """ContaineranalysisGoogleDevtoolsCloudbuildV1Source unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ContaineranalysisGoogleDevtoolsCloudbuildV1Source:
        """Test ContaineranalysisGoogleDevtoolsCloudbuildV1Source
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ContaineranalysisGoogleDevtoolsCloudbuildV1Source`
        """
        model = ContaineranalysisGoogleDevtoolsCloudbuildV1Source()
        if include_optional:
            return ContaineranalysisGoogleDevtoolsCloudbuildV1Source(
                connected_repository = openapi_client.models.containeranalysis_google_devtools_cloudbuild_v1_connected_repository.ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository(
                    dir = '', 
                    repository = '', 
                    revision = '', ),
                git_source = openapi_client.models.containeranalysis_google_devtools_cloudbuild_v1_git_source.ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource(
                    dir = '', 
                    revision = '', 
                    url = '', ),
                repo_source = openapi_client.models.containeranalysis_google_devtools_cloudbuild_v1_repo_source.ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource(
                    branch_name = '', 
                    commit_sha = '', 
                    dir = '', 
                    invert_regex = True, 
                    project_id = '', 
                    repo_name = '', 
                    substitutions = {
                        'key' : ''
                        }, 
                    tag_name = '', ),
                storage_source = openapi_client.models.containeranalysis_google_devtools_cloudbuild_v1_storage_source.ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource(
                    bucket = '', 
                    generation = '', 
                    object = '', 
                    source_fetcher = 'SOURCE_FETCHER_UNSPECIFIED', ),
                storage_source_manifest = openapi_client.models.containeranalysis_google_devtools_cloudbuild_v1_storage_source_manifest.ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest(
                    bucket = '', 
                    generation = '', 
                    object = '', )
            )
        else:
            return ContaineranalysisGoogleDevtoolsCloudbuildV1Source(
        )
        """

    def testContaineranalysisGoogleDevtoolsCloudbuildV1Source(self):
        """Test ContaineranalysisGoogleDevtoolsCloudbuildV1Source"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

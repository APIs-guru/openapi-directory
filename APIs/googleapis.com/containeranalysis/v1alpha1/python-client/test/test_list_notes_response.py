# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_notes_response import ListNotesResponse

class TestListNotesResponse(unittest.TestCase):
    """ListNotesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListNotesResponse:
        """Test ListNotesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListNotesResponse`
        """
        model = ListNotesResponse()
        if include_optional:
            return ListNotesResponse(
                next_page_token = '',
                notes = [
                    openapi_client.models.note.Note(
                        attestation_authority = openapi_client.models.attestation_authority.AttestationAuthority(
                            hint = openapi_client.models.attestation_authority_hint.AttestationAuthorityHint(
                                human_readable_name = '', ), ), 
                        base_image = openapi_client.models.basis.Basis(
                            fingerprint = openapi_client.models.fingerprint.Fingerprint(
                                v1_name = '', 
                                v2_blob = [
                                    ''
                                    ], 
                                v2_name = '', ), 
                            resource_url = '', ), 
                        build_type = openapi_client.models.build_type.BuildType(
                            builder_version = '', 
                            signature = openapi_client.models.build_signature.BuildSignature(
                                key_id = '', 
                                key_type = 'KEY_TYPE_UNSPECIFIED', 
                                public_key = '', ), ), 
                        compliance = openapi_client.models.compliance_note.ComplianceNote(
                            cis_benchmark = openapi_client.models.cis_benchmark.CisBenchmark(
                                profile_level = 56, 
                                severity = 'SEVERITY_UNSPECIFIED', ), 
                            description = '', 
                            rationale = '', 
                            remediation = '', 
                            scan_instructions = 'YQ==', 
                            title = '', 
                            version = [
                                openapi_client.models.compliance_version.ComplianceVersion(
                                    benchmark_document = '', 
                                    cpe_uri = '', )
                                ], ), 
                        create_time = '', 
                        deployable = openapi_client.models.deployable.Deployable(
                            resource_uri = [
                                ''
                                ], ), 
                        discovery = openapi_client.models.discovery.Discovery(
                            analysis_kind = 'KIND_UNSPECIFIED', ), 
                        dsse_attestation = openapi_client.models.dsse_attestation_note.DSSEAttestationNote(), 
                        expiration_time = '', 
                        kind = 'KIND_UNSPECIFIED', 
                        long_description = '', 
                        name = '', 
                        package = openapi_client.models.package.Package(
                            architecture = 'ARCHITECTURE_UNSPECIFIED', 
                            cpe_uri = '', 
                            description = '', 
                            digest = [
                                openapi_client.models.digest.Digest(
                                    algo = '', 
                                    digest_bytes = 'YQ==', )
                                ], 
                            distribution = [
                                openapi_client.models.distribution.Distribution(
                                    architecture = 'ARCHITECTURE_UNSPECIFIED', 
                                    cpe_uri = '', 
                                    description = '', 
                                    latest_version = openapi_client.models.version.Version(
                                        epoch = 56, 
                                        inclusive = True, 
                                        kind = 'NORMAL', 
                                        name = '', 
                                        revision = '', ), 
                                    maintainer = '', 
                                    url = '', )
                                ], 
                            license = openapi_client.models.license.License(
                                comments = '', 
                                expression = '', ), 
                            maintainer = '', 
                            name = '', 
                            package_type = '', 
                            url = '', ), 
                        related_url = [
                            openapi_client.models.related_url.RelatedUrl(
                                label = '', 
                                url = '', )
                            ], 
                        sbom = openapi_client.models.document_note.DocumentNote(
                            data_licence = '', 
                            spdx_version = '', ), 
                        sbom_reference = openapi_client.models.sbom_reference_note.SBOMReferenceNote(
                            format = '', ), 
                        short_description = '', 
                        spdx_file = openapi_client.models.file_note.FileNote(
                            checksum = [
                                ''
                                ], 
                            file_type = 'FILE_TYPE_UNSPECIFIED', 
                            title = '', ), 
                        spdx_package = openapi_client.models.package_info_note.PackageInfoNote(
                            analyzed = True, 
                            attribution = '', 
                            copyright = '', 
                            detailed_description = '', 
                            download_location = '', 
                            external_refs = [
                                openapi_client.models.external_ref.ExternalRef(
                                    category = 'CATEGORY_UNSPECIFIED', 
                                    comment = '', 
                                    locator = '', 
                                    type = '', )
                                ], 
                            files_license_info = [
                                ''
                                ], 
                            home_page = '', 
                            license_declared = openapi_client.models.license.License(
                                comments = '', 
                                expression = '', ), 
                            originator = '', 
                            package_type = '', 
                            summary_description = '', 
                            supplier = '', 
                            title = '', 
                            verification_code = '', ), 
                        spdx_relationship = openapi_client.models.relationship_note.RelationshipNote(
                            type = 'RELATIONSHIP_TYPE_UNSPECIFIED', ), 
                        update_time = '', 
                        upgrade = openapi_client.models.upgrade_note.UpgradeNote(
                            distributions = [
                                openapi_client.models.upgrade_distribution.UpgradeDistribution(
                                    classification = '', 
                                    cpe_uri = '', 
                                    cve = [
                                        ''
                                        ], 
                                    severity = '', )
                                ], ), 
                        vulnerability_assessment = openapi_client.models.vulnerability_assessment_note.VulnerabilityAssessmentNote(
                            assessment = openapi_client.models.assessment.Assessment(
                                impacts = [
                                    ''
                                    ], 
                                justification = openapi_client.models.justification.Justification(
                                    details = '', 
                                    justification_type = 'JUSTIFICATION_TYPE_UNSPECIFIED', ), 
                                long_description = '', 
                                related_uris = [
                                    openapi_client.models.uri.URI(
                                        label = '', 
                                        uri = '', )
                                    ], 
                                remediations = [
                                    openapi_client.models.remediation.Remediation(
                                        details = '', 
                                        remediation_type = 'REMEDIATION_TYPE_UNSPECIFIED', 
                                        remediation_uri = openapi_client.models.uri.URI(
                                            label = '', 
                                            uri = '', ), )
                                    ], 
                                short_description = '', 
                                state = 'STATE_UNSPECIFIED', 
                                vulnerability_id = '', ), 
                            language_code = '', 
                            long_description = '', 
                            product = openapi_client.models.product.Product(
                                id = '', 
                                identifier_helper = openapi_client.models.identifier_helper.IdentifierHelper(
                                    field = 'IDENTIFIER_HELPER_FIELD_UNSPECIFIED', 
                                    generic_uri = '', ), 
                                name = '', ), 
                            publisher = openapi_client.models.publisher.Publisher(
                                issuing_authority = '', 
                                name = '', 
                                publisher_namespace = '', ), 
                            short_description = '', 
                            title = '', ), 
                        vulnerability_type = openapi_client.models.vulnerability_type.VulnerabilityType(
                            cvss_score = 1.337, 
                            cvss_v2 = openapi_client.models.cvss.CVSS(
                                attack_complexity = 'ATTACK_COMPLEXITY_UNSPECIFIED', 
                                attack_vector = 'ATTACK_VECTOR_UNSPECIFIED', 
                                authentication = 'AUTHENTICATION_UNSPECIFIED', 
                                availability_impact = 'IMPACT_UNSPECIFIED', 
                                base_score = 1.337, 
                                confidentiality_impact = 'IMPACT_UNSPECIFIED', 
                                exploitability_score = 1.337, 
                                impact_score = 1.337, 
                                integrity_impact = 'IMPACT_UNSPECIFIED', 
                                privileges_required = 'PRIVILEGES_REQUIRED_UNSPECIFIED', 
                                scope = 'SCOPE_UNSPECIFIED', 
                                user_interaction = 'USER_INTERACTION_UNSPECIFIED', ), 
                            cvss_version = 'CVSS_VERSION_UNSPECIFIED', 
                            cwe = [
                                ''
                                ], 
                            details = [
                                openapi_client.models.detail.Detail(
                                    cpe_uri = '', 
                                    description = '', 
                                    fixed_location = openapi_client.models.vulnerability_location.VulnerabilityLocation(
                                        cpe_uri = '', 
                                        file_location = [
                                            openapi_client.models.file_location.FileLocation(
                                                file_path = '', )
                                            ], ), 
                                    is_obsolete = True, 
                                    max_affected_version = openapi_client.models.version.Version(
                                        epoch = 56, 
                                        inclusive = True, 
                                        kind = 'NORMAL', 
                                        name = '', 
                                        revision = '', ), 
                                    min_affected_version = , 
                                    package_type = '', 
                                    severity_name = '', 
                                    source = '', 
                                    vendor = '', )
                                ], 
                            severity = 'SEVERITY_UNSPECIFIED', ), )
                    ]
            )
        else:
            return ListNotesResponse(
        )
        """

    def testListNotesResponse(self):
        """Test ListNotesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

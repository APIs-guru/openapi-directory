# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_devtools_containeranalysis_v1alpha1_source_context import GoogleDevtoolsContaineranalysisV1alpha1SourceContext

class TestGoogleDevtoolsContaineranalysisV1alpha1SourceContext(unittest.TestCase):
    """GoogleDevtoolsContaineranalysisV1alpha1SourceContext unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleDevtoolsContaineranalysisV1alpha1SourceContext:
        """Test GoogleDevtoolsContaineranalysisV1alpha1SourceContext
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleDevtoolsContaineranalysisV1alpha1SourceContext`
        """
        model = GoogleDevtoolsContaineranalysisV1alpha1SourceContext()
        if include_optional:
            return GoogleDevtoolsContaineranalysisV1alpha1SourceContext(
                cloud_repo = openapi_client.models.google_devtools_containeranalysis_v1alpha1_cloud_repo_source_context.GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext(
                    alias_context = openapi_client.models.google_devtools_containeranalysis_v1alpha1_alias_context.GoogleDevtoolsContaineranalysisV1alpha1AliasContext(
                        kind = 'KIND_UNSPECIFIED', 
                        name = '', ), 
                    repo_id = openapi_client.models.google_devtools_containeranalysis_v1alpha1_repo_id.GoogleDevtoolsContaineranalysisV1alpha1RepoId(
                        project_repo_id = openapi_client.models.google_devtools_containeranalysis_v1alpha1_project_repo_id.GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId(
                            project_id = '', 
                            repo_name = '', ), 
                        uid = '', ), 
                    revision_id = '', ),
                gerrit = openapi_client.models.google_devtools_containeranalysis_v1alpha1_gerrit_source_context.GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext(
                    alias_context = openapi_client.models.google_devtools_containeranalysis_v1alpha1_alias_context.GoogleDevtoolsContaineranalysisV1alpha1AliasContext(
                        kind = 'KIND_UNSPECIFIED', 
                        name = '', ), 
                    gerrit_project = '', 
                    host_uri = '', 
                    revision_id = '', ),
                git = openapi_client.models.google_devtools_containeranalysis_v1alpha1_git_source_context.GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext(
                    revision_id = '', 
                    url = '', ),
                labels = {
                    'key' : ''
                    }
            )
        else:
            return GoogleDevtoolsContaineranalysisV1alpha1SourceContext(
        )
        """

    def testGoogleDevtoolsContaineranalysisV1alpha1SourceContext(self):
        """Test GoogleDevtoolsContaineranalysisV1alpha1SourceContext"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.occurrence import Occurrence

class TestOccurrence(unittest.TestCase):
    """Occurrence unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Occurrence:
        """Test Occurrence
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Occurrence`
        """
        model = Occurrence()
        if include_optional:
            return Occurrence(
                attestation = openapi_client.models.attestation.Attestation(
                    pgp_signed_attestation = openapi_client.models.pgp_signed_attestation.PgpSignedAttestation(
                        content_type = 'CONTENT_TYPE_UNSPECIFIED', 
                        pgp_key_id = '', 
                        signature = '', ), ),
                build_details = openapi_client.models.build_details.BuildDetails(
                    in_toto_slsa_provenance_v1 = openapi_client.models.in_toto_slsa_provenance_v1.InTotoSlsaProvenanceV1(
                        _type = '', 
                        predicate = openapi_client.models.slsa_provenance_v1.SlsaProvenanceV1(
                            build_definition = openapi_client.models.build_definition.BuildDefinition(
                                build_type = '', 
                                external_parameters = {
                                    'key' : null
                                    }, 
                                internal_parameters = {
                                    'key' : null
                                    }, 
                                resolved_dependencies = [
                                    openapi_client.models.resource_descriptor.ResourceDescriptor(
                                        annotations = {
                                            'key' : null
                                            }, 
                                        content = 'YQ==', 
                                        digest = {
                                            'key' : ''
                                            }, 
                                        download_location = '', 
                                        media_type = '', 
                                        name = '', 
                                        uri = '', )
                                    ], ), 
                            run_details = openapi_client.models.run_details.RunDetails(
                                builder = openapi_client.models.provenance_builder.ProvenanceBuilder(
                                    builder_dependencies = [
                                        openapi_client.models.resource_descriptor.ResourceDescriptor(
                                            content = 'YQ==', 
                                            download_location = '', 
                                            media_type = '', 
                                            name = '', 
                                            uri = '', )
                                        ], 
                                    id = '', 
                                    version = {
                                        'key' : ''
                                        }, ), 
                                byproducts = [
                                    
                                    ], 
                                metadata = openapi_client.models.build_metadata.BuildMetadata(
                                    finished_on = '', 
                                    invocation_id = '', 
                                    started_on = '', ), ), ), 
                        predicate_type = '', 
                        subject = [
                            openapi_client.models.subject.Subject(
                                name = '', )
                            ], ), 
                    intoto_provenance = openapi_client.models.in_toto_provenance.InTotoProvenance(
                        builder_config = openapi_client.models.builder_config.BuilderConfig(
                            id = '', ), 
                        materials = [
                            ''
                            ], 
                        recipe = openapi_client.models.recipe.Recipe(
                            arguments = [
                                {
                                    'key' : null
                                    }
                                ], 
                            defined_in_material = '', 
                            entry_point = '', 
                            environment = [
                                {
                                    'key' : null
                                    }
                                ], 
                            type = '', ), ), 
                    intoto_statement = openapi_client.models.in_toto_statement.InTotoStatement(
                        _type = '', 
                        predicate_type = '', 
                        provenance = openapi_client.models.in_toto_provenance.InTotoProvenance(), 
                        slsa_provenance = openapi_client.models.slsa_provenance.SlsaProvenance(), 
                        slsa_provenance_zero_two = openapi_client.models.slsa_provenance_zero_two.SlsaProvenanceZeroTwo(
                            build_config = {
                                'key' : null
                                }, 
                            build_type = '', 
                            invocation = openapi_client.models.google_devtools_containeranalysis_v1alpha1_slsa_provenance_zero_two_slsa_invocation.GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation(
                                config_source = openapi_client.models.google_devtools_containeranalysis_v1alpha1_slsa_provenance_zero_two_slsa_config_source.GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource(
                                    entry_point = '', 
                                    uri = '', ), 
                                parameters = {
                                    'key' : null
                                    }, ), ), ), 
                    provenance = openapi_client.models.build_provenance.BuildProvenance(
                        build_options = {
                            'key' : ''
                            }, 
                        builder_version = '', 
                        built_artifacts = [
                            openapi_client.models.artifact.Artifact(
                                checksum = '', 
                                id = '', 
                                name = '', 
                                names = [
                                    ''
                                    ], )
                            ], 
                        commands = [
                            openapi_client.models.command.Command(
                                args = [
                                    ''
                                    ], 
                                dir = '', 
                                env = [
                                    ''
                                    ], 
                                id = '', 
                                name = '', 
                                wait_for = [
                                    ''
                                    ], )
                            ], 
                        create_time = '', 
                        creator = '', 
                        finish_time = '', 
                        id = '', 
                        logs_bucket = '', 
                        project_id = '', 
                        source_provenance = openapi_client.models.source.Source(
                            additional_contexts = [
                                openapi_client.models.google_devtools_containeranalysis_v1alpha1_source_context.GoogleDevtoolsContaineranalysisV1alpha1SourceContext(
                                    cloud_repo = openapi_client.models.google_devtools_containeranalysis_v1alpha1_cloud_repo_source_context.GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext(
                                        alias_context = openapi_client.models.google_devtools_containeranalysis_v1alpha1_alias_context.GoogleDevtoolsContaineranalysisV1alpha1AliasContext(
                                            kind = 'KIND_UNSPECIFIED', 
                                            name = '', ), 
                                        repo_id = openapi_client.models.google_devtools_containeranalysis_v1alpha1_repo_id.GoogleDevtoolsContaineranalysisV1alpha1RepoId(
                                            project_repo_id = openapi_client.models.google_devtools_containeranalysis_v1alpha1_project_repo_id.GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId(
                                                project_id = '', 
                                                repo_name = '', ), 
                                            uid = '', ), 
                                        revision_id = '', ), 
                                    gerrit = openapi_client.models.google_devtools_containeranalysis_v1alpha1_gerrit_source_context.GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext(
                                        gerrit_project = '', 
                                        host_uri = '', 
                                        revision_id = '', ), 
                                    git = openapi_client.models.google_devtools_containeranalysis_v1alpha1_git_source_context.GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext(
                                        revision_id = '', 
                                        url = '', ), 
                                    labels = {
                                        'key' : ''
                                        }, )
                                ], 
                            artifact_storage_source = openapi_client.models.storage_source.StorageSource(
                                bucket = '', 
                                generation = '', 
                                object = '', ), 
                            context = openapi_client.models.google_devtools_containeranalysis_v1alpha1_source_context.GoogleDevtoolsContaineranalysisV1alpha1SourceContext(), 
                            file_hashes = {
                                'key' : openapi_client.models.file_hashes.FileHashes(
                                    file_hash = [
                                        openapi_client.models.hash.Hash(
                                            type = 'NONE', 
                                            value = 'YQ==', )
                                        ], )
                                }, 
                            repo_source = openapi_client.models.repo_source.RepoSource(
                                branch_name = '', 
                                commit_sha = '', 
                                project_id = '', 
                                repo_name = '', 
                                tag_name = '', ), 
                            storage_source = openapi_client.models.storage_source.StorageSource(
                                bucket = '', 
                                generation = '', 
                                object = '', ), ), 
                        start_time = '', 
                        trigger_id = '', ), 
                    provenance_bytes = '', ),
                compliance = openapi_client.models.compliance_occurrence.ComplianceOccurrence(
                    non_compliance_reason = '', 
                    non_compliant_files = [
                        openapi_client.models.non_compliant_file.NonCompliantFile(
                            display_command = '', 
                            path = '', 
                            reason = '', )
                        ], ),
                create_time = '',
                deployment = openapi_client.models.deployment.Deployment(
                    address = '', 
                    config = '', 
                    deploy_time = '', 
                    platform = 'PLATFORM_UNSPECIFIED', 
                    resource_uri = [
                        ''
                        ], 
                    undeploy_time = '', 
                    user_email = '', ),
                derived_image = openapi_client.models.derived.Derived(
                    base_resource_url = '', 
                    distance = 56, 
                    fingerprint = openapi_client.models.fingerprint.Fingerprint(
                        v1_name = '', 
                        v2_blob = [
                            ''
                            ], 
                        v2_name = '', ), 
                    layer_info = [
                        openapi_client.models.layer.Layer(
                            arguments = '', 
                            directive = 'DIRECTIVE_UNSPECIFIED', )
                        ], ),
                discovered = openapi_client.models.discovered.Discovered(
                    analysis_completed = openapi_client.models.analysis_completed.AnalysisCompleted(
                        analysis_type = [
                            ''
                            ], ), 
                    analysis_error = [
                        openapi_client.models.status.Status(
                            code = 56, 
                            details = [
                                {
                                    'key' : null
                                    }
                                ], 
                            message = '', )
                        ], 
                    analysis_status = 'ANALYSIS_STATUS_UNSPECIFIED', 
                    analysis_status_error = openapi_client.models.status.Status(
                        code = 56, 
                        message = '', ), 
                    archive_time = '', 
                    continuous_analysis = 'CONTINUOUS_ANALYSIS_UNSPECIFIED', 
                    cpe = '', 
                    last_scan_time = '', 
                    operation = openapi_client.models.operation.Operation(
                        done = True, 
                        error = , 
                        metadata = {
                            'key' : null
                            }, 
                        name = '', 
                        response = {
                            'key' : null
                            }, ), 
                    sbom_status = openapi_client.models.sbom_status.SBOMStatus(
                        sbom_state = 'SBOM_STATE_UNSPECIFIED', ), ),
                dsse_attestation = openapi_client.models.dsse_attestation_occurrence.DSSEAttestationOccurrence(
                    envelope = openapi_client.models.envelope.Envelope(
                        payload = 'YQ==', 
                        payload_type = '', 
                        signatures = [
                            openapi_client.models.envelope_signature.EnvelopeSignature(
                                keyid = '', 
                                sig = 'YQ==', )
                            ], ), 
                    statement = openapi_client.models.in_toto_statement.InTotoStatement(
                        _type = '', 
                        predicate_type = '', 
                        provenance = openapi_client.models.in_toto_provenance.InTotoProvenance(
                            builder_config = openapi_client.models.builder_config.BuilderConfig(
                                id = '', ), 
                            materials = [
                                ''
                                ], 
                            metadata = openapi_client.models.metadata.Metadata(
                                build_finished_on = '', 
                                build_invocation_id = '', 
                                build_started_on = '', 
                                completeness = openapi_client.models.completeness.Completeness(
                                    arguments = True, 
                                    environment = True, ), 
                                reproducible = True, ), 
                            recipe = openapi_client.models.recipe.Recipe(
                                arguments = [
                                    {
                                        'key' : null
                                        }
                                    ], 
                                defined_in_material = '', 
                                entry_point = '', 
                                environment = [
                                    {
                                        'key' : null
                                        }
                                    ], 
                                type = '', ), ), 
                        slsa_provenance = openapi_client.models.slsa_provenance.SlsaProvenance(
                            builder = openapi_client.models.slsa_builder.SlsaBuilder(
                                id = '', ), ), 
                        slsa_provenance_zero_two = openapi_client.models.slsa_provenance_zero_two.SlsaProvenanceZeroTwo(
                            build_config = {
                                'key' : null
                                }, 
                            build_type = '', 
                            invocation = openapi_client.models.google_devtools_containeranalysis_v1alpha1_slsa_provenance_zero_two_slsa_invocation.GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation(
                                config_source = openapi_client.models.google_devtools_containeranalysis_v1alpha1_slsa_provenance_zero_two_slsa_config_source.GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource(
                                    digest = {
                                        'key' : ''
                                        }, 
                                    entry_point = '', 
                                    uri = '', ), 
                                parameters = {
                                    'key' : null
                                    }, ), ), 
                        subject = [
                            openapi_client.models.subject.Subject(
                                name = '', )
                            ], ), ),
                envelope = openapi_client.models.envelope.Envelope(
                    payload = 'YQ==', 
                    payload_type = '', 
                    signatures = [
                        openapi_client.models.envelope_signature.EnvelopeSignature(
                            keyid = '', 
                            sig = 'YQ==', )
                        ], ),
                installation = openapi_client.models.installation.Installation(
                    architecture = 'ARCHITECTURE_UNSPECIFIED', 
                    cpe_uri = '', 
                    license = openapi_client.models.license.License(
                        comments = '', 
                        expression = '', ), 
                    location = [
                        openapi_client.models.location.Location(
                            cpe_uri = '', 
                            path = '', 
                            version = openapi_client.models.version.Version(
                                epoch = 56, 
                                inclusive = True, 
                                kind = 'NORMAL', 
                                name = '', 
                                revision = '', ), )
                        ], 
                    name = '', 
                    package_type = '', 
                    version = openapi_client.models.version.Version(
                        epoch = 56, 
                        inclusive = True, 
                        kind = 'NORMAL', 
                        name = '', 
                        revision = '', ), ),
                kind = 'KIND_UNSPECIFIED',
                name = '',
                note_name = '',
                remediation = '',
                resource = openapi_client.models.resource.Resource(
                    content_hash = openapi_client.models.hash.Hash(
                        type = 'NONE', 
                        value = 'YQ==', ), 
                    name = '', 
                    uri = '', ),
                resource_url = '',
                sbom = openapi_client.models.document_occurrence.DocumentOccurrence(
                    create_time = '', 
                    creator_comment = '', 
                    creators = [
                        ''
                        ], 
                    document_comment = '', 
                    external_document_refs = [
                        ''
                        ], 
                    id = '', 
                    license_list_version = '', 
                    namespace = '', 
                    title = '', ),
                sbom_reference = openapi_client.models.sbom_reference_occurrence.SBOMReferenceOccurrence(
                    payload = openapi_client.models.sbom_reference_intoto_payload.SbomReferenceIntotoPayload(
                        _type = '', 
                        predicate = openapi_client.models.sbom_reference_intoto_predicate.SbomReferenceIntotoPredicate(
                            digest = {
                                'key' : ''
                                }, 
                            location = '', 
                            mime_type = '', 
                            referrer_id = '', ), 
                        predicate_type = '', 
                        subject = [
                            openapi_client.models.subject.Subject(
                                name = '', )
                            ], ), 
                    payload_type = '', 
                    signatures = [
                        openapi_client.models.envelope_signature.EnvelopeSignature(
                            keyid = '', 
                            sig = 'YQ==', )
                        ], ),
                spdx_file = openapi_client.models.file_occurrence.FileOccurrence(
                    attributions = [
                        ''
                        ], 
                    comment = '', 
                    contributors = [
                        ''
                        ], 
                    copyright = '', 
                    files_license_info = [
                        ''
                        ], 
                    id = '', 
                    license_concluded = openapi_client.models.license.License(
                        comments = '', 
                        expression = '', ), 
                    notice = '', ),
                spdx_package = openapi_client.models.package_info_occurrence.PackageInfoOccurrence(
                    comment = '', 
                    filename = '', 
                    home_page = '', 
                    id = '', 
                    license_concluded = openapi_client.models.license.License(
                        comments = '', 
                        expression = '', ), 
                    package_type = '', 
                    source_info = '', 
                    summary_description = '', 
                    title = '', 
                    version = '', ),
                spdx_relationship = openapi_client.models.relationship_occurrence.RelationshipOccurrence(
                    comment = '', 
                    source = '', 
                    target = '', 
                    type = 'RELATIONSHIP_TYPE_UNSPECIFIED', ),
                update_time = '',
                upgrade = openapi_client.models.upgrade_occurrence.UpgradeOccurrence(
                    distribution = openapi_client.models.upgrade_distribution.UpgradeDistribution(
                        classification = '', 
                        cpe_uri = '', 
                        cve = [
                            ''
                            ], 
                        severity = '', ), 
                    package = '', 
                    parsed_version = openapi_client.models.version.Version(
                        epoch = 56, 
                        inclusive = True, 
                        kind = 'NORMAL', 
                        name = '', 
                        revision = '', ), ),
                vulnerability_details = openapi_client.models.vulnerability_details.VulnerabilityDetails(
                    cvss_score = 1.337, 
                    cvss_v2 = openapi_client.models.cvss.CVSS(
                        attack_complexity = 'ATTACK_COMPLEXITY_UNSPECIFIED', 
                        attack_vector = 'ATTACK_VECTOR_UNSPECIFIED', 
                        authentication = 'AUTHENTICATION_UNSPECIFIED', 
                        availability_impact = 'IMPACT_UNSPECIFIED', 
                        base_score = 1.337, 
                        confidentiality_impact = 'IMPACT_UNSPECIFIED', 
                        exploitability_score = 1.337, 
                        impact_score = 1.337, 
                        integrity_impact = 'IMPACT_UNSPECIFIED', 
                        privileges_required = 'PRIVILEGES_REQUIRED_UNSPECIFIED', 
                        scope = 'SCOPE_UNSPECIFIED', 
                        user_interaction = 'USER_INTERACTION_UNSPECIFIED', ), 
                    cvss_v3 = openapi_client.models.cvss.CVSS(
                        attack_complexity = 'ATTACK_COMPLEXITY_UNSPECIFIED', 
                        attack_vector = 'ATTACK_VECTOR_UNSPECIFIED', 
                        authentication = 'AUTHENTICATION_UNSPECIFIED', 
                        availability_impact = 'IMPACT_UNSPECIFIED', 
                        base_score = 1.337, 
                        confidentiality_impact = 'IMPACT_UNSPECIFIED', 
                        exploitability_score = 1.337, 
                        impact_score = 1.337, 
                        integrity_impact = 'IMPACT_UNSPECIFIED', 
                        privileges_required = 'PRIVILEGES_REQUIRED_UNSPECIFIED', 
                        scope = 'SCOPE_UNSPECIFIED', 
                        user_interaction = 'USER_INTERACTION_UNSPECIFIED', ), 
                    cvss_version = 'CVSS_VERSION_UNSPECIFIED', 
                    effective_severity = 'SEVERITY_UNSPECIFIED', 
                    extra_details = '', 
                    package_issue = [
                        openapi_client.models.package_issue.PackageIssue(
                            affected_location = openapi_client.models.vulnerability_location.VulnerabilityLocation(
                                cpe_uri = '', 
                                file_location = [
                                    openapi_client.models.file_location.FileLocation(
                                        file_path = '', )
                                    ], 
                                package = '', 
                                version = openapi_client.models.version.Version(
                                    epoch = 56, 
                                    inclusive = True, 
                                    kind = 'NORMAL', 
                                    name = '', 
                                    revision = '', ), ), 
                            effective_severity = 'SEVERITY_UNSPECIFIED', 
                            fixed_location = openapi_client.models.vulnerability_location.VulnerabilityLocation(
                                cpe_uri = '', 
                                package = '', ), 
                            package_type = '', 
                            severity_name = '', )
                        ], 
                    severity = 'SEVERITY_UNSPECIFIED', 
                    type = '', 
                    vex_assessment = openapi_client.models.vex_assessment.VexAssessment(
                        cve = '', 
                        impacts = [
                            ''
                            ], 
                        justification = openapi_client.models.justification.Justification(
                            details = '', 
                            justification_type = 'JUSTIFICATION_TYPE_UNSPECIFIED', ), 
                        note_name = '', 
                        related_uris = [
                            openapi_client.models.uri.URI(
                                label = '', 
                                uri = '', )
                            ], 
                        remediations = [
                            openapi_client.models.remediation.Remediation(
                                details = '', 
                                remediation_type = 'REMEDIATION_TYPE_UNSPECIFIED', 
                                remediation_uri = openapi_client.models.uri.URI(
                                    label = '', 
                                    uri = '', ), )
                            ], 
                        state = 'STATE_UNSPECIFIED', 
                        vulnerability_id = '', ), )
            )
        else:
            return Occurrence(
        )
        """

    def testOccurrence(self):
        """Test Occurrence"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_note_occurrences_response import ListNoteOccurrencesResponse

class TestListNoteOccurrencesResponse(unittest.TestCase):
    """ListNoteOccurrencesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListNoteOccurrencesResponse:
        """Test ListNoteOccurrencesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListNoteOccurrencesResponse`
        """
        model = ListNoteOccurrencesResponse()
        if include_optional:
            return ListNoteOccurrencesResponse(
                next_page_token = '',
                occurrences = [
                    openapi_client.models.occurrence.Occurrence(
                        attestation = openapi_client.models.details.Details(), 
                        build = openapi_client.models.grafeas_v1beta1_build_details.GrafeasV1beta1BuildDetails(
                            in_toto_slsa_provenance_v1 = openapi_client.models.in_toto_slsa_provenance_v1.InTotoSlsaProvenanceV1(
                                _type = '', 
                                predicate = openapi_client.models.slsa_provenance_v1.SlsaProvenanceV1(
                                    build_definition = openapi_client.models.build_definition.BuildDefinition(
                                        build_type = '', 
                                        external_parameters = {
                                            'key' : null
                                            }, 
                                        internal_parameters = {
                                            'key' : null
                                            }, 
                                        resolved_dependencies = [
                                            openapi_client.models.resource_descriptor.ResourceDescriptor(
                                                annotations = {
                                                    'key' : null
                                                    }, 
                                                content = 'YQ==', 
                                                digest = {
                                                    'key' : ''
                                                    }, 
                                                download_location = '', 
                                                media_type = '', 
                                                name = '', 
                                                uri = '', )
                                            ], ), 
                                    run_details = openapi_client.models.run_details.RunDetails(
                                        builder = openapi_client.models.provenance_builder.ProvenanceBuilder(
                                            builder_dependencies = [
                                                openapi_client.models.resource_descriptor.ResourceDescriptor(
                                                    content = 'YQ==', 
                                                    download_location = '', 
                                                    media_type = '', 
                                                    name = '', 
                                                    uri = '', )
                                                ], 
                                            id = '', 
                                            version = {
                                                'key' : ''
                                                }, ), 
                                        byproducts = [
                                            
                                            ], 
                                        metadata = openapi_client.models.build_metadata.BuildMetadata(
                                            finished_on = '', 
                                            invocation_id = '', 
                                            started_on = '', ), ), ), 
                                predicate_type = '', 
                                subject = [
                                    openapi_client.models.subject.Subject(
                                        name = '', )
                                    ], ), 
                            provenance = openapi_client.models.build_provenance.BuildProvenance(
                                build_options = {
                                    'key' : ''
                                    }, 
                                builder_version = '', 
                                built_artifacts = [
                                    openapi_client.models.artifact.Artifact(
                                        checksum = '', 
                                        id = '', 
                                        names = [
                                            ''
                                            ], )
                                    ], 
                                commands = [
                                    openapi_client.models.command.Command(
                                        args = [
                                            ''
                                            ], 
                                        dir = '', 
                                        env = [
                                            ''
                                            ], 
                                        id = '', 
                                        name = '', 
                                        wait_for = [
                                            ''
                                            ], )
                                    ], 
                                create_time = '', 
                                creator = '', 
                                end_time = '', 
                                id = '', 
                                logs_uri = '', 
                                project_id = '', 
                                source_provenance = openapi_client.models.source.Source(
                                    additional_contexts = [
                                        openapi_client.models.source_context.SourceContext(
                                            cloud_repo = openapi_client.models.cloud_repo_source_context.CloudRepoSourceContext(
                                                alias_context = openapi_client.models.alias_context.AliasContext(
                                                    kind = 'KIND_UNSPECIFIED', 
                                                    name = '', ), 
                                                repo_id = openapi_client.models.repo_id.RepoId(
                                                    project_repo_id = openapi_client.models.project_repo_id.ProjectRepoId(
                                                        project_id = '', 
                                                        repo_name = '', ), 
                                                    uid = '', ), 
                                                revision_id = '', ), 
                                            gerrit = openapi_client.models.gerrit_source_context.GerritSourceContext(
                                                gerrit_project = '', 
                                                host_uri = '', 
                                                revision_id = '', ), 
                                            git = openapi_client.models.git_source_context.GitSourceContext(
                                                revision_id = '', 
                                                url = '', ), 
                                            labels = {
                                                'key' : ''
                                                }, )
                                        ], 
                                    artifact_storage_source_uri = '', 
                                    context = openapi_client.models.source_context.SourceContext(), 
                                    file_hashes = {
                                        'key' : openapi_client.models.file_hashes.FileHashes(
                                            file_hash = [
                                                openapi_client.models.hash.Hash(
                                                    type = 'HASH_TYPE_UNSPECIFIED', 
                                                    value = 'YQ==', )
                                                ], )
                                        }, ), 
                                start_time = '', 
                                trigger_id = '', ), 
                            provenance_bytes = '', ), 
                        create_time = '', 
                        deployment = openapi_client.models.grafeas_v1beta1_deployment_details.GrafeasV1beta1DeploymentDetails(), 
                        derived_image = openapi_client.models.grafeas_v1beta1_image_details.GrafeasV1beta1ImageDetails(), 
                        discovered = openapi_client.models.grafeas_v1beta1_discovery_details.GrafeasV1beta1DiscoveryDetails(), 
                        envelope = openapi_client.models.envelope.Envelope(
                            payload = 'YQ==', 
                            payload_type = '', 
                            signatures = [
                                openapi_client.models.envelope_signature.EnvelopeSignature(
                                    keyid = '', 
                                    sig = 'YQ==', )
                                ], ), 
                        installation = openapi_client.models.grafeas_v1beta1_package_details.GrafeasV1beta1PackageDetails(), 
                        intoto = openapi_client.models.grafeas_v1beta1_intoto_details.GrafeasV1beta1IntotoDetails(
                            signed = openapi_client.models.link.Link(
                                command = [
                                    ''
                                    ], 
                                environment = openapi_client.models.environment.Environment(
                                    custom_values = {
                                        'key' : ''
                                        }, ), 
                                materials = [
                                    openapi_client.models.grafeas_v1beta1_intoto_artifact.GrafeasV1beta1IntotoArtifact(
                                        hashes = openapi_client.models.artifact_hashes.ArtifactHashes(
                                            sha256 = '', ), 
                                        resource_uri = '', )
                                    ], 
                                products = [
                                    openapi_client.models.grafeas_v1beta1_intoto_artifact.GrafeasV1beta1IntotoArtifact(
                                        resource_uri = '', )
                                    ], ), ), 
                        kind = 'NOTE_KIND_UNSPECIFIED', 
                        name = '', 
                        note_name = '', 
                        remediation = '', 
                        resource = openapi_client.models.resource.Resource(
                            content_hash = openapi_client.models.hash.Hash(
                                type = 'HASH_TYPE_UNSPECIFIED', 
                                value = 'YQ==', ), 
                            name = '', 
                            uri = '', ), 
                        sbom = openapi_client.models.document_occurrence.DocumentOccurrence(
                            create_time = '', 
                            creator_comment = '', 
                            creators = [
                                ''
                                ], 
                            document_comment = '', 
                            external_document_refs = [
                                ''
                                ], 
                            id = '', 
                            license_list_version = '', 
                            namespace = '', 
                            title = '', ), 
                        sbom_reference = openapi_client.models.sbom_reference_occurrence.SBOMReferenceOccurrence(
                            payload = openapi_client.models.sbom_reference_intoto_payload.SbomReferenceIntotoPayload(
                                _type = '', 
                                predicate_type = '', ), 
                            payload_type = '', ), 
                        spdx_file = openapi_client.models.file_occurrence.FileOccurrence(
                            attributions = [
                                ''
                                ], 
                            comment = '', 
                            contributors = [
                                ''
                                ], 
                            copyright = '', 
                            files_license_info = [
                                ''
                                ], 
                            id = '', 
                            license_concluded = openapi_client.models.license.License(
                                comments = '', 
                                expression = '', ), 
                            notice = '', ), 
                        spdx_package = openapi_client.models.package_info_occurrence.PackageInfoOccurrence(
                            comment = '', 
                            filename = '', 
                            home_page = '', 
                            id = '', 
                            package_type = '', 
                            source_info = '', 
                            summary_description = '', 
                            title = '', ), 
                        spdx_relationship = openapi_client.models.relationship_occurrence.RelationshipOccurrence(
                            comment = '', 
                            source = '', 
                            target = '', 
                            type = 'RELATIONSHIP_TYPE_UNSPECIFIED', ), 
                        update_time = '', 
                        vulnerability = openapi_client.models.grafeas_v1beta1_vulnerability_details.GrafeasV1beta1VulnerabilityDetails(
                            cvss_score = 1.337, 
                            cvss_v2 = openapi_client.models.cvss.CVSS(
                                attack_complexity = 'ATTACK_COMPLEXITY_UNSPECIFIED', 
                                attack_vector = 'ATTACK_VECTOR_UNSPECIFIED', 
                                authentication = 'AUTHENTICATION_UNSPECIFIED', 
                                availability_impact = 'IMPACT_UNSPECIFIED', 
                                base_score = 1.337, 
                                confidentiality_impact = 'IMPACT_UNSPECIFIED', 
                                exploitability_score = 1.337, 
                                impact_score = 1.337, 
                                integrity_impact = 'IMPACT_UNSPECIFIED', 
                                privileges_required = 'PRIVILEGES_REQUIRED_UNSPECIFIED', 
                                scope = 'SCOPE_UNSPECIFIED', 
                                user_interaction = 'USER_INTERACTION_UNSPECIFIED', ), 
                            cvss_v3 = openapi_client.models.cvss.CVSS(
                                attack_complexity = 'ATTACK_COMPLEXITY_UNSPECIFIED', 
                                attack_vector = 'ATTACK_VECTOR_UNSPECIFIED', 
                                authentication = 'AUTHENTICATION_UNSPECIFIED', 
                                availability_impact = 'IMPACT_UNSPECIFIED', 
                                base_score = 1.337, 
                                confidentiality_impact = 'IMPACT_UNSPECIFIED', 
                                exploitability_score = 1.337, 
                                impact_score = 1.337, 
                                integrity_impact = 'IMPACT_UNSPECIFIED', 
                                privileges_required = 'PRIVILEGES_REQUIRED_UNSPECIFIED', 
                                scope = 'SCOPE_UNSPECIFIED', 
                                user_interaction = 'USER_INTERACTION_UNSPECIFIED', ), 
                            cvss_version = 'CVSS_VERSION_UNSPECIFIED', 
                            effective_severity = 'SEVERITY_UNSPECIFIED', 
                            extra_details = '', 
                            long_description = '', 
                            package_issue = [
                                openapi_client.models.package_issue.PackageIssue(
                                    affected_location = openapi_client.models.vulnerability_location.VulnerabilityLocation(
                                        cpe_uri = '', 
                                        package = '', ), 
                                    effective_severity = 'SEVERITY_UNSPECIFIED', 
                                    fixed_location = openapi_client.models.vulnerability_location.VulnerabilityLocation(
                                        cpe_uri = '', 
                                        package = '', ), 
                                    package_type = '', 
                                    severity_name = '', )
                                ], 
                            related_urls = [
                                openapi_client.models.related_url.RelatedUrl(
                                    label = '', 
                                    url = '', )
                                ], 
                            severity = 'SEVERITY_UNSPECIFIED', 
                            short_description = '', 
                            type = '', 
                            vex_assessment = openapi_client.models.vex_assessment.VexAssessment(
                                cve = '', 
                                impacts = [
                                    ''
                                    ], 
                                justification = openapi_client.models.justification.Justification(
                                    details = '', 
                                    justification_type = 'JUSTIFICATION_TYPE_UNSPECIFIED', ), 
                                note_name = '', 
                                related_uris = [
                                    openapi_client.models.related_url.RelatedUrl(
                                        label = '', 
                                        url = '', )
                                    ], 
                                remediations = [
                                    openapi_client.models.remediation.Remediation(
                                        details = '', 
                                        remediation_type = 'REMEDIATION_TYPE_UNSPECIFIED', 
                                        remediation_uri = , )
                                    ], 
                                state = 'STATE_UNSPECIFIED', 
                                vulnerability_id = '', ), ), )
                    ]
            )
        else:
            return ListNoteOccurrencesResponse(
        )
        """

    def testListNoteOccurrencesResponse(self):
        """Test ListNoteOccurrencesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.slsa_provenance_v1 import SlsaProvenanceV1

class TestSlsaProvenanceV1(unittest.TestCase):
    """SlsaProvenanceV1 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SlsaProvenanceV1:
        """Test SlsaProvenanceV1
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SlsaProvenanceV1`
        """
        model = SlsaProvenanceV1()
        if include_optional:
            return SlsaProvenanceV1(
                build_definition = openapi_client.models.build_definition.BuildDefinition(
                    build_type = '', 
                    external_parameters = {
                        'key' : null
                        }, 
                    internal_parameters = {
                        'key' : null
                        }, 
                    resolved_dependencies = [
                        openapi_client.models.resource_descriptor.ResourceDescriptor(
                            annotations = {
                                'key' : null
                                }, 
                            content = 'YQ==', 
                            digest = {
                                'key' : ''
                                }, 
                            download_location = '', 
                            media_type = '', 
                            name = '', 
                            uri = '', )
                        ], ),
                run_details = openapi_client.models.run_details.RunDetails(
                    builder = openapi_client.models.provenance_builder.ProvenanceBuilder(
                        builder_dependencies = [
                            openapi_client.models.resource_descriptor.ResourceDescriptor(
                                annotations = {
                                    'key' : null
                                    }, 
                                content = 'YQ==', 
                                digest = {
                                    'key' : ''
                                    }, 
                                download_location = '', 
                                media_type = '', 
                                name = '', 
                                uri = '', )
                            ], 
                        id = '', 
                        version = {
                            'key' : ''
                            }, ), 
                    byproducts = [
                        openapi_client.models.resource_descriptor.ResourceDescriptor(
                            content = 'YQ==', 
                            download_location = '', 
                            media_type = '', 
                            name = '', 
                            uri = '', )
                        ], 
                    metadata = openapi_client.models.build_metadata.BuildMetadata(
                        finished_on = '', 
                        invocation_id = '', 
                        started_on = '', ), )
            )
        else:
            return SlsaProvenanceV1(
        )
        """

    def testSlsaProvenanceV1(self):
        """Test SlsaProvenanceV1"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

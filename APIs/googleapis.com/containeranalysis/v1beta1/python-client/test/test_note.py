# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.note import Note

class TestNote(unittest.TestCase):
    """Note unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Note:
        """Test Note
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Note`
        """
        model = Note()
        if include_optional:
            return Note(
                attestation_authority = openapi_client.models.authority.Authority(
                    hint = openapi_client.models.hint.Hint(
                        human_readable_name = '', ), ),
                base_image = openapi_client.models.basis.Basis(
                    fingerprint = openapi_client.models.fingerprint.Fingerprint(
                        v1_name = '', 
                        v2_blob = [
                            ''
                            ], 
                        v2_name = '', ), 
                    resource_url = '', ),
                build = openapi_client.models.build.Build(
                    builder_version = '', 
                    signature = openapi_client.models.build_signature.BuildSignature(
                        key_id = '', 
                        key_type = 'KEY_TYPE_UNSPECIFIED', 
                        public_key = '', ), ),
                create_time = '',
                deployable = openapi_client.models.deployable.Deployable(
                    resource_uri = [
                        ''
                        ], ),
                discovery = openapi_client.models.discovery.Discovery(
                    analysis_kind = 'NOTE_KIND_UNSPECIFIED', ),
                expiration_time = '',
                intoto = openapi_client.models.in_toto.InToto(
                    expected_command = [
                        ''
                        ], 
                    expected_materials = [
                        openapi_client.models.artifact_rule.ArtifactRule(
                            artifact_rule = [
                                ''
                                ], )
                        ], 
                    expected_products = [
                        openapi_client.models.artifact_rule.ArtifactRule()
                        ], 
                    signing_keys = [
                        openapi_client.models.signing_key.SigningKey(
                            key_id = '', 
                            key_scheme = '', 
                            key_type = '', 
                            public_key_value = '', )
                        ], 
                    step_name = '', 
                    threshold = '', ),
                kind = 'NOTE_KIND_UNSPECIFIED',
                long_description = '',
                name = '',
                package = openapi_client.models.package.Package(
                    architecture = 'ARCHITECTURE_UNSPECIFIED', 
                    cpe_uri = '', 
                    description = '', 
                    digest = [
                        openapi_client.models.digest.Digest(
                            algo = '', 
                            digest_bytes = 'YQ==', )
                        ], 
                    distribution = [
                        openapi_client.models.distribution.Distribution(
                            architecture = 'ARCHITECTURE_UNSPECIFIED', 
                            cpe_uri = '', 
                            description = '', 
                            latest_version = openapi_client.models.version.Version(
                                epoch = 56, 
                                inclusive = True, 
                                kind = 'VERSION_KIND_UNSPECIFIED', 
                                name = '', 
                                revision = '', ), 
                            maintainer = '', 
                            url = '', )
                        ], 
                    license = openapi_client.models.license.License(
                        comments = '', 
                        expression = '', ), 
                    maintainer = '', 
                    name = '', 
                    package_type = '', 
                    url = '', 
                    version = openapi_client.models.version.Version(
                        epoch = 56, 
                        inclusive = True, 
                        kind = 'VERSION_KIND_UNSPECIFIED', 
                        name = '', 
                        revision = '', ), ),
                related_note_names = [
                    ''
                    ],
                related_url = [
                    openapi_client.models.related_url.RelatedUrl(
                        label = '', 
                        url = '', )
                    ],
                sbom = openapi_client.models.document_note.DocumentNote(
                    data_licence = '', 
                    spdx_version = '', ),
                sbom_reference = openapi_client.models.sbom_reference_note.SBOMReferenceNote(
                    format = '', 
                    version = '', ),
                short_description = '',
                spdx_file = openapi_client.models.file_note.FileNote(
                    checksum = [
                        ''
                        ], 
                    file_type = 'FILE_TYPE_UNSPECIFIED', 
                    title = '', ),
                spdx_package = openapi_client.models.package_info_note.PackageInfoNote(
                    analyzed = True, 
                    attribution = '', 
                    checksum = '', 
                    copyright = '', 
                    detailed_description = '', 
                    download_location = '', 
                    external_refs = [
                        openapi_client.models.external_ref.ExternalRef(
                            category = 'CATEGORY_UNSPECIFIED', 
                            comment = '', 
                            locator = '', 
                            type = '', )
                        ], 
                    files_license_info = [
                        ''
                        ], 
                    home_page = '', 
                    license_declared = openapi_client.models.license.License(
                        comments = '', 
                        expression = '', ), 
                    originator = '', 
                    package_type = '', 
                    summary_description = '', 
                    supplier = '', 
                    title = '', 
                    verification_code = '', 
                    version = '', ),
                spdx_relationship = openapi_client.models.relationship_note.RelationshipNote(
                    type = 'RELATIONSHIP_TYPE_UNSPECIFIED', ),
                update_time = '',
                vulnerability = openapi_client.models.vulnerability.Vulnerability(
                    cvss_score = 1.337, 
                    cvss_v2 = openapi_client.models.cvss.CVSS(
                        attack_complexity = 'ATTACK_COMPLEXITY_UNSPECIFIED', 
                        attack_vector = 'ATTACK_VECTOR_UNSPECIFIED', 
                        authentication = 'AUTHENTICATION_UNSPECIFIED', 
                        availability_impact = 'IMPACT_UNSPECIFIED', 
                        base_score = 1.337, 
                        confidentiality_impact = 'IMPACT_UNSPECIFIED', 
                        exploitability_score = 1.337, 
                        impact_score = 1.337, 
                        integrity_impact = 'IMPACT_UNSPECIFIED', 
                        privileges_required = 'PRIVILEGES_REQUIRED_UNSPECIFIED', 
                        scope = 'SCOPE_UNSPECIFIED', 
                        user_interaction = 'USER_INTERACTION_UNSPECIFIED', ), 
                    cvss_v3 = openapi_client.models.cvssv3.CVSSv3(
                        attack_complexity = 'ATTACK_COMPLEXITY_UNSPECIFIED', 
                        attack_vector = 'ATTACK_VECTOR_UNSPECIFIED', 
                        availability_impact = 'IMPACT_UNSPECIFIED', 
                        base_score = 1.337, 
                        confidentiality_impact = 'IMPACT_UNSPECIFIED', 
                        exploitability_score = 1.337, 
                        impact_score = 1.337, 
                        integrity_impact = 'IMPACT_UNSPECIFIED', 
                        privileges_required = 'PRIVILEGES_REQUIRED_UNSPECIFIED', 
                        scope = 'SCOPE_UNSPECIFIED', 
                        user_interaction = 'USER_INTERACTION_UNSPECIFIED', ), 
                    cvss_version = 'CVSS_VERSION_UNSPECIFIED', 
                    cwe = [
                        ''
                        ], 
                    details = [
                        openapi_client.models.detail.Detail(
                            cpe_uri = '', 
                            description = '', 
                            fixed_location = openapi_client.models.vulnerability_location.VulnerabilityLocation(
                                cpe_uri = '', 
                                package = '', 
                                version = openapi_client.models.version.Version(
                                    epoch = 56, 
                                    inclusive = True, 
                                    kind = 'VERSION_KIND_UNSPECIFIED', 
                                    name = '', 
                                    revision = '', ), ), 
                            is_obsolete = True, 
                            max_affected_version = openapi_client.models.version.Version(
                                epoch = 56, 
                                inclusive = True, 
                                kind = 'VERSION_KIND_UNSPECIFIED', 
                                name = '', 
                                revision = '', ), 
                            min_affected_version = , 
                            package = '', 
                            package_type = '', 
                            severity_name = '', 
                            source = '', 
                            source_update_time = '', 
                            vendor = '', )
                        ], 
                    severity = 'SEVERITY_UNSPECIFIED', 
                    source_update_time = '', 
                    windows_details = [
                        openapi_client.models.windows_detail.WindowsDetail(
                            cpe_uri = '', 
                            description = '', 
                            fixing_kbs = [
                                openapi_client.models.knowledge_base.KnowledgeBase(
                                    name = '', 
                                    url = '', )
                                ], 
                            name = '', )
                        ], ),
                vulnerability_assessment = openapi_client.models.vulnerability_assessment_note.VulnerabilityAssessmentNote(
                    assessment = openapi_client.models.assessment.Assessment(
                        cve = '', 
                        impacts = [
                            ''
                            ], 
                        justification = openapi_client.models.justification.Justification(
                            details = '', 
                            justification_type = 'JUSTIFICATION_TYPE_UNSPECIFIED', ), 
                        long_description = '', 
                        related_uris = [
                            openapi_client.models.related_url.RelatedUrl(
                                label = '', 
                                url = '', )
                            ], 
                        remediations = [
                            openapi_client.models.remediation.Remediation(
                                details = '', 
                                remediation_type = 'REMEDIATION_TYPE_UNSPECIFIED', 
                                remediation_uri = openapi_client.models.related_url.RelatedUrl(
                                    label = '', 
                                    url = '', ), )
                            ], 
                        short_description = '', 
                        state = 'STATE_UNSPECIFIED', 
                        vulnerability_id = '', ), 
                    language_code = '', 
                    long_description = '', 
                    product = openapi_client.models.product.Product(
                        generic_uri = '', 
                        id = '', 
                        name = '', ), 
                    publisher = openapi_client.models.publisher.Publisher(
                        issuing_authority = '', 
                        name = '', 
                        publisher_namespace = '', ), 
                    short_description = '', 
                    title = '', )
            )
        else:
            return Note(
        )
        """

    def testNote(self):
        """Test Note"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

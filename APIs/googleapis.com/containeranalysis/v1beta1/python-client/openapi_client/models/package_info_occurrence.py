# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.license import License
from typing import Optional, Set
from typing_extensions import Self

class PackageInfoOccurrence(BaseModel):
    """
    PackageInfoOccurrence represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
    """ # noqa: E501
    comment: Optional[StrictStr] = Field(default=None, description="A place for the SPDX file creator to record any general comments about the package being described")
    filename: Optional[StrictStr] = Field(default=None, description="Provide the actual file name of the package, or path of the directory being treated as a package")
    home_page: Optional[StrictStr] = Field(default=None, description="Output only. Provide a place for the SPDX file creator to record a web site that serves as the package's home page", alias="homePage")
    id: Optional[StrictStr] = Field(default=None, description="Uniquely identify any element in an SPDX document which may be referenced by other elements")
    license_concluded: Optional[License] = Field(default=None, alias="licenseConcluded")
    package_type: Optional[StrictStr] = Field(default=None, description="Output only. The type of package: OS, MAVEN, GO, GO_STDLIB, etc.", alias="packageType")
    source_info: Optional[StrictStr] = Field(default=None, description="Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package", alias="sourceInfo")
    summary_description: Optional[StrictStr] = Field(default=None, description="Output only. A short description of the package", alias="summaryDescription")
    title: Optional[StrictStr] = Field(default=None, description="Output only. Identify the full name of the package as given by the Package Originator")
    version: Optional[StrictStr] = Field(default=None, description="Output only. Identify the version of the package")
    __properties: ClassVar[List[str]] = ["comment", "filename", "homePage", "id", "licenseConcluded", "packageType", "sourceInfo", "summaryDescription", "title", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PackageInfoOccurrence from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "home_page",
            "package_type",
            "summary_description",
            "title",
            "version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of license_concluded
        if self.license_concluded:
            _dict['licenseConcluded'] = self.license_concluded.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PackageInfoOccurrence from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comment": obj.get("comment"),
            "filename": obj.get("filename"),
            "homePage": obj.get("homePage"),
            "id": obj.get("id"),
            "licenseConcluded": License.from_dict(obj["licenseConcluded"]) if obj.get("licenseConcluded") is not None else None,
            "packageType": obj.get("packageType"),
            "sourceInfo": obj.get("sourceInfo"),
            "summaryDescription": obj.get("summaryDescription"),
            "title": obj.get("title"),
            "version": obj.get("version")
        })
        return _obj



# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.containeranalysis_google_devtools_cloudbuild_v1_connected_repository import ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository
from openapi_client.models.containeranalysis_google_devtools_cloudbuild_v1_file_hashes import ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes
from openapi_client.models.containeranalysis_google_devtools_cloudbuild_v1_git_source import ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource
from openapi_client.models.containeranalysis_google_devtools_cloudbuild_v1_repo_source import ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource
from openapi_client.models.containeranalysis_google_devtools_cloudbuild_v1_storage_source import ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource
from openapi_client.models.containeranalysis_google_devtools_cloudbuild_v1_storage_source_manifest import ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest
from typing import Optional, Set
from typing_extensions import Self

class ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance(BaseModel):
    """
    Provenance of the source. Ways to find the original source, or verify that some source was used for this build.
    """ # noqa: E501
    file_hashes: Optional[Dict[str, ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes]] = Field(default=None, description="Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.", alias="fileHashes")
    resolved_connected_repository: Optional[ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository] = Field(default=None, alias="resolvedConnectedRepository")
    resolved_git_source: Optional[ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource] = Field(default=None, alias="resolvedGitSource")
    resolved_repo_source: Optional[ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource] = Field(default=None, alias="resolvedRepoSource")
    resolved_storage_source: Optional[ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource] = Field(default=None, alias="resolvedStorageSource")
    resolved_storage_source_manifest: Optional[ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest] = Field(default=None, alias="resolvedStorageSourceManifest")
    __properties: ClassVar[List[str]] = ["fileHashes", "resolvedConnectedRepository", "resolvedGitSource", "resolvedRepoSource", "resolvedStorageSource", "resolvedStorageSourceManifest"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "file_hashes",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in file_hashes (dict)
        _field_dict = {}
        if self.file_hashes:
            for _key_file_hashes in self.file_hashes:
                if self.file_hashes[_key_file_hashes]:
                    _field_dict[_key_file_hashes] = self.file_hashes[_key_file_hashes].to_dict()
            _dict['fileHashes'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of resolved_connected_repository
        if self.resolved_connected_repository:
            _dict['resolvedConnectedRepository'] = self.resolved_connected_repository.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resolved_git_source
        if self.resolved_git_source:
            _dict['resolvedGitSource'] = self.resolved_git_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resolved_repo_source
        if self.resolved_repo_source:
            _dict['resolvedRepoSource'] = self.resolved_repo_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resolved_storage_source
        if self.resolved_storage_source:
            _dict['resolvedStorageSource'] = self.resolved_storage_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resolved_storage_source_manifest
        if self.resolved_storage_source_manifest:
            _dict['resolvedStorageSourceManifest'] = self.resolved_storage_source_manifest.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fileHashes": dict(
                (_k, ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes.from_dict(_v))
                for _k, _v in obj["fileHashes"].items()
            )
            if obj.get("fileHashes") is not None
            else None,
            "resolvedConnectedRepository": ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository.from_dict(obj["resolvedConnectedRepository"]) if obj.get("resolvedConnectedRepository") is not None else None,
            "resolvedGitSource": ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource.from_dict(obj["resolvedGitSource"]) if obj.get("resolvedGitSource") is not None else None,
            "resolvedRepoSource": ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.from_dict(obj["resolvedRepoSource"]) if obj.get("resolvedRepoSource") is not None else None,
            "resolvedStorageSource": ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.from_dict(obj["resolvedStorageSource"]) if obj.get("resolvedStorageSource") is not None else None,
            "resolvedStorageSourceManifest": ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest.from_dict(obj["resolvedStorageSourceManifest"]) if obj.get("resolvedStorageSourceManifest") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.containeranalysis_google_devtools_cloudbuild_v1_artifacts_artifact_objects import ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects
from openapi_client.models.containeranalysis_google_devtools_cloudbuild_v1_artifacts_maven_artifact import ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact
from openapi_client.models.containeranalysis_google_devtools_cloudbuild_v1_artifacts_npm_package import ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage
from openapi_client.models.containeranalysis_google_devtools_cloudbuild_v1_artifacts_python_package import ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage
from typing import Optional, Set
from typing_extensions import Self

class ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts(BaseModel):
    """
    Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
    """ # noqa: E501
    images: Optional[List[StrictStr]] = Field(default=None, description="A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.")
    maven_artifacts: Optional[List[ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact]] = Field(default=None, description="A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any artifacts fail to be pushed, the build is marked FAILURE.", alias="mavenArtifacts")
    npm_packages: Optional[List[ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage]] = Field(default=None, description="A list of npm packages to be uploaded to Artifact Registry upon successful completion of all build steps. Npm packages in the specified paths will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any packages fail to be pushed, the build is marked FAILURE.", alias="npmPackages")
    objects: Optional[ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects] = None
    python_packages: Optional[List[ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage]] = Field(default=None, description="A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE.", alias="pythonPackages")
    __properties: ClassVar[List[str]] = ["images", "mavenArtifacts", "npmPackages", "objects", "pythonPackages"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in maven_artifacts (list)
        _items = []
        if self.maven_artifacts:
            for _item_maven_artifacts in self.maven_artifacts:
                if _item_maven_artifacts:
                    _items.append(_item_maven_artifacts.to_dict())
            _dict['mavenArtifacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in npm_packages (list)
        _items = []
        if self.npm_packages:
            for _item_npm_packages in self.npm_packages:
                if _item_npm_packages:
                    _items.append(_item_npm_packages.to_dict())
            _dict['npmPackages'] = _items
        # override the default output from pydantic by calling `to_dict()` of objects
        if self.objects:
            _dict['objects'] = self.objects.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in python_packages (list)
        _items = []
        if self.python_packages:
            for _item_python_packages in self.python_packages:
                if _item_python_packages:
                    _items.append(_item_python_packages.to_dict())
            _dict['pythonPackages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "images": obj.get("images"),
            "mavenArtifacts": [ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact.from_dict(_item) for _item in obj["mavenArtifacts"]] if obj.get("mavenArtifacts") is not None else None,
            "npmPackages": [ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage.from_dict(_item) for _item in obj["npmPackages"]] if obj.get("npmPackages") is not None else None,
            "objects": ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects.from_dict(obj["objects"]) if obj.get("objects") is not None else None,
            "pythonPackages": [ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage.from_dict(_item) for _item in obj["pythonPackages"]] if obj.get("pythonPackages") is not None else None
        })
        return _obj



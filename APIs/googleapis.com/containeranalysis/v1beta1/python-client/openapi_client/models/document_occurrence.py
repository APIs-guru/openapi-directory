# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DocumentOccurrence(BaseModel):
    """
    DocumentOccurrence represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard", alias="createTime")
    creator_comment: Optional[StrictStr] = Field(default=None, description="A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields", alias="creatorComment")
    creators: Optional[List[StrictStr]] = Field(default=None, description="Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name")
    document_comment: Optional[StrictStr] = Field(default=None, description="A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document", alias="documentComment")
    external_document_refs: Optional[List[StrictStr]] = Field(default=None, description="Identify any external SPDX documents referenced within this SPDX document", alias="externalDocumentRefs")
    id: Optional[StrictStr] = Field(default=None, description="Identify the current SPDX document which may be referenced in relationships by other files, packages internally and documents externally")
    license_list_version: Optional[StrictStr] = Field(default=None, description="A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created", alias="licenseListVersion")
    namespace: Optional[StrictStr] = Field(default=None, description="Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter")
    title: Optional[StrictStr] = Field(default=None, description="Identify name of this document as designated by creator")
    __properties: ClassVar[List[str]] = ["createTime", "creatorComment", "creators", "documentComment", "externalDocumentRefs", "id", "licenseListVersion", "namespace", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentOccurrence from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentOccurrence from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "creatorComment": obj.get("creatorComment"),
            "creators": obj.get("creators"),
            "documentComment": obj.get("documentComment"),
            "externalDocumentRefs": obj.get("externalDocumentRefs"),
            "id": obj.get("id"),
            "licenseListVersion": obj.get("licenseListVersion"),
            "namespace": obj.get("namespace"),
            "title": obj.get("title")
        })
        return _obj



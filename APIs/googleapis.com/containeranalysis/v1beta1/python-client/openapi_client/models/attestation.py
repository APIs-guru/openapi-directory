# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.generic_signed_attestation import GenericSignedAttestation
from openapi_client.models.pgp_signed_attestation import PgpSignedAttestation
from typing import Optional, Set
from typing_extensions import Self

class Attestation(BaseModel):
    """
    Occurrence that represents a single \"attestation\". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for look-up (how to find this attestation if you already know the authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).
    """ # noqa: E501
    generic_signed_attestation: Optional[GenericSignedAttestation] = Field(default=None, alias="genericSignedAttestation")
    pgp_signed_attestation: Optional[PgpSignedAttestation] = Field(default=None, alias="pgpSignedAttestation")
    __properties: ClassVar[List[str]] = ["genericSignedAttestation", "pgpSignedAttestation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Attestation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of generic_signed_attestation
        if self.generic_signed_attestation:
            _dict['genericSignedAttestation'] = self.generic_signed_attestation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pgp_signed_attestation
        if self.pgp_signed_attestation:
            _dict['pgpSignedAttestation'] = self.pgp_signed_attestation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Attestation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "genericSignedAttestation": GenericSignedAttestation.from_dict(obj["genericSignedAttestation"]) if obj.get("genericSignedAttestation") is not None else None,
            "pgpSignedAttestation": PgpSignedAttestation.from_dict(obj["pgpSignedAttestation"]) if obj.get("pgpSignedAttestation") is not None else None
        })
        return _obj



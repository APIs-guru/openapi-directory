# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.artifact_rule import ArtifactRule
from openapi_client.models.signing_key import SigningKey
from typing import Optional, Set
from typing_extensions import Self

class InToto(BaseModel):
    """
    This contains the fields corresponding to the definition of a software supply chain step in an in-toto layout. This information goes into a Grafeas note.
    """ # noqa: E501
    expected_command: Optional[List[StrictStr]] = Field(default=None, description="This field contains the expected command used to perform the step.", alias="expectedCommand")
    expected_materials: Optional[List[ArtifactRule]] = Field(default=None, description="The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.", alias="expectedMaterials")
    expected_products: Optional[List[ArtifactRule]] = Field(default=None, alias="expectedProducts")
    signing_keys: Optional[List[SigningKey]] = Field(default=None, description="This field contains the public keys that can be used to verify the signatures on the step metadata.", alias="signingKeys")
    step_name: Optional[StrictStr] = Field(default=None, description="This field identifies the name of the step in the supply chain.", alias="stepName")
    threshold: Optional[StrictStr] = Field(default=None, description="This field contains a value that indicates the minimum number of keys that need to be used to sign the step's in-toto link.")
    __properties: ClassVar[List[str]] = ["expectedCommand", "expectedMaterials", "expectedProducts", "signingKeys", "stepName", "threshold"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InToto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in expected_materials (list)
        _items = []
        if self.expected_materials:
            for _item_expected_materials in self.expected_materials:
                if _item_expected_materials:
                    _items.append(_item_expected_materials.to_dict())
            _dict['expectedMaterials'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in expected_products (list)
        _items = []
        if self.expected_products:
            for _item_expected_products in self.expected_products:
                if _item_expected_products:
                    _items.append(_item_expected_products.to_dict())
            _dict['expectedProducts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in signing_keys (list)
        _items = []
        if self.signing_keys:
            for _item_signing_keys in self.signing_keys:
                if _item_signing_keys:
                    _items.append(_item_signing_keys.to_dict())
            _dict['signingKeys'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InToto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "expectedCommand": obj.get("expectedCommand"),
            "expectedMaterials": [ArtifactRule.from_dict(_item) for _item in obj["expectedMaterials"]] if obj.get("expectedMaterials") is not None else None,
            "expectedProducts": [ArtifactRule.from_dict(_item) for _item in obj["expectedProducts"]] if obj.get("expectedProducts") is not None else None,
            "signingKeys": [SigningKey.from_dict(_item) for _item in obj["signingKeys"]] if obj.get("signingKeys") is not None else None,
            "stepName": obj.get("stepName"),
            "threshold": obj.get("threshold")
        })
        return _obj



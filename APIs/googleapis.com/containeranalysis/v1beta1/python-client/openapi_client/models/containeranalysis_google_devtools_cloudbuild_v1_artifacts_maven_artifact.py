# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact(BaseModel):
    """
    A Maven artifact to upload to Artifact Registry upon successful completion of all build steps.
    """ # noqa: E501
    artifact_id: Optional[StrictStr] = Field(default=None, description="Maven `artifactId` value used when uploading the artifact to Artifact Registry.", alias="artifactId")
    group_id: Optional[StrictStr] = Field(default=None, description="Maven `groupId` value used when uploading the artifact to Artifact Registry.", alias="groupId")
    path: Optional[StrictStr] = Field(default=None, description="Path to an artifact in the build's workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.")
    repository: Optional[StrictStr] = Field(default=None, description="Artifact Registry repository, in the form \"https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY\" Artifact in the workspace specified by path will be uploaded to Artifact Registry with this location as a prefix.")
    version: Optional[StrictStr] = Field(default=None, description="Maven `version` value used when uploading the artifact to Artifact Registry.")
    __properties: ClassVar[List[str]] = ["artifactId", "groupId", "path", "repository", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "artifactId": obj.get("artifactId"),
            "groupId": obj.get("groupId"),
            "path": obj.get("path"),
            "repository": obj.get("repository"),
            "version": obj.get("version")
        })
        return _obj



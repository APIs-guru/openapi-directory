# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.version import Version
from openapi_client.models.vulnerability_location import VulnerabilityLocation
from typing import Optional, Set
from typing_extensions import Self

class Detail(BaseModel):
    """
    Identifies all appearances of this vulnerability in the package for a specific distro/location. For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
    """ # noqa: E501
    cpe_uri: Optional[StrictStr] = Field(default=None, description="Required. The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.", alias="cpeUri")
    description: Optional[StrictStr] = Field(default=None, description="A vendor-specific description of this note.")
    fixed_location: Optional[VulnerabilityLocation] = Field(default=None, alias="fixedLocation")
    is_obsolete: Optional[StrictBool] = Field(default=None, description="Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.", alias="isObsolete")
    max_affected_version: Optional[Version] = Field(default=None, alias="maxAffectedVersion")
    min_affected_version: Optional[Version] = Field(default=None, alias="minAffectedVersion")
    package: Optional[StrictStr] = Field(default=None, description="Required. The name of the package where the vulnerability was found.")
    package_type: Optional[StrictStr] = Field(default=None, description="The type of package; whether native or non native(ruby gems, node.js packages etc).", alias="packageType")
    severity_name: Optional[StrictStr] = Field(default=None, description="The severity (eg: distro assigned severity) for this vulnerability.", alias="severityName")
    source: Optional[StrictStr] = Field(default=None, description="The source from which the information in this Detail was obtained.")
    source_update_time: Optional[StrictStr] = Field(default=None, description="The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.", alias="sourceUpdateTime")
    vendor: Optional[StrictStr] = Field(default=None, description="The name of the vendor of the product.")
    __properties: ClassVar[List[str]] = ["cpeUri", "description", "fixedLocation", "isObsolete", "maxAffectedVersion", "minAffectedVersion", "package", "packageType", "severityName", "source", "sourceUpdateTime", "vendor"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Detail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fixed_location
        if self.fixed_location:
            _dict['fixedLocation'] = self.fixed_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_affected_version
        if self.max_affected_version:
            _dict['maxAffectedVersion'] = self.max_affected_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_affected_version
        if self.min_affected_version:
            _dict['minAffectedVersion'] = self.min_affected_version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Detail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cpeUri": obj.get("cpeUri"),
            "description": obj.get("description"),
            "fixedLocation": VulnerabilityLocation.from_dict(obj["fixedLocation"]) if obj.get("fixedLocation") is not None else None,
            "isObsolete": obj.get("isObsolete"),
            "maxAffectedVersion": Version.from_dict(obj["maxAffectedVersion"]) if obj.get("maxAffectedVersion") is not None else None,
            "minAffectedVersion": Version.from_dict(obj["minAffectedVersion"]) if obj.get("minAffectedVersion") is not None else None,
            "package": obj.get("package"),
            "packageType": obj.get("packageType"),
            "severityName": obj.get("severityName"),
            "source": obj.get("source"),
            "sourceUpdateTime": obj.get("sourceUpdateTime"),
            "vendor": obj.get("vendor")
        })
        return _obj



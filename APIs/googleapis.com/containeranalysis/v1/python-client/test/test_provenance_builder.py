# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.provenance_builder import ProvenanceBuilder

class TestProvenanceBuilder(unittest.TestCase):
    """ProvenanceBuilder unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ProvenanceBuilder:
        """Test ProvenanceBuilder
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ProvenanceBuilder`
        """
        model = ProvenanceBuilder()
        if include_optional:
            return ProvenanceBuilder(
                builder_dependencies = [
                    openapi_client.models.resource_descriptor.ResourceDescriptor(
                        annotations = {
                            'key' : null
                            }, 
                        content = 'YQ==', 
                        digest = {
                            'key' : ''
                            }, 
                        download_location = '', 
                        media_type = '', 
                        name = '', 
                        uri = '', )
                    ],
                id = '',
                version = {
                    'key' : ''
                    }
            )
        else:
            return ProvenanceBuilder(
        )
        """

    def testProvenanceBuilder(self):
        """Test ProvenanceBuilder"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.build_occurrence import BuildOccurrence

class TestBuildOccurrence(unittest.TestCase):
    """BuildOccurrence unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BuildOccurrence:
        """Test BuildOccurrence
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BuildOccurrence`
        """
        model = BuildOccurrence()
        if include_optional:
            return BuildOccurrence(
                in_toto_slsa_provenance_v1 = openapi_client.models.in_toto_slsa_provenance_v1.InTotoSlsaProvenanceV1(
                    _type = '', 
                    predicate = openapi_client.models.slsa_provenance_v1.SlsaProvenanceV1(
                        build_definition = openapi_client.models.build_definition.BuildDefinition(
                            build_type = '', 
                            external_parameters = {
                                'key' : null
                                }, 
                            internal_parameters = {
                                'key' : null
                                }, 
                            resolved_dependencies = [
                                openapi_client.models.resource_descriptor.ResourceDescriptor(
                                    annotations = {
                                        'key' : null
                                        }, 
                                    content = 'YQ==', 
                                    digest = {
                                        'key' : ''
                                        }, 
                                    download_location = '', 
                                    media_type = '', 
                                    name = '', 
                                    uri = '', )
                                ], ), 
                        run_details = openapi_client.models.run_details.RunDetails(
                            builder = openapi_client.models.provenance_builder.ProvenanceBuilder(
                                builder_dependencies = [
                                    openapi_client.models.resource_descriptor.ResourceDescriptor(
                                        content = 'YQ==', 
                                        download_location = '', 
                                        media_type = '', 
                                        name = '', 
                                        uri = '', )
                                    ], 
                                id = '', 
                                version = {
                                    'key' : ''
                                    }, ), 
                            byproducts = [
                                
                                ], 
                            metadata = openapi_client.models.build_metadata.BuildMetadata(
                                finished_on = '', 
                                invocation_id = '', 
                                started_on = '', ), ), ), 
                    predicate_type = '', 
                    subject = [
                        openapi_client.models.subject.Subject(
                            name = '', )
                        ], ),
                intoto_provenance = openapi_client.models.in_toto_provenance.InTotoProvenance(
                    builder_config = openapi_client.models.builder_config.BuilderConfig(
                        id = '', ), 
                    materials = [
                        ''
                        ], 
                    metadata = openapi_client.models.metadata.Metadata(
                        build_finished_on = '', 
                        build_invocation_id = '', 
                        build_started_on = '', 
                        completeness = openapi_client.models.completeness.Completeness(
                            arguments = True, 
                            environment = True, ), 
                        reproducible = True, ), 
                    recipe = openapi_client.models.recipe.Recipe(
                        arguments = [
                            {
                                'key' : null
                                }
                            ], 
                        defined_in_material = '', 
                        entry_point = '', 
                        environment = [
                            {
                                'key' : null
                                }
                            ], 
                        type = '', ), ),
                intoto_statement = openapi_client.models.in_toto_statement.InTotoStatement(
                    _type = '', 
                    predicate_type = '', 
                    provenance = openapi_client.models.in_toto_provenance.InTotoProvenance(
                        builder_config = openapi_client.models.builder_config.BuilderConfig(
                            id = '', ), 
                        materials = [
                            ''
                            ], 
                        metadata = openapi_client.models.metadata.Metadata(
                            build_finished_on = '', 
                            build_invocation_id = '', 
                            build_started_on = '', 
                            completeness = openapi_client.models.completeness.Completeness(
                                arguments = True, 
                                environment = True, ), 
                            reproducible = True, ), 
                        recipe = openapi_client.models.recipe.Recipe(
                            arguments = [
                                {
                                    'key' : null
                                    }
                                ], 
                            defined_in_material = '', 
                            entry_point = '', 
                            environment = [
                                {
                                    'key' : null
                                    }
                                ], 
                            type = '', ), ), 
                    slsa_provenance = openapi_client.models.slsa_provenance.SlsaProvenance(
                        builder = openapi_client.models.slsa_builder.SlsaBuilder(
                            id = '', ), ), 
                    slsa_provenance_zero_two = openapi_client.models.slsa_provenance_zero_two.SlsaProvenanceZeroTwo(
                        build_config = {
                            'key' : null
                            }, 
                        build_type = '', 
                        invocation = openapi_client.models.grafeas_v1_slsa_provenance_zero_two_slsa_invocation.GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation(
                            config_source = openapi_client.models.grafeas_v1_slsa_provenance_zero_two_slsa_config_source.GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource(
                                digest = {
                                    'key' : ''
                                    }, 
                                entry_point = '', 
                                uri = '', ), 
                            parameters = {
                                'key' : null
                                }, ), ), 
                    subject = [
                        openapi_client.models.subject.Subject(
                            name = '', )
                        ], ),
                provenance = openapi_client.models.build_provenance.BuildProvenance(
                    build_options = {
                        'key' : ''
                        }, 
                    builder_version = '', 
                    built_artifacts = [
                        openapi_client.models.artifact.Artifact(
                            checksum = '', 
                            id = '', 
                            names = [
                                ''
                                ], )
                        ], 
                    commands = [
                        openapi_client.models.command.Command(
                            args = [
                                ''
                                ], 
                            dir = '', 
                            env = [
                                ''
                                ], 
                            id = '', 
                            name = '', 
                            wait_for = [
                                ''
                                ], )
                        ], 
                    create_time = '', 
                    creator = '', 
                    end_time = '', 
                    id = '', 
                    logs_uri = '', 
                    project_id = '', 
                    source_provenance = openapi_client.models.source.Source(
                        additional_contexts = [
                            openapi_client.models.source_context.SourceContext(
                                cloud_repo = openapi_client.models.cloud_repo_source_context.CloudRepoSourceContext(
                                    alias_context = openapi_client.models.alias_context.AliasContext(
                                        kind = 'KIND_UNSPECIFIED', 
                                        name = '', ), 
                                    repo_id = openapi_client.models.repo_id.RepoId(
                                        project_repo_id = openapi_client.models.project_repo_id.ProjectRepoId(
                                            project_id = '', 
                                            repo_name = '', ), 
                                        uid = '', ), 
                                    revision_id = '', ), 
                                gerrit = openapi_client.models.gerrit_source_context.GerritSourceContext(
                                    gerrit_project = '', 
                                    host_uri = '', 
                                    revision_id = '', ), 
                                git = openapi_client.models.git_source_context.GitSourceContext(
                                    revision_id = '', 
                                    url = '', ), 
                                labels = {
                                    'key' : ''
                                    }, )
                            ], 
                        artifact_storage_source_uri = '', 
                        context = openapi_client.models.source_context.SourceContext(), 
                        file_hashes = {
                            'key' : openapi_client.models.file_hashes.FileHashes(
                                file_hash = [
                                    openapi_client.models.hash.Hash(
                                        type = '', 
                                        value = 'YQ==', )
                                    ], )
                            }, ), 
                    start_time = '', 
                    trigger_id = '', ),
                provenance_bytes = ''
            )
        else:
            return BuildOccurrence(
        )
        """

    def testBuildOccurrence(self):
        """Test BuildOccurrence"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.in_toto_provenance import InTotoProvenance

class TestInTotoProvenance(unittest.TestCase):
    """InTotoProvenance unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> InTotoProvenance:
        """Test InTotoProvenance
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `InTotoProvenance`
        """
        model = InTotoProvenance()
        if include_optional:
            return InTotoProvenance(
                builder_config = openapi_client.models.builder_config.BuilderConfig(
                    id = '', ),
                materials = [
                    ''
                    ],
                metadata = openapi_client.models.metadata.Metadata(
                    build_finished_on = '', 
                    build_invocation_id = '', 
                    build_started_on = '', 
                    completeness = openapi_client.models.completeness.Completeness(
                        arguments = True, 
                        environment = True, 
                        materials = True, ), 
                    reproducible = True, ),
                recipe = openapi_client.models.recipe.Recipe(
                    arguments = [
                        {
                            'key' : null
                            }
                        ], 
                    defined_in_material = '', 
                    entry_point = '', 
                    environment = [
                        {
                            'key' : null
                            }
                        ], 
                    type = '', )
            )
        else:
            return InTotoProvenance(
        )
        """

    def testInTotoProvenance(self):
        """Test InTotoProvenance"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

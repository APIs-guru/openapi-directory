# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.batch_create_occurrences_response import BatchCreateOccurrencesResponse

class TestBatchCreateOccurrencesResponse(unittest.TestCase):
    """BatchCreateOccurrencesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BatchCreateOccurrencesResponse:
        """Test BatchCreateOccurrencesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BatchCreateOccurrencesResponse`
        """
        model = BatchCreateOccurrencesResponse()
        if include_optional:
            return BatchCreateOccurrencesResponse(
                occurrences = [
                    openapi_client.models.occurrence.Occurrence(
                        attestation = openapi_client.models.attestation_occurrence.AttestationOccurrence(
                            jwts = [
                                openapi_client.models.jwt.Jwt(
                                    compact_jwt = '', )
                                ], 
                            serialized_payload = 'YQ==', 
                            signatures = [
                                openapi_client.models.signature.Signature(
                                    public_key_id = '', 
                                    signature = 'YQ==', )
                                ], ), 
                        build = openapi_client.models.build_occurrence.BuildOccurrence(
                            in_toto_slsa_provenance_v1 = openapi_client.models.in_toto_slsa_provenance_v1.InTotoSlsaProvenanceV1(
                                _type = '', 
                                predicate = openapi_client.models.slsa_provenance_v1.SlsaProvenanceV1(
                                    build_definition = openapi_client.models.build_definition.BuildDefinition(
                                        build_type = '', 
                                        external_parameters = {
                                            'key' : null
                                            }, 
                                        internal_parameters = {
                                            'key' : null
                                            }, 
                                        resolved_dependencies = [
                                            openapi_client.models.resource_descriptor.ResourceDescriptor(
                                                annotations = {
                                                    'key' : null
                                                    }, 
                                                content = 'YQ==', 
                                                digest = {
                                                    'key' : ''
                                                    }, 
                                                download_location = '', 
                                                media_type = '', 
                                                name = '', 
                                                uri = '', )
                                            ], ), 
                                    run_details = openapi_client.models.run_details.RunDetails(
                                        builder = openapi_client.models.provenance_builder.ProvenanceBuilder(
                                            builder_dependencies = [
                                                openapi_client.models.resource_descriptor.ResourceDescriptor(
                                                    content = 'YQ==', 
                                                    download_location = '', 
                                                    media_type = '', 
                                                    name = '', 
                                                    uri = '', )
                                                ], 
                                            id = '', 
                                            version = {
                                                'key' : ''
                                                }, ), 
                                        byproducts = [
                                            
                                            ], 
                                        metadata = openapi_client.models.build_metadata.BuildMetadata(
                                            finished_on = '', 
                                            invocation_id = '', 
                                            started_on = '', ), ), ), 
                                predicate_type = '', 
                                subject = [
                                    openapi_client.models.subject.Subject(
                                        name = '', )
                                    ], ), 
                            intoto_provenance = openapi_client.models.in_toto_provenance.InTotoProvenance(
                                builder_config = openapi_client.models.builder_config.BuilderConfig(
                                    id = '', ), 
                                materials = [
                                    ''
                                    ], 
                                recipe = openapi_client.models.recipe.Recipe(
                                    arguments = [
                                        {
                                            'key' : null
                                            }
                                        ], 
                                    defined_in_material = '', 
                                    entry_point = '', 
                                    environment = [
                                        {
                                            'key' : null
                                            }
                                        ], 
                                    type = '', ), ), 
                            intoto_statement = openapi_client.models.in_toto_statement.InTotoStatement(
                                _type = '', 
                                predicate_type = '', 
                                provenance = openapi_client.models.in_toto_provenance.InTotoProvenance(), 
                                slsa_provenance = openapi_client.models.slsa_provenance.SlsaProvenance(), 
                                slsa_provenance_zero_two = openapi_client.models.slsa_provenance_zero_two.SlsaProvenanceZeroTwo(
                                    build_config = {
                                        'key' : null
                                        }, 
                                    build_type = '', 
                                    invocation = openapi_client.models.grafeas_v1_slsa_provenance_zero_two_slsa_invocation.GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation(
                                        config_source = openapi_client.models.grafeas_v1_slsa_provenance_zero_two_slsa_config_source.GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource(
                                            entry_point = '', 
                                            uri = '', ), 
                                        parameters = {
                                            'key' : null
                                            }, ), ), ), 
                            provenance = openapi_client.models.build_provenance.BuildProvenance(
                                build_options = {
                                    'key' : ''
                                    }, 
                                builder_version = '', 
                                built_artifacts = [
                                    openapi_client.models.artifact.Artifact(
                                        checksum = '', 
                                        id = '', 
                                        names = [
                                            ''
                                            ], )
                                    ], 
                                commands = [
                                    openapi_client.models.command.Command(
                                        args = [
                                            ''
                                            ], 
                                        dir = '', 
                                        env = [
                                            ''
                                            ], 
                                        id = '', 
                                        name = '', 
                                        wait_for = [
                                            ''
                                            ], )
                                    ], 
                                create_time = '', 
                                creator = '', 
                                end_time = '', 
                                id = '', 
                                logs_uri = '', 
                                project_id = '', 
                                source_provenance = openapi_client.models.source.Source(
                                    additional_contexts = [
                                        openapi_client.models.source_context.SourceContext(
                                            cloud_repo = openapi_client.models.cloud_repo_source_context.CloudRepoSourceContext(
                                                alias_context = openapi_client.models.alias_context.AliasContext(
                                                    kind = 'KIND_UNSPECIFIED', 
                                                    name = '', ), 
                                                repo_id = openapi_client.models.repo_id.RepoId(
                                                    project_repo_id = openapi_client.models.project_repo_id.ProjectRepoId(
                                                        project_id = '', 
                                                        repo_name = '', ), 
                                                    uid = '', ), 
                                                revision_id = '', ), 
                                            gerrit = openapi_client.models.gerrit_source_context.GerritSourceContext(
                                                gerrit_project = '', 
                                                host_uri = '', 
                                                revision_id = '', ), 
                                            git = openapi_client.models.git_source_context.GitSourceContext(
                                                revision_id = '', 
                                                url = '', ), 
                                            labels = {
                                                'key' : ''
                                                }, )
                                        ], 
                                    artifact_storage_source_uri = '', 
                                    context = openapi_client.models.source_context.SourceContext(), 
                                    file_hashes = {
                                        'key' : openapi_client.models.file_hashes.FileHashes(
                                            file_hash = [
                                                openapi_client.models.hash.Hash(
                                                    type = '', 
                                                    value = 'YQ==', )
                                                ], )
                                        }, ), 
                                start_time = '', 
                                trigger_id = '', ), 
                            provenance_bytes = '', ), 
                        compliance = openapi_client.models.compliance_occurrence.ComplianceOccurrence(
                            non_compliance_reason = '', 
                            non_compliant_files = [
                                openapi_client.models.non_compliant_file.NonCompliantFile(
                                    display_command = '', 
                                    path = '', 
                                    reason = '', )
                                ], ), 
                        create_time = '', 
                        deployment = openapi_client.models.deployment_occurrence.DeploymentOccurrence(
                            address = '', 
                            config = '', 
                            deploy_time = '', 
                            platform = 'PLATFORM_UNSPECIFIED', 
                            resource_uri = [
                                ''
                                ], 
                            undeploy_time = '', 
                            user_email = '', ), 
                        discovery = openapi_client.models.discovery_occurrence.DiscoveryOccurrence(
                            analysis_completed = openapi_client.models.analysis_completed.AnalysisCompleted(
                                analysis_type = [
                                    ''
                                    ], ), 
                            analysis_error = [
                                openapi_client.models.status.Status(
                                    code = 56, 
                                    details = [
                                        {
                                            'key' : null
                                            }
                                        ], 
                                    message = '', )
                                ], 
                            analysis_status = 'ANALYSIS_STATUS_UNSPECIFIED', 
                            analysis_status_error = openapi_client.models.status.Status(
                                code = 56, 
                                message = '', ), 
                            archive_time = '', 
                            continuous_analysis = 'CONTINUOUS_ANALYSIS_UNSPECIFIED', 
                            cpe = '', 
                            last_scan_time = '', 
                            sbom_status = openapi_client.models.sbom_status.SBOMStatus(
                                error = '', 
                                sbom_state = 'SBOM_STATE_UNSPECIFIED', ), ), 
                        dsse_attestation = openapi_client.models.dsse_attestation_occurrence.DSSEAttestationOccurrence(
                            envelope = openapi_client.models.envelope.Envelope(
                                payload = 'YQ==', 
                                payload_type = '', ), 
                            statement = openapi_client.models.in_toto_statement.InTotoStatement(
                                _type = '', 
                                predicate_type = '', ), ), 
                        envelope = openapi_client.models.envelope.Envelope(
                            payload = 'YQ==', 
                            payload_type = '', ), 
                        image = openapi_client.models.image_occurrence.ImageOccurrence(
                            base_resource_url = '', 
                            distance = 56, 
                            fingerprint = openapi_client.models.fingerprint.Fingerprint(
                                v1_name = '', 
                                v2_blob = [
                                    ''
                                    ], 
                                v2_name = '', ), 
                            layer_info = [
                                openapi_client.models.layer.Layer(
                                    directive = '', )
                                ], ), 
                        kind = 'NOTE_KIND_UNSPECIFIED', 
                        name = '', 
                        note_name = '', 
                        package = openapi_client.models.package_occurrence.PackageOccurrence(
                            architecture = 'ARCHITECTURE_UNSPECIFIED', 
                            cpe_uri = '', 
                            license = openapi_client.models.license.License(
                                comments = '', 
                                expression = '', ), 
                            location = [
                                openapi_client.models.location.Location(
                                    cpe_uri = '', 
                                    path = '', )
                                ], 
                            name = '', 
                            package_type = '', ), 
                        remediation = '', 
                        resource_uri = '', 
                        sbom_reference = openapi_client.models.sbom_reference_occurrence.SBOMReferenceOccurrence(
                            payload = openapi_client.models.sbom_reference_intoto_payload.SbomReferenceIntotoPayload(
                                _type = '', 
                                predicate_type = '', ), 
                            payload_type = '', ), 
                        update_time = '', 
                        upgrade = openapi_client.models.upgrade_occurrence.UpgradeOccurrence(
                            distribution = openapi_client.models.upgrade_distribution.UpgradeDistribution(
                                classification = '', 
                                cpe_uri = '', 
                                cve = [
                                    ''
                                    ], 
                                severity = '', ), 
                            parsed_version = openapi_client.models.version.Version(
                                epoch = 56, 
                                full_name = '', 
                                inclusive = True, 
                                kind = 'VERSION_KIND_UNSPECIFIED', 
                                name = '', 
                                revision = '', ), 
                            windows_update = openapi_client.models.windows_update.WindowsUpdate(
                                categories = [
                                    openapi_client.models.category.Category(
                                        category_id = '', 
                                        name = '', )
                                    ], 
                                description = '', 
                                identity = openapi_client.models.identity.Identity(
                                    revision = 56, 
                                    update_id = '', ), 
                                kb_article_ids = [
                                    ''
                                    ], 
                                last_published_timestamp = '', 
                                support_url = '', 
                                title = '', ), ), 
                        vulnerability = openapi_client.models.vulnerability_occurrence.VulnerabilityOccurrence(
                            cvss_score = 1.337, 
                            cvss_v2 = openapi_client.models.cvss.CVSS(
                                attack_complexity = 'ATTACK_COMPLEXITY_UNSPECIFIED', 
                                attack_vector = 'ATTACK_VECTOR_UNSPECIFIED', 
                                authentication = 'AUTHENTICATION_UNSPECIFIED', 
                                availability_impact = 'IMPACT_UNSPECIFIED', 
                                base_score = 1.337, 
                                confidentiality_impact = 'IMPACT_UNSPECIFIED', 
                                exploitability_score = 1.337, 
                                impact_score = 1.337, 
                                integrity_impact = 'IMPACT_UNSPECIFIED', 
                                privileges_required = 'PRIVILEGES_REQUIRED_UNSPECIFIED', 
                                scope = 'SCOPE_UNSPECIFIED', 
                                user_interaction = 'USER_INTERACTION_UNSPECIFIED', ), 
                            cvss_version = 'CVSS_VERSION_UNSPECIFIED', 
                            cvssv3 = openapi_client.models.cvss.CVSS(
                                attack_complexity = 'ATTACK_COMPLEXITY_UNSPECIFIED', 
                                attack_vector = 'ATTACK_VECTOR_UNSPECIFIED', 
                                authentication = 'AUTHENTICATION_UNSPECIFIED', 
                                availability_impact = 'IMPACT_UNSPECIFIED', 
                                base_score = 1.337, 
                                confidentiality_impact = 'IMPACT_UNSPECIFIED', 
                                exploitability_score = 1.337, 
                                impact_score = 1.337, 
                                integrity_impact = 'IMPACT_UNSPECIFIED', 
                                privileges_required = 'PRIVILEGES_REQUIRED_UNSPECIFIED', 
                                scope = 'SCOPE_UNSPECIFIED', 
                                user_interaction = 'USER_INTERACTION_UNSPECIFIED', ), 
                            effective_severity = 'SEVERITY_UNSPECIFIED', 
                            extra_details = '', 
                            fix_available = True, 
                            long_description = '', 
                            package_issue = [
                                openapi_client.models.package_issue.PackageIssue(
                                    affected_cpe_uri = '', 
                                    affected_package = '', 
                                    affected_version = openapi_client.models.version.Version(
                                        epoch = 56, 
                                        full_name = '', 
                                        inclusive = True, 
                                        kind = 'VERSION_KIND_UNSPECIFIED', 
                                        name = '', 
                                        revision = '', ), 
                                    effective_severity = 'SEVERITY_UNSPECIFIED', 
                                    file_location = [
                                        openapi_client.models.grafeas_v1_file_location.GrafeasV1FileLocation(
                                            file_path = '', )
                                        ], 
                                    fix_available = True, 
                                    fixed_cpe_uri = '', 
                                    fixed_package = '', 
                                    fixed_version = , 
                                    package_type = '', )
                                ], 
                            related_urls = [
                                openapi_client.models.related_url.RelatedUrl(
                                    label = '', 
                                    url = '', )
                                ], 
                            severity = 'SEVERITY_UNSPECIFIED', 
                            short_description = '', 
                            type = '', 
                            vex_assessment = openapi_client.models.vex_assessment.VexAssessment(
                                impacts = [
                                    ''
                                    ], 
                                justification = openapi_client.models.justification.Justification(
                                    justification_type = 'JUSTIFICATION_TYPE_UNSPECIFIED', ), 
                                note_name = '', 
                                related_uris = [
                                    openapi_client.models.related_url.RelatedUrl(
                                        label = '', 
                                        url = '', )
                                    ], 
                                remediations = [
                                    openapi_client.models.remediation.Remediation(
                                        remediation_type = 'REMEDIATION_TYPE_UNSPECIFIED', 
                                        remediation_uri = , )
                                    ], 
                                state = 'STATE_UNSPECIFIED', 
                                vulnerability_id = '', ), ), )
                    ]
            )
        else:
            return BatchCreateOccurrencesResponse(
        )
        """

    def testBatchCreateOccurrencesResponse(self):
        """Test BatchCreateOccurrencesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

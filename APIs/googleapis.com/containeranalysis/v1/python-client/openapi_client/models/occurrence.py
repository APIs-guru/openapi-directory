# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.attestation_occurrence import AttestationOccurrence
from openapi_client.models.build_occurrence import BuildOccurrence
from openapi_client.models.compliance_occurrence import ComplianceOccurrence
from openapi_client.models.deployment_occurrence import DeploymentOccurrence
from openapi_client.models.discovery_occurrence import DiscoveryOccurrence
from openapi_client.models.dsse_attestation_occurrence import DSSEAttestationOccurrence
from openapi_client.models.envelope import Envelope
from openapi_client.models.image_occurrence import ImageOccurrence
from openapi_client.models.package_occurrence import PackageOccurrence
from openapi_client.models.sbom_reference_occurrence import SBOMReferenceOccurrence
from openapi_client.models.upgrade_occurrence import UpgradeOccurrence
from openapi_client.models.vulnerability_occurrence import VulnerabilityOccurrence
from typing import Optional, Set
from typing_extensions import Self

class Occurrence(BaseModel):
    """
    An instance of an analysis type that has been found on a resource.
    """ # noqa: E501
    attestation: Optional[AttestationOccurrence] = None
    build: Optional[BuildOccurrence] = None
    compliance: Optional[ComplianceOccurrence] = None
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time this occurrence was created.", alias="createTime")
    deployment: Optional[DeploymentOccurrence] = None
    discovery: Optional[DiscoveryOccurrence] = None
    dsse_attestation: Optional[DSSEAttestationOccurrence] = Field(default=None, alias="dsseAttestation")
    envelope: Optional[Envelope] = None
    image: Optional[ImageOccurrence] = None
    kind: Optional[StrictStr] = Field(default=None, description="Output only. This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.")
    note_name: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.", alias="noteName")
    package: Optional[PackageOccurrence] = None
    remediation: Optional[StrictStr] = Field(default=None, description="A description of actions that can be taken to remedy the note.")
    resource_uri: Optional[StrictStr] = Field(default=None, description="Required. Immutable. A URI that represents the resource for which the occurrence applies. For example, `https://gcr.io/project/image@sha256:123abc` for a Docker image.", alias="resourceUri")
    sbom_reference: Optional[SBOMReferenceOccurrence] = Field(default=None, alias="sbomReference")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time this occurrence was last updated.", alias="updateTime")
    upgrade: Optional[UpgradeOccurrence] = None
    vulnerability: Optional[VulnerabilityOccurrence] = None
    __properties: ClassVar[List[str]] = ["attestation", "build", "compliance", "createTime", "deployment", "discovery", "dsseAttestation", "envelope", "image", "kind", "name", "noteName", "package", "remediation", "resourceUri", "sbomReference", "updateTime", "upgrade", "vulnerability"]

    @field_validator('kind')
    def kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NOTE_KIND_UNSPECIFIED', 'VULNERABILITY', 'BUILD', 'IMAGE', 'PACKAGE', 'DEPLOYMENT', 'DISCOVERY', 'ATTESTATION', 'UPGRADE', 'COMPLIANCE', 'DSSE_ATTESTATION', 'VULNERABILITY_ASSESSMENT', 'SBOM_REFERENCE']):
            raise ValueError("must be one of enum values ('NOTE_KIND_UNSPECIFIED', 'VULNERABILITY', 'BUILD', 'IMAGE', 'PACKAGE', 'DEPLOYMENT', 'DISCOVERY', 'ATTESTATION', 'UPGRADE', 'COMPLIANCE', 'DSSE_ATTESTATION', 'VULNERABILITY_ASSESSMENT', 'SBOM_REFERENCE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Occurrence from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attestation
        if self.attestation:
            _dict['attestation'] = self.attestation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of build
        if self.build:
            _dict['build'] = self.build.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compliance
        if self.compliance:
            _dict['compliance'] = self.compliance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deployment
        if self.deployment:
            _dict['deployment'] = self.deployment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discovery
        if self.discovery:
            _dict['discovery'] = self.discovery.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dsse_attestation
        if self.dsse_attestation:
            _dict['dsseAttestation'] = self.dsse_attestation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of envelope
        if self.envelope:
            _dict['envelope'] = self.envelope.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of package
        if self.package:
            _dict['package'] = self.package.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sbom_reference
        if self.sbom_reference:
            _dict['sbomReference'] = self.sbom_reference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upgrade
        if self.upgrade:
            _dict['upgrade'] = self.upgrade.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vulnerability
        if self.vulnerability:
            _dict['vulnerability'] = self.vulnerability.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Occurrence from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attestation": AttestationOccurrence.from_dict(obj["attestation"]) if obj.get("attestation") is not None else None,
            "build": BuildOccurrence.from_dict(obj["build"]) if obj.get("build") is not None else None,
            "compliance": ComplianceOccurrence.from_dict(obj["compliance"]) if obj.get("compliance") is not None else None,
            "createTime": obj.get("createTime"),
            "deployment": DeploymentOccurrence.from_dict(obj["deployment"]) if obj.get("deployment") is not None else None,
            "discovery": DiscoveryOccurrence.from_dict(obj["discovery"]) if obj.get("discovery") is not None else None,
            "dsseAttestation": DSSEAttestationOccurrence.from_dict(obj["dsseAttestation"]) if obj.get("dsseAttestation") is not None else None,
            "envelope": Envelope.from_dict(obj["envelope"]) if obj.get("envelope") is not None else None,
            "image": ImageOccurrence.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "kind": obj.get("kind"),
            "name": obj.get("name"),
            "noteName": obj.get("noteName"),
            "package": PackageOccurrence.from_dict(obj["package"]) if obj.get("package") is not None else None,
            "remediation": obj.get("remediation"),
            "resourceUri": obj.get("resourceUri"),
            "sbomReference": SBOMReferenceOccurrence.from_dict(obj["sbomReference"]) if obj.get("sbomReference") is not None else None,
            "updateTime": obj.get("updateTime"),
            "upgrade": UpgradeOccurrence.from_dict(obj["upgrade"]) if obj.get("upgrade") is not None else None,
            "vulnerability": VulnerabilityOccurrence.from_dict(obj["vulnerability"]) if obj.get("vulnerability") is not None else None
        })
        return _obj



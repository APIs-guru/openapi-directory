# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.containeranalysis_google_devtools_cloudbuild_v1_built_image import ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage
from openapi_client.models.containeranalysis_google_devtools_cloudbuild_v1_time_span import ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
from openapi_client.models.containeranalysis_google_devtools_cloudbuild_v1_uploaded_maven_artifact import ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact
from openapi_client.models.containeranalysis_google_devtools_cloudbuild_v1_uploaded_npm_package import ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage
from openapi_client.models.containeranalysis_google_devtools_cloudbuild_v1_uploaded_python_package import ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage
from typing import Optional, Set
from typing_extensions import Self

class ContaineranalysisGoogleDevtoolsCloudbuildV1Results(BaseModel):
    """
    Artifacts created by the build pipeline.
    """ # noqa: E501
    artifact_manifest: Optional[StrictStr] = Field(default=None, description="Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.", alias="artifactManifest")
    artifact_timing: Optional[ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan] = Field(default=None, alias="artifactTiming")
    build_step_images: Optional[List[StrictStr]] = Field(default=None, description="List of build step digests, in the order corresponding to build step indices.", alias="buildStepImages")
    build_step_outputs: Optional[List[Union[StrictBytes, StrictStr]]] = Field(default=None, description="List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 50KB of data is stored.", alias="buildStepOutputs")
    images: Optional[List[ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage]] = Field(default=None, description="Container images that were built as a part of the build.")
    maven_artifacts: Optional[List[ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact]] = Field(default=None, description="Maven artifacts uploaded to Artifact Registry at the end of the build.", alias="mavenArtifacts")
    npm_packages: Optional[List[ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage]] = Field(default=None, description="Npm packages uploaded to Artifact Registry at the end of the build.", alias="npmPackages")
    num_artifacts: Optional[StrictStr] = Field(default=None, description="Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.", alias="numArtifacts")
    python_packages: Optional[List[ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage]] = Field(default=None, description="Python artifacts uploaded to Artifact Registry at the end of the build.", alias="pythonPackages")
    __properties: ClassVar[List[str]] = ["artifactManifest", "artifactTiming", "buildStepImages", "buildStepOutputs", "images", "mavenArtifacts", "npmPackages", "numArtifacts", "pythonPackages"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContaineranalysisGoogleDevtoolsCloudbuildV1Results from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of artifact_timing
        if self.artifact_timing:
            _dict['artifactTiming'] = self.artifact_timing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item_images in self.images:
                if _item_images:
                    _items.append(_item_images.to_dict())
            _dict['images'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in maven_artifacts (list)
        _items = []
        if self.maven_artifacts:
            for _item_maven_artifacts in self.maven_artifacts:
                if _item_maven_artifacts:
                    _items.append(_item_maven_artifacts.to_dict())
            _dict['mavenArtifacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in npm_packages (list)
        _items = []
        if self.npm_packages:
            for _item_npm_packages in self.npm_packages:
                if _item_npm_packages:
                    _items.append(_item_npm_packages.to_dict())
            _dict['npmPackages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in python_packages (list)
        _items = []
        if self.python_packages:
            for _item_python_packages in self.python_packages:
                if _item_python_packages:
                    _items.append(_item_python_packages.to_dict())
            _dict['pythonPackages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContaineranalysisGoogleDevtoolsCloudbuildV1Results from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "artifactManifest": obj.get("artifactManifest"),
            "artifactTiming": ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan.from_dict(obj["artifactTiming"]) if obj.get("artifactTiming") is not None else None,
            "buildStepImages": obj.get("buildStepImages"),
            "buildStepOutputs": obj.get("buildStepOutputs"),
            "images": [ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage.from_dict(_item) for _item in obj["images"]] if obj.get("images") is not None else None,
            "mavenArtifacts": [ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact.from_dict(_item) for _item in obj["mavenArtifacts"]] if obj.get("mavenArtifacts") is not None else None,
            "npmPackages": [ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage.from_dict(_item) for _item in obj["npmPackages"]] if obj.get("npmPackages") is not None else None,
            "numArtifacts": obj.get("numArtifacts"),
            "pythonPackages": [ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage.from_dict(_item) for _item in obj["pythonPackages"]] if obj.get("pythonPackages") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sbom_reference_intoto_predicate import SbomReferenceIntotoPredicate
from openapi_client.models.subject import Subject
from typing import Optional, Set
from typing_extensions import Self

class SbomReferenceIntotoPayload(BaseModel):
    """
    The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.
    """ # noqa: E501
    type: Optional[StrictStr] = Field(default=None, description="Identifier for the schema of the Statement.", alias="_type")
    predicate: Optional[SbomReferenceIntotoPredicate] = None
    predicate_type: Optional[StrictStr] = Field(default=None, description="URI identifying the type of the Predicate.", alias="predicateType")
    subject: Optional[List[Subject]] = Field(default=None, description="Set of software artifacts that the attestation applies to. Each element represents a single software artifact.")
    __properties: ClassVar[List[str]] = ["_type", "predicate", "predicateType", "subject"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SbomReferenceIntotoPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of predicate
        if self.predicate:
            _dict['predicate'] = self.predicate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in subject (list)
        _items = []
        if self.subject:
            for _item_subject in self.subject:
                if _item_subject:
                    _items.append(_item_subject.to_dict())
            _dict['subject'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SbomReferenceIntotoPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_type": obj.get("_type"),
            "predicate": SbomReferenceIntotoPredicate.from_dict(obj["predicate"]) if obj.get("predicate") is not None else None,
            "predicateType": obj.get("predicateType"),
            "subject": [Subject.from_dict(_item) for _item in obj["subject"]] if obj.get("subject") is not None else None
        })
        return _obj



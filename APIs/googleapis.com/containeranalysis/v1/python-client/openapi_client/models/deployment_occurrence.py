# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeploymentOccurrence(BaseModel):
    """
    The period during which some deployable was active in a runtime.
    """ # noqa: E501
    address: Optional[StrictStr] = Field(default=None, description="Address of the runtime element hosting this deployment.")
    config: Optional[StrictStr] = Field(default=None, description="Configuration used to create this deployment.")
    deploy_time: Optional[StrictStr] = Field(default=None, description="Required. Beginning of the lifetime of this deployment.", alias="deployTime")
    platform: Optional[StrictStr] = Field(default=None, description="Platform hosting this deployment.")
    resource_uri: Optional[List[StrictStr]] = Field(default=None, description="Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.", alias="resourceUri")
    undeploy_time: Optional[StrictStr] = Field(default=None, description="End of the lifetime of this deployment.", alias="undeployTime")
    user_email: Optional[StrictStr] = Field(default=None, description="Identity of the user that triggered this deployment.", alias="userEmail")
    __properties: ClassVar[List[str]] = ["address", "config", "deployTime", "platform", "resourceUri", "undeployTime", "userEmail"]

    @field_validator('platform')
    def platform_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PLATFORM_UNSPECIFIED', 'GKE', 'FLEX', 'CUSTOM']):
            raise ValueError("must be one of enum values ('PLATFORM_UNSPECIFIED', 'GKE', 'FLEX', 'CUSTOM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeploymentOccurrence from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeploymentOccurrence from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "config": obj.get("config"),
            "deployTime": obj.get("deployTime"),
            "platform": obj.get("platform"),
            "resourceUri": obj.get("resourceUri"),
            "undeployTime": obj.get("undeployTime"),
            "userEmail": obj.get("userEmail")
        })
        return _obj



# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.cvss import CVSS
from openapi_client.models.package_issue import PackageIssue
from openapi_client.models.related_url import RelatedUrl
from openapi_client.models.vex_assessment import VexAssessment
from typing import Optional, Set
from typing_extensions import Self

class VulnerabilityOccurrence(BaseModel):
    """
    An occurrence of a severity vulnerability on a resource.
    """ # noqa: E501
    cvss_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.", alias="cvssScore")
    cvss_v2: Optional[CVSS] = Field(default=None, alias="cvssV2")
    cvss_version: Optional[StrictStr] = Field(default=None, description="Output only. CVSS version used to populate cvss_score and severity.", alias="cvssVersion")
    cvssv3: Optional[CVSS] = None
    effective_severity: Optional[StrictStr] = Field(default=None, description="The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.", alias="effectiveSeverity")
    extra_details: Optional[StrictStr] = Field(default=None, description="Occurrence-specific extra details about the vulnerability.", alias="extraDetails")
    fix_available: Optional[StrictBool] = Field(default=None, description="Output only. Whether at least one of the affected packages has a fix available.", alias="fixAvailable")
    long_description: Optional[StrictStr] = Field(default=None, description="Output only. A detailed description of this vulnerability.", alias="longDescription")
    package_issue: Optional[List[PackageIssue]] = Field(default=None, description="Required. The set of affected locations and their fixes (if available) within the associated resource.", alias="packageIssue")
    related_urls: Optional[List[RelatedUrl]] = Field(default=None, description="Output only. URLs related to this vulnerability.", alias="relatedUrls")
    severity: Optional[StrictStr] = Field(default=None, description="Output only. The note provider assigned severity of this vulnerability.")
    short_description: Optional[StrictStr] = Field(default=None, description="Output only. A one sentence description of this vulnerability.", alias="shortDescription")
    type: Optional[StrictStr] = Field(default=None, description="The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).")
    vex_assessment: Optional[VexAssessment] = Field(default=None, alias="vexAssessment")
    __properties: ClassVar[List[str]] = ["cvssScore", "cvssV2", "cvssVersion", "cvssv3", "effectiveSeverity", "extraDetails", "fixAvailable", "longDescription", "packageIssue", "relatedUrls", "severity", "shortDescription", "type", "vexAssessment"]

    @field_validator('cvss_version')
    def cvss_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CVSS_VERSION_UNSPECIFIED', 'CVSS_VERSION_2', 'CVSS_VERSION_3']):
            raise ValueError("must be one of enum values ('CVSS_VERSION_UNSPECIFIED', 'CVSS_VERSION_2', 'CVSS_VERSION_3')")
        return value

    @field_validator('effective_severity')
    def effective_severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SEVERITY_UNSPECIFIED', 'MINIMAL', 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL']):
            raise ValueError("must be one of enum values ('SEVERITY_UNSPECIFIED', 'MINIMAL', 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL')")
        return value

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SEVERITY_UNSPECIFIED', 'MINIMAL', 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL']):
            raise ValueError("must be one of enum values ('SEVERITY_UNSPECIFIED', 'MINIMAL', 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VulnerabilityOccurrence from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cvss_v2
        if self.cvss_v2:
            _dict['cvssV2'] = self.cvss_v2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cvssv3
        if self.cvssv3:
            _dict['cvssv3'] = self.cvssv3.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in package_issue (list)
        _items = []
        if self.package_issue:
            for _item_package_issue in self.package_issue:
                if _item_package_issue:
                    _items.append(_item_package_issue.to_dict())
            _dict['packageIssue'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in related_urls (list)
        _items = []
        if self.related_urls:
            for _item_related_urls in self.related_urls:
                if _item_related_urls:
                    _items.append(_item_related_urls.to_dict())
            _dict['relatedUrls'] = _items
        # override the default output from pydantic by calling `to_dict()` of vex_assessment
        if self.vex_assessment:
            _dict['vexAssessment'] = self.vex_assessment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VulnerabilityOccurrence from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cvssScore": obj.get("cvssScore"),
            "cvssV2": CVSS.from_dict(obj["cvssV2"]) if obj.get("cvssV2") is not None else None,
            "cvssVersion": obj.get("cvssVersion"),
            "cvssv3": CVSS.from_dict(obj["cvssv3"]) if obj.get("cvssv3") is not None else None,
            "effectiveSeverity": obj.get("effectiveSeverity"),
            "extraDetails": obj.get("extraDetails"),
            "fixAvailable": obj.get("fixAvailable"),
            "longDescription": obj.get("longDescription"),
            "packageIssue": [PackageIssue.from_dict(_item) for _item in obj["packageIssue"]] if obj.get("packageIssue") is not None else None,
            "relatedUrls": [RelatedUrl.from_dict(_item) for _item in obj["relatedUrls"]] if obj.get("relatedUrls") is not None else None,
            "severity": obj.get("severity"),
            "shortDescription": obj.get("shortDescription"),
            "type": obj.get("type"),
            "vexAssessment": VexAssessment.from_dict(obj["vexAssessment"]) if obj.get("vexAssessment") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.grafeas_v1_file_location import GrafeasV1FileLocation
from openapi_client.models.version import Version
from typing import Optional, Set
from typing_extensions import Self

class PackageIssue(BaseModel):
    """
    A detail for a distro and package this vulnerability occurrence was found in and its associated fix (if one is available).
    """ # noqa: E501
    affected_cpe_uri: Optional[StrictStr] = Field(default=None, description="Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in.", alias="affectedCpeUri")
    affected_package: Optional[StrictStr] = Field(default=None, description="Required. The package this vulnerability was found in.", alias="affectedPackage")
    affected_version: Optional[Version] = Field(default=None, alias="affectedVersion")
    effective_severity: Optional[StrictStr] = Field(default=None, description="Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.", alias="effectiveSeverity")
    file_location: Optional[List[GrafeasV1FileLocation]] = Field(default=None, description="The location at which this package was found.", alias="fileLocation")
    fix_available: Optional[StrictBool] = Field(default=None, description="Output only. Whether a fix is available for this package.", alias="fixAvailable")
    fixed_cpe_uri: Optional[StrictStr] = Field(default=None, description="The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri.", alias="fixedCpeUri")
    fixed_package: Optional[StrictStr] = Field(default=None, description="The package this vulnerability was fixed in. It is possible for this to be different from the affected_package.", alias="fixedPackage")
    fixed_version: Optional[Version] = Field(default=None, alias="fixedVersion")
    package_type: Optional[StrictStr] = Field(default=None, description="The type of package (e.g. OS, MAVEN, GO).", alias="packageType")
    __properties: ClassVar[List[str]] = ["affectedCpeUri", "affectedPackage", "affectedVersion", "effectiveSeverity", "fileLocation", "fixAvailable", "fixedCpeUri", "fixedPackage", "fixedVersion", "packageType"]

    @field_validator('effective_severity')
    def effective_severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SEVERITY_UNSPECIFIED', 'MINIMAL', 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL']):
            raise ValueError("must be one of enum values ('SEVERITY_UNSPECIFIED', 'MINIMAL', 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PackageIssue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "effective_severity",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of affected_version
        if self.affected_version:
            _dict['affectedVersion'] = self.affected_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in file_location (list)
        _items = []
        if self.file_location:
            for _item_file_location in self.file_location:
                if _item_file_location:
                    _items.append(_item_file_location.to_dict())
            _dict['fileLocation'] = _items
        # override the default output from pydantic by calling `to_dict()` of fixed_version
        if self.fixed_version:
            _dict['fixedVersion'] = self.fixed_version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PackageIssue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "affectedCpeUri": obj.get("affectedCpeUri"),
            "affectedPackage": obj.get("affectedPackage"),
            "affectedVersion": Version.from_dict(obj["affectedVersion"]) if obj.get("affectedVersion") is not None else None,
            "effectiveSeverity": obj.get("effectiveSeverity"),
            "fileLocation": [GrafeasV1FileLocation.from_dict(_item) for _item in obj["fileLocation"]] if obj.get("fileLocation") is not None else None,
            "fixAvailable": obj.get("fixAvailable"),
            "fixedCpeUri": obj.get("fixedCpeUri"),
            "fixedPackage": obj.get("fixedPackage"),
            "fixedVersion": Version.from_dict(obj["fixedVersion"]) if obj.get("fixedVersion") is not None else None,
            "packageType": obj.get("packageType")
        })
        return _obj



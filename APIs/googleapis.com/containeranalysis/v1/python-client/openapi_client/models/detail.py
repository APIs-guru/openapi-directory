# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.version import Version
from typing import Optional, Set
from typing_extensions import Self

class Detail(BaseModel):
    """
    A detail for a distro and package affected by this vulnerability and its associated fix (if one is available).
    """ # noqa: E501
    affected_cpe_uri: Optional[StrictStr] = Field(default=None, description="Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.", alias="affectedCpeUri")
    affected_package: Optional[StrictStr] = Field(default=None, description="Required. The package this vulnerability affects.", alias="affectedPackage")
    affected_version_end: Optional[Version] = Field(default=None, alias="affectedVersionEnd")
    affected_version_start: Optional[Version] = Field(default=None, alias="affectedVersionStart")
    description: Optional[StrictStr] = Field(default=None, description="A vendor-specific description of this vulnerability.")
    fixed_cpe_uri: Optional[StrictStr] = Field(default=None, description="The distro recommended [CPE URI](https://cpe.mitre.org/specification/) to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_cpe_uri.", alias="fixedCpeUri")
    fixed_package: Optional[StrictStr] = Field(default=None, description="The distro recommended package to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_package.", alias="fixedPackage")
    fixed_version: Optional[Version] = Field(default=None, alias="fixedVersion")
    is_obsolete: Optional[StrictBool] = Field(default=None, description="Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.", alias="isObsolete")
    package_type: Optional[StrictStr] = Field(default=None, description="The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).", alias="packageType")
    severity_name: Optional[StrictStr] = Field(default=None, description="The distro assigned severity of this vulnerability.", alias="severityName")
    source: Optional[StrictStr] = Field(default=None, description="The source from which the information in this Detail was obtained.")
    source_update_time: Optional[StrictStr] = Field(default=None, description="The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.", alias="sourceUpdateTime")
    vendor: Optional[StrictStr] = Field(default=None, description="The name of the vendor of the product.")
    __properties: ClassVar[List[str]] = ["affectedCpeUri", "affectedPackage", "affectedVersionEnd", "affectedVersionStart", "description", "fixedCpeUri", "fixedPackage", "fixedVersion", "isObsolete", "packageType", "severityName", "source", "sourceUpdateTime", "vendor"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Detail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of affected_version_end
        if self.affected_version_end:
            _dict['affectedVersionEnd'] = self.affected_version_end.to_dict()
        # override the default output from pydantic by calling `to_dict()` of affected_version_start
        if self.affected_version_start:
            _dict['affectedVersionStart'] = self.affected_version_start.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fixed_version
        if self.fixed_version:
            _dict['fixedVersion'] = self.fixed_version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Detail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "affectedCpeUri": obj.get("affectedCpeUri"),
            "affectedPackage": obj.get("affectedPackage"),
            "affectedVersionEnd": Version.from_dict(obj["affectedVersionEnd"]) if obj.get("affectedVersionEnd") is not None else None,
            "affectedVersionStart": Version.from_dict(obj["affectedVersionStart"]) if obj.get("affectedVersionStart") is not None else None,
            "description": obj.get("description"),
            "fixedCpeUri": obj.get("fixedCpeUri"),
            "fixedPackage": obj.get("fixedPackage"),
            "fixedVersion": Version.from_dict(obj["fixedVersion"]) if obj.get("fixedVersion") is not None else None,
            "isObsolete": obj.get("isObsolete"),
            "packageType": obj.get("packageType"),
            "severityName": obj.get("severityName"),
            "source": obj.get("source"),
            "sourceUpdateTime": obj.get("sourceUpdateTime"),
            "vendor": obj.get("vendor")
        })
        return _obj



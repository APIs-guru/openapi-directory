# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.grafeas_v1_slsa_provenance_zero_two_slsa_builder import GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder
from openapi_client.models.grafeas_v1_slsa_provenance_zero_two_slsa_invocation import GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation
from openapi_client.models.grafeas_v1_slsa_provenance_zero_two_slsa_material import GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial
from openapi_client.models.grafeas_v1_slsa_provenance_zero_two_slsa_metadata import GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata
from typing import Optional, Set
from typing_extensions import Self

class SlsaProvenanceZeroTwo(BaseModel):
    """
    See full explanation of fields at slsa.dev/provenance/v0.2.
    """ # noqa: E501
    build_config: Optional[Dict[str, Any]] = Field(default=None, alias="buildConfig")
    build_type: Optional[StrictStr] = Field(default=None, alias="buildType")
    builder: Optional[GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder] = None
    invocation: Optional[GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation] = None
    materials: Optional[List[GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial]] = None
    metadata: Optional[GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata] = None
    __properties: ClassVar[List[str]] = ["buildConfig", "buildType", "builder", "invocation", "materials", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SlsaProvenanceZeroTwo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of builder
        if self.builder:
            _dict['builder'] = self.builder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invocation
        if self.invocation:
            _dict['invocation'] = self.invocation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in materials (list)
        _items = []
        if self.materials:
            for _item_materials in self.materials:
                if _item_materials:
                    _items.append(_item_materials.to_dict())
            _dict['materials'] = _items
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SlsaProvenanceZeroTwo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buildConfig": obj.get("buildConfig"),
            "buildType": obj.get("buildType"),
            "builder": GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder.from_dict(obj["builder"]) if obj.get("builder") is not None else None,
            "invocation": GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation.from_dict(obj["invocation"]) if obj.get("invocation") is not None else None,
            "materials": [GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial.from_dict(_item) for _item in obj["materials"]] if obj.get("materials") is not None else None,
            "metadata": GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Container Analysis API

    This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.containeranalysis_google_devtools_cloudbuild_v1_inline_secret import ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret
from openapi_client.models.containeranalysis_google_devtools_cloudbuild_v1_secret_manager_secret import ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret
from typing import Optional, Set
from typing_extensions import Self

class ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets(BaseModel):
    """
    Secrets and secret environment variables.
    """ # noqa: E501
    inline: Optional[List[ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret]] = Field(default=None, description="Secrets encrypted with KMS key and the associated secret environment variable.")
    secret_manager: Optional[List[ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret]] = Field(default=None, description="Secrets in Secret Manager and associated secret environment variable.", alias="secretManager")
    __properties: ClassVar[List[str]] = ["inline", "secretManager"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in inline (list)
        _items = []
        if self.inline:
            for _item_inline in self.inline:
                if _item_inline:
                    _items.append(_item_inline.to_dict())
            _dict['inline'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in secret_manager (list)
        _items = []
        if self.secret_manager:
            for _item_secret_manager in self.secret_manager:
                if _item_secret_manager:
                    _items.append(_item_secret_manager.to_dict())
            _dict['secretManager'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "inline": [ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret.from_dict(_item) for _item in obj["inline"]] if obj.get("inline") is not None else None,
            "secretManager": [ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret.from_dict(_item) for _item in obj["secretManager"]] if obj.get("secretManager") is not None else None
        })
        return _obj



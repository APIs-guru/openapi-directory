# coding: utf-8

"""
    AI Platform Training & Prediction API

    An API to enable creating and using machine learning models.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_ml_v1_add_trial_measurement_request import GoogleCloudMlV1AddTrialMeasurementRequest

class TestGoogleCloudMlV1AddTrialMeasurementRequest(unittest.TestCase):
    """GoogleCloudMlV1AddTrialMeasurementRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudMlV1AddTrialMeasurementRequest:
        """Test GoogleCloudMlV1AddTrialMeasurementRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudMlV1AddTrialMeasurementRequest`
        """
        model = GoogleCloudMlV1AddTrialMeasurementRequest()
        if include_optional:
            return GoogleCloudMlV1AddTrialMeasurementRequest(
                measurement = openapi_client.models.google_cloud_ml_v1__measurement.GoogleCloudMlV1__Measurement(
                    elapsed_time = '', 
                    metrics = [
                        openapi_client.models.google_cloud_ml_v1_measurement_metric.GoogleCloudMlV1_Measurement_Metric(
                            metric = '', 
                            value = 1.337, )
                        ], 
                    step_count = '', )
            )
        else:
            return GoogleCloudMlV1AddTrialMeasurementRequest(
        )
        """

    def testGoogleCloudMlV1AddTrialMeasurementRequest(self):
        """Test GoogleCloudMlV1AddTrialMeasurementRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    AI Platform Training & Prediction API

    An API to enable creating and using machine learning models.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_ml_v1_explanation_config import GoogleCloudMlV1ExplanationConfig

class TestGoogleCloudMlV1ExplanationConfig(unittest.TestCase):
    """GoogleCloudMlV1ExplanationConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudMlV1ExplanationConfig:
        """Test GoogleCloudMlV1ExplanationConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudMlV1ExplanationConfig`
        """
        model = GoogleCloudMlV1ExplanationConfig()
        if include_optional:
            return GoogleCloudMlV1ExplanationConfig(
                integrated_gradients_attribution = openapi_client.models.google_cloud_ml_v1__integrated_gradients_attribution.GoogleCloudMlV1__IntegratedGradientsAttribution(
                    num_integral_steps = 56, ),
                sampled_shapley_attribution = openapi_client.models.google_cloud_ml_v1__sampled_shapley_attribution.GoogleCloudMlV1__SampledShapleyAttribution(
                    num_paths = 56, ),
                xrai_attribution = openapi_client.models.google_cloud_ml_v1__xrai_attribution.GoogleCloudMlV1__XraiAttribution(
                    num_integral_steps = 56, )
            )
        else:
            return GoogleCloudMlV1ExplanationConfig(
        )
        """

    def testGoogleCloudMlV1ExplanationConfig(self):
        """Test GoogleCloudMlV1ExplanationConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

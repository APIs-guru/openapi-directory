# coding: utf-8

"""
    AI Platform Training & Prediction API

    An API to enable creating and using machine learning models.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_ml_v1_built_in_algorithm_output import GoogleCloudMlV1BuiltInAlgorithmOutput
from openapi_client.models.google_cloud_ml_v1_hyperparameter_output import GoogleCloudMlV1HyperparameterOutput
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudMlV1TrainingOutput(BaseModel):
    """
    Represents results of a training job. Output only.
    """ # noqa: E501
    built_in_algorithm_output: Optional[GoogleCloudMlV1BuiltInAlgorithmOutput] = Field(default=None, alias="builtInAlgorithmOutput")
    completed_trial_count: Optional[StrictStr] = Field(default=None, description="The number of hyperparameter tuning trials that completed successfully. Only set for hyperparameter tuning jobs.", alias="completedTrialCount")
    consumed_ml_units: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of ML units consumed by the job.", alias="consumedMLUnits")
    hyperparameter_metric_tag: Optional[StrictStr] = Field(default=None, description="The TensorFlow summary tag name used for optimizing hyperparameter tuning trials. See [`HyperparameterSpec.hyperparameterMetricTag`](#HyperparameterSpec.FIELDS.hyperparameter_metric_tag) for more information. Only set for hyperparameter tuning jobs.", alias="hyperparameterMetricTag")
    is_built_in_algorithm_job: Optional[StrictBool] = Field(default=None, description="Whether this job is a built-in Algorithm job.", alias="isBuiltInAlgorithmJob")
    is_hyperparameter_tuning_job: Optional[StrictBool] = Field(default=None, description="Whether this job is a hyperparameter tuning job.", alias="isHyperparameterTuningJob")
    trials: Optional[List[GoogleCloudMlV1HyperparameterOutput]] = Field(default=None, description="Results for individual Hyperparameter trials. Only set for hyperparameter tuning jobs.")
    web_access_uris: Optional[Dict[str, StrictStr]] = Field(default=None, description="Output only. URIs for accessing [interactive shells](https://cloud.google.com/ai-platform/training/docs/monitor-debug-interactive-shell) (one URI for each training node). Only available if training_input.enable_web_access is `true`. The keys are names of each node in the training job; for example, `master-replica-0` for the master node, `worker-replica-0` for the first worker, and `ps-replica-0` for the first parameter server. The values are the URIs for each node's interactive shell.", alias="webAccessUris")
    __properties: ClassVar[List[str]] = ["builtInAlgorithmOutput", "completedTrialCount", "consumedMLUnits", "hyperparameterMetricTag", "isBuiltInAlgorithmJob", "isHyperparameterTuningJob", "trials", "webAccessUris"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudMlV1TrainingOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "web_access_uris",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of built_in_algorithm_output
        if self.built_in_algorithm_output:
            _dict['builtInAlgorithmOutput'] = self.built_in_algorithm_output.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in trials (list)
        _items = []
        if self.trials:
            for _item_trials in self.trials:
                if _item_trials:
                    _items.append(_item_trials.to_dict())
            _dict['trials'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudMlV1TrainingOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "builtInAlgorithmOutput": GoogleCloudMlV1BuiltInAlgorithmOutput.from_dict(obj["builtInAlgorithmOutput"]) if obj.get("builtInAlgorithmOutput") is not None else None,
            "completedTrialCount": obj.get("completedTrialCount"),
            "consumedMLUnits": obj.get("consumedMLUnits"),
            "hyperparameterMetricTag": obj.get("hyperparameterMetricTag"),
            "isBuiltInAlgorithmJob": obj.get("isBuiltInAlgorithmJob"),
            "isHyperparameterTuningJob": obj.get("isHyperparameterTuningJob"),
            "trials": [GoogleCloudMlV1HyperparameterOutput.from_dict(_item) for _item in obj["trials"]] if obj.get("trials") is not None else None,
            "webAccessUris": obj.get("webAccessUris")
        })
        return _obj



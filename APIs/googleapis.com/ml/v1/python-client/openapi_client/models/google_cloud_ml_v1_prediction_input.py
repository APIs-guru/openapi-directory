# coding: utf-8

"""
    AI Platform Training & Prediction API

    An API to enable creating and using machine learning models.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudMlV1PredictionInput(BaseModel):
    """
    Represents input parameters for a prediction job.
    """ # noqa: E501
    batch_size: Optional[StrictStr] = Field(default=None, description="Optional. Number of records per batch, defaults to 64. The service will buffer batch_size number of records in memory before invoking one Tensorflow prediction call internally. So take the record size and memory available into consideration when setting this parameter.", alias="batchSize")
    data_format: Optional[StrictStr] = Field(default=None, description="Required. The format of the input data files.", alias="dataFormat")
    input_paths: Optional[List[StrictStr]] = Field(default=None, description="Required. The Cloud Storage location of the input data files. May contain wildcards.", alias="inputPaths")
    max_worker_count: Optional[StrictStr] = Field(default=None, description="Optional. The maximum number of workers to be used for parallel processing. Defaults to 10 if not specified.", alias="maxWorkerCount")
    model_name: Optional[StrictStr] = Field(default=None, description="Use this field if you want to use the default version for the specified model. The string must use the following format: `\"projects/YOUR_PROJECT/models/YOUR_MODEL\"`", alias="modelName")
    output_data_format: Optional[StrictStr] = Field(default=None, description="Optional. Format of the output data files, defaults to JSON.", alias="outputDataFormat")
    output_path: Optional[StrictStr] = Field(default=None, description="Required. The output Google Cloud Storage location.", alias="outputPath")
    region: Optional[StrictStr] = Field(default=None, description="Required. The Google Compute Engine region to run the prediction job in. See the available regions for AI Platform services.")
    runtime_version: Optional[StrictStr] = Field(default=None, description="Optional. The AI Platform runtime version to use for this batch prediction. If not set, AI Platform will pick the runtime version used during the CreateVersion request for this model version, or choose the latest stable version when model version information is not available such as when the model is specified by uri.", alias="runtimeVersion")
    signature_name: Optional[StrictStr] = Field(default=None, description="Optional. The name of the signature defined in the SavedModel to use for this job. Please refer to [SavedModel](https://tensorflow.github.io/serving/serving_basic.html) for information about how to use signatures. Defaults to [DEFAULT_SERVING_SIGNATURE_DEF_KEY](https://www.tensorflow.org/api_docs/python/tf/saved_model/signature_constants) , which is \"serving_default\".", alias="signatureName")
    uri: Optional[StrictStr] = Field(default=None, description="Use this field if you want to specify a Google Cloud Storage path for the model to use.")
    version_name: Optional[StrictStr] = Field(default=None, description="Use this field if you want to specify a version of the model to use. The string is formatted the same way as `model_version`, with the addition of the version information: `\"projects/YOUR_PROJECT/models/YOUR_MODEL/versions/YOUR_VERSION\"`", alias="versionName")
    __properties: ClassVar[List[str]] = ["batchSize", "dataFormat", "inputPaths", "maxWorkerCount", "modelName", "outputDataFormat", "outputPath", "region", "runtimeVersion", "signatureName", "uri", "versionName"]

    @field_validator('data_format')
    def data_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_FORMAT_UNSPECIFIED', 'JSON', 'TEXT', 'TF_RECORD', 'TF_RECORD_GZIP', 'CSV']):
            raise ValueError("must be one of enum values ('DATA_FORMAT_UNSPECIFIED', 'JSON', 'TEXT', 'TF_RECORD', 'TF_RECORD_GZIP', 'CSV')")
        return value

    @field_validator('output_data_format')
    def output_data_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_FORMAT_UNSPECIFIED', 'JSON', 'TEXT', 'TF_RECORD', 'TF_RECORD_GZIP', 'CSV']):
            raise ValueError("must be one of enum values ('DATA_FORMAT_UNSPECIFIED', 'JSON', 'TEXT', 'TF_RECORD', 'TF_RECORD_GZIP', 'CSV')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudMlV1PredictionInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudMlV1PredictionInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "batchSize": obj.get("batchSize"),
            "dataFormat": obj.get("dataFormat"),
            "inputPaths": obj.get("inputPaths"),
            "maxWorkerCount": obj.get("maxWorkerCount"),
            "modelName": obj.get("modelName"),
            "outputDataFormat": obj.get("outputDataFormat"),
            "outputPath": obj.get("outputPath"),
            "region": obj.get("region"),
            "runtimeVersion": obj.get("runtimeVersion"),
            "signatureName": obj.get("signatureName"),
            "uri": obj.get("uri"),
            "versionName": obj.get("versionName")
        })
        return _obj



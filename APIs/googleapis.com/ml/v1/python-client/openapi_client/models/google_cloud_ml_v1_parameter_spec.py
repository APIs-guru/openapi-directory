# coding: utf-8

"""
    AI Platform Training & Prediction API

    An API to enable creating and using machine learning models.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudMlV1ParameterSpec(BaseModel):
    """
    Represents a single hyperparameter to optimize.
    """ # noqa: E501
    categorical_values: Optional[List[StrictStr]] = Field(default=None, description="Required if type is `CATEGORICAL`. The list of possible categories.", alias="categoricalValues")
    discrete_values: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Required if type is `DISCRETE`. A list of feasible points. The list should be in strictly increasing order. For instance, this parameter might have possible settings of 1.5, 2.5, and 4.0. This list should not contain more than 1,000 values.", alias="discreteValues")
    max_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is `INTEGER`.", alias="maxValue")
    min_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is INTEGER.", alias="minValue")
    parameter_name: Optional[StrictStr] = Field(default=None, description="Required. The parameter name must be unique amongst all ParameterConfigs in a HyperparameterSpec message. E.g., \"learning_rate\".", alias="parameterName")
    scale_type: Optional[StrictStr] = Field(default=None, description="Optional. How the parameter should be scaled to the hypercube. Leave unset for categorical parameters. Some kind of scaling is strongly recommended for real or integral parameters (e.g., `UNIT_LINEAR_SCALE`).", alias="scaleType")
    type: Optional[StrictStr] = Field(default=None, description="Required. The type of the parameter.")
    __properties: ClassVar[List[str]] = ["categoricalValues", "discreteValues", "maxValue", "minValue", "parameterName", "scaleType", "type"]

    @field_validator('scale_type')
    def scale_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE', 'UNIT_LINEAR_SCALE', 'UNIT_LOG_SCALE', 'UNIT_REVERSE_LOG_SCALE']):
            raise ValueError("must be one of enum values ('NONE', 'UNIT_LINEAR_SCALE', 'UNIT_LOG_SCALE', 'UNIT_REVERSE_LOG_SCALE')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PARAMETER_TYPE_UNSPECIFIED', 'DOUBLE', 'INTEGER', 'CATEGORICAL', 'DISCRETE']):
            raise ValueError("must be one of enum values ('PARAMETER_TYPE_UNSPECIFIED', 'DOUBLE', 'INTEGER', 'CATEGORICAL', 'DISCRETE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudMlV1ParameterSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudMlV1ParameterSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "categoricalValues": obj.get("categoricalValues"),
            "discreteValues": obj.get("discreteValues"),
            "maxValue": obj.get("maxValue"),
            "minValue": obj.get("minValue"),
            "parameterName": obj.get("parameterName"),
            "scaleType": obj.get("scaleType"),
            "type": obj.get("type")
        })
        return _obj



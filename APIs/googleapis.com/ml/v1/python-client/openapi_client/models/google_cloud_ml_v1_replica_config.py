# coding: utf-8

"""
    AI Platform Training & Prediction API

    An API to enable creating and using machine learning models.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_ml_v1_accelerator_config import GoogleCloudMlV1AcceleratorConfig
from openapi_client.models.google_cloud_ml_v1_disk_config import GoogleCloudMlV1DiskConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudMlV1ReplicaConfig(BaseModel):
    """
    Represents the configuration for a replica in a cluster.
    """ # noqa: E501
    accelerator_config: Optional[GoogleCloudMlV1AcceleratorConfig] = Field(default=None, alias="acceleratorConfig")
    container_args: Optional[List[StrictStr]] = Field(default=None, description="Arguments to the entrypoint command. The following rules apply for container_command and container_args: - If you do not supply command or args: The defaults defined in the Docker image are used. - If you supply a command but no args: The default EntryPoint and the default Cmd defined in the Docker image are ignored. Your command is run without any arguments. - If you supply only args: The default Entrypoint defined in the Docker image is run with the args that you supplied. - If you supply a command and args: The default Entrypoint and the default Cmd defined in the Docker image are ignored. Your command is run with your args. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.", alias="containerArgs")
    container_command: Optional[List[StrictStr]] = Field(default=None, description="The command with which the replica's custom container is run. If provided, it will override default ENTRYPOINT of the docker image. If not provided, the docker image's ENTRYPOINT is used. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.", alias="containerCommand")
    disk_config: Optional[GoogleCloudMlV1DiskConfig] = Field(default=None, alias="diskConfig")
    image_uri: Optional[StrictStr] = Field(default=None, description="The Docker image to run on the replica. This image must be in Container Registry. Learn more about [configuring custom containers](/ai-platform/training/docs/distributed-training-containers).", alias="imageUri")
    tpu_tf_version: Optional[StrictStr] = Field(default=None, description="The AI Platform runtime version that includes a TensorFlow version matching the one used in the custom container. This field is required if the replica is a TPU worker that uses a custom container. Otherwise, do not specify this field. This must be a [runtime version that currently supports training with TPUs](/ml-engine/docs/tensorflow/runtime-version-list#tpu-support). Note that the version of TensorFlow included in a runtime version may differ from the numbering of the runtime version itself, because it may have a different [patch version](https://www.tensorflow.org/guide/version_compat#semantic_versioning_20). In this field, you must specify the runtime version (TensorFlow minor version). For example, if your custom container runs TensorFlow `1.x.y`, specify `1.x`.", alias="tpuTfVersion")
    __properties: ClassVar[List[str]] = ["acceleratorConfig", "containerArgs", "containerCommand", "diskConfig", "imageUri", "tpuTfVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudMlV1ReplicaConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of accelerator_config
        if self.accelerator_config:
            _dict['acceleratorConfig'] = self.accelerator_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of disk_config
        if self.disk_config:
            _dict['diskConfig'] = self.disk_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudMlV1ReplicaConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acceleratorConfig": GoogleCloudMlV1AcceleratorConfig.from_dict(obj["acceleratorConfig"]) if obj.get("acceleratorConfig") is not None else None,
            "containerArgs": obj.get("containerArgs"),
            "containerCommand": obj.get("containerCommand"),
            "diskConfig": GoogleCloudMlV1DiskConfig.from_dict(obj["diskConfig"]) if obj.get("diskConfig") is not None else None,
            "imageUri": obj.get("imageUri"),
            "tpuTfVersion": obj.get("tpuTfVersion")
        })
        return _obj



# coding: utf-8

"""
    AI Platform Training & Prediction API

    An API to enable creating and using machine learning models.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_ml_v1_built_in_algorithm_output import GoogleCloudMlV1BuiltInAlgorithmOutput
from openapi_client.models.google_cloud_ml_v1_hyperparameter_output_hyperparameter_metric import GoogleCloudMlV1HyperparameterOutputHyperparameterMetric
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudMlV1HyperparameterOutput(BaseModel):
    """
    Represents the result of a single hyperparameter tuning trial from a training job. The TrainingOutput object that is returned on successful completion of a training job with hyperparameter tuning includes a list of HyperparameterOutput objects, one for each successful trial.
    """ # noqa: E501
    all_metrics: Optional[List[GoogleCloudMlV1HyperparameterOutputHyperparameterMetric]] = Field(default=None, description="All recorded object metrics for this trial. This field is not currently populated.", alias="allMetrics")
    built_in_algorithm_output: Optional[GoogleCloudMlV1BuiltInAlgorithmOutput] = Field(default=None, alias="builtInAlgorithmOutput")
    end_time: Optional[StrictStr] = Field(default=None, description="Output only. End time for the trial.", alias="endTime")
    final_metric: Optional[GoogleCloudMlV1HyperparameterOutputHyperparameterMetric] = Field(default=None, alias="finalMetric")
    hyperparameters: Optional[Dict[str, StrictStr]] = Field(default=None, description="The hyperparameters given to this trial.")
    is_trial_stopped_early: Optional[StrictBool] = Field(default=None, description="True if the trial is stopped early.", alias="isTrialStoppedEarly")
    start_time: Optional[StrictStr] = Field(default=None, description="Output only. Start time for the trial.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The detailed state of the trial.")
    trial_id: Optional[StrictStr] = Field(default=None, description="The trial id for these results.", alias="trialId")
    web_access_uris: Optional[Dict[str, StrictStr]] = Field(default=None, description="URIs for accessing [interactive shells](https://cloud.google.com/ai-platform/training/docs/monitor-debug-interactive-shell) (one URI for each training node). Only available if this trial is part of a hyperparameter tuning job and the job's training_input.enable_web_access is `true`. The keys are names of each node in the training job; for example, `master-replica-0` for the master node, `worker-replica-0` for the first worker, and `ps-replica-0` for the first parameter server. The values are the URIs for each node's interactive shell.", alias="webAccessUris")
    __properties: ClassVar[List[str]] = ["allMetrics", "builtInAlgorithmOutput", "endTime", "finalMetric", "hyperparameters", "isTrialStoppedEarly", "startTime", "state", "trialId", "webAccessUris"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'QUEUED', 'PREPARING', 'RUNNING', 'SUCCEEDED', 'FAILED', 'CANCELLING', 'CANCELLED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'QUEUED', 'PREPARING', 'RUNNING', 'SUCCEEDED', 'FAILED', 'CANCELLING', 'CANCELLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudMlV1HyperparameterOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in all_metrics (list)
        _items = []
        if self.all_metrics:
            for _item_all_metrics in self.all_metrics:
                if _item_all_metrics:
                    _items.append(_item_all_metrics.to_dict())
            _dict['allMetrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of built_in_algorithm_output
        if self.built_in_algorithm_output:
            _dict['builtInAlgorithmOutput'] = self.built_in_algorithm_output.to_dict()
        # override the default output from pydantic by calling `to_dict()` of final_metric
        if self.final_metric:
            _dict['finalMetric'] = self.final_metric.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudMlV1HyperparameterOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allMetrics": [GoogleCloudMlV1HyperparameterOutputHyperparameterMetric.from_dict(_item) for _item in obj["allMetrics"]] if obj.get("allMetrics") is not None else None,
            "builtInAlgorithmOutput": GoogleCloudMlV1BuiltInAlgorithmOutput.from_dict(obj["builtInAlgorithmOutput"]) if obj.get("builtInAlgorithmOutput") is not None else None,
            "endTime": obj.get("endTime"),
            "finalMetric": GoogleCloudMlV1HyperparameterOutputHyperparameterMetric.from_dict(obj["finalMetric"]) if obj.get("finalMetric") is not None else None,
            "hyperparameters": obj.get("hyperparameters"),
            "isTrialStoppedEarly": obj.get("isTrialStoppedEarly"),
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "trialId": obj.get("trialId"),
            "webAccessUris": obj.get("webAccessUris")
        })
        return _obj



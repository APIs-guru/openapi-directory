# coding: utf-8

"""
    AI Platform Training & Prediction API

    An API to enable creating and using machine learning models.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_ml_v1_study_config_parameter_spec_categorical_value_spec import GoogleCloudMlV1StudyConfigParameterSpecCategoricalValueSpec
from openapi_client.models.google_cloud_ml_v1_study_config_parameter_spec_discrete_value_spec import GoogleCloudMlV1StudyConfigParameterSpecDiscreteValueSpec
from openapi_client.models.google_cloud_ml_v1_study_config_parameter_spec_double_value_spec import GoogleCloudMlV1StudyConfigParameterSpecDoubleValueSpec
from openapi_client.models.google_cloud_ml_v1_study_config_parameter_spec_integer_value_spec import GoogleCloudMlV1StudyConfigParameterSpecIntegerValueSpec
from openapi_client.models.google_cloud_ml_v1_study_config_parameter_spec_matching_parent_categorical_value_spec import GoogleCloudMlV1StudyConfigParameterSpecMatchingParentCategoricalValueSpec
from openapi_client.models.google_cloud_ml_v1_study_config_parameter_spec_matching_parent_discrete_value_spec import GoogleCloudMlV1StudyConfigParameterSpecMatchingParentDiscreteValueSpec
from openapi_client.models.google_cloud_ml_v1_study_config_parameter_spec_matching_parent_int_value_spec import GoogleCloudMlV1StudyConfigParameterSpecMatchingParentIntValueSpec
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudMlV1StudyConfigParameterSpec(BaseModel):
    """
    Represents a single parameter to optimize.
    """ # noqa: E501
    categorical_value_spec: Optional[GoogleCloudMlV1StudyConfigParameterSpecCategoricalValueSpec] = Field(default=None, alias="categoricalValueSpec")
    child_parameter_specs: Optional[List[GoogleCloudMlV1StudyConfigParameterSpec]] = Field(default=None, description="A child node is active if the parameter's value matches the child node's matching_parent_values. If two items in child_parameter_specs have the same name, they must have disjoint matching_parent_values.", alias="childParameterSpecs")
    discrete_value_spec: Optional[GoogleCloudMlV1StudyConfigParameterSpecDiscreteValueSpec] = Field(default=None, alias="discreteValueSpec")
    double_value_spec: Optional[GoogleCloudMlV1StudyConfigParameterSpecDoubleValueSpec] = Field(default=None, alias="doubleValueSpec")
    integer_value_spec: Optional[GoogleCloudMlV1StudyConfigParameterSpecIntegerValueSpec] = Field(default=None, alias="integerValueSpec")
    parameter: Optional[StrictStr] = Field(default=None, description="Required. The parameter name must be unique amongst all ParameterSpecs.")
    parent_categorical_values: Optional[GoogleCloudMlV1StudyConfigParameterSpecMatchingParentCategoricalValueSpec] = Field(default=None, alias="parentCategoricalValues")
    parent_discrete_values: Optional[GoogleCloudMlV1StudyConfigParameterSpecMatchingParentDiscreteValueSpec] = Field(default=None, alias="parentDiscreteValues")
    parent_int_values: Optional[GoogleCloudMlV1StudyConfigParameterSpecMatchingParentIntValueSpec] = Field(default=None, alias="parentIntValues")
    scale_type: Optional[StrictStr] = Field(default=None, description="How the parameter should be scaled. Leave unset for categorical parameters.", alias="scaleType")
    type: Optional[StrictStr] = Field(default=None, description="Required. The type of the parameter.")
    __properties: ClassVar[List[str]] = ["categoricalValueSpec", "childParameterSpecs", "discreteValueSpec", "doubleValueSpec", "integerValueSpec", "parameter", "parentCategoricalValues", "parentDiscreteValues", "parentIntValues", "scaleType", "type"]

    @field_validator('scale_type')
    def scale_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SCALE_TYPE_UNSPECIFIED', 'UNIT_LINEAR_SCALE', 'UNIT_LOG_SCALE', 'UNIT_REVERSE_LOG_SCALE']):
            raise ValueError("must be one of enum values ('SCALE_TYPE_UNSPECIFIED', 'UNIT_LINEAR_SCALE', 'UNIT_LOG_SCALE', 'UNIT_REVERSE_LOG_SCALE')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PARAMETER_TYPE_UNSPECIFIED', 'DOUBLE', 'INTEGER', 'CATEGORICAL', 'DISCRETE']):
            raise ValueError("must be one of enum values ('PARAMETER_TYPE_UNSPECIFIED', 'DOUBLE', 'INTEGER', 'CATEGORICAL', 'DISCRETE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudMlV1StudyConfigParameterSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of categorical_value_spec
        if self.categorical_value_spec:
            _dict['categoricalValueSpec'] = self.categorical_value_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in child_parameter_specs (list)
        _items = []
        if self.child_parameter_specs:
            for _item_child_parameter_specs in self.child_parameter_specs:
                if _item_child_parameter_specs:
                    _items.append(_item_child_parameter_specs.to_dict())
            _dict['childParameterSpecs'] = _items
        # override the default output from pydantic by calling `to_dict()` of discrete_value_spec
        if self.discrete_value_spec:
            _dict['discreteValueSpec'] = self.discrete_value_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of double_value_spec
        if self.double_value_spec:
            _dict['doubleValueSpec'] = self.double_value_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integer_value_spec
        if self.integer_value_spec:
            _dict['integerValueSpec'] = self.integer_value_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_categorical_values
        if self.parent_categorical_values:
            _dict['parentCategoricalValues'] = self.parent_categorical_values.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_discrete_values
        if self.parent_discrete_values:
            _dict['parentDiscreteValues'] = self.parent_discrete_values.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_int_values
        if self.parent_int_values:
            _dict['parentIntValues'] = self.parent_int_values.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudMlV1StudyConfigParameterSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "categoricalValueSpec": GoogleCloudMlV1StudyConfigParameterSpecCategoricalValueSpec.from_dict(obj["categoricalValueSpec"]) if obj.get("categoricalValueSpec") is not None else None,
            "childParameterSpecs": [GoogleCloudMlV1StudyConfigParameterSpec.from_dict(_item) for _item in obj["childParameterSpecs"]] if obj.get("childParameterSpecs") is not None else None,
            "discreteValueSpec": GoogleCloudMlV1StudyConfigParameterSpecDiscreteValueSpec.from_dict(obj["discreteValueSpec"]) if obj.get("discreteValueSpec") is not None else None,
            "doubleValueSpec": GoogleCloudMlV1StudyConfigParameterSpecDoubleValueSpec.from_dict(obj["doubleValueSpec"]) if obj.get("doubleValueSpec") is not None else None,
            "integerValueSpec": GoogleCloudMlV1StudyConfigParameterSpecIntegerValueSpec.from_dict(obj["integerValueSpec"]) if obj.get("integerValueSpec") is not None else None,
            "parameter": obj.get("parameter"),
            "parentCategoricalValues": GoogleCloudMlV1StudyConfigParameterSpecMatchingParentCategoricalValueSpec.from_dict(obj["parentCategoricalValues"]) if obj.get("parentCategoricalValues") is not None else None,
            "parentDiscreteValues": GoogleCloudMlV1StudyConfigParameterSpecMatchingParentDiscreteValueSpec.from_dict(obj["parentDiscreteValues"]) if obj.get("parentDiscreteValues") is not None else None,
            "parentIntValues": GoogleCloudMlV1StudyConfigParameterSpecMatchingParentIntValueSpec.from_dict(obj["parentIntValues"]) if obj.get("parentIntValues") is not None else None,
            "scaleType": obj.get("scaleType"),
            "type": obj.get("type")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
GoogleCloudMlV1StudyConfigParameterSpec.model_rebuild(raise_errors=False)


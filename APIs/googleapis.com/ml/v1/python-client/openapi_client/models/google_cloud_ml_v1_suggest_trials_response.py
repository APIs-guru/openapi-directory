# coding: utf-8

"""
    AI Platform Training & Prediction API

    An API to enable creating and using machine learning models.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_ml_v1_trial import GoogleCloudMlV1Trial
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudMlV1SuggestTrialsResponse(BaseModel):
    """
    This message will be placed in the response field of a completed google.longrunning.Operation associated with a SuggestTrials request.
    """ # noqa: E501
    end_time: Optional[StrictStr] = Field(default=None, description="The time at which operation processing completed.", alias="endTime")
    start_time: Optional[StrictStr] = Field(default=None, description="The time at which the operation was started.", alias="startTime")
    study_state: Optional[StrictStr] = Field(default=None, description="The state of the study.", alias="studyState")
    trials: Optional[List[GoogleCloudMlV1Trial]] = Field(default=None, description="A list of trials.")
    __properties: ClassVar[List[str]] = ["endTime", "startTime", "studyState", "trials"]

    @field_validator('study_state')
    def study_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'INACTIVE', 'COMPLETED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'INACTIVE', 'COMPLETED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudMlV1SuggestTrialsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in trials (list)
        _items = []
        if self.trials:
            for _item_trials in self.trials:
                if _item_trials:
                    _items.append(_item_trials.to_dict())
            _dict['trials'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudMlV1SuggestTrialsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endTime": obj.get("endTime"),
            "startTime": obj.get("startTime"),
            "studyState": obj.get("studyState"),
            "trials": [GoogleCloudMlV1Trial.from_dict(_item) for _item in obj["trials"]] if obj.get("trials") is not None else None
        })
        return _obj



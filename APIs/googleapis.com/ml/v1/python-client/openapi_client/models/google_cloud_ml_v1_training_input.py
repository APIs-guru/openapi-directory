# coding: utf-8

"""
    AI Platform Training & Prediction API

    An API to enable creating and using machine learning models.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_ml_v1_encryption_config import GoogleCloudMlV1EncryptionConfig
from openapi_client.models.google_cloud_ml_v1_hyperparameter_spec import GoogleCloudMlV1HyperparameterSpec
from openapi_client.models.google_cloud_ml_v1_replica_config import GoogleCloudMlV1ReplicaConfig
from openapi_client.models.google_cloud_ml_v1_scheduling import GoogleCloudMlV1Scheduling
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudMlV1TrainingInput(BaseModel):
    """
    Represents input parameters for a training job. When using the gcloud command to submit your training job, you can specify the input parameters as command-line arguments and/or in a YAML configuration file referenced from the --config command-line argument. For details, see the guide to [submitting a training job](/ai-platform/training/docs/training-jobs).
    """ # noqa: E501
    args: Optional[List[StrictStr]] = Field(default=None, description="Optional. Command-line arguments passed to the training application when it starts. If your job uses a custom container, then the arguments are passed to the container's `ENTRYPOINT` command.")
    enable_web_access: Optional[StrictBool] = Field(default=None, description="Optional. Whether you want AI Platform Training to enable [interactive shell access](https://cloud.google.com/ai-platform/training/docs/monitor-debug-interactive-shell) to training containers. If set to `true`, you can access interactive shells at the URIs given by TrainingOutput.web_access_uris or HyperparameterOutput.web_access_uris (within TrainingOutput.trials).", alias="enableWebAccess")
    encryption_config: Optional[GoogleCloudMlV1EncryptionConfig] = Field(default=None, alias="encryptionConfig")
    evaluator_config: Optional[GoogleCloudMlV1ReplicaConfig] = Field(default=None, alias="evaluatorConfig")
    evaluator_count: Optional[StrictStr] = Field(default=None, description="Optional. The number of evaluator replicas to use for the training job. Each replica in the cluster will be of the type specified in `evaluator_type`. This value can only be used when `scale_tier` is set to `CUSTOM`. If you set this value, you must also set `evaluator_type`. The default value is zero.", alias="evaluatorCount")
    evaluator_type: Optional[StrictStr] = Field(default=None, description="Optional. Specifies the type of virtual machine to use for your training job's evaluator nodes. The supported values are the same as those described in the entry for `masterType`. This value must be consistent with the category of machine type that `masterType` uses. In other words, both must be Compute Engine machine types or both must be legacy machine types. This value must be present when `scaleTier` is set to `CUSTOM` and `evaluatorCount` is greater than zero.", alias="evaluatorType")
    hyperparameters: Optional[GoogleCloudMlV1HyperparameterSpec] = None
    job_dir: Optional[StrictStr] = Field(default=None, description="Optional. A Google Cloud Storage path in which to store training outputs and other data needed for training. This path is passed to your TensorFlow program as the '--job-dir' command-line argument. The benefit of specifying this field is that Cloud ML validates the path for use in training.", alias="jobDir")
    master_config: Optional[GoogleCloudMlV1ReplicaConfig] = Field(default=None, alias="masterConfig")
    master_type: Optional[StrictStr] = Field(default=None, description="Optional. Specifies the type of virtual machine to use for your training job's master worker. You must specify this field when `scaleTier` is set to `CUSTOM`. You can use certain Compute Engine machine types directly in this field. See the [list of compatible Compute Engine machine types](/ai-platform/training/docs/machine-types#compute-engine-machine-types). Alternatively, you can use the certain legacy machine types in this field. See the [list of legacy machine types](/ai-platform/training/docs/machine-types#legacy-machine-types). Finally, if you want to use a TPU for training, specify `cloud_tpu` in this field. Learn more about the [special configuration options for training with TPUs](/ai-platform/training/docs/using-tpus#configuring_a_custom_tpu_machine).", alias="masterType")
    network: Optional[StrictStr] = Field(default=None, description="Optional. The full name of the [Compute Engine network](/vpc/docs/vpc) to which the Job is peered. For example, `projects/12345/global/networks/myVPC`. The format of this field is `projects/{project}/global/networks/{network}`, where {project} is a project number (like `12345`) and {network} is network name. Private services access must already be configured for the network. If left unspecified, the Job is not peered with any network. [Learn about using VPC Network Peering.](/ai-platform/training/docs/vpc-peering).")
    package_uris: Optional[List[StrictStr]] = Field(default=None, description="Required. The Google Cloud Storage location of the packages with the training program and any additional dependencies. The maximum number of package URIs is 100.", alias="packageUris")
    parameter_server_config: Optional[GoogleCloudMlV1ReplicaConfig] = Field(default=None, alias="parameterServerConfig")
    parameter_server_count: Optional[StrictStr] = Field(default=None, description="Optional. The number of parameter server replicas to use for the training job. Each replica in the cluster will be of the type specified in `parameter_server_type`. This value can only be used when `scale_tier` is set to `CUSTOM`. If you set this value, you must also set `parameter_server_type`. The default value is zero.", alias="parameterServerCount")
    parameter_server_type: Optional[StrictStr] = Field(default=None, description="Optional. Specifies the type of virtual machine to use for your training job's parameter server. The supported values are the same as those described in the entry for `master_type`. This value must be consistent with the category of machine type that `masterType` uses. In other words, both must be Compute Engine machine types or both must be legacy machine types. This value must be present when `scaleTier` is set to `CUSTOM` and `parameter_server_count` is greater than zero.", alias="parameterServerType")
    python_module: Optional[StrictStr] = Field(default=None, description="Required. The Python module name to run after installing the packages.", alias="pythonModule")
    python_version: Optional[StrictStr] = Field(default=None, description="Optional. The version of Python used in training. You must either specify this field or specify `masterConfig.imageUri`. The following Python versions are available: * Python '3.7' is available when `runtime_version` is set to '1.15' or later. * Python '3.5' is available when `runtime_version` is set to a version from '1.4' to '1.14'. * Python '2.7' is available when `runtime_version` is set to '1.15' or earlier. Read more about the Python versions available for [each runtime version](/ml-engine/docs/runtime-version-list).", alias="pythonVersion")
    region: Optional[StrictStr] = Field(default=None, description="Required. The region to run the training job in. See the [available regions](/ai-platform/training/docs/regions) for AI Platform Training.")
    runtime_version: Optional[StrictStr] = Field(default=None, description="Optional. The AI Platform runtime version to use for training. You must either specify this field or specify `masterConfig.imageUri`. For more information, see the [runtime version list](/ai-platform/training/docs/runtime-version-list) and learn [how to manage runtime versions](/ai-platform/training/docs/versioning).", alias="runtimeVersion")
    scale_tier: Optional[StrictStr] = Field(default=None, description="Required. Specifies the machine types, the number of replicas for workers and parameter servers.", alias="scaleTier")
    scheduling: Optional[GoogleCloudMlV1Scheduling] = None
    service_account: Optional[StrictStr] = Field(default=None, description="Optional. The email address of a service account to use when running the training appplication. You must have the `iam.serviceAccounts.actAs` permission for the specified service account. In addition, the AI Platform Training Google-managed service account must have the `roles/iam.serviceAccountAdmin` role for the specified service account. [Learn more about configuring a service account.](/ai-platform/training/docs/custom-service-account) If not specified, the AI Platform Training Google-managed service account is used by default.", alias="serviceAccount")
    use_chief_in_tf_config: Optional[StrictBool] = Field(default=None, description="Optional. Use `chief` instead of `master` in the `TF_CONFIG` environment variable when training with a custom container. Defaults to `false`. [Learn more about this field.](/ai-platform/training/docs/distributed-training-details#chief-versus-master) This field has no effect for training jobs that don't use a custom container.", alias="useChiefInTfConfig")
    worker_config: Optional[GoogleCloudMlV1ReplicaConfig] = Field(default=None, alias="workerConfig")
    worker_count: Optional[StrictStr] = Field(default=None, description="Optional. The number of worker replicas to use for the training job. Each replica in the cluster will be of the type specified in `worker_type`. This value can only be used when `scale_tier` is set to `CUSTOM`. If you set this value, you must also set `worker_type`. The default value is zero.", alias="workerCount")
    worker_type: Optional[StrictStr] = Field(default=None, description="Optional. Specifies the type of virtual machine to use for your training job's worker nodes. The supported values are the same as those described in the entry for `masterType`. This value must be consistent with the category of machine type that `masterType` uses. In other words, both must be Compute Engine machine types or both must be legacy machine types. If you use `cloud_tpu` for this value, see special instructions for [configuring a custom TPU machine](/ml-engine/docs/tensorflow/using-tpus#configuring_a_custom_tpu_machine). This value must be present when `scaleTier` is set to `CUSTOM` and `workerCount` is greater than zero.", alias="workerType")
    __properties: ClassVar[List[str]] = ["args", "enableWebAccess", "encryptionConfig", "evaluatorConfig", "evaluatorCount", "evaluatorType", "hyperparameters", "jobDir", "masterConfig", "masterType", "network", "packageUris", "parameterServerConfig", "parameterServerCount", "parameterServerType", "pythonModule", "pythonVersion", "region", "runtimeVersion", "scaleTier", "scheduling", "serviceAccount", "useChiefInTfConfig", "workerConfig", "workerCount", "workerType"]

    @field_validator('scale_tier')
    def scale_tier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BASIC', 'STANDARD_1', 'PREMIUM_1', 'BASIC_GPU', 'BASIC_TPU', 'CUSTOM']):
            raise ValueError("must be one of enum values ('BASIC', 'STANDARD_1', 'PREMIUM_1', 'BASIC_GPU', 'BASIC_TPU', 'CUSTOM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudMlV1TrainingInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption_config
        if self.encryption_config:
            _dict['encryptionConfig'] = self.encryption_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of evaluator_config
        if self.evaluator_config:
            _dict['evaluatorConfig'] = self.evaluator_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hyperparameters
        if self.hyperparameters:
            _dict['hyperparameters'] = self.hyperparameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of master_config
        if self.master_config:
            _dict['masterConfig'] = self.master_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parameter_server_config
        if self.parameter_server_config:
            _dict['parameterServerConfig'] = self.parameter_server_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scheduling
        if self.scheduling:
            _dict['scheduling'] = self.scheduling.to_dict()
        # override the default output from pydantic by calling `to_dict()` of worker_config
        if self.worker_config:
            _dict['workerConfig'] = self.worker_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudMlV1TrainingInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "args": obj.get("args"),
            "enableWebAccess": obj.get("enableWebAccess"),
            "encryptionConfig": GoogleCloudMlV1EncryptionConfig.from_dict(obj["encryptionConfig"]) if obj.get("encryptionConfig") is not None else None,
            "evaluatorConfig": GoogleCloudMlV1ReplicaConfig.from_dict(obj["evaluatorConfig"]) if obj.get("evaluatorConfig") is not None else None,
            "evaluatorCount": obj.get("evaluatorCount"),
            "evaluatorType": obj.get("evaluatorType"),
            "hyperparameters": GoogleCloudMlV1HyperparameterSpec.from_dict(obj["hyperparameters"]) if obj.get("hyperparameters") is not None else None,
            "jobDir": obj.get("jobDir"),
            "masterConfig": GoogleCloudMlV1ReplicaConfig.from_dict(obj["masterConfig"]) if obj.get("masterConfig") is not None else None,
            "masterType": obj.get("masterType"),
            "network": obj.get("network"),
            "packageUris": obj.get("packageUris"),
            "parameterServerConfig": GoogleCloudMlV1ReplicaConfig.from_dict(obj["parameterServerConfig"]) if obj.get("parameterServerConfig") is not None else None,
            "parameterServerCount": obj.get("parameterServerCount"),
            "parameterServerType": obj.get("parameterServerType"),
            "pythonModule": obj.get("pythonModule"),
            "pythonVersion": obj.get("pythonVersion"),
            "region": obj.get("region"),
            "runtimeVersion": obj.get("runtimeVersion"),
            "scaleTier": obj.get("scaleTier"),
            "scheduling": GoogleCloudMlV1Scheduling.from_dict(obj["scheduling"]) if obj.get("scheduling") is not None else None,
            "serviceAccount": obj.get("serviceAccount"),
            "useChiefInTfConfig": obj.get("useChiefInTfConfig"),
            "workerConfig": GoogleCloudMlV1ReplicaConfig.from_dict(obj["workerConfig"]) if obj.get("workerConfig") is not None else None,
            "workerCount": obj.get("workerCount"),
            "workerType": obj.get("workerType")
        })
        return _obj



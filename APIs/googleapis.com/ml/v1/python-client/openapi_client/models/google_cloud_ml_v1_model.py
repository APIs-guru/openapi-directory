# coding: utf-8

"""
    AI Platform Training & Prediction API

    An API to enable creating and using machine learning models.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_ml_v1_version import GoogleCloudMlV1Version
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudMlV1Model(BaseModel):
    """
    Represents a machine learning solution. A model can have multiple versions, each of which is a deployed, trained model ready to receive prediction requests. The model itself is just a container.
    """ # noqa: E501
    default_version: Optional[GoogleCloudMlV1Version] = Field(default=None, alias="defaultVersion")
    description: Optional[StrictStr] = Field(default=None, description="Optional. The description specified for the model when it was created.")
    etag: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a model from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform model updates in order to avoid race conditions: An `etag` is returned in the response to `GetModel`, and systems are expected to put that etag in the request to `UpdateModel` to ensure that their change will be applied to the model as intended.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. One or more labels that you can add, to organize your models. Each label is a key-value pair, where both the key and the value are arbitrary strings that you supply. For more information, see the documentation on using labels. Note that this field is not updatable for mls1* models.")
    name: Optional[StrictStr] = Field(default=None, description="Required. The name specified for the model when it was created. The model name must be unique within the project it is created in.")
    online_prediction_console_logging: Optional[StrictBool] = Field(default=None, description="Optional. If true, online prediction nodes send `stderr` and `stdout` streams to Cloud Logging. These can be more verbose than the standard access logs (see `onlinePredictionLogging`) and can incur higher cost. However, they are helpful for debugging. Note that [logs may incur a cost](/stackdriver/pricing), especially if your project receives prediction requests at a high QPS. Estimate your costs before enabling this option. Default is false.", alias="onlinePredictionConsoleLogging")
    online_prediction_logging: Optional[StrictBool] = Field(default=None, description="Optional. If true, online prediction access logs are sent to Cloud Logging. These logs are like standard server access logs, containing information like timestamp and latency for each request. Note that [logs may incur a cost](/stackdriver/pricing), especially if your project receives prediction requests at a high queries per second rate (QPS). Estimate your costs before enabling this option. Default is false.", alias="onlinePredictionLogging")
    regions: Optional[List[StrictStr]] = Field(default=None, description="Optional. The list of regions where the model is going to be deployed. Only one region per model is supported. Defaults to 'us-central1' if nothing is set. See the available regions for AI Platform services. Note: * No matter where a model is deployed, it can always be accessed by users from anywhere, both for online and batch prediction. * The region for a batch prediction job is set by the region field when submitting the batch prediction job and does not take its value from this field.")
    __properties: ClassVar[List[str]] = ["defaultVersion", "description", "etag", "labels", "name", "onlinePredictionConsoleLogging", "onlinePredictionLogging", "regions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudMlV1Model from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_version
        if self.default_version:
            _dict['defaultVersion'] = self.default_version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudMlV1Model from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultVersion": GoogleCloudMlV1Version.from_dict(obj["defaultVersion"]) if obj.get("defaultVersion") is not None else None,
            "description": obj.get("description"),
            "etag": obj.get("etag"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "onlinePredictionConsoleLogging": obj.get("onlinePredictionConsoleLogging"),
            "onlinePredictionLogging": obj.get("onlinePredictionLogging"),
            "regions": obj.get("regions")
        })
        return _obj



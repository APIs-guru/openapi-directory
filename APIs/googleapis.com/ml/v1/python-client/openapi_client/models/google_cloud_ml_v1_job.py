# coding: utf-8

"""
    AI Platform Training & Prediction API

    An API to enable creating and using machine learning models.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_ml_v1_prediction_input import GoogleCloudMlV1PredictionInput
from openapi_client.models.google_cloud_ml_v1_prediction_output import GoogleCloudMlV1PredictionOutput
from openapi_client.models.google_cloud_ml_v1_training_input import GoogleCloudMlV1TrainingInput
from openapi_client.models.google_cloud_ml_v1_training_output import GoogleCloudMlV1TrainingOutput
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudMlV1Job(BaseModel):
    """
    Represents a training or prediction job.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. When the job was created.", alias="createTime")
    end_time: Optional[StrictStr] = Field(default=None, description="Output only. When the job processing was completed.", alias="endTime")
    error_message: Optional[StrictStr] = Field(default=None, description="Output only. The details of a failure or a cancellation.", alias="errorMessage")
    etag: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a job from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform job updates in order to avoid race conditions: An `etag` is returned in the response to `GetJob`, and systems are expected to put that etag in the request to `UpdateJob` to ensure that their change will be applied to the same version of the job.")
    job_id: Optional[StrictStr] = Field(default=None, description="Required. The user-specified id of the job.", alias="jobId")
    job_position: Optional[StrictStr] = Field(default=None, description="Output only. It's only effect when the job is in QUEUED state. If it's positive, it indicates the job's position in the job scheduler. It's 0 when the job is already scheduled.", alias="jobPosition")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. One or more labels that you can add, to organize your jobs. Each label is a key-value pair, where both the key and the value are arbitrary strings that you supply. For more information, see the documentation on using labels.")
    prediction_input: Optional[GoogleCloudMlV1PredictionInput] = Field(default=None, alias="predictionInput")
    prediction_output: Optional[GoogleCloudMlV1PredictionOutput] = Field(default=None, alias="predictionOutput")
    start_time: Optional[StrictStr] = Field(default=None, description="Output only. When the job processing was started.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The detailed state of a job.")
    training_input: Optional[GoogleCloudMlV1TrainingInput] = Field(default=None, alias="trainingInput")
    training_output: Optional[GoogleCloudMlV1TrainingOutput] = Field(default=None, alias="trainingOutput")
    __properties: ClassVar[List[str]] = ["createTime", "endTime", "errorMessage", "etag", "jobId", "jobPosition", "labels", "predictionInput", "predictionOutput", "startTime", "state", "trainingInput", "trainingOutput"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'QUEUED', 'PREPARING', 'RUNNING', 'SUCCEEDED', 'FAILED', 'CANCELLING', 'CANCELLED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'QUEUED', 'PREPARING', 'RUNNING', 'SUCCEEDED', 'FAILED', 'CANCELLING', 'CANCELLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudMlV1Job from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "job_position",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of prediction_input
        if self.prediction_input:
            _dict['predictionInput'] = self.prediction_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prediction_output
        if self.prediction_output:
            _dict['predictionOutput'] = self.prediction_output.to_dict()
        # override the default output from pydantic by calling `to_dict()` of training_input
        if self.training_input:
            _dict['trainingInput'] = self.training_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of training_output
        if self.training_output:
            _dict['trainingOutput'] = self.training_output.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudMlV1Job from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "endTime": obj.get("endTime"),
            "errorMessage": obj.get("errorMessage"),
            "etag": obj.get("etag"),
            "jobId": obj.get("jobId"),
            "jobPosition": obj.get("jobPosition"),
            "labels": obj.get("labels"),
            "predictionInput": GoogleCloudMlV1PredictionInput.from_dict(obj["predictionInput"]) if obj.get("predictionInput") is not None else None,
            "predictionOutput": GoogleCloudMlV1PredictionOutput.from_dict(obj["predictionOutput"]) if obj.get("predictionOutput") is not None else None,
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "trainingInput": GoogleCloudMlV1TrainingInput.from_dict(obj["trainingInput"]) if obj.get("trainingInput") is not None else None,
            "trainingOutput": GoogleCloudMlV1TrainingOutput.from_dict(obj["trainingOutput"]) if obj.get("trainingOutput") is not None else None
        })
        return _obj



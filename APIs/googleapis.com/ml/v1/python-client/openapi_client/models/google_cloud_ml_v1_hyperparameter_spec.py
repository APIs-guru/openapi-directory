# coding: utf-8

"""
    AI Platform Training & Prediction API

    An API to enable creating and using machine learning models.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_ml_v1_parameter_spec import GoogleCloudMlV1ParameterSpec
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudMlV1HyperparameterSpec(BaseModel):
    """
    Represents a set of hyperparameters to optimize.
    """ # noqa: E501
    algorithm: Optional[StrictStr] = Field(default=None, description="Optional. The search algorithm specified for the hyperparameter tuning job. Uses the default AI Platform hyperparameter tuning algorithm if unspecified.")
    enable_trial_early_stopping: Optional[StrictBool] = Field(default=None, description="Optional. Indicates if the hyperparameter tuning job enables auto trial early stopping.", alias="enableTrialEarlyStopping")
    goal: Optional[StrictStr] = Field(default=None, description="Required. The type of goal to use for tuning. Available types are `MAXIMIZE` and `MINIMIZE`. Defaults to `MAXIMIZE`.")
    hyperparameter_metric_tag: Optional[StrictStr] = Field(default=None, description="Optional. The TensorFlow summary tag name to use for optimizing trials. For current versions of TensorFlow, this tag name should exactly match what is shown in TensorBoard, including all scopes. For versions of TensorFlow prior to 0.12, this should be only the tag passed to tf.Summary. By default, \"training/hptuning/metric\" will be used.", alias="hyperparameterMetricTag")
    max_failed_trials: Optional[StrictInt] = Field(default=None, description="Optional. The number of failed trials that need to be seen before failing the hyperparameter tuning job. You can specify this field to override the default failing criteria for AI Platform hyperparameter tuning jobs. Defaults to zero, which means the service decides when a hyperparameter job should fail.", alias="maxFailedTrials")
    max_parallel_trials: Optional[StrictInt] = Field(default=None, description="Optional. The number of training trials to run concurrently. You can reduce the time it takes to perform hyperparameter tuning by adding trials in parallel. However, each trail only benefits from the information gained in completed trials. That means that a trial does not get access to the results of trials running at the same time, which could reduce the quality of the overall optimization. Each trial will use the same scale tier and machine types. Defaults to one.", alias="maxParallelTrials")
    max_trials: Optional[StrictInt] = Field(default=None, description="Optional. How many training trials should be attempted to optimize the specified hyperparameters. Defaults to one.", alias="maxTrials")
    params: Optional[List[GoogleCloudMlV1ParameterSpec]] = Field(default=None, description="Required. The set of parameters to tune.")
    resume_previous_job_id: Optional[StrictStr] = Field(default=None, description="Optional. The prior hyperparameter tuning job id that users hope to continue with. The job id will be used to find the corresponding vizier study guid and resume the study.", alias="resumePreviousJobId")
    __properties: ClassVar[List[str]] = ["algorithm", "enableTrialEarlyStopping", "goal", "hyperparameterMetricTag", "maxFailedTrials", "maxParallelTrials", "maxTrials", "params", "resumePreviousJobId"]

    @field_validator('algorithm')
    def algorithm_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALGORITHM_UNSPECIFIED', 'GRID_SEARCH', 'RANDOM_SEARCH']):
            raise ValueError("must be one of enum values ('ALGORITHM_UNSPECIFIED', 'GRID_SEARCH', 'RANDOM_SEARCH')")
        return value

    @field_validator('goal')
    def goal_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GOAL_TYPE_UNSPECIFIED', 'MAXIMIZE', 'MINIMIZE']):
            raise ValueError("must be one of enum values ('GOAL_TYPE_UNSPECIFIED', 'MAXIMIZE', 'MINIMIZE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudMlV1HyperparameterSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in params (list)
        _items = []
        if self.params:
            for _item_params in self.params:
                if _item_params:
                    _items.append(_item_params.to_dict())
            _dict['params'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudMlV1HyperparameterSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "algorithm": obj.get("algorithm"),
            "enableTrialEarlyStopping": obj.get("enableTrialEarlyStopping"),
            "goal": obj.get("goal"),
            "hyperparameterMetricTag": obj.get("hyperparameterMetricTag"),
            "maxFailedTrials": obj.get("maxFailedTrials"),
            "maxParallelTrials": obj.get("maxParallelTrials"),
            "maxTrials": obj.get("maxTrials"),
            "params": [GoogleCloudMlV1ParameterSpec.from_dict(_item) for _item in obj["params"]] if obj.get("params") is not None else None,
            "resumePreviousJobId": obj.get("resumePreviousJobId")
        })
        return _obj



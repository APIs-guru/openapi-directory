# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.axis_scale import AxisScale
from typing import Optional, Set
from typing_extensions import Self

class Axis(BaseModel):
    """
    The description of a particular axis for a visualization.
    """ # noqa: E501
    base: Optional[StrictStr] = Field(default=None, description="Base represents the radix for formatting axis values.")
    bounds: Optional[Annotated[List[StrictStr], Field(min_length=0, max_length=2)]] = Field(default=None, description="The extents of an axis in the form [lower, upper]. Clients determine whether bounds are to be inclusive or exclusive of their limits")
    label: Optional[StrictStr] = Field(default=None, description="Label is a description of this Axis")
    prefix: Optional[StrictStr] = Field(default=None, description="Prefix represents a label prefix for formatting axis values.")
    scale: Optional[AxisScale] = None
    suffix: Optional[StrictStr] = Field(default=None, description="Suffix represents a label suffix for formatting axis values.")
    __properties: ClassVar[List[str]] = ["base", "bounds", "label", "prefix", "scale", "suffix"]

    @field_validator('base')
    def base_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['', '2', '10']):
            raise ValueError("must be one of enum values ('', '2', '10')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Axis from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Axis from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "base": obj.get("base"),
            "bounds": obj.get("bounds"),
            "label": obj.get("label"),
            "prefix": obj.get("prefix"),
            "scale": obj.get("scale"),
            "suffix": obj.get("suffix")
        })
        return _obj



# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.label import Label
from openapi_client.models.notification_endpoint_base_links import NotificationEndpointBaseLinks
from openapi_client.models.notification_endpoint_discriminator import NotificationEndpointDiscriminator
from openapi_client.models.notification_endpoint_type import NotificationEndpointType
from openapi_client.models.template_env_references_inner import TemplateEnvReferencesInner
from openapi_client.models.template_kind import TemplateKind
from openapi_client.models.template_summary_label import TemplateSummaryLabel
from typing import Optional, Set
from typing_extensions import Self

class TemplateSummarySummaryNotificationEndpointsInner(NotificationEndpointDiscriminator):
    """
    TemplateSummarySummaryNotificationEndpointsInner
    """ # noqa: E501
    env_references: Optional[List[TemplateEnvReferencesInner]] = Field(default=None, alias="envReferences")
    kind: Optional[TemplateKind] = None
    label_associations: Optional[List[TemplateSummaryLabel]] = Field(default=None, alias="labelAssociations")
    template_meta_name: Optional[StrictStr] = Field(default=None, alias="templateMetaName")
    __properties: ClassVar[List[str]] = ["createdAt", "description", "id", "labels", "links", "name", "orgID", "status", "type", "updatedAt", "userID", "token", "url", "clientURL", "routingKey", "authMethod", "contentTemplate", "headers", "method", "password", "username", "channel", "envReferences", "kind", "labelAssociations", "templateMetaName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TemplateSummarySummaryNotificationEndpointsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item_labels in self.labels:
                if _item_labels:
                    _items.append(_item_labels.to_dict())
            _dict['labels'] = _items
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in env_references (list)
        _items = []
        if self.env_references:
            for _item_env_references in self.env_references:
                if _item_env_references:
                    _items.append(_item_env_references.to_dict())
            _dict['envReferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in label_associations (list)
        _items = []
        if self.label_associations:
            for _item_label_associations in self.label_associations:
                if _item_label_associations:
                    _items.append(_item_label_associations.to_dict())
            _dict['labelAssociations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TemplateSummarySummaryNotificationEndpointsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdAt": obj.get("createdAt"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "labels": [Label.from_dict(_item) for _item in obj["labels"]] if obj.get("labels") is not None else None,
            "links": NotificationEndpointBaseLinks.from_dict(obj["links"]) if obj.get("links") is not None else None,
            "name": obj.get("name"),
            "orgID": obj.get("orgID"),
            "status": obj.get("status") if obj.get("status") is not None else 'active',
            "type": obj.get("type"),
            "updatedAt": obj.get("updatedAt"),
            "userID": obj.get("userID"),
            "token": obj.get("token"),
            "url": obj.get("url"),
            "clientURL": obj.get("clientURL"),
            "routingKey": obj.get("routingKey"),
            "authMethod": obj.get("authMethod"),
            "contentTemplate": obj.get("contentTemplate"),
            "headers": obj.get("headers"),
            "method": obj.get("method"),
            "password": obj.get("password"),
            "username": obj.get("username"),
            "channel": obj.get("channel"),
            "envReferences": [TemplateEnvReferencesInner.from_dict(_item) for _item in obj["envReferences"]] if obj.get("envReferences") is not None else None,
            "kind": obj.get("kind"),
            "labelAssociations": [TemplateSummaryLabel.from_dict(_item) for _item in obj["labelAssociations"]] if obj.get("labelAssociations") is not None else None,
            "templateMetaName": obj.get("templateMetaName")
        })
        return _obj



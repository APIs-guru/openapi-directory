# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ModelField(BaseModel):
    """
    ModelField
    """ # noqa: E501
    alias: Optional[StrictStr] = Field(default=None, description="Alias overrides the field name in the returned response.  Applies only if type is `func`")
    args: Optional[List[ModelField]] = Field(default=None, description="Args are the arguments to the function")
    type: Optional[StrictStr] = Field(default=None, description="`type` describes the field type. `func` is a function. `field` is a field reference.")
    value: Optional[StrictStr] = Field(default=None, description="value is the value of the field.  Meaning of the value is implied by the `type` key")
    __properties: ClassVar[List[str]] = ["alias", "args", "type", "value"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['func', 'field', 'integer', 'number', 'regex', 'wildcard']):
            raise ValueError("must be one of enum values ('func', 'field', 'integer', 'number', 'regex', 'wildcard')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in args (list)
        _items = []
        if self.args:
            for _item_args in self.args:
                if _item_args:
                    _items.append(_item_args.to_dict())
            _dict['args'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alias": obj.get("alias"),
            "args": [ModelField.from_dict(_item) for _item in obj["args"]] if obj.get("args") is not None else None,
            "type": obj.get("type"),
            "value": obj.get("value")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
ModelField.model_rebuild(raise_errors=False)


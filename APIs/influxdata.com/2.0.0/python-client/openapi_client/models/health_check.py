# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class HealthCheck(BaseModel):
    """
    HealthCheck
    """ # noqa: E501
    checks: Optional[List[HealthCheck]] = None
    commit: Optional[StrictStr] = None
    message: Optional[StrictStr] = None
    name: StrictStr
    status: StrictStr
    version: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["checks", "commit", "message", "name", "status", "version"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['pass', 'fail']):
            raise ValueError("must be one of enum values ('pass', 'fail')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HealthCheck from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in checks (list)
        _items = []
        if self.checks:
            for _item_checks in self.checks:
                if _item_checks:
                    _items.append(_item_checks.to_dict())
            _dict['checks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HealthCheck from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "checks": [HealthCheck.from_dict(_item) for _item in obj["checks"]] if obj.get("checks") is not None else None,
            "commit": obj.get("commit"),
            "message": obj.get("message"),
            "name": obj.get("name"),
            "status": obj.get("status"),
            "version": obj.get("version")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
HealthCheck.model_rebuild(raise_errors=False)


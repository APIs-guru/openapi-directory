# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.log_event import LogEvent
from openapi_client.models.run_links import RunLinks
from typing import Optional, Set
from typing_extensions import Self

class Run(BaseModel):
    """
    Run
    """ # noqa: E501
    finished_at: Optional[datetime] = Field(default=None, description="Time run finished executing, RFC3339Nano.", alias="finishedAt")
    id: Optional[StrictStr] = None
    links: Optional[RunLinks] = None
    log: Optional[List[LogEvent]] = Field(default=None, description="An array of logs associated with the run.")
    requested_at: Optional[datetime] = Field(default=None, description="Time run was manually requested, RFC3339Nano.", alias="requestedAt")
    scheduled_for: Optional[datetime] = Field(default=None, description="Time used for run's \"now\" option, RFC3339.", alias="scheduledFor")
    started_at: Optional[datetime] = Field(default=None, description="Time run started executing, RFC3339Nano.", alias="startedAt")
    status: Optional[StrictStr] = None
    task_id: Optional[StrictStr] = Field(default=None, alias="taskID")
    __properties: ClassVar[List[str]] = ["finishedAt", "id", "links", "log", "requestedAt", "scheduledFor", "startedAt", "status", "taskID"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['scheduled', 'started', 'failed', 'success', 'canceled']):
            raise ValueError("must be one of enum values ('scheduled', 'started', 'failed', 'success', 'canceled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Run from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "finished_at",
            "id",
            "log",
            "requested_at",
            "started_at",
            "status",
            "task_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in log (list)
        _items = []
        if self.log:
            for _item_log in self.log:
                if _item_log:
                    _items.append(_item_log.to_dict())
            _dict['log'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Run from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "finishedAt": obj.get("finishedAt"),
            "id": obj.get("id"),
            "links": RunLinks.from_dict(obj["links"]) if obj.get("links") is not None else None,
            "log": [LogEvent.from_dict(_item) for _item in obj["log"]] if obj.get("log") is not None else None,
            "requestedAt": obj.get("requestedAt"),
            "scheduledFor": obj.get("scheduledFor"),
            "startedAt": obj.get("startedAt"),
            "status": obj.get("status"),
            "taskID": obj.get("taskID")
        })
        return _obj



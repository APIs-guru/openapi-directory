# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.stack_events_inner_resources_inner import StackEventsInnerResourcesInner
from typing import Optional, Set
from typing_extensions import Self

class StackEventsInner(BaseModel):
    """
    StackEventsInner
    """ # noqa: E501
    description: Optional[StrictStr] = None
    event_type: Optional[StrictStr] = Field(default=None, alias="eventType")
    name: Optional[StrictStr] = None
    resources: Optional[List[StackEventsInnerResourcesInner]] = None
    sources: Optional[List[StrictStr]] = None
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    urls: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["description", "eventType", "name", "resources", "sources", "updatedAt", "urls"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StackEventsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in resources (list)
        _items = []
        if self.resources:
            for _item_resources in self.resources:
                if _item_resources:
                    _items.append(_item_resources.to_dict())
            _dict['resources'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StackEventsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "eventType": obj.get("eventType"),
            "name": obj.get("name"),
            "resources": [StackEventsInnerResourcesInner.from_dict(_item) for _item in obj["resources"]] if obj.get("resources") is not None else None,
            "sources": obj.get("sources"),
            "updatedAt": obj.get("updatedAt"),
            "urls": obj.get("urls")
        })
        return _obj



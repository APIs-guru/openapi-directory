# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.template_apply_actions_inner import TemplateApplyActionsInner
from openapi_client.models.template_apply_env_refs_value import TemplateApplyEnvRefsValue
from openapi_client.models.template_apply_remotes_inner import TemplateApplyRemotesInner
from openapi_client.models.template_apply_template import TemplateApplyTemplate
from typing import Optional, Set
from typing_extensions import Self

class TemplateApply(BaseModel):
    """
    TemplateApply
    """ # noqa: E501
    actions: Optional[List[TemplateApplyActionsInner]] = None
    dry_run: Optional[StrictBool] = Field(default=None, alias="dryRun")
    env_refs: Optional[Dict[str, TemplateApplyEnvRefsValue]] = Field(default=None, alias="envRefs")
    org_id: Optional[StrictStr] = Field(default=None, alias="orgID")
    remotes: Optional[List[TemplateApplyRemotesInner]] = None
    secrets: Optional[Dict[str, StrictStr]] = None
    stack_id: Optional[StrictStr] = Field(default=None, alias="stackID")
    template: Optional[TemplateApplyTemplate] = None
    templates: Optional[List[TemplateApplyTemplate]] = None
    __properties: ClassVar[List[str]] = ["actions", "dryRun", "envRefs", "orgID", "remotes", "secrets", "stackID", "template", "templates"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TemplateApply from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in env_refs (dict)
        _field_dict = {}
        if self.env_refs:
            for _key_env_refs in self.env_refs:
                if self.env_refs[_key_env_refs]:
                    _field_dict[_key_env_refs] = self.env_refs[_key_env_refs].to_dict()
            _dict['envRefs'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in remotes (list)
        _items = []
        if self.remotes:
            for _item_remotes in self.remotes:
                if _item_remotes:
                    _items.append(_item_remotes.to_dict())
            _dict['remotes'] = _items
        # override the default output from pydantic by calling `to_dict()` of template
        if self.template:
            _dict['template'] = self.template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in templates (list)
        _items = []
        if self.templates:
            for _item_templates in self.templates:
                if _item_templates:
                    _items.append(_item_templates.to_dict())
            _dict['templates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TemplateApply from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actions": [TemplateApplyActionsInner.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None,
            "dryRun": obj.get("dryRun"),
            "envRefs": dict(
                (_k, TemplateApplyEnvRefsValue.from_dict(_v))
                for _k, _v in obj["envRefs"].items()
            )
            if obj.get("envRefs") is not None
            else None,
            "orgID": obj.get("orgID"),
            "remotes": [TemplateApplyRemotesInner.from_dict(_item) for _item in obj["remotes"]] if obj.get("remotes") is not None else None,
            "secrets": obj.get("secrets"),
            "stackID": obj.get("stackID"),
            "template": TemplateApplyTemplate.from_dict(obj["template"]) if obj.get("template") is not None else None,
            "templates": [TemplateApplyTemplate.from_dict(_item) for _item in obj["templates"]] if obj.get("templates") is not None else None
        })
        return _obj



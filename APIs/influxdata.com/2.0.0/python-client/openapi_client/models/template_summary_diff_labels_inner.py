# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.template_kind import TemplateKind
from openapi_client.models.template_summary_diff_labels_inner_new import TemplateSummaryDiffLabelsInnerNew
from typing import Optional, Set
from typing_extensions import Self

class TemplateSummaryDiffLabelsInner(BaseModel):
    """
    TemplateSummaryDiffLabelsInner
    """ # noqa: E501
    id: Optional[StrictStr] = None
    kind: Optional[TemplateKind] = None
    new: Optional[TemplateSummaryDiffLabelsInnerNew] = None
    old: Optional[TemplateSummaryDiffLabelsInnerNew] = None
    state_status: Optional[StrictStr] = Field(default=None, alias="stateStatus")
    template_meta_name: Optional[StrictStr] = Field(default=None, alias="templateMetaName")
    __properties: ClassVar[List[str]] = ["id", "kind", "new", "old", "stateStatus", "templateMetaName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TemplateSummaryDiffLabelsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of new
        if self.new:
            _dict['new'] = self.new.to_dict()
        # override the default output from pydantic by calling `to_dict()` of old
        if self.old:
            _dict['old'] = self.old.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TemplateSummaryDiffLabelsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "new": TemplateSummaryDiffLabelsInnerNew.from_dict(obj["new"]) if obj.get("new") is not None else None,
            "old": TemplateSummaryDiffLabelsInnerNew.from_dict(obj["old"]) if obj.get("old") is not None else None,
            "stateStatus": obj.get("stateStatus"),
            "templateMetaName": obj.get("templateMetaName")
        })
        return _obj



# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.routes_external import RoutesExternal
from openapi_client.models.routes_query import RoutesQuery
from openapi_client.models.routes_system import RoutesSystem
from typing import Optional, Set
from typing_extensions import Self

class Routes(BaseModel):
    """
    Routes
    """ # noqa: E501
    authorizations: Optional[StrictStr] = None
    buckets: Optional[StrictStr] = None
    dashboards: Optional[StrictStr] = None
    external: Optional[RoutesExternal] = None
    flags: Optional[StrictStr] = None
    me: Optional[StrictStr] = None
    orgs: Optional[StrictStr] = None
    query: Optional[RoutesQuery] = None
    setup: Optional[StrictStr] = None
    signin: Optional[StrictStr] = None
    signout: Optional[StrictStr] = None
    sources: Optional[StrictStr] = None
    system: Optional[RoutesSystem] = None
    tasks: Optional[StrictStr] = None
    telegrafs: Optional[StrictStr] = None
    users: Optional[StrictStr] = None
    variables: Optional[StrictStr] = None
    write: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["authorizations", "buckets", "dashboards", "external", "flags", "me", "orgs", "query", "setup", "signin", "signout", "sources", "system", "tasks", "telegrafs", "users", "variables", "write"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Routes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of external
        if self.external:
            _dict['external'] = self.external.to_dict()
        # override the default output from pydantic by calling `to_dict()` of query
        if self.query:
            _dict['query'] = self.query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of system
        if self.system:
            _dict['system'] = self.system.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Routes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorizations": obj.get("authorizations"),
            "buckets": obj.get("buckets"),
            "dashboards": obj.get("dashboards"),
            "external": RoutesExternal.from_dict(obj["external"]) if obj.get("external") is not None else None,
            "flags": obj.get("flags"),
            "me": obj.get("me"),
            "orgs": obj.get("orgs"),
            "query": RoutesQuery.from_dict(obj["query"]) if obj.get("query") is not None else None,
            "setup": obj.get("setup"),
            "signin": obj.get("signin"),
            "signout": obj.get("signout"),
            "sources": obj.get("sources"),
            "system": RoutesSystem.from_dict(obj["system"]) if obj.get("system") is not None else None,
            "tasks": obj.get("tasks"),
            "telegrafs": obj.get("telegrafs"),
            "users": obj.get("users"),
            "variables": obj.get("variables"),
            "write": obj.get("write")
        })
        return _obj



# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.label import Label
from openapi_client.models.task_links import TaskLinks
from openapi_client.models.task_status_type import TaskStatusType
from typing import Optional, Set
from typing_extensions import Self

class Task(BaseModel):
    """
    Task
    """ # noqa: E501
    authorization_id: Optional[StrictStr] = Field(default=None, description="The ID of the authorization used when this task communicates with the query engine.", alias="authorizationID")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    cron: Optional[StrictStr] = Field(default=None, description="A task repetition schedule in the form '* * * * * *'; parsed from Flux.")
    description: Optional[StrictStr] = Field(default=None, description="An optional description of the task.")
    every: Optional[StrictStr] = Field(default=None, description="A simple task repetition schedule; parsed from Flux.")
    flux: StrictStr = Field(description="The Flux script to run for this task.")
    id: StrictStr
    labels: Optional[List[Label]] = None
    last_run_error: Optional[StrictStr] = Field(default=None, alias="lastRunError")
    last_run_status: Optional[StrictStr] = Field(default=None, alias="lastRunStatus")
    latest_completed: Optional[datetime] = Field(default=None, description="Timestamp of latest scheduled, completed run, RFC3339.", alias="latestCompleted")
    links: Optional[TaskLinks] = None
    name: StrictStr = Field(description="The name of the task.")
    offset: Optional[StrictStr] = Field(default=None, description="Duration to delay after the schedule, before executing the task; parsed from flux, if set to zero it will remove this option and use 0 as the default.")
    org: Optional[StrictStr] = Field(default=None, description="The name of the organization that owns this Task.")
    org_id: StrictStr = Field(description="The ID of the organization that owns this Task.", alias="orgID")
    status: Optional[TaskStatusType] = None
    type: Optional[StrictStr] = Field(default=None, description="The type of task, this can be used for filtering tasks on list actions.")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    __properties: ClassVar[List[str]] = ["authorizationID", "createdAt", "cron", "description", "every", "flux", "id", "labels", "lastRunError", "lastRunStatus", "latestCompleted", "links", "name", "offset", "org", "orgID", "status", "type", "updatedAt"]

    @field_validator('last_run_status')
    def last_run_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['failed', 'success', 'canceled']):
            raise ValueError("must be one of enum values ('failed', 'success', 'canceled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Task from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "id",
            "last_run_error",
            "last_run_status",
            "latest_completed",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item_labels in self.labels:
                if _item_labels:
                    _items.append(_item_labels.to_dict())
            _dict['labels'] = _items
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['links'] = self.links.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Task from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorizationID": obj.get("authorizationID"),
            "createdAt": obj.get("createdAt"),
            "cron": obj.get("cron"),
            "description": obj.get("description"),
            "every": obj.get("every"),
            "flux": obj.get("flux"),
            "id": obj.get("id"),
            "labels": [Label.from_dict(_item) for _item in obj["labels"]] if obj.get("labels") is not None else None,
            "lastRunError": obj.get("lastRunError"),
            "lastRunStatus": obj.get("lastRunStatus"),
            "latestCompleted": obj.get("latestCompleted"),
            "links": TaskLinks.from_dict(obj["links"]) if obj.get("links") is not None else None,
            "name": obj.get("name"),
            "offset": obj.get("offset"),
            "org": obj.get("org"),
            "orgID": obj.get("orgID"),
            "status": obj.get("status"),
            "type": obj.get("type"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj



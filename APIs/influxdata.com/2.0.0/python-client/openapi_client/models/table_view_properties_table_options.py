# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.renamable_field import RenamableField
from typing import Optional, Set
from typing_extensions import Self

class TableViewPropertiesTableOptions(BaseModel):
    """
    TableViewPropertiesTableOptions
    """ # noqa: E501
    fix_first_column: Optional[StrictBool] = Field(default=None, description="fixFirstColumn indicates whether the first column of the table should be locked", alias="fixFirstColumn")
    sort_by: Optional[RenamableField] = Field(default=None, alias="sortBy")
    vertical_time_axis: Optional[StrictBool] = Field(default=None, description="verticalTimeAxis describes the orientation of the table by indicating whether the time axis will be displayed vertically", alias="verticalTimeAxis")
    wrapping: Optional[StrictStr] = Field(default=None, description="Wrapping describes the text wrapping style to be used in table views")
    __properties: ClassVar[List[str]] = ["fixFirstColumn", "sortBy", "verticalTimeAxis", "wrapping"]

    @field_validator('wrapping')
    def wrapping_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['truncate', 'wrap', 'single-line']):
            raise ValueError("must be one of enum values ('truncate', 'wrap', 'single-line')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TableViewPropertiesTableOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sort_by
        if self.sort_by:
            _dict['sortBy'] = self.sort_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TableViewPropertiesTableOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fixFirstColumn": obj.get("fixFirstColumn"),
            "sortBy": RenamableField.from_dict(obj["sortBy"]) if obj.get("sortBy") is not None else None,
            "verticalTimeAxis": obj.get("verticalTimeAxis"),
            "wrapping": obj.get("wrapping")
        })
        return _obj



# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.boolean_literal import BooleanLiteral
from openapi_client.models.date_time_literal import DateTimeLiteral
from openapi_client.models.duration_literal import DurationLiteral
from openapi_client.models.float_literal import FloatLiteral
from openapi_client.models.identifier import Identifier
from openapi_client.models.integer_literal import IntegerLiteral
from openapi_client.models.pipe_literal import PipeLiteral
from openapi_client.models.regexp_literal import RegexpLiteral
from openapi_client.models.string_literal import StringLiteral
from openapi_client.models.unsigned_integer_literal import UnsignedIntegerLiteral
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

EXPRESSION_ONE_OF_SCHEMAS = ["ArrayExpression", "BinaryExpression", "BooleanLiteral", "CallExpression", "ConditionalExpression", "DateTimeLiteral", "DictExpression", "DurationLiteral", "FloatLiteral", "FunctionExpression", "Identifier", "IndexExpression", "IntegerLiteral", "LogicalExpression", "MemberExpression", "ObjectExpression", "ParenExpression", "PipeExpression", "PipeLiteral", "RegexpLiteral", "StringLiteral", "UnaryExpression", "UnsignedIntegerLiteral"]

class Expression(BaseModel):
    """
    Expression
    """
    # data type: ArrayExpression
    oneof_schema_1_validator: Optional[ArrayExpression] = None
    # data type: DictExpression
    oneof_schema_2_validator: Optional[DictExpression] = None
    # data type: FunctionExpression
    oneof_schema_3_validator: Optional[FunctionExpression] = None
    # data type: BinaryExpression
    oneof_schema_4_validator: Optional[BinaryExpression] = None
    # data type: CallExpression
    oneof_schema_5_validator: Optional[CallExpression] = None
    # data type: ConditionalExpression
    oneof_schema_6_validator: Optional[ConditionalExpression] = None
    # data type: LogicalExpression
    oneof_schema_7_validator: Optional[LogicalExpression] = None
    # data type: MemberExpression
    oneof_schema_8_validator: Optional[MemberExpression] = None
    # data type: IndexExpression
    oneof_schema_9_validator: Optional[IndexExpression] = None
    # data type: ObjectExpression
    oneof_schema_10_validator: Optional[ObjectExpression] = None
    # data type: ParenExpression
    oneof_schema_11_validator: Optional[ParenExpression] = None
    # data type: PipeExpression
    oneof_schema_12_validator: Optional[PipeExpression] = None
    # data type: UnaryExpression
    oneof_schema_13_validator: Optional[UnaryExpression] = None
    # data type: BooleanLiteral
    oneof_schema_14_validator: Optional[BooleanLiteral] = None
    # data type: DateTimeLiteral
    oneof_schema_15_validator: Optional[DateTimeLiteral] = None
    # data type: DurationLiteral
    oneof_schema_16_validator: Optional[DurationLiteral] = None
    # data type: FloatLiteral
    oneof_schema_17_validator: Optional[FloatLiteral] = None
    # data type: IntegerLiteral
    oneof_schema_18_validator: Optional[IntegerLiteral] = None
    # data type: PipeLiteral
    oneof_schema_19_validator: Optional[PipeLiteral] = None
    # data type: RegexpLiteral
    oneof_schema_20_validator: Optional[RegexpLiteral] = None
    # data type: StringLiteral
    oneof_schema_21_validator: Optional[StringLiteral] = None
    # data type: UnsignedIntegerLiteral
    oneof_schema_22_validator: Optional[UnsignedIntegerLiteral] = None
    # data type: Identifier
    oneof_schema_23_validator: Optional[Identifier] = None
    actual_instance: Optional[Union[ArrayExpression, BinaryExpression, BooleanLiteral, CallExpression, ConditionalExpression, DateTimeLiteral, DictExpression, DurationLiteral, FloatLiteral, FunctionExpression, Identifier, IndexExpression, IntegerLiteral, LogicalExpression, MemberExpression, ObjectExpression, ParenExpression, PipeExpression, PipeLiteral, RegexpLiteral, StringLiteral, UnaryExpression, UnsignedIntegerLiteral]] = None
    one_of_schemas: Set[str] = { "ArrayExpression", "BinaryExpression", "BooleanLiteral", "CallExpression", "ConditionalExpression", "DateTimeLiteral", "DictExpression", "DurationLiteral", "FloatLiteral", "FunctionExpression", "Identifier", "IndexExpression", "IntegerLiteral", "LogicalExpression", "MemberExpression", "ObjectExpression", "ParenExpression", "PipeExpression", "PipeLiteral", "RegexpLiteral", "StringLiteral", "UnaryExpression", "UnsignedIntegerLiteral" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = Expression.model_construct()
        error_messages = []
        match = 0
        # validate data type: ArrayExpression
        if not isinstance(v, ArrayExpression):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ArrayExpression`")
        else:
            match += 1
        # validate data type: DictExpression
        if not isinstance(v, DictExpression):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DictExpression`")
        else:
            match += 1
        # validate data type: FunctionExpression
        if not isinstance(v, FunctionExpression):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FunctionExpression`")
        else:
            match += 1
        # validate data type: BinaryExpression
        if not isinstance(v, BinaryExpression):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BinaryExpression`")
        else:
            match += 1
        # validate data type: CallExpression
        if not isinstance(v, CallExpression):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CallExpression`")
        else:
            match += 1
        # validate data type: ConditionalExpression
        if not isinstance(v, ConditionalExpression):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ConditionalExpression`")
        else:
            match += 1
        # validate data type: LogicalExpression
        if not isinstance(v, LogicalExpression):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LogicalExpression`")
        else:
            match += 1
        # validate data type: MemberExpression
        if not isinstance(v, MemberExpression):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MemberExpression`")
        else:
            match += 1
        # validate data type: IndexExpression
        if not isinstance(v, IndexExpression):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IndexExpression`")
        else:
            match += 1
        # validate data type: ObjectExpression
        if not isinstance(v, ObjectExpression):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObjectExpression`")
        else:
            match += 1
        # validate data type: ParenExpression
        if not isinstance(v, ParenExpression):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ParenExpression`")
        else:
            match += 1
        # validate data type: PipeExpression
        if not isinstance(v, PipeExpression):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PipeExpression`")
        else:
            match += 1
        # validate data type: UnaryExpression
        if not isinstance(v, UnaryExpression):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UnaryExpression`")
        else:
            match += 1
        # validate data type: BooleanLiteral
        if not isinstance(v, BooleanLiteral):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BooleanLiteral`")
        else:
            match += 1
        # validate data type: DateTimeLiteral
        if not isinstance(v, DateTimeLiteral):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DateTimeLiteral`")
        else:
            match += 1
        # validate data type: DurationLiteral
        if not isinstance(v, DurationLiteral):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DurationLiteral`")
        else:
            match += 1
        # validate data type: FloatLiteral
        if not isinstance(v, FloatLiteral):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FloatLiteral`")
        else:
            match += 1
        # validate data type: IntegerLiteral
        if not isinstance(v, IntegerLiteral):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IntegerLiteral`")
        else:
            match += 1
        # validate data type: PipeLiteral
        if not isinstance(v, PipeLiteral):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PipeLiteral`")
        else:
            match += 1
        # validate data type: RegexpLiteral
        if not isinstance(v, RegexpLiteral):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RegexpLiteral`")
        else:
            match += 1
        # validate data type: StringLiteral
        if not isinstance(v, StringLiteral):
            error_messages.append(f"Error! Input type `{type(v)}` is not `StringLiteral`")
        else:
            match += 1
        # validate data type: UnsignedIntegerLiteral
        if not isinstance(v, UnsignedIntegerLiteral):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UnsignedIntegerLiteral`")
        else:
            match += 1
        # validate data type: Identifier
        if not isinstance(v, Identifier):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Identifier`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in Expression with oneOf schemas: ArrayExpression, BinaryExpression, BooleanLiteral, CallExpression, ConditionalExpression, DateTimeLiteral, DictExpression, DurationLiteral, FloatLiteral, FunctionExpression, Identifier, IndexExpression, IntegerLiteral, LogicalExpression, MemberExpression, ObjectExpression, ParenExpression, PipeExpression, PipeLiteral, RegexpLiteral, StringLiteral, UnaryExpression, UnsignedIntegerLiteral. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in Expression with oneOf schemas: ArrayExpression, BinaryExpression, BooleanLiteral, CallExpression, ConditionalExpression, DateTimeLiteral, DictExpression, DurationLiteral, FloatLiteral, FunctionExpression, Identifier, IndexExpression, IntegerLiteral, LogicalExpression, MemberExpression, ObjectExpression, ParenExpression, PipeExpression, PipeLiteral, RegexpLiteral, StringLiteral, UnaryExpression, UnsignedIntegerLiteral. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into ArrayExpression
        try:
            instance.actual_instance = ArrayExpression.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DictExpression
        try:
            instance.actual_instance = DictExpression.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FunctionExpression
        try:
            instance.actual_instance = FunctionExpression.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BinaryExpression
        try:
            instance.actual_instance = BinaryExpression.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CallExpression
        try:
            instance.actual_instance = CallExpression.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ConditionalExpression
        try:
            instance.actual_instance = ConditionalExpression.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into LogicalExpression
        try:
            instance.actual_instance = LogicalExpression.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MemberExpression
        try:
            instance.actual_instance = MemberExpression.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IndexExpression
        try:
            instance.actual_instance = IndexExpression.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObjectExpression
        try:
            instance.actual_instance = ObjectExpression.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ParenExpression
        try:
            instance.actual_instance = ParenExpression.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PipeExpression
        try:
            instance.actual_instance = PipeExpression.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UnaryExpression
        try:
            instance.actual_instance = UnaryExpression.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BooleanLiteral
        try:
            instance.actual_instance = BooleanLiteral.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DateTimeLiteral
        try:
            instance.actual_instance = DateTimeLiteral.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DurationLiteral
        try:
            instance.actual_instance = DurationLiteral.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FloatLiteral
        try:
            instance.actual_instance = FloatLiteral.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IntegerLiteral
        try:
            instance.actual_instance = IntegerLiteral.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PipeLiteral
        try:
            instance.actual_instance = PipeLiteral.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RegexpLiteral
        try:
            instance.actual_instance = RegexpLiteral.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into StringLiteral
        try:
            instance.actual_instance = StringLiteral.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UnsignedIntegerLiteral
        try:
            instance.actual_instance = UnsignedIntegerLiteral.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Identifier
        try:
            instance.actual_instance = Identifier.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into Expression with oneOf schemas: ArrayExpression, BinaryExpression, BooleanLiteral, CallExpression, ConditionalExpression, DateTimeLiteral, DictExpression, DurationLiteral, FloatLiteral, FunctionExpression, Identifier, IndexExpression, IntegerLiteral, LogicalExpression, MemberExpression, ObjectExpression, ParenExpression, PipeExpression, PipeLiteral, RegexpLiteral, StringLiteral, UnaryExpression, UnsignedIntegerLiteral. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into Expression with oneOf schemas: ArrayExpression, BinaryExpression, BooleanLiteral, CallExpression, ConditionalExpression, DateTimeLiteral, DictExpression, DurationLiteral, FloatLiteral, FunctionExpression, Identifier, IndexExpression, IntegerLiteral, LogicalExpression, MemberExpression, ObjectExpression, ParenExpression, PipeExpression, PipeLiteral, RegexpLiteral, StringLiteral, UnaryExpression, UnsignedIntegerLiteral. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ArrayExpression, BinaryExpression, BooleanLiteral, CallExpression, ConditionalExpression, DateTimeLiteral, DictExpression, DurationLiteral, FloatLiteral, FunctionExpression, Identifier, IndexExpression, IntegerLiteral, LogicalExpression, MemberExpression, ObjectExpression, ParenExpression, PipeExpression, PipeLiteral, RegexpLiteral, StringLiteral, UnaryExpression, UnsignedIntegerLiteral]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())

from openapi_client.models.array_expression import ArrayExpression
from openapi_client.models.binary_expression import BinaryExpression
from openapi_client.models.call_expression import CallExpression
from openapi_client.models.conditional_expression import ConditionalExpression
from openapi_client.models.dict_expression import DictExpression
from openapi_client.models.function_expression import FunctionExpression
from openapi_client.models.index_expression import IndexExpression
from openapi_client.models.logical_expression import LogicalExpression
from openapi_client.models.member_expression import MemberExpression
from openapi_client.models.object_expression import ObjectExpression
from openapi_client.models.paren_expression import ParenExpression
from openapi_client.models.pipe_expression import PipeExpression
from openapi_client.models.unary_expression import UnaryExpression
# TODO: Rewrite to not use raise_errors
Expression.model_rebuild(raise_errors=False)


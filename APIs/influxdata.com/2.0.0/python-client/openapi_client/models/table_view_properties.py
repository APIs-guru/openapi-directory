# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from openapi_client.models.dashboard_color import DashboardColor
from openapi_client.models.dashboard_query import DashboardQuery
from openapi_client.models.decimal_places import DecimalPlaces
from openapi_client.models.renamable_field import RenamableField
from openapi_client.models.table_view_properties_table_options import TableViewPropertiesTableOptions
from typing import Optional, Set
from typing_extensions import Self

class TableViewProperties(BaseModel):
    """
    TableViewProperties
    """ # noqa: E501
    colors: List[DashboardColor] = Field(description="Colors define color encoding of data into a visualization")
    decimal_places: DecimalPlaces = Field(alias="decimalPlaces")
    field_options: List[RenamableField] = Field(description="fieldOptions represent the fields retrieved by the query with customization options", alias="fieldOptions")
    note: StrictStr
    queries: List[DashboardQuery]
    shape: StrictStr
    show_note_when_empty: StrictBool = Field(description="If true, will display note when empty", alias="showNoteWhenEmpty")
    table_options: TableViewPropertiesTableOptions = Field(alias="tableOptions")
    time_format: StrictStr = Field(description="timeFormat describes the display format for time values according to moment.js date formatting", alias="timeFormat")
    type: StrictStr
    __properties: ClassVar[List[str]] = ["colors", "decimalPlaces", "fieldOptions", "note", "queries", "shape", "showNoteWhenEmpty", "tableOptions", "timeFormat", "type"]

    @field_validator('shape')
    def shape_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['chronograf-v2']):
            raise ValueError("must be one of enum values ('chronograf-v2')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['table']):
            raise ValueError("must be one of enum values ('table')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TableViewProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in colors (list)
        _items = []
        if self.colors:
            for _item_colors in self.colors:
                if _item_colors:
                    _items.append(_item_colors.to_dict())
            _dict['colors'] = _items
        # override the default output from pydantic by calling `to_dict()` of decimal_places
        if self.decimal_places:
            _dict['decimalPlaces'] = self.decimal_places.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in field_options (list)
        _items = []
        if self.field_options:
            for _item_field_options in self.field_options:
                if _item_field_options:
                    _items.append(_item_field_options.to_dict())
            _dict['fieldOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in queries (list)
        _items = []
        if self.queries:
            for _item_queries in self.queries:
                if _item_queries:
                    _items.append(_item_queries.to_dict())
            _dict['queries'] = _items
        # override the default output from pydantic by calling `to_dict()` of table_options
        if self.table_options:
            _dict['tableOptions'] = self.table_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TableViewProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "colors": [DashboardColor.from_dict(_item) for _item in obj["colors"]] if obj.get("colors") is not None else None,
            "decimalPlaces": DecimalPlaces.from_dict(obj["decimalPlaces"]) if obj.get("decimalPlaces") is not None else None,
            "fieldOptions": [RenamableField.from_dict(_item) for _item in obj["fieldOptions"]] if obj.get("fieldOptions") is not None else None,
            "note": obj.get("note"),
            "queries": [DashboardQuery.from_dict(_item) for _item in obj["queries"]] if obj.get("queries") is not None else None,
            "shape": obj.get("shape"),
            "showNoteWhenEmpty": obj.get("showNoteWhenEmpty"),
            "tableOptions": TableViewPropertiesTableOptions.from_dict(obj["tableOptions"]) if obj.get("tableOptions") is not None else None,
            "timeFormat": obj.get("timeFormat"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.template_summary_diff_label_mappings_inner import TemplateSummaryDiffLabelMappingsInner
from openapi_client.models.template_summary_label import TemplateSummaryLabel
from openapi_client.models.template_summary_summary_buckets_inner import TemplateSummarySummaryBucketsInner
from openapi_client.models.template_summary_summary_checks_inner import TemplateSummarySummaryChecksInner
from openapi_client.models.template_summary_summary_dashboards_inner import TemplateSummarySummaryDashboardsInner
from openapi_client.models.template_summary_summary_notification_endpoints_inner import TemplateSummarySummaryNotificationEndpointsInner
from openapi_client.models.template_summary_summary_notification_rules_inner import TemplateSummarySummaryNotificationRulesInner
from openapi_client.models.template_summary_summary_tasks_inner import TemplateSummarySummaryTasksInner
from openapi_client.models.template_summary_summary_telegraf_configs_inner import TemplateSummarySummaryTelegrafConfigsInner
from openapi_client.models.template_summary_summary_variables_inner import TemplateSummarySummaryVariablesInner
from typing import Optional, Set
from typing_extensions import Self

class TemplateSummarySummary(BaseModel):
    """
    TemplateSummarySummary
    """ # noqa: E501
    buckets: Optional[List[TemplateSummarySummaryBucketsInner]] = None
    checks: Optional[List[TemplateSummarySummaryChecksInner]] = None
    dashboards: Optional[List[TemplateSummarySummaryDashboardsInner]] = None
    label_mappings: Optional[List[TemplateSummaryDiffLabelMappingsInner]] = Field(default=None, alias="labelMappings")
    labels: Optional[List[TemplateSummaryLabel]] = None
    missing_env_refs: Optional[List[StrictStr]] = Field(default=None, alias="missingEnvRefs")
    missing_secrets: Optional[List[StrictStr]] = Field(default=None, alias="missingSecrets")
    notification_endpoints: Optional[List[TemplateSummarySummaryNotificationEndpointsInner]] = Field(default=None, alias="notificationEndpoints")
    notification_rules: Optional[List[TemplateSummarySummaryNotificationRulesInner]] = Field(default=None, alias="notificationRules")
    tasks: Optional[List[TemplateSummarySummaryTasksInner]] = None
    telegraf_configs: Optional[List[TemplateSummarySummaryTelegrafConfigsInner]] = Field(default=None, alias="telegrafConfigs")
    variables: Optional[List[TemplateSummarySummaryVariablesInner]] = None
    __properties: ClassVar[List[str]] = ["buckets", "checks", "dashboards", "labelMappings", "labels", "missingEnvRefs", "missingSecrets", "notificationEndpoints", "notificationRules", "tasks", "telegrafConfigs", "variables"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TemplateSummarySummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in buckets (list)
        _items = []
        if self.buckets:
            for _item_buckets in self.buckets:
                if _item_buckets:
                    _items.append(_item_buckets.to_dict())
            _dict['buckets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in checks (list)
        _items = []
        if self.checks:
            for _item_checks in self.checks:
                if _item_checks:
                    _items.append(_item_checks.to_dict())
            _dict['checks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dashboards (list)
        _items = []
        if self.dashboards:
            for _item_dashboards in self.dashboards:
                if _item_dashboards:
                    _items.append(_item_dashboards.to_dict())
            _dict['dashboards'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in label_mappings (list)
        _items = []
        if self.label_mappings:
            for _item_label_mappings in self.label_mappings:
                if _item_label_mappings:
                    _items.append(_item_label_mappings.to_dict())
            _dict['labelMappings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item_labels in self.labels:
                if _item_labels:
                    _items.append(_item_labels.to_dict())
            _dict['labels'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in notification_endpoints (list)
        _items = []
        if self.notification_endpoints:
            for _item_notification_endpoints in self.notification_endpoints:
                if _item_notification_endpoints:
                    _items.append(_item_notification_endpoints.to_dict())
            _dict['notificationEndpoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in notification_rules (list)
        _items = []
        if self.notification_rules:
            for _item_notification_rules in self.notification_rules:
                if _item_notification_rules:
                    _items.append(_item_notification_rules.to_dict())
            _dict['notificationRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tasks (list)
        _items = []
        if self.tasks:
            for _item_tasks in self.tasks:
                if _item_tasks:
                    _items.append(_item_tasks.to_dict())
            _dict['tasks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in telegraf_configs (list)
        _items = []
        if self.telegraf_configs:
            for _item_telegraf_configs in self.telegraf_configs:
                if _item_telegraf_configs:
                    _items.append(_item_telegraf_configs.to_dict())
            _dict['telegrafConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in variables (list)
        _items = []
        if self.variables:
            for _item_variables in self.variables:
                if _item_variables:
                    _items.append(_item_variables.to_dict())
            _dict['variables'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TemplateSummarySummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buckets": [TemplateSummarySummaryBucketsInner.from_dict(_item) for _item in obj["buckets"]] if obj.get("buckets") is not None else None,
            "checks": [TemplateSummarySummaryChecksInner.from_dict(_item) for _item in obj["checks"]] if obj.get("checks") is not None else None,
            "dashboards": [TemplateSummarySummaryDashboardsInner.from_dict(_item) for _item in obj["dashboards"]] if obj.get("dashboards") is not None else None,
            "labelMappings": [TemplateSummaryDiffLabelMappingsInner.from_dict(_item) for _item in obj["labelMappings"]] if obj.get("labelMappings") is not None else None,
            "labels": [TemplateSummaryLabel.from_dict(_item) for _item in obj["labels"]] if obj.get("labels") is not None else None,
            "missingEnvRefs": obj.get("missingEnvRefs"),
            "missingSecrets": obj.get("missingSecrets"),
            "notificationEndpoints": [TemplateSummarySummaryNotificationEndpointsInner.from_dict(_item) for _item in obj["notificationEndpoints"]] if obj.get("notificationEndpoints") is not None else None,
            "notificationRules": [TemplateSummarySummaryNotificationRulesInner.from_dict(_item) for _item in obj["notificationRules"]] if obj.get("notificationRules") is not None else None,
            "tasks": [TemplateSummarySummaryTasksInner.from_dict(_item) for _item in obj["tasks"]] if obj.get("tasks") is not None else None,
            "telegrafConfigs": [TemplateSummarySummaryTelegrafConfigsInner.from_dict(_item) for _item in obj["telegrafConfigs"]] if obj.get("telegrafConfigs") is not None else None,
            "variables": [TemplateSummarySummaryVariablesInner.from_dict(_item) for _item in obj["variables"]] if obj.get("variables") is not None else None
        })
        return _obj



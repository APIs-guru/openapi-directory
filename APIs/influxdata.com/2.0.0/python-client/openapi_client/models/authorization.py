# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.authorization_all_of_links import AuthorizationAllOfLinks
from openapi_client.models.permission import Permission
from typing import Optional, Set
from typing_extensions import Self

class Authorization(BaseModel):
    """
    Authorization
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="A description of the token.")
    status: Optional[StrictStr] = Field(default='active', description="If inactive the token is inactive and requests using the token will be rejected.")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    id: Optional[StrictStr] = None
    links: Optional[AuthorizationAllOfLinks] = None
    org: Optional[StrictStr] = Field(default=None, description="Name of the org token is scoped to.")
    org_id: StrictStr = Field(description="ID of org that authorization is scoped to.", alias="orgID")
    permissions: Annotated[List[Permission], Field(min_length=1)] = Field(description="List of permissions for an auth.  An auth must have at least one Permission.")
    token: Optional[StrictStr] = Field(default=None, description="Passed via the Authorization Header and Token Authentication type.")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    user: Optional[StrictStr] = Field(default=None, description="Name of user that created and owns the token.")
    user_id: Optional[StrictStr] = Field(default=None, description="ID of user that created and owns the token.", alias="userID")
    __properties: ClassVar[List[str]] = ["description", "status", "createdAt", "id", "links", "org", "orgID", "permissions", "token", "updatedAt", "user", "userID"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['active', 'inactive']):
            raise ValueError("must be one of enum values ('active', 'inactive')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Authorization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "id",
            "org",
            "token",
            "updated_at",
            "user",
            "user_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in permissions (list)
        _items = []
        if self.permissions:
            for _item_permissions in self.permissions:
                if _item_permissions:
                    _items.append(_item_permissions.to_dict())
            _dict['permissions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Authorization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "status": obj.get("status") if obj.get("status") is not None else 'active',
            "createdAt": obj.get("createdAt"),
            "id": obj.get("id"),
            "links": AuthorizationAllOfLinks.from_dict(obj["links"]) if obj.get("links") is not None else None,
            "org": obj.get("org"),
            "orgID": obj.get("orgID"),
            "permissions": [Permission.from_dict(_item) for _item in obj["permissions"]] if obj.get("permissions") is not None else None,
            "token": obj.get("token"),
            "updatedAt": obj.get("updatedAt"),
            "user": obj.get("user"),
            "userID": obj.get("userID")
        })
        return _obj



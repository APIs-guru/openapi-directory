# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.template_summary_diff_notification_rules_inner_new_status_rules_inner import TemplateSummaryDiffNotificationRulesInnerNewStatusRulesInner
from openapi_client.models.template_summary_diff_notification_rules_inner_new_tag_rules_inner import TemplateSummaryDiffNotificationRulesInnerNewTagRulesInner
from typing import Optional, Set
from typing_extensions import Self

class TemplateSummaryDiffNotificationRulesInnerNew(BaseModel):
    """
    TemplateSummaryDiffNotificationRulesInnerNew
    """ # noqa: E501
    description: Optional[StrictStr] = None
    endpoint_id: Optional[StrictStr] = Field(default=None, alias="endpointID")
    endpoint_name: Optional[StrictStr] = Field(default=None, alias="endpointName")
    endpoint_type: Optional[StrictStr] = Field(default=None, alias="endpointType")
    every: Optional[StrictStr] = None
    message_template: Optional[StrictStr] = Field(default=None, alias="messageTemplate")
    name: Optional[StrictStr] = None
    offset: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    status_rules: Optional[List[TemplateSummaryDiffNotificationRulesInnerNewStatusRulesInner]] = Field(default=None, alias="statusRules")
    tag_rules: Optional[List[TemplateSummaryDiffNotificationRulesInnerNewTagRulesInner]] = Field(default=None, alias="tagRules")
    __properties: ClassVar[List[str]] = ["description", "endpointID", "endpointName", "endpointType", "every", "messageTemplate", "name", "offset", "status", "statusRules", "tagRules"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TemplateSummaryDiffNotificationRulesInnerNew from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in status_rules (list)
        _items = []
        if self.status_rules:
            for _item_status_rules in self.status_rules:
                if _item_status_rules:
                    _items.append(_item_status_rules.to_dict())
            _dict['statusRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tag_rules (list)
        _items = []
        if self.tag_rules:
            for _item_tag_rules in self.tag_rules:
                if _item_tag_rules:
                    _items.append(_item_tag_rules.to_dict())
            _dict['tagRules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TemplateSummaryDiffNotificationRulesInnerNew from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "endpointID": obj.get("endpointID"),
            "endpointName": obj.get("endpointName"),
            "endpointType": obj.get("endpointType"),
            "every": obj.get("every"),
            "messageTemplate": obj.get("messageTemplate"),
            "name": obj.get("name"),
            "offset": obj.get("offset"),
            "status": obj.get("status"),
            "statusRules": [TemplateSummaryDiffNotificationRulesInnerNewStatusRulesInner.from_dict(_item) for _item in obj["statusRules"]] if obj.get("statusRules") is not None else None,
            "tagRules": [TemplateSummaryDiffNotificationRulesInnerNewTagRulesInner.from_dict(_item) for _item in obj["tagRules"]] if obj.get("tagRules") is not None else None
        })
        return _obj



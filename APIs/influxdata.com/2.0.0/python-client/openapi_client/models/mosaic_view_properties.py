# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.dashboard_query import DashboardQuery
from typing import Optional, Set
from typing_extensions import Self

class MosaicViewProperties(BaseModel):
    """
    MosaicViewProperties
    """ # noqa: E501
    colors: List[StrictStr] = Field(description="Colors define color encoding of data into a visualization")
    fill_columns: List[StrictStr] = Field(alias="fillColumns")
    generate_x_axis_ticks: Optional[List[StrictStr]] = Field(default=None, alias="generateXAxisTicks")
    hover_dimension: Optional[StrictStr] = Field(default=None, alias="hoverDimension")
    legend_colorize_rows: Optional[StrictBool] = Field(default=None, alias="legendColorizeRows")
    legend_hide: Optional[StrictBool] = Field(default=None, alias="legendHide")
    legend_opacity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="legendOpacity")
    legend_orientation_threshold: Optional[StrictInt] = Field(default=None, alias="legendOrientationThreshold")
    note: StrictStr
    queries: List[DashboardQuery]
    shape: StrictStr
    show_note_when_empty: StrictBool = Field(description="If true, will display note when empty", alias="showNoteWhenEmpty")
    time_format: Optional[StrictStr] = Field(default=None, alias="timeFormat")
    type: StrictStr
    x_axis_label: StrictStr = Field(alias="xAxisLabel")
    x_column: StrictStr = Field(alias="xColumn")
    x_domain: Annotated[List[Union[StrictFloat, StrictInt]], Field(max_length=2)] = Field(alias="xDomain")
    x_prefix: StrictStr = Field(alias="xPrefix")
    x_suffix: StrictStr = Field(alias="xSuffix")
    x_tick_start: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="xTickStart")
    x_tick_step: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="xTickStep")
    x_total_ticks: Optional[StrictInt] = Field(default=None, alias="xTotalTicks")
    y_axis_label: StrictStr = Field(alias="yAxisLabel")
    y_domain: Annotated[List[Union[StrictFloat, StrictInt]], Field(max_length=2)] = Field(alias="yDomain")
    y_label_column_separator: Optional[StrictStr] = Field(default=None, alias="yLabelColumnSeparator")
    y_label_columns: Optional[List[StrictStr]] = Field(default=None, alias="yLabelColumns")
    y_prefix: StrictStr = Field(alias="yPrefix")
    y_series_columns: List[StrictStr] = Field(alias="ySeriesColumns")
    y_suffix: StrictStr = Field(alias="ySuffix")
    __properties: ClassVar[List[str]] = ["colors", "fillColumns", "generateXAxisTicks", "hoverDimension", "legendColorizeRows", "legendHide", "legendOpacity", "legendOrientationThreshold", "note", "queries", "shape", "showNoteWhenEmpty", "timeFormat", "type", "xAxisLabel", "xColumn", "xDomain", "xPrefix", "xSuffix", "xTickStart", "xTickStep", "xTotalTicks", "yAxisLabel", "yDomain", "yLabelColumnSeparator", "yLabelColumns", "yPrefix", "ySeriesColumns", "ySuffix"]

    @field_validator('hover_dimension')
    def hover_dimension_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['auto', 'x', 'y', 'xy']):
            raise ValueError("must be one of enum values ('auto', 'x', 'y', 'xy')")
        return value

    @field_validator('shape')
    def shape_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['chronograf-v2']):
            raise ValueError("must be one of enum values ('chronograf-v2')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['mosaic']):
            raise ValueError("must be one of enum values ('mosaic')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MosaicViewProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in queries (list)
        _items = []
        if self.queries:
            for _item_queries in self.queries:
                if _item_queries:
                    _items.append(_item_queries.to_dict())
            _dict['queries'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MosaicViewProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "colors": obj.get("colors"),
            "fillColumns": obj.get("fillColumns"),
            "generateXAxisTicks": obj.get("generateXAxisTicks"),
            "hoverDimension": obj.get("hoverDimension"),
            "legendColorizeRows": obj.get("legendColorizeRows"),
            "legendHide": obj.get("legendHide"),
            "legendOpacity": obj.get("legendOpacity"),
            "legendOrientationThreshold": obj.get("legendOrientationThreshold"),
            "note": obj.get("note"),
            "queries": [DashboardQuery.from_dict(_item) for _item in obj["queries"]] if obj.get("queries") is not None else None,
            "shape": obj.get("shape"),
            "showNoteWhenEmpty": obj.get("showNoteWhenEmpty"),
            "timeFormat": obj.get("timeFormat"),
            "type": obj.get("type"),
            "xAxisLabel": obj.get("xAxisLabel"),
            "xColumn": obj.get("xColumn"),
            "xDomain": obj.get("xDomain"),
            "xPrefix": obj.get("xPrefix"),
            "xSuffix": obj.get("xSuffix"),
            "xTickStart": obj.get("xTickStart"),
            "xTickStep": obj.get("xTickStep"),
            "xTotalTicks": obj.get("xTotalTicks"),
            "yAxisLabel": obj.get("yAxisLabel"),
            "yDomain": obj.get("yDomain"),
            "yLabelColumnSeparator": obj.get("yLabelColumnSeparator"),
            "yLabelColumns": obj.get("yLabelColumns"),
            "yPrefix": obj.get("yPrefix"),
            "ySeriesColumns": obj.get("ySeriesColumns"),
            "ySuffix": obj.get("ySuffix")
        })
        return _obj



# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.band_view_properties import BandViewProperties
from openapi_client.models.check_view_properties import CheckViewProperties
from openapi_client.models.gauge_view_properties import GaugeViewProperties
from openapi_client.models.geo_view_properties import GeoViewProperties
from openapi_client.models.heatmap_view_properties import HeatmapViewProperties
from openapi_client.models.histogram_view_properties import HistogramViewProperties
from openapi_client.models.line_plus_single_stat_properties import LinePlusSingleStatProperties
from openapi_client.models.markdown_view_properties import MarkdownViewProperties
from openapi_client.models.mosaic_view_properties import MosaicViewProperties
from openapi_client.models.scatter_view_properties import ScatterViewProperties
from openapi_client.models.single_stat_view_properties import SingleStatViewProperties
from openapi_client.models.table_view_properties import TableViewProperties
from openapi_client.models.xy_view_properties import XYViewProperties
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

VIEWPROPERTIES_ONE_OF_SCHEMAS = ["BandViewProperties", "CheckViewProperties", "GaugeViewProperties", "GeoViewProperties", "HeatmapViewProperties", "HistogramViewProperties", "LinePlusSingleStatProperties", "MarkdownViewProperties", "MosaicViewProperties", "ScatterViewProperties", "SingleStatViewProperties", "TableViewProperties", "XYViewProperties"]

class ViewProperties(BaseModel):
    """
    ViewProperties
    """
    # data type: LinePlusSingleStatProperties
    oneof_schema_1_validator: Optional[LinePlusSingleStatProperties] = None
    # data type: XYViewProperties
    oneof_schema_2_validator: Optional[XYViewProperties] = None
    # data type: SingleStatViewProperties
    oneof_schema_3_validator: Optional[SingleStatViewProperties] = None
    # data type: HistogramViewProperties
    oneof_schema_4_validator: Optional[HistogramViewProperties] = None
    # data type: GaugeViewProperties
    oneof_schema_5_validator: Optional[GaugeViewProperties] = None
    # data type: TableViewProperties
    oneof_schema_6_validator: Optional[TableViewProperties] = None
    # data type: MarkdownViewProperties
    oneof_schema_7_validator: Optional[MarkdownViewProperties] = None
    # data type: CheckViewProperties
    oneof_schema_8_validator: Optional[CheckViewProperties] = None
    # data type: ScatterViewProperties
    oneof_schema_9_validator: Optional[ScatterViewProperties] = None
    # data type: HeatmapViewProperties
    oneof_schema_10_validator: Optional[HeatmapViewProperties] = None
    # data type: MosaicViewProperties
    oneof_schema_11_validator: Optional[MosaicViewProperties] = None
    # data type: BandViewProperties
    oneof_schema_12_validator: Optional[BandViewProperties] = None
    # data type: GeoViewProperties
    oneof_schema_13_validator: Optional[GeoViewProperties] = None
    actual_instance: Optional[Union[BandViewProperties, CheckViewProperties, GaugeViewProperties, GeoViewProperties, HeatmapViewProperties, HistogramViewProperties, LinePlusSingleStatProperties, MarkdownViewProperties, MosaicViewProperties, ScatterViewProperties, SingleStatViewProperties, TableViewProperties, XYViewProperties]] = None
    one_of_schemas: Set[str] = { "BandViewProperties", "CheckViewProperties", "GaugeViewProperties", "GeoViewProperties", "HeatmapViewProperties", "HistogramViewProperties", "LinePlusSingleStatProperties", "MarkdownViewProperties", "MosaicViewProperties", "ScatterViewProperties", "SingleStatViewProperties", "TableViewProperties", "XYViewProperties" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = ViewProperties.model_construct()
        error_messages = []
        match = 0
        # validate data type: LinePlusSingleStatProperties
        if not isinstance(v, LinePlusSingleStatProperties):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LinePlusSingleStatProperties`")
        else:
            match += 1
        # validate data type: XYViewProperties
        if not isinstance(v, XYViewProperties):
            error_messages.append(f"Error! Input type `{type(v)}` is not `XYViewProperties`")
        else:
            match += 1
        # validate data type: SingleStatViewProperties
        if not isinstance(v, SingleStatViewProperties):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SingleStatViewProperties`")
        else:
            match += 1
        # validate data type: HistogramViewProperties
        if not isinstance(v, HistogramViewProperties):
            error_messages.append(f"Error! Input type `{type(v)}` is not `HistogramViewProperties`")
        else:
            match += 1
        # validate data type: GaugeViewProperties
        if not isinstance(v, GaugeViewProperties):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GaugeViewProperties`")
        else:
            match += 1
        # validate data type: TableViewProperties
        if not isinstance(v, TableViewProperties):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TableViewProperties`")
        else:
            match += 1
        # validate data type: MarkdownViewProperties
        if not isinstance(v, MarkdownViewProperties):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MarkdownViewProperties`")
        else:
            match += 1
        # validate data type: CheckViewProperties
        if not isinstance(v, CheckViewProperties):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CheckViewProperties`")
        else:
            match += 1
        # validate data type: ScatterViewProperties
        if not isinstance(v, ScatterViewProperties):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ScatterViewProperties`")
        else:
            match += 1
        # validate data type: HeatmapViewProperties
        if not isinstance(v, HeatmapViewProperties):
            error_messages.append(f"Error! Input type `{type(v)}` is not `HeatmapViewProperties`")
        else:
            match += 1
        # validate data type: MosaicViewProperties
        if not isinstance(v, MosaicViewProperties):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MosaicViewProperties`")
        else:
            match += 1
        # validate data type: BandViewProperties
        if not isinstance(v, BandViewProperties):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BandViewProperties`")
        else:
            match += 1
        # validate data type: GeoViewProperties
        if not isinstance(v, GeoViewProperties):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GeoViewProperties`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in ViewProperties with oneOf schemas: BandViewProperties, CheckViewProperties, GaugeViewProperties, GeoViewProperties, HeatmapViewProperties, HistogramViewProperties, LinePlusSingleStatProperties, MarkdownViewProperties, MosaicViewProperties, ScatterViewProperties, SingleStatViewProperties, TableViewProperties, XYViewProperties. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in ViewProperties with oneOf schemas: BandViewProperties, CheckViewProperties, GaugeViewProperties, GeoViewProperties, HeatmapViewProperties, HistogramViewProperties, LinePlusSingleStatProperties, MarkdownViewProperties, MosaicViewProperties, ScatterViewProperties, SingleStatViewProperties, TableViewProperties, XYViewProperties. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into LinePlusSingleStatProperties
        try:
            instance.actual_instance = LinePlusSingleStatProperties.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into XYViewProperties
        try:
            instance.actual_instance = XYViewProperties.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SingleStatViewProperties
        try:
            instance.actual_instance = SingleStatViewProperties.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into HistogramViewProperties
        try:
            instance.actual_instance = HistogramViewProperties.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GaugeViewProperties
        try:
            instance.actual_instance = GaugeViewProperties.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TableViewProperties
        try:
            instance.actual_instance = TableViewProperties.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MarkdownViewProperties
        try:
            instance.actual_instance = MarkdownViewProperties.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CheckViewProperties
        try:
            instance.actual_instance = CheckViewProperties.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ScatterViewProperties
        try:
            instance.actual_instance = ScatterViewProperties.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into HeatmapViewProperties
        try:
            instance.actual_instance = HeatmapViewProperties.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MosaicViewProperties
        try:
            instance.actual_instance = MosaicViewProperties.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BandViewProperties
        try:
            instance.actual_instance = BandViewProperties.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GeoViewProperties
        try:
            instance.actual_instance = GeoViewProperties.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ViewProperties with oneOf schemas: BandViewProperties, CheckViewProperties, GaugeViewProperties, GeoViewProperties, HeatmapViewProperties, HistogramViewProperties, LinePlusSingleStatProperties, MarkdownViewProperties, MosaicViewProperties, ScatterViewProperties, SingleStatViewProperties, TableViewProperties, XYViewProperties. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ViewProperties with oneOf schemas: BandViewProperties, CheckViewProperties, GaugeViewProperties, GeoViewProperties, HeatmapViewProperties, HistogramViewProperties, LinePlusSingleStatProperties, MarkdownViewProperties, MosaicViewProperties, ScatterViewProperties, SingleStatViewProperties, TableViewProperties, XYViewProperties. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], BandViewProperties, CheckViewProperties, GaugeViewProperties, GeoViewProperties, HeatmapViewProperties, HistogramViewProperties, LinePlusSingleStatProperties, MarkdownViewProperties, MosaicViewProperties, ScatterViewProperties, SingleStatViewProperties, TableViewProperties, XYViewProperties]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



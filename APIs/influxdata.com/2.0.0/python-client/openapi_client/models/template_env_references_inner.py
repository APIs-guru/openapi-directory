# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.template_env_references_inner_default_value import TemplateEnvReferencesInnerDefaultValue
from openapi_client.models.template_env_references_inner_value import TemplateEnvReferencesInnerValue
from typing import Optional, Set
from typing_extensions import Self

class TemplateEnvReferencesInner(BaseModel):
    """
    TemplateEnvReferencesInner
    """ # noqa: E501
    default_value: Optional[TemplateEnvReferencesInnerDefaultValue] = Field(default=None, alias="defaultValue")
    env_ref_key: StrictStr = Field(description="Key identified as environment reference and is the key identified in the template", alias="envRefKey")
    resource_field: StrictStr = Field(description="Field the environment reference corresponds too", alias="resourceField")
    value: Optional[TemplateEnvReferencesInnerValue] = None
    __properties: ClassVar[List[str]] = ["defaultValue", "envRefKey", "resourceField", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TemplateEnvReferencesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_value
        if self.default_value:
            _dict['defaultValue'] = self.default_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of value
        if self.value:
            _dict['value'] = self.value.to_dict()
        # set to None if default_value (nullable) is None
        # and model_fields_set contains the field
        if self.default_value is None and "default_value" in self.model_fields_set:
            _dict['defaultValue'] = None

        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict['value'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TemplateEnvReferencesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultValue": TemplateEnvReferencesInnerDefaultValue.from_dict(obj["defaultValue"]) if obj.get("defaultValue") is not None else None,
            "envRefKey": obj.get("envRefKey"),
            "resourceField": obj.get("resourceField"),
            "value": TemplateEnvReferencesInnerValue.from_dict(obj["value"]) if obj.get("value") is not None else None
        })
        return _obj



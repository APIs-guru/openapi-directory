# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.source_links import SourceLinks
from typing import Optional, Set
from typing_extensions import Self

class Source(BaseModel):
    """
    Source
    """ # noqa: E501
    default: Optional[StrictBool] = None
    default_rp: Optional[StrictStr] = Field(default=None, alias="defaultRP")
    id: Optional[StrictStr] = None
    insecure_skip_verify: Optional[StrictBool] = Field(default=None, alias="insecureSkipVerify")
    languages: Optional[List[StrictStr]] = None
    links: Optional[SourceLinks] = None
    meta_url: Optional[StrictStr] = Field(default=None, alias="metaUrl")
    name: Optional[StrictStr] = None
    org_id: Optional[StrictStr] = Field(default=None, alias="orgID")
    password: Optional[StrictStr] = None
    shared_secret: Optional[StrictStr] = Field(default=None, alias="sharedSecret")
    telegraf: Optional[StrictStr] = None
    token: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    username: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["default", "defaultRP", "id", "insecureSkipVerify", "languages", "links", "metaUrl", "name", "orgID", "password", "sharedSecret", "telegraf", "token", "type", "url", "username"]

    @field_validator('languages')
    def languages_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['flux', 'influxql']):
                raise ValueError("each list item must be one of ('flux', 'influxql')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['v1', 'v2', 'self']):
            raise ValueError("must be one of enum values ('v1', 'v2', 'self')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Source from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "languages",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['links'] = self.links.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Source from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "default": obj.get("default"),
            "defaultRP": obj.get("defaultRP"),
            "id": obj.get("id"),
            "insecureSkipVerify": obj.get("insecureSkipVerify"),
            "languages": obj.get("languages"),
            "links": SourceLinks.from_dict(obj["links"]) if obj.get("links") is not None else None,
            "metaUrl": obj.get("metaUrl"),
            "name": obj.get("name"),
            "orgID": obj.get("orgID"),
            "password": obj.get("password"),
            "sharedSecret": obj.get("sharedSecret"),
            "telegraf": obj.get("telegraf"),
            "token": obj.get("token"),
            "type": obj.get("type"),
            "url": obj.get("url"),
            "username": obj.get("username")
        })
        return _obj



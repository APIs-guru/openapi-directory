# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.template_env_references_inner import TemplateEnvReferencesInner
from openapi_client.models.template_kind import TemplateKind
from openapi_client.models.template_summary_label_properties import TemplateSummaryLabelProperties
from typing import Optional, Set
from typing_extensions import Self

class TemplateSummaryLabel(BaseModel):
    """
    TemplateSummaryLabel
    """ # noqa: E501
    env_references: Optional[List[TemplateEnvReferencesInner]] = Field(default=None, alias="envReferences")
    id: Optional[StrictStr] = None
    kind: Optional[TemplateKind] = None
    name: Optional[StrictStr] = None
    org_id: Optional[StrictStr] = Field(default=None, alias="orgID")
    properties: Optional[TemplateSummaryLabelProperties] = None
    template_meta_name: Optional[StrictStr] = Field(default=None, alias="templateMetaName")
    __properties: ClassVar[List[str]] = ["envReferences", "id", "kind", "name", "orgID", "properties", "templateMetaName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TemplateSummaryLabel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in env_references (list)
        _items = []
        if self.env_references:
            for _item_env_references in self.env_references:
                if _item_env_references:
                    _items.append(_item_env_references.to_dict())
            _dict['envReferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            _dict['properties'] = self.properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TemplateSummaryLabel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "envReferences": [TemplateEnvReferencesInner.from_dict(_item) for _item in obj["envReferences"]] if obj.get("envReferences") is not None else None,
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "name": obj.get("name"),
            "orgID": obj.get("orgID"),
            "properties": TemplateSummaryLabelProperties.from_dict(obj["properties"]) if obj.get("properties") is not None else None,
            "templateMetaName": obj.get("templateMetaName")
        })
        return _obj



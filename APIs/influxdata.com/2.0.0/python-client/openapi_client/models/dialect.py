# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Dialect(BaseModel):
    """
    Dialect are options to change the default CSV output format; https://www.w3.org/TR/2015/REC-tabular-metadata-20151217/#dialect-descriptions
    """ # noqa: E501
    annotations: Optional[List[StrictStr]] = Field(default=None, description="https://www.w3.org/TR/2015/REC-tabular-data-model-20151217/#columns")
    comment_prefix: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1)]] = Field(default='#', description="Character prefixed to comment strings", alias="commentPrefix")
    date_time_format: Optional[StrictStr] = Field(default='RFC3339', description="Format of timestamps", alias="dateTimeFormat")
    delimiter: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=1)]] = Field(default=',', description="Separator between cells; the default is ,")
    header: Optional[StrictBool] = Field(default=True, description="If true, the results will contain a header row")
    __properties: ClassVar[List[str]] = ["annotations", "commentPrefix", "dateTimeFormat", "delimiter", "header"]

    @field_validator('annotations')
    def annotations_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['group', 'datatype', 'default']):
                raise ValueError("each list item must be one of ('group', 'datatype', 'default')")
        return value

    @field_validator('date_time_format')
    def date_time_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RFC3339', 'RFC3339Nano']):
            raise ValueError("must be one of enum values ('RFC3339', 'RFC3339Nano')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Dialect from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Dialect from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "commentPrefix": obj.get("commentPrefix") if obj.get("commentPrefix") is not None else '#',
            "dateTimeFormat": obj.get("dateTimeFormat") if obj.get("dateTimeFormat") is not None else 'RFC3339',
            "delimiter": obj.get("delimiter") if obj.get("delimiter") is not None else ',',
            "header": obj.get("header") if obj.get("header") is not None else True
        })
        return _obj



# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict
from typing import Any, ClassVar, Dict, List
from openapi_client.models.label import Label
from openapi_client.models.notification_rule_base_links import NotificationRuleBaseLinks
from openapi_client.models.notification_rule_discriminator import NotificationRuleDiscriminator
from openapi_client.models.status_rule import StatusRule
from openapi_client.models.tag_rule import TagRule
from openapi_client.models.task_status_type import TaskStatusType
from typing import Optional, Set
from typing_extensions import Self

class PostNotificationRule(NotificationRuleDiscriminator):
    """
    PostNotificationRule
    """ # noqa: E501
    __properties: ClassVar[List[str]] = ["createdAt", "description", "endpointID", "every", "id", "labels", "lastRunError", "lastRunStatus", "latestCompleted", "limit", "limitEvery", "links", "name", "offset", "orgID", "ownerID", "runbookLink", "sleepUntil", "status", "statusRules", "tagRules", "taskID", "updatedAt", "channel", "messageTemplate", "type", "bodyTemplate", "subjectTemplate", "to", "url", "disableWebPagePreview", "parseMode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostNotificationRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item_labels in self.labels:
                if _item_labels:
                    _items.append(_item_labels.to_dict())
            _dict['labels'] = _items
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in status_rules (list)
        _items = []
        if self.status_rules:
            for _item_status_rules in self.status_rules:
                if _item_status_rules:
                    _items.append(_item_status_rules.to_dict())
            _dict['statusRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tag_rules (list)
        _items = []
        if self.tag_rules:
            for _item_tag_rules in self.tag_rules:
                if _item_tag_rules:
                    _items.append(_item_tag_rules.to_dict())
            _dict['tagRules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostNotificationRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdAt": obj.get("createdAt"),
            "description": obj.get("description"),
            "endpointID": obj.get("endpointID"),
            "every": obj.get("every"),
            "id": obj.get("id"),
            "labels": [Label.from_dict(_item) for _item in obj["labels"]] if obj.get("labels") is not None else None,
            "lastRunError": obj.get("lastRunError"),
            "lastRunStatus": obj.get("lastRunStatus"),
            "latestCompleted": obj.get("latestCompleted"),
            "limit": obj.get("limit"),
            "limitEvery": obj.get("limitEvery"),
            "links": NotificationRuleBaseLinks.from_dict(obj["links"]) if obj.get("links") is not None else None,
            "name": obj.get("name"),
            "offset": obj.get("offset"),
            "orgID": obj.get("orgID"),
            "ownerID": obj.get("ownerID"),
            "runbookLink": obj.get("runbookLink"),
            "sleepUntil": obj.get("sleepUntil"),
            "status": obj.get("status"),
            "statusRules": [StatusRule.from_dict(_item) for _item in obj["statusRules"]] if obj.get("statusRules") is not None else None,
            "tagRules": [TagRule.from_dict(_item) for _item in obj["tagRules"]] if obj.get("tagRules") is not None else None,
            "taskID": obj.get("taskID"),
            "updatedAt": obj.get("updatedAt"),
            "channel": obj.get("channel"),
            "messageTemplate": obj.get("messageTemplate"),
            "type": obj.get("type"),
            "bodyTemplate": obj.get("bodyTemplate"),
            "subjectTemplate": obj.get("subjectTemplate"),
            "to": obj.get("to"),
            "url": obj.get("url"),
            "disableWebPagePreview": obj.get("disableWebPagePreview"),
            "parseMode": obj.get("parseMode")
        })
        return _obj



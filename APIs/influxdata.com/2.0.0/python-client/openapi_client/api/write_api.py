# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBytes, StrictInt, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from openapi_client.models.write_precision import WritePrecision

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class WriteApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def post_write(
        self,
        org: Annotated[StrictStr, Field(description="Specifies the destination organization for writes. Takes either the ID or Name interchangeably. If both `orgID` and `org` are specified, `org` takes precedence.")],
        bucket: Annotated[StrictStr, Field(description="The destination bucket for writes.")],
        body: Annotated[Union[StrictBytes, StrictStr], Field(description="Line protocol body")],
        zap_trace_span: Annotated[Optional[StrictStr], Field(description="OpenTracing span context")] = None,
        content_encoding: Annotated[Optional[StrictStr], Field(description="When present, its value indicates to the database that compression is applied to the line-protocol body.")] = None,
        content_type: Annotated[Optional[StrictStr], Field(description="Content-Type is used to indicate the format of the data sent to the server.")] = None,
        content_length: Annotated[Optional[StrictInt], Field(description="Content-Length is an entity header is indicating the size of the entity-body, in bytes, sent to the database. If the length is greater than the database max body configuration option, a 413 response is sent.")] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Specifies the return content format.")] = None,
        org_id: Annotated[Optional[StrictStr], Field(description="Specifies the ID of the destination organization for writes. If both `orgID` and `org` are specified, `org` takes precedence.")] = None,
        precision: Annotated[Optional[WritePrecision], Field(description="The precision for the unix timestamps within the body line-protocol.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Write time series data into InfluxDB


        :param org: Specifies the destination organization for writes. Takes either the ID or Name interchangeably. If both `orgID` and `org` are specified, `org` takes precedence. (required)
        :type org: str
        :param bucket: The destination bucket for writes. (required)
        :type bucket: str
        :param body: Line protocol body (required)
        :type body: bytearray
        :param zap_trace_span: OpenTracing span context
        :type zap_trace_span: str
        :param content_encoding: When present, its value indicates to the database that compression is applied to the line-protocol body.
        :type content_encoding: str
        :param content_type: Content-Type is used to indicate the format of the data sent to the server.
        :type content_type: str
        :param content_length: Content-Length is an entity header is indicating the size of the entity-body, in bytes, sent to the database. If the length is greater than the database max body configuration option, a 413 response is sent.
        :type content_length: int
        :param accept: Specifies the return content format.
        :type accept: str
        :param org_id: Specifies the ID of the destination organization for writes. If both `orgID` and `org` are specified, `org` takes precedence.
        :type org_id: str
        :param precision: The precision for the unix timestamps within the body line-protocol.
        :type precision: WritePrecision
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_write_serialize(
            org=org,
            bucket=bucket,
            body=body,
            zap_trace_span=zap_trace_span,
            content_encoding=content_encoding,
            content_type=content_type,
            content_length=content_length,
            accept=accept,
            org_id=org_id,
            precision=precision,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "LineProtocolError",
            '401': "Error",
            '403': "Error",
            '413': "LineProtocolLengthError",
            '429': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_write_with_http_info(
        self,
        org: Annotated[StrictStr, Field(description="Specifies the destination organization for writes. Takes either the ID or Name interchangeably. If both `orgID` and `org` are specified, `org` takes precedence.")],
        bucket: Annotated[StrictStr, Field(description="The destination bucket for writes.")],
        body: Annotated[Union[StrictBytes, StrictStr], Field(description="Line protocol body")],
        zap_trace_span: Annotated[Optional[StrictStr], Field(description="OpenTracing span context")] = None,
        content_encoding: Annotated[Optional[StrictStr], Field(description="When present, its value indicates to the database that compression is applied to the line-protocol body.")] = None,
        content_type: Annotated[Optional[StrictStr], Field(description="Content-Type is used to indicate the format of the data sent to the server.")] = None,
        content_length: Annotated[Optional[StrictInt], Field(description="Content-Length is an entity header is indicating the size of the entity-body, in bytes, sent to the database. If the length is greater than the database max body configuration option, a 413 response is sent.")] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Specifies the return content format.")] = None,
        org_id: Annotated[Optional[StrictStr], Field(description="Specifies the ID of the destination organization for writes. If both `orgID` and `org` are specified, `org` takes precedence.")] = None,
        precision: Annotated[Optional[WritePrecision], Field(description="The precision for the unix timestamps within the body line-protocol.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Write time series data into InfluxDB


        :param org: Specifies the destination organization for writes. Takes either the ID or Name interchangeably. If both `orgID` and `org` are specified, `org` takes precedence. (required)
        :type org: str
        :param bucket: The destination bucket for writes. (required)
        :type bucket: str
        :param body: Line protocol body (required)
        :type body: bytearray
        :param zap_trace_span: OpenTracing span context
        :type zap_trace_span: str
        :param content_encoding: When present, its value indicates to the database that compression is applied to the line-protocol body.
        :type content_encoding: str
        :param content_type: Content-Type is used to indicate the format of the data sent to the server.
        :type content_type: str
        :param content_length: Content-Length is an entity header is indicating the size of the entity-body, in bytes, sent to the database. If the length is greater than the database max body configuration option, a 413 response is sent.
        :type content_length: int
        :param accept: Specifies the return content format.
        :type accept: str
        :param org_id: Specifies the ID of the destination organization for writes. If both `orgID` and `org` are specified, `org` takes precedence.
        :type org_id: str
        :param precision: The precision for the unix timestamps within the body line-protocol.
        :type precision: WritePrecision
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_write_serialize(
            org=org,
            bucket=bucket,
            body=body,
            zap_trace_span=zap_trace_span,
            content_encoding=content_encoding,
            content_type=content_type,
            content_length=content_length,
            accept=accept,
            org_id=org_id,
            precision=precision,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "LineProtocolError",
            '401': "Error",
            '403': "Error",
            '413': "LineProtocolLengthError",
            '429': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_write_without_preload_content(
        self,
        org: Annotated[StrictStr, Field(description="Specifies the destination organization for writes. Takes either the ID or Name interchangeably. If both `orgID` and `org` are specified, `org` takes precedence.")],
        bucket: Annotated[StrictStr, Field(description="The destination bucket for writes.")],
        body: Annotated[Union[StrictBytes, StrictStr], Field(description="Line protocol body")],
        zap_trace_span: Annotated[Optional[StrictStr], Field(description="OpenTracing span context")] = None,
        content_encoding: Annotated[Optional[StrictStr], Field(description="When present, its value indicates to the database that compression is applied to the line-protocol body.")] = None,
        content_type: Annotated[Optional[StrictStr], Field(description="Content-Type is used to indicate the format of the data sent to the server.")] = None,
        content_length: Annotated[Optional[StrictInt], Field(description="Content-Length is an entity header is indicating the size of the entity-body, in bytes, sent to the database. If the length is greater than the database max body configuration option, a 413 response is sent.")] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Specifies the return content format.")] = None,
        org_id: Annotated[Optional[StrictStr], Field(description="Specifies the ID of the destination organization for writes. If both `orgID` and `org` are specified, `org` takes precedence.")] = None,
        precision: Annotated[Optional[WritePrecision], Field(description="The precision for the unix timestamps within the body line-protocol.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Write time series data into InfluxDB


        :param org: Specifies the destination organization for writes. Takes either the ID or Name interchangeably. If both `orgID` and `org` are specified, `org` takes precedence. (required)
        :type org: str
        :param bucket: The destination bucket for writes. (required)
        :type bucket: str
        :param body: Line protocol body (required)
        :type body: bytearray
        :param zap_trace_span: OpenTracing span context
        :type zap_trace_span: str
        :param content_encoding: When present, its value indicates to the database that compression is applied to the line-protocol body.
        :type content_encoding: str
        :param content_type: Content-Type is used to indicate the format of the data sent to the server.
        :type content_type: str
        :param content_length: Content-Length is an entity header is indicating the size of the entity-body, in bytes, sent to the database. If the length is greater than the database max body configuration option, a 413 response is sent.
        :type content_length: int
        :param accept: Specifies the return content format.
        :type accept: str
        :param org_id: Specifies the ID of the destination organization for writes. If both `orgID` and `org` are specified, `org` takes precedence.
        :type org_id: str
        :param precision: The precision for the unix timestamps within the body line-protocol.
        :type precision: WritePrecision
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_write_serialize(
            org=org,
            bucket=bucket,
            body=body,
            zap_trace_span=zap_trace_span,
            content_encoding=content_encoding,
            content_type=content_type,
            content_length=content_length,
            accept=accept,
            org_id=org_id,
            precision=precision,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "LineProtocolError",
            '401': "Error",
            '403': "Error",
            '413': "LineProtocolLengthError",
            '429': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_write_serialize(
        self,
        org,
        bucket,
        body,
        zap_trace_span,
        content_encoding,
        content_type,
        content_length,
        accept,
        org_id,
        precision,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if org is not None:
            
            _query_params.append(('org', org))
            
        if org_id is not None:
            
            _query_params.append(('orgID', org_id))
            
        if bucket is not None:
            
            _query_params.append(('bucket', bucket))
            
        if precision is not None:
            
            _query_params.append(('precision', precision.value))
            
        # process the header parameters
        if zap_trace_span is not None:
            _header_params['Zap-Trace-Span'] = zap_trace_span
        if content_encoding is not None:
            _header_params['Content-Encoding'] = content_encoding
        if content_type is not None:
            _header_params['Content-Type'] = content_type
        if content_length is not None:
            _header_params['Content-Length'] = content_length
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'text/plain'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/write',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



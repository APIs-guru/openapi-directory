# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.template_apply import TemplateApply

class TestTemplateApply(unittest.TestCase):
    """TemplateApply unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TemplateApply:
        """Test TemplateApply
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TemplateApply`
        """
        model = TemplateApply()
        if include_optional:
            return TemplateApply(
                actions = [
                    null
                    ],
                dry_run = True,
                env_refs = {
                    'key' : null
                    },
                org_id = '',
                remotes = [
                    openapi_client.models.template_apply_remotes_inner.TemplateApply_remotes_inner(
                        content_type = '', 
                        url = '', )
                    ],
                secrets = {
                    'key' : ''
                    },
                stack_id = '',
                template = openapi_client.models.template_apply_template.TemplateApply_template(
                    content_type = '', 
                    contents = [
                        openapi_client.models.template_inner.Template_inner(
                            api_version = '', 
                            kind = 'Bucket', 
                            meta = openapi_client.models.template_inner_meta.Template_inner_meta(
                                name = '', ), 
                            spec = openapi_client.models.spec.spec(), )
                        ], 
                    sources = [
                        ''
                        ], ),
                templates = [
                    openapi_client.models.template_apply_template.TemplateApply_template(
                        content_type = '', 
                        contents = [
                            openapi_client.models.template_inner.Template_inner(
                                api_version = '', 
                                kind = 'Bucket', 
                                meta = openapi_client.models.template_inner_meta.Template_inner_meta(
                                    name = '', ), 
                                spec = openapi_client.models.spec.spec(), )
                            ], 
                        sources = [
                            ''
                            ], )
                    ]
            )
        else:
            return TemplateApply(
        )
        """

    def testTemplateApply(self):
        """Test TemplateApply"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

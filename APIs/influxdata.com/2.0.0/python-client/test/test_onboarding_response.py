# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.onboarding_response import OnboardingResponse

class TestOnboardingResponse(unittest.TestCase):
    """OnboardingResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OnboardingResponse:
        """Test OnboardingResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OnboardingResponse`
        """
        model = OnboardingResponse()
        if include_optional:
            return OnboardingResponse(
                auth = None,
                bucket = openapi_client.models.bucket.Bucket(
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    description = '', 
                    id = '', 
                    labels = [
                        openapi_client.models.label.Label(
                            id = '', 
                            name = '', 
                            org_id = '', 
                            properties = {"color":"ffb3b3","description":"this is a description"}, )
                        ], 
                    links = {"labels":"/api/v2/buckets/1/labels","members":"/api/v2/buckets/1/members","org":"/api/v2/orgs/2","owners":"/api/v2/buckets/1/owners","self":"/api/v2/buckets/1","write":"/api/v2/write?org=2&amp;bucket=1"}, 
                    name = '', 
                    org_id = '', 
                    retention_rules = [
                        openapi_client.models.retention_rule.RetentionRule(
                            every_seconds = 86400, 
                            shard_group_duration_seconds = 56, 
                            type = 'expire', )
                        ], 
                    rp = '', 
                    schema_type = 'implicit', 
                    type = 'user', 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                org = openapi_client.models.organization.Organization(
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    description = '', 
                    id = '', 
                    links = {"buckets":"/api/v2/buckets?org=myorg","dashboards":"/api/v2/dashboards?org=myorg","labels":"/api/v2/orgs/1/labels","members":"/api/v2/orgs/1/members","owners":"/api/v2/orgs/1/owners","secrets":"/api/v2/orgs/1/secrets","self":"/api/v2/orgs/1","tasks":"/api/v2/tasks?org=myorg"}, 
                    name = '', 
                    status = 'active', 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                user = openapi_client.models.user_response.UserResponse(
                    id = '', 
                    links = {"self":"/api/v2/users/1"}, 
                    name = '', 
                    oauth_id = '', 
                    status = 'active', )
            )
        else:
            return OnboardingResponse(
        )
        """

    def testOnboardingResponse(self):
        """Test OnboardingResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

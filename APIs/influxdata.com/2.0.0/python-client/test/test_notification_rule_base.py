# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.notification_rule_base import NotificationRuleBase

class TestNotificationRuleBase(unittest.TestCase):
    """NotificationRuleBase unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NotificationRuleBase:
        """Test NotificationRuleBase
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NotificationRuleBase`
        """
        model = NotificationRuleBase()
        if include_optional:
            return NotificationRuleBase(
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                description = '',
                endpoint_id = '',
                every = '',
                id = '',
                labels = [
                    openapi_client.models.label.Label(
                        id = '', 
                        name = '', 
                        org_id = '', 
                        properties = {"color":"ffb3b3","description":"this is a description"}, )
                    ],
                last_run_error = '',
                last_run_status = 'failed',
                latest_completed = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                limit = 56,
                limit_every = 56,
                links = {"labels":"/api/v2/notificationRules/1/labels","members":"/api/v2/notificationRules/1/members","owners":"/api/v2/notificationRules/1/owners","query":"/api/v2/notificationRules/1/query","self":"/api/v2/notificationRules/1"},
                name = '',
                offset = '',
                org_id = '',
                owner_id = '',
                runbook_link = '',
                sleep_until = '',
                status = 'active',
                status_rules = [
                    openapi_client.models.status_rule.StatusRule(
                        count = 56, 
                        current_level = 'UNKNOWN', 
                        period = '', 
                        previous_level = 'UNKNOWN', )
                    ],
                tag_rules = [
                    openapi_client.models.tag_rule.TagRule(
                        key = '', 
                        operator = 'equal', 
                        value = '', )
                    ],
                task_id = '',
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return NotificationRuleBase(
                endpoint_id = '',
                name = '',
                org_id = '',
                status = 'active',
                status_rules = [
                    openapi_client.models.status_rule.StatusRule(
                        count = 56, 
                        current_level = 'UNKNOWN', 
                        period = '', 
                        previous_level = 'UNKNOWN', )
                    ],
        )
        """

    def testNotificationRuleBase(self):
        """Test NotificationRuleBase"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

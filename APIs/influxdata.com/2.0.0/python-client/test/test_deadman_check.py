# coding: utf-8

"""
    Influx OSS API Service

    # Authentication  &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.deadman_check import DeadmanCheck

class TestDeadmanCheck(unittest.TestCase):
    """DeadmanCheck unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DeadmanCheck:
        """Test DeadmanCheck
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DeadmanCheck`
        """
        model = DeadmanCheck()
        if include_optional:
            return DeadmanCheck(
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                description = '',
                id = '',
                labels = [
                    openapi_client.models.label.Label(
                        id = '', 
                        name = '', 
                        org_id = '', 
                        properties = {"color":"ffb3b3","description":"this is a description"}, )
                    ],
                last_run_error = '',
                last_run_status = 'failed',
                latest_completed = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                links = {"labels":"/api/v2/checks/1/labels","members":"/api/v2/checks/1/members","owners":"/api/v2/checks/1/owners","query":"/api/v2/checks/1/query","self":"/api/v2/checks/1"},
                name = '',
                org_id = '',
                owner_id = '',
                query = openapi_client.models.dashboard_query.DashboardQuery(
                    builder_config = openapi_client.models.builder_config.BuilderConfig(
                        aggregate_window = openapi_client.models.builder_config_aggregate_window.BuilderConfig_aggregateWindow(
                            fill_values = True, 
                            period = '', ), 
                        buckets = [
                            ''
                            ], 
                        functions = [
                            openapi_client.models.builder_functions_type.BuilderFunctionsType(
                                name = '', )
                            ], 
                        tags = [
                            openapi_client.models.builder_tags_type.BuilderTagsType(
                                aggregate_function_type = 'filter', 
                                key = '', 
                                values = [
                                    ''
                                    ], )
                            ], ), 
                    edit_mode = 'builder', 
                    name = '', 
                    text = '', ),
                status = 'active',
                task_id = '',
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                every = '',
                level = 'UNKNOWN',
                offset = '',
                report_zero = True,
                stale_time = '',
                status_message_template = '',
                tags = [
                    openapi_client.models.deadman_check_all_of_tags.DeadmanCheck_allOf_tags(
                        key = '', 
                        value = '', )
                    ],
                time_since = '',
                type = 'deadman'
            )
        else:
            return DeadmanCheck(
                name = '',
                org_id = '',
                query = openapi_client.models.dashboard_query.DashboardQuery(
                    builder_config = openapi_client.models.builder_config.BuilderConfig(
                        aggregate_window = openapi_client.models.builder_config_aggregate_window.BuilderConfig_aggregateWindow(
                            fill_values = True, 
                            period = '', ), 
                        buckets = [
                            ''
                            ], 
                        functions = [
                            openapi_client.models.builder_functions_type.BuilderFunctionsType(
                                name = '', )
                            ], 
                        tags = [
                            openapi_client.models.builder_tags_type.BuilderTagsType(
                                aggregate_function_type = 'filter', 
                                key = '', 
                                values = [
                                    ''
                                    ], )
                            ], ), 
                    edit_mode = 'builder', 
                    name = '', 
                    text = '', ),
                type = 'deadman',
        )
        """

    def testDeadmanCheck(self):
        """Test DeadmanCheck"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

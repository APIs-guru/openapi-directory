# coding: utf-8

"""
    Labs64 NetLicensing RESTful API Test Center

    The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>

    The version of the OpenAPI document: 2.x
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.netlicensing import Netlicensing

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class LicenseTemplateApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_license_template(
        self,
        active: Annotated[StrictBool, Field(description="If set to 'false', the License Template is disabled. Licensee can not obtain any new Licenses off this License Template.")],
        license_type: Annotated[StrictStr, Field(description="Type of Licenses created from this License Template. Supported types: FEATURE, TIMEVOLUME, FLOATING, QUANTITY")],
        name: Annotated[StrictStr, Field(description="License Template name to create License Template object")],
        product_module_number: Annotated[StrictStr, Field(description="Number of Product Module to create License Template object")],
        automatic: Annotated[Optional[StrictBool], Field(description="If set to 'true', every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0.")] = None,
        currency: Annotated[Optional[StrictStr], Field(description="Specifies currency for the License price. Check data types to discover which currencies are supported.")] = None,
        hidden: Annotated[Optional[StrictBool], Field(description="If set to 'true', this License Template is not shown in NetLicensing Shop as offered for purchase.")] = None,
        hide_licenses: Annotated[Optional[StrictBool], Field(description="If set to 'true', Licenses from this License Template are not visible to the end customer, but participate in validation.")] = None,
        max_sessions: Annotated[Optional[StrictStr], Field(description="Mandatory for 'FLOATING' License Type.")] = None,
        number: Annotated[Optional[StrictStr], Field(description="Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template.")] = None,
        price: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Price for the License. If >0, it must always be accompanied by the currency specification.")] = None,
        quantity: Annotated[Optional[StrictStr], Field(description="Mandatory for 'Pay-per-Use' and 'Node-Locked' License Model.")] = None,
        quota: Annotated[Optional[StrictStr], Field(description="Mandatory for 'Quota' License Model.")] = None,
        time_volume: Annotated[Optional[StrictStr], Field(description="Mandatory for 'TIMEVOLUME' License Type.")] = None,
        time_volume_period: Annotated[Optional[StrictStr], Field(description="For 'TIMEVOLUME' License Type.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Netlicensing:
        """Create License Template

        Creates a new License Template

        :param active: If set to 'false', the License Template is disabled. Licensee can not obtain any new Licenses off this License Template. (required)
        :type active: bool
        :param license_type: Type of Licenses created from this License Template. Supported types: FEATURE, TIMEVOLUME, FLOATING, QUANTITY (required)
        :type license_type: str
        :param name: License Template name to create License Template object (required)
        :type name: str
        :param product_module_number: Number of Product Module to create License Template object (required)
        :type product_module_number: str
        :param automatic: If set to 'true', every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0.
        :type automatic: bool
        :param currency: Specifies currency for the License price. Check data types to discover which currencies are supported.
        :type currency: str
        :param hidden: If set to 'true', this License Template is not shown in NetLicensing Shop as offered for purchase.
        :type hidden: bool
        :param hide_licenses: If set to 'true', Licenses from this License Template are not visible to the end customer, but participate in validation.
        :type hide_licenses: bool
        :param max_sessions: Mandatory for 'FLOATING' License Type.
        :type max_sessions: str
        :param number: Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template.
        :type number: str
        :param price: Price for the License. If >0, it must always be accompanied by the currency specification.
        :type price: float
        :param quantity: Mandatory for 'Pay-per-Use' and 'Node-Locked' License Model.
        :type quantity: str
        :param quota: Mandatory for 'Quota' License Model.
        :type quota: str
        :param time_volume: Mandatory for 'TIMEVOLUME' License Type.
        :type time_volume: str
        :param time_volume_period: For 'TIMEVOLUME' License Type.
        :type time_volume_period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_license_template_serialize(
            active=active,
            license_type=license_type,
            name=name,
            product_module_number=product_module_number,
            automatic=automatic,
            currency=currency,
            hidden=hidden,
            hide_licenses=hide_licenses,
            max_sessions=max_sessions,
            number=number,
            price=price,
            quantity=quantity,
            quota=quota,
            time_volume=time_volume,
            time_volume_period=time_volume_period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Netlicensing",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_license_template_with_http_info(
        self,
        active: Annotated[StrictBool, Field(description="If set to 'false', the License Template is disabled. Licensee can not obtain any new Licenses off this License Template.")],
        license_type: Annotated[StrictStr, Field(description="Type of Licenses created from this License Template. Supported types: FEATURE, TIMEVOLUME, FLOATING, QUANTITY")],
        name: Annotated[StrictStr, Field(description="License Template name to create License Template object")],
        product_module_number: Annotated[StrictStr, Field(description="Number of Product Module to create License Template object")],
        automatic: Annotated[Optional[StrictBool], Field(description="If set to 'true', every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0.")] = None,
        currency: Annotated[Optional[StrictStr], Field(description="Specifies currency for the License price. Check data types to discover which currencies are supported.")] = None,
        hidden: Annotated[Optional[StrictBool], Field(description="If set to 'true', this License Template is not shown in NetLicensing Shop as offered for purchase.")] = None,
        hide_licenses: Annotated[Optional[StrictBool], Field(description="If set to 'true', Licenses from this License Template are not visible to the end customer, but participate in validation.")] = None,
        max_sessions: Annotated[Optional[StrictStr], Field(description="Mandatory for 'FLOATING' License Type.")] = None,
        number: Annotated[Optional[StrictStr], Field(description="Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template.")] = None,
        price: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Price for the License. If >0, it must always be accompanied by the currency specification.")] = None,
        quantity: Annotated[Optional[StrictStr], Field(description="Mandatory for 'Pay-per-Use' and 'Node-Locked' License Model.")] = None,
        quota: Annotated[Optional[StrictStr], Field(description="Mandatory for 'Quota' License Model.")] = None,
        time_volume: Annotated[Optional[StrictStr], Field(description="Mandatory for 'TIMEVOLUME' License Type.")] = None,
        time_volume_period: Annotated[Optional[StrictStr], Field(description="For 'TIMEVOLUME' License Type.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Netlicensing]:
        """Create License Template

        Creates a new License Template

        :param active: If set to 'false', the License Template is disabled. Licensee can not obtain any new Licenses off this License Template. (required)
        :type active: bool
        :param license_type: Type of Licenses created from this License Template. Supported types: FEATURE, TIMEVOLUME, FLOATING, QUANTITY (required)
        :type license_type: str
        :param name: License Template name to create License Template object (required)
        :type name: str
        :param product_module_number: Number of Product Module to create License Template object (required)
        :type product_module_number: str
        :param automatic: If set to 'true', every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0.
        :type automatic: bool
        :param currency: Specifies currency for the License price. Check data types to discover which currencies are supported.
        :type currency: str
        :param hidden: If set to 'true', this License Template is not shown in NetLicensing Shop as offered for purchase.
        :type hidden: bool
        :param hide_licenses: If set to 'true', Licenses from this License Template are not visible to the end customer, but participate in validation.
        :type hide_licenses: bool
        :param max_sessions: Mandatory for 'FLOATING' License Type.
        :type max_sessions: str
        :param number: Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template.
        :type number: str
        :param price: Price for the License. If >0, it must always be accompanied by the currency specification.
        :type price: float
        :param quantity: Mandatory for 'Pay-per-Use' and 'Node-Locked' License Model.
        :type quantity: str
        :param quota: Mandatory for 'Quota' License Model.
        :type quota: str
        :param time_volume: Mandatory for 'TIMEVOLUME' License Type.
        :type time_volume: str
        :param time_volume_period: For 'TIMEVOLUME' License Type.
        :type time_volume_period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_license_template_serialize(
            active=active,
            license_type=license_type,
            name=name,
            product_module_number=product_module_number,
            automatic=automatic,
            currency=currency,
            hidden=hidden,
            hide_licenses=hide_licenses,
            max_sessions=max_sessions,
            number=number,
            price=price,
            quantity=quantity,
            quota=quota,
            time_volume=time_volume,
            time_volume_period=time_volume_period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Netlicensing",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_license_template_without_preload_content(
        self,
        active: Annotated[StrictBool, Field(description="If set to 'false', the License Template is disabled. Licensee can not obtain any new Licenses off this License Template.")],
        license_type: Annotated[StrictStr, Field(description="Type of Licenses created from this License Template. Supported types: FEATURE, TIMEVOLUME, FLOATING, QUANTITY")],
        name: Annotated[StrictStr, Field(description="License Template name to create License Template object")],
        product_module_number: Annotated[StrictStr, Field(description="Number of Product Module to create License Template object")],
        automatic: Annotated[Optional[StrictBool], Field(description="If set to 'true', every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0.")] = None,
        currency: Annotated[Optional[StrictStr], Field(description="Specifies currency for the License price. Check data types to discover which currencies are supported.")] = None,
        hidden: Annotated[Optional[StrictBool], Field(description="If set to 'true', this License Template is not shown in NetLicensing Shop as offered for purchase.")] = None,
        hide_licenses: Annotated[Optional[StrictBool], Field(description="If set to 'true', Licenses from this License Template are not visible to the end customer, but participate in validation.")] = None,
        max_sessions: Annotated[Optional[StrictStr], Field(description="Mandatory for 'FLOATING' License Type.")] = None,
        number: Annotated[Optional[StrictStr], Field(description="Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template.")] = None,
        price: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Price for the License. If >0, it must always be accompanied by the currency specification.")] = None,
        quantity: Annotated[Optional[StrictStr], Field(description="Mandatory for 'Pay-per-Use' and 'Node-Locked' License Model.")] = None,
        quota: Annotated[Optional[StrictStr], Field(description="Mandatory for 'Quota' License Model.")] = None,
        time_volume: Annotated[Optional[StrictStr], Field(description="Mandatory for 'TIMEVOLUME' License Type.")] = None,
        time_volume_period: Annotated[Optional[StrictStr], Field(description="For 'TIMEVOLUME' License Type.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create License Template

        Creates a new License Template

        :param active: If set to 'false', the License Template is disabled. Licensee can not obtain any new Licenses off this License Template. (required)
        :type active: bool
        :param license_type: Type of Licenses created from this License Template. Supported types: FEATURE, TIMEVOLUME, FLOATING, QUANTITY (required)
        :type license_type: str
        :param name: License Template name to create License Template object (required)
        :type name: str
        :param product_module_number: Number of Product Module to create License Template object (required)
        :type product_module_number: str
        :param automatic: If set to 'true', every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0.
        :type automatic: bool
        :param currency: Specifies currency for the License price. Check data types to discover which currencies are supported.
        :type currency: str
        :param hidden: If set to 'true', this License Template is not shown in NetLicensing Shop as offered for purchase.
        :type hidden: bool
        :param hide_licenses: If set to 'true', Licenses from this License Template are not visible to the end customer, but participate in validation.
        :type hide_licenses: bool
        :param max_sessions: Mandatory for 'FLOATING' License Type.
        :type max_sessions: str
        :param number: Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template.
        :type number: str
        :param price: Price for the License. If >0, it must always be accompanied by the currency specification.
        :type price: float
        :param quantity: Mandatory for 'Pay-per-Use' and 'Node-Locked' License Model.
        :type quantity: str
        :param quota: Mandatory for 'Quota' License Model.
        :type quota: str
        :param time_volume: Mandatory for 'TIMEVOLUME' License Type.
        :type time_volume: str
        :param time_volume_period: For 'TIMEVOLUME' License Type.
        :type time_volume_period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_license_template_serialize(
            active=active,
            license_type=license_type,
            name=name,
            product_module_number=product_module_number,
            automatic=automatic,
            currency=currency,
            hidden=hidden,
            hide_licenses=hide_licenses,
            max_sessions=max_sessions,
            number=number,
            price=price,
            quantity=quantity,
            quota=quota,
            time_volume=time_volume,
            time_volume_period=time_volume_period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Netlicensing",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_license_template_serialize(
        self,
        active,
        license_type,
        name,
        product_module_number,
        automatic,
        currency,
        hidden,
        hide_licenses,
        max_sessions,
        number,
        price,
        quantity,
        quota,
        time_volume,
        time_volume_period,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if active is not None:
            _form_params.append(('active', active))
        if automatic is not None:
            _form_params.append(('automatic', automatic))
        if currency is not None:
            _form_params.append(('currency', currency))
        if hidden is not None:
            _form_params.append(('hidden', hidden))
        if hide_licenses is not None:
            _form_params.append(('hideLicenses', hide_licenses))
        if license_type is not None:
            _form_params.append(('licenseType', license_type))
        if max_sessions is not None:
            _form_params.append(('maxSessions', max_sessions))
        if name is not None:
            _form_params.append(('name', name))
        if number is not None:
            _form_params.append(('number', number))
        if price is not None:
            _form_params.append(('price', price))
        if product_module_number is not None:
            _form_params.append(('productModuleNumber', product_module_number))
        if quantity is not None:
            _form_params.append(('quantity', quantity))
        if quota is not None:
            _form_params.append(('quota', quota))
        if time_volume is not None:
            _form_params.append(('timeVolume', time_volume))
        if time_volume_period is not None:
            _form_params.append(('timeVolumePeriod', time_volume_period))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/licensetemplate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_license_template(
        self,
        license_template_number: Annotated[StrictStr, Field(description="Unique number (across all Products of a Vendor) that identifies the License Template.")],
        force_cascade: Annotated[Optional[StrictBool], Field(description="Force object deletion and all descendants.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Netlicensing:
        """Delete License Template

        Delete a License Template by 'number'.

        :param license_template_number: Unique number (across all Products of a Vendor) that identifies the License Template. (required)
        :type license_template_number: str
        :param force_cascade: Force object deletion and all descendants.
        :type force_cascade: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_license_template_serialize(
            license_template_number=license_template_number,
            force_cascade=force_cascade,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Netlicensing",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_license_template_with_http_info(
        self,
        license_template_number: Annotated[StrictStr, Field(description="Unique number (across all Products of a Vendor) that identifies the License Template.")],
        force_cascade: Annotated[Optional[StrictBool], Field(description="Force object deletion and all descendants.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Netlicensing]:
        """Delete License Template

        Delete a License Template by 'number'.

        :param license_template_number: Unique number (across all Products of a Vendor) that identifies the License Template. (required)
        :type license_template_number: str
        :param force_cascade: Force object deletion and all descendants.
        :type force_cascade: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_license_template_serialize(
            license_template_number=license_template_number,
            force_cascade=force_cascade,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Netlicensing",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_license_template_without_preload_content(
        self,
        license_template_number: Annotated[StrictStr, Field(description="Unique number (across all Products of a Vendor) that identifies the License Template.")],
        force_cascade: Annotated[Optional[StrictBool], Field(description="Force object deletion and all descendants.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete License Template

        Delete a License Template by 'number'.

        :param license_template_number: Unique number (across all Products of a Vendor) that identifies the License Template. (required)
        :type license_template_number: str
        :param force_cascade: Force object deletion and all descendants.
        :type force_cascade: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_license_template_serialize(
            license_template_number=license_template_number,
            force_cascade=force_cascade,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Netlicensing",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_license_template_serialize(
        self,
        license_template_number,
        force_cascade,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if license_template_number is not None:
            _path_params['licenseTemplateNumber'] = license_template_number
        # process the query parameters
        if force_cascade is not None:
            
            _query_params.append(('forceCascade', force_cascade))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/licensetemplate/{licenseTemplateNumber}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_license_template(
        self,
        license_template_number: Annotated[StrictStr, Field(description="Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Netlicensing:
        """Get License Template

        Return a License Template by 'licenseTemplateNumber'

        :param license_template_number: Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template. (required)
        :type license_template_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_license_template_serialize(
            license_template_number=license_template_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Netlicensing",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_license_template_with_http_info(
        self,
        license_template_number: Annotated[StrictStr, Field(description="Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Netlicensing]:
        """Get License Template

        Return a License Template by 'licenseTemplateNumber'

        :param license_template_number: Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template. (required)
        :type license_template_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_license_template_serialize(
            license_template_number=license_template_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Netlicensing",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_license_template_without_preload_content(
        self,
        license_template_number: Annotated[StrictStr, Field(description="Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get License Template

        Return a License Template by 'licenseTemplateNumber'

        :param license_template_number: Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template. (required)
        :type license_template_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_license_template_serialize(
            license_template_number=license_template_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Netlicensing",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_license_template_serialize(
        self,
        license_template_number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if license_template_number is not None:
            _path_params['licenseTemplateNumber'] = license_template_number
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/licensetemplate/{licenseTemplateNumber}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_license_templates(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Netlicensing]:
        """List License Templates

        Return a list of all License Templates for the current Vendor

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_license_templates_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Netlicensing]",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_license_templates_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Netlicensing]]:
        """List License Templates

        Return a list of all License Templates for the current Vendor

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_license_templates_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Netlicensing]",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_license_templates_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List License Templates

        Return a list of all License Templates for the current Vendor

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_license_templates_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Netlicensing]",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_license_templates_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/licensetemplate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_license_template(
        self,
        license_template_number: Annotated[StrictStr, Field(description="Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template.")],
        active: Annotated[Optional[StrictBool], Field(description="If set to 'false', the License Template is disabled. Licensee can not obtain any new Licenses off this License Template.")] = None,
        automatic: Annotated[Optional[StrictBool], Field(description="If set to 'true', every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0.")] = None,
        currency: Annotated[Optional[StrictStr], Field(description="Specifies currency for the License price. Check data types to discover which currencies are supported.")] = None,
        hidden: Annotated[Optional[StrictBool], Field(description="If set to 'true', this License Template is not shown in NetLicensing Shop as offered for purchase.")] = None,
        hide_licenses: Annotated[Optional[StrictBool], Field(description="If set to 'true', Licenses from this License Template are not visible to the end customer, but participate in validation.")] = None,
        license_type: Annotated[Optional[StrictStr], Field(description="Type of Licenses created from this License Template. Supported types: FEATURE, TIMEVOLUME, FLOATING, QUANTITY")] = None,
        max_sessions: Annotated[Optional[StrictStr], Field(description="Mandatory for 'FLOATING' License Type.")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Name for the Licensed item")] = None,
        number: Annotated[Optional[StrictStr], Field(description="New License Template number (update).")] = None,
        price: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Price for the License. If >0, it must always be accompanied by the currency specification.")] = None,
        quantity: Annotated[Optional[StrictStr], Field(description="Mandatory for 'Pay-per-Use' and 'Node-Locked' License Model.")] = None,
        quota: Annotated[Optional[StrictStr], Field(description="Mandatory for 'Quota' License Model.")] = None,
        time_volume: Annotated[Optional[StrictStr], Field(description="Mandatory for 'TIMEVOLUME' License Type.")] = None,
        time_volume_period: Annotated[Optional[StrictStr], Field(description="For 'TIMEVOLUME' License Type.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Netlicensing:
        """Update License Template

        Sets the provided properties to a License Template. Return an updated License Template

        :param license_template_number: Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template. (required)
        :type license_template_number: str
        :param active: If set to 'false', the License Template is disabled. Licensee can not obtain any new Licenses off this License Template.
        :type active: bool
        :param automatic: If set to 'true', every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0.
        :type automatic: bool
        :param currency: Specifies currency for the License price. Check data types to discover which currencies are supported.
        :type currency: str
        :param hidden: If set to 'true', this License Template is not shown in NetLicensing Shop as offered for purchase.
        :type hidden: bool
        :param hide_licenses: If set to 'true', Licenses from this License Template are not visible to the end customer, but participate in validation.
        :type hide_licenses: bool
        :param license_type: Type of Licenses created from this License Template. Supported types: FEATURE, TIMEVOLUME, FLOATING, QUANTITY
        :type license_type: str
        :param max_sessions: Mandatory for 'FLOATING' License Type.
        :type max_sessions: str
        :param name: Name for the Licensed item
        :type name: str
        :param number: New License Template number (update).
        :type number: str
        :param price: Price for the License. If >0, it must always be accompanied by the currency specification.
        :type price: float
        :param quantity: Mandatory for 'Pay-per-Use' and 'Node-Locked' License Model.
        :type quantity: str
        :param quota: Mandatory for 'Quota' License Model.
        :type quota: str
        :param time_volume: Mandatory for 'TIMEVOLUME' License Type.
        :type time_volume: str
        :param time_volume_period: For 'TIMEVOLUME' License Type.
        :type time_volume_period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_license_template_serialize(
            license_template_number=license_template_number,
            active=active,
            automatic=automatic,
            currency=currency,
            hidden=hidden,
            hide_licenses=hide_licenses,
            license_type=license_type,
            max_sessions=max_sessions,
            name=name,
            number=number,
            price=price,
            quantity=quantity,
            quota=quota,
            time_volume=time_volume,
            time_volume_period=time_volume_period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Netlicensing",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_license_template_with_http_info(
        self,
        license_template_number: Annotated[StrictStr, Field(description="Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template.")],
        active: Annotated[Optional[StrictBool], Field(description="If set to 'false', the License Template is disabled. Licensee can not obtain any new Licenses off this License Template.")] = None,
        automatic: Annotated[Optional[StrictBool], Field(description="If set to 'true', every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0.")] = None,
        currency: Annotated[Optional[StrictStr], Field(description="Specifies currency for the License price. Check data types to discover which currencies are supported.")] = None,
        hidden: Annotated[Optional[StrictBool], Field(description="If set to 'true', this License Template is not shown in NetLicensing Shop as offered for purchase.")] = None,
        hide_licenses: Annotated[Optional[StrictBool], Field(description="If set to 'true', Licenses from this License Template are not visible to the end customer, but participate in validation.")] = None,
        license_type: Annotated[Optional[StrictStr], Field(description="Type of Licenses created from this License Template. Supported types: FEATURE, TIMEVOLUME, FLOATING, QUANTITY")] = None,
        max_sessions: Annotated[Optional[StrictStr], Field(description="Mandatory for 'FLOATING' License Type.")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Name for the Licensed item")] = None,
        number: Annotated[Optional[StrictStr], Field(description="New License Template number (update).")] = None,
        price: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Price for the License. If >0, it must always be accompanied by the currency specification.")] = None,
        quantity: Annotated[Optional[StrictStr], Field(description="Mandatory for 'Pay-per-Use' and 'Node-Locked' License Model.")] = None,
        quota: Annotated[Optional[StrictStr], Field(description="Mandatory for 'Quota' License Model.")] = None,
        time_volume: Annotated[Optional[StrictStr], Field(description="Mandatory for 'TIMEVOLUME' License Type.")] = None,
        time_volume_period: Annotated[Optional[StrictStr], Field(description="For 'TIMEVOLUME' License Type.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Netlicensing]:
        """Update License Template

        Sets the provided properties to a License Template. Return an updated License Template

        :param license_template_number: Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template. (required)
        :type license_template_number: str
        :param active: If set to 'false', the License Template is disabled. Licensee can not obtain any new Licenses off this License Template.
        :type active: bool
        :param automatic: If set to 'true', every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0.
        :type automatic: bool
        :param currency: Specifies currency for the License price. Check data types to discover which currencies are supported.
        :type currency: str
        :param hidden: If set to 'true', this License Template is not shown in NetLicensing Shop as offered for purchase.
        :type hidden: bool
        :param hide_licenses: If set to 'true', Licenses from this License Template are not visible to the end customer, but participate in validation.
        :type hide_licenses: bool
        :param license_type: Type of Licenses created from this License Template. Supported types: FEATURE, TIMEVOLUME, FLOATING, QUANTITY
        :type license_type: str
        :param max_sessions: Mandatory for 'FLOATING' License Type.
        :type max_sessions: str
        :param name: Name for the Licensed item
        :type name: str
        :param number: New License Template number (update).
        :type number: str
        :param price: Price for the License. If >0, it must always be accompanied by the currency specification.
        :type price: float
        :param quantity: Mandatory for 'Pay-per-Use' and 'Node-Locked' License Model.
        :type quantity: str
        :param quota: Mandatory for 'Quota' License Model.
        :type quota: str
        :param time_volume: Mandatory for 'TIMEVOLUME' License Type.
        :type time_volume: str
        :param time_volume_period: For 'TIMEVOLUME' License Type.
        :type time_volume_period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_license_template_serialize(
            license_template_number=license_template_number,
            active=active,
            automatic=automatic,
            currency=currency,
            hidden=hidden,
            hide_licenses=hide_licenses,
            license_type=license_type,
            max_sessions=max_sessions,
            name=name,
            number=number,
            price=price,
            quantity=quantity,
            quota=quota,
            time_volume=time_volume,
            time_volume_period=time_volume_period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Netlicensing",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_license_template_without_preload_content(
        self,
        license_template_number: Annotated[StrictStr, Field(description="Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template.")],
        active: Annotated[Optional[StrictBool], Field(description="If set to 'false', the License Template is disabled. Licensee can not obtain any new Licenses off this License Template.")] = None,
        automatic: Annotated[Optional[StrictBool], Field(description="If set to 'true', every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0.")] = None,
        currency: Annotated[Optional[StrictStr], Field(description="Specifies currency for the License price. Check data types to discover which currencies are supported.")] = None,
        hidden: Annotated[Optional[StrictBool], Field(description="If set to 'true', this License Template is not shown in NetLicensing Shop as offered for purchase.")] = None,
        hide_licenses: Annotated[Optional[StrictBool], Field(description="If set to 'true', Licenses from this License Template are not visible to the end customer, but participate in validation.")] = None,
        license_type: Annotated[Optional[StrictStr], Field(description="Type of Licenses created from this License Template. Supported types: FEATURE, TIMEVOLUME, FLOATING, QUANTITY")] = None,
        max_sessions: Annotated[Optional[StrictStr], Field(description="Mandatory for 'FLOATING' License Type.")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Name for the Licensed item")] = None,
        number: Annotated[Optional[StrictStr], Field(description="New License Template number (update).")] = None,
        price: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Price for the License. If >0, it must always be accompanied by the currency specification.")] = None,
        quantity: Annotated[Optional[StrictStr], Field(description="Mandatory for 'Pay-per-Use' and 'Node-Locked' License Model.")] = None,
        quota: Annotated[Optional[StrictStr], Field(description="Mandatory for 'Quota' License Model.")] = None,
        time_volume: Annotated[Optional[StrictStr], Field(description="Mandatory for 'TIMEVOLUME' License Type.")] = None,
        time_volume_period: Annotated[Optional[StrictStr], Field(description="For 'TIMEVOLUME' License Type.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update License Template

        Sets the provided properties to a License Template. Return an updated License Template

        :param license_template_number: Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template. (required)
        :type license_template_number: str
        :param active: If set to 'false', the License Template is disabled. Licensee can not obtain any new Licenses off this License Template.
        :type active: bool
        :param automatic: If set to 'true', every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0.
        :type automatic: bool
        :param currency: Specifies currency for the License price. Check data types to discover which currencies are supported.
        :type currency: str
        :param hidden: If set to 'true', this License Template is not shown in NetLicensing Shop as offered for purchase.
        :type hidden: bool
        :param hide_licenses: If set to 'true', Licenses from this License Template are not visible to the end customer, but participate in validation.
        :type hide_licenses: bool
        :param license_type: Type of Licenses created from this License Template. Supported types: FEATURE, TIMEVOLUME, FLOATING, QUANTITY
        :type license_type: str
        :param max_sessions: Mandatory for 'FLOATING' License Type.
        :type max_sessions: str
        :param name: Name for the Licensed item
        :type name: str
        :param number: New License Template number (update).
        :type number: str
        :param price: Price for the License. If >0, it must always be accompanied by the currency specification.
        :type price: float
        :param quantity: Mandatory for 'Pay-per-Use' and 'Node-Locked' License Model.
        :type quantity: str
        :param quota: Mandatory for 'Quota' License Model.
        :type quota: str
        :param time_volume: Mandatory for 'TIMEVOLUME' License Type.
        :type time_volume: str
        :param time_volume_period: For 'TIMEVOLUME' License Type.
        :type time_volume_period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_license_template_serialize(
            license_template_number=license_template_number,
            active=active,
            automatic=automatic,
            currency=currency,
            hidden=hidden,
            hide_licenses=hide_licenses,
            license_type=license_type,
            max_sessions=max_sessions,
            name=name,
            number=number,
            price=price,
            quantity=quantity,
            quota=quota,
            time_volume=time_volume,
            time_volume_period=time_volume_period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Netlicensing",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_license_template_serialize(
        self,
        license_template_number,
        active,
        automatic,
        currency,
        hidden,
        hide_licenses,
        license_type,
        max_sessions,
        name,
        number,
        price,
        quantity,
        quota,
        time_volume,
        time_volume_period,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if license_template_number is not None:
            _path_params['licenseTemplateNumber'] = license_template_number
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if active is not None:
            _form_params.append(('active', active))
        if automatic is not None:
            _form_params.append(('automatic', automatic))
        if currency is not None:
            _form_params.append(('currency', currency))
        if hidden is not None:
            _form_params.append(('hidden', hidden))
        if hide_licenses is not None:
            _form_params.append(('hideLicenses', hide_licenses))
        if license_type is not None:
            _form_params.append(('licenseType', license_type))
        if max_sessions is not None:
            _form_params.append(('maxSessions', max_sessions))
        if name is not None:
            _form_params.append(('name', name))
        if number is not None:
            _form_params.append(('number', number))
        if price is not None:
            _form_params.append(('price', price))
        if quantity is not None:
            _form_params.append(('quantity', quantity))
        if quota is not None:
            _form_params.append(('quota', quota))
        if time_volume is not None:
            _form_params.append(('timeVolume', time_volume))
        if time_volume_period is not None:
            _form_params.append(('timeVolumePeriod', time_volume_period))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/licensetemplate/{licenseTemplateNumber}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



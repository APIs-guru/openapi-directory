# coding: utf-8

"""
    Labs64 NetLicensing RESTful API Test Center

    The Labs64 <a href='https://netlicensing.io/wiki/restful-api' target='_blank'>NetLicensing RESTful API</a> gives you access to NetLicensingâ€™s core features.<br/><br/><strong>Authentication</strong><br/>You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - <code>demo:demo</code><br/><br/>Find out more about Labs64 NetLicensing at <a href='https://netlicensing.io' target='_blank'>netlicensing.io</a>

    The version of the OpenAPI document: 2.x
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.netlicensing import Netlicensing

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class LicenseApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_license(
        self,
        active: StrictBool,
        license_template_number: StrictStr,
        licensee_number: StrictStr,
        currency: Annotated[Optional[StrictStr], Field(description="Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation")] = None,
        hidden: Annotated[Optional[StrictBool], Field(description="If set to 'true', this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Name for the Licensed item. Set from License Template on creation, if not specified explicitly.")] = None,
        number: Optional[StrictStr] = None,
        parentfeature: Annotated[Optional[StrictStr], Field(description="Mandatory for 'TIMEVOLUME' License Type and 'RENTAL' licensing model")] = None,
        price: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Price for the License. If >0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation")] = None,
        quantity: Annotated[Optional[StrictStr], Field(description="Mandatory for 'Pay-per-Use' License Model.")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Mandatory for 'TIMEVOLUME' License Type.")] = None,
        time_volume: Annotated[Optional[StrictStr], Field(description="Mandatory for 'TIMEVOLUME' License Type.")] = None,
        time_volume_period: Annotated[Optional[StrictStr], Field(description="For 'TIMEVOLUME' License Type.")] = None,
        used_quantity: Annotated[Optional[StrictStr], Field(description="Mandatory for 'Pay-per-Use' License Model.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Netlicensing:
        """Create License

        Creates a new License

        :param active: (required)
        :type active: bool
        :param license_template_number: (required)
        :type license_template_number: str
        :param licensee_number: (required)
        :type licensee_number: str
        :param currency: Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation
        :type currency: str
        :param hidden: If set to 'true', this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly
        :type hidden: bool
        :param name: Name for the Licensed item. Set from License Template on creation, if not specified explicitly.
        :type name: str
        :param number:
        :type number: str
        :param parentfeature: Mandatory for 'TIMEVOLUME' License Type and 'RENTAL' licensing model
        :type parentfeature: str
        :param price: Price for the License. If >0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation
        :type price: float
        :param quantity: Mandatory for 'Pay-per-Use' License Model.
        :type quantity: str
        :param start_date: Mandatory for 'TIMEVOLUME' License Type.
        :type start_date: datetime
        :param time_volume: Mandatory for 'TIMEVOLUME' License Type.
        :type time_volume: str
        :param time_volume_period: For 'TIMEVOLUME' License Type.
        :type time_volume_period: str
        :param used_quantity: Mandatory for 'Pay-per-Use' License Model.
        :type used_quantity: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_license_serialize(
            active=active,
            license_template_number=license_template_number,
            licensee_number=licensee_number,
            currency=currency,
            hidden=hidden,
            name=name,
            number=number,
            parentfeature=parentfeature,
            price=price,
            quantity=quantity,
            start_date=start_date,
            time_volume=time_volume,
            time_volume_period=time_volume_period,
            used_quantity=used_quantity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Netlicensing",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_license_with_http_info(
        self,
        active: StrictBool,
        license_template_number: StrictStr,
        licensee_number: StrictStr,
        currency: Annotated[Optional[StrictStr], Field(description="Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation")] = None,
        hidden: Annotated[Optional[StrictBool], Field(description="If set to 'true', this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Name for the Licensed item. Set from License Template on creation, if not specified explicitly.")] = None,
        number: Optional[StrictStr] = None,
        parentfeature: Annotated[Optional[StrictStr], Field(description="Mandatory for 'TIMEVOLUME' License Type and 'RENTAL' licensing model")] = None,
        price: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Price for the License. If >0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation")] = None,
        quantity: Annotated[Optional[StrictStr], Field(description="Mandatory for 'Pay-per-Use' License Model.")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Mandatory for 'TIMEVOLUME' License Type.")] = None,
        time_volume: Annotated[Optional[StrictStr], Field(description="Mandatory for 'TIMEVOLUME' License Type.")] = None,
        time_volume_period: Annotated[Optional[StrictStr], Field(description="For 'TIMEVOLUME' License Type.")] = None,
        used_quantity: Annotated[Optional[StrictStr], Field(description="Mandatory for 'Pay-per-Use' License Model.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Netlicensing]:
        """Create License

        Creates a new License

        :param active: (required)
        :type active: bool
        :param license_template_number: (required)
        :type license_template_number: str
        :param licensee_number: (required)
        :type licensee_number: str
        :param currency: Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation
        :type currency: str
        :param hidden: If set to 'true', this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly
        :type hidden: bool
        :param name: Name for the Licensed item. Set from License Template on creation, if not specified explicitly.
        :type name: str
        :param number:
        :type number: str
        :param parentfeature: Mandatory for 'TIMEVOLUME' License Type and 'RENTAL' licensing model
        :type parentfeature: str
        :param price: Price for the License. If >0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation
        :type price: float
        :param quantity: Mandatory for 'Pay-per-Use' License Model.
        :type quantity: str
        :param start_date: Mandatory for 'TIMEVOLUME' License Type.
        :type start_date: datetime
        :param time_volume: Mandatory for 'TIMEVOLUME' License Type.
        :type time_volume: str
        :param time_volume_period: For 'TIMEVOLUME' License Type.
        :type time_volume_period: str
        :param used_quantity: Mandatory for 'Pay-per-Use' License Model.
        :type used_quantity: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_license_serialize(
            active=active,
            license_template_number=license_template_number,
            licensee_number=licensee_number,
            currency=currency,
            hidden=hidden,
            name=name,
            number=number,
            parentfeature=parentfeature,
            price=price,
            quantity=quantity,
            start_date=start_date,
            time_volume=time_volume,
            time_volume_period=time_volume_period,
            used_quantity=used_quantity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Netlicensing",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_license_without_preload_content(
        self,
        active: StrictBool,
        license_template_number: StrictStr,
        licensee_number: StrictStr,
        currency: Annotated[Optional[StrictStr], Field(description="Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation")] = None,
        hidden: Annotated[Optional[StrictBool], Field(description="If set to 'true', this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Name for the Licensed item. Set from License Template on creation, if not specified explicitly.")] = None,
        number: Optional[StrictStr] = None,
        parentfeature: Annotated[Optional[StrictStr], Field(description="Mandatory for 'TIMEVOLUME' License Type and 'RENTAL' licensing model")] = None,
        price: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Price for the License. If >0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation")] = None,
        quantity: Annotated[Optional[StrictStr], Field(description="Mandatory for 'Pay-per-Use' License Model.")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Mandatory for 'TIMEVOLUME' License Type.")] = None,
        time_volume: Annotated[Optional[StrictStr], Field(description="Mandatory for 'TIMEVOLUME' License Type.")] = None,
        time_volume_period: Annotated[Optional[StrictStr], Field(description="For 'TIMEVOLUME' License Type.")] = None,
        used_quantity: Annotated[Optional[StrictStr], Field(description="Mandatory for 'Pay-per-Use' License Model.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create License

        Creates a new License

        :param active: (required)
        :type active: bool
        :param license_template_number: (required)
        :type license_template_number: str
        :param licensee_number: (required)
        :type licensee_number: str
        :param currency: Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation
        :type currency: str
        :param hidden: If set to 'true', this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly
        :type hidden: bool
        :param name: Name for the Licensed item. Set from License Template on creation, if not specified explicitly.
        :type name: str
        :param number:
        :type number: str
        :param parentfeature: Mandatory for 'TIMEVOLUME' License Type and 'RENTAL' licensing model
        :type parentfeature: str
        :param price: Price for the License. If >0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation
        :type price: float
        :param quantity: Mandatory for 'Pay-per-Use' License Model.
        :type quantity: str
        :param start_date: Mandatory for 'TIMEVOLUME' License Type.
        :type start_date: datetime
        :param time_volume: Mandatory for 'TIMEVOLUME' License Type.
        :type time_volume: str
        :param time_volume_period: For 'TIMEVOLUME' License Type.
        :type time_volume_period: str
        :param used_quantity: Mandatory for 'Pay-per-Use' License Model.
        :type used_quantity: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_license_serialize(
            active=active,
            license_template_number=license_template_number,
            licensee_number=licensee_number,
            currency=currency,
            hidden=hidden,
            name=name,
            number=number,
            parentfeature=parentfeature,
            price=price,
            quantity=quantity,
            start_date=start_date,
            time_volume=time_volume,
            time_volume_period=time_volume_period,
            used_quantity=used_quantity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Netlicensing",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_license_serialize(
        self,
        active,
        license_template_number,
        licensee_number,
        currency,
        hidden,
        name,
        number,
        parentfeature,
        price,
        quantity,
        start_date,
        time_volume,
        time_volume_period,
        used_quantity,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if active is not None:
            _form_params.append(('active', active))
        if currency is not None:
            _form_params.append(('currency', currency))
        if hidden is not None:
            _form_params.append(('hidden', hidden))
        if license_template_number is not None:
            _form_params.append(('licenseTemplateNumber', license_template_number))
        if licensee_number is not None:
            _form_params.append(('licenseeNumber', licensee_number))
        if name is not None:
            _form_params.append(('name', name))
        if number is not None:
            _form_params.append(('number', number))
        if parentfeature is not None:
            _form_params.append(('parentfeature', parentfeature))
        if price is not None:
            _form_params.append(('price', price))
        if quantity is not None:
            _form_params.append(('quantity', quantity))
        if start_date is not None:
            _form_params.append(('startDate', start_date))
        if time_volume is not None:
            _form_params.append(('timeVolume', time_volume))
        if time_volume_period is not None:
            _form_params.append(('timeVolumePeriod', time_volume_period))
        if used_quantity is not None:
            _form_params.append(('usedQuantity', used_quantity))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/license',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_license(
        self,
        license_number: Annotated[StrictStr, Field(description="Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Netlicensing:
        """Delete License

        Delete License by a 'licenseNumber'

        :param license_number: Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed. (required)
        :type license_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_license_serialize(
            license_number=license_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Netlicensing",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_license_with_http_info(
        self,
        license_number: Annotated[StrictStr, Field(description="Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Netlicensing]:
        """Delete License

        Delete License by a 'licenseNumber'

        :param license_number: Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed. (required)
        :type license_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_license_serialize(
            license_number=license_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Netlicensing",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_license_without_preload_content(
        self,
        license_number: Annotated[StrictStr, Field(description="Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete License

        Delete License by a 'licenseNumber'

        :param license_number: Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed. (required)
        :type license_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_license_serialize(
            license_number=license_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Netlicensing",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_license_serialize(
        self,
        license_number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if license_number is not None:
            _path_params['licenseNumber'] = license_number
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/license/{licenseNumber}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_license(
        self,
        license_number: Annotated[StrictStr, Field(description="Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Netlicensing:
        """Get License

        Get License by a 'licenseNumber'

        :param license_number: Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed. (required)
        :type license_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_license_serialize(
            license_number=license_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Netlicensing",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_license_with_http_info(
        self,
        license_number: Annotated[StrictStr, Field(description="Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Netlicensing]:
        """Get License

        Get License by a 'licenseNumber'

        :param license_number: Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed. (required)
        :type license_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_license_serialize(
            license_number=license_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Netlicensing",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_license_without_preload_content(
        self,
        license_number: Annotated[StrictStr, Field(description="Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get License

        Get License by a 'licenseNumber'

        :param license_number: Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed. (required)
        :type license_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_license_serialize(
            license_number=license_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Netlicensing",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_license_serialize(
        self,
        license_number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if license_number is not None:
            _path_params['licenseNumber'] = license_number
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/license/{licenseNumber}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_licenses(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Netlicensing]:
        """List Licenses

        Return a list of all Licenses for the current Vendor

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_licenses_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Netlicensing]",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_licenses_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Netlicensing]]:
        """List Licenses

        Return a list of all Licenses for the current Vendor

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_licenses_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Netlicensing]",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_licenses_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Licenses

        Return a list of all Licenses for the current Vendor

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_licenses_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Netlicensing]",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_licenses_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/license',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_license(
        self,
        license_number: Annotated[StrictStr, Field(description="Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.")],
        active: Optional[StrictBool] = None,
        currency: Annotated[Optional[StrictStr], Field(description="Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation")] = None,
        hidden: Annotated[Optional[StrictBool], Field(description="If set to 'true', this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Name for the Licensed item. Set from License Template on creation, if not specified explicitly.")] = None,
        number: Annotated[Optional[StrictStr], Field(description="Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.")] = None,
        parentfeature: Optional[StrictStr] = None,
        price: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Price for the License. If > 0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation")] = None,
        quantity: Annotated[Optional[StrictStr], Field(description="Mandatory for 'Pay-per-Use' License Model.")] = None,
        start_date: Annotated[Optional[datetime], Field(description="For 'TIMEVOLUME' License type")] = None,
        time_volume: Annotated[Optional[StrictStr], Field(description="Mandatory for 'TIMEVOLUME' License Type.")] = None,
        time_volume_period: Annotated[Optional[StrictStr], Field(description="For 'TIMEVOLUME' License Type.")] = None,
        used_quantity: Annotated[Optional[StrictStr], Field(description="Mandatory for 'Pay-per-Use' License Model.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Netlicensing:
        """Update License

        Update License by a 'licenseNumber'

        :param license_number: Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed. (required)
        :type license_number: str
        :param active:
        :type active: bool
        :param currency: Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation
        :type currency: str
        :param hidden: If set to 'true', this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly
        :type hidden: bool
        :param name: Name for the Licensed item. Set from License Template on creation, if not specified explicitly.
        :type name: str
        :param number: Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.
        :type number: str
        :param parentfeature:
        :type parentfeature: str
        :param price: Price for the License. If > 0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation
        :type price: float
        :param quantity: Mandatory for 'Pay-per-Use' License Model.
        :type quantity: str
        :param start_date: For 'TIMEVOLUME' License type
        :type start_date: datetime
        :param time_volume: Mandatory for 'TIMEVOLUME' License Type.
        :type time_volume: str
        :param time_volume_period: For 'TIMEVOLUME' License Type.
        :type time_volume_period: str
        :param used_quantity: Mandatory for 'Pay-per-Use' License Model.
        :type used_quantity: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_license_serialize(
            license_number=license_number,
            active=active,
            currency=currency,
            hidden=hidden,
            name=name,
            number=number,
            parentfeature=parentfeature,
            price=price,
            quantity=quantity,
            start_date=start_date,
            time_volume=time_volume,
            time_volume_period=time_volume_period,
            used_quantity=used_quantity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Netlicensing",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_license_with_http_info(
        self,
        license_number: Annotated[StrictStr, Field(description="Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.")],
        active: Optional[StrictBool] = None,
        currency: Annotated[Optional[StrictStr], Field(description="Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation")] = None,
        hidden: Annotated[Optional[StrictBool], Field(description="If set to 'true', this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Name for the Licensed item. Set from License Template on creation, if not specified explicitly.")] = None,
        number: Annotated[Optional[StrictStr], Field(description="Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.")] = None,
        parentfeature: Optional[StrictStr] = None,
        price: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Price for the License. If > 0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation")] = None,
        quantity: Annotated[Optional[StrictStr], Field(description="Mandatory for 'Pay-per-Use' License Model.")] = None,
        start_date: Annotated[Optional[datetime], Field(description="For 'TIMEVOLUME' License type")] = None,
        time_volume: Annotated[Optional[StrictStr], Field(description="Mandatory for 'TIMEVOLUME' License Type.")] = None,
        time_volume_period: Annotated[Optional[StrictStr], Field(description="For 'TIMEVOLUME' License Type.")] = None,
        used_quantity: Annotated[Optional[StrictStr], Field(description="Mandatory for 'Pay-per-Use' License Model.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Netlicensing]:
        """Update License

        Update License by a 'licenseNumber'

        :param license_number: Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed. (required)
        :type license_number: str
        :param active:
        :type active: bool
        :param currency: Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation
        :type currency: str
        :param hidden: If set to 'true', this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly
        :type hidden: bool
        :param name: Name for the Licensed item. Set from License Template on creation, if not specified explicitly.
        :type name: str
        :param number: Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.
        :type number: str
        :param parentfeature:
        :type parentfeature: str
        :param price: Price for the License. If > 0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation
        :type price: float
        :param quantity: Mandatory for 'Pay-per-Use' License Model.
        :type quantity: str
        :param start_date: For 'TIMEVOLUME' License type
        :type start_date: datetime
        :param time_volume: Mandatory for 'TIMEVOLUME' License Type.
        :type time_volume: str
        :param time_volume_period: For 'TIMEVOLUME' License Type.
        :type time_volume_period: str
        :param used_quantity: Mandatory for 'Pay-per-Use' License Model.
        :type used_quantity: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_license_serialize(
            license_number=license_number,
            active=active,
            currency=currency,
            hidden=hidden,
            name=name,
            number=number,
            parentfeature=parentfeature,
            price=price,
            quantity=quantity,
            start_date=start_date,
            time_volume=time_volume,
            time_volume_period=time_volume_period,
            used_quantity=used_quantity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Netlicensing",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_license_without_preload_content(
        self,
        license_number: Annotated[StrictStr, Field(description="Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.")],
        active: Optional[StrictBool] = None,
        currency: Annotated[Optional[StrictStr], Field(description="Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation")] = None,
        hidden: Annotated[Optional[StrictBool], Field(description="If set to 'true', this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Name for the Licensed item. Set from License Template on creation, if not specified explicitly.")] = None,
        number: Annotated[Optional[StrictStr], Field(description="Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.")] = None,
        parentfeature: Optional[StrictStr] = None,
        price: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Price for the License. If > 0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation")] = None,
        quantity: Annotated[Optional[StrictStr], Field(description="Mandatory for 'Pay-per-Use' License Model.")] = None,
        start_date: Annotated[Optional[datetime], Field(description="For 'TIMEVOLUME' License type")] = None,
        time_volume: Annotated[Optional[StrictStr], Field(description="Mandatory for 'TIMEVOLUME' License Type.")] = None,
        time_volume_period: Annotated[Optional[StrictStr], Field(description="For 'TIMEVOLUME' License Type.")] = None,
        used_quantity: Annotated[Optional[StrictStr], Field(description="Mandatory for 'Pay-per-Use' License Model.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update License

        Update License by a 'licenseNumber'

        :param license_number: Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed. (required)
        :type license_number: str
        :param active:
        :type active: bool
        :param currency: Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation
        :type currency: str
        :param hidden: If set to 'true', this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly
        :type hidden: bool
        :param name: Name for the Licensed item. Set from License Template on creation, if not specified explicitly.
        :type name: str
        :param number: Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.
        :type number: str
        :param parentfeature:
        :type parentfeature: str
        :param price: Price for the License. If > 0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation
        :type price: float
        :param quantity: Mandatory for 'Pay-per-Use' License Model.
        :type quantity: str
        :param start_date: For 'TIMEVOLUME' License type
        :type start_date: datetime
        :param time_volume: Mandatory for 'TIMEVOLUME' License Type.
        :type time_volume: str
        :param time_volume_period: For 'TIMEVOLUME' License Type.
        :type time_volume_period: str
        :param used_quantity: Mandatory for 'Pay-per-Use' License Model.
        :type used_quantity: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_license_serialize(
            license_number=license_number,
            active=active,
            currency=currency,
            hidden=hidden,
            name=name,
            number=number,
            parentfeature=parentfeature,
            price=price,
            quantity=quantity,
            start_date=start_date,
            time_volume=time_volume,
            time_volume_period=time_volume_period,
            used_quantity=used_quantity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Netlicensing",
            '400': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_license_serialize(
        self,
        license_number,
        active,
        currency,
        hidden,
        name,
        number,
        parentfeature,
        price,
        quantity,
        start_date,
        time_volume,
        time_volume_period,
        used_quantity,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if license_number is not None:
            _path_params['licenseNumber'] = license_number
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if active is not None:
            _form_params.append(('active', active))
        if currency is not None:
            _form_params.append(('currency', currency))
        if hidden is not None:
            _form_params.append(('hidden', hidden))
        if name is not None:
            _form_params.append(('name', name))
        if number is not None:
            _form_params.append(('number', number))
        if parentfeature is not None:
            _form_params.append(('parentfeature', parentfeature))
        if price is not None:
            _form_params.append(('price', price))
        if quantity is not None:
            _form_params.append(('quantity', quantity))
        if start_date is not None:
            _form_params.append(('startDate', start_date))
        if time_volume is not None:
            _form_params.append(('timeVolume', time_volume))
        if time_volume_period is not None:
            _form_params.append(('timeVolumePeriod', time_volume_period))
        if used_quantity is not None:
            _form_params.append(('usedQuantity', used_quantity))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/license/{licenseNumber}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    SimplyRETS

    The SimplyRETS API is an exciting step towards making it easier for developers and real estate agents to build something awesome with real estate data!  The documentation below makes live requests to our API using the trial data. To get set up with the API using live MLS data, you must have RETS credentials from your MLS, which you can then use to create an app with SimplyRETS. For more information on that process, please see our [FAQ](https://simplyrets.com/faq), [Getting Started](https://simplyrets.com/blog/getting-set-up.html) page, or [contact us](https://simplyrets.com/\\#home-contact).  Below you'll find the API endpoints, query parameters, response bodies, and other information about using the SimplyRETS API. You can run queries by clicking the 'Try it Out' button at the bottom of each section.  ### Authentication The SimplyRETS API uses Basic Authentication. When you create an app, you'll get a set of API credentials to access your listings. If you're trying out the test data, you can use `simplyrets:simplyrets` for connecting to the API.  ### Media Types The SimplyRETS API uses the `Accept` header to allow clients to control media types (content versions). We maintain backwards compatibility with API clients by allowing them to specify a content version. We highly recommend setting and explicity media type when your application reaches production. Both the structure and content of our API response bodies is subject to change so we can add new features while respecting the stability of applications which have already been developed.  To always use the latest SimplyRETS content version, simply use `application/json` in your application `Accept` header.  If you want to pin your clients media type to a specific version, you can use the vendor-specific SimplyRETS media type, e.g. `application/vnd.simplyrets-v0.1+json\"`  To view all valid content-types for making an `OPTIONS`, make a request to the SimplyRETS api root  `curl -XOPTIONS -u simplyrets:simplyrets https://api.simplyrets.com/`  The default media types used in our API responses may change in the future. If you're building an application and care about the stability of the API, be sure to request a specific media type in the Accept header as shown in the examples below.  The wordpress plugin automatically sets the `Accept` header for the compatible SimplyRETS media types.  ### Pagination  To paginate through listings, start your query with these parameters: 'limit=500&lastId=0'. The 'lastId' is the important part, you can use any limit up to 500. When you receive the response from the API with the results, check the 'Link' header for the 'next' link. That link is pre-built to access the next 'page' of listings. Alternatively, you can use the last listing's 'mlsId' from the previous request and use that in the next query. For example:  First query:  curl -u username:password 'https://api.simplyrets.com/properties?limit=500&lastId=0'  If the 'mlsId' in the last listing of the results is '1234567', then the next query will be:  curl -u username:password 'https://api.simplyrets.com/properties?limit=500&lastId=1234567'  ...and so one until you have reached the final page of listings.  There a few pieces of useful information about each request stored in the HTTP Headers:  - `X-Total-Count` shows you the total amount of listings that match   your current query. - `Link` contains pre-built pagination links for accessing the next 'page' of listings that match your query.  ### RETS Vendor Compliance  Many RETS vendors have strict requirements for showing disclaimers with specific information embedded. For example, in many areas it's required to show the timestamp of the time the listings were refreshed inside a disclaimer or on a listing page.  The timestamp of the last listing refresh timestamp can be found in one of two spots:  - The `X-SimplyRETS-LastUpdate` header from `GET /properties` or `GET /properties/{mlsId}`  - Calling the API root `/` or properties api endpoint `/properties`   with an OPTIONS request    - `OPTIONS /`      This request will show the last update timestamp for all RETS     vendors associated with your application. Look for the     `updates` list in the JSON response.    - `OPTIONS /properties`      Using this request, look for the `lastUpdate` field in the JSON     response. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.parking import Parking
from typing import Optional, Set
from typing_extensions import Self

class ModelProperty(BaseModel):
    """
    Rets MLS Listing Property
    """ # noqa: E501
    accessibility: Optional[StrictStr] = None
    additional_rooms: Optional[StrictStr] = Field(default=None, description="Additional room information. This is a textual description of additional rooms for the listing. ", alias="additionalRooms")
    area: Optional[StrictInt] = Field(default=None, description="Square footage of the building associated with a listing")
    area_source: Optional[StrictStr] = Field(default=None, alias="areaSource")
    baths_full: Optional[StrictInt] = Field(default=None, description="Number of full bathrooms", alias="bathsFull")
    baths_half: Optional[StrictInt] = Field(default=None, description="Number of half bathrooms", alias="bathsHalf")
    baths_three_quarter: Optional[StrictInt] = Field(default=None, description="Number of 3/4 bathrooms", alias="bathsThreeQuarter")
    bedrooms: Optional[StrictInt] = Field(default=None, description="Number of bedrooms")
    construction: Optional[StrictStr] = Field(default=None, description="The materials that were used in the construction of the property.")
    cooling: Optional[StrictStr] = Field(default=None, description="A description of the cooling or air conditioning features of the property.")
    exterior_features: Optional[StrictStr] = Field(default=None, description="Exterior Features for the listing ", alias="exteriorFeatures")
    fireplaces: Optional[StrictInt] = Field(default=None, description="Number of fireplaces")
    flooring: Optional[StrictStr] = Field(default=None, description="The type(s) of flooring found within the property.")
    foundation: Optional[StrictStr] = None
    garage_spaces: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of garage spaces", alias="garageSpaces")
    heating: Optional[StrictStr] = Field(default=None, description="Heating description or short string")
    interior_features: Optional[StrictStr] = Field(default=None, description="The properties interior features", alias="interiorFeatures")
    laundry_features: Optional[StrictStr] = Field(default=None, alias="laundryFeatures")
    lot_description: Optional[StrictStr] = Field(default=None, alias="lotDescription")
    lot_size: Optional[StrictStr] = Field(default=None, description="Lot size dimensions or square footage as a text. This field is generally used to show the pretty formatted lot size. ", alias="lotSize")
    lot_size_acres: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Lot size in acres  **Added on 2016/05/04 - Not available for all RETS vendors** ", alias="lotSizeAcres")
    lot_size_area: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total area of the lot.  See `lotSizeUnits` for the units of measurement (Square Feet, Square Meters, Acres, etc.).  **Added on 2016/05/04 - Not available for all RETS vendors** ", alias="lotSizeArea")
    lot_size_area_units: Optional[StrictStr] = Field(default=None, description="Unit of measurement for the lotSizeArea field.  e.g. Square Feet, Square Meters, Acres, etc.  If this field is `null` the units is the default unit of measure specified by your RETS provider.  **Added on 2016/05/04 - Not available for all RETS vendors** ", alias="lotSizeAreaUnits")
    maintenance_expense: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Yearly maintenance expense", alias="maintenanceExpense")
    occupant_name: Optional[StrictStr] = Field(default=None, alias="occupantName")
    occupant_type: Optional[StrictStr] = Field(default=None, alias="occupantType")
    owner_name: Optional[StrictStr] = Field(default=None, alias="ownerName")
    parking: Optional[Parking] = None
    pool_features: Optional[StrictStr] = Field(default=None, alias="poolFeatures")
    roof: Optional[StrictStr] = Field(default=None, description="Property roof description")
    stories: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of stories or levels. Represented as a `double' to account for half stories. ")
    style: Optional[StrictStr] = Field(default=None, description="Property style description or short string")
    sub_type: Optional[StrictStr] = Field(default=None, description="A normalized representation of the listings sub-type. ", alias="subType")
    sub_type_raw: Optional[StrictStr] = Field(default=None, description="The raw text representation of the property sub type. ", alias="subTypeRaw")
    subdivision: Optional[StrictStr] = Field(default=None, description="The subdivision or community name")
    type: Optional[StrictStr] = Field(default=None, description="Abbreviated property type. RES is Residential, CND is CondoOrTownhome, RNT is Rental, MLF is Multi-Family, CRE is Commercial, LND is Land, FRM is Farm. See the `propertySubType` field for more information. ")
    view: Optional[StrictStr] = Field(default=None, description="View details and description")
    water: Optional[StrictStr] = Field(default=None, description="The name, if known, of the body of water on which the property is located. (E.g., lake name, river name, ocean name, sea name, canal name). Otherwise, this field will contain features of the waterfront on which the property is located. ")
    year_built: Optional[StrictInt] = Field(default=None, description="Year the property was built", alias="yearBuilt")
    __properties: ClassVar[List[str]] = ["accessibility", "additionalRooms", "area", "areaSource", "bathsFull", "bathsHalf", "bathsThreeQuarter", "bedrooms", "construction", "cooling", "exteriorFeatures", "fireplaces", "flooring", "foundation", "garageSpaces", "heating", "interiorFeatures", "laundryFeatures", "lotDescription", "lotSize", "lotSizeAcres", "lotSizeArea", "lotSizeAreaUnits", "maintenanceExpense", "occupantName", "occupantType", "ownerName", "parking", "poolFeatures", "roof", "stories", "style", "subType", "subTypeRaw", "subdivision", "type", "view", "water", "yearBuilt"]

    @field_validator('sub_type')
    def sub_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Apartment', 'BoatSlip', 'SingleFamilyResidence', 'DeededParking', 'Cabin', 'Condominium', 'Duplex', 'ManufacturedHome', 'Quadruplex', 'StockCooperative', 'Townhouse', 'Timeshare', 'Triplex', 'ManufacturedOnLand']):
            raise ValueError("must be one of enum values ('Apartment', 'BoatSlip', 'SingleFamilyResidence', 'DeededParking', 'Cabin', 'Condominium', 'Duplex', 'ManufacturedHome', 'Quadruplex', 'StockCooperative', 'Townhouse', 'Timeshare', 'Triplex', 'ManufacturedOnLand')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RES', 'CND', 'RNT', 'MLF', 'CRE', 'LND', 'FRM']):
            raise ValueError("must be one of enum values ('RES', 'CND', 'RNT', 'MLF', 'CRE', 'LND', 'FRM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelProperty from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parking
        if self.parking:
            _dict['parking'] = self.parking.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelProperty from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessibility": obj.get("accessibility"),
            "additionalRooms": obj.get("additionalRooms"),
            "area": obj.get("area"),
            "areaSource": obj.get("areaSource"),
            "bathsFull": obj.get("bathsFull"),
            "bathsHalf": obj.get("bathsHalf"),
            "bathsThreeQuarter": obj.get("bathsThreeQuarter"),
            "bedrooms": obj.get("bedrooms"),
            "construction": obj.get("construction"),
            "cooling": obj.get("cooling"),
            "exteriorFeatures": obj.get("exteriorFeatures"),
            "fireplaces": obj.get("fireplaces"),
            "flooring": obj.get("flooring"),
            "foundation": obj.get("foundation"),
            "garageSpaces": obj.get("garageSpaces"),
            "heating": obj.get("heating"),
            "interiorFeatures": obj.get("interiorFeatures"),
            "laundryFeatures": obj.get("laundryFeatures"),
            "lotDescription": obj.get("lotDescription"),
            "lotSize": obj.get("lotSize"),
            "lotSizeAcres": obj.get("lotSizeAcres"),
            "lotSizeArea": obj.get("lotSizeArea"),
            "lotSizeAreaUnits": obj.get("lotSizeAreaUnits"),
            "maintenanceExpense": obj.get("maintenanceExpense"),
            "occupantName": obj.get("occupantName"),
            "occupantType": obj.get("occupantType"),
            "ownerName": obj.get("ownerName"),
            "parking": Parking.from_dict(obj["parking"]) if obj.get("parking") is not None else None,
            "poolFeatures": obj.get("poolFeatures"),
            "roof": obj.get("roof"),
            "stories": obj.get("stories"),
            "style": obj.get("style"),
            "subType": obj.get("subType"),
            "subTypeRaw": obj.get("subTypeRaw"),
            "subdivision": obj.get("subdivision"),
            "type": obj.get("type"),
            "view": obj.get("view"),
            "water": obj.get("water"),
            "yearBuilt": obj.get("yearBuilt")
        })
        return _obj



# coding: utf-8

"""
    Gisgraphy webservices

    Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.solr_response_dto import SolrResponseDto

class TestSolrResponseDto(unittest.TestCase):
    """SolrResponseDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SolrResponseDto:
        """Test SolrResponseDto
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SolrResponseDto`
        """
        model = SolrResponseDto()
        if include_optional:
            return SolrResponseDto(
                adm1_code = '',
                adm1_name = '',
                adm1_names_alternate = [
                    ''
                    ],
                adm2_code = '',
                adm2_name = '',
                adm2_names_alternate = [
                    ''
                    ],
                adm3_code = '',
                adm3_name = '',
                adm4_code = '',
                adm4_name = '',
                amenity = '',
                area = 1.337,
                capital_name = '',
                continent = '',
                country_code = '',
                country_flag_url = '',
                country_name = '',
                country_names_alternate = [
                    ''
                    ],
                currency_code = '',
                currency_name = '',
                elevation = 56,
                feature_class = '',
                feature_code = '',
                feature_id = 56,
                fips_code = '',
                fully_qualified_address = '',
                fully_qualified_name = '',
                google_map_url = '',
                gtopo30 = 56,
                house_numbers = [
                    openapi_client.models.house_number_dto.HouseNumberDto(
                        location = '', 
                        number = '', )
                    ],
                is_in = '',
                is_in_adm = '',
                is_in_place = '',
                is_in_zip = [
                    ''
                    ],
                isoalpha2_country_code = '',
                isoalpha3_country_code = '',
                lat = 1.337,
                length = 1.337,
                level = 56,
                lng = 1.337,
                municipality = True,
                name = '',
                name_alternates = [
                    ''
                    ],
                name_ascii = '',
                one_way = True,
                openstreetmap_id = 56,
                openstreetmap_map_url = '',
                phone_prefix = '',
                placetype = '',
                population = 56,
                postal_code_mask = '',
                postal_code_regex = '',
                score = 1.337,
                spoken_languages = [
                    ''
                    ],
                street_type = '',
                timezone = '',
                tld = '',
                yahoo_map_url = '',
                zipcodes = [
                    ''
                    ]
            )
        else:
            return SolrResponseDto(
        )
        """

    def testSolrResponseDto(self):
        """Test SolrResponseDto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

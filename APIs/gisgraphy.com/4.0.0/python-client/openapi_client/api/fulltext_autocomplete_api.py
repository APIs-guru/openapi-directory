# coding: utf-8

"""
    Gisgraphy webservices

    Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from openapi_client.models.fulltext_results_dto import FulltextResultsDto

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class FulltextAutocompleteApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def fulltxtsearch(
        self,
        q: Annotated[StrictStr, Field(description="The searched text : The text for the query can be a zip code, a string or one or more strings")],
        allwordsrequired: Annotated[StrictBool, Field(description="Whether the fulltext engine should considers all the words specified as required. Defaults to false (since v 4.0). possible values are true|false (or 'on' when used with the rest service)")],
        spellchecking: Annotated[Optional[StrictStr], Field(description="The spellchecking (optional) : whether some suggestions should be provided if no results are found")] = None,
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The latitude (north-south) for the location point to search around. The value is a floating number, between -90 and +90. It uses GPS coordinates")] = None,
        lng: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="TThe longitude (east-West) for the location point to search around. The value is a floating number between -180 and +180. It uses GPS coordinates.")] = None,
        radius: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="distance from the location point in meters we'd like to search around. The value is a number > 0 if it is not specify or incorrect.")] = None,
        suggest: Annotated[Optional[StrictBool], Field(description="If this parameter is set then it will search in part of the names of the street, place,.... It allow you to do auto completion auto suggestion. See the Gisgraphy leaflet plugin for more details. The JSON format will be forced if this parameter is true. See auto completion / suggestions engine for more details")] = None,
        style: Annotated[Optional[StrictStr], Field(description="The output style verbosity (optional) : Determines the output verbosity. 4 styles are available")] = None,
        country: Annotated[Optional[StrictStr], Field(description="limit the search to the specified ISO 3166 country code. Default : search in all countries")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="The language code (optional) : The iso 639 Alpha2 or alpha3 Language Code. Some properties such as the AlternateName AdmNames and countryname belong to a certain language code. The language parameter can limit the output of those fields to a certain language (it only apply when style parameter='style') : If the language code does not exists or is not specified, properties with all the languages are retrieved If it exists, the properties with the specified language code, are retrieved")] = None,
        format: Annotated[Optional[StrictStr], Field(description="The output format.")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="The first pagination index. Numbered from 1. If the number is < 1 or not specified, it will be set to the default value : 1")] = None,
        to: Annotated[Optional[StrictInt], Field(description="The last pagination index. if < 1 or not specified, it will be set to startindex + 10. Max = 10 (can be changed)")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="The callback method name (optional), use to wrap the content into a (alphanumeric) Javascript method. Works only for script output formats (JSON, PHP, Ruby, Python)")] = None,
        indent: Annotated[Optional[StrictBool], Field(description="indents the results.Default to false. Possible values are true or false (or on when used with the rest service. If you use a checkbox in a web form, to indent the results, the value will be 'on' or 'off', so for a simple use : the value of indent can be 'true' or 'on'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FulltextResultsDto:
        """search for places by text around a GPS point

        The full text service allows you to search for features / places / street and do autocompletion . you can : Specify one or more words search on part of the name (auto completion / suggestion) Search for text or zip code Specify a GPS restriction (promote nearest, not sorted but has an impact on the score), Limit the results to a specific Language, Country, place type, Paginate the results, Specify the output verbosity, Tells if you want the output to be indented, Tells that all words are required or not, The search is case insensitive, use synonyms (Saint/st, ..), separator characters stripping, ...

        :param q: The searched text : The text for the query can be a zip code, a string or one or more strings (required)
        :type q: str
        :param allwordsrequired: Whether the fulltext engine should considers all the words specified as required. Defaults to false (since v 4.0). possible values are true|false (or 'on' when used with the rest service) (required)
        :type allwordsrequired: bool
        :param spellchecking: The spellchecking (optional) : whether some suggestions should be provided if no results are found
        :type spellchecking: str
        :param lat: The latitude (north-south) for the location point to search around. The value is a floating number, between -90 and +90. It uses GPS coordinates
        :type lat: float
        :param lng: TThe longitude (east-West) for the location point to search around. The value is a floating number between -180 and +180. It uses GPS coordinates.
        :type lng: float
        :param radius: distance from the location point in meters we'd like to search around. The value is a number > 0 if it is not specify or incorrect.
        :type radius: float
        :param suggest: If this parameter is set then it will search in part of the names of the street, place,.... It allow you to do auto completion auto suggestion. See the Gisgraphy leaflet plugin for more details. The JSON format will be forced if this parameter is true. See auto completion / suggestions engine for more details
        :type suggest: bool
        :param style: The output style verbosity (optional) : Determines the output verbosity. 4 styles are available
        :type style: str
        :param country: limit the search to the specified ISO 3166 country code. Default : search in all countries
        :type country: str
        :param lang: The language code (optional) : The iso 639 Alpha2 or alpha3 Language Code. Some properties such as the AlternateName AdmNames and countryname belong to a certain language code. The language parameter can limit the output of those fields to a certain language (it only apply when style parameter='style') : If the language code does not exists or is not specified, properties with all the languages are retrieved If it exists, the properties with the specified language code, are retrieved
        :type lang: str
        :param format: The output format.
        :type format: str
        :param var_from: The first pagination index. Numbered from 1. If the number is < 1 or not specified, it will be set to the default value : 1
        :type var_from: int
        :param to: The last pagination index. if < 1 or not specified, it will be set to startindex + 10. Max = 10 (can be changed)
        :type to: int
        :param param_callback: The callback method name (optional), use to wrap the content into a (alphanumeric) Javascript method. Works only for script output formats (JSON, PHP, Ruby, Python)
        :type param_callback: str
        :param indent: indents the results.Default to false. Possible values are true or false (or on when used with the rest service. If you use a checkbox in a web form, to indent the results, the value will be 'on' or 'off', so for a simple use : the value of indent can be 'true' or 'on'
        :type indent: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._fulltxtsearch_serialize(
            q=q,
            allwordsrequired=allwordsrequired,
            spellchecking=spellchecking,
            lat=lat,
            lng=lng,
            radius=radius,
            suggest=suggest,
            style=style,
            country=country,
            lang=lang,
            format=format,
            var_from=var_from,
            to=to,
            param_callback=param_callback,
            indent=indent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FulltextResultsDto",
            '401': None,
            '403': None,
            '412': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def fulltxtsearch_with_http_info(
        self,
        q: Annotated[StrictStr, Field(description="The searched text : The text for the query can be a zip code, a string or one or more strings")],
        allwordsrequired: Annotated[StrictBool, Field(description="Whether the fulltext engine should considers all the words specified as required. Defaults to false (since v 4.0). possible values are true|false (or 'on' when used with the rest service)")],
        spellchecking: Annotated[Optional[StrictStr], Field(description="The spellchecking (optional) : whether some suggestions should be provided if no results are found")] = None,
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The latitude (north-south) for the location point to search around. The value is a floating number, between -90 and +90. It uses GPS coordinates")] = None,
        lng: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="TThe longitude (east-West) for the location point to search around. The value is a floating number between -180 and +180. It uses GPS coordinates.")] = None,
        radius: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="distance from the location point in meters we'd like to search around. The value is a number > 0 if it is not specify or incorrect.")] = None,
        suggest: Annotated[Optional[StrictBool], Field(description="If this parameter is set then it will search in part of the names of the street, place,.... It allow you to do auto completion auto suggestion. See the Gisgraphy leaflet plugin for more details. The JSON format will be forced if this parameter is true. See auto completion / suggestions engine for more details")] = None,
        style: Annotated[Optional[StrictStr], Field(description="The output style verbosity (optional) : Determines the output verbosity. 4 styles are available")] = None,
        country: Annotated[Optional[StrictStr], Field(description="limit the search to the specified ISO 3166 country code. Default : search in all countries")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="The language code (optional) : The iso 639 Alpha2 or alpha3 Language Code. Some properties such as the AlternateName AdmNames and countryname belong to a certain language code. The language parameter can limit the output of those fields to a certain language (it only apply when style parameter='style') : If the language code does not exists or is not specified, properties with all the languages are retrieved If it exists, the properties with the specified language code, are retrieved")] = None,
        format: Annotated[Optional[StrictStr], Field(description="The output format.")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="The first pagination index. Numbered from 1. If the number is < 1 or not specified, it will be set to the default value : 1")] = None,
        to: Annotated[Optional[StrictInt], Field(description="The last pagination index. if < 1 or not specified, it will be set to startindex + 10. Max = 10 (can be changed)")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="The callback method name (optional), use to wrap the content into a (alphanumeric) Javascript method. Works only for script output formats (JSON, PHP, Ruby, Python)")] = None,
        indent: Annotated[Optional[StrictBool], Field(description="indents the results.Default to false. Possible values are true or false (or on when used with the rest service. If you use a checkbox in a web form, to indent the results, the value will be 'on' or 'off', so for a simple use : the value of indent can be 'true' or 'on'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FulltextResultsDto]:
        """search for places by text around a GPS point

        The full text service allows you to search for features / places / street and do autocompletion . you can : Specify one or more words search on part of the name (auto completion / suggestion) Search for text or zip code Specify a GPS restriction (promote nearest, not sorted but has an impact on the score), Limit the results to a specific Language, Country, place type, Paginate the results, Specify the output verbosity, Tells if you want the output to be indented, Tells that all words are required or not, The search is case insensitive, use synonyms (Saint/st, ..), separator characters stripping, ...

        :param q: The searched text : The text for the query can be a zip code, a string or one or more strings (required)
        :type q: str
        :param allwordsrequired: Whether the fulltext engine should considers all the words specified as required. Defaults to false (since v 4.0). possible values are true|false (or 'on' when used with the rest service) (required)
        :type allwordsrequired: bool
        :param spellchecking: The spellchecking (optional) : whether some suggestions should be provided if no results are found
        :type spellchecking: str
        :param lat: The latitude (north-south) for the location point to search around. The value is a floating number, between -90 and +90. It uses GPS coordinates
        :type lat: float
        :param lng: TThe longitude (east-West) for the location point to search around. The value is a floating number between -180 and +180. It uses GPS coordinates.
        :type lng: float
        :param radius: distance from the location point in meters we'd like to search around. The value is a number > 0 if it is not specify or incorrect.
        :type radius: float
        :param suggest: If this parameter is set then it will search in part of the names of the street, place,.... It allow you to do auto completion auto suggestion. See the Gisgraphy leaflet plugin for more details. The JSON format will be forced if this parameter is true. See auto completion / suggestions engine for more details
        :type suggest: bool
        :param style: The output style verbosity (optional) : Determines the output verbosity. 4 styles are available
        :type style: str
        :param country: limit the search to the specified ISO 3166 country code. Default : search in all countries
        :type country: str
        :param lang: The language code (optional) : The iso 639 Alpha2 or alpha3 Language Code. Some properties such as the AlternateName AdmNames and countryname belong to a certain language code. The language parameter can limit the output of those fields to a certain language (it only apply when style parameter='style') : If the language code does not exists or is not specified, properties with all the languages are retrieved If it exists, the properties with the specified language code, are retrieved
        :type lang: str
        :param format: The output format.
        :type format: str
        :param var_from: The first pagination index. Numbered from 1. If the number is < 1 or not specified, it will be set to the default value : 1
        :type var_from: int
        :param to: The last pagination index. if < 1 or not specified, it will be set to startindex + 10. Max = 10 (can be changed)
        :type to: int
        :param param_callback: The callback method name (optional), use to wrap the content into a (alphanumeric) Javascript method. Works only for script output formats (JSON, PHP, Ruby, Python)
        :type param_callback: str
        :param indent: indents the results.Default to false. Possible values are true or false (or on when used with the rest service. If you use a checkbox in a web form, to indent the results, the value will be 'on' or 'off', so for a simple use : the value of indent can be 'true' or 'on'
        :type indent: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._fulltxtsearch_serialize(
            q=q,
            allwordsrequired=allwordsrequired,
            spellchecking=spellchecking,
            lat=lat,
            lng=lng,
            radius=radius,
            suggest=suggest,
            style=style,
            country=country,
            lang=lang,
            format=format,
            var_from=var_from,
            to=to,
            param_callback=param_callback,
            indent=indent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FulltextResultsDto",
            '401': None,
            '403': None,
            '412': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def fulltxtsearch_without_preload_content(
        self,
        q: Annotated[StrictStr, Field(description="The searched text : The text for the query can be a zip code, a string or one or more strings")],
        allwordsrequired: Annotated[StrictBool, Field(description="Whether the fulltext engine should considers all the words specified as required. Defaults to false (since v 4.0). possible values are true|false (or 'on' when used with the rest service)")],
        spellchecking: Annotated[Optional[StrictStr], Field(description="The spellchecking (optional) : whether some suggestions should be provided if no results are found")] = None,
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The latitude (north-south) for the location point to search around. The value is a floating number, between -90 and +90. It uses GPS coordinates")] = None,
        lng: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="TThe longitude (east-West) for the location point to search around. The value is a floating number between -180 and +180. It uses GPS coordinates.")] = None,
        radius: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="distance from the location point in meters we'd like to search around. The value is a number > 0 if it is not specify or incorrect.")] = None,
        suggest: Annotated[Optional[StrictBool], Field(description="If this parameter is set then it will search in part of the names of the street, place,.... It allow you to do auto completion auto suggestion. See the Gisgraphy leaflet plugin for more details. The JSON format will be forced if this parameter is true. See auto completion / suggestions engine for more details")] = None,
        style: Annotated[Optional[StrictStr], Field(description="The output style verbosity (optional) : Determines the output verbosity. 4 styles are available")] = None,
        country: Annotated[Optional[StrictStr], Field(description="limit the search to the specified ISO 3166 country code. Default : search in all countries")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="The language code (optional) : The iso 639 Alpha2 or alpha3 Language Code. Some properties such as the AlternateName AdmNames and countryname belong to a certain language code. The language parameter can limit the output of those fields to a certain language (it only apply when style parameter='style') : If the language code does not exists or is not specified, properties with all the languages are retrieved If it exists, the properties with the specified language code, are retrieved")] = None,
        format: Annotated[Optional[StrictStr], Field(description="The output format.")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="The first pagination index. Numbered from 1. If the number is < 1 or not specified, it will be set to the default value : 1")] = None,
        to: Annotated[Optional[StrictInt], Field(description="The last pagination index. if < 1 or not specified, it will be set to startindex + 10. Max = 10 (can be changed)")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="The callback method name (optional), use to wrap the content into a (alphanumeric) Javascript method. Works only for script output formats (JSON, PHP, Ruby, Python)")] = None,
        indent: Annotated[Optional[StrictBool], Field(description="indents the results.Default to false. Possible values are true or false (or on when used with the rest service. If you use a checkbox in a web form, to indent the results, the value will be 'on' or 'off', so for a simple use : the value of indent can be 'true' or 'on'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """search for places by text around a GPS point

        The full text service allows you to search for features / places / street and do autocompletion . you can : Specify one or more words search on part of the name (auto completion / suggestion) Search for text or zip code Specify a GPS restriction (promote nearest, not sorted but has an impact on the score), Limit the results to a specific Language, Country, place type, Paginate the results, Specify the output verbosity, Tells if you want the output to be indented, Tells that all words are required or not, The search is case insensitive, use synonyms (Saint/st, ..), separator characters stripping, ...

        :param q: The searched text : The text for the query can be a zip code, a string or one or more strings (required)
        :type q: str
        :param allwordsrequired: Whether the fulltext engine should considers all the words specified as required. Defaults to false (since v 4.0). possible values are true|false (or 'on' when used with the rest service) (required)
        :type allwordsrequired: bool
        :param spellchecking: The spellchecking (optional) : whether some suggestions should be provided if no results are found
        :type spellchecking: str
        :param lat: The latitude (north-south) for the location point to search around. The value is a floating number, between -90 and +90. It uses GPS coordinates
        :type lat: float
        :param lng: TThe longitude (east-West) for the location point to search around. The value is a floating number between -180 and +180. It uses GPS coordinates.
        :type lng: float
        :param radius: distance from the location point in meters we'd like to search around. The value is a number > 0 if it is not specify or incorrect.
        :type radius: float
        :param suggest: If this parameter is set then it will search in part of the names of the street, place,.... It allow you to do auto completion auto suggestion. See the Gisgraphy leaflet plugin for more details. The JSON format will be forced if this parameter is true. See auto completion / suggestions engine for more details
        :type suggest: bool
        :param style: The output style verbosity (optional) : Determines the output verbosity. 4 styles are available
        :type style: str
        :param country: limit the search to the specified ISO 3166 country code. Default : search in all countries
        :type country: str
        :param lang: The language code (optional) : The iso 639 Alpha2 or alpha3 Language Code. Some properties such as the AlternateName AdmNames and countryname belong to a certain language code. The language parameter can limit the output of those fields to a certain language (it only apply when style parameter='style') : If the language code does not exists or is not specified, properties with all the languages are retrieved If it exists, the properties with the specified language code, are retrieved
        :type lang: str
        :param format: The output format.
        :type format: str
        :param var_from: The first pagination index. Numbered from 1. If the number is < 1 or not specified, it will be set to the default value : 1
        :type var_from: int
        :param to: The last pagination index. if < 1 or not specified, it will be set to startindex + 10. Max = 10 (can be changed)
        :type to: int
        :param param_callback: The callback method name (optional), use to wrap the content into a (alphanumeric) Javascript method. Works only for script output formats (JSON, PHP, Ruby, Python)
        :type param_callback: str
        :param indent: indents the results.Default to false. Possible values are true or false (or on when used with the rest service. If you use a checkbox in a web form, to indent the results, the value will be 'on' or 'off', so for a simple use : the value of indent can be 'true' or 'on'
        :type indent: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._fulltxtsearch_serialize(
            q=q,
            allwordsrequired=allwordsrequired,
            spellchecking=spellchecking,
            lat=lat,
            lng=lng,
            radius=radius,
            suggest=suggest,
            style=style,
            country=country,
            lang=lang,
            format=format,
            var_from=var_from,
            to=to,
            param_callback=param_callback,
            indent=indent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FulltextResultsDto",
            '401': None,
            '403': None,
            '412': None,
            '429': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _fulltxtsearch_serialize(
        self,
        q,
        allwordsrequired,
        spellchecking,
        lat,
        lng,
        radius,
        suggest,
        style,
        country,
        lang,
        format,
        var_from,
        to,
        param_callback,
        indent,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if q is not None:
            
            _query_params.append(('q', q))
            
        if allwordsrequired is not None:
            
            _query_params.append(('allwordsrequired', allwordsrequired))
            
        if spellchecking is not None:
            
            _query_params.append(('spellchecking', spellchecking))
            
        if lat is not None:
            
            _query_params.append(('lat', lat))
            
        if lng is not None:
            
            _query_params.append(('lng', lng))
            
        if radius is not None:
            
            _query_params.append(('radius', radius))
            
        if suggest is not None:
            
            _query_params.append(('suggest', suggest))
            
        if style is not None:
            
            _query_params.append(('style', style))
            
        if country is not None:
            
            _query_params.append(('country', country))
            
        if lang is not None:
            
            _query_params.append(('lang', lang))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if indent is not None:
            
            _query_params.append(('indent', indent))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml', 
                    'application/php', 
                    'application/ruby', 
                    'application/yaml', 
                    'application/python', 
                    'text/plain'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/fulltext/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    Gisgraphy webservices

    Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Address(BaseModel):
    """
    Address
    """ # noqa: E501
    po_box: Optional[StrictStr] = Field(default=None, description="Post office box, Boite postale, Casilla de Correo,...", alias="POBox")
    po_box_agency: Optional[StrictStr] = Field(default=None, description="Agency where the office box, Boite postale, Casilla de Correo is", alias="POBoxAgency")
    po_box_info: Optional[StrictStr] = Field(default=None, description="extra info on post office box, Boite postale, Casilla de Correo,..", alias="POBoxInfo")
    adm1_name_alternates_localized: Optional[Dict[str, List[StrictStr]]] = Field(default=None, alias="adm1NameAlternatesLocalized")
    adm2_name_alternates_localized: Optional[Dict[str, List[StrictStr]]] = Field(default=None, alias="adm2NameAlternatesLocalized")
    block: Optional[StrictStr] = Field(default=None, description="The block in an address (Brasilia only) the block in austria, singapore,... address")
    city: Optional[StrictStr] = Field(default=None, description="The city or locality, a small town or village name sometimes is included in an address when the Delivery Point is outside the boundary of the main Post Town that serves it.")
    city_subdivision: Optional[StrictStr] = Field(default=None, description="A sub division of a city", alias="citySubdivision")
    civic_number_suffix: Optional[StrictStr] = Field(default=None, description="The number that follows the house number (Canada only)", alias="civicNumberSuffix")
    confidence: Optional[StrictStr] = Field(default=None, description="An indicator that mesure how the parser is confident for the result")
    country: Optional[StrictStr] = Field(default=None, description="The country name")
    country_name_alternates_localized: Optional[Dict[str, List[StrictStr]]] = Field(default=None, alias="countryNameAlternatesLocalized")
    countrycode: Optional[StrictStr] = Field(default=None, description="The countrycode given in the request")
    dependent_locality: Optional[StrictStr] = Field(default=None, description="'Sub' city atached to a big city", alias="dependentLocality")
    distance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The distance of the address for the given parameter location in the query")
    district: Optional[StrictStr] = Field(default=None, description="The district, mainly use for Russia")
    extra_info: Optional[StrictStr] = Field(default=None, description="Informations on floor, unit, and sometimes POBOX,...", alias="extraInfo")
    floor: Optional[StrictStr] = Field(default=None, description="The floor in an address, not a floor number in a unit (Brasilia only)")
    geocodinglevel: Optional[StrictStr] = None
    house_number: Optional[StrictStr] = Field(default=None, description="Official number assigned to an address by the municipality, several languages supported", alias="houseNumber")
    house_number_info: Optional[StrictStr] = Field(default=None, description="All information that give extra information on the house number", alias="houseNumberInfo")
    id: Optional[StrictInt] = Field(default=None, description="An internal ID to identify the address")
    lat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The latitude of the address")
    lng: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The longitude of the address")
    lote: Optional[StrictStr] = Field(default=None, description="Lote in Brazilian address")
    name: Optional[StrictStr] = Field(default=None, description="Name of the place, it is null in case of address but filled if common place. Name is different than recipient name")
    name_alternates_localized: Optional[Dict[str, List[StrictStr]]] = Field(default=None, alias="nameAlternatesLocalized")
    post_direction: Optional[StrictStr] = Field(default=None, description="The cardinal direction after the name of the street", alias="postDirection")
    post_direction_intersection: Optional[StrictStr] = Field(default=None, description="The cardinal direction after the name of the intersection street", alias="postDirectionIntersection")
    post_town: Optional[StrictStr] = Field(default=None, description="a city is a required part of all postal addresses in the United Kingdom", alias="postTown")
    pre_direction: Optional[StrictStr] = Field(default=None, description="The cardinal direction before the name of the street", alias="preDirection")
    pre_direction_intersection: Optional[StrictStr] = Field(default=None, description="The cardinal direction before the name of the intersection street", alias="preDirectionIntersection")
    prefecture: Optional[StrictStr] = Field(default=None, description="prefecture of China")
    quadrant: Optional[StrictStr] = Field(default=None, description="The quadrant in an address (Brasilia only)")
    quarter: Optional[StrictStr] = Field(default=None, description="A section of an urban settlement")
    recipient_name: Optional[StrictStr] = Field(default=None, description="Name of the organisation or person at the given address", alias="recipientName")
    sector: Optional[StrictStr] = Field(default=None, description="The sector in an address (Brasilia only)")
    state: Optional[StrictStr] = Field(default=None, description="The state or county when applicable, can be fullname or abbreviation")
    street_name: Optional[StrictStr] = Field(default=None, description="The official name of the street or the ordinal number", alias="streetName")
    street_name_intersection: Optional[StrictStr] = Field(default=None, description="The official name of the intersection street", alias="streetNameIntersection")
    street_type: Optional[StrictStr] = Field(default=None, description="The type of the street", alias="streetType")
    street_type_intersection: Optional[StrictStr] = Field(default=None, description="The type of the intersection street", alias="streetTypeIntersection")
    suite_number: Optional[StrictStr] = Field(default=None, description="Informations on the unit, mainly used and filled by standardizer", alias="suiteNumber")
    suite_type: Optional[StrictStr] = Field(default=None, description="Informations on the unit, mainly used and filled by standardizer", alias="suiteType")
    ward: Optional[StrictStr] = Field(default=None, description="Ward in japanese address")
    zip_code: Optional[StrictStr] = Field(default=None, description="The zip or post code", alias="zipCode")
    __properties: ClassVar[List[str]] = ["POBox", "POBoxAgency", "POBoxInfo", "adm1NameAlternatesLocalized", "adm2NameAlternatesLocalized", "block", "city", "citySubdivision", "civicNumberSuffix", "confidence", "country", "countryNameAlternatesLocalized", "countrycode", "dependentLocality", "distance", "district", "extraInfo", "floor", "geocodinglevel", "houseNumber", "houseNumberInfo", "id", "lat", "lng", "lote", "name", "nameAlternatesLocalized", "postDirection", "postDirectionIntersection", "postTown", "preDirection", "preDirectionIntersection", "prefecture", "quadrant", "quarter", "recipientName", "sector", "state", "streetName", "streetNameIntersection", "streetType", "streetTypeIntersection", "suiteNumber", "suiteType", "ward", "zipCode"]

    @field_validator('geocodinglevel')
    def geocodinglevel_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE', 'HOUSE_NUMBER', 'STREET', 'CITY', 'STATE', 'COUNTRY']):
            raise ValueError("must be one of enum values ('NONE', 'HOUSE_NUMBER', 'STREET', 'CITY', 'STATE', 'COUNTRY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Address from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Address from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "POBox": obj.get("POBox"),
            "POBoxAgency": obj.get("POBoxAgency"),
            "POBoxInfo": obj.get("POBoxInfo"),
            "adm1NameAlternatesLocalized": obj.get("adm1NameAlternatesLocalized"),
            "adm2NameAlternatesLocalized": obj.get("adm2NameAlternatesLocalized"),
            "block": obj.get("block"),
            "city": obj.get("city"),
            "citySubdivision": obj.get("citySubdivision"),
            "civicNumberSuffix": obj.get("civicNumberSuffix"),
            "confidence": obj.get("confidence"),
            "country": obj.get("country"),
            "countryNameAlternatesLocalized": obj.get("countryNameAlternatesLocalized"),
            "countrycode": obj.get("countrycode"),
            "dependentLocality": obj.get("dependentLocality"),
            "distance": obj.get("distance"),
            "district": obj.get("district"),
            "extraInfo": obj.get("extraInfo"),
            "floor": obj.get("floor"),
            "geocodinglevel": obj.get("geocodinglevel"),
            "houseNumber": obj.get("houseNumber"),
            "houseNumberInfo": obj.get("houseNumberInfo"),
            "id": obj.get("id"),
            "lat": obj.get("lat"),
            "lng": obj.get("lng"),
            "lote": obj.get("lote"),
            "name": obj.get("name"),
            "nameAlternatesLocalized": obj.get("nameAlternatesLocalized"),
            "postDirection": obj.get("postDirection"),
            "postDirectionIntersection": obj.get("postDirectionIntersection"),
            "postTown": obj.get("postTown"),
            "preDirection": obj.get("preDirection"),
            "preDirectionIntersection": obj.get("preDirectionIntersection"),
            "prefecture": obj.get("prefecture"),
            "quadrant": obj.get("quadrant"),
            "quarter": obj.get("quarter"),
            "recipientName": obj.get("recipientName"),
            "sector": obj.get("sector"),
            "state": obj.get("state"),
            "streetName": obj.get("streetName"),
            "streetNameIntersection": obj.get("streetNameIntersection"),
            "streetType": obj.get("streetType"),
            "streetTypeIntersection": obj.get("streetTypeIntersection"),
            "suiteNumber": obj.get("suiteNumber"),
            "suiteType": obj.get("suiteType"),
            "ward": obj.get("ward"),
            "zipCode": obj.get("zipCode")
        })
        return _obj



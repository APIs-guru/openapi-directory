# coding: utf-8

"""
    Gisgraphy webservices

    Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.house_number_dto import HouseNumberDto
from typing import Optional, Set
from typing_extensions import Self

class SolrResponseDto(BaseModel):
    """
    SolrResponseDto
    """ # noqa: E501
    adm1_code: Optional[StrictStr] = Field(default=None, description="The internal code for the administrative division of level 1")
    adm1_name: Optional[StrictStr] = Field(default=None, description="The name of the administrative division of level 1")
    adm1_names_alternate: Optional[List[StrictStr]] = Field(default=None, description="The alternate names of the administrative division of level 1 without specific language code")
    adm2_code: Optional[StrictStr] = Field(default=None, description="The internal code for the administrative division of level 2")
    adm2_name: Optional[StrictStr] = Field(default=None, description="The name of the administrative division of level 2")
    adm2_names_alternate: Optional[List[StrictStr]] = Field(default=None, description="The alternate names of the administrative division of level 2 without specific language code")
    adm3_code: Optional[StrictStr] = Field(default=None, description="The internal code for the administrative division of level 3")
    adm3_name: Optional[StrictStr] = Field(default=None, description="The name of the administrative division of level 3")
    adm4_code: Optional[StrictStr] = Field(default=None, description="The internal code for the administrative division of level 4")
    adm4_name: Optional[StrictStr] = Field(default=None, description="The name of the administrative division of level 4")
    amenity: Optional[StrictStr] = Field(default=None, description="Informations on category of OpenStreetMap POIs")
    area: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Area of the country in m² (only for country placetype)")
    capital_name: Optional[StrictStr] = Field(default=None, description="Name of the capital of the country(only for country placetype)")
    continent: Optional[StrictStr] = Field(default=None, description="The continent the country belongs (only for country placetype)")
    country_code: Optional[StrictStr] = Field(default=None, description="The ISO 3166 country code")
    country_flag_url: Optional[StrictStr] = Field(default=None, description="The relative URL to get the country flag image")
    country_name: Optional[StrictStr] = Field(default=None, description="The name of the country the features belongs to")
    country_names_alternate: Optional[List[StrictStr]] = Field(default=None, description="The alternate names of the country without specific language code")
    currency_code: Optional[StrictStr] = Field(default=None, description="The ISO 4217 Currency from the curencycode (only for country placetype)")
    currency_name: Optional[StrictStr] = Field(default=None, description="The name of the currency of the country (only for country placetype)")
    elevation: Optional[StrictInt] = Field(default=None, description="Elevation in meters")
    feature_class: Optional[StrictStr] = Field(default=None, description="The feature Class.")
    feature_code: Optional[StrictStr] = Field(default=None, description="The feature Code.")
    feature_id: Optional[StrictInt] = Field(default=None, description="A unique id that identify the feature")
    fips_code: Optional[StrictStr] = Field(default=None, description="The FIPS Code of the country (only for country placetype)")
    fully_qualified_address: Optional[StrictStr] = Field(default=None, description="NOT USED YET")
    fully_qualified_name: Optional[StrictStr] = Field(default=None, description="A name of the form : (adm1Name et adm2Name are printed) Paris, Département de Ville-De-Paris, Ile-De-France, (FR)")
    google_map_url: Optional[StrictStr] = Field(default=None, description="The URL to get the location on Google Map")
    gtopo30: Optional[StrictInt] = Field(default=None, description="Average elevation of 30'x30' (ca 900mx900m) area in meters")
    house_numbers: Optional[List[HouseNumberDto]] = Field(default=None, description="a list of all the house numbers sorted and their coordinates (only for placetype street)")
    is_in: Optional[StrictStr] = Field(default=None, description="Information on the city where the street / POI is (depends on OpenStreetMap 'is_in' field), the city in general (only for placetype street)")
    is_in_adm: Optional[StrictStr] = Field(default=None, description="Information of the administration division where the street / POI is.")
    is_in_place: Optional[StrictStr] = Field(default=None, description="Information on the place where the street / POI is (quater, common place). Generally a place at a lower level than city")
    is_in_zip: Optional[List[StrictStr]] = Field(default=None, description="Information of the zipcode where the street / POI is (often fill for placetype street)")
    isoalpha2_country_code: Optional[StrictStr] = Field(default=None, description="The ISO 3166 alpha 2 code of the country (only for country placetype)")
    isoalpha3_country_code: Optional[StrictStr] = Field(default=None, description="The ISO 3166 alpha 3 code of the country (only for country placetype)")
    lat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The latitude (north-south)")
    length: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The length of the street (only for placetype street)")
    level: Optional[StrictInt] = Field(default=None, description="Level of the Adm 1 , 2, 3, or 4(only for Adm placetype)")
    lng: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The longitude (east-West)")
    municipality: Optional[StrictBool] = Field(default=None, description="if the place is a municipality. it is usefull for geonames feature that don't have concept of 'city' but a populated place (that can be a quarter)")
    name: Optional[StrictStr] = Field(default=None, description="The name of the feature")
    name_alternates: Optional[List[StrictStr]] = Field(default=None, description="The alternate names of the feature that without specific language code")
    name_ascii: Optional[StrictStr] = Field(default=None, description="The ASCII name")
    one_way: Optional[StrictBool] = Field(default=None, description="whether the street is one way or not (only for placetype street)")
    openstreetmap_id: Optional[StrictInt] = Field(default=None, description="The OpenStreetMap unique id of the street (only for placetype street)")
    openstreetmap_map_url: Optional[StrictStr] = Field(default=None, description="The URL to get the location on OpenStreetMap.org")
    phone_prefix: Optional[StrictStr] = Field(default=None, description="The phone prefix of the country. e.g : +33 .(only for country placetype)")
    placetype: Optional[StrictStr] = Field(default=None, description="The place Type of the Feature")
    population: Optional[StrictInt] = Field(default=None, description="How many people live in this feature")
    postal_code_mask: Optional[StrictStr] = Field(default=None, description="The mask that postal codes should verify. e.g : ##### (only for country placetype)")
    postal_code_regex: Optional[StrictStr] = Field(default=None, description="The regular expression that postal codes should verify (only for country placetype)")
    score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="a number that indicates the relevance of the result")
    spoken_languages: Optional[List[StrictStr]] = Field(default=None, description="List of languages spoken in the country (only for country placetype)")
    street_type: Optional[StrictStr] = Field(default=None, description="The type of the street (only for placetype street)")
    timezone: Optional[StrictStr] = Field(default=None, description="The timezone (e.g :Europe/Paris).")
    tld: Optional[StrictStr] = Field(default=None, description="Top level domain of the country (only for country placetype)")
    yahoo_map_url: Optional[StrictStr] = Field(default=None, description="The URL to get the location on Yahoo Map")
    zipcodes: Optional[List[StrictStr]] = Field(default=None, description="The zipcodes")
    __properties: ClassVar[List[str]] = ["adm1_code", "adm1_name", "adm1_names_alternate", "adm2_code", "adm2_name", "adm2_names_alternate", "adm3_code", "adm3_name", "adm4_code", "adm4_name", "amenity", "area", "capital_name", "continent", "country_code", "country_flag_url", "country_name", "country_names_alternate", "currency_code", "currency_name", "elevation", "feature_class", "feature_code", "feature_id", "fips_code", "fully_qualified_address", "fully_qualified_name", "google_map_url", "gtopo30", "house_numbers", "is_in", "is_in_adm", "is_in_place", "is_in_zip", "isoalpha2_country_code", "isoalpha3_country_code", "lat", "length", "level", "lng", "municipality", "name", "name_alternates", "name_ascii", "one_way", "openstreetmap_id", "openstreetmap_map_url", "phone_prefix", "placetype", "population", "postal_code_mask", "postal_code_regex", "score", "spoken_languages", "street_type", "timezone", "tld", "yahoo_map_url", "zipcodes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SolrResponseDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in house_numbers (list)
        _items = []
        if self.house_numbers:
            for _item_house_numbers in self.house_numbers:
                if _item_house_numbers:
                    _items.append(_item_house_numbers.to_dict())
            _dict['house_numbers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SolrResponseDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adm1_code": obj.get("adm1_code"),
            "adm1_name": obj.get("adm1_name"),
            "adm1_names_alternate": obj.get("adm1_names_alternate"),
            "adm2_code": obj.get("adm2_code"),
            "adm2_name": obj.get("adm2_name"),
            "adm2_names_alternate": obj.get("adm2_names_alternate"),
            "adm3_code": obj.get("adm3_code"),
            "adm3_name": obj.get("adm3_name"),
            "adm4_code": obj.get("adm4_code"),
            "adm4_name": obj.get("adm4_name"),
            "amenity": obj.get("amenity"),
            "area": obj.get("area"),
            "capital_name": obj.get("capital_name"),
            "continent": obj.get("continent"),
            "country_code": obj.get("country_code"),
            "country_flag_url": obj.get("country_flag_url"),
            "country_name": obj.get("country_name"),
            "country_names_alternate": obj.get("country_names_alternate"),
            "currency_code": obj.get("currency_code"),
            "currency_name": obj.get("currency_name"),
            "elevation": obj.get("elevation"),
            "feature_class": obj.get("feature_class"),
            "feature_code": obj.get("feature_code"),
            "feature_id": obj.get("feature_id"),
            "fips_code": obj.get("fips_code"),
            "fully_qualified_address": obj.get("fully_qualified_address"),
            "fully_qualified_name": obj.get("fully_qualified_name"),
            "google_map_url": obj.get("google_map_url"),
            "gtopo30": obj.get("gtopo30"),
            "house_numbers": [HouseNumberDto.from_dict(_item) for _item in obj["house_numbers"]] if obj.get("house_numbers") is not None else None,
            "is_in": obj.get("is_in"),
            "is_in_adm": obj.get("is_in_adm"),
            "is_in_place": obj.get("is_in_place"),
            "is_in_zip": obj.get("is_in_zip"),
            "isoalpha2_country_code": obj.get("isoalpha2_country_code"),
            "isoalpha3_country_code": obj.get("isoalpha3_country_code"),
            "lat": obj.get("lat"),
            "length": obj.get("length"),
            "level": obj.get("level"),
            "lng": obj.get("lng"),
            "municipality": obj.get("municipality"),
            "name": obj.get("name"),
            "name_alternates": obj.get("name_alternates"),
            "name_ascii": obj.get("name_ascii"),
            "one_way": obj.get("one_way"),
            "openstreetmap_id": obj.get("openstreetmap_id"),
            "openstreetmap_map_url": obj.get("openstreetmap_map_url"),
            "phone_prefix": obj.get("phone_prefix"),
            "placetype": obj.get("placetype"),
            "population": obj.get("population"),
            "postal_code_mask": obj.get("postal_code_mask"),
            "postal_code_regex": obj.get("postal_code_regex"),
            "score": obj.get("score"),
            "spoken_languages": obj.get("spoken_languages"),
            "street_type": obj.get("street_type"),
            "timezone": obj.get("timezone"),
            "tld": obj.get("tld"),
            "yahoo_map_url": obj.get("yahoo_map_url"),
            "zipcodes": obj.get("zipcodes")
        })
        return _obj



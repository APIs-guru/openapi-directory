# coding: utf-8

"""
    Gisgraphy webservices

    Since 2006, [Gisgraphy](http://www.gisgraphy.com) is a free, open source framework that offers the possibility to do geolocalisation and geocoding via Java APIs or REST webservices. Because geocoding is nothing without data, it provides an easy to use importer that will automatically download and import the necessary (free) data to your local database ([OpenStreetMap](http://www.openstreetmap.org/), [Geonames](http://www.geonames.org/) and [Quattroshapes](http://www.quattroshapes.com/): more than 100 million entries). You can also add your own data with the Web interface or the importer connectors provided. Gisgraphy is production ready, and has been designed to be scalable(load balanced), performant and used in other languages than just java : results can be output in XML, JSON, PHP, Python, Ruby, YAML, GeoRSS, and Atom. One of the most popular GPS tracking System (OpenGTS) also includes a Gisgraphy client...Gisgraphy is a framework. As a result it's flexible and powerful enough to be used in a lot of different use cases. [read more](http://www.gisgraphy.com)   if you use the premium servers, you can use the api key to test the webservices 

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GisFeatureDistance(BaseModel):
    """
    GisFeatureDistance
    """ # noqa: E501
    adm1_code: Optional[StrictStr] = Field(default=None, description="The internal code for the administrative division of level 1", alias="adm1Code")
    adm1_name: Optional[StrictStr] = Field(default=None, description="The name of the administrative division of level 1", alias="adm1Name")
    adm2_code: Optional[StrictStr] = Field(default=None, description="The internal code for the administrative division of level 2", alias="adm2Code")
    adm2_name: Optional[StrictStr] = Field(default=None, description="The name of the administrative division of level 2", alias="adm2Name")
    adm3_code: Optional[StrictStr] = Field(default=None, description="The internal code for the administrative division of level 3", alias="adm3Code")
    adm3_name: Optional[StrictStr] = Field(default=None, description="The name of the administrative division of level 3", alias="adm3Name")
    adm4_code: Optional[StrictStr] = Field(default=None, description="The internal code for the administrative division of level 4", alias="adm4Code")
    adm4_name: Optional[StrictStr] = Field(default=None, description="The name of the administrative division of level 4", alias="adm4Name")
    adm5_code: Optional[StrictStr] = Field(default=None, description="The internal code for the administrative division of level 5", alias="adm5Code")
    adm5_name: Optional[StrictStr] = Field(default=None, description="The name of the administrative division of level 5", alias="adm5Name")
    amenity: Optional[StrictStr] = Field(default=None, description="Informations on category of OpenStreetMap POIs")
    area: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The area of the feature")
    ascii_name: Optional[StrictStr] = Field(default=None, description="The ASCII name of the feature", alias="asciiName")
    capital_name: Optional[StrictStr] = Field(default=None, description="The Capital of the country", alias="capitalName")
    continent: Optional[StrictStr] = Field(default=None, description="The continent the country belongs")
    country_code: Optional[StrictStr] = Field(default=None, description="The ISO 3166 country code", alias="countryCode")
    country_flag_url: Optional[StrictStr] = Field(default=None, description="The relative URL to get the country flag image")
    currency_code: Optional[StrictStr] = Field(default=None, description="The Currency code (ISO_4217) of the country", alias="currencyCode")
    currency_name: Optional[StrictStr] = Field(default=None, description="The Currency name of the country", alias="currencyName")
    distance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The distance beetween the point and the gisFeature in meters")
    elevation: Optional[StrictInt] = Field(default=None, description="The elevation in meters")
    equivalent_fips_code: Optional[StrictStr] = Field(default=None, description="The fips Code of the country when no code are available", alias="equivalentFipsCode")
    feature_class: Optional[StrictStr] = Field(default=None, description="The feature Class.", alias="featureClass")
    feature_code: Optional[StrictStr] = Field(default=None, description="The feature Code.", alias="featureCode")
    feature_id: Optional[StrictInt] = Field(default=None, description="A unique id that identify the feature", alias="featureId")
    fips_code: Optional[StrictStr] = Field(default=None, description="The fips Code of the country", alias="fipsCode")
    fully_qualified_address: Optional[StrictStr] = Field(default=None, description="NOT USED YET", alias="fullyQualifiedAddress")
    google_map_url: Optional[StrictStr] = Field(default=None, description="The URL to get the location on Google Map")
    gtopo30: Optional[StrictInt] = Field(default=None, description="Average elevation of 30'x30' (ca 900mx900m) area in meters")
    is_in: Optional[StrictStr] = Field(default=None, description="Information of the city where the street / POI is (depends on openstreetmap 'is_in' field), the city in general (only for placetype street)", alias="isIn")
    is_in_adm: Optional[StrictStr] = Field(default=None, description="Information of the administration division where the street / POI is. ", alias="isInAdm")
    is_in_place: Optional[StrictStr] = Field(default=None, description="Information of the place where the street / POI is (quarter, common place). Generally a place at a lower level than city", alias="isInPlace")
    is_in_zip: Optional[StrictStr] = Field(default=None, description="Information of the zipcode where the street / POI is\"", alias="isInZip")
    iso3166_alpha2_code: Optional[StrictStr] = Field(default=None, description="The iso 3166 Alpha 2 code of the country", alias="iso3166Alpha2Code")
    iso3166_alpha3_code: Optional[StrictStr] = Field(default=None, description="The iso 3166 Alpha 3 code of the country", alias="iso3166Alpha3Code")
    iso3166_numeric_code: Optional[StrictStr] = Field(default=None, description="The iso 3166 numeric code of the country", alias="iso3166NumericCode")
    lat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The latitude (north-south)")
    length: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="length of the street")
    level: Optional[StrictInt] = Field(default=None, description="The level of the Administrative division (1-5)")
    lng: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The longitude (east-West)")
    name: Optional[StrictStr] = Field(default=None, description="The name of the feature")
    one_way: Optional[StrictBool] = Field(default=None, description="Wether the street is oneway or not", alias="oneWay")
    openstreetmap_id: Optional[StrictInt] = Field(default=None, description="the id of the openstreetmap element", alias="openstreetmapId")
    openstreetmap_map_url: Optional[StrictStr] = Field(default=None, description="The URL to get the location on Openstreetmap Map")
    phone_prefix: Optional[StrictStr] = Field(default=None, description="The phone prefix of the country", alias="phonePrefix")
    place_type: Optional[StrictStr] = Field(default=None, description="The Type of Feature see faq", alias="placeType")
    population: Optional[StrictInt] = Field(default=None, description="How many people lives in this feature")
    postal_code_mask: Optional[StrictStr] = Field(default=None, description="The mask that all postal code of the country matches", alias="postalCodeMask")
    postal_code_regex: Optional[StrictStr] = Field(default=None, description="The regexp that all zipcode/postalcode of the country matches", alias="postalCodeRegex")
    street_type: Optional[StrictStr] = Field(default=None, description="the type of the street", alias="streetType")
    timezone: Optional[StrictStr] = Field(default=None, description="The time zone (e.g : Europe/Paris)")
    tld: Optional[StrictStr] = Field(default=None, description="top-level domain name, (last part of an Internet domain name) of the country")
    yahoo_map_url: Optional[StrictStr] = Field(default=None, description="The URL to get the location on Yahoo Map")
    zip_codes: Optional[List[StrictStr]] = Field(default=None, description="The zipcodes (only for city and city subdivision), one node by zipcode", alias="zipCodes")
    __properties: ClassVar[List[str]] = ["adm1Code", "adm1Name", "adm2Code", "adm2Name", "adm3Code", "adm3Name", "adm4Code", "adm4Name", "adm5Code", "adm5Name", "amenity", "area", "asciiName", "capitalName", "continent", "countryCode", "country_flag_url", "currencyCode", "currencyName", "distance", "elevation", "equivalentFipsCode", "featureClass", "featureCode", "featureId", "fipsCode", "fullyQualifiedAddress", "google_map_url", "gtopo30", "isIn", "isInAdm", "isInPlace", "isInZip", "iso3166Alpha2Code", "iso3166Alpha3Code", "iso3166NumericCode", "lat", "length", "level", "lng", "name", "oneWay", "openstreetmapId", "openstreetmap_map_url", "phonePrefix", "placeType", "population", "postalCodeMask", "postalCodeRegex", "streetType", "timezone", "tld", "yahoo_map_url", "zipCodes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GisFeatureDistance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GisFeatureDistance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adm1Code": obj.get("adm1Code"),
            "adm1Name": obj.get("adm1Name"),
            "adm2Code": obj.get("adm2Code"),
            "adm2Name": obj.get("adm2Name"),
            "adm3Code": obj.get("adm3Code"),
            "adm3Name": obj.get("adm3Name"),
            "adm4Code": obj.get("adm4Code"),
            "adm4Name": obj.get("adm4Name"),
            "adm5Code": obj.get("adm5Code"),
            "adm5Name": obj.get("adm5Name"),
            "amenity": obj.get("amenity"),
            "area": obj.get("area"),
            "asciiName": obj.get("asciiName"),
            "capitalName": obj.get("capitalName"),
            "continent": obj.get("continent"),
            "countryCode": obj.get("countryCode"),
            "country_flag_url": obj.get("country_flag_url"),
            "currencyCode": obj.get("currencyCode"),
            "currencyName": obj.get("currencyName"),
            "distance": obj.get("distance"),
            "elevation": obj.get("elevation"),
            "equivalentFipsCode": obj.get("equivalentFipsCode"),
            "featureClass": obj.get("featureClass"),
            "featureCode": obj.get("featureCode"),
            "featureId": obj.get("featureId"),
            "fipsCode": obj.get("fipsCode"),
            "fullyQualifiedAddress": obj.get("fullyQualifiedAddress"),
            "google_map_url": obj.get("google_map_url"),
            "gtopo30": obj.get("gtopo30"),
            "isIn": obj.get("isIn"),
            "isInAdm": obj.get("isInAdm"),
            "isInPlace": obj.get("isInPlace"),
            "isInZip": obj.get("isInZip"),
            "iso3166Alpha2Code": obj.get("iso3166Alpha2Code"),
            "iso3166Alpha3Code": obj.get("iso3166Alpha3Code"),
            "iso3166NumericCode": obj.get("iso3166NumericCode"),
            "lat": obj.get("lat"),
            "length": obj.get("length"),
            "level": obj.get("level"),
            "lng": obj.get("lng"),
            "name": obj.get("name"),
            "oneWay": obj.get("oneWay"),
            "openstreetmapId": obj.get("openstreetmapId"),
            "openstreetmap_map_url": obj.get("openstreetmap_map_url"),
            "phonePrefix": obj.get("phonePrefix"),
            "placeType": obj.get("placeType"),
            "population": obj.get("population"),
            "postalCodeMask": obj.get("postalCodeMask"),
            "postalCodeRegex": obj.get("postalCodeRegex"),
            "streetType": obj.get("streetType"),
            "timezone": obj.get("timezone"),
            "tld": obj.get("tld"),
            "yahoo_map_url": obj.get("yahoo_map_url"),
            "zipCodes": obj.get("zipCodes")
        })
        return _obj



# coding: utf-8

"""
    OpenCage Geocoder

    Worldwide forward and reverse geocoding

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.response_licenses_inner import ResponseLicensesInner
from openapi_client.models.response_rate import ResponseRate
from openapi_client.models.response_results_inner import ResponseResultsInner
from openapi_client.models.response_status import ResponseStatus
from openapi_client.models.response_stay_informed import ResponseStayInformed
from openapi_client.models.response_timestamp import ResponseTimestamp
from typing import Optional, Set
from typing_extensions import Self

class Response(BaseModel):
    """
    Response
    """ # noqa: E501
    documentation: Optional[StrictStr] = None
    licenses: Optional[List[ResponseLicensesInner]] = None
    rate: Optional[ResponseRate] = None
    results: Optional[List[ResponseResultsInner]] = None
    status: Optional[ResponseStatus] = None
    stay_informed: Optional[ResponseStayInformed] = None
    thanks: Optional[StrictStr] = None
    timestamp: Optional[ResponseTimestamp] = None
    total_results: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["documentation", "licenses", "rate", "results", "status", "stay_informed", "thanks", "timestamp", "total_results"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in licenses (list)
        _items = []
        if self.licenses:
            for _item_licenses in self.licenses:
                if _item_licenses:
                    _items.append(_item_licenses.to_dict())
            _dict['licenses'] = _items
        # override the default output from pydantic by calling `to_dict()` of rate
        if self.rate:
            _dict['rate'] = self.rate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        _items = []
        if self.results:
            for _item_results in self.results:
                if _item_results:
                    _items.append(_item_results.to_dict())
            _dict['results'] = _items
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stay_informed
        if self.stay_informed:
            _dict['stay_informed'] = self.stay_informed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timestamp
        if self.timestamp:
            _dict['timestamp'] = self.timestamp.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "documentation": obj.get("documentation"),
            "licenses": [ResponseLicensesInner.from_dict(_item) for _item in obj["licenses"]] if obj.get("licenses") is not None else None,
            "rate": ResponseRate.from_dict(obj["rate"]) if obj.get("rate") is not None else None,
            "results": [ResponseResultsInner.from_dict(_item) for _item in obj["results"]] if obj.get("results") is not None else None,
            "status": ResponseStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "stay_informed": ResponseStayInformed.from_dict(obj["stay_informed"]) if obj.get("stay_informed") is not None else None,
            "thanks": obj.get("thanks"),
            "timestamp": ResponseTimestamp.from_dict(obj["timestamp"]) if obj.get("timestamp") is not None else None,
            "total_results": obj.get("total_results")
        })
        return _obj



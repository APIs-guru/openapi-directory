# coding: utf-8

"""
    Open Skills API

    A complete and standard data store for canonical and emerging skills, knowledge, abilities, tools, technolgies, and how they relate to jobs.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.job_skill import JobSkill
from typing import Optional, Set
from typing_extensions import Self

class SkillJobs(BaseModel):
    """
    SkillJobs
    """ # noqa: E501
    jobs: Optional[List[JobSkill]] = None
    normalized_job_title: Optional[StrictStr] = Field(default=None, description="Normalized title of the job associated with the UUID")
    skill_name: Optional[StrictStr] = Field(default=None, description="Title of the job associated with the UUID")
    skill_uuid: Optional[StrictStr] = Field(default=None, description="Universally Unique Identifier for the job")
    __properties: ClassVar[List[str]] = ["jobs", "normalized_job_title", "skill_name", "skill_uuid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SkillJobs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in jobs (list)
        _items = []
        if self.jobs:
            for _item_jobs in self.jobs:
                if _item_jobs:
                    _items.append(_item_jobs.to_dict())
            _dict['jobs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SkillJobs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "jobs": [JobSkill.from_dict(_item) for _item in obj["jobs"]] if obj.get("jobs") is not None else None,
            "normalized_job_title": obj.get("normalized_job_title"),
            "skill_name": obj.get("skill_name"),
            "skill_uuid": obj.get("skill_uuid")
        })
        return _obj



# coding: utf-8

"""
    Clever-Cloud API

    Public API for managing Clever-Cloud data and products

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.summary import Summary

class TestSummary(unittest.TestCase):
    """Summary unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Summary:
        """Test Summary
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Summary`
        """
        model = Summary()
        if include_optional:
            return Summary(
                organisations = [
                    openapi_client.models.summary_organisations_inner.Summary_organisations_inner(
                        addons = [
                            openapi_client.models.summary_organisations_inner_addons_inner.Summary_organisations_inner_addons_inner(
                                id = '', 
                                logo_url = '', 
                                name = '', 
                                provider_id = '', )
                            ], 
                        applications = [
                            openapi_client.models.summary_organisations_inner_applications_inner.Summary_organisations_inner_applications_inner(
                                archived = True, 
                                commit = '', 
                                id = '', 
                                instance_type = '', 
                                instance_variant = '', 
                                name = '', 
                                state = '', 
                                variant_slug = '', )
                            ], 
                        avatar = '', 
                        consumers = [
                            openapi_client.models.summary_organisations_inner_consumers_inner.Summary_organisations_inner_consumers_inner(
                                key = '', 
                                name = '', 
                                picture = '', )
                            ], 
                        id = '', 
                        name = '', 
                        providers = [
                            ''
                            ], 
                        role = '', )
                    ],
                user = openapi_client.models.summary_user.Summary_user(
                    addons = [
                        openapi_client.models.summary_organisations_inner_addons_inner.Summary_organisations_inner_addons_inner(
                            id = '', 
                            logo_url = '', 
                            name = '', 
                            provider_id = '', )
                        ], 
                    admin = True, 
                    applications = [
                        openapi_client.models.summary_organisations_inner_applications_inner.Summary_organisations_inner_applications_inner(
                            archived = True, 
                            commit = '', 
                            id = '', 
                            instance_type = '', 
                            instance_variant = '', 
                            name = '', 
                            state = '', 
                            variant_slug = '', )
                        ], 
                    avatar = '', 
                    consumers = [
                        openapi_client.models.summary_organisations_inner_consumers_inner.Summary_organisations_inner_consumers_inner(
                            key = '', 
                            name = '', 
                            picture = '', )
                        ], 
                    id = '', 
                    lang = '', 
                    name = '', )
            )
        else:
            return Summary(
                organisations = [
                    openapi_client.models.summary_organisations_inner.Summary_organisations_inner(
                        addons = [
                            openapi_client.models.summary_organisations_inner_addons_inner.Summary_organisations_inner_addons_inner(
                                id = '', 
                                logo_url = '', 
                                name = '', 
                                provider_id = '', )
                            ], 
                        applications = [
                            openapi_client.models.summary_organisations_inner_applications_inner.Summary_organisations_inner_applications_inner(
                                archived = True, 
                                commit = '', 
                                id = '', 
                                instance_type = '', 
                                instance_variant = '', 
                                name = '', 
                                state = '', 
                                variant_slug = '', )
                            ], 
                        avatar = '', 
                        consumers = [
                            openapi_client.models.summary_organisations_inner_consumers_inner.Summary_organisations_inner_consumers_inner(
                                key = '', 
                                name = '', 
                                picture = '', )
                            ], 
                        id = '', 
                        name = '', 
                        providers = [
                            ''
                            ], 
                        role = '', )
                    ],
                user = openapi_client.models.summary_user.Summary_user(
                    addons = [
                        openapi_client.models.summary_organisations_inner_addons_inner.Summary_organisations_inner_addons_inner(
                            id = '', 
                            logo_url = '', 
                            name = '', 
                            provider_id = '', )
                        ], 
                    admin = True, 
                    applications = [
                        openapi_client.models.summary_organisations_inner_applications_inner.Summary_organisations_inner_applications_inner(
                            archived = True, 
                            commit = '', 
                            id = '', 
                            instance_type = '', 
                            instance_variant = '', 
                            name = '', 
                            state = '', 
                            variant_slug = '', )
                        ], 
                    avatar = '', 
                    consumers = [
                        openapi_client.models.summary_organisations_inner_consumers_inner.Summary_organisations_inner_consumers_inner(
                            key = '', 
                            name = '', 
                            picture = '', )
                        ], 
                    id = '', 
                    lang = '', 
                    name = '', ),
        )
        """

    def testSummary(self):
        """Test Summary"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Clever-Cloud API

    Public API for managing Clever-Cloud data and products

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.application import Application

class TestApplication(unittest.TestCase):
    """Application unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Application:
        """Test Application
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Application`
        """
        model = Application()
        if include_optional:
            return Application(
                archived = True,
                branch = '',
                build_flavor = openapi_client.models.flavor.Flavor(
                    available = True, 
                    cpus = 56, 
                    disk = 56, 
                    mem = 56, 
                    microservice = True, 
                    name = '', 
                    nice = 1.337, 
                    price = 1.337, ),
                cancel_on_push = True,
                commit_id = '',
                creation_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                deploy_url = '',
                deployment = openapi_client.models.deployment.Deployment(
                    http_url = '', 
                    repo_state = '', 
                    shutdownable = True, 
                    type = '', 
                    url = '', ),
                description = '',
                favourite = True,
                homogeneous = True,
                id = '',
                instance = openapi_client.models.instance.Instance(
                    build_flavor = openapi_client.models.flavor.Flavor(
                        available = True, 
                        cpus = 56, 
                        disk = 56, 
                        mem = 56, 
                        microservice = True, 
                        name = '', 
                        nice = 1.337, 
                        price = 1.337, ), 
                    coming_soon = True, 
                    default_env = openapi_client.models.map.Map(), 
                    default_flavor = openapi_client.models.flavor.Flavor(
                        available = True, 
                        cpus = 56, 
                        disk = 56, 
                        mem = 56, 
                        microservice = True, 
                        name = '', 
                        nice = 1.337, 
                        price = 1.337, ), 
                    deployments = [
                        ''
                        ], 
                    description = '', 
                    enabled = True, 
                    flavors = [
                        
                        ], 
                    instance_and_version = '', 
                    max_allowed_instances = 56, 
                    max_flavor = , 
                    max_instances = 56, 
                    min_flavor = , 
                    min_instances = 56, 
                    name = '', 
                    tags = [
                        ''
                        ], 
                    type = '', 
                    variant = openapi_client.models.variant.Variant(
                        deploy_type = '', 
                        id = '', 
                        logo = '', 
                        name = '', 
                        slug = '', ), 
                    version = '', ),
                last_deploy = 56,
                name = '',
                owner_id = '',
                separate_build = True,
                state = '',
                sticky_sessions = True,
                vhosts = [
                    openapi_client.models.vhost.Vhost(
                        fqdn = '', )
                    ],
                webhook_secret = '',
                webhook_url = '',
                zone = ''
            )
        else:
            return Application(
                archived = True,
                branch = '',
                build_flavor = openapi_client.models.flavor.Flavor(
                    available = True, 
                    cpus = 56, 
                    disk = 56, 
                    mem = 56, 
                    microservice = True, 
                    name = '', 
                    nice = 1.337, 
                    price = 1.337, ),
                cancel_on_push = True,
                commit_id = '',
                creation_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                deploy_url = '',
                deployment = openapi_client.models.deployment.Deployment(
                    http_url = '', 
                    repo_state = '', 
                    shutdownable = True, 
                    type = '', 
                    url = '', ),
                description = '',
                favourite = True,
                homogeneous = True,
                id = '',
                instance = openapi_client.models.instance.Instance(
                    build_flavor = openapi_client.models.flavor.Flavor(
                        available = True, 
                        cpus = 56, 
                        disk = 56, 
                        mem = 56, 
                        microservice = True, 
                        name = '', 
                        nice = 1.337, 
                        price = 1.337, ), 
                    coming_soon = True, 
                    default_env = openapi_client.models.map.Map(), 
                    default_flavor = openapi_client.models.flavor.Flavor(
                        available = True, 
                        cpus = 56, 
                        disk = 56, 
                        mem = 56, 
                        microservice = True, 
                        name = '', 
                        nice = 1.337, 
                        price = 1.337, ), 
                    deployments = [
                        ''
                        ], 
                    description = '', 
                    enabled = True, 
                    flavors = [
                        
                        ], 
                    instance_and_version = '', 
                    max_allowed_instances = 56, 
                    max_flavor = , 
                    max_instances = 56, 
                    min_flavor = , 
                    min_instances = 56, 
                    name = '', 
                    tags = [
                        ''
                        ], 
                    type = '', 
                    variant = openapi_client.models.variant.Variant(
                        deploy_type = '', 
                        id = '', 
                        logo = '', 
                        name = '', 
                        slug = '', ), 
                    version = '', ),
                last_deploy = 56,
                name = '',
                owner_id = '',
                separate_build = True,
                state = '',
                sticky_sessions = True,
                vhosts = [
                    openapi_client.models.vhost.Vhost(
                        fqdn = '', )
                    ],
                webhook_secret = '',
                webhook_url = '',
                zone = '',
        )
        """

    def testApplication(self):
        """Test Application"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Clever-Cloud API

    Public API for managing Clever-Cloud data and products

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.instance import Instance

class TestInstance(unittest.TestCase):
    """Instance unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Instance:
        """Test Instance
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Instance`
        """
        model = Instance()
        if include_optional:
            return Instance(
                build_flavor = openapi_client.models.flavor.Flavor(
                    available = True, 
                    cpus = 56, 
                    disk = 56, 
                    mem = 56, 
                    microservice = True, 
                    name = '', 
                    nice = 1.337, 
                    price = 1.337, ),
                coming_soon = True,
                default_env = openapi_client.models.map.Map(),
                default_flavor = openapi_client.models.flavor.Flavor(
                    available = True, 
                    cpus = 56, 
                    disk = 56, 
                    mem = 56, 
                    microservice = True, 
                    name = '', 
                    nice = 1.337, 
                    price = 1.337, ),
                deployments = [
                    ''
                    ],
                description = '',
                enabled = True,
                flavors = [
                    openapi_client.models.flavor.Flavor(
                        available = True, 
                        cpus = 56, 
                        disk = 56, 
                        mem = 56, 
                        microservice = True, 
                        name = '', 
                        nice = 1.337, 
                        price = 1.337, )
                    ],
                instance_and_version = '',
                max_allowed_instances = 56,
                max_flavor = openapi_client.models.flavor.Flavor(
                    available = True, 
                    cpus = 56, 
                    disk = 56, 
                    mem = 56, 
                    microservice = True, 
                    name = '', 
                    nice = 1.337, 
                    price = 1.337, ),
                max_instances = 56,
                min_flavor = openapi_client.models.flavor.Flavor(
                    available = True, 
                    cpus = 56, 
                    disk = 56, 
                    mem = 56, 
                    microservice = True, 
                    name = '', 
                    nice = 1.337, 
                    price = 1.337, ),
                min_instances = 56,
                name = '',
                tags = [
                    ''
                    ],
                type = '',
                variant = openapi_client.models.variant.Variant(
                    deploy_type = '', 
                    id = '', 
                    logo = '', 
                    name = '', 
                    slug = '', ),
                version = ''
            )
        else:
            return Instance(
                default_env = openapi_client.models.map.Map(),
                flavors = [
                    openapi_client.models.flavor.Flavor(
                        available = True, 
                        cpus = 56, 
                        disk = 56, 
                        mem = 56, 
                        microservice = True, 
                        name = '', 
                        nice = 1.337, 
                        price = 1.337, )
                    ],
                instance_and_version = '',
                max_allowed_instances = 56,
                max_flavor = openapi_client.models.flavor.Flavor(
                    available = True, 
                    cpus = 56, 
                    disk = 56, 
                    mem = 56, 
                    microservice = True, 
                    name = '', 
                    nice = 1.337, 
                    price = 1.337, ),
                max_instances = 56,
                min_flavor = openapi_client.models.flavor.Flavor(
                    available = True, 
                    cpus = 56, 
                    disk = 56, 
                    mem = 56, 
                    microservice = True, 
                    name = '', 
                    nice = 1.337, 
                    price = 1.337, ),
                min_instances = 56,
                type = '',
                variant = openapi_client.models.variant.Variant(
                    deploy_type = '', 
                    id = '', 
                    logo = '', 
                    name = '', 
                    slug = '', ),
                version = '',
        )
        """

    def testInstance(self):
        """Test Instance"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Clever-Cloud API

    Public API for managing Clever-Cloud data and products

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class User(BaseModel):
    """
    A user representation
    """ # noqa: E501
    address: StrictStr = Field(description="The address of the user")
    admin: StrictBool = Field(description="Is the user an administrator ?")
    avatar: StrictStr = Field(description="The location of the user's avatar")
    can_pay: StrictBool = Field(description="Does the user can pay ?", alias="canPay")
    city: StrictStr = Field(description="The city of the user")
    country: StrictStr = Field(description="The country of the user")
    creation_date: StrictInt = Field(description="The creation timestamp of the user", alias="creationDate")
    email: StrictStr = Field(description="The email of the user")
    email_validated: StrictBool = Field(description="Does the user email is validate", alias="emailValidated")
    has_password: Optional[StrictBool] = Field(default=False, alias="hasPassword")
    id: StrictStr = Field(description="The id of the user : `user_${uuid}`")
    lang: StrictStr = Field(description="The lang of the user")
    name: StrictStr = Field(description="The name of the user")
    oauth_apps: List[StrictStr] = Field(description="The list of token oauth", alias="oauthApps")
    phone: StrictStr = Field(description="The phone of the user")
    preferred_mfa: Optional[StrictStr] = Field(default=None, alias="preferredMFA")
    zipcode: StrictStr = Field(description="The zipcode of the user")
    __properties: ClassVar[List[str]] = ["address", "admin", "avatar", "canPay", "city", "country", "creationDate", "email", "emailValidated", "hasPassword", "id", "lang", "name", "oauthApps", "phone", "preferredMFA", "zipcode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "admin": obj.get("admin") if obj.get("admin") is not None else False,
            "avatar": obj.get("avatar"),
            "canPay": obj.get("canPay") if obj.get("canPay") is not None else False,
            "city": obj.get("city"),
            "country": obj.get("country"),
            "creationDate": obj.get("creationDate"),
            "email": obj.get("email"),
            "emailValidated": obj.get("emailValidated") if obj.get("emailValidated") is not None else False,
            "hasPassword": obj.get("hasPassword") if obj.get("hasPassword") is not None else False,
            "id": obj.get("id"),
            "lang": obj.get("lang"),
            "name": obj.get("name"),
            "oauthApps": obj.get("oauthApps"),
            "phone": obj.get("phone"),
            "preferredMFA": obj.get("preferredMFA"),
            "zipcode": obj.get("zipcode")
        })
        return _obj



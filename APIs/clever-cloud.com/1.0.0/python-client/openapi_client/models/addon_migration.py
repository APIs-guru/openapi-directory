# coding: utf-8

"""
    Clever-Cloud API

    Public API for managing Clever-Cloud data and products

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AddonMigration(BaseModel):
    """
    AddonMigration
    """ # noqa: E501
    addon_id: Optional[StrictStr] = None
    callback_url: Optional[StrictStr] = None
    database: Optional[StrictStr] = None
    database_user: Optional[StrictStr] = None
    dump_restore_finished_date: Optional[StrictStr] = None
    dump_restore_start_date: Optional[StrictStr] = None
    end_date: Optional[StrictStr] = None
    exit_message: Optional[StrictStr] = None
    hostname: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    kind: Optional[StrictStr] = None
    last_state_update_date: Optional[StrictStr] = None
    new_cluster_id: Optional[StrictStr] = None
    new_cluster_label: Optional[StrictStr] = None
    new_instance_id: Optional[StrictStr] = None
    new_plan: Optional[StrictStr] = None
    new_recipient_hostname: Optional[StrictStr] = None
    new_zone: Optional[StrictStr] = None
    old_cluster_id: Optional[StrictStr] = None
    old_cluster_label: Optional[StrictStr] = None
    old_instance_id: Optional[StrictStr] = None
    old_plan: Optional[StrictStr] = None
    old_recipient_hostname: Optional[StrictStr] = None
    old_zone: Optional[StrictStr] = None
    port: Optional[Union[StrictFloat, StrictInt]] = None
    request_date: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["addon_id", "callback_url", "database", "database_user", "dump_restore_finished_date", "dump_restore_start_date", "end_date", "exit_message", "hostname", "id", "kind", "last_state_update_date", "new_cluster_id", "new_cluster_label", "new_instance_id", "new_plan", "new_recipient_hostname", "new_zone", "old_cluster_id", "old_cluster_label", "old_instance_id", "old_plan", "old_recipient_hostname", "old_zone", "port", "request_date", "state"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddonMigration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddonMigration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addon_id": obj.get("addon_id"),
            "callback_url": obj.get("callback_url"),
            "database": obj.get("database"),
            "database_user": obj.get("database_user"),
            "dump_restore_finished_date": obj.get("dump_restore_finished_date"),
            "dump_restore_start_date": obj.get("dump_restore_start_date"),
            "end_date": obj.get("end_date"),
            "exit_message": obj.get("exit_message"),
            "hostname": obj.get("hostname"),
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "last_state_update_date": obj.get("last_state_update_date"),
            "new_cluster_id": obj.get("new_cluster_id"),
            "new_cluster_label": obj.get("new_cluster_label"),
            "new_instance_id": obj.get("new_instance_id"),
            "new_plan": obj.get("new_plan"),
            "new_recipient_hostname": obj.get("new_recipient_hostname"),
            "new_zone": obj.get("new_zone"),
            "old_cluster_id": obj.get("old_cluster_id"),
            "old_cluster_label": obj.get("old_cluster_label"),
            "old_instance_id": obj.get("old_instance_id"),
            "old_plan": obj.get("old_plan"),
            "old_recipient_hostname": obj.get("old_recipient_hostname"),
            "old_zone": obj.get("old_zone"),
            "port": obj.get("port"),
            "request_date": obj.get("request_date"),
            "state": obj.get("state")
        })
        return _obj



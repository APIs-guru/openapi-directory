# coding: utf-8

"""
    Clever-Cloud API

    Public API for managing Clever-Cloud data and products

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.summary_organisations_inner_addons_inner import SummaryOrganisationsInnerAddonsInner
from openapi_client.models.summary_organisations_inner_applications_inner import SummaryOrganisationsInnerApplicationsInner
from openapi_client.models.summary_organisations_inner_consumers_inner import SummaryOrganisationsInnerConsumersInner
from typing import Optional, Set
from typing_extensions import Self

class SummaryUser(BaseModel):
    """
    SummaryUser
    """ # noqa: E501
    addons: List[SummaryOrganisationsInnerAddonsInner]
    admin: StrictBool
    applications: List[SummaryOrganisationsInnerApplicationsInner]
    avatar: StrictStr
    consumers: Optional[List[SummaryOrganisationsInnerConsumersInner]] = None
    id: StrictStr
    lang: StrictStr
    name: StrictStr
    __properties: ClassVar[List[str]] = ["addons", "admin", "applications", "avatar", "consumers", "id", "lang", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SummaryUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in addons (list)
        _items = []
        if self.addons:
            for _item_addons in self.addons:
                if _item_addons:
                    _items.append(_item_addons.to_dict())
            _dict['addons'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in applications (list)
        _items = []
        if self.applications:
            for _item_applications in self.applications:
                if _item_applications:
                    _items.append(_item_applications.to_dict())
            _dict['applications'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in consumers (list)
        _items = []
        if self.consumers:
            for _item_consumers in self.consumers:
                if _item_consumers:
                    _items.append(_item_consumers.to_dict())
            _dict['consumers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SummaryUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addons": [SummaryOrganisationsInnerAddonsInner.from_dict(_item) for _item in obj["addons"]] if obj.get("addons") is not None else None,
            "admin": obj.get("admin") if obj.get("admin") is not None else False,
            "applications": [SummaryOrganisationsInnerApplicationsInner.from_dict(_item) for _item in obj["applications"]] if obj.get("applications") is not None else None,
            "avatar": obj.get("avatar"),
            "consumers": [SummaryOrganisationsInnerConsumersInner.from_dict(_item) for _item in obj["consumers"]] if obj.get("consumers") is not None else None,
            "id": obj.get("id"),
            "lang": obj.get("lang"),
            "name": obj.get("name")
        })
        return _obj



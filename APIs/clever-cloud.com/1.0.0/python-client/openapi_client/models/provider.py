# coding: utf-8

"""
    Clever-Cloud API

    Public API for managing Clever-Cloud data and products

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.feature import Feature
from openapi_client.models.plan import Plan
from typing import Optional, Set
from typing_extensions import Self

class Provider(BaseModel):
    """
    A provider
    """ # noqa: E501
    analytics_id: StrictStr = Field(description="The id of the analytics page link to this addon", alias="analyticsId")
    can_upgrade: StrictBool = Field(description="Can the addon be upgraded", alias="canUpgrade")
    features: Optional[List[Feature]] = None
    google_plus_name: StrictStr = Field(description="The name of the google + page link to this addon (could be empty)", alias="googlePlusName")
    id: StrictStr = Field(description="The id of the provider")
    logo_url: StrictStr = Field(description="The url of the addon's logo", alias="logoUrl")
    long_desc: StrictStr = Field(description="A less concise description of the addon", alias="longDesc")
    name: StrictStr
    open_in_new_tab: StrictBool = Field(description="Does the addon panel need to be open in a new tab", alias="openInNewTab")
    plans: Optional[List[Plan]] = None
    regions: List[StrictStr] = Field(description="The differents regions where the addon is available")
    short_desc: StrictStr = Field(description="A short description of the addon", alias="shortDesc")
    status: StrictStr = Field(description="The status of this addon (RELEASE, BETA, ...)")
    support_email: StrictStr = Field(description="The mail to contact in case of issue with this addon", alias="supportEmail")
    twitter_name: StrictStr = Field(description="The name of the user to contact on twitter for this addon (could be empty)", alias="twitterName")
    website: StrictStr = Field(description="The website of the provider. If the addon is developped by clever-cloud, the site is \"http://www.clever-cloud.com/\"")
    __properties: ClassVar[List[str]] = ["analyticsId", "canUpgrade", "features", "googlePlusName", "id", "logoUrl", "longDesc", "name", "openInNewTab", "plans", "regions", "shortDesc", "status", "supportEmail", "twitterName", "website"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Provider from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in features (list)
        _items = []
        if self.features:
            for _item_features in self.features:
                if _item_features:
                    _items.append(_item_features.to_dict())
            _dict['features'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in plans (list)
        _items = []
        if self.plans:
            for _item_plans in self.plans:
                if _item_plans:
                    _items.append(_item_plans.to_dict())
            _dict['plans'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Provider from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "analyticsId": obj.get("analyticsId"),
            "canUpgrade": obj.get("canUpgrade") if obj.get("canUpgrade") is not None else False,
            "features": [Feature.from_dict(_item) for _item in obj["features"]] if obj.get("features") is not None else None,
            "googlePlusName": obj.get("googlePlusName"),
            "id": obj.get("id"),
            "logoUrl": obj.get("logoUrl"),
            "longDesc": obj.get("longDesc"),
            "name": obj.get("name"),
            "openInNewTab": obj.get("openInNewTab") if obj.get("openInNewTab") is not None else False,
            "plans": [Plan.from_dict(_item) for _item in obj["plans"]] if obj.get("plans") is not None else None,
            "regions": obj.get("regions"),
            "shortDesc": obj.get("shortDesc"),
            "status": obj.get("status"),
            "supportEmail": obj.get("supportEmail"),
            "twitterName": obj.get("twitterName"),
            "website": obj.get("website")
        })
        return _obj



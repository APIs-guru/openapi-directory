# coding: utf-8

"""
    Clever-Cloud API

    Public API for managing Clever-Cloud data and products

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.wannabe_oauth_app import WannabeOauthApp
from typing import Optional, Set
from typing_extensions import Self

class WannabeApplication(BaseModel):
    """
    WannabeApplication
    """ # noqa: E501
    archived: Optional[StrictBool] = False
    cancel_on_push: Optional[StrictBool] = Field(default=False, alias="cancelOnPush")
    deploy: StrictStr
    description: Optional[StrictStr] = None
    enabled: StrictBool
    favourite: Optional[StrictBool] = False
    homogeneous: Optional[StrictBool] = False
    instance_type: Optional[StrictStr] = Field(default=None, alias="instanceType")
    instance_variant: Optional[StrictStr] = Field(default=None, alias="instanceVariant")
    instance_version: Optional[StrictStr] = Field(default=None, alias="instanceVersion")
    max_flavor: Optional[StrictStr] = Field(default=None, alias="maxFlavor")
    max_instances: StrictInt = Field(alias="maxInstances")
    min_flavor: Optional[StrictStr] = Field(default=None, alias="minFlavor")
    min_instances: StrictInt = Field(alias="minInstances")
    name: StrictStr
    oauth_app: Optional[WannabeOauthApp] = Field(default=None, alias="oauthApp")
    oauth_app_id: Optional[StrictStr] = Field(default=None, alias="oauthAppId")
    oauth_service: Optional[StrictStr] = Field(default=None, alias="oauthService")
    separate_build: Optional[StrictBool] = Field(default=False, alias="separateBuild")
    shutdownable: Optional[StrictBool] = False
    sticky_sessions: Optional[StrictBool] = Field(default=False, alias="stickySessions")
    tags: Optional[List[StrictStr]] = None
    zone: StrictStr
    __properties: ClassVar[List[str]] = ["archived", "cancelOnPush", "deploy", "description", "enabled", "favourite", "homogeneous", "instanceType", "instanceVariant", "instanceVersion", "maxFlavor", "maxInstances", "minFlavor", "minInstances", "name", "oauthApp", "oauthAppId", "oauthService", "separateBuild", "shutdownable", "stickySessions", "tags", "zone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WannabeApplication from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of oauth_app
        if self.oauth_app:
            _dict['oauthApp'] = self.oauth_app.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WannabeApplication from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "archived": obj.get("archived") if obj.get("archived") is not None else False,
            "cancelOnPush": obj.get("cancelOnPush") if obj.get("cancelOnPush") is not None else False,
            "deploy": obj.get("deploy"),
            "description": obj.get("description"),
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else False,
            "favourite": obj.get("favourite") if obj.get("favourite") is not None else False,
            "homogeneous": obj.get("homogeneous") if obj.get("homogeneous") is not None else False,
            "instanceType": obj.get("instanceType"),
            "instanceVariant": obj.get("instanceVariant"),
            "instanceVersion": obj.get("instanceVersion"),
            "maxFlavor": obj.get("maxFlavor"),
            "maxInstances": obj.get("maxInstances"),
            "minFlavor": obj.get("minFlavor"),
            "minInstances": obj.get("minInstances"),
            "name": obj.get("name"),
            "oauthApp": WannabeOauthApp.from_dict(obj["oauthApp"]) if obj.get("oauthApp") is not None else None,
            "oauthAppId": obj.get("oauthAppId"),
            "oauthService": obj.get("oauthService"),
            "separateBuild": obj.get("separateBuild") if obj.get("separateBuild") is not None else False,
            "shutdownable": obj.get("shutdownable") if obj.get("shutdownable") is not None else False,
            "stickySessions": obj.get("stickySessions") if obj.get("stickySessions") is not None else False,
            "tags": obj.get("tags"),
            "zone": obj.get("zone")
        })
        return _obj



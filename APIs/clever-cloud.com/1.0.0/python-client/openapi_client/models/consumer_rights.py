# coding: utf-8

"""
    Clever-Cloud API

    Public API for managing Clever-Cloud data and products

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ConsumerRights(BaseModel):
    """
    ConsumerRights
    """ # noqa: E501
    access_bills: Optional[StrictBool] = False
    access_consumption_statistics: Optional[StrictBool] = False
    access_credit_count: Optional[StrictBool] = False
    access_organisations: Optional[StrictBool] = False
    access_organisations_bills: Optional[StrictBool] = False
    access_organisations_consumption_statistics: Optional[StrictBool] = False
    access_organisations_credit_count: Optional[StrictBool] = False
    access_personal_information: Optional[StrictBool] = False
    almighty: Optional[StrictBool] = False
    manage_applications: Optional[StrictBool] = False
    manage_organisations: Optional[StrictBool] = False
    manage_organisations_applications: Optional[StrictBool] = False
    manage_organisations_members: Optional[StrictBool] = False
    manage_organisations_services: Optional[StrictBool] = False
    manage_personal_information: Optional[StrictBool] = False
    manage_services: Optional[StrictBool] = False
    manage_ssh_keys: Optional[StrictBool] = False
    __properties: ClassVar[List[str]] = ["access_bills", "access_consumption_statistics", "access_credit_count", "access_organisations", "access_organisations_bills", "access_organisations_consumption_statistics", "access_organisations_credit_count", "access_personal_information", "almighty", "manage_applications", "manage_organisations", "manage_organisations_applications", "manage_organisations_members", "manage_organisations_services", "manage_personal_information", "manage_services", "manage_ssh_keys"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConsumerRights from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConsumerRights from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access_bills": obj.get("access_bills") if obj.get("access_bills") is not None else False,
            "access_consumption_statistics": obj.get("access_consumption_statistics") if obj.get("access_consumption_statistics") is not None else False,
            "access_credit_count": obj.get("access_credit_count") if obj.get("access_credit_count") is not None else False,
            "access_organisations": obj.get("access_organisations") if obj.get("access_organisations") is not None else False,
            "access_organisations_bills": obj.get("access_organisations_bills") if obj.get("access_organisations_bills") is not None else False,
            "access_organisations_consumption_statistics": obj.get("access_organisations_consumption_statistics") if obj.get("access_organisations_consumption_statistics") is not None else False,
            "access_organisations_credit_count": obj.get("access_organisations_credit_count") if obj.get("access_organisations_credit_count") is not None else False,
            "access_personal_information": obj.get("access_personal_information") if obj.get("access_personal_information") is not None else False,
            "almighty": obj.get("almighty") if obj.get("almighty") is not None else False,
            "manage_applications": obj.get("manage_applications") if obj.get("manage_applications") is not None else False,
            "manage_organisations": obj.get("manage_organisations") if obj.get("manage_organisations") is not None else False,
            "manage_organisations_applications": obj.get("manage_organisations_applications") if obj.get("manage_organisations_applications") is not None else False,
            "manage_organisations_members": obj.get("manage_organisations_members") if obj.get("manage_organisations_members") is not None else False,
            "manage_organisations_services": obj.get("manage_organisations_services") if obj.get("manage_organisations_services") is not None else False,
            "manage_personal_information": obj.get("manage_personal_information") if obj.get("manage_personal_information") is not None else False,
            "manage_services": obj.get("manage_services") if obj.get("manage_services") is not None else False,
            "manage_ssh_keys": obj.get("manage_ssh_keys") if obj.get("manage_ssh_keys") is not None else False
        })
        return _obj



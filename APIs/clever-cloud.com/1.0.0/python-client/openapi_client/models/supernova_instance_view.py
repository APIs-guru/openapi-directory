# coding: utf-8

"""
    Clever-Cloud API

    Public API for managing Clever-Cloud data and products

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.supernova_instance_view_flavor import SupernovaInstanceViewFlavor
from typing import Optional, Set
from typing_extensions import Self

class SupernovaInstanceView(BaseModel):
    """
    SupernovaInstanceView
    """ # noqa: E501
    app_id: Optional[StrictStr] = Field(default=None, description="Identifier of running app/add-on", alias="appId")
    app_port: Union[StrictFloat, StrictInt] = Field(description="Port of the HV that's redirected to 8080 on VM", alias="appPort")
    commit_id: Optional[StrictStr] = Field(default=None, alias="commitId")
    created_at: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Integer unix timestamp", alias="createdAt")
    deploy_id: Optional[StrictStr] = Field(default=None, alias="deployId")
    deploy_number: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="deployNumber")
    display_name: Optional[StrictStr] = Field(default=None, description="Generated PokéName. This name is generated from the uuid.", alias="displayName")
    flavor: SupernovaInstanceViewFlavor
    hv: StrictStr = Field(description="String name of hv.")
    image: StrictStr = Field(description="Base system image. E.g. java-20181030, node-20180912…")
    instance_number: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="instanceNumber")
    internal_ip: Optional[StrictStr] = Field(default=None, alias="internalIP")
    ip: StrictStr = Field(description="Public IP of the HV")
    owner_id: Optional[StrictStr] = Field(default=None, description="Identifier of the owner of the app/add-on running", alias="ownerId")
    source: StrictStr = Field(description="Who/what started this instance? E.g. \"app\", \"cli\"")
    ssh_port: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Port of the HV that's redirected to 22 on VM", alias="sshPort")
    state: Optional[StrictStr] = None
    uuid: StrictStr
    zabbix_port: Union[StrictFloat, StrictInt] = Field(description="Port of the HV that's redirected to 10050 on VM", alias="zabbixPort")
    zone: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["appId", "appPort", "commitId", "createdAt", "deployId", "deployNumber", "displayName", "flavor", "hv", "image", "instanceNumber", "internalIP", "ip", "ownerId", "source", "sshPort", "state", "uuid", "zabbixPort", "zone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupernovaInstanceView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of flavor
        if self.flavor:
            _dict['flavor'] = self.flavor.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupernovaInstanceView from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appId": obj.get("appId"),
            "appPort": obj.get("appPort"),
            "commitId": obj.get("commitId"),
            "createdAt": obj.get("createdAt"),
            "deployId": obj.get("deployId"),
            "deployNumber": obj.get("deployNumber"),
            "displayName": obj.get("displayName"),
            "flavor": SupernovaInstanceViewFlavor.from_dict(obj["flavor"]) if obj.get("flavor") is not None else None,
            "hv": obj.get("hv"),
            "image": obj.get("image"),
            "instanceNumber": obj.get("instanceNumber"),
            "internalIP": obj.get("internalIP"),
            "ip": obj.get("ip"),
            "ownerId": obj.get("ownerId"),
            "source": obj.get("source"),
            "sshPort": obj.get("sshPort"),
            "state": obj.get("state"),
            "uuid": obj.get("uuid"),
            "zabbixPort": obj.get("zabbixPort"),
            "zone": obj.get("zone")
        })
        return _obj



# coding: utf-8

"""
    Clever-Cloud API

    Public API for managing Clever-Cloud data and products

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.flavor import Flavor
from openapi_client.models.variant import Variant
from typing import Optional, Set
from typing_extensions import Self

class Instance(BaseModel):
    """
    Instance
    """ # noqa: E501
    build_flavor: Optional[Flavor] = Field(default=None, alias="buildFlavor")
    coming_soon: Optional[StrictBool] = Field(default=False, alias="comingSoon")
    default_env: Dict[str, Any] = Field(alias="defaultEnv")
    default_flavor: Optional[Flavor] = Field(default=None, alias="defaultFlavor")
    deployments: Optional[List[StrictStr]] = None
    description: Optional[StrictStr] = None
    enabled: Optional[StrictBool] = False
    flavors: List[Flavor]
    instance_and_version: StrictStr = Field(alias="instanceAndVersion")
    max_allowed_instances: StrictInt = Field(alias="maxAllowedInstances")
    max_flavor: Flavor = Field(alias="maxFlavor")
    max_instances: StrictInt = Field(alias="maxInstances")
    min_flavor: Flavor = Field(alias="minFlavor")
    min_instances: StrictInt = Field(alias="minInstances")
    name: Optional[StrictStr] = None
    tags: Optional[List[StrictStr]] = None
    type: StrictStr
    variant: Variant
    version: StrictStr
    __properties: ClassVar[List[str]] = ["buildFlavor", "comingSoon", "defaultEnv", "defaultFlavor", "deployments", "description", "enabled", "flavors", "instanceAndVersion", "maxAllowedInstances", "maxFlavor", "maxInstances", "minFlavor", "minInstances", "name", "tags", "type", "variant", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Instance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of build_flavor
        if self.build_flavor:
            _dict['buildFlavor'] = self.build_flavor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_flavor
        if self.default_flavor:
            _dict['defaultFlavor'] = self.default_flavor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in flavors (list)
        _items = []
        if self.flavors:
            for _item_flavors in self.flavors:
                if _item_flavors:
                    _items.append(_item_flavors.to_dict())
            _dict['flavors'] = _items
        # override the default output from pydantic by calling `to_dict()` of max_flavor
        if self.max_flavor:
            _dict['maxFlavor'] = self.max_flavor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_flavor
        if self.min_flavor:
            _dict['minFlavor'] = self.min_flavor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of variant
        if self.variant:
            _dict['variant'] = self.variant.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Instance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buildFlavor": Flavor.from_dict(obj["buildFlavor"]) if obj.get("buildFlavor") is not None else None,
            "comingSoon": obj.get("comingSoon") if obj.get("comingSoon") is not None else False,
            "defaultEnv": obj.get("defaultEnv"),
            "defaultFlavor": Flavor.from_dict(obj["defaultFlavor"]) if obj.get("defaultFlavor") is not None else None,
            "deployments": obj.get("deployments"),
            "description": obj.get("description"),
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else False,
            "flavors": [Flavor.from_dict(_item) for _item in obj["flavors"]] if obj.get("flavors") is not None else None,
            "instanceAndVersion": obj.get("instanceAndVersion"),
            "maxAllowedInstances": obj.get("maxAllowedInstances"),
            "maxFlavor": Flavor.from_dict(obj["maxFlavor"]) if obj.get("maxFlavor") is not None else None,
            "maxInstances": obj.get("maxInstances"),
            "minFlavor": Flavor.from_dict(obj["minFlavor"]) if obj.get("minFlavor") is not None else None,
            "minInstances": obj.get("minInstances"),
            "name": obj.get("name"),
            "tags": obj.get("tags"),
            "type": obj.get("type"),
            "variant": Variant.from_dict(obj["variant"]) if obj.get("variant") is not None else None,
            "version": obj.get("version")
        })
        return _obj



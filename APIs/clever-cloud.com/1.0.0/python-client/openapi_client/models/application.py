# coding: utf-8

"""
    Clever-Cloud API

    Public API for managing Clever-Cloud data and products

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.deployment import Deployment
from openapi_client.models.flavor import Flavor
from openapi_client.models.instance import Instance
from openapi_client.models.vhost import Vhost
from typing import Optional, Set
from typing_extensions import Self

class Application(BaseModel):
    """
    Application
    """ # noqa: E501
    archived: StrictBool
    branch: StrictStr
    build_flavor: Flavor = Field(alias="buildFlavor")
    cancel_on_push: StrictBool = Field(alias="cancelOnPush")
    commit_id: StrictStr = Field(alias="commitId")
    creation_date: date = Field(alias="creationDate")
    deploy_url: StrictStr = Field(alias="deployUrl")
    deployment: Deployment
    description: StrictStr
    favourite: StrictBool
    homogeneous: StrictBool
    id: StrictStr
    instance: Instance
    last_deploy: StrictInt
    name: StrictStr
    owner_id: StrictStr = Field(alias="ownerId")
    separate_build: StrictBool = Field(alias="separateBuild")
    state: StrictStr
    sticky_sessions: StrictBool = Field(alias="stickySessions")
    vhosts: List[Vhost]
    webhook_secret: StrictStr = Field(alias="webhookSecret")
    webhook_url: StrictStr = Field(alias="webhookUrl")
    zone: StrictStr = Field(description="`par` ou `mtl`")
    __properties: ClassVar[List[str]] = ["archived", "branch", "buildFlavor", "cancelOnPush", "commitId", "creationDate", "deployUrl", "deployment", "description", "favourite", "homogeneous", "id", "instance", "last_deploy", "name", "ownerId", "separateBuild", "state", "stickySessions", "vhosts", "webhookSecret", "webhookUrl", "zone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Application from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of build_flavor
        if self.build_flavor:
            _dict['buildFlavor'] = self.build_flavor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deployment
        if self.deployment:
            _dict['deployment'] = self.deployment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of instance
        if self.instance:
            _dict['instance'] = self.instance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in vhosts (list)
        _items = []
        if self.vhosts:
            for _item_vhosts in self.vhosts:
                if _item_vhosts:
                    _items.append(_item_vhosts.to_dict())
            _dict['vhosts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Application from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "archived": obj.get("archived") if obj.get("archived") is not None else False,
            "branch": obj.get("branch"),
            "buildFlavor": Flavor.from_dict(obj["buildFlavor"]) if obj.get("buildFlavor") is not None else None,
            "cancelOnPush": obj.get("cancelOnPush") if obj.get("cancelOnPush") is not None else False,
            "commitId": obj.get("commitId"),
            "creationDate": obj.get("creationDate"),
            "deployUrl": obj.get("deployUrl"),
            "deployment": Deployment.from_dict(obj["deployment"]) if obj.get("deployment") is not None else None,
            "description": obj.get("description"),
            "favourite": obj.get("favourite") if obj.get("favourite") is not None else False,
            "homogeneous": obj.get("homogeneous") if obj.get("homogeneous") is not None else False,
            "id": obj.get("id"),
            "instance": Instance.from_dict(obj["instance"]) if obj.get("instance") is not None else None,
            "last_deploy": obj.get("last_deploy"),
            "name": obj.get("name"),
            "ownerId": obj.get("ownerId"),
            "separateBuild": obj.get("separateBuild") if obj.get("separateBuild") is not None else False,
            "state": obj.get("state"),
            "stickySessions": obj.get("stickySessions") if obj.get("stickySessions") is not None else False,
            "vhosts": [Vhost.from_dict(_item) for _item in obj["vhosts"]] if obj.get("vhosts") is not None else None,
            "webhookSecret": obj.get("webhookSecret"),
            "webhookUrl": obj.get("webhookUrl"),
            "zone": obj.get("zone")
        })
        return _obj



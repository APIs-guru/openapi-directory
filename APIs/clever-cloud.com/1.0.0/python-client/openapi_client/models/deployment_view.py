# coding: utf-8

"""
    Clever-Cloud API

    Public API for managing Clever-Cloud data and products

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.deployment_view_author import DeploymentViewAuthor
from typing import Optional, Set
from typing_extensions import Self

class DeploymentView(BaseModel):
    """
    DeploymentView
    """ # noqa: E501
    action: StrictStr
    author: Optional[DeploymentViewAuthor] = None
    cause: StrictStr
    commit: StrictStr
    var_date: date = Field(alias="date")
    id: StrictInt
    instances: StrictInt
    state: StrictStr
    uuid: StrictStr
    __properties: ClassVar[List[str]] = ["action", "author", "cause", "commit", "date", "id", "instances", "state", "uuid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeploymentView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeploymentView from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "author": DeploymentViewAuthor.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "cause": obj.get("cause"),
            "commit": obj.get("commit"),
            "date": obj.get("date"),
            "id": obj.get("id"),
            "instances": obj.get("instances"),
            "state": obj.get("state"),
            "uuid": obj.get("uuid")
        })
        return _obj



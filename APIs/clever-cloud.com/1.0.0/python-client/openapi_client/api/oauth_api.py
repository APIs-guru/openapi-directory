# coding: utf-8

"""
    Clever-Cloud API

    Public API for managing Clever-Cloud data and products

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictStr
from typing import Optional
from openapi_client.models.rights import Rights

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class OauthApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_oauth_authorize_0(
        self,
        oauth_token: Optional[StrictStr] = None,
        cookie: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_oauth_authorize_0


        :param oauth_token:
        :type oauth_token: str
        :param cookie:
        :type cookie: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_oauth_authorize_0_serialize(
            oauth_token=oauth_token,
            cookie=cookie,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_oauth_authorize_0_with_http_info(
        self,
        oauth_token: Optional[StrictStr] = None,
        cookie: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_oauth_authorize_0


        :param oauth_token:
        :type oauth_token: str
        :param cookie:
        :type cookie: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_oauth_authorize_0_serialize(
            oauth_token=oauth_token,
            cookie=cookie,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_oauth_authorize_0_without_preload_content(
        self,
        oauth_token: Optional[StrictStr] = None,
        cookie: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_oauth_authorize_0


        :param oauth_token:
        :type oauth_token: str
        :param cookie:
        :type cookie: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_oauth_authorize_0_serialize(
            oauth_token=oauth_token,
            cookie=cookie,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_oauth_authorize_0_serialize(
        self,
        oauth_token,
        cookie,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        # process the header parameters
        if cookie is not None:
            _header_params['Cookie'] = cookie
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/oauth/authorize',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_oauth_rights_0(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Rights:
        """get_oauth_rights_0


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_oauth_rights_0_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Rights",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_oauth_rights_0_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Rights]:
        """get_oauth_rights_0


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_oauth_rights_0_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Rights",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_oauth_rights_0_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_oauth_rights_0


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_oauth_rights_0_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Rights",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_oauth_rights_0_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/oauth/rights',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def oauth_access_token_query_post_0(
        self,
        oauth_consumer_key: Optional[StrictStr] = None,
        oauth_token: Optional[StrictStr] = None,
        oauth_signature_method: Optional[StrictStr] = None,
        oauth_signature: Optional[StrictStr] = None,
        oauth_timestamp: Optional[StrictStr] = None,
        oauth_nonce: Optional[StrictStr] = None,
        oauth_version: Optional[StrictStr] = None,
        oauth_verifier: Optional[StrictStr] = None,
        oauth_callback: Optional[StrictStr] = None,
        oauth_token_secret: Optional[StrictStr] = None,
        oauth_callback_confirmed: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """oauth_access_token_query_post_0


        :param oauth_consumer_key:
        :type oauth_consumer_key: str
        :param oauth_token:
        :type oauth_token: str
        :param oauth_signature_method:
        :type oauth_signature_method: str
        :param oauth_signature:
        :type oauth_signature: str
        :param oauth_timestamp:
        :type oauth_timestamp: str
        :param oauth_nonce:
        :type oauth_nonce: str
        :param oauth_version:
        :type oauth_version: str
        :param oauth_verifier:
        :type oauth_verifier: str
        :param oauth_callback:
        :type oauth_callback: str
        :param oauth_token_secret:
        :type oauth_token_secret: str
        :param oauth_callback_confirmed:
        :type oauth_callback_confirmed: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._oauth_access_token_query_post_0_serialize(
            oauth_consumer_key=oauth_consumer_key,
            oauth_token=oauth_token,
            oauth_signature_method=oauth_signature_method,
            oauth_signature=oauth_signature,
            oauth_timestamp=oauth_timestamp,
            oauth_nonce=oauth_nonce,
            oauth_version=oauth_version,
            oauth_verifier=oauth_verifier,
            oauth_callback=oauth_callback,
            oauth_token_secret=oauth_token_secret,
            oauth_callback_confirmed=oauth_callback_confirmed,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def oauth_access_token_query_post_0_with_http_info(
        self,
        oauth_consumer_key: Optional[StrictStr] = None,
        oauth_token: Optional[StrictStr] = None,
        oauth_signature_method: Optional[StrictStr] = None,
        oauth_signature: Optional[StrictStr] = None,
        oauth_timestamp: Optional[StrictStr] = None,
        oauth_nonce: Optional[StrictStr] = None,
        oauth_version: Optional[StrictStr] = None,
        oauth_verifier: Optional[StrictStr] = None,
        oauth_callback: Optional[StrictStr] = None,
        oauth_token_secret: Optional[StrictStr] = None,
        oauth_callback_confirmed: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """oauth_access_token_query_post_0


        :param oauth_consumer_key:
        :type oauth_consumer_key: str
        :param oauth_token:
        :type oauth_token: str
        :param oauth_signature_method:
        :type oauth_signature_method: str
        :param oauth_signature:
        :type oauth_signature: str
        :param oauth_timestamp:
        :type oauth_timestamp: str
        :param oauth_nonce:
        :type oauth_nonce: str
        :param oauth_version:
        :type oauth_version: str
        :param oauth_verifier:
        :type oauth_verifier: str
        :param oauth_callback:
        :type oauth_callback: str
        :param oauth_token_secret:
        :type oauth_token_secret: str
        :param oauth_callback_confirmed:
        :type oauth_callback_confirmed: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._oauth_access_token_query_post_0_serialize(
            oauth_consumer_key=oauth_consumer_key,
            oauth_token=oauth_token,
            oauth_signature_method=oauth_signature_method,
            oauth_signature=oauth_signature,
            oauth_timestamp=oauth_timestamp,
            oauth_nonce=oauth_nonce,
            oauth_version=oauth_version,
            oauth_verifier=oauth_verifier,
            oauth_callback=oauth_callback,
            oauth_token_secret=oauth_token_secret,
            oauth_callback_confirmed=oauth_callback_confirmed,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def oauth_access_token_query_post_0_without_preload_content(
        self,
        oauth_consumer_key: Optional[StrictStr] = None,
        oauth_token: Optional[StrictStr] = None,
        oauth_signature_method: Optional[StrictStr] = None,
        oauth_signature: Optional[StrictStr] = None,
        oauth_timestamp: Optional[StrictStr] = None,
        oauth_nonce: Optional[StrictStr] = None,
        oauth_version: Optional[StrictStr] = None,
        oauth_verifier: Optional[StrictStr] = None,
        oauth_callback: Optional[StrictStr] = None,
        oauth_token_secret: Optional[StrictStr] = None,
        oauth_callback_confirmed: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """oauth_access_token_query_post_0


        :param oauth_consumer_key:
        :type oauth_consumer_key: str
        :param oauth_token:
        :type oauth_token: str
        :param oauth_signature_method:
        :type oauth_signature_method: str
        :param oauth_signature:
        :type oauth_signature: str
        :param oauth_timestamp:
        :type oauth_timestamp: str
        :param oauth_nonce:
        :type oauth_nonce: str
        :param oauth_version:
        :type oauth_version: str
        :param oauth_verifier:
        :type oauth_verifier: str
        :param oauth_callback:
        :type oauth_callback: str
        :param oauth_token_secret:
        :type oauth_token_secret: str
        :param oauth_callback_confirmed:
        :type oauth_callback_confirmed: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._oauth_access_token_query_post_0_serialize(
            oauth_consumer_key=oauth_consumer_key,
            oauth_token=oauth_token,
            oauth_signature_method=oauth_signature_method,
            oauth_signature=oauth_signature,
            oauth_timestamp=oauth_timestamp,
            oauth_nonce=oauth_nonce,
            oauth_version=oauth_version,
            oauth_verifier=oauth_verifier,
            oauth_callback=oauth_callback,
            oauth_token_secret=oauth_token_secret,
            oauth_callback_confirmed=oauth_callback_confirmed,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _oauth_access_token_query_post_0_serialize(
        self,
        oauth_consumer_key,
        oauth_token,
        oauth_signature_method,
        oauth_signature,
        oauth_timestamp,
        oauth_nonce,
        oauth_version,
        oauth_verifier,
        oauth_callback,
        oauth_token_secret,
        oauth_callback_confirmed,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if oauth_consumer_key is not None:
            
            _query_params.append(('oauth_consumer_key', oauth_consumer_key))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if oauth_signature_method is not None:
            
            _query_params.append(('oauth_signature_method', oauth_signature_method))
            
        if oauth_signature is not None:
            
            _query_params.append(('oauth_signature', oauth_signature))
            
        if oauth_timestamp is not None:
            
            _query_params.append(('oauth_timestamp', oauth_timestamp))
            
        if oauth_nonce is not None:
            
            _query_params.append(('oauth_nonce', oauth_nonce))
            
        if oauth_version is not None:
            
            _query_params.append(('oauth_version', oauth_version))
            
        if oauth_verifier is not None:
            
            _query_params.append(('oauth_verifier', oauth_verifier))
            
        if oauth_callback is not None:
            
            _query_params.append(('oauth_callback', oauth_callback))
            
        if oauth_token_secret is not None:
            
            _query_params.append(('oauth_token_secret', oauth_token_secret))
            
        if oauth_callback_confirmed is not None:
            
            _query_params.append(('oauth_callback_confirmed', oauth_callback_confirmed))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/oauth/access_token_query',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def oauth_request_token_query_post_0(
        self,
        oauth_consumer_key: Optional[StrictStr] = None,
        oauth_token: Optional[StrictStr] = None,
        oauth_signature_method: Optional[StrictStr] = None,
        oauth_signature: Optional[StrictStr] = None,
        oauth_timestamp: Optional[StrictStr] = None,
        oauth_nonce: Optional[StrictStr] = None,
        oauth_version: Optional[StrictStr] = None,
        oauth_verifier: Optional[StrictStr] = None,
        oauth_callback: Optional[StrictStr] = None,
        oauth_token_secret: Optional[StrictStr] = None,
        oauth_callback_confirmed: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """oauth_request_token_query_post_0


        :param oauth_consumer_key:
        :type oauth_consumer_key: str
        :param oauth_token:
        :type oauth_token: str
        :param oauth_signature_method:
        :type oauth_signature_method: str
        :param oauth_signature:
        :type oauth_signature: str
        :param oauth_timestamp:
        :type oauth_timestamp: str
        :param oauth_nonce:
        :type oauth_nonce: str
        :param oauth_version:
        :type oauth_version: str
        :param oauth_verifier:
        :type oauth_verifier: str
        :param oauth_callback:
        :type oauth_callback: str
        :param oauth_token_secret:
        :type oauth_token_secret: str
        :param oauth_callback_confirmed:
        :type oauth_callback_confirmed: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._oauth_request_token_query_post_0_serialize(
            oauth_consumer_key=oauth_consumer_key,
            oauth_token=oauth_token,
            oauth_signature_method=oauth_signature_method,
            oauth_signature=oauth_signature,
            oauth_timestamp=oauth_timestamp,
            oauth_nonce=oauth_nonce,
            oauth_version=oauth_version,
            oauth_verifier=oauth_verifier,
            oauth_callback=oauth_callback,
            oauth_token_secret=oauth_token_secret,
            oauth_callback_confirmed=oauth_callback_confirmed,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def oauth_request_token_query_post_0_with_http_info(
        self,
        oauth_consumer_key: Optional[StrictStr] = None,
        oauth_token: Optional[StrictStr] = None,
        oauth_signature_method: Optional[StrictStr] = None,
        oauth_signature: Optional[StrictStr] = None,
        oauth_timestamp: Optional[StrictStr] = None,
        oauth_nonce: Optional[StrictStr] = None,
        oauth_version: Optional[StrictStr] = None,
        oauth_verifier: Optional[StrictStr] = None,
        oauth_callback: Optional[StrictStr] = None,
        oauth_token_secret: Optional[StrictStr] = None,
        oauth_callback_confirmed: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """oauth_request_token_query_post_0


        :param oauth_consumer_key:
        :type oauth_consumer_key: str
        :param oauth_token:
        :type oauth_token: str
        :param oauth_signature_method:
        :type oauth_signature_method: str
        :param oauth_signature:
        :type oauth_signature: str
        :param oauth_timestamp:
        :type oauth_timestamp: str
        :param oauth_nonce:
        :type oauth_nonce: str
        :param oauth_version:
        :type oauth_version: str
        :param oauth_verifier:
        :type oauth_verifier: str
        :param oauth_callback:
        :type oauth_callback: str
        :param oauth_token_secret:
        :type oauth_token_secret: str
        :param oauth_callback_confirmed:
        :type oauth_callback_confirmed: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._oauth_request_token_query_post_0_serialize(
            oauth_consumer_key=oauth_consumer_key,
            oauth_token=oauth_token,
            oauth_signature_method=oauth_signature_method,
            oauth_signature=oauth_signature,
            oauth_timestamp=oauth_timestamp,
            oauth_nonce=oauth_nonce,
            oauth_version=oauth_version,
            oauth_verifier=oauth_verifier,
            oauth_callback=oauth_callback,
            oauth_token_secret=oauth_token_secret,
            oauth_callback_confirmed=oauth_callback_confirmed,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def oauth_request_token_query_post_0_without_preload_content(
        self,
        oauth_consumer_key: Optional[StrictStr] = None,
        oauth_token: Optional[StrictStr] = None,
        oauth_signature_method: Optional[StrictStr] = None,
        oauth_signature: Optional[StrictStr] = None,
        oauth_timestamp: Optional[StrictStr] = None,
        oauth_nonce: Optional[StrictStr] = None,
        oauth_version: Optional[StrictStr] = None,
        oauth_verifier: Optional[StrictStr] = None,
        oauth_callback: Optional[StrictStr] = None,
        oauth_token_secret: Optional[StrictStr] = None,
        oauth_callback_confirmed: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """oauth_request_token_query_post_0


        :param oauth_consumer_key:
        :type oauth_consumer_key: str
        :param oauth_token:
        :type oauth_token: str
        :param oauth_signature_method:
        :type oauth_signature_method: str
        :param oauth_signature:
        :type oauth_signature: str
        :param oauth_timestamp:
        :type oauth_timestamp: str
        :param oauth_nonce:
        :type oauth_nonce: str
        :param oauth_version:
        :type oauth_version: str
        :param oauth_verifier:
        :type oauth_verifier: str
        :param oauth_callback:
        :type oauth_callback: str
        :param oauth_token_secret:
        :type oauth_token_secret: str
        :param oauth_callback_confirmed:
        :type oauth_callback_confirmed: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._oauth_request_token_query_post_0_serialize(
            oauth_consumer_key=oauth_consumer_key,
            oauth_token=oauth_token,
            oauth_signature_method=oauth_signature_method,
            oauth_signature=oauth_signature,
            oauth_timestamp=oauth_timestamp,
            oauth_nonce=oauth_nonce,
            oauth_version=oauth_version,
            oauth_verifier=oauth_verifier,
            oauth_callback=oauth_callback,
            oauth_token_secret=oauth_token_secret,
            oauth_callback_confirmed=oauth_callback_confirmed,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _oauth_request_token_query_post_0_serialize(
        self,
        oauth_consumer_key,
        oauth_token,
        oauth_signature_method,
        oauth_signature,
        oauth_timestamp,
        oauth_nonce,
        oauth_version,
        oauth_verifier,
        oauth_callback,
        oauth_token_secret,
        oauth_callback_confirmed,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if oauth_consumer_key is not None:
            
            _query_params.append(('oauth_consumer_key', oauth_consumer_key))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if oauth_signature_method is not None:
            
            _query_params.append(('oauth_signature_method', oauth_signature_method))
            
        if oauth_signature is not None:
            
            _query_params.append(('oauth_signature', oauth_signature))
            
        if oauth_timestamp is not None:
            
            _query_params.append(('oauth_timestamp', oauth_timestamp))
            
        if oauth_nonce is not None:
            
            _query_params.append(('oauth_nonce', oauth_nonce))
            
        if oauth_version is not None:
            
            _query_params.append(('oauth_version', oauth_version))
            
        if oauth_verifier is not None:
            
            _query_params.append(('oauth_verifier', oauth_verifier))
            
        if oauth_callback is not None:
            
            _query_params.append(('oauth_callback', oauth_callback))
            
        if oauth_token_secret is not None:
            
            _query_params.append(('oauth_token_secret', oauth_token_secret))
            
        if oauth_callback_confirmed is not None:
            
            _query_params.append(('oauth_callback_confirmed', oauth_callback_confirmed))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/oauth/request_token_query',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_oauth_access_token_0(
        self,
        oauth_consumer_key: Optional[StrictStr] = None,
        oauth_token: Optional[StrictStr] = None,
        oauth_signature_method: Optional[StrictStr] = None,
        oauth_signature: Optional[StrictStr] = None,
        oauth_timestamp: Optional[StrictStr] = None,
        oauth_nonce: Optional[StrictStr] = None,
        oauth_version: Optional[StrictStr] = None,
        oauth_verifier: Optional[StrictStr] = None,
        oauth_callback: Optional[StrictStr] = None,
        oauth_token_secret: Optional[StrictStr] = None,
        oauth_callback_confirmed: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """post_oauth_access_token_0


        :param oauth_consumer_key:
        :type oauth_consumer_key: str
        :param oauth_token:
        :type oauth_token: str
        :param oauth_signature_method:
        :type oauth_signature_method: str
        :param oauth_signature:
        :type oauth_signature: str
        :param oauth_timestamp:
        :type oauth_timestamp: str
        :param oauth_nonce:
        :type oauth_nonce: str
        :param oauth_version:
        :type oauth_version: str
        :param oauth_verifier:
        :type oauth_verifier: str
        :param oauth_callback:
        :type oauth_callback: str
        :param oauth_token_secret:
        :type oauth_token_secret: str
        :param oauth_callback_confirmed:
        :type oauth_callback_confirmed: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_oauth_access_token_0_serialize(
            oauth_consumer_key=oauth_consumer_key,
            oauth_token=oauth_token,
            oauth_signature_method=oauth_signature_method,
            oauth_signature=oauth_signature,
            oauth_timestamp=oauth_timestamp,
            oauth_nonce=oauth_nonce,
            oauth_version=oauth_version,
            oauth_verifier=oauth_verifier,
            oauth_callback=oauth_callback,
            oauth_token_secret=oauth_token_secret,
            oauth_callback_confirmed=oauth_callback_confirmed,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_oauth_access_token_0_with_http_info(
        self,
        oauth_consumer_key: Optional[StrictStr] = None,
        oauth_token: Optional[StrictStr] = None,
        oauth_signature_method: Optional[StrictStr] = None,
        oauth_signature: Optional[StrictStr] = None,
        oauth_timestamp: Optional[StrictStr] = None,
        oauth_nonce: Optional[StrictStr] = None,
        oauth_version: Optional[StrictStr] = None,
        oauth_verifier: Optional[StrictStr] = None,
        oauth_callback: Optional[StrictStr] = None,
        oauth_token_secret: Optional[StrictStr] = None,
        oauth_callback_confirmed: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """post_oauth_access_token_0


        :param oauth_consumer_key:
        :type oauth_consumer_key: str
        :param oauth_token:
        :type oauth_token: str
        :param oauth_signature_method:
        :type oauth_signature_method: str
        :param oauth_signature:
        :type oauth_signature: str
        :param oauth_timestamp:
        :type oauth_timestamp: str
        :param oauth_nonce:
        :type oauth_nonce: str
        :param oauth_version:
        :type oauth_version: str
        :param oauth_verifier:
        :type oauth_verifier: str
        :param oauth_callback:
        :type oauth_callback: str
        :param oauth_token_secret:
        :type oauth_token_secret: str
        :param oauth_callback_confirmed:
        :type oauth_callback_confirmed: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_oauth_access_token_0_serialize(
            oauth_consumer_key=oauth_consumer_key,
            oauth_token=oauth_token,
            oauth_signature_method=oauth_signature_method,
            oauth_signature=oauth_signature,
            oauth_timestamp=oauth_timestamp,
            oauth_nonce=oauth_nonce,
            oauth_version=oauth_version,
            oauth_verifier=oauth_verifier,
            oauth_callback=oauth_callback,
            oauth_token_secret=oauth_token_secret,
            oauth_callback_confirmed=oauth_callback_confirmed,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_oauth_access_token_0_without_preload_content(
        self,
        oauth_consumer_key: Optional[StrictStr] = None,
        oauth_token: Optional[StrictStr] = None,
        oauth_signature_method: Optional[StrictStr] = None,
        oauth_signature: Optional[StrictStr] = None,
        oauth_timestamp: Optional[StrictStr] = None,
        oauth_nonce: Optional[StrictStr] = None,
        oauth_version: Optional[StrictStr] = None,
        oauth_verifier: Optional[StrictStr] = None,
        oauth_callback: Optional[StrictStr] = None,
        oauth_token_secret: Optional[StrictStr] = None,
        oauth_callback_confirmed: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_oauth_access_token_0


        :param oauth_consumer_key:
        :type oauth_consumer_key: str
        :param oauth_token:
        :type oauth_token: str
        :param oauth_signature_method:
        :type oauth_signature_method: str
        :param oauth_signature:
        :type oauth_signature: str
        :param oauth_timestamp:
        :type oauth_timestamp: str
        :param oauth_nonce:
        :type oauth_nonce: str
        :param oauth_version:
        :type oauth_version: str
        :param oauth_verifier:
        :type oauth_verifier: str
        :param oauth_callback:
        :type oauth_callback: str
        :param oauth_token_secret:
        :type oauth_token_secret: str
        :param oauth_callback_confirmed:
        :type oauth_callback_confirmed: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_oauth_access_token_0_serialize(
            oauth_consumer_key=oauth_consumer_key,
            oauth_token=oauth_token,
            oauth_signature_method=oauth_signature_method,
            oauth_signature=oauth_signature,
            oauth_timestamp=oauth_timestamp,
            oauth_nonce=oauth_nonce,
            oauth_version=oauth_version,
            oauth_verifier=oauth_verifier,
            oauth_callback=oauth_callback,
            oauth_token_secret=oauth_token_secret,
            oauth_callback_confirmed=oauth_callback_confirmed,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_oauth_access_token_0_serialize(
        self,
        oauth_consumer_key,
        oauth_token,
        oauth_signature_method,
        oauth_signature,
        oauth_timestamp,
        oauth_nonce,
        oauth_version,
        oauth_verifier,
        oauth_callback,
        oauth_token_secret,
        oauth_callback_confirmed,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if oauth_consumer_key is not None:
            
            _query_params.append(('oauth_consumer_key', oauth_consumer_key))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if oauth_signature_method is not None:
            
            _query_params.append(('oauth_signature_method', oauth_signature_method))
            
        if oauth_signature is not None:
            
            _query_params.append(('oauth_signature', oauth_signature))
            
        if oauth_timestamp is not None:
            
            _query_params.append(('oauth_timestamp', oauth_timestamp))
            
        if oauth_nonce is not None:
            
            _query_params.append(('oauth_nonce', oauth_nonce))
            
        if oauth_version is not None:
            
            _query_params.append(('oauth_version', oauth_version))
            
        if oauth_verifier is not None:
            
            _query_params.append(('oauth_verifier', oauth_verifier))
            
        if oauth_callback is not None:
            
            _query_params.append(('oauth_callback', oauth_callback))
            
        if oauth_token_secret is not None:
            
            _query_params.append(('oauth_token_secret', oauth_token_secret))
            
        if oauth_callback_confirmed is not None:
            
            _query_params.append(('oauth_callback_confirmed', oauth_callback_confirmed))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/oauth/access_token',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_oauth_authorize_0(
        self,
        almighty: Optional[StrictStr] = None,
        access_organisations: Optional[StrictStr] = None,
        manage_organisations: Optional[StrictStr] = None,
        manage_organisations_services: Optional[StrictStr] = None,
        manage_organisations_applications: Optional[StrictStr] = None,
        manage_organisations_members: Optional[StrictStr] = None,
        access_organisations_bills: Optional[StrictStr] = None,
        access_organisations_credit_count: Optional[StrictStr] = None,
        access_organisations_consumption_statistics: Optional[StrictStr] = None,
        access_personal_information: Optional[StrictStr] = None,
        manage_personal_information: Optional[StrictStr] = None,
        manage_ssh_keys: Optional[StrictStr] = None,
        manage_services: Optional[StrictStr] = None,
        manage_applications: Optional[StrictStr] = None,
        access_bills: Optional[StrictStr] = None,
        access_credit_count: Optional[StrictStr] = None,
        access_consumption_statistics: Optional[StrictStr] = None,
        cookie: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """post_oauth_authorize_0


        :param almighty:
        :type almighty: str
        :param access_organisations:
        :type access_organisations: str
        :param manage_organisations:
        :type manage_organisations: str
        :param manage_organisations_services:
        :type manage_organisations_services: str
        :param manage_organisations_applications:
        :type manage_organisations_applications: str
        :param manage_organisations_members:
        :type manage_organisations_members: str
        :param access_organisations_bills:
        :type access_organisations_bills: str
        :param access_organisations_credit_count:
        :type access_organisations_credit_count: str
        :param access_organisations_consumption_statistics:
        :type access_organisations_consumption_statistics: str
        :param access_personal_information:
        :type access_personal_information: str
        :param manage_personal_information:
        :type manage_personal_information: str
        :param manage_ssh_keys:
        :type manage_ssh_keys: str
        :param manage_services:
        :type manage_services: str
        :param manage_applications:
        :type manage_applications: str
        :param access_bills:
        :type access_bills: str
        :param access_credit_count:
        :type access_credit_count: str
        :param access_consumption_statistics:
        :type access_consumption_statistics: str
        :param cookie:
        :type cookie: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_oauth_authorize_0_serialize(
            almighty=almighty,
            access_organisations=access_organisations,
            manage_organisations=manage_organisations,
            manage_organisations_services=manage_organisations_services,
            manage_organisations_applications=manage_organisations_applications,
            manage_organisations_members=manage_organisations_members,
            access_organisations_bills=access_organisations_bills,
            access_organisations_credit_count=access_organisations_credit_count,
            access_organisations_consumption_statistics=access_organisations_consumption_statistics,
            access_personal_information=access_personal_information,
            manage_personal_information=manage_personal_information,
            manage_ssh_keys=manage_ssh_keys,
            manage_services=manage_services,
            manage_applications=manage_applications,
            access_bills=access_bills,
            access_credit_count=access_credit_count,
            access_consumption_statistics=access_consumption_statistics,
            cookie=cookie,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_oauth_authorize_0_with_http_info(
        self,
        almighty: Optional[StrictStr] = None,
        access_organisations: Optional[StrictStr] = None,
        manage_organisations: Optional[StrictStr] = None,
        manage_organisations_services: Optional[StrictStr] = None,
        manage_organisations_applications: Optional[StrictStr] = None,
        manage_organisations_members: Optional[StrictStr] = None,
        access_organisations_bills: Optional[StrictStr] = None,
        access_organisations_credit_count: Optional[StrictStr] = None,
        access_organisations_consumption_statistics: Optional[StrictStr] = None,
        access_personal_information: Optional[StrictStr] = None,
        manage_personal_information: Optional[StrictStr] = None,
        manage_ssh_keys: Optional[StrictStr] = None,
        manage_services: Optional[StrictStr] = None,
        manage_applications: Optional[StrictStr] = None,
        access_bills: Optional[StrictStr] = None,
        access_credit_count: Optional[StrictStr] = None,
        access_consumption_statistics: Optional[StrictStr] = None,
        cookie: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """post_oauth_authorize_0


        :param almighty:
        :type almighty: str
        :param access_organisations:
        :type access_organisations: str
        :param manage_organisations:
        :type manage_organisations: str
        :param manage_organisations_services:
        :type manage_organisations_services: str
        :param manage_organisations_applications:
        :type manage_organisations_applications: str
        :param manage_organisations_members:
        :type manage_organisations_members: str
        :param access_organisations_bills:
        :type access_organisations_bills: str
        :param access_organisations_credit_count:
        :type access_organisations_credit_count: str
        :param access_organisations_consumption_statistics:
        :type access_organisations_consumption_statistics: str
        :param access_personal_information:
        :type access_personal_information: str
        :param manage_personal_information:
        :type manage_personal_information: str
        :param manage_ssh_keys:
        :type manage_ssh_keys: str
        :param manage_services:
        :type manage_services: str
        :param manage_applications:
        :type manage_applications: str
        :param access_bills:
        :type access_bills: str
        :param access_credit_count:
        :type access_credit_count: str
        :param access_consumption_statistics:
        :type access_consumption_statistics: str
        :param cookie:
        :type cookie: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_oauth_authorize_0_serialize(
            almighty=almighty,
            access_organisations=access_organisations,
            manage_organisations=manage_organisations,
            manage_organisations_services=manage_organisations_services,
            manage_organisations_applications=manage_organisations_applications,
            manage_organisations_members=manage_organisations_members,
            access_organisations_bills=access_organisations_bills,
            access_organisations_credit_count=access_organisations_credit_count,
            access_organisations_consumption_statistics=access_organisations_consumption_statistics,
            access_personal_information=access_personal_information,
            manage_personal_information=manage_personal_information,
            manage_ssh_keys=manage_ssh_keys,
            manage_services=manage_services,
            manage_applications=manage_applications,
            access_bills=access_bills,
            access_credit_count=access_credit_count,
            access_consumption_statistics=access_consumption_statistics,
            cookie=cookie,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_oauth_authorize_0_without_preload_content(
        self,
        almighty: Optional[StrictStr] = None,
        access_organisations: Optional[StrictStr] = None,
        manage_organisations: Optional[StrictStr] = None,
        manage_organisations_services: Optional[StrictStr] = None,
        manage_organisations_applications: Optional[StrictStr] = None,
        manage_organisations_members: Optional[StrictStr] = None,
        access_organisations_bills: Optional[StrictStr] = None,
        access_organisations_credit_count: Optional[StrictStr] = None,
        access_organisations_consumption_statistics: Optional[StrictStr] = None,
        access_personal_information: Optional[StrictStr] = None,
        manage_personal_information: Optional[StrictStr] = None,
        manage_ssh_keys: Optional[StrictStr] = None,
        manage_services: Optional[StrictStr] = None,
        manage_applications: Optional[StrictStr] = None,
        access_bills: Optional[StrictStr] = None,
        access_credit_count: Optional[StrictStr] = None,
        access_consumption_statistics: Optional[StrictStr] = None,
        cookie: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_oauth_authorize_0


        :param almighty:
        :type almighty: str
        :param access_organisations:
        :type access_organisations: str
        :param manage_organisations:
        :type manage_organisations: str
        :param manage_organisations_services:
        :type manage_organisations_services: str
        :param manage_organisations_applications:
        :type manage_organisations_applications: str
        :param manage_organisations_members:
        :type manage_organisations_members: str
        :param access_organisations_bills:
        :type access_organisations_bills: str
        :param access_organisations_credit_count:
        :type access_organisations_credit_count: str
        :param access_organisations_consumption_statistics:
        :type access_organisations_consumption_statistics: str
        :param access_personal_information:
        :type access_personal_information: str
        :param manage_personal_information:
        :type manage_personal_information: str
        :param manage_ssh_keys:
        :type manage_ssh_keys: str
        :param manage_services:
        :type manage_services: str
        :param manage_applications:
        :type manage_applications: str
        :param access_bills:
        :type access_bills: str
        :param access_credit_count:
        :type access_credit_count: str
        :param access_consumption_statistics:
        :type access_consumption_statistics: str
        :param cookie:
        :type cookie: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_oauth_authorize_0_serialize(
            almighty=almighty,
            access_organisations=access_organisations,
            manage_organisations=manage_organisations,
            manage_organisations_services=manage_organisations_services,
            manage_organisations_applications=manage_organisations_applications,
            manage_organisations_members=manage_organisations_members,
            access_organisations_bills=access_organisations_bills,
            access_organisations_credit_count=access_organisations_credit_count,
            access_organisations_consumption_statistics=access_organisations_consumption_statistics,
            access_personal_information=access_personal_information,
            manage_personal_information=manage_personal_information,
            manage_ssh_keys=manage_ssh_keys,
            manage_services=manage_services,
            manage_applications=manage_applications,
            access_bills=access_bills,
            access_credit_count=access_credit_count,
            access_consumption_statistics=access_consumption_statistics,
            cookie=cookie,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_oauth_authorize_0_serialize(
        self,
        almighty,
        access_organisations,
        manage_organisations,
        manage_organisations_services,
        manage_organisations_applications,
        manage_organisations_members,
        access_organisations_bills,
        access_organisations_credit_count,
        access_organisations_consumption_statistics,
        access_personal_information,
        manage_personal_information,
        manage_ssh_keys,
        manage_services,
        manage_applications,
        access_bills,
        access_credit_count,
        access_consumption_statistics,
        cookie,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if almighty is not None:
            
            _query_params.append(('almighty', almighty))
            
        if access_organisations is not None:
            
            _query_params.append(('access_organisations', access_organisations))
            
        if manage_organisations is not None:
            
            _query_params.append(('manage_organisations', manage_organisations))
            
        if manage_organisations_services is not None:
            
            _query_params.append(('manage_organisations_services', manage_organisations_services))
            
        if manage_organisations_applications is not None:
            
            _query_params.append(('manage_organisations_applications', manage_organisations_applications))
            
        if manage_organisations_members is not None:
            
            _query_params.append(('manage_organisations_members', manage_organisations_members))
            
        if access_organisations_bills is not None:
            
            _query_params.append(('access_organisations_bills', access_organisations_bills))
            
        if access_organisations_credit_count is not None:
            
            _query_params.append(('access_organisations_credit_count', access_organisations_credit_count))
            
        if access_organisations_consumption_statistics is not None:
            
            _query_params.append(('access_organisations_consumption_statistics', access_organisations_consumption_statistics))
            
        if access_personal_information is not None:
            
            _query_params.append(('access_personal_information', access_personal_information))
            
        if manage_personal_information is not None:
            
            _query_params.append(('manage_personal_information', manage_personal_information))
            
        if manage_ssh_keys is not None:
            
            _query_params.append(('manage_ssh_keys', manage_ssh_keys))
            
        if manage_services is not None:
            
            _query_params.append(('manage_services', manage_services))
            
        if manage_applications is not None:
            
            _query_params.append(('manage_applications', manage_applications))
            
        if access_bills is not None:
            
            _query_params.append(('access_bills', access_bills))
            
        if access_credit_count is not None:
            
            _query_params.append(('access_credit_count', access_credit_count))
            
        if access_consumption_statistics is not None:
            
            _query_params.append(('access_consumption_statistics', access_consumption_statistics))
            
        # process the header parameters
        if cookie is not None:
            _header_params['Cookie'] = cookie
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/oauth/authorize',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_oauth_request_token_0(
        self,
        oauth_consumer_key: Optional[StrictStr] = None,
        oauth_token: Optional[StrictStr] = None,
        oauth_signature_method: Optional[StrictStr] = None,
        oauth_signature: Optional[StrictStr] = None,
        oauth_timestamp: Optional[StrictStr] = None,
        oauth_nonce: Optional[StrictStr] = None,
        oauth_version: Optional[StrictStr] = None,
        oauth_verifier: Optional[StrictStr] = None,
        oauth_callback: Optional[StrictStr] = None,
        oauth_token_secret: Optional[StrictStr] = None,
        oauth_callback_confirmed: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """post_oauth_request_token_0


        :param oauth_consumer_key:
        :type oauth_consumer_key: str
        :param oauth_token:
        :type oauth_token: str
        :param oauth_signature_method:
        :type oauth_signature_method: str
        :param oauth_signature:
        :type oauth_signature: str
        :param oauth_timestamp:
        :type oauth_timestamp: str
        :param oauth_nonce:
        :type oauth_nonce: str
        :param oauth_version:
        :type oauth_version: str
        :param oauth_verifier:
        :type oauth_verifier: str
        :param oauth_callback:
        :type oauth_callback: str
        :param oauth_token_secret:
        :type oauth_token_secret: str
        :param oauth_callback_confirmed:
        :type oauth_callback_confirmed: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_oauth_request_token_0_serialize(
            oauth_consumer_key=oauth_consumer_key,
            oauth_token=oauth_token,
            oauth_signature_method=oauth_signature_method,
            oauth_signature=oauth_signature,
            oauth_timestamp=oauth_timestamp,
            oauth_nonce=oauth_nonce,
            oauth_version=oauth_version,
            oauth_verifier=oauth_verifier,
            oauth_callback=oauth_callback,
            oauth_token_secret=oauth_token_secret,
            oauth_callback_confirmed=oauth_callback_confirmed,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_oauth_request_token_0_with_http_info(
        self,
        oauth_consumer_key: Optional[StrictStr] = None,
        oauth_token: Optional[StrictStr] = None,
        oauth_signature_method: Optional[StrictStr] = None,
        oauth_signature: Optional[StrictStr] = None,
        oauth_timestamp: Optional[StrictStr] = None,
        oauth_nonce: Optional[StrictStr] = None,
        oauth_version: Optional[StrictStr] = None,
        oauth_verifier: Optional[StrictStr] = None,
        oauth_callback: Optional[StrictStr] = None,
        oauth_token_secret: Optional[StrictStr] = None,
        oauth_callback_confirmed: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """post_oauth_request_token_0


        :param oauth_consumer_key:
        :type oauth_consumer_key: str
        :param oauth_token:
        :type oauth_token: str
        :param oauth_signature_method:
        :type oauth_signature_method: str
        :param oauth_signature:
        :type oauth_signature: str
        :param oauth_timestamp:
        :type oauth_timestamp: str
        :param oauth_nonce:
        :type oauth_nonce: str
        :param oauth_version:
        :type oauth_version: str
        :param oauth_verifier:
        :type oauth_verifier: str
        :param oauth_callback:
        :type oauth_callback: str
        :param oauth_token_secret:
        :type oauth_token_secret: str
        :param oauth_callback_confirmed:
        :type oauth_callback_confirmed: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_oauth_request_token_0_serialize(
            oauth_consumer_key=oauth_consumer_key,
            oauth_token=oauth_token,
            oauth_signature_method=oauth_signature_method,
            oauth_signature=oauth_signature,
            oauth_timestamp=oauth_timestamp,
            oauth_nonce=oauth_nonce,
            oauth_version=oauth_version,
            oauth_verifier=oauth_verifier,
            oauth_callback=oauth_callback,
            oauth_token_secret=oauth_token_secret,
            oauth_callback_confirmed=oauth_callback_confirmed,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_oauth_request_token_0_without_preload_content(
        self,
        oauth_consumer_key: Optional[StrictStr] = None,
        oauth_token: Optional[StrictStr] = None,
        oauth_signature_method: Optional[StrictStr] = None,
        oauth_signature: Optional[StrictStr] = None,
        oauth_timestamp: Optional[StrictStr] = None,
        oauth_nonce: Optional[StrictStr] = None,
        oauth_version: Optional[StrictStr] = None,
        oauth_verifier: Optional[StrictStr] = None,
        oauth_callback: Optional[StrictStr] = None,
        oauth_token_secret: Optional[StrictStr] = None,
        oauth_callback_confirmed: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_oauth_request_token_0


        :param oauth_consumer_key:
        :type oauth_consumer_key: str
        :param oauth_token:
        :type oauth_token: str
        :param oauth_signature_method:
        :type oauth_signature_method: str
        :param oauth_signature:
        :type oauth_signature: str
        :param oauth_timestamp:
        :type oauth_timestamp: str
        :param oauth_nonce:
        :type oauth_nonce: str
        :param oauth_version:
        :type oauth_version: str
        :param oauth_verifier:
        :type oauth_verifier: str
        :param oauth_callback:
        :type oauth_callback: str
        :param oauth_token_secret:
        :type oauth_token_secret: str
        :param oauth_callback_confirmed:
        :type oauth_callback_confirmed: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_oauth_request_token_0_serialize(
            oauth_consumer_key=oauth_consumer_key,
            oauth_token=oauth_token,
            oauth_signature_method=oauth_signature_method,
            oauth_signature=oauth_signature,
            oauth_timestamp=oauth_timestamp,
            oauth_nonce=oauth_nonce,
            oauth_version=oauth_version,
            oauth_verifier=oauth_verifier,
            oauth_callback=oauth_callback,
            oauth_token_secret=oauth_token_secret,
            oauth_callback_confirmed=oauth_callback_confirmed,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_oauth_request_token_0_serialize(
        self,
        oauth_consumer_key,
        oauth_token,
        oauth_signature_method,
        oauth_signature,
        oauth_timestamp,
        oauth_nonce,
        oauth_version,
        oauth_verifier,
        oauth_callback,
        oauth_token_secret,
        oauth_callback_confirmed,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if oauth_consumer_key is not None:
            
            _query_params.append(('oauth_consumer_key', oauth_consumer_key))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if oauth_signature_method is not None:
            
            _query_params.append(('oauth_signature_method', oauth_signature_method))
            
        if oauth_signature is not None:
            
            _query_params.append(('oauth_signature', oauth_signature))
            
        if oauth_timestamp is not None:
            
            _query_params.append(('oauth_timestamp', oauth_timestamp))
            
        if oauth_nonce is not None:
            
            _query_params.append(('oauth_nonce', oauth_nonce))
            
        if oauth_version is not None:
            
            _query_params.append(('oauth_version', oauth_version))
            
        if oauth_verifier is not None:
            
            _query_params.append(('oauth_verifier', oauth_verifier))
            
        if oauth_callback is not None:
            
            _query_params.append(('oauth_callback', oauth_callback))
            
        if oauth_token_secret is not None:
            
            _query_params.append(('oauth_token_secret', oauth_token_secret))
            
        if oauth_callback_confirmed is not None:
            
            _query_params.append(('oauth_callback_confirmed', oauth_callback_confirmed))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/oauth/request_token',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



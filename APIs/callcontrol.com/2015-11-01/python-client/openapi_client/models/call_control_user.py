# coding: utf-8

"""
    Call Control API

    API for blocking phone calls with Call Control. Data is from crowdsourced community blacklist from 12+ million users and government agencies (FTC, FCC, IRS) Try with api_key 'demo', hit explore above, and then try phone numbers 18008472911,13157244022,17275567300,18008276655,12061231234.

    The version of the OpenAPI document: 2015-11-01
    Contact: info@kedlin.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.quiet_hour import QuietHour
from typing import Optional, Set
from typing_extensions import Self

class CallControlUser(BaseModel):
    """
    CallControlUser
    """ # noqa: E501
    age: Optional[StrictInt] = Field(default=None, alias="Age")
    black_list: Optional[List[StrictStr]] = Field(default=None, alias="BlackList")
    block_behavior: Optional[StrictStr] = Field(default=None, alias="BlockBehavior")
    break_through_qh_with_multiple_calls: Optional[StrictBool] = Field(default=None, alias="BreakThroughQhWithMultipleCalls")
    email: Optional[StrictStr] = Field(default=None, alias="Email")
    first_name: Optional[StrictStr] = Field(default=None, alias="FirstName")
    gender: Optional[StrictStr] = Field(default=None, alias="Gender")
    last_name: Optional[StrictStr] = Field(default=None, alias="LastName")
    middle_name: Optional[StrictStr] = Field(default=None, alias="MiddleName")
    phone_numbe_region: Optional[StrictStr] = Field(default=None, alias="PhoneNumbeRegion")
    phone_number: Optional[StrictStr] = Field(default=None, alias="PhoneNumber")
    quiet_hour_list: Optional[List[QuietHour]] = Field(default=None, alias="QuietHourList")
    salutation: Optional[StrictStr] = Field(default=None, alias="Salutation")
    suffix: Optional[StrictStr] = Field(default=None, alias="Suffix")
    use_community_blacklist: Optional[StrictBool] = Field(default=None, alias="UseCommunityBlacklist")
    white_list: Optional[List[StrictStr]] = Field(default=None, alias="WhiteList")
    white_list_breaks_qh: Optional[StrictBool] = Field(default=None, alias="WhiteListBreaksQh")
    __properties: ClassVar[List[str]] = ["Age", "BlackList", "BlockBehavior", "BreakThroughQhWithMultipleCalls", "Email", "FirstName", "Gender", "LastName", "MiddleName", "PhoneNumbeRegion", "PhoneNumber", "QuietHourList", "Salutation", "Suffix", "UseCommunityBlacklist", "WhiteList", "WhiteListBreaksQh"]

    @field_validator('block_behavior')
    def block_behavior_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['allow', 'voiceMail', 'block']):
            raise ValueError("must be one of enum values ('allow', 'voiceMail', 'block')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CallControlUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in quiet_hour_list (list)
        _items = []
        if self.quiet_hour_list:
            for _item_quiet_hour_list in self.quiet_hour_list:
                if _item_quiet_hour_list:
                    _items.append(_item_quiet_hour_list.to_dict())
            _dict['QuietHourList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CallControlUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Age": obj.get("Age"),
            "BlackList": obj.get("BlackList"),
            "BlockBehavior": obj.get("BlockBehavior"),
            "BreakThroughQhWithMultipleCalls": obj.get("BreakThroughQhWithMultipleCalls"),
            "Email": obj.get("Email"),
            "FirstName": obj.get("FirstName"),
            "Gender": obj.get("Gender"),
            "LastName": obj.get("LastName"),
            "MiddleName": obj.get("MiddleName"),
            "PhoneNumbeRegion": obj.get("PhoneNumbeRegion"),
            "PhoneNumber": obj.get("PhoneNumber"),
            "QuietHourList": [QuietHour.from_dict(_item) for _item in obj["QuietHourList"]] if obj.get("QuietHourList") is not None else None,
            "Salutation": obj.get("Salutation"),
            "Suffix": obj.get("Suffix"),
            "UseCommunityBlacklist": obj.get("UseCommunityBlacklist"),
            "WhiteList": obj.get("WhiteList"),
            "WhiteListBreaksQh": obj.get("WhiteListBreaksQh")
        })
        return _obj



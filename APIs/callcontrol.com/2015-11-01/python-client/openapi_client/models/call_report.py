# coding: utf-8

"""
    Call Control API

    API for blocking phone calls with Call Control. Data is from crowdsourced community blacklist from 12+ million users and government agencies (FTC, FCC, IRS) Try with api_key 'demo', hit explore above, and then try phone numbers 18008472911,13157244022,17275567300,18008276655,12061231234.

    The version of the OpenAPI document: 2015-11-01
    Contact: info@kedlin.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CallReport(BaseModel):
    """
    Call Report  PhoneNumber,   Caller name(optional),   Call category(optional),   Comment or tags(free text) (optional),   Unwanted call  - yes/no(optional),
    """ # noqa: E501
    call_time: Optional[datetime] = Field(default=None, alias="CallTime")
    caller_type: Optional[StrictStr] = Field(default=None, alias="CallerType")
    comment: Optional[StrictStr] = Field(default=None, alias="Comment")
    ip_address: Optional[StrictStr] = Field(default=None, alias="IpAddress")
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Latitude")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Longitude")
    phone_number: Optional[StrictStr] = Field(default=None, alias="PhoneNumber")
    reported_caller_id: Optional[StrictStr] = Field(default=None, alias="ReportedCallerId")
    reported_caller_name: Optional[StrictStr] = Field(default=None, alias="ReportedCallerName")
    reporter: Optional[StrictStr] = Field(default=None, alias="Reporter")
    unwanted_call: Optional[StrictBool] = Field(default=None, alias="UnwantedCall")
    __properties: ClassVar[List[str]] = ["CallTime", "CallerType", "Comment", "IpAddress", "Latitude", "Longitude", "PhoneNumber", "ReportedCallerId", "ReportedCallerName", "Reporter", "UnwantedCall"]

    @field_validator('caller_type')
    def caller_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unknown', 'Telemarketing', 'Collection_Agency', 'Political', 'Surveyor', 'Prank_Call', 'Fund_Raiser', 'Other_Commercial', 'Scam', 'VOIP', 'Business', 'Reminder_Notification_Call', 'Junk_Fax', 'Fax_Machine', 'Spam_Text', 'RoboCall', 'NotSpam', 'Callback']):
            raise ValueError("must be one of enum values ('Unknown', 'Telemarketing', 'Collection_Agency', 'Political', 'Surveyor', 'Prank_Call', 'Fund_Raiser', 'Other_Commercial', 'Scam', 'VOIP', 'Business', 'Reminder_Notification_Call', 'Junk_Fax', 'Fax_Machine', 'Spam_Text', 'RoboCall', 'NotSpam', 'Callback')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CallReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CallReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CallTime": obj.get("CallTime"),
            "CallerType": obj.get("CallerType"),
            "Comment": obj.get("Comment"),
            "IpAddress": obj.get("IpAddress"),
            "Latitude": obj.get("Latitude"),
            "Longitude": obj.get("Longitude"),
            "PhoneNumber": obj.get("PhoneNumber"),
            "ReportedCallerId": obj.get("ReportedCallerId"),
            "ReportedCallerName": obj.get("ReportedCallerName"),
            "Reporter": obj.get("Reporter"),
            "UnwantedCall": obj.get("UnwantedCall")
        })
        return _obj



# coding: utf-8

"""
    Call Control API

    API for blocking phone calls with Call Control. Data is from crowdsourced community blacklist from 12+ million users and government agencies (FTC, FCC, IRS) Try with api_key 'demo', hit explore above, and then try phone numbers 18008472911,13157244022,17275567300,18008276655,12061231234.

    The version of the OpenAPI document: 2015-11-01
    Contact: info@kedlin.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Complaints(BaseModel):
    """
    Free service (with registration) which serves Government Do Not Call data via API   Search via phone number returns available data, reported name, total complaints
    """ # noqa: E501
    complaints_by_entity: Optional[Dict[str, StrictInt]] = Field(default=None, alias="ComplaintsByEntity")
    last_complaint_date: Optional[datetime] = Field(default=None, alias="LastComplaintDate")
    reported_caller_name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Reported Caller Name", alias="ReportedCallerName")
    tags: Optional[List[StrictStr]] = Field(default=None, alias="Tags")
    total_number_of_complaints: Optional[StrictInt] = Field(default=None, alias="TotalNumberOfComplaints")
    __properties: ClassVar[List[str]] = ["ComplaintsByEntity", "LastComplaintDate", "ReportedCallerName", "Tags", "TotalNumberOfComplaints"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Complaints from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Complaints from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ComplaintsByEntity": obj.get("ComplaintsByEntity"),
            "LastComplaintDate": obj.get("LastComplaintDate"),
            "ReportedCallerName": obj.get("ReportedCallerName"),
            "Tags": obj.get("Tags"),
            "TotalNumberOfComplaints": obj.get("TotalNumberOfComplaints")
        })
        return _obj



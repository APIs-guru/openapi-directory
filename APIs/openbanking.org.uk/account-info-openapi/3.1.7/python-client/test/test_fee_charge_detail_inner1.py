# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.fee_charge_detail_inner1 import FeeChargeDetailInner1

class TestFeeChargeDetailInner1(unittest.TestCase):
    """FeeChargeDetailInner1 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FeeChargeDetailInner1:
        """Test FeeChargeDetailInner1
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FeeChargeDetailInner1`
        """
        model = FeeChargeDetailInner1()
        if include_optional:
            return FeeChargeDetailInner1(
                application_frequency = 'AccountClosing',
                calculation_frequency = 'AccountClosing',
                fee_amount = '-80728880015.0217',
                fee_applicable_range = openapi_client.models.fee_applicable_range.FeeApplicableRange(
                    maximum_amount = '-80728880015.0217', 
                    maximum_rate = '-807', 
                    minimum_amount = '-80728880015.0217', 
                    minimum_rate = '-807', ),
                fee_category = 'Other',
                fee_charge_cap = [
                    openapi_client.models.fee_charge_cap_inner_1.FeeChargeCap_inner_1(
                        capping_period = 'AcademicTerm', 
                        fee_cap_amount = '-80728880015.0217', 
                        fee_cap_occurrence = 1.337, 
                        fee_type = [
                            'ServiceCAccountFee'
                            ], 
                        min_max_type = 'Minimum', 
                        notes = [
                            '0'
                            ], 
                        other_fee_type = [
                            openapi_client.models.other_fee_type_inner.OtherFeeType_inner(
                                code = '', 
                                description = '0', 
                                name = '0', )
                            ], )
                    ],
                fee_rate = '-807',
                fee_rate_type = 'LinkedBaseRate',
                fee_type = 'ServiceCAccountFee',
                notes = [
                    '0'
                    ],
                other_application_frequency = openapi_client.models.other_application_frequency.OtherApplicationFrequency(
                    code = '', 
                    description = '0', 
                    name = '0', ),
                other_calculation_frequency = openapi_client.models.other_calculation_frequency.OtherCalculationFrequency(
                    code = '', 
                    description = '0', 
                    name = '0', ),
                other_fee_category_type = openapi_client.models.other_fee_category_type.OtherFeeCategoryType(
                    code = '', 
                    description = '0', 
                    name = '0', ),
                other_fee_rate_type = openapi_client.models.other_fee_rate_type.OtherFeeRateType(
                    code = '', 
                    description = '0', 
                    name = '0', ),
                other_fee_type = openapi_client.models.other_fee_type.OtherFeeType(
                    code = '', 
                    description = '0', 
                    fee_category = 'Other', 
                    name = '0', )
            )
        else:
            return FeeChargeDetailInner1(
                application_frequency = 'AccountClosing',
                fee_category = 'Other',
                fee_type = 'ServiceCAccountFee',
        )
        """

    def testFeeChargeDetailInner1(self):
        """Test FeeChargeDetailInner1"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

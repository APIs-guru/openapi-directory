# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.obpca_data1 import OBPCAData1

class TestOBPCAData1(unittest.TestCase):
    """OBPCAData1 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OBPCAData1:
        """Test OBPCAData1
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OBPCAData1`
        """
        model = OBPCAData1()
        if include_optional:
            return OBPCAData1(
                credit_interest = openapi_client.models.credit_interest.CreditInterest(
                    tier_band_set = [
                        openapi_client.models.tier_band_set_inner_1.TierBandSet_inner_1(
                            calculation_method = 'Compound', 
                            destination = 'PayAway', 
                            notes = [
                                '0'
                                ], 
                            tier_band = [
                                openapi_client.models.tier_band_inner_1.TierBand_inner_1(
                                    aer = '-807', 
                                    application_frequency = 'PerAcademicTerm', 
                                    bank_interest_rate = '-807', 
                                    bank_interest_rate_type = 'LinkedBaseRate', 
                                    calculation_frequency = 'PerAcademicTerm', 
                                    deposit_interest_applied_coverage = 'Tiered', 
                                    fixed_variable_interest_rate_type = 'Fixed', 
                                    identification = '0', 
                                    other_application_frequency = openapi_client.models.other_application_frequency.OtherApplicationFrequency(
                                        code = '', 
                                        description = '0', 
                                        name = '0', ), 
                                    other_bank_interest_type = openapi_client.models.other_bank_interest_type.OtherBankInterestType(
                                        code = '', 
                                        description = '0', 
                                        name = '0', ), 
                                    other_calculation_frequency = openapi_client.models.other_calculation_frequency.OtherCalculationFrequency(
                                        code = '', 
                                        description = '0', 
                                        name = '0', ), 
                                    tier_value_maximum = '-80728880015.0217', 
                                    tier_value_minimum = '-80728880015.0217', )
                                ], 
                            tier_band_method = 'Tiered', )
                        ], ),
                other_fees_charges = openapi_client.models.other_fees_charges.OtherFeesCharges(
                    fee_charge_cap = [
                        openapi_client.models.fee_charge_cap_inner_1.FeeChargeCap_inner_1(
                            capping_period = 'AcademicTerm', 
                            fee_cap_amount = '-80728880015.0217', 
                            fee_cap_occurrence = 1.337, 
                            fee_type = [
                                'ServiceCAccountFee'
                                ], 
                            min_max_type = 'Minimum', 
                            notes = [
                                '0'
                                ], 
                            other_fee_type = [
                                openapi_client.models.other_fee_type_inner.OtherFeeType_inner(
                                    code = '', 
                                    description = '0', 
                                    name = '0', )
                                ], )
                        ], 
                    fee_charge_detail = [
                        openapi_client.models.fee_charge_detail_inner_1.FeeChargeDetail_inner_1(
                            application_frequency = 'AccountClosing', 
                            calculation_frequency = 'AccountClosing', 
                            fee_amount = '-80728880015.0217', 
                            fee_applicable_range = openapi_client.models.fee_applicable_range.FeeApplicableRange(
                                maximum_amount = '-80728880015.0217', 
                                maximum_rate = '-807', 
                                minimum_amount = '-80728880015.0217', 
                                minimum_rate = '-807', ), 
                            fee_category = 'Other', 
                            fee_rate = '-807', 
                            fee_rate_type = 'LinkedBaseRate', 
                            fee_type = 'ServiceCAccountFee', 
                            other_application_frequency = openapi_client.models.other_application_frequency.OtherApplicationFrequency(
                                code = '', 
                                description = '0', 
                                name = '0', ), 
                            other_calculation_frequency = openapi_client.models.other_calculation_frequency.OtherCalculationFrequency(
                                code = '', 
                                description = '0', 
                                name = '0', ), 
                            other_fee_category_type = openapi_client.models.other_fee_category_type.OtherFeeCategoryType(
                                code = '', 
                                description = '0', 
                                name = '0', ), 
                            other_fee_rate_type = openapi_client.models.other_fee_rate_type.OtherFeeRateType(
                                code = '', 
                                description = '0', 
                                name = '0', ), )
                        ], ),
                overdraft = openapi_client.models.overdraft.Overdraft(
                    notes = [
                        '0'
                        ], 
                    overdraft_tier_band_set = [
                        openapi_client.models.overdraft_tier_band_set_inner_1.OverdraftTierBandSet_inner_1(
                            authorised_indicator = True, 
                            buffer_amount = '-80728880015.0217', 
                            identification = '0', 
                            overdraft_fees_charges = [
                                openapi_client.models.overdraft_fees_charges_inner_2.OverdraftFeesCharges_inner_2(
                                    overdraft_fee_charge_cap = [
                                        openapi_client.models.overdraft_fee_charge_cap_inner_1.OverdraftFeeChargeCap_inner_1(
                                            capping_period = 'AcademicTerm', 
                                            fee_cap_amount = '-80728880015.0217', 
                                            fee_cap_occurrence = 1.337, 
                                            fee_type = [
                                                'ArrangedOverdraft'
                                                ], 
                                            min_max_type = 'Minimum', 
                                            other_fee_type = [
                                                openapi_client.models.other_fee_type_inner.OtherFeeType_inner(
                                                    code = '', 
                                                    description = '0', 
                                                    name = '0', )
                                                ], 
                                            overdraft_control_indicator = True, )
                                        ], 
                                    overdraft_fee_charge_detail = [
                                        openapi_client.models.overdraft_fee_charge_detail_inner_1.OverdraftFeeChargeDetail_inner_1(
                                            application_frequency = 'AccountClosing', 
                                            calculation_frequency = 'AccountClosing', 
                                            fee_amount = '-80728880015.0217', 
                                            fee_rate = '-807', 
                                            fee_rate_type = 'LinkedBaseRate', 
                                            fee_type = 'ArrangedOverdraft', 
                                            incremental_borrowing_amount = '-80728880015.0217', 
                                            other_application_frequency = openapi_client.models.other_application_frequency.OtherApplicationFrequency(
                                                code = '', 
                                                description = '0', 
                                                name = '0', ), 
                                            other_calculation_frequency = openapi_client.models.other_calculation_frequency.OtherCalculationFrequency(
                                                code = '', 
                                                description = '0', 
                                                name = '0', ), 
                                            other_fee_rate_type = openapi_client.models.other_fee_rate_type.OtherFeeRateType(
                                                code = '', 
                                                description = '0', 
                                                name = '0', ), 
                                            overdraft_control_indicator = True, )
                                        ], )
                                ], 
                            overdraft_tier_band = [
                                openapi_client.models.overdraft_tier_band_inner_1.OverdraftTierBand_inner_1(
                                    bank_guaranteed_indicator = True, 
                                    ear = '-807', 
                                    identification = '0', 
                                    overdraft_interest_charging_coverage = 'Tiered', 
                                    representative_apr = '-807', 
                                    tier_value_max = '-80728880015.0217', 
                                    tier_value_min = '-80728880015.0217', )
                                ], 
                            overdraft_type = 'Committed', 
                            tier_band_method = 'Tiered', )
                        ], ),
                product_details = openapi_client.models.product_details.ProductDetails(
                    monthly_maximum_charge = '-80728880015.0217', 
                    notes = [
                        '0'
                        ], 
                    segment = [
                        'Basic'
                        ], )
            )
        else:
            return OBPCAData1(
        )
        """

    def testOBPCAData1(self):
        """Test OBPCAData1"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

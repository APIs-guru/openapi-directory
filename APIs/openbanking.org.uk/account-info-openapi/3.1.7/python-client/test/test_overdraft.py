# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.overdraft import Overdraft

class TestOverdraft(unittest.TestCase):
    """Overdraft unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Overdraft:
        """Test Overdraft
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Overdraft`
        """
        model = Overdraft()
        if include_optional:
            return Overdraft(
                notes = [
                    '0'
                    ],
                overdraft_tier_band_set = [
                    openapi_client.models.overdraft_tier_band_set_inner.OverdraftTierBandSet_inner(
                        authorised_indicator = True, 
                        buffer_amount = '-80728880015.0217', 
                        identification = '0', 
                        notes = [
                            '0'
                            ], 
                        overdraft_fees_charges = [
                            openapi_client.models.overdraft_fees_charges_inner.OverdraftFeesCharges_inner(
                                overdraft_fee_charge_cap = [
                                    openapi_client.models.overdraft_fee_charge_cap_inner.OverdraftFeeChargeCap_inner(
                                        capping_period = 'Day', 
                                        fee_cap_amount = '-80728880015.0217', 
                                        fee_cap_occurrence = 1.337, 
                                        fee_type = [
                                            'ArrangedOverdraft'
                                            ], 
                                        min_max_type = 'Minimum', 
                                        other_fee_type = [
                                            openapi_client.models.other_fee_type_inner.OtherFeeType_inner(
                                                code = '', 
                                                description = '0', 
                                                name = '0', )
                                            ], )
                                    ], 
                                overdraft_fee_charge_detail = [
                                    openapi_client.models.overdraft_fee_charge_detail_inner.OverdraftFeeChargeDetail_inner(
                                        application_frequency = 'OnClosing', 
                                        calculation_frequency = 'OnClosing', 
                                        fee_amount = '-80728880015.0217', 
                                        fee_rate = '-807', 
                                        fee_rate_type = 'Gross', 
                                        fee_type = 'ArrangedOverdraft', 
                                        incremental_borrowing_amount = '-80728880015.0217', 
                                        negotiable_indicator = True, 
                                        other_application_frequency = openapi_client.models.other_application_frequency.OtherApplicationFrequency(
                                            code = '', 
                                            description = '0', 
                                            name = '0', ), 
                                        other_calculation_frequency = openapi_client.models.other_calculation_frequency.OtherCalculationFrequency(
                                            code = '', 
                                            description = '0', 
                                            name = '0', ), 
                                        other_fee_rate_type = openapi_client.models.other_fee_rate_type.OtherFeeRateType(
                                            code = '', 
                                            description = '0', 
                                            name = '0', ), 
                                        overdraft_control_indicator = True, )
                                    ], )
                            ], 
                        overdraft_tier_band = [
                            openapi_client.models.overdraft_tier_band_inner.OverdraftTierBand_inner(
                                agreement_length_max = 1.337, 
                                agreement_length_min = 1.337, 
                                agreement_period = 'Day', 
                                bank_guaranteed_indicator = True, 
                                ear = '-807', 
                                identification = '0', 
                                overdraft_interest_charging_coverage = 'Banded', 
                                representative_apr = '-807', 
                                tier_value_max = '-80728880015.0217', 
                                tier_value_min = '-80728880015.0217', )
                            ], 
                        overdraft_type = 'Committed', 
                        tier_band_method = 'Banded', )
                    ]
            )
        else:
            return Overdraft(
                overdraft_tier_band_set = [
                    openapi_client.models.overdraft_tier_band_set_inner.OverdraftTierBandSet_inner(
                        authorised_indicator = True, 
                        buffer_amount = '-80728880015.0217', 
                        identification = '0', 
                        notes = [
                            '0'
                            ], 
                        overdraft_fees_charges = [
                            openapi_client.models.overdraft_fees_charges_inner.OverdraftFeesCharges_inner(
                                overdraft_fee_charge_cap = [
                                    openapi_client.models.overdraft_fee_charge_cap_inner.OverdraftFeeChargeCap_inner(
                                        capping_period = 'Day', 
                                        fee_cap_amount = '-80728880015.0217', 
                                        fee_cap_occurrence = 1.337, 
                                        fee_type = [
                                            'ArrangedOverdraft'
                                            ], 
                                        min_max_type = 'Minimum', 
                                        other_fee_type = [
                                            openapi_client.models.other_fee_type_inner.OtherFeeType_inner(
                                                code = '', 
                                                description = '0', 
                                                name = '0', )
                                            ], )
                                    ], 
                                overdraft_fee_charge_detail = [
                                    openapi_client.models.overdraft_fee_charge_detail_inner.OverdraftFeeChargeDetail_inner(
                                        application_frequency = 'OnClosing', 
                                        calculation_frequency = 'OnClosing', 
                                        fee_amount = '-80728880015.0217', 
                                        fee_rate = '-807', 
                                        fee_rate_type = 'Gross', 
                                        fee_type = 'ArrangedOverdraft', 
                                        incremental_borrowing_amount = '-80728880015.0217', 
                                        negotiable_indicator = True, 
                                        other_application_frequency = openapi_client.models.other_application_frequency.OtherApplicationFrequency(
                                            code = '', 
                                            description = '0', 
                                            name = '0', ), 
                                        other_calculation_frequency = openapi_client.models.other_calculation_frequency.OtherCalculationFrequency(
                                            code = '', 
                                            description = '0', 
                                            name = '0', ), 
                                        other_fee_rate_type = openapi_client.models.other_fee_rate_type.OtherFeeRateType(
                                            code = '', 
                                            description = '0', 
                                            name = '0', ), 
                                        overdraft_control_indicator = True, )
                                    ], )
                            ], 
                        overdraft_tier_band = [
                            openapi_client.models.overdraft_tier_band_inner.OverdraftTierBand_inner(
                                agreement_length_max = 1.337, 
                                agreement_length_min = 1.337, 
                                agreement_period = 'Day', 
                                bank_guaranteed_indicator = True, 
                                ear = '-807', 
                                identification = '0', 
                                overdraft_interest_charging_coverage = 'Banded', 
                                representative_apr = '-807', 
                                tier_value_max = '-80728880015.0217', 
                                tier_value_min = '-80728880015.0217', )
                            ], 
                        overdraft_type = 'Committed', 
                        tier_band_method = 'Banded', )
                    ],
        )
        """

    def testOverdraft(self):
        """Test Overdraft"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.ob_read_offer1 import OBReadOffer1

class TestOBReadOffer1(unittest.TestCase):
    """OBReadOffer1 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OBReadOffer1:
        """Test OBReadOffer1
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OBReadOffer1`
        """
        model = OBReadOffer1()
        if include_optional:
            return OBReadOffer1(
                data = openapi_client.models.ob_read_offer1_data.OBReadOffer1_Data(
                    offer = [
                        openapi_client.models.ob_read_offer1_data_offer_inner.OBReadOffer1_Data_Offer_inner(
                            account_id = '0', 
                            amount = openapi_client.models.ob_read_offer1_data_offer_inner_amount.OBReadOffer1_Data_Offer_inner_Amount(
                                amount = '80728.8001', 
                                currency = 'AEI', ), 
                            description = '0', 
                            end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            fee = openapi_client.models.ob_read_offer1_data_offer_inner_fee.OBReadOffer1_Data_Offer_inner_Fee(
                                amount = '80728.8001', 
                                currency = 'AEI', ), 
                            offer_id = '0', 
                            offer_type = 'BalanceTransfer', 
                            rate = '-807', 
                            start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            term = '0', 
                            url = '0', 
                            value = 56, )
                        ], ),
                links = openapi_client.models.links.Links(
                    first = '', 
                    last = '', 
                    next = '', 
                    prev = '', 
                    self = '', ),
                meta = openapi_client.models.meta_data.MetaData(
                    first_available_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_available_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    total_pages = 56, )
            )
        else:
            return OBReadOffer1(
                data = openapi_client.models.ob_read_offer1_data.OBReadOffer1_Data(
                    offer = [
                        openapi_client.models.ob_read_offer1_data_offer_inner.OBReadOffer1_Data_Offer_inner(
                            account_id = '0', 
                            amount = openapi_client.models.ob_read_offer1_data_offer_inner_amount.OBReadOffer1_Data_Offer_inner_Amount(
                                amount = '80728.8001', 
                                currency = 'AEI', ), 
                            description = '0', 
                            end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            fee = openapi_client.models.ob_read_offer1_data_offer_inner_fee.OBReadOffer1_Data_Offer_inner_Fee(
                                amount = '80728.8001', 
                                currency = 'AEI', ), 
                            offer_id = '0', 
                            offer_type = 'BalanceTransfer', 
                            rate = '-807', 
                            start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            term = '0', 
                            url = '0', 
                            value = 56, )
                        ], ),
        )
        """

    def testOBReadOffer1(self):
        """Test OBReadOffer1"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

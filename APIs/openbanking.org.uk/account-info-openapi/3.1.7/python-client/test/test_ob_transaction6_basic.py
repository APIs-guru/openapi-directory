# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.ob_transaction6_basic import OBTransaction6Basic

class TestOBTransaction6Basic(unittest.TestCase):
    """OBTransaction6Basic unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OBTransaction6Basic:
        """Test OBTransaction6Basic
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OBTransaction6Basic`
        """
        model = OBTransaction6Basic()
        if include_optional:
            return OBTransaction6Basic(
                account_id = '0',
                address_line = '0',
                amount = openapi_client.models.ob_active_or_historic_currency_and_amount_9.OBActiveOrHistoricCurrencyAndAmount_9(
                    amount = '80728.8001', 
                    currency = 'AEI', ),
                bank_transaction_code = openapi_client.models.ob_bank_transaction_code_structure1.OBBankTransactionCodeStructure1(
                    code = '', 
                    sub_code = '', ),
                booking_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                card_instrument = openapi_client.models.ob_transaction_card_instrument1.OBTransactionCardInstrument1(
                    authorisation_type = 'ConsumerDevice', 
                    card_scheme_name = 'AmericanExpress', 
                    identification = '0', 
                    name = '0', ),
                charge_amount = openapi_client.models.ob_active_or_historic_currency_and_amount_10.OBActiveOrHistoricCurrencyAndAmount_10(
                    amount = '80728.8001', 
                    currency = 'AEI', ),
                credit_debit_indicator = 'Credit',
                currency_exchange = openapi_client.models.ob_currency_exchange5.OBCurrencyExchange5(
                    contract_identification = '0', 
                    exchange_rate = 1.337, 
                    instructed_amount = openapi_client.models.ob_currency_exchange5_instructed_amount.OBCurrencyExchange5_InstructedAmount(
                        amount = '80728.8001', 
                        currency = 'AEI', ), 
                    quotation_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    source_currency = 'AEI', 
                    target_currency = 'AEI', 
                    unit_currency = 'AEI', ),
                proprietary_bank_transaction_code = openapi_client.models.proprietary_bank_transaction_code_structure1.ProprietaryBankTransactionCodeStructure1(
                    code = '0', 
                    issuer = '0', ),
                statement_reference = [
                    '0'
                    ],
                status = 'Booked',
                supplementary_data = { },
                transaction_id = '0',
                transaction_mutability = 'Mutable',
                transaction_reference = '0',
                value_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return OBTransaction6Basic(
                account_id = '0',
                amount = openapi_client.models.ob_active_or_historic_currency_and_amount_9.OBActiveOrHistoricCurrencyAndAmount_9(
                    amount = '80728.8001', 
                    currency = 'AEI', ),
                booking_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                credit_debit_indicator = 'Credit',
                status = 'Booked',
        )
        """

    def testOBTransaction6Basic(self):
        """Test OBTransaction6Basic"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

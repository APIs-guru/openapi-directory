# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ob_active_or_historic_currency_and_amount1 import OBActiveOrHistoricCurrencyAndAmount1
from openapi_client.models.ob_external_schedule_type1_code import OBExternalScheduleType1Code
from typing import Optional, Set
from typing_extensions import Self

class OBScheduledPayment3Basic(BaseModel):
    """
    OBScheduledPayment3Basic
    """ # noqa: E501
    account_id: Annotated[str, Field(min_length=1, strict=True, max_length=40)] = Field(description="A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.", alias="AccountId")
    debtor_reference: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=35)]] = Field(default=None, description="A reference value provided by the PSU to the PISP while setting up the scheduled payment.", alias="DebtorReference")
    instructed_amount: OBActiveOrHistoricCurrencyAndAmount1 = Field(alias="InstructedAmount")
    reference: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=35)]] = Field(default=None, description="Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction. Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money. If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.", alias="Reference")
    scheduled_payment_date_time: datetime = Field(description="The date on which the scheduled payment will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00", alias="ScheduledPaymentDateTime")
    scheduled_payment_id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=40)]] = Field(default=None, description="A unique and immutable identifier used to identify the scheduled payment resource. This identifier has no meaning to the account owner.", alias="ScheduledPaymentId")
    scheduled_type: OBExternalScheduleType1Code = Field(alias="ScheduledType")
    __properties: ClassVar[List[str]] = ["AccountId", "DebtorReference", "InstructedAmount", "Reference", "ScheduledPaymentDateTime", "ScheduledPaymentId", "ScheduledType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBScheduledPayment3Basic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of instructed_amount
        if self.instructed_amount:
            _dict['InstructedAmount'] = self.instructed_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBScheduledPayment3Basic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccountId": obj.get("AccountId"),
            "DebtorReference": obj.get("DebtorReference"),
            "InstructedAmount": OBActiveOrHistoricCurrencyAndAmount1.from_dict(obj["InstructedAmount"]) if obj.get("InstructedAmount") is not None else None,
            "Reference": obj.get("Reference"),
            "ScheduledPaymentDateTime": obj.get("ScheduledPaymentDateTime"),
            "ScheduledPaymentId": obj.get("ScheduledPaymentId"),
            "ScheduledType": obj.get("ScheduledType")
        })
        return _obj



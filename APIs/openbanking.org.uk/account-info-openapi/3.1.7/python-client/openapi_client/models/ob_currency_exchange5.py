# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.ob_currency_exchange5_instructed_amount import OBCurrencyExchange5InstructedAmount
from typing import Optional, Set
from typing_extensions import Self

class OBCurrencyExchange5(BaseModel):
    """
    Set of elements used to provide details on the currency exchange.
    """ # noqa: E501
    contract_identification: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=35)]] = Field(default=None, description="Unique identification to unambiguously identify the foreign exchange contract.", alias="ContractIdentification")
    exchange_rate: Union[StrictFloat, StrictInt] = Field(description="Factor used to convert an amount from one currency into another. This reflects the price at which one currency was bought with another currency. Usage: ExchangeRate expresses the ratio between UnitCurrency and QuotedCurrency (ExchangeRate = UnitCurrency/QuotedCurrency).", alias="ExchangeRate")
    instructed_amount: Optional[OBCurrencyExchange5InstructedAmount] = Field(default=None, alias="InstructedAmount")
    quotation_date: Optional[datetime] = Field(default=None, description="Date and time at which an exchange rate is quoted.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00", alias="QuotationDate")
    source_currency: Annotated[str, Field(strict=True)] = Field(description="Currency from which an amount is to be converted in a currency conversion.", alias="SourceCurrency")
    target_currency: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Currency into which an amount is to be converted in a currency conversion.", alias="TargetCurrency")
    unit_currency: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.", alias="UnitCurrency")
    __properties: ClassVar[List[str]] = ["ContractIdentification", "ExchangeRate", "InstructedAmount", "QuotationDate", "SourceCurrency", "TargetCurrency", "UnitCurrency"]

    @field_validator('source_currency')
    def source_currency_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Z]{3,3}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{3,3}$/")
        return value

    @field_validator('target_currency')
    def target_currency_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[A-Z]{3,3}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{3,3}$/")
        return value

    @field_validator('unit_currency')
    def unit_currency_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[A-Z]{3,3}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{3,3}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBCurrencyExchange5 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of instructed_amount
        if self.instructed_amount:
            _dict['InstructedAmount'] = self.instructed_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBCurrencyExchange5 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ContractIdentification": obj.get("ContractIdentification"),
            "ExchangeRate": obj.get("ExchangeRate"),
            "InstructedAmount": OBCurrencyExchange5InstructedAmount.from_dict(obj["InstructedAmount"]) if obj.get("InstructedAmount") is not None else None,
            "QuotationDate": obj.get("QuotationDate"),
            "SourceCurrency": obj.get("SourceCurrency"),
            "TargetCurrency": obj.get("TargetCurrency"),
            "UnitCurrency": obj.get("UnitCurrency")
        })
        return _obj



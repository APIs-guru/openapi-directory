# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.ob_active_or_historic_currency_and_amount6 import OBActiveOrHistoricCurrencyAndAmount6
from openapi_client.models.ob_credit_debit_code0 import OBCreditDebitCode0
from typing import Optional, Set
from typing_extensions import Self

class OBStatement2StatementFeeInner(BaseModel):
    """
    Set of elements used to provide details of a fee for the statement resource.
    """ # noqa: E501
    amount: OBActiveOrHistoricCurrencyAndAmount6 = Field(alias="Amount")
    credit_debit_indicator: OBCreditDebitCode0 = Field(alias="CreditDebitIndicator")
    description: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=128)]] = Field(default=None, description="Description that may be available for the statement fee.", alias="Description")
    frequency: Optional[StrictStr] = Field(default=None, description="How frequently the fee is applied to the Account.", alias="Frequency")
    rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Rate charged for Statement Fee (where it is charged in terms of a rate rather than an amount)", alias="Rate")
    rate_type: Optional[StrictStr] = Field(default=None, description="Description that may be available for the statement fee rate type.", alias="RateType")
    type: StrictStr = Field(description="Fee type, in a coded form.", alias="Type")
    __properties: ClassVar[List[str]] = ["Amount", "CreditDebitIndicator", "Description", "Frequency", "Rate", "RateType", "Type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBStatement2StatementFeeInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['Amount'] = self.amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBStatement2StatementFeeInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Amount": OBActiveOrHistoricCurrencyAndAmount6.from_dict(obj["Amount"]) if obj.get("Amount") is not None else None,
            "CreditDebitIndicator": obj.get("CreditDebitIndicator"),
            "Description": obj.get("Description"),
            "Frequency": obj.get("Frequency"),
            "Rate": obj.get("Rate"),
            "RateType": obj.get("RateType"),
            "Type": obj.get("Type")
        })
        return _obj



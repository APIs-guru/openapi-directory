# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ob_interest_fixed_variable_type1_code import OBInterestFixedVariableType1Code
from openapi_client.models.ob_read_product2_data_product_inner_other_product_type_loan_interest_loan_interest_tier_band_set_inner_loan_interest_fees_charges_inner import OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestFeesChargesInner
from openapi_client.models.ob_read_product2_data_product_inner_other_product_type_loan_interest_loan_interest_tier_band_set_inner_loan_interest_tier_band_inner_other_loan_provider_interest_rate_type import OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerOtherLoanProviderInterestRateType
from typing import Optional, Set
from typing_extensions import Self

class OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner(BaseModel):
    """
    Tier Band Details
    """ # noqa: E501
    fixed_variable_interest_rate_type: OBInterestFixedVariableType1Code = Field(alias="FixedVariableInterestRateType")
    identification: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=35)]] = Field(default=None, description="Unique and unambiguous identification of a  Tier Band for a SME Loan.", alias="Identification")
    loan_interest_fees_charges: Optional[List[OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestFeesChargesInner]] = Field(default=None, alias="LoanInterestFeesCharges")
    loan_provider_interest_rate: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Loan provider Interest for the SME Loan product", alias="LoanProviderInterestRate")
    loan_provider_interest_rate_type: Optional[StrictStr] = Field(default=None, description="Interest rate types, other than APR, which financial institutions may use to describe the annual interest rate payable for the SME Loan.", alias="LoanProviderInterestRateType")
    max_term_period: Optional[StrictStr] = Field(default=None, description="The unit of period (days, weeks, months etc.) of the Maximum Term", alias="MaxTermPeriod")
    min_term_period: StrictStr = Field(description="The unit of period (days, weeks, months etc.) of the Minimum Term", alias="MinTermPeriod")
    notes: Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]]] = Field(default=None, alias="Notes")
    other_loan_provider_interest_rate_type: Optional[OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerOtherLoanProviderInterestRateType] = Field(default=None, alias="OtherLoanProviderInterestRateType")
    rep_apr: Annotated[str, Field(strict=True)] = Field(description="The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made.  For SME Loan, this APR is the representative APR which includes any account fees.", alias="RepAPR")
    tier_value_max_term: Optional[StrictInt] = Field(default=None, description="Maximum loan term for which the loan interest tier applies.", alias="TierValueMaxTerm")
    tier_value_maximum: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Maximum loan value for which the loan interest tier applies.", alias="TierValueMaximum")
    tier_value_min_term: StrictInt = Field(description="Minimum loan term for which the loan interest tier applies.", alias="TierValueMinTerm")
    tier_value_minimum: Annotated[str, Field(strict=True)] = Field(description="Minimum loan value for which the loan interest tier applies.", alias="TierValueMinimum")
    __properties: ClassVar[List[str]] = ["FixedVariableInterestRateType", "Identification", "LoanInterestFeesCharges", "LoanProviderInterestRate", "LoanProviderInterestRateType", "MaxTermPeriod", "MinTermPeriod", "Notes", "OtherLoanProviderInterestRateType", "RepAPR", "TierValueMaxTerm", "TierValueMaximum", "TierValueMinTerm", "TierValueMinimum"]

    @field_validator('loan_provider_interest_rate')
    def loan_provider_interest_rate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$", value):
            raise ValueError(r"must validate the regular expression /^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$/")
        return value

    @field_validator('loan_provider_interest_rate_type')
    def loan_provider_interest_rate_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INBB', 'INFR', 'INGR', 'INLR', 'INNE', 'INOT']):
            raise ValueError("must be one of enum values ('INBB', 'INFR', 'INGR', 'INLR', 'INNE', 'INOT')")
        return value

    @field_validator('max_term_period')
    def max_term_period_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PACT', 'PDAY', 'PHYR', 'PMTH', 'PQTR', 'PWEK', 'PYER']):
            raise ValueError("must be one of enum values ('PACT', 'PDAY', 'PHYR', 'PMTH', 'PQTR', 'PWEK', 'PYER')")
        return value

    @field_validator('min_term_period')
    def min_term_period_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['PACT', 'PDAY', 'PHYR', 'PMTH', 'PQTR', 'PWEK', 'PYER']):
            raise ValueError("must be one of enum values ('PACT', 'PDAY', 'PHYR', 'PMTH', 'PQTR', 'PWEK', 'PYER')")
        return value

    @field_validator('rep_apr')
    def rep_apr_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$", value):
            raise ValueError(r"must validate the regular expression /^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$/")
        return value

    @field_validator('tier_value_maximum')
    def tier_value_maximum_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$", value):
            raise ValueError(r"must validate the regular expression /^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$/")
        return value

    @field_validator('tier_value_minimum')
    def tier_value_minimum_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$", value):
            raise ValueError(r"must validate the regular expression /^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in loan_interest_fees_charges (list)
        _items = []
        if self.loan_interest_fees_charges:
            for _item_loan_interest_fees_charges in self.loan_interest_fees_charges:
                if _item_loan_interest_fees_charges:
                    _items.append(_item_loan_interest_fees_charges.to_dict())
            _dict['LoanInterestFeesCharges'] = _items
        # override the default output from pydantic by calling `to_dict()` of other_loan_provider_interest_rate_type
        if self.other_loan_provider_interest_rate_type:
            _dict['OtherLoanProviderInterestRateType'] = self.other_loan_provider_interest_rate_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "FixedVariableInterestRateType": obj.get("FixedVariableInterestRateType"),
            "Identification": obj.get("Identification"),
            "LoanInterestFeesCharges": [OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestFeesChargesInner.from_dict(_item) for _item in obj["LoanInterestFeesCharges"]] if obj.get("LoanInterestFeesCharges") is not None else None,
            "LoanProviderInterestRate": obj.get("LoanProviderInterestRate"),
            "LoanProviderInterestRateType": obj.get("LoanProviderInterestRateType"),
            "MaxTermPeriod": obj.get("MaxTermPeriod"),
            "MinTermPeriod": obj.get("MinTermPeriod"),
            "Notes": obj.get("Notes"),
            "OtherLoanProviderInterestRateType": OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerOtherLoanProviderInterestRateType.from_dict(obj["OtherLoanProviderInterestRateType"]) if obj.get("OtherLoanProviderInterestRateType") is not None else None,
            "RepAPR": obj.get("RepAPR"),
            "TierValueMaxTerm": obj.get("TierValueMaxTerm"),
            "TierValueMaximum": obj.get("TierValueMaximum"),
            "TierValueMinTerm": obj.get("TierValueMinTerm"),
            "TierValueMinimum": obj.get("TierValueMinimum")
        })
        return _obj



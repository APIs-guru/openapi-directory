# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.tier_band_inner import TierBandInner
from typing import Optional, Set
from typing_extensions import Self

class TierBandSetInner(BaseModel):
    """
    The group of tiers or bands for which credit interest can be applied.
    """ # noqa: E501
    calculation_method: Optional[StrictStr] = Field(default=None, description="Methods of calculating interest", alias="CalculationMethod")
    destination: StrictStr = Field(description="Describes whether accrued interest is payable only to the BCA or to another bank account", alias="Destination")
    notes: Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]]] = Field(default=None, description="Optional additional notes to supplement the Tier Band Set details", alias="Notes")
    tier_band: Annotated[List[TierBandInner], Field(min_length=1)] = Field(description="Tier Band Details", alias="TierBand")
    tier_band_method: StrictStr = Field(description="The methodology of how credit interest is paid/applied. It can be:-  1. Banded Interest rates are banded. i.e. Increasing rate on whole balance as balance increases.  2. Tiered Interest rates are tiered. i.e. increasing rate for each tier as balance increases, but interest paid on tier fixed for that tier and not on whole balance.  3. Whole The same interest rate is applied irrespective of the BCA balance", alias="TierBandMethod")
    __properties: ClassVar[List[str]] = ["CalculationMethod", "Destination", "Notes", "TierBand", "TierBandMethod"]

    @field_validator('calculation_method')
    def calculation_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Compound', 'SimpleInterest']):
            raise ValueError("must be one of enum values ('Compound', 'SimpleInterest')")
        return value

    @field_validator('destination')
    def destination_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['PayAway', 'SelfCredit']):
            raise ValueError("must be one of enum values ('PayAway', 'SelfCredit')")
        return value

    @field_validator('tier_band_method')
    def tier_band_method_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Banded', 'Tiered', 'Whole']):
            raise ValueError("must be one of enum values ('Banded', 'Tiered', 'Whole')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TierBandSetInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tier_band (list)
        _items = []
        if self.tier_band:
            for _item_tier_band in self.tier_band:
                if _item_tier_band:
                    _items.append(_item_tier_band.to_dict())
            _dict['TierBand'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TierBandSetInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CalculationMethod": obj.get("CalculationMethod"),
            "Destination": obj.get("Destination"),
            "Notes": obj.get("Notes"),
            "TierBand": [TierBandInner.from_dict(_item) for _item in obj["TierBand"]] if obj.get("TierBand") is not None else None,
            "TierBandMethod": obj.get("TierBandMethod")
        })
        return _obj



# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ob_external_party_type1_code import OBExternalPartyType1Code
from openapi_client.models.ob_party2_address_inner import OBParty2AddressInner
from openapi_client.models.ob_party_relationships1 import OBPartyRelationships1
from typing import Optional, Set
from typing_extensions import Self

class OBParty2(BaseModel):
    """
    OBParty2
    """ # noqa: E501
    account_role: Optional[StrictStr] = Field(default=None, description="A partyâ€™s role with respect to the related account.", alias="AccountRole")
    address: Optional[List[OBParty2AddressInner]] = Field(default=None, alias="Address")
    beneficial_ownership: Optional[StrictBool] = Field(default=None, alias="BeneficialOwnership")
    email_address: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=256)]] = Field(default=None, description="Address for electronic mail (e-mail).", alias="EmailAddress")
    full_legal_name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=350)]] = Field(default=None, description="Specifies a character string with a maximum length of 350 characters.", alias="FullLegalName")
    legal_structure: Optional[StrictStr] = Field(default=None, description="Legal standing of the party.", alias="LegalStructure")
    mobile: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Collection of information that identifies a mobile phone number, as defined by telecom services.", alias="Mobile")
    name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=350)]] = Field(default=None, description="Name by which a party is known and which is usually used to identify that party.", alias="Name")
    party_id: Annotated[str, Field(min_length=1, strict=True, max_length=40)] = Field(description="A unique and immutable identifier used to identify the customer resource. This identifier has no meaning to the account owner.", alias="PartyId")
    party_number: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=35)]] = Field(default=None, description="Number assigned by an agent to identify its customer.", alias="PartyNumber")
    party_type: Optional[OBExternalPartyType1Code] = Field(default=None, alias="PartyType")
    phone: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Collection of information that identifies a phone number, as defined by telecom services.", alias="Phone")
    relationships: Optional[OBPartyRelationships1] = Field(default=None, alias="Relationships")
    __properties: ClassVar[List[str]] = ["AccountRole", "Address", "BeneficialOwnership", "EmailAddress", "FullLegalName", "LegalStructure", "Mobile", "Name", "PartyId", "PartyNumber", "PartyType", "Phone", "Relationships"]

    @field_validator('mobile')
    def mobile_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"\+[0-9]{1,3}-[0-9()+\-]{1,30}", value):
            raise ValueError(r"must validate the regular expression /\+[0-9]{1,3}-[0-9()+\-]{1,30}/")
        return value

    @field_validator('phone')
    def phone_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"\+[0-9]{1,3}-[0-9()+\-]{1,30}", value):
            raise ValueError(r"must validate the regular expression /\+[0-9]{1,3}-[0-9()+\-]{1,30}/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBParty2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in address (list)
        _items = []
        if self.address:
            for _item_address in self.address:
                if _item_address:
                    _items.append(_item_address.to_dict())
            _dict['Address'] = _items
        # override the default output from pydantic by calling `to_dict()` of relationships
        if self.relationships:
            _dict['Relationships'] = self.relationships.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBParty2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccountRole": obj.get("AccountRole"),
            "Address": [OBParty2AddressInner.from_dict(_item) for _item in obj["Address"]] if obj.get("Address") is not None else None,
            "BeneficialOwnership": obj.get("BeneficialOwnership"),
            "EmailAddress": obj.get("EmailAddress"),
            "FullLegalName": obj.get("FullLegalName"),
            "LegalStructure": obj.get("LegalStructure"),
            "Mobile": obj.get("Mobile"),
            "Name": obj.get("Name"),
            "PartyId": obj.get("PartyId"),
            "PartyNumber": obj.get("PartyNumber"),
            "PartyType": obj.get("PartyType"),
            "Phone": obj.get("Phone"),
            "Relationships": OBPartyRelationships1.from_dict(obj["Relationships"]) if obj.get("Relationships") is not None else None
        })
        return _obj



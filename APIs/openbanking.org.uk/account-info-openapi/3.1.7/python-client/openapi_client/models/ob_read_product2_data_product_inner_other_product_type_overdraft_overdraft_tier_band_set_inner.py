# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ob_read_product2_data_product_inner_other_product_type_overdraft_overdraft_tier_band_set_inner_overdraft_fees_charges_inner import OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftFeesChargesInner
from openapi_client.models.ob_read_product2_data_product_inner_other_product_type_overdraft_overdraft_tier_band_set_inner_overdraft_tier_band_inner import OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner
from typing import Optional, Set
from typing_extensions import Self

class OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInner(BaseModel):
    """
    Tier band set details
    """ # noqa: E501
    authorised_indicator: Optional[StrictBool] = Field(default=None, description="Indicates if the Overdraft is authorised (Y) or unauthorised (N)", alias="AuthorisedIndicator")
    buffer_amount: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="When a customer exceeds their credit limit, a financial institution will not charge the customer unauthorised overdraft charges if they do not exceed by more than the buffer amount. Note: Authorised overdraft charges may still apply.", alias="BufferAmount")
    identification: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=35)]] = Field(default=None, description="Unique and unambiguous identification of a  Tier Band for a overdraft product.", alias="Identification")
    notes: Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]]] = Field(default=None, alias="Notes")
    overdraft_fees_charges: Optional[List[OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftFeesChargesInner]] = Field(default=None, alias="OverdraftFeesCharges")
    overdraft_tier_band: Annotated[List[OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner], Field(min_length=1)] = Field(alias="OverdraftTierBand")
    overdraft_type: Optional[StrictStr] = Field(default=None, description="An overdraft can either be 'committed' which means that the facility cannot be withdrawn without reasonable notification before it's agreed end date, or 'on demand' which means that the financial institution can demand repayment at any point in time.", alias="OverdraftType")
    tier_band_method: StrictStr = Field(description="The methodology of how overdraft is charged. It can be: 'Whole'  Where the same charge/rate is applied to the entirety of the overdraft balance (where charges are applicable).  'Tiered' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount tiers defined by the lending financial organisation 'Banded' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount bands defined by a government organisation.", alias="TierBandMethod")
    __properties: ClassVar[List[str]] = ["AuthorisedIndicator", "BufferAmount", "Identification", "Notes", "OverdraftFeesCharges", "OverdraftTierBand", "OverdraftType", "TierBandMethod"]

    @field_validator('buffer_amount')
    def buffer_amount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$", value):
            raise ValueError(r"must validate the regular expression /^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$/")
        return value

    @field_validator('overdraft_type')
    def overdraft_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OVCO', 'OVOD', 'OVOT']):
            raise ValueError("must be one of enum values ('OVCO', 'OVOD', 'OVOT')")
        return value

    @field_validator('tier_band_method')
    def tier_band_method_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['INBA', 'INTI', 'INWH']):
            raise ValueError("must be one of enum values ('INBA', 'INTI', 'INWH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in overdraft_fees_charges (list)
        _items = []
        if self.overdraft_fees_charges:
            for _item_overdraft_fees_charges in self.overdraft_fees_charges:
                if _item_overdraft_fees_charges:
                    _items.append(_item_overdraft_fees_charges.to_dict())
            _dict['OverdraftFeesCharges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in overdraft_tier_band (list)
        _items = []
        if self.overdraft_tier_band:
            for _item_overdraft_tier_band in self.overdraft_tier_band:
                if _item_overdraft_tier_band:
                    _items.append(_item_overdraft_tier_band.to_dict())
            _dict['OverdraftTierBand'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AuthorisedIndicator": obj.get("AuthorisedIndicator"),
            "BufferAmount": obj.get("BufferAmount"),
            "Identification": obj.get("Identification"),
            "Notes": obj.get("Notes"),
            "OverdraftFeesCharges": [OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftFeesChargesInner.from_dict(_item) for _item in obj["OverdraftFeesCharges"]] if obj.get("OverdraftFeesCharges") is not None else None,
            "OverdraftTierBand": [OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner.from_dict(_item) for _item in obj["OverdraftTierBand"]] if obj.get("OverdraftTierBand") is not None else None,
            "OverdraftType": obj.get("OverdraftType"),
            "TierBandMethod": obj.get("TierBandMethod")
        })
        return _obj



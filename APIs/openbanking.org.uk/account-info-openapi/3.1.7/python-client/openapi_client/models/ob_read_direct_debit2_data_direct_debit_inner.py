# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ob_active_or_historic_currency_and_amount0 import OBActiveOrHistoricCurrencyAndAmount0
from openapi_client.models.ob_external_direct_debit_status1_code import OBExternalDirectDebitStatus1Code
from typing import Optional, Set
from typing_extensions import Self

class OBReadDirectDebit2DataDirectDebitInner(BaseModel):
    """
    Account to or from which a cash entry is made.
    """ # noqa: E501
    account_id: Annotated[str, Field(min_length=1, strict=True, max_length=40)] = Field(description="A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.", alias="AccountId")
    direct_debit_id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=40)]] = Field(default=None, description="A unique and immutable identifier used to identify the direct debit resource. This identifier has no meaning to the account owner.", alias="DirectDebitId")
    direct_debit_status_code: Optional[OBExternalDirectDebitStatus1Code] = Field(default=None, alias="DirectDebitStatusCode")
    frequency: Optional[StrictStr] = Field(default=None, description="Regularity with which direct debit instructions are to be created and processed.", alias="Frequency")
    mandate_identification: Annotated[str, Field(min_length=1, strict=True, max_length=35)] = Field(description="Direct Debit reference. For AUDDIS service users provide Core Reference. For non AUDDIS service users provide Core reference if possible or last used reference.", alias="MandateIdentification")
    name: Annotated[str, Field(min_length=1, strict=True, max_length=70)] = Field(description="Name of Service User.", alias="Name")
    previous_payment_amount: Optional[OBActiveOrHistoricCurrencyAndAmount0] = Field(default=None, alias="PreviousPaymentAmount")
    previous_payment_date_time: Optional[datetime] = Field(default=None, description="Date of most recent direct debit collection.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00", alias="PreviousPaymentDateTime")
    __properties: ClassVar[List[str]] = ["AccountId", "DirectDebitId", "DirectDebitStatusCode", "Frequency", "MandateIdentification", "Name", "PreviousPaymentAmount", "PreviousPaymentDateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBReadDirectDebit2DataDirectDebitInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of previous_payment_amount
        if self.previous_payment_amount:
            _dict['PreviousPaymentAmount'] = self.previous_payment_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBReadDirectDebit2DataDirectDebitInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccountId": obj.get("AccountId"),
            "DirectDebitId": obj.get("DirectDebitId"),
            "DirectDebitStatusCode": obj.get("DirectDebitStatusCode"),
            "Frequency": obj.get("Frequency"),
            "MandateIdentification": obj.get("MandateIdentification"),
            "Name": obj.get("Name"),
            "PreviousPaymentAmount": OBActiveOrHistoricCurrencyAndAmount0.from_dict(obj["PreviousPaymentAmount"]) if obj.get("PreviousPaymentAmount") is not None else None,
            "PreviousPaymentDateTime": obj.get("PreviousPaymentDateTime")
        })
        return _obj



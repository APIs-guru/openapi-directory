# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ob_read_product2_data_product_inner_other_product_type_repayment_other_amount_type import OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherAmountType
from openapi_client.models.ob_read_product2_data_product_inner_other_product_type_repayment_other_repayment_frequency import OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherRepaymentFrequency
from openapi_client.models.ob_read_product2_data_product_inner_other_product_type_repayment_other_repayment_type import OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherRepaymentType
from openapi_client.models.ob_read_product2_data_product_inner_other_product_type_repayment_repayment_fee_charges import OBReadProduct2DataProductInnerOtherProductTypeRepaymentRepaymentFeeCharges
from openapi_client.models.ob_read_product2_data_product_inner_other_product_type_repayment_repayment_holiday_inner import OBReadProduct2DataProductInnerOtherProductTypeRepaymentRepaymentHolidayInner
from typing import Optional, Set
from typing_extensions import Self

class OBReadProduct2DataProductInnerOtherProductTypeRepayment(BaseModel):
    """
    Repayment details of the Loan product
    """ # noqa: E501
    amount_type: Optional[StrictStr] = Field(default=None, description="The repayment is for paying just the interest only or both interest and capital or bullet amount or balance to date etc", alias="AmountType")
    notes: Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]]] = Field(default=None, alias="Notes")
    other_amount_type: Optional[OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherAmountType] = Field(default=None, alias="OtherAmountType")
    other_repayment_frequency: Optional[OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherRepaymentFrequency] = Field(default=None, alias="OtherRepaymentFrequency")
    other_repayment_type: Optional[OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherRepaymentType] = Field(default=None, alias="OtherRepaymentType")
    repayment_fee_charges: Optional[OBReadProduct2DataProductInnerOtherProductTypeRepaymentRepaymentFeeCharges] = Field(default=None, alias="RepaymentFeeCharges")
    repayment_frequency: Optional[StrictStr] = Field(default=None, description="Repayment frequency", alias="RepaymentFrequency")
    repayment_holiday: Optional[List[OBReadProduct2DataProductInnerOtherProductTypeRepaymentRepaymentHolidayInner]] = Field(default=None, alias="RepaymentHoliday")
    repayment_type: Optional[StrictStr] = Field(default=None, description="Repayment type", alias="RepaymentType")
    __properties: ClassVar[List[str]] = ["AmountType", "Notes", "OtherAmountType", "OtherRepaymentFrequency", "OtherRepaymentType", "RepaymentFeeCharges", "RepaymentFrequency", "RepaymentHoliday", "RepaymentType"]

    @field_validator('amount_type')
    def amount_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RABD', 'RABL', 'RACI', 'RAFC', 'RAIO', 'RALT', 'USOT']):
            raise ValueError("must be one of enum values ('RABD', 'RABL', 'RACI', 'RAFC', 'RAIO', 'RALT', 'USOT')")
        return value

    @field_validator('repayment_frequency')
    def repayment_frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SMDA', 'SMFL', 'SMFO', 'SMHY', 'SMMO', 'SMOT', 'SMQU', 'SMWE', 'SMYE']):
            raise ValueError("must be one of enum values ('SMDA', 'SMFL', 'SMFO', 'SMHY', 'SMMO', 'SMOT', 'SMQU', 'SMWE', 'SMYE')")
        return value

    @field_validator('repayment_type')
    def repayment_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['USBA', 'USBU', 'USCI', 'USCS', 'USER', 'USFA', 'USFB', 'USFI', 'USIO', 'USOT', 'USPF', 'USRW', 'USSL']):
            raise ValueError("must be one of enum values ('USBA', 'USBU', 'USCI', 'USCS', 'USER', 'USFA', 'USFB', 'USFI', 'USIO', 'USOT', 'USPF', 'USRW', 'USSL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBReadProduct2DataProductInnerOtherProductTypeRepayment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of other_amount_type
        if self.other_amount_type:
            _dict['OtherAmountType'] = self.other_amount_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of other_repayment_frequency
        if self.other_repayment_frequency:
            _dict['OtherRepaymentFrequency'] = self.other_repayment_frequency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of other_repayment_type
        if self.other_repayment_type:
            _dict['OtherRepaymentType'] = self.other_repayment_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of repayment_fee_charges
        if self.repayment_fee_charges:
            _dict['RepaymentFeeCharges'] = self.repayment_fee_charges.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in repayment_holiday (list)
        _items = []
        if self.repayment_holiday:
            for _item_repayment_holiday in self.repayment_holiday:
                if _item_repayment_holiday:
                    _items.append(_item_repayment_holiday.to_dict())
            _dict['RepaymentHoliday'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBReadProduct2DataProductInnerOtherProductTypeRepayment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AmountType": obj.get("AmountType"),
            "Notes": obj.get("Notes"),
            "OtherAmountType": OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherAmountType.from_dict(obj["OtherAmountType"]) if obj.get("OtherAmountType") is not None else None,
            "OtherRepaymentFrequency": OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherRepaymentFrequency.from_dict(obj["OtherRepaymentFrequency"]) if obj.get("OtherRepaymentFrequency") is not None else None,
            "OtherRepaymentType": OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherRepaymentType.from_dict(obj["OtherRepaymentType"]) if obj.get("OtherRepaymentType") is not None else None,
            "RepaymentFeeCharges": OBReadProduct2DataProductInnerOtherProductTypeRepaymentRepaymentFeeCharges.from_dict(obj["RepaymentFeeCharges"]) if obj.get("RepaymentFeeCharges") is not None else None,
            "RepaymentFrequency": obj.get("RepaymentFrequency"),
            "RepaymentHoliday": [OBReadProduct2DataProductInnerOtherProductTypeRepaymentRepaymentHolidayInner.from_dict(_item) for _item in obj["RepaymentHoliday"]] if obj.get("RepaymentHoliday") is not None else None,
            "RepaymentType": obj.get("RepaymentType")
        })
        return _obj



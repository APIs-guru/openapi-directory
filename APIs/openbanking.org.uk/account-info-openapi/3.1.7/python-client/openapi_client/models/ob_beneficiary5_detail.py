# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ob_beneficiary_type1_code import OBBeneficiaryType1Code
from openapi_client.models.ob_branch_and_financial_institution_identification60 import OBBranchAndFinancialInstitutionIdentification60
from openapi_client.models.ob_cash_account50 import OBCashAccount50
from typing import Optional, Set
from typing_extensions import Self

class OBBeneficiary5Detail(BaseModel):
    """
    OBBeneficiary5Detail
    """ # noqa: E501
    account_id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=40)]] = Field(default=None, description="A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.", alias="AccountId")
    beneficiary_id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=40)]] = Field(default=None, description="A unique and immutable identifier used to identify the beneficiary resource. This identifier has no meaning to the account owner.", alias="BeneficiaryId")
    beneficiary_type: Optional[OBBeneficiaryType1Code] = Field(default=None, alias="BeneficiaryType")
    creditor_account: OBCashAccount50 = Field(alias="CreditorAccount")
    creditor_agent: Optional[OBBranchAndFinancialInstitutionIdentification60] = Field(default=None, alias="CreditorAgent")
    reference: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=35)]] = Field(default=None, description="Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction. Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money. If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.", alias="Reference")
    supplementary_data: Optional[Dict[str, Any]] = Field(default=None, description="Additional information that can not be captured in the structured fields and/or any other specific block.", alias="SupplementaryData")
    __properties: ClassVar[List[str]] = ["AccountId", "BeneficiaryId", "BeneficiaryType", "CreditorAccount", "CreditorAgent", "Reference", "SupplementaryData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBBeneficiary5Detail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creditor_account
        if self.creditor_account:
            _dict['CreditorAccount'] = self.creditor_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creditor_agent
        if self.creditor_agent:
            _dict['CreditorAgent'] = self.creditor_agent.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBBeneficiary5Detail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccountId": obj.get("AccountId"),
            "BeneficiaryId": obj.get("BeneficiaryId"),
            "BeneficiaryType": obj.get("BeneficiaryType"),
            "CreditorAccount": OBCashAccount50.from_dict(obj["CreditorAccount"]) if obj.get("CreditorAccount") is not None else None,
            "CreditorAgent": OBBranchAndFinancialInstitutionIdentification60.from_dict(obj["CreditorAgent"]) if obj.get("CreditorAgent") is not None else None,
            "Reference": obj.get("Reference"),
            "SupplementaryData": obj.get("SupplementaryData")
        })
        return _obj



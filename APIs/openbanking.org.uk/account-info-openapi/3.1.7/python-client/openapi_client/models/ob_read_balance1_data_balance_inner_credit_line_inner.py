# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ob_read_balance1_data_balance_inner_credit_line_inner_amount import OBReadBalance1DataBalanceInnerCreditLineInnerAmount
from typing import Optional, Set
from typing_extensions import Self

class OBReadBalance1DataBalanceInnerCreditLineInner(BaseModel):
    """
    Set of elements used to provide details on the credit line.
    """ # noqa: E501
    amount: Optional[OBReadBalance1DataBalanceInnerCreditLineInnerAmount] = Field(default=None, alias="Amount")
    included: StrictBool = Field(description="Indicates whether or not the credit line is included in the balance of the account. Usage: If not present, credit line is not included in the balance amount of the account.", alias="Included")
    type: Optional[StrictStr] = Field(default=None, description="Limit type, in a coded form.", alias="Type")
    __properties: ClassVar[List[str]] = ["Amount", "Included", "Type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Available', 'Credit', 'Emergency', 'Pre-Agreed', 'Temporary']):
            raise ValueError("must be one of enum values ('Available', 'Credit', 'Emergency', 'Pre-Agreed', 'Temporary')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBReadBalance1DataBalanceInnerCreditLineInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['Amount'] = self.amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBReadBalance1DataBalanceInnerCreditLineInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Amount": OBReadBalance1DataBalanceInnerCreditLineInnerAmount.from_dict(obj["Amount"]) if obj.get("Amount") is not None else None,
            "Included": obj.get("Included"),
            "Type": obj.get("Type")
        })
        return _obj



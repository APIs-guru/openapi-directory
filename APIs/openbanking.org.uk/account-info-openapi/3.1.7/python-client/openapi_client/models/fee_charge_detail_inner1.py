# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.fee_applicable_range import FeeApplicableRange
from openapi_client.models.fee_charge_cap_inner1 import FeeChargeCapInner1
from openapi_client.models.other_application_frequency1 import OtherApplicationFrequency1
from openapi_client.models.other_calculation_frequency1 import OtherCalculationFrequency1
from openapi_client.models.other_fee_category_type import OtherFeeCategoryType
from openapi_client.models.other_fee_rate_type import OtherFeeRateType
from openapi_client.models.other_fee_type import OtherFeeType
from typing import Optional, Set
from typing_extensions import Self

class FeeChargeDetailInner1(BaseModel):
    """
    Other fees/charges details
    """ # noqa: E501
    application_frequency: StrictStr = Field(description="How frequently the fee/charge is applied to the account", alias="ApplicationFrequency")
    calculation_frequency: Optional[StrictStr] = Field(default=None, description="How frequently the fee/charge is calculated", alias="CalculationFrequency")
    fee_amount: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Fee Amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)", alias="FeeAmount")
    fee_applicable_range: Optional[FeeApplicableRange] = Field(default=None, alias="FeeApplicableRange")
    fee_category: StrictStr = Field(description="Categorisation of fees and charges into standard categories.", alias="FeeCategory")
    fee_charge_cap: Optional[List[FeeChargeCapInner1]] = Field(default=None, description="Details about any caps (maximum charges) that apply to a particular fee/charge", alias="FeeChargeCap")
    fee_rate: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Rate charged for Fee/Charge (where it is charged in terms of a rate rather than an amount)", alias="FeeRate")
    fee_rate_type: Optional[StrictStr] = Field(default=None, description="Rate type for Fee/Charge (where it is charged in terms of a rate rather than an amount)", alias="FeeRateType")
    fee_type: StrictStr = Field(description="Fee/Charge Type", alias="FeeType")
    notes: Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]]] = Field(default=None, description="Optional additional notes to supplement the fee/charge details.", alias="Notes")
    other_application_frequency: Optional[OtherApplicationFrequency1] = Field(default=None, alias="OtherApplicationFrequency")
    other_calculation_frequency: Optional[OtherCalculationFrequency1] = Field(default=None, alias="OtherCalculationFrequency")
    other_fee_category_type: Optional[OtherFeeCategoryType] = Field(default=None, alias="OtherFeeCategoryType")
    other_fee_rate_type: Optional[OtherFeeRateType] = Field(default=None, alias="OtherFeeRateType")
    other_fee_type: Optional[OtherFeeType] = Field(default=None, alias="OtherFeeType")
    __properties: ClassVar[List[str]] = ["ApplicationFrequency", "CalculationFrequency", "FeeAmount", "FeeApplicableRange", "FeeCategory", "FeeChargeCap", "FeeRate", "FeeRateType", "FeeType", "Notes", "OtherApplicationFrequency", "OtherCalculationFrequency", "OtherFeeCategoryType", "OtherFeeRateType", "OtherFeeType"]

    @field_validator('application_frequency')
    def application_frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['AccountClosing', 'AccountOpening', 'AcademicTerm', 'ChargingPeriod', 'Daily', 'PerItem', 'Monthly', 'OnAccountAnniversary', 'Other', 'PerHour', 'PerOccurrence', 'PerSheet', 'PerTransaction', 'PerTransactionAmount', 'PerTransactionPercentage', 'Quarterly', 'SixMonthly', 'StatementMonthly', 'Weekly', 'Yearly']):
            raise ValueError("must be one of enum values ('AccountClosing', 'AccountOpening', 'AcademicTerm', 'ChargingPeriod', 'Daily', 'PerItem', 'Monthly', 'OnAccountAnniversary', 'Other', 'PerHour', 'PerOccurrence', 'PerSheet', 'PerTransaction', 'PerTransactionAmount', 'PerTransactionPercentage', 'Quarterly', 'SixMonthly', 'StatementMonthly', 'Weekly', 'Yearly')")
        return value

    @field_validator('calculation_frequency')
    def calculation_frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AccountClosing', 'AccountOpening', 'AcademicTerm', 'ChargingPeriod', 'Daily', 'PerItem', 'Monthly', 'OnAccountAnniversary', 'Other', 'PerHour', 'PerOccurrence', 'PerSheet', 'PerTransaction', 'PerTransactionAmount', 'PerTransactionPercentage', 'Quarterly', 'SixMonthly', 'StatementMonthly', 'Weekly', 'Yearly']):
            raise ValueError("must be one of enum values ('AccountClosing', 'AccountOpening', 'AcademicTerm', 'ChargingPeriod', 'Daily', 'PerItem', 'Monthly', 'OnAccountAnniversary', 'Other', 'PerHour', 'PerOccurrence', 'PerSheet', 'PerTransaction', 'PerTransactionAmount', 'PerTransactionPercentage', 'Quarterly', 'SixMonthly', 'StatementMonthly', 'Weekly', 'Yearly')")
        return value

    @field_validator('fee_amount')
    def fee_amount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$", value):
            raise ValueError(r"must validate the regular expression /^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$/")
        return value

    @field_validator('fee_category')
    def fee_category_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Other', 'Servicing']):
            raise ValueError("must be one of enum values ('Other', 'Servicing')")
        return value

    @field_validator('fee_rate')
    def fee_rate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$", value):
            raise ValueError(r"must validate the regular expression /^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$/")
        return value

    @field_validator('fee_rate_type')
    def fee_rate_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LinkedBaseRate', 'Gross', 'Net', 'Other']):
            raise ValueError("must be one of enum values ('LinkedBaseRate', 'Gross', 'Net', 'Other')")
        return value

    @field_validator('fee_type')
    def fee_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ServiceCAccountFee', 'ServiceCAccountFeeMonthly', 'ServiceCOther', 'Other']):
            raise ValueError("must be one of enum values ('ServiceCAccountFee', 'ServiceCAccountFeeMonthly', 'ServiceCOther', 'Other')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FeeChargeDetailInner1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fee_applicable_range
        if self.fee_applicable_range:
            _dict['FeeApplicableRange'] = self.fee_applicable_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in fee_charge_cap (list)
        _items = []
        if self.fee_charge_cap:
            for _item_fee_charge_cap in self.fee_charge_cap:
                if _item_fee_charge_cap:
                    _items.append(_item_fee_charge_cap.to_dict())
            _dict['FeeChargeCap'] = _items
        # override the default output from pydantic by calling `to_dict()` of other_application_frequency
        if self.other_application_frequency:
            _dict['OtherApplicationFrequency'] = self.other_application_frequency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of other_calculation_frequency
        if self.other_calculation_frequency:
            _dict['OtherCalculationFrequency'] = self.other_calculation_frequency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of other_fee_category_type
        if self.other_fee_category_type:
            _dict['OtherFeeCategoryType'] = self.other_fee_category_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of other_fee_rate_type
        if self.other_fee_rate_type:
            _dict['OtherFeeRateType'] = self.other_fee_rate_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of other_fee_type
        if self.other_fee_type:
            _dict['OtherFeeType'] = self.other_fee_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FeeChargeDetailInner1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApplicationFrequency": obj.get("ApplicationFrequency"),
            "CalculationFrequency": obj.get("CalculationFrequency"),
            "FeeAmount": obj.get("FeeAmount"),
            "FeeApplicableRange": FeeApplicableRange.from_dict(obj["FeeApplicableRange"]) if obj.get("FeeApplicableRange") is not None else None,
            "FeeCategory": obj.get("FeeCategory"),
            "FeeChargeCap": [FeeChargeCapInner1.from_dict(_item) for _item in obj["FeeChargeCap"]] if obj.get("FeeChargeCap") is not None else None,
            "FeeRate": obj.get("FeeRate"),
            "FeeRateType": obj.get("FeeRateType"),
            "FeeType": obj.get("FeeType"),
            "Notes": obj.get("Notes"),
            "OtherApplicationFrequency": OtherApplicationFrequency1.from_dict(obj["OtherApplicationFrequency"]) if obj.get("OtherApplicationFrequency") is not None else None,
            "OtherCalculationFrequency": OtherCalculationFrequency1.from_dict(obj["OtherCalculationFrequency"]) if obj.get("OtherCalculationFrequency") is not None else None,
            "OtherFeeCategoryType": OtherFeeCategoryType.from_dict(obj["OtherFeeCategoryType"]) if obj.get("OtherFeeCategoryType") is not None else None,
            "OtherFeeRateType": OtherFeeRateType.from_dict(obj["OtherFeeRateType"]) if obj.get("OtherFeeRateType") is not None else None,
            "OtherFeeType": OtherFeeType.from_dict(obj["OtherFeeType"]) if obj.get("OtherFeeType") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ob_read_offer1_data_offer_inner_amount import OBReadOffer1DataOfferInnerAmount
from openapi_client.models.ob_read_offer1_data_offer_inner_fee import OBReadOffer1DataOfferInnerFee
from typing import Optional, Set
from typing_extensions import Self

class OBReadOffer1DataOfferInner(BaseModel):
    """
    OBReadOffer1DataOfferInner
    """ # noqa: E501
    account_id: Annotated[str, Field(min_length=1, strict=True, max_length=40)] = Field(description="A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.", alias="AccountId")
    amount: Optional[OBReadOffer1DataOfferInnerAmount] = Field(default=None, alias="Amount")
    description: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=500)]] = Field(default=None, description="Further details of the offer.", alias="Description")
    end_date_time: Optional[datetime] = Field(default=None, description="Date and time at which the offer ends.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00", alias="EndDateTime")
    fee: Optional[OBReadOffer1DataOfferInnerFee] = Field(default=None, alias="Fee")
    offer_id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=40)]] = Field(default=None, description="A unique and immutable identifier used to identify the offer resource. This identifier has no meaning to the account owner.", alias="OfferId")
    offer_type: Optional[StrictStr] = Field(default=None, description="Offer type, in a coded form.", alias="OfferType")
    rate: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Rate associated with the offer type.", alias="Rate")
    start_date_time: Optional[datetime] = Field(default=None, description="Date and time at which the offer starts.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00", alias="StartDateTime")
    term: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=500)]] = Field(default=None, description="Further details of the term of the offer.", alias="Term")
    url: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=256)]] = Field(default=None, description="URL (Uniform Resource Locator) where documentation on the offer can be found", alias="URL")
    value: Optional[StrictInt] = Field(default=None, description="Value associated with the offer type.", alias="Value")
    __properties: ClassVar[List[str]] = ["AccountId", "Amount", "Description", "EndDateTime", "Fee", "OfferId", "OfferType", "Rate", "StartDateTime", "Term", "URL", "Value"]

    @field_validator('offer_type')
    def offer_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BalanceTransfer', 'LimitIncrease', 'MoneyTransfer', 'Other', 'PromotionalRate']):
            raise ValueError("must be one of enum values ('BalanceTransfer', 'LimitIncrease', 'MoneyTransfer', 'Other', 'PromotionalRate')")
        return value

    @field_validator('rate')
    def rate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$", value):
            raise ValueError(r"must validate the regular expression /^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBReadOffer1DataOfferInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['Amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fee
        if self.fee:
            _dict['Fee'] = self.fee.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBReadOffer1DataOfferInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccountId": obj.get("AccountId"),
            "Amount": OBReadOffer1DataOfferInnerAmount.from_dict(obj["Amount"]) if obj.get("Amount") is not None else None,
            "Description": obj.get("Description"),
            "EndDateTime": obj.get("EndDateTime"),
            "Fee": OBReadOffer1DataOfferInnerFee.from_dict(obj["Fee"]) if obj.get("Fee") is not None else None,
            "OfferId": obj.get("OfferId"),
            "OfferType": obj.get("OfferType"),
            "Rate": obj.get("Rate"),
            "StartDateTime": obj.get("StartDateTime"),
            "Term": obj.get("Term"),
            "URL": obj.get("URL"),
            "Value": obj.get("Value")
        })
        return _obj



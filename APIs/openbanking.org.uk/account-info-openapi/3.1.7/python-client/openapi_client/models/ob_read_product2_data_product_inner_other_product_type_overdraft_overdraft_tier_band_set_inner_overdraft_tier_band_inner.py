# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ob_read_product2_data_product_inner_other_product_type_overdraft_overdraft_tier_band_set_inner_overdraft_tier_band_inner_overdraft_fees_charges_inner import OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInnerOverdraftFeesChargesInner
from typing import Optional, Set
from typing_extensions import Self

class OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner(BaseModel):
    """
    Provides overdraft details for a specific tier or band
    """ # noqa: E501
    agreement_length_max: Optional[StrictInt] = Field(default=None, description="Specifies the maximum length of a band for a fixed overdraft agreement", alias="AgreementLengthMax")
    agreement_length_min: Optional[StrictInt] = Field(default=None, description="Specifies the minimum length of a band for a fixed overdraft agreement", alias="AgreementLengthMin")
    agreement_period: Optional[StrictStr] = Field(default=None, description="Specifies the period of a fixed length overdraft agreement", alias="AgreementPeriod")
    bank_guaranteed_indicator: Optional[StrictBool] = Field(default=None, description="Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it�s part of a government scheme, or whether the rate may vary dependent on the applicant�s circumstances.", alias="BankGuaranteedIndicator")
    ear: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="EAR means Effective Annual Rate and/or Equivalent Annual Rate (frequently used interchangeably), being the actual annual interest rate of an Overdraft.", alias="EAR")
    identification: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=35)]] = Field(default=None, description="Unique and unambiguous identification of a  Tier Band for a overdraft.", alias="Identification")
    notes: Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]]] = Field(default=None, alias="Notes")
    overdraft_fees_charges: Optional[List[OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInnerOverdraftFeesChargesInner]] = Field(default=None, alias="OverdraftFeesCharges")
    overdraft_interest_charging_coverage: Optional[StrictStr] = Field(default=None, description="Refers to which interest rate is applied when interests are tiered. For example, if an overdraft balance is �2k and the interest tiers are:- 0-�500 0.1%, 500-1000 0.2%, 1000-10000 0.5%, then the applicable interest rate could either be 0.5% of the entire balance (since the account balance sits in the top interest tier) or (0.1%*500)+(0.2%*500)+(0.5%*1000). In the 1st situation, we say the interest is applied to the �Whole� of the account balance,  and in the 2nd that it is �Tiered�.", alias="OverdraftInterestChargingCoverage")
    tier_value_max: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Maximum value of Overdraft Tier/Band", alias="TierValueMax")
    tier_value_min: Annotated[str, Field(strict=True)] = Field(description="Minimum value of Overdraft Tier/Band", alias="TierValueMin")
    __properties: ClassVar[List[str]] = ["AgreementLengthMax", "AgreementLengthMin", "AgreementPeriod", "BankGuaranteedIndicator", "EAR", "Identification", "Notes", "OverdraftFeesCharges", "OverdraftInterestChargingCoverage", "TierValueMax", "TierValueMin"]

    @field_validator('agreement_period')
    def agreement_period_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PACT', 'PDAY', 'PHYR', 'PMTH', 'PQTR', 'PWEK', 'PYER']):
            raise ValueError("must be one of enum values ('PACT', 'PDAY', 'PHYR', 'PMTH', 'PQTR', 'PWEK', 'PYER')")
        return value

    @field_validator('ear')
    def ear_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$", value):
            raise ValueError(r"must validate the regular expression /^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$/")
        return value

    @field_validator('overdraft_interest_charging_coverage')
    def overdraft_interest_charging_coverage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INBA', 'INTI', 'INWH']):
            raise ValueError("must be one of enum values ('INBA', 'INTI', 'INWH')")
        return value

    @field_validator('tier_value_max')
    def tier_value_max_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$", value):
            raise ValueError(r"must validate the regular expression /^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$/")
        return value

    @field_validator('tier_value_min')
    def tier_value_min_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$", value):
            raise ValueError(r"must validate the regular expression /^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in overdraft_fees_charges (list)
        _items = []
        if self.overdraft_fees_charges:
            for _item_overdraft_fees_charges in self.overdraft_fees_charges:
                if _item_overdraft_fees_charges:
                    _items.append(_item_overdraft_fees_charges.to_dict())
            _dict['OverdraftFeesCharges'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AgreementLengthMax": obj.get("AgreementLengthMax"),
            "AgreementLengthMin": obj.get("AgreementLengthMin"),
            "AgreementPeriod": obj.get("AgreementPeriod"),
            "BankGuaranteedIndicator": obj.get("BankGuaranteedIndicator"),
            "EAR": obj.get("EAR"),
            "Identification": obj.get("Identification"),
            "Notes": obj.get("Notes"),
            "OverdraftFeesCharges": [OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInnerOverdraftFeesChargesInner.from_dict(_item) for _item in obj["OverdraftFeesCharges"]] if obj.get("OverdraftFeesCharges") is not None else None,
            "OverdraftInterestChargingCoverage": obj.get("OverdraftInterestChargingCoverage"),
            "TierValueMax": obj.get("TierValueMax"),
            "TierValueMin": obj.get("TierValueMin")
        })
        return _obj



# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.other_fee_type_inner import OtherFeeTypeInner
from typing import Optional, Set
from typing_extensions import Self

class OverdraftFeeChargeCapInner1(BaseModel):
    """
    Details about any caps (maximum charges) that apply to a particular fee/charge
    """ # noqa: E501
    capping_period: Optional[StrictStr] = Field(default=None, description="Period e.g. day, week, month etc. for which the fee/charge is capped", alias="CappingPeriod")
    fee_cap_amount: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Cap amount charged for a fee/charge", alias="FeeCapAmount")
    fee_cap_occurrence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount", alias="FeeCapOccurrence")
    fee_type: Annotated[List[StrictStr], Field(min_length=1)] = Field(description="Fee/charge type which is being capped", alias="FeeType")
    min_max_type: StrictStr = Field(description="Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution", alias="MinMaxType")
    notes: Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]]] = Field(default=None, description="Notes related to Overdraft fee charge cap", alias="Notes")
    other_fee_type: Optional[List[OtherFeeTypeInner]] = Field(default=None, description="Other fee type code which is not available in the standard code set", alias="OtherFeeType")
    overdraft_control_indicator: Optional[StrictBool] = Field(default=None, description="Specifies for the overdraft control feature/benefit", alias="OverdraftControlIndicator")
    __properties: ClassVar[List[str]] = ["CappingPeriod", "FeeCapAmount", "FeeCapOccurrence", "FeeType", "MinMaxType", "Notes", "OtherFeeType", "OverdraftControlIndicator"]

    @field_validator('capping_period')
    def capping_period_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AcademicTerm', 'Day', 'Half Year', 'Month', 'Quarter', 'Week', 'Year']):
            raise ValueError("must be one of enum values ('AcademicTerm', 'Day', 'Half Year', 'Month', 'Quarter', 'Week', 'Year')")
        return value

    @field_validator('fee_cap_amount')
    def fee_cap_amount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$", value):
            raise ValueError(r"must validate the regular expression /^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$/")
        return value

    @field_validator('fee_type')
    def fee_type_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['ArrangedOverdraft', 'EmergencyBorrowing', 'BorrowingItem', 'OverdraftRenewal', 'AnnualReview', 'OverdraftSetup', 'Surcharge', 'TempOverdraft', 'UnauthorisedBorrowing', 'UnauthorisedPaidTrans', 'Other', 'UnauthorisedUnpaidTrans']):
                raise ValueError("each list item must be one of ('ArrangedOverdraft', 'EmergencyBorrowing', 'BorrowingItem', 'OverdraftRenewal', 'AnnualReview', 'OverdraftSetup', 'Surcharge', 'TempOverdraft', 'UnauthorisedBorrowing', 'UnauthorisedPaidTrans', 'Other', 'UnauthorisedUnpaidTrans')")
        return value

    @field_validator('min_max_type')
    def min_max_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Minimum', 'Maximum']):
            raise ValueError("must be one of enum values ('Minimum', 'Maximum')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OverdraftFeeChargeCapInner1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in other_fee_type (list)
        _items = []
        if self.other_fee_type:
            for _item_other_fee_type in self.other_fee_type:
                if _item_other_fee_type:
                    _items.append(_item_other_fee_type.to_dict())
            _dict['OtherFeeType'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OverdraftFeeChargeCapInner1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CappingPeriod": obj.get("CappingPeriod"),
            "FeeCapAmount": obj.get("FeeCapAmount"),
            "FeeCapOccurrence": obj.get("FeeCapOccurrence"),
            "FeeType": obj.get("FeeType"),
            "MinMaxType": obj.get("MinMaxType"),
            "Notes": obj.get("Notes"),
            "OtherFeeType": [OtherFeeTypeInner.from_dict(_item) for _item in obj["OtherFeeType"]] if obj.get("OtherFeeType") is not None else None,
            "OverdraftControlIndicator": obj.get("OverdraftControlIndicator")
        })
        return _obj



# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ob_other_code_type10 import OBOtherCodeType10
from typing import Optional, Set
from typing_extensions import Self

class OBReadProduct2DataProductInnerOtherProductTypeProductDetails(BaseModel):
    """
    OBReadProduct2DataProductInnerOtherProductTypeProductDetails
    """ # noqa: E501
    fee_free_length: Optional[StrictInt] = Field(default=None, description="The length/duration of the fee free period", alias="FeeFreeLength")
    fee_free_length_period: Optional[StrictStr] = Field(default=None, description="The unit of period (days, weeks, months etc.) of the promotional length", alias="FeeFreeLengthPeriod")
    monthly_maximum_charge: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The maximum relevant charges that could accrue as defined fully in Part 7 of the CMA order", alias="MonthlyMaximumCharge")
    notes: Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]]] = Field(default=None, alias="Notes")
    other_segment: Optional[OBOtherCodeType10] = Field(default=None, alias="OtherSegment")
    segment: Optional[List[StrictStr]] = Field(default=None, alias="Segment")
    __properties: ClassVar[List[str]] = ["FeeFreeLength", "FeeFreeLengthPeriod", "MonthlyMaximumCharge", "Notes", "OtherSegment", "Segment"]

    @field_validator('fee_free_length_period')
    def fee_free_length_period_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PACT', 'PDAY', 'PHYR', 'PMTH', 'PQTR', 'PWEK', 'PYER']):
            raise ValueError("must be one of enum values ('PACT', 'PDAY', 'PHYR', 'PMTH', 'PQTR', 'PWEK', 'PYER')")
        return value

    @field_validator('monthly_maximum_charge')
    def monthly_maximum_charge_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$", value):
            raise ValueError(r"must validate the regular expression /^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$/")
        return value

    @field_validator('segment')
    def segment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['GEAS', 'GEBA', 'GEBR', 'GEBU', 'GECI', 'GECS', 'GEFB', 'GEFG', 'GEG', 'GEGR', 'GEGS', 'GEOT', 'GEOV', 'GEPA', 'GEPR', 'GERE', 'GEST', 'GEYA', 'GEYO', 'PSCA', 'PSES', 'PSNC', 'PSNP', 'PSRG', 'PSSS', 'PSST', 'PSSW']):
                raise ValueError("each list item must be one of ('GEAS', 'GEBA', 'GEBR', 'GEBU', 'GECI', 'GECS', 'GEFB', 'GEFG', 'GEG', 'GEGR', 'GEGS', 'GEOT', 'GEOV', 'GEPA', 'GEPR', 'GERE', 'GEST', 'GEYA', 'GEYO', 'PSCA', 'PSES', 'PSNC', 'PSNP', 'PSRG', 'PSSS', 'PSST', 'PSSW')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBReadProduct2DataProductInnerOtherProductTypeProductDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of other_segment
        if self.other_segment:
            _dict['OtherSegment'] = self.other_segment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBReadProduct2DataProductInnerOtherProductTypeProductDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "FeeFreeLength": obj.get("FeeFreeLength"),
            "FeeFreeLengthPeriod": obj.get("FeeFreeLengthPeriod"),
            "MonthlyMaximumCharge": obj.get("MonthlyMaximumCharge"),
            "Notes": obj.get("Notes"),
            "OtherSegment": OBOtherCodeType10.from_dict(obj["OtherSegment"]) if obj.get("OtherSegment") is not None else None,
            "Segment": obj.get("Segment")
        })
        return _obj



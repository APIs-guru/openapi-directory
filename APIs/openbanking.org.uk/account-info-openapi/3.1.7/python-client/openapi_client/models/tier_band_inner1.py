# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.other_application_frequency import OtherApplicationFrequency
from openapi_client.models.other_bank_interest_type import OtherBankInterestType
from openapi_client.models.other_calculation_frequency import OtherCalculationFrequency
from typing import Optional, Set
from typing_extensions import Self

class TierBandInner1(BaseModel):
    """
    Tier Band Details
    """ # noqa: E501
    aer: Annotated[str, Field(strict=True)] = Field(description="The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made.   Read more: Annual Equivalent Rate (AER) http://www.investopedia.com/terms/a/aer.asp#ixzz4gfR7IO1A", alias="AER")
    application_frequency: StrictStr = Field(description="How often is interest applied to the PCA for this tier/band i.e. how often the financial institution pays accumulated interest to the customer's PCA.", alias="ApplicationFrequency")
    bank_interest_rate: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Bank Interest for the PCA product", alias="BankInterestRate")
    bank_interest_rate_type: Optional[StrictStr] = Field(default=None, description="Interest rate types, other than AER, which financial institutions may use to describe the annual interest rate payable to the PCA.", alias="BankInterestRateType")
    calculation_frequency: Optional[StrictStr] = Field(default=None, description="How often is credit interest calculated for the account.", alias="CalculationFrequency")
    deposit_interest_applied_coverage: Optional[StrictStr] = Field(default=None, description="Amount on which Interest applied.", alias="DepositInterestAppliedCoverage")
    fixed_variable_interest_rate_type: StrictStr = Field(description="Type of interest rate, Fixed or Variable", alias="FixedVariableInterestRateType")
    identification: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=35)]] = Field(default=None, description="Unique and unambiguous identification of a  Tier Band for a PCA.", alias="Identification")
    notes: Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]]] = Field(default=None, description="Optional additional notes to supplement the Tier Band details", alias="Notes")
    other_application_frequency: Optional[OtherApplicationFrequency] = Field(default=None, alias="OtherApplicationFrequency")
    other_bank_interest_type: Optional[OtherBankInterestType] = Field(default=None, alias="OtherBankInterestType")
    other_calculation_frequency: Optional[OtherCalculationFrequency] = Field(default=None, alias="OtherCalculationFrequency")
    tier_value_maximum: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Maximum deposit value for which the credit interest tier applies.", alias="TierValueMaximum")
    tier_value_minimum: Annotated[str, Field(strict=True)] = Field(description="Minimum deposit value for which the credit interest tier applies.", alias="TierValueMinimum")
    __properties: ClassVar[List[str]] = ["AER", "ApplicationFrequency", "BankInterestRate", "BankInterestRateType", "CalculationFrequency", "DepositInterestAppliedCoverage", "FixedVariableInterestRateType", "Identification", "Notes", "OtherApplicationFrequency", "OtherBankInterestType", "OtherCalculationFrequency", "TierValueMaximum", "TierValueMinimum"]

    @field_validator('aer')
    def aer_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$", value):
            raise ValueError(r"must validate the regular expression /^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$/")
        return value

    @field_validator('application_frequency')
    def application_frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['PerAcademicTerm', 'Daily', 'HalfYearly', 'Monthly', 'Other', 'Quarterly', 'PerStatementDate', 'Weekly', 'Yearly']):
            raise ValueError("must be one of enum values ('PerAcademicTerm', 'Daily', 'HalfYearly', 'Monthly', 'Other', 'Quarterly', 'PerStatementDate', 'Weekly', 'Yearly')")
        return value

    @field_validator('bank_interest_rate')
    def bank_interest_rate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$", value):
            raise ValueError(r"must validate the regular expression /^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$/")
        return value

    @field_validator('bank_interest_rate_type')
    def bank_interest_rate_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LinkedBaseRate', 'Gross', 'Net', 'Other']):
            raise ValueError("must be one of enum values ('LinkedBaseRate', 'Gross', 'Net', 'Other')")
        return value

    @field_validator('calculation_frequency')
    def calculation_frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PerAcademicTerm', 'Daily', 'HalfYearly', 'Monthly', 'Other', 'Quarterly', 'PerStatementDate', 'Weekly', 'Yearly']):
            raise ValueError("must be one of enum values ('PerAcademicTerm', 'Daily', 'HalfYearly', 'Monthly', 'Other', 'Quarterly', 'PerStatementDate', 'Weekly', 'Yearly')")
        return value

    @field_validator('deposit_interest_applied_coverage')
    def deposit_interest_applied_coverage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Tiered', 'Whole']):
            raise ValueError("must be one of enum values ('Tiered', 'Whole')")
        return value

    @field_validator('fixed_variable_interest_rate_type')
    def fixed_variable_interest_rate_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Fixed', 'Variable']):
            raise ValueError("must be one of enum values ('Fixed', 'Variable')")
        return value

    @field_validator('tier_value_maximum')
    def tier_value_maximum_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$", value):
            raise ValueError(r"must validate the regular expression /^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$/")
        return value

    @field_validator('tier_value_minimum')
    def tier_value_minimum_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$", value):
            raise ValueError(r"must validate the regular expression /^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TierBandInner1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of other_application_frequency
        if self.other_application_frequency:
            _dict['OtherApplicationFrequency'] = self.other_application_frequency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of other_bank_interest_type
        if self.other_bank_interest_type:
            _dict['OtherBankInterestType'] = self.other_bank_interest_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of other_calculation_frequency
        if self.other_calculation_frequency:
            _dict['OtherCalculationFrequency'] = self.other_calculation_frequency.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TierBandInner1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AER": obj.get("AER"),
            "ApplicationFrequency": obj.get("ApplicationFrequency"),
            "BankInterestRate": obj.get("BankInterestRate"),
            "BankInterestRateType": obj.get("BankInterestRateType"),
            "CalculationFrequency": obj.get("CalculationFrequency"),
            "DepositInterestAppliedCoverage": obj.get("DepositInterestAppliedCoverage"),
            "FixedVariableInterestRateType": obj.get("FixedVariableInterestRateType"),
            "Identification": obj.get("Identification"),
            "Notes": obj.get("Notes"),
            "OtherApplicationFrequency": OtherApplicationFrequency.from_dict(obj["OtherApplicationFrequency"]) if obj.get("OtherApplicationFrequency") is not None else None,
            "OtherBankInterestType": OtherBankInterestType.from_dict(obj["OtherBankInterestType"]) if obj.get("OtherBankInterestType") is not None else None,
            "OtherCalculationFrequency": OtherCalculationFrequency.from_dict(obj["OtherCalculationFrequency"]) if obj.get("OtherCalculationFrequency") is not None else None,
            "TierValueMaximum": obj.get("TierValueMaximum"),
            "TierValueMinimum": obj.get("TierValueMinimum")
        })
        return _obj



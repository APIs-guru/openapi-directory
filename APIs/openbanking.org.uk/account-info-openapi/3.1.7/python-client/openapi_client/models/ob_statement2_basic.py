# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ob_external_statement_type1_code import OBExternalStatementType1Code
from openapi_client.models.ob_statement2_statement_benefit_inner import OBStatement2StatementBenefitInner
from openapi_client.models.ob_statement2_statement_date_time_inner import OBStatement2StatementDateTimeInner
from openapi_client.models.ob_statement2_statement_fee_inner import OBStatement2StatementFeeInner
from openapi_client.models.ob_statement2_statement_interest_inner import OBStatement2StatementInterestInner
from openapi_client.models.ob_statement2_statement_rate_inner import OBStatement2StatementRateInner
from openapi_client.models.ob_statement2_statement_value_inner import OBStatement2StatementValueInner
from typing import Optional, Set
from typing_extensions import Self

class OBStatement2Basic(BaseModel):
    """
    Provides further details on a statement resource.
    """ # noqa: E501
    account_id: Annotated[str, Field(min_length=1, strict=True, max_length=40)] = Field(description="A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.", alias="AccountId")
    creation_date_time: datetime = Field(description="Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00", alias="CreationDateTime")
    end_date_time: datetime = Field(description="Date and time at which the statement period ends.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00", alias="EndDateTime")
    start_date_time: datetime = Field(description="Date and time at which the statement period starts.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00", alias="StartDateTime")
    statement_benefit: Optional[List[OBStatement2StatementBenefitInner]] = Field(default=None, alias="StatementBenefit")
    statement_date_time: Optional[List[OBStatement2StatementDateTimeInner]] = Field(default=None, alias="StatementDateTime")
    statement_description: Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=500)]]] = Field(default=None, alias="StatementDescription")
    statement_fee: Optional[List[OBStatement2StatementFeeInner]] = Field(default=None, alias="StatementFee")
    statement_id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=40)]] = Field(default=None, description="Unique identifier for the statement resource within an servicing institution. This identifier is both unique and immutable.", alias="StatementId")
    statement_interest: Optional[List[OBStatement2StatementInterestInner]] = Field(default=None, alias="StatementInterest")
    statement_rate: Optional[List[OBStatement2StatementRateInner]] = Field(default=None, alias="StatementRate")
    statement_reference: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=35)]] = Field(default=None, description="Unique reference for the statement. This reference may be optionally populated if available.", alias="StatementReference")
    statement_value: Optional[List[OBStatement2StatementValueInner]] = Field(default=None, alias="StatementValue")
    type: OBExternalStatementType1Code = Field(alias="Type")
    __properties: ClassVar[List[str]] = ["AccountId", "CreationDateTime", "EndDateTime", "StartDateTime", "StatementBenefit", "StatementDateTime", "StatementDescription", "StatementFee", "StatementId", "StatementInterest", "StatementRate", "StatementReference", "StatementValue", "Type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBStatement2Basic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in statement_benefit (list)
        _items = []
        if self.statement_benefit:
            for _item_statement_benefit in self.statement_benefit:
                if _item_statement_benefit:
                    _items.append(_item_statement_benefit.to_dict())
            _dict['StatementBenefit'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in statement_date_time (list)
        _items = []
        if self.statement_date_time:
            for _item_statement_date_time in self.statement_date_time:
                if _item_statement_date_time:
                    _items.append(_item_statement_date_time.to_dict())
            _dict['StatementDateTime'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in statement_fee (list)
        _items = []
        if self.statement_fee:
            for _item_statement_fee in self.statement_fee:
                if _item_statement_fee:
                    _items.append(_item_statement_fee.to_dict())
            _dict['StatementFee'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in statement_interest (list)
        _items = []
        if self.statement_interest:
            for _item_statement_interest in self.statement_interest:
                if _item_statement_interest:
                    _items.append(_item_statement_interest.to_dict())
            _dict['StatementInterest'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in statement_rate (list)
        _items = []
        if self.statement_rate:
            for _item_statement_rate in self.statement_rate:
                if _item_statement_rate:
                    _items.append(_item_statement_rate.to_dict())
            _dict['StatementRate'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in statement_value (list)
        _items = []
        if self.statement_value:
            for _item_statement_value in self.statement_value:
                if _item_statement_value:
                    _items.append(_item_statement_value.to_dict())
            _dict['StatementValue'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBStatement2Basic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccountId": obj.get("AccountId"),
            "CreationDateTime": obj.get("CreationDateTime"),
            "EndDateTime": obj.get("EndDateTime"),
            "StartDateTime": obj.get("StartDateTime"),
            "StatementBenefit": [OBStatement2StatementBenefitInner.from_dict(_item) for _item in obj["StatementBenefit"]] if obj.get("StatementBenefit") is not None else None,
            "StatementDateTime": [OBStatement2StatementDateTimeInner.from_dict(_item) for _item in obj["StatementDateTime"]] if obj.get("StatementDateTime") is not None else None,
            "StatementDescription": obj.get("StatementDescription"),
            "StatementFee": [OBStatement2StatementFeeInner.from_dict(_item) for _item in obj["StatementFee"]] if obj.get("StatementFee") is not None else None,
            "StatementId": obj.get("StatementId"),
            "StatementInterest": [OBStatement2StatementInterestInner.from_dict(_item) for _item in obj["StatementInterest"]] if obj.get("StatementInterest") is not None else None,
            "StatementRate": [OBStatement2StatementRateInner.from_dict(_item) for _item in obj["StatementRate"]] if obj.get("StatementRate") is not None else None,
            "StatementReference": obj.get("StatementReference"),
            "StatementValue": [OBStatement2StatementValueInner.from_dict(_item) for _item in obj["StatementValue"]] if obj.get("StatementValue") is not None else None,
            "Type": obj.get("Type")
        })
        return _obj



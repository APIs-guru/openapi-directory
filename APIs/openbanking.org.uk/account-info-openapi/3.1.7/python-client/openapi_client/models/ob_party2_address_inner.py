# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ob_address_type_code import OBAddressTypeCode
from typing import Optional, Set
from typing_extensions import Self

class OBParty2AddressInner(BaseModel):
    """
    Postal address of a party.
    """ # noqa: E501
    address_line: Optional[Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=70)]], Field(min_length=0, max_length=5)]] = Field(default=None, alias="AddressLine")
    address_type: Optional[OBAddressTypeCode] = Field(default=None, alias="AddressType")
    building_number: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=16)]] = Field(default=None, description="Number that identifies the position of a building on a street.", alias="BuildingNumber")
    country: Annotated[str, Field(strict=True)] = Field(description="Nation with its own government, occupying a particular territory.", alias="Country")
    country_sub_division: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=35)]] = Field(default=None, description="Identifies a subdivision of a country eg, state, region, county.", alias="CountrySubDivision")
    post_code: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=16)]] = Field(default=None, description="Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail.", alias="PostCode")
    street_name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=70)]] = Field(default=None, description="Name of a street or thoroughfare.", alias="StreetName")
    town_name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=35)]] = Field(default=None, description="Name of a built-up area, with defined boundaries, and a local government.", alias="TownName")
    __properties: ClassVar[List[str]] = ["AddressLine", "AddressType", "BuildingNumber", "Country", "CountrySubDivision", "PostCode", "StreetName", "TownName"]

    @field_validator('country')
    def country_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Z]{2,2}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{2,2}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBParty2AddressInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBParty2AddressInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AddressLine": obj.get("AddressLine"),
            "AddressType": obj.get("AddressType"),
            "BuildingNumber": obj.get("BuildingNumber"),
            "Country": obj.get("Country"),
            "CountrySubDivision": obj.get("CountrySubDivision"),
            "PostCode": obj.get("PostCode"),
            "StreetName": obj.get("StreetName"),
            "TownName": obj.get("TownName")
        })
        return _obj



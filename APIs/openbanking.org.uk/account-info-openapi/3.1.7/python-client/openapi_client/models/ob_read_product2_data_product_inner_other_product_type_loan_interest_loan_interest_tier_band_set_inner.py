# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ob_interest_calculation_method1_code import OBInterestCalculationMethod1Code
from openapi_client.models.ob_other_code_type10 import OBOtherCodeType10
from openapi_client.models.ob_read_product2_data_product_inner_other_product_type_loan_interest_loan_interest_tier_band_set_inner_loan_interest_fees_charges_inner import OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestFeesChargesInner
from openapi_client.models.ob_read_product2_data_product_inner_other_product_type_loan_interest_loan_interest_tier_band_set_inner_loan_interest_tier_band_inner import OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner
from typing import Optional, Set
from typing_extensions import Self

class OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInner(BaseModel):
    """
    The group of tiers or bands for which debit interest can be applied.
    """ # noqa: E501
    calculation_method: OBInterestCalculationMethod1Code = Field(alias="CalculationMethod")
    identification: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=35)]] = Field(default=None, description="Loan interest tierbandset identification. Used by  loan providers for internal use purpose.", alias="Identification")
    loan_interest_fees_charges: Optional[List[OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestFeesChargesInner]] = Field(default=None, alias="LoanInterestFeesCharges")
    loan_interest_tier_band: Annotated[List[OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner], Field(min_length=1)] = Field(alias="LoanInterestTierBand")
    notes: Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]]] = Field(default=None, alias="Notes")
    other_calculation_method: Optional[OBOtherCodeType10] = Field(default=None, alias="OtherCalculationMethod")
    tier_band_method: StrictStr = Field(description="The methodology of how credit interest is charged. It can be:- 1. Banded Interest rates are banded. i.e. Increasing rate on whole balance as balance increases. 2. Tiered Interest rates are tiered. i.e. increasing rate for each tier as balance increases, but interest paid on tier fixed for that tier and not on whole balance. 3. Whole The same interest rate is applied irrespective of the SME Loan balance", alias="TierBandMethod")
    __properties: ClassVar[List[str]] = ["CalculationMethod", "Identification", "LoanInterestFeesCharges", "LoanInterestTierBand", "Notes", "OtherCalculationMethod", "TierBandMethod"]

    @field_validator('tier_band_method')
    def tier_band_method_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['INBA', 'INTI', 'INWH']):
            raise ValueError("must be one of enum values ('INBA', 'INTI', 'INWH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in loan_interest_fees_charges (list)
        _items = []
        if self.loan_interest_fees_charges:
            for _item_loan_interest_fees_charges in self.loan_interest_fees_charges:
                if _item_loan_interest_fees_charges:
                    _items.append(_item_loan_interest_fees_charges.to_dict())
            _dict['LoanInterestFeesCharges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in loan_interest_tier_band (list)
        _items = []
        if self.loan_interest_tier_band:
            for _item_loan_interest_tier_band in self.loan_interest_tier_band:
                if _item_loan_interest_tier_band:
                    _items.append(_item_loan_interest_tier_band.to_dict())
            _dict['LoanInterestTierBand'] = _items
        # override the default output from pydantic by calling `to_dict()` of other_calculation_method
        if self.other_calculation_method:
            _dict['OtherCalculationMethod'] = self.other_calculation_method.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CalculationMethod": obj.get("CalculationMethod"),
            "Identification": obj.get("Identification"),
            "LoanInterestFeesCharges": [OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestFeesChargesInner.from_dict(_item) for _item in obj["LoanInterestFeesCharges"]] if obj.get("LoanInterestFeesCharges") is not None else None,
            "LoanInterestTierBand": [OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner.from_dict(_item) for _item in obj["LoanInterestTierBand"]] if obj.get("LoanInterestTierBand") is not None else None,
            "Notes": obj.get("Notes"),
            "OtherCalculationMethod": OBOtherCodeType10.from_dict(obj["OtherCalculationMethod"]) if obj.get("OtherCalculationMethod") is not None else None,
            "TierBandMethod": obj.get("TierBandMethod")
        })
        return _obj



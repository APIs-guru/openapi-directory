# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ob_read_product2_data_product_inner_other_product_type import OBReadProduct2DataProductInnerOtherProductType
from openapi_client.models.obbca_data1 import OBBCAData1
from openapi_client.models.obpca_data1 import OBPCAData1
from typing import Optional, Set
from typing_extensions import Self

class OBReadProduct2DataProductInner(BaseModel):
    """
    Product details associated with the Account
    """ # noqa: E501
    account_id: Annotated[str, Field(min_length=1, strict=True, max_length=40)] = Field(description="A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.", alias="AccountId")
    bca: Optional[OBBCAData1] = Field(default=None, alias="BCA")
    marketing_state_id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=35)]] = Field(default=None, description="Unique and unambiguous identification of a  Product Marketing State.", alias="MarketingStateId")
    other_product_type: Optional[OBReadProduct2DataProductInnerOtherProductType] = Field(default=None, alias="OtherProductType")
    pca: Optional[OBPCAData1] = Field(default=None, alias="PCA")
    product_id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=40)]] = Field(default=None, description="The unique ID that has been internally assigned by the financial institution to each of the current account banking products they market to their retail and/or small to medium enterprise (SME) customers.", alias="ProductId")
    product_name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=350)]] = Field(default=None, description="The name of the Product used for marketing purposes from a customer perspective. I.e. what the customer would recognise.", alias="ProductName")
    product_type: StrictStr = Field(description="Product type : Personal Current Account, Business Current Account", alias="ProductType")
    secondary_product_id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=70)]] = Field(default=None, description="Any secondary Identification which  supports Product Identifier to uniquely identify the current account banking products.", alias="SecondaryProductId")
    __properties: ClassVar[List[str]] = ["AccountId", "BCA", "MarketingStateId", "OtherProductType", "PCA", "ProductId", "ProductName", "ProductType", "SecondaryProductId"]

    @field_validator('product_type')
    def product_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['BusinessCurrentAccount', 'CommercialCreditCard', 'Other', 'PersonalCurrentAccount', 'SMELoan']):
            raise ValueError("must be one of enum values ('BusinessCurrentAccount', 'CommercialCreditCard', 'Other', 'PersonalCurrentAccount', 'SMELoan')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBReadProduct2DataProductInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bca
        if self.bca:
            _dict['BCA'] = self.bca.to_dict()
        # override the default output from pydantic by calling `to_dict()` of other_product_type
        if self.other_product_type:
            _dict['OtherProductType'] = self.other_product_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pca
        if self.pca:
            _dict['PCA'] = self.pca.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBReadProduct2DataProductInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccountId": obj.get("AccountId"),
            "BCA": OBBCAData1.from_dict(obj["BCA"]) if obj.get("BCA") is not None else None,
            "MarketingStateId": obj.get("MarketingStateId"),
            "OtherProductType": OBReadProduct2DataProductInnerOtherProductType.from_dict(obj["OtherProductType"]) if obj.get("OtherProductType") is not None else None,
            "PCA": OBPCAData1.from_dict(obj["PCA"]) if obj.get("PCA") is not None else None,
            "ProductId": obj.get("ProductId"),
            "ProductName": obj.get("ProductName"),
            "ProductType": obj.get("ProductType"),
            "SecondaryProductId": obj.get("SecondaryProductId")
        })
        return _obj



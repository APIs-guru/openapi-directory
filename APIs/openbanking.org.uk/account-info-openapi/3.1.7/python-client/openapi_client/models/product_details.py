# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ProductDetails(BaseModel):
    """
    ProductDetails
    """ # noqa: E501
    fee_free_length: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The length/duration of the fee free period", alias="FeeFreeLength")
    fee_free_length_period: Optional[StrictStr] = Field(default=None, description="The unit of period (days, weeks, months etc.) of the promotional length", alias="FeeFreeLengthPeriod")
    notes: Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]]] = Field(default=None, description="Optional additional notes to supplement the Core product details", alias="Notes")
    segment: Optional[List[StrictStr]] = Field(default=None, description="Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.  Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd  With respect to BCA products, they are segmented in relation to different markets that they wish to focus on. ", alias="Segment")
    __properties: ClassVar[List[str]] = ["FeeFreeLength", "FeeFreeLengthPeriod", "Notes", "Segment"]

    @field_validator('fee_free_length_period')
    def fee_free_length_period_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Day', 'Half Year', 'Month', 'Quarter', 'Week', 'Year']):
            raise ValueError("must be one of enum values ('Day', 'Half Year', 'Month', 'Quarter', 'Week', 'Year')")
        return value

    @field_validator('segment')
    def segment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['ClientAccount', 'Standard', 'NonCommercialChaitiesClbSoc', 'NonCommercialPublicAuthGovt', 'Religious', 'SectorSpecific', 'Startup', 'Switcher']):
                raise ValueError("each list item must be one of ('ClientAccount', 'Standard', 'NonCommercialChaitiesClbSoc', 'NonCommercialPublicAuthGovt', 'Religious', 'SectorSpecific', 'Startup', 'Switcher')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "FeeFreeLength": obj.get("FeeFreeLength"),
            "FeeFreeLengthPeriod": obj.get("FeeFreeLengthPeriod"),
            "Notes": obj.get("Notes"),
            "Segment": obj.get("Segment")
        })
        return _obj



# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ob_postal_address6 import OBPostalAddress6
from typing import Optional, Set
from typing_extensions import Self

class OBBranchAndFinancialInstitutionIdentification61(BaseModel):
    """
    Financial institution servicing an account for the creditor.
    """ # noqa: E501
    identification: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=35)]] = Field(default=None, description="Unique and unambiguous identification of a financial institution or a branch of a financial institution.", alias="Identification")
    name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=140)]] = Field(default=None, description="Name by which an agent is known and which is usually used to identify that agent.", alias="Name")
    postal_address: Optional[OBPostalAddress6] = Field(default=None, alias="PostalAddress")
    scheme_name: Optional[StrictStr] = Field(default=None, description="Name of the identification scheme, in a coded form as published in an external list.", alias="SchemeName")
    __properties: ClassVar[List[str]] = ["Identification", "Name", "PostalAddress", "SchemeName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBBranchAndFinancialInstitutionIdentification61 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of postal_address
        if self.postal_address:
            _dict['PostalAddress'] = self.postal_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBBranchAndFinancialInstitutionIdentification61 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Identification": obj.get("Identification"),
            "Name": obj.get("Name"),
            "PostalAddress": OBPostalAddress6.from_dict(obj["PostalAddress"]) if obj.get("PostalAddress") is not None else None,
            "SchemeName": obj.get("SchemeName")
        })
        return _obj



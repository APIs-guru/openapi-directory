# coding: utf-8

"""
    Account and Transaction API Specification

    Swagger for Account and Transaction API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ob_active_or_historic_currency_and_amount10 import OBActiveOrHistoricCurrencyAndAmount10
from openapi_client.models.ob_active_or_historic_currency_and_amount9 import OBActiveOrHistoricCurrencyAndAmount9
from openapi_client.models.ob_bank_transaction_code_structure1 import OBBankTransactionCodeStructure1
from openapi_client.models.ob_credit_debit_code1 import OBCreditDebitCode1
from openapi_client.models.ob_currency_exchange5 import OBCurrencyExchange5
from openapi_client.models.ob_entry_status1_code import OBEntryStatus1Code
from openapi_client.models.ob_transaction_card_instrument1 import OBTransactionCardInstrument1
from openapi_client.models.ob_transaction_mutability1_code import OBTransactionMutability1Code
from openapi_client.models.proprietary_bank_transaction_code_structure1 import ProprietaryBankTransactionCodeStructure1
from typing import Optional, Set
from typing_extensions import Self

class OBTransaction6Basic(BaseModel):
    """
    Provides further details on an entry in the report.
    """ # noqa: E501
    account_id: Annotated[str, Field(min_length=1, strict=True, max_length=40)] = Field(description="A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.", alias="AccountId")
    address_line: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=70)]] = Field(default=None, description="Information that locates and identifies a specific address for a transaction entry, that is presented in free format text.", alias="AddressLine")
    amount: OBActiveOrHistoricCurrencyAndAmount9 = Field(alias="Amount")
    bank_transaction_code: Optional[OBBankTransactionCodeStructure1] = Field(default=None, alias="BankTransactionCode")
    booking_date_time: datetime = Field(description="Date and time when a transaction entry is posted to an account on the account servicer's books. Usage: Booking date is the expected booking date, unless the status is booked, in which case it is the actual booking date.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00", alias="BookingDateTime")
    card_instrument: Optional[OBTransactionCardInstrument1] = Field(default=None, alias="CardInstrument")
    charge_amount: Optional[OBActiveOrHistoricCurrencyAndAmount10] = Field(default=None, alias="ChargeAmount")
    credit_debit_indicator: OBCreditDebitCode1 = Field(alias="CreditDebitIndicator")
    currency_exchange: Optional[OBCurrencyExchange5] = Field(default=None, alias="CurrencyExchange")
    proprietary_bank_transaction_code: Optional[ProprietaryBankTransactionCodeStructure1] = Field(default=None, alias="ProprietaryBankTransactionCode")
    statement_reference: Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=35)]]] = Field(default=None, alias="StatementReference")
    status: OBEntryStatus1Code = Field(alias="Status")
    supplementary_data: Optional[Dict[str, Any]] = Field(default=None, description="Additional information that can not be captured in the structured fields and/or any other specific block.", alias="SupplementaryData")
    transaction_id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=210)]] = Field(default=None, description="Unique identifier for the transaction within an servicing institution. This identifier is both unique and immutable.", alias="TransactionId")
    transaction_mutability: Optional[OBTransactionMutability1Code] = Field(default=None, alias="TransactionMutability")
    transaction_reference: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=210)]] = Field(default=None, description="Unique reference for the transaction. This reference is optionally populated, and may as an example be the FPID in the Faster Payments context.", alias="TransactionReference")
    value_date_time: Optional[datetime] = Field(default=None, description="Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry. Usage: If transaction entry status is pending and value date is present, then the value date refers to an expected/requested value date. For transaction entries subject to availability/float and for which availability information is provided, the value date must not be used. In this case the availability component identifies the number of availability days.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00", alias="ValueDateTime")
    __properties: ClassVar[List[str]] = ["AccountId", "AddressLine", "Amount", "BankTransactionCode", "BookingDateTime", "CardInstrument", "ChargeAmount", "CreditDebitIndicator", "CurrencyExchange", "ProprietaryBankTransactionCode", "StatementReference", "Status", "SupplementaryData", "TransactionId", "TransactionMutability", "TransactionReference", "ValueDateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBTransaction6Basic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['Amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bank_transaction_code
        if self.bank_transaction_code:
            _dict['BankTransactionCode'] = self.bank_transaction_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card_instrument
        if self.card_instrument:
            _dict['CardInstrument'] = self.card_instrument.to_dict()
        # override the default output from pydantic by calling `to_dict()` of charge_amount
        if self.charge_amount:
            _dict['ChargeAmount'] = self.charge_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency_exchange
        if self.currency_exchange:
            _dict['CurrencyExchange'] = self.currency_exchange.to_dict()
        # override the default output from pydantic by calling `to_dict()` of proprietary_bank_transaction_code
        if self.proprietary_bank_transaction_code:
            _dict['ProprietaryBankTransactionCode'] = self.proprietary_bank_transaction_code.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBTransaction6Basic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccountId": obj.get("AccountId"),
            "AddressLine": obj.get("AddressLine"),
            "Amount": OBActiveOrHistoricCurrencyAndAmount9.from_dict(obj["Amount"]) if obj.get("Amount") is not None else None,
            "BankTransactionCode": OBBankTransactionCodeStructure1.from_dict(obj["BankTransactionCode"]) if obj.get("BankTransactionCode") is not None else None,
            "BookingDateTime": obj.get("BookingDateTime"),
            "CardInstrument": OBTransactionCardInstrument1.from_dict(obj["CardInstrument"]) if obj.get("CardInstrument") is not None else None,
            "ChargeAmount": OBActiveOrHistoricCurrencyAndAmount10.from_dict(obj["ChargeAmount"]) if obj.get("ChargeAmount") is not None else None,
            "CreditDebitIndicator": obj.get("CreditDebitIndicator"),
            "CurrencyExchange": OBCurrencyExchange5.from_dict(obj["CurrencyExchange"]) if obj.get("CurrencyExchange") is not None else None,
            "ProprietaryBankTransactionCode": ProprietaryBankTransactionCodeStructure1.from_dict(obj["ProprietaryBankTransactionCode"]) if obj.get("ProprietaryBankTransactionCode") is not None else None,
            "StatementReference": obj.get("StatementReference"),
            "Status": obj.get("Status"),
            "SupplementaryData": obj.get("SupplementaryData"),
            "TransactionId": obj.get("TransactionId"),
            "TransactionMutability": obj.get("TransactionMutability"),
            "TransactionReference": obj.get("TransactionReference"),
            "ValueDateTime": obj.get("ValueDateTime")
        })
        return _obj



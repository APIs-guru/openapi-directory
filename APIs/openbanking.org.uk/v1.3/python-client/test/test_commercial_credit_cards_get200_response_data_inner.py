# coding: utf-8

"""
    Open Data API

    Latest Swagger specification for OpenData

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.commercial_credit_cards_get200_response_data_inner import CommercialCreditCardsGet200ResponseDataInner

class TestCommercialCreditCardsGet200ResponseDataInner(unittest.TestCase):
    """CommercialCreditCardsGet200ResponseDataInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CommercialCreditCardsGet200ResponseDataInner:
        """Test CommercialCreditCardsGet200ResponseDataInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CommercialCreditCardsGet200ResponseDataInner`
        """
        model = CommercialCreditCardsGet200ResponseDataInner()
        if include_optional:
            return CommercialCreditCardsGet200ResponseDataInner(
                benefits = openapi_client.models.business_current_account_benefits.Business_current_account_Benefits(
                    benefit = True, 
                    benefit_group = [
                        openapi_client.models.business_current_account_benefits_benefit_group_inner.Business_current_account_Benefits_BenefitGroup_inner(
                            benefit_item = openapi_client.models.business_current_account_benefits_benefit_group_inner_benefit_item.Business_current_account_Benefits_BenefitGroup_inner_BenefitItem(
                                benefit_detail = [
                                    openapi_client.models.business_current_account_benefits_benefit_group_inner_benefit_item_benefit_detail_inner.Business_current_account_Benefits_BenefitGroup_inner_BenefitItem_BenefitDetail_inner(
                                        benefit_description = '', 
                                        benefit_id = '', 
                                        benefit_name = '', 
                                        benefit_type = '', 
                                        benefit_value = '', 
                                        counter = 56, 
                                        criteria_type = [
                                            'CashDeposit'
                                            ], 
                                        default_to_accounts = True, 
                                        maximum_criteria = '-80728.8', 
                                        minimum_criteria = '-80728.8', 
                                        promotion_end_date = '0480-08-03', 
                                        promotion_start_date = '0480-08-03', )
                                    ], 
                                date_of_change = '0480-08-03', 
                                length_promotional_in_days = 56, 
                                start_promotion_or_future_terms = '0480-08-03', 
                                stop_promotion_or_future_terms = '0480-08-03', ), 
                            benefit_sub_type = 'FutureMultipleTerms', )
                        ], ),
                description = '',
                details = openapi_client.models._commercial_credit_cards_get_200_response_data_inner_details._commercial_credit_cards_get_200_response_data_inner_Details(
                    cc_sub_type = 'FutureMultipleTerms', 
                    commercial_credit_card_item = openapi_client.models._commercial_credit_cards_get_200_response_data_inner_details_commercial_credit_card_item._commercial_credit_cards_get_200_response_data_inner_Details_CommercialCreditCardItem(
                        apr_rate = '-807.8', 
                        ability_to_set_individual_limits = True, 
                        access_to_online_data_reporting_tool = True, 
                        allocationof_repayment = '', 
                        annual_account_fee_type = '', 
                        annual_fee_amount = '-80728.8', 
                        balance_transfer_interest_rate_period = 'Annual', 
                        balance_transfer_rate = '-807.8', 
                        card_scheme = 'Cashcard', 
                        cash_advance_rate = '-807.8', 
                        cash_withdrawals_allowed = True, 
                        cashback_percent = '-807.8', 
                        cheque_fee_percent = '-807.8', 
                        convenience_cheque = True, 
                        date_of_change = '0480-08-03', 
                        days_interest_free_credit_if_payment_full = 56, 
                        exchange_rate_adjustment = '-807.8', 
                        fees_on_cheque = '-80728.8', 
                        foreign_cash_fee = '-80728.8', 
                        foreign_cash_fee_rate = '-807.8', 
                        foreign_purchase_fee = '-80728.8', 
                        foreign_purchase_fee_rate = '-807.8', 
                        issuing_emergency_cards_fees = '-80728.8', 
                        length_promotional_in_days = 56, 
                        maximum_number_of_cards_permitted = 56, 
                        minimum_credit_limit = '-80728.8', 
                        minimum_lending_amount = '-80728.8', 
                        minimum_repayment_amount = '-80728.8', 
                        minimum_repayment_percentage = '-807.8', 
                        non_sterling_cash_fee = '-80728.8', 
                        non_sterling_cash_fee_rate = '-807.8', 
                        non_sterling_purchase_fee = '-80728.8', 
                        non_sterling_purchase_fee_rate = '-807.8', 
                        non_sterling_transaction_fee = '-80728.8', 
                        non_sterling_transaction_fee_rate = '-807.8', 
                        over_limit_fee = '-80728.8', 
                        payment_days_after_statement = 56, 
                        payment_scheme_exchange_fee = '-80728.8', 
                        payment_scheme_exchange_fee_rate = '-807.8', 
                        payment_scheme_exchange_rate = '-807.8', 
                        purchase_rate = '-807.8', 
                        repayment_frequency = 'Daily', 
                        repayment_notes = '', 
                        start_promotion_or_future_terms = '0480-08-03', 
                        statement_at_account_level = True, 
                        statement_at_personal_level = True, 
                        stop_promotion_or_future_terms = '0480-08-03', ), ),
                eligibility = openapi_client.models.business_current_account_eligibility.Business_current_account_Eligibility(
                    age_restricted = True, 
                    annual_business_turnover = '-80728.8', 
                    annual_business_turnover_currency = 'AEI', 
                    description = '', 
                    eligibility_name = '', 
                    eligibility_notes = '', 
                    eligibility_type = 'AnyBusinessCustomer', 
                    income_condition = '', 
                    income_turnover_related = True, 
                    marketing_eligibility = [
                        'ExistingCustomers'
                        ], 
                    max_number_of_accounts = '', 
                    maximum_age = 56, 
                    maximum_age_to_open = 56, 
                    maximum_opening_amount = True, 
                    min_income_turnover_paid_into_account = 56, 
                    minimum_age = 56, 
                    minimum_deposit = True, 
                    minimum_income_frequency = 'AcademicTerm', 
                    minimum_income_turnover_amount = '-80728.8', 
                    minimum_income_turnover_currency = 'AEI', 
                    minimum_operating_balance = '-80728.8', 
                    minimum_operating_balance_currency = 'AEI', 
                    minimum_operating_balance_exists = True, 
                    opening_deposit_maximum_amount = '-80728.8', 
                    opening_deposit_maximum_currency = 'AEI', 
                    opening_deposit_minimum = '-80728.8', 
                    opening_deposit_minimum_currency = 'AEI', 
                    other_financial_holding_required = True, 
                    previous_bankruptcy = True, 
                    residency_restricted = True, 
                    residency_restricted_region = 'UK', 
                    single_joint_income = 'Joint', 
                    third_sector_organisations = True, ),
                key_features = '',
                organisation = openapi_client.models.atm_organisation.ATM_Organisation(
                    brand = openapi_client.models.atm_organisation_brand.ATM_Organisation_Brand(
                        trademark_id = '0', 
                        trademark_ipo_code = 'UK', ), 
                    parent_organisation = openapi_client.models.atm_organisation_parent_organisation.ATM_Organisation_ParentOrganisation(
                        bic = 'AEIOTGEIC0L', 
                        lei = 'W8Q6ZGCKEC0L3O4GI779', 
                        organisation_name = openapi_client.models.atm_organisation_parent_organisation_organisation_name.ATM_Organisation_ParentOrganisation_OrganisationName(
                            legal_name = '0', ), ), ),
                other_key_features = '',
                payment_holiday = True,
                payment_holiday_description = '',
                product_identifier = '',
                product_name = '',
                product_segment = [
                    'Cashback'
                    ],
                product_type = 'CommercialCreditCards',
                product_url = [
                    ''
                    ],
                tsand_cs = [
                    ''
                    ]
            )
        else:
            return CommercialCreditCardsGet200ResponseDataInner(
                benefits = openapi_client.models.business_current_account_benefits.Business_current_account_Benefits(
                    benefit = True, 
                    benefit_group = [
                        openapi_client.models.business_current_account_benefits_benefit_group_inner.Business_current_account_Benefits_BenefitGroup_inner(
                            benefit_item = openapi_client.models.business_current_account_benefits_benefit_group_inner_benefit_item.Business_current_account_Benefits_BenefitGroup_inner_BenefitItem(
                                benefit_detail = [
                                    openapi_client.models.business_current_account_benefits_benefit_group_inner_benefit_item_benefit_detail_inner.Business_current_account_Benefits_BenefitGroup_inner_BenefitItem_BenefitDetail_inner(
                                        benefit_description = '', 
                                        benefit_id = '', 
                                        benefit_name = '', 
                                        benefit_type = '', 
                                        benefit_value = '', 
                                        counter = 56, 
                                        criteria_type = [
                                            'CashDeposit'
                                            ], 
                                        default_to_accounts = True, 
                                        maximum_criteria = '-80728.8', 
                                        minimum_criteria = '-80728.8', 
                                        promotion_end_date = '0480-08-03', 
                                        promotion_start_date = '0480-08-03', )
                                    ], 
                                date_of_change = '0480-08-03', 
                                length_promotional_in_days = 56, 
                                start_promotion_or_future_terms = '0480-08-03', 
                                stop_promotion_or_future_terms = '0480-08-03', ), 
                            benefit_sub_type = 'FutureMultipleTerms', )
                        ], ),
                description = '',
                details = openapi_client.models._commercial_credit_cards_get_200_response_data_inner_details._commercial_credit_cards_get_200_response_data_inner_Details(
                    cc_sub_type = 'FutureMultipleTerms', 
                    commercial_credit_card_item = openapi_client.models._commercial_credit_cards_get_200_response_data_inner_details_commercial_credit_card_item._commercial_credit_cards_get_200_response_data_inner_Details_CommercialCreditCardItem(
                        apr_rate = '-807.8', 
                        ability_to_set_individual_limits = True, 
                        access_to_online_data_reporting_tool = True, 
                        allocationof_repayment = '', 
                        annual_account_fee_type = '', 
                        annual_fee_amount = '-80728.8', 
                        balance_transfer_interest_rate_period = 'Annual', 
                        balance_transfer_rate = '-807.8', 
                        card_scheme = 'Cashcard', 
                        cash_advance_rate = '-807.8', 
                        cash_withdrawals_allowed = True, 
                        cashback_percent = '-807.8', 
                        cheque_fee_percent = '-807.8', 
                        convenience_cheque = True, 
                        date_of_change = '0480-08-03', 
                        days_interest_free_credit_if_payment_full = 56, 
                        exchange_rate_adjustment = '-807.8', 
                        fees_on_cheque = '-80728.8', 
                        foreign_cash_fee = '-80728.8', 
                        foreign_cash_fee_rate = '-807.8', 
                        foreign_purchase_fee = '-80728.8', 
                        foreign_purchase_fee_rate = '-807.8', 
                        issuing_emergency_cards_fees = '-80728.8', 
                        length_promotional_in_days = 56, 
                        maximum_number_of_cards_permitted = 56, 
                        minimum_credit_limit = '-80728.8', 
                        minimum_lending_amount = '-80728.8', 
                        minimum_repayment_amount = '-80728.8', 
                        minimum_repayment_percentage = '-807.8', 
                        non_sterling_cash_fee = '-80728.8', 
                        non_sterling_cash_fee_rate = '-807.8', 
                        non_sterling_purchase_fee = '-80728.8', 
                        non_sterling_purchase_fee_rate = '-807.8', 
                        non_sterling_transaction_fee = '-80728.8', 
                        non_sterling_transaction_fee_rate = '-807.8', 
                        over_limit_fee = '-80728.8', 
                        payment_days_after_statement = 56, 
                        payment_scheme_exchange_fee = '-80728.8', 
                        payment_scheme_exchange_fee_rate = '-807.8', 
                        payment_scheme_exchange_rate = '-807.8', 
                        purchase_rate = '-807.8', 
                        repayment_frequency = 'Daily', 
                        repayment_notes = '', 
                        start_promotion_or_future_terms = '0480-08-03', 
                        statement_at_account_level = True, 
                        statement_at_personal_level = True, 
                        stop_promotion_or_future_terms = '0480-08-03', ), ),
                eligibility = openapi_client.models.business_current_account_eligibility.Business_current_account_Eligibility(
                    age_restricted = True, 
                    annual_business_turnover = '-80728.8', 
                    annual_business_turnover_currency = 'AEI', 
                    description = '', 
                    eligibility_name = '', 
                    eligibility_notes = '', 
                    eligibility_type = 'AnyBusinessCustomer', 
                    income_condition = '', 
                    income_turnover_related = True, 
                    marketing_eligibility = [
                        'ExistingCustomers'
                        ], 
                    max_number_of_accounts = '', 
                    maximum_age = 56, 
                    maximum_age_to_open = 56, 
                    maximum_opening_amount = True, 
                    min_income_turnover_paid_into_account = 56, 
                    minimum_age = 56, 
                    minimum_deposit = True, 
                    minimum_income_frequency = 'AcademicTerm', 
                    minimum_income_turnover_amount = '-80728.8', 
                    minimum_income_turnover_currency = 'AEI', 
                    minimum_operating_balance = '-80728.8', 
                    minimum_operating_balance_currency = 'AEI', 
                    minimum_operating_balance_exists = True, 
                    opening_deposit_maximum_amount = '-80728.8', 
                    opening_deposit_maximum_currency = 'AEI', 
                    opening_deposit_minimum = '-80728.8', 
                    opening_deposit_minimum_currency = 'AEI', 
                    other_financial_holding_required = True, 
                    previous_bankruptcy = True, 
                    residency_restricted = True, 
                    residency_restricted_region = 'UK', 
                    single_joint_income = 'Joint', 
                    third_sector_organisations = True, ),
                key_features = '',
                organisation = openapi_client.models.atm_organisation.ATM_Organisation(
                    brand = openapi_client.models.atm_organisation_brand.ATM_Organisation_Brand(
                        trademark_id = '0', 
                        trademark_ipo_code = 'UK', ), 
                    parent_organisation = openapi_client.models.atm_organisation_parent_organisation.ATM_Organisation_ParentOrganisation(
                        bic = 'AEIOTGEIC0L', 
                        lei = 'W8Q6ZGCKEC0L3O4GI779', 
                        organisation_name = openapi_client.models.atm_organisation_parent_organisation_organisation_name.ATM_Organisation_ParentOrganisation_OrganisationName(
                            legal_name = '0', ), ), ),
                payment_holiday = True,
                product_identifier = '',
                product_name = '',
                product_type = 'CommercialCreditCards',
                product_url = [
                    ''
                    ],
                tsand_cs = [
                    ''
                    ],
        )
        """

    def testCommercialCreditCardsGet200ResponseDataInner(self):
        """Test CommercialCreditCardsGet200ResponseDataInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

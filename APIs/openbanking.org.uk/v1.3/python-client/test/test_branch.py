# coding: utf-8

"""
    Open Data API

    Latest Swagger specification for OpenData

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.branch import Branch

class TestBranch(unittest.TestCase):
    """Branch unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Branch:
        """Test Branch
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Branch`
        """
        model = Branch()
        if include_optional:
            return Branch(
                atmat_branch = True,
                accessibility_types = 'AudioCashMachine',
                address = openapi_client.models.branch_address.Branch_Address(
                    building_number_or_name = '0', 
                    country = 'AE', 
                    country_sub_division = '0', 
                    optional_address_field = '0', 
                    post_code = '0', 
                    street_name = '0', 
                    town_name = '0', ),
                alternate_phone = [
                    openapi_client.models.branch_alternate_phone_inner.Branch_AlternatePhone_inner(
                        alternate_telephone_number = '+807-80664))(6007)50+10+29)4', 
                        alternate_telephone_number_description = '0', )
                    ],
                arrival_time = '24:00:00.000Z',
                branch_description = '0',
                branch_facilities_name = [
                    'BusinessITSupport'
                    ],
                branch_identification = '0',
                branch_mediated_service_name = [
                    'BureauDeChange'
                    ],
                branch_name = '0',
                branch_other_facilities = [
                    '0'
                    ],
                branch_other_mediated_services = [
                    '0'
                    ],
                branch_other_self_services = [
                    '0'
                    ],
                branch_photo = '',
                branch_self_serve_service_name = [
                    'AccountVerificationService'
                    ],
                branch_type = 'Physical',
                customer_segment = [
                    'Business'
                    ],
                days_of_the_week = '0',
                departure_time = '24:00:00.000Z',
                fax_number = [
                    '+807-80664))(6007)50+10+29)4'
                    ],
                geographic_location = openapi_client.models.atm_geographic_location.ATM_GeographicLocation(
                    latitude = '-807.88', 
                    longitude = '-807.88', ),
                opening_times = [
                    None
                    ],
                organisation = openapi_client.models.atm_organisation.ATM_Organisation(
                    brand = openapi_client.models.atm_organisation_brand.ATM_Organisation_Brand(
                        trademark_id = '0', 
                        trademark_ipo_code = 'UK', ), 
                    parent_organisation = openapi_client.models.atm_organisation_parent_organisation.ATM_Organisation_ParentOrganisation(
                        bic = 'AEIOTGEIC0L', 
                        lei = 'W8Q6ZGCKEC0L3O4GI779', 
                        organisation_name = openapi_client.models.atm_organisation_parent_organisation_organisation_name.ATM_Organisation_ParentOrganisation_OrganisationName(
                            legal_name = '0', ), ), ),
                parking_location = '0',
                planned_branch_closure = [
                    openapi_client.models.branch_planned_branch_closure_inner.Branch_PlannedBranchClosure_inner(
                        end_date = '0480-08-03', 
                        start_date = '0480-08-03', )
                    ],
                stop_name = '0',
                telephone_number = '+807-80664))(6007)50+10+29)4'
            )
        else:
            return Branch(
                atmat_branch = True,
                address = openapi_client.models.branch_address.Branch_Address(
                    building_number_or_name = '0', 
                    country = 'AE', 
                    country_sub_division = '0', 
                    optional_address_field = '0', 
                    post_code = '0', 
                    street_name = '0', 
                    town_name = '0', ),
                branch_identification = '0',
                branch_type = 'Physical',
                customer_segment = [
                    'Business'
                    ],
                opening_times = [
                    None
                    ],
                organisation = openapi_client.models.atm_organisation.ATM_Organisation(
                    brand = openapi_client.models.atm_organisation_brand.ATM_Organisation_Brand(
                        trademark_id = '0', 
                        trademark_ipo_code = 'UK', ), 
                    parent_organisation = openapi_client.models.atm_organisation_parent_organisation.ATM_Organisation_ParentOrganisation(
                        bic = 'AEIOTGEIC0L', 
                        lei = 'W8Q6ZGCKEC0L3O4GI779', 
                        organisation_name = openapi_client.models.atm_organisation_parent_organisation_organisation_name.ATM_Organisation_ParentOrganisation_OrganisationName(
                            legal_name = '0', ), ), ),
                telephone_number = '+807-80664))(6007)50+10+29)4',
        )
        """

    def testBranch(self):
        """Test Branch"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Open Data API

    Latest Swagger specification for OpenData

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class BusinessCurrentAccountCreditInterestCreditInterestGroupInnerCreditInterestItemInterestTiersInner(BaseModel):
    """
    Credit Interest Tiers
    """ # noqa: E501
    apraer_rate: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="AER or APR Rate for comparison", alias="APRAERRate")
    daily_charge_for_maximum: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Special charge on tiered overdraft", alias="DailyChargeForMaximum")
    daily_charge_for_minimum: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Special charge on tiered overdraft", alias="DailyChargeForMinimum")
    interest_tier: Optional[StrictStr] = Field(default=None, description="Identifier for the tier", alias="InterestTier")
    rate: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Rate being paid by the bank (gross)", alias="Rate")
    rate_comparison_type: Optional[StrictStr] = Field(default=None, description="Rate Comparison Type", alias="RateComparisonType")
    tier_value_maximum: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=15)]] = Field(default=None, description="Max Value of interst tier", alias="TierValueMaximum")
    tier_value_minimum: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Lower value of interest tier", alias="TierValueMinimum")
    __properties: ClassVar[List[str]] = ["APRAERRate", "DailyChargeForMaximum", "DailyChargeForMinimum", "InterestTier", "Rate", "RateComparisonType", "TierValueMaximum", "TierValueMinimum"]

    @field_validator('apraer_rate')
    def apraer_rate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,3}\.\d{1,4}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,3}\.\d{1,4}$/")
        return value

    @field_validator('daily_charge_for_maximum')
    def daily_charge_for_maximum_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('daily_charge_for_minimum')
    def daily_charge_for_minimum_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('rate')
    def rate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,3}\.\d{1,4}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,3}\.\d{1,4}$/")
        return value

    @field_validator('rate_comparison_type')
    def rate_comparison_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['APR', 'AER', 'Gross', 'Net', 'RepApr']):
            raise ValueError("must be one of enum values ('APR', 'AER', 'Gross', 'Net', 'RepApr')")
        return value

    @field_validator('tier_value_minimum')
    def tier_value_minimum_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BusinessCurrentAccountCreditInterestCreditInterestGroupInnerCreditInterestItemInterestTiersInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BusinessCurrentAccountCreditInterestCreditInterestGroupInnerCreditInterestItemInterestTiersInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "APRAERRate": obj.get("APRAERRate"),
            "DailyChargeForMaximum": obj.get("DailyChargeForMaximum"),
            "DailyChargeForMinimum": obj.get("DailyChargeForMinimum"),
            "InterestTier": obj.get("InterestTier"),
            "Rate": obj.get("Rate"),
            "RateComparisonType": obj.get("RateComparisonType"),
            "TierValueMaximum": obj.get("TierValueMaximum"),
            "TierValueMinimum": obj.get("TierValueMinimum")
        })
        return _obj



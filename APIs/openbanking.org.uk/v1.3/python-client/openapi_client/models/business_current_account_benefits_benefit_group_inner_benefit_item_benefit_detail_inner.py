# coding: utf-8

"""
    Open Data API

    Latest Swagger specification for OpenData

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class BusinessCurrentAccountBenefitsBenefitGroupInnerBenefitItemBenefitDetailInner(BaseModel):
    """
    Benefit detail
    """ # noqa: E501
    benefit_description: Optional[StrictStr] = Field(default=None, description="A textual explanation of what the benefit is", alias="BenefitDescription")
    benefit_id: Optional[StrictStr] = Field(default=None, description="Unique benefit identifier per organisation", alias="BenefitID")
    benefit_name: Optional[StrictStr] = Field(default=None, description="The name of the benefit", alias="BenefitName")
    benefit_type: Optional[StrictStr] = Field(default=None, description="Type that represents the nature of the benefit", alias="BenefitType")
    benefit_value: Optional[StrictStr] = Field(default=None, description="The value or values permissible for a specific benefit for an individual product representing a product characteristic", alias="BenefitValue")
    counter: Optional[StrictInt] = Field(default=None, description="Counter for the criteria (e.g. number of DD)", alias="Counter")
    criteria_type: Optional[List[StrictStr]] = Field(default=None, alias="CriteriaType")
    default_to_accounts: Optional[StrictBool] = Field(default=None, description="Is the benefit part of the default account", alias="DefaultToAccounts")
    maximum_criteria: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Maximum amount for the criteria", alias="MaximumCriteria")
    minimum_criteria: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Minimum amount for the criteria", alias="MinimumCriteria")
    promotion_end_date: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="If the benefit is temporal the end date is when the benefit is no longer applicable", alias="PromotionEndDate")
    promotion_start_date: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="If the benefit is temporal the start date is when the benefit comes into effect", alias="PromotionStartDate")
    __properties: ClassVar[List[str]] = ["BenefitDescription", "BenefitID", "BenefitName", "BenefitType", "BenefitValue", "Counter", "CriteriaType", "DefaultToAccounts", "MaximumCriteria", "MinimumCriteria", "PromotionEndDate", "PromotionStartDate"]

    @field_validator('criteria_type')
    def criteria_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['CashDeposit', 'Deposit', 'DirectDebit', 'InitialDeposit', 'InternetLogon', 'MobileLogon', 'RegularDeposit']):
                raise ValueError("each list item must be one of ('CashDeposit', 'Deposit', 'DirectDebit', 'InitialDeposit', 'InternetLogon', 'MobileLogon', 'RegularDeposit')")
        return value

    @field_validator('maximum_criteria')
    def maximum_criteria_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('minimum_criteria')
    def minimum_criteria_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('promotion_end_date')
    def promotion_end_date_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$/")
        return value

    @field_validator('promotion_start_date')
    def promotion_start_date_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BusinessCurrentAccountBenefitsBenefitGroupInnerBenefitItemBenefitDetailInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BusinessCurrentAccountBenefitsBenefitGroupInnerBenefitItemBenefitDetailInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "BenefitDescription": obj.get("BenefitDescription"),
            "BenefitID": obj.get("BenefitID"),
            "BenefitName": obj.get("BenefitName"),
            "BenefitType": obj.get("BenefitType"),
            "BenefitValue": obj.get("BenefitValue"),
            "Counter": obj.get("Counter"),
            "CriteriaType": obj.get("CriteriaType"),
            "DefaultToAccounts": obj.get("DefaultToAccounts"),
            "MaximumCriteria": obj.get("MaximumCriteria"),
            "MinimumCriteria": obj.get("MinimumCriteria"),
            "PromotionEndDate": obj.get("PromotionEndDate"),
            "PromotionStartDate": obj.get("PromotionStartDate")
        })
        return _obj



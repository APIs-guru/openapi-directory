# coding: utf-8

"""
    Open Data API

    Latest Swagger specification for OpenData

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.atm_organisation_parent_organisation_organisation_name import ATMOrganisationParentOrganisationOrganisationName
from typing import Optional, Set
from typing_extensions import Self

class ATMOrganisationParentOrganisation(BaseModel):
    """
    Parent organisation
    """ # noqa: E501
    bic: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The BIC from the organisation", alias="BIC")
    lei: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The LEI ID of the organisation", alias="LEI")
    organisation_name: ATMOrganisationParentOrganisationOrganisationName = Field(alias="OrganisationName")
    __properties: ClassVar[List[str]] = ["BIC", "LEI", "OrganisationName"]

    @field_validator('bic')
    def bic_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[A-Z]{6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3})?", value):
            raise ValueError(r"must validate the regular expression /[A-Z]{6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3})?/")
        return value

    @field_validator('lei')
    def lei_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[A-Z0-9]{18,18}[0-9]{2,2}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z0-9]{18,18}[0-9]{2,2}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ATMOrganisationParentOrganisation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of organisation_name
        if self.organisation_name:
            _dict['OrganisationName'] = self.organisation_name.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ATMOrganisationParentOrganisation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "BIC": obj.get("BIC"),
            "LEI": obj.get("LEI"),
            "OrganisationName": ATMOrganisationParentOrganisationOrganisationName.from_dict(obj["OrganisationName"]) if obj.get("OrganisationName") is not None else None
        })
        return _obj



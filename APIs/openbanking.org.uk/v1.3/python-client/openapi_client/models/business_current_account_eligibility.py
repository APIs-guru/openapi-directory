# coding: utf-8

"""
    Open Data API

    Latest Swagger specification for OpenData

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class BusinessCurrentAccountEligibility(BaseModel):
    """
    Eligibility
    """ # noqa: E501
    age_restricted: StrictBool = Field(description="Indicates a customer's age is part of eligibility criteria", alias="AgeRestricted")
    annual_business_turnover: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Annual Business Turnover", alias="AnnualBusinessTurnover")
    annual_business_turnover_currency: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Annual Business Turnover Currency", alias="AnnualBusinessTurnoverCurrency")
    description: StrictStr = Field(description="One paragraph detailing the eligibility", alias="Description")
    eligibility_name: Optional[StrictStr] = Field(default=None, description="Free text description, denotes non standard eligibilities not included in the code list", alias="EligibilityName")
    eligibility_notes: Optional[StrictStr] = Field(default=None, description="Optional additional notes to supplement the eligibility conditions. Only used for very specific conditions", alias="EligibilityNotes")
    eligibility_type: Optional[StrictStr] = Field(default=None, description="Eligibility type", alias="EligibilityType")
    income_condition: Optional[StrictStr] = Field(default=None, description="Stipulates any particular definition of income that applies to the income eligibility and/or method by which income must paid into the account (eg Salary DD)", alias="IncomeCondition")
    income_turnover_related: StrictBool = Field(description="Indicates if eligibility linked to income", alias="IncomeTurnoverRelated")
    marketing_eligibility: Optional[List[StrictStr]] = Field(default=None, alias="MarketingEligibility")
    max_number_of_accounts: Optional[StrictStr] = Field(default=None, description="Maximum number of the same prodcut the customer may hold", alias="MaxNumberOfAccounts")
    maximum_age: Optional[StrictInt] = Field(default=None, description="Maximum age, in years, allowed to hold the account", alias="MaximumAge")
    maximum_age_to_open: Optional[StrictInt] = Field(default=None, description="Maximum age, in years, to open an account", alias="MaximumAgeToOpen")
    maximum_opening_amount: Optional[StrictBool] = Field(default=None, description="A maximum amount to be deposited at opening", alias="MaximumOpeningAmount")
    min_income_turnover_paid_into_account: Optional[StrictInt] = Field(default=None, description="Minimum Income Amount required to paid into the account", alias="MinIncomeTurnoverPaidIntoAccount")
    minimum_age: Optional[StrictInt] = Field(default=None, description="Minimum age, in years, required to hold an account", alias="MinimumAge")
    minimum_deposit: Optional[StrictBool] = Field(default=None, description="A minimum deposit required to hold this account", alias="MinimumDeposit")
    minimum_income_frequency: Optional[StrictStr] = Field(default=None, description="The frequency that the minimum mentioned before is deposited in the account. Yearly is very important for premium accounts", alias="MinimumIncomeFrequency")
    minimum_income_turnover_amount: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Minimum income / Turnover required to hold the product", alias="MinimumIncomeTurnoverAmount")
    minimum_income_turnover_currency: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Minimum income / Turnover Currency", alias="MinimumIncomeTurnoverCurrency")
    minimum_operating_balance: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Minimum Operating Balance", alias="MinimumOperatingBalance")
    minimum_operating_balance_currency: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Minimum Operating Balance currency", alias="MinimumOperatingBalanceCurrency")
    minimum_operating_balance_exists: Optional[StrictBool] = Field(default=None, description="Is there a Minimum Operating Balance?", alias="MinimumOperatingBalanceExists")
    opening_deposit_maximum_amount: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Maximum Amount to be depositing at opening", alias="OpeningDepositMaximumAmount")
    opening_deposit_maximum_currency: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The currency of the Minimum Amount to be depositing at opening", alias="OpeningDepositMaximumCurrency")
    opening_deposit_minimum: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Minimum Amount to be held on account", alias="OpeningDepositMinimum")
    opening_deposit_minimum_currency: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The currency of the Minimum Amount to be depositing at opening", alias="OpeningDepositMinimumCurrency")
    other_financial_holding_required: StrictBool = Field(description="Indicates that it is necessary to hold another product with the bank in order to be eligible for this product or feature", alias="OtherFinancialHoldingRequired")
    previous_bankruptcy: StrictBool = Field(description="Describes if a previous bankruptcy / insolvency disqualfies for this account Details in ELI-280", alias="PreviousBankruptcy")
    residency_restricted: StrictBool = Field(description="Indicates a customer's residency forms part of the eligibility criteria", alias="ResidencyRestricted")
    residency_restricted_region: Optional[StrictStr] = Field(default=None, description="Indicates a customer must be current resident of a geographic area/country", alias="ResidencyRestrictedRegion")
    single_joint_income: Optional[StrictStr] = Field(default=None, description="Minimum Income Source. For certain products a minimum income is required. This can be mandated as to the single income or to a joint income. This field describes this", alias="SingleJointIncome")
    third_sector_organisations: StrictBool = Field(description="Is the product available to operate as a Clubs or Societies account?", alias="ThirdSectorOrganisations")
    __properties: ClassVar[List[str]] = ["AgeRestricted", "AnnualBusinessTurnover", "AnnualBusinessTurnoverCurrency", "Description", "EligibilityName", "EligibilityNotes", "EligibilityType", "IncomeCondition", "IncomeTurnoverRelated", "MarketingEligibility", "MaxNumberOfAccounts", "MaximumAge", "MaximumAgeToOpen", "MaximumOpeningAmount", "MinIncomeTurnoverPaidIntoAccount", "MinimumAge", "MinimumDeposit", "MinimumIncomeFrequency", "MinimumIncomeTurnoverAmount", "MinimumIncomeTurnoverCurrency", "MinimumOperatingBalance", "MinimumOperatingBalanceCurrency", "MinimumOperatingBalanceExists", "OpeningDepositMaximumAmount", "OpeningDepositMaximumCurrency", "OpeningDepositMinimum", "OpeningDepositMinimumCurrency", "OtherFinancialHoldingRequired", "PreviousBankruptcy", "ResidencyRestricted", "ResidencyRestrictedRegion", "SingleJointIncome", "ThirdSectorOrganisations"]

    @field_validator('annual_business_turnover')
    def annual_business_turnover_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('annual_business_turnover_currency')
    def annual_business_turnover_currency_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[A-Z]{3}", value):
            raise ValueError(r"must validate the regular expression /[A-Z]{3}/")
        return value

    @field_validator('eligibility_type')
    def eligibility_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AnyBusinessCustomer', 'BusinessOnly', 'CreditCard', 'CreditScoring', 'EmailAddress', 'ExistingCustomers', 'IdAndV', 'Mortgage', 'NoArrearsOnLoan', 'NoCustomerInArrears', 'NoOverOverdraftThirtyDays', 'NoSoleUkAccountOrBankrupt', 'NTB', 'NTBBusiness', 'SoleStudentAccount', 'SoleUkAccount', 'StudentsOnly', 'TwoMonthsOfCourseStart', 'UCASFulltimeTwoYears']):
            raise ValueError("must be one of enum values ('AnyBusinessCustomer', 'BusinessOnly', 'CreditCard', 'CreditScoring', 'EmailAddress', 'ExistingCustomers', 'IdAndV', 'Mortgage', 'NoArrearsOnLoan', 'NoCustomerInArrears', 'NoOverOverdraftThirtyDays', 'NoSoleUkAccountOrBankrupt', 'NTB', 'NTBBusiness', 'SoleStudentAccount', 'SoleUkAccount', 'StudentsOnly', 'TwoMonthsOfCourseStart', 'UCASFulltimeTwoYears')")
        return value

    @field_validator('marketing_eligibility')
    def marketing_eligibility_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['ExistingCustomers', 'NewCustomersOnly', 'SwitchersOnly', 'StartUp']):
                raise ValueError("each list item must be one of ('ExistingCustomers', 'NewCustomersOnly', 'SwitchersOnly', 'StartUp')")
        return value

    @field_validator('minimum_income_frequency')
    def minimum_income_frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AcademicTerm', 'HalfYearly', 'Monthly', 'Quarterly', 'Weekly', 'Yearly']):
            raise ValueError("must be one of enum values ('AcademicTerm', 'HalfYearly', 'Monthly', 'Quarterly', 'Weekly', 'Yearly')")
        return value

    @field_validator('minimum_income_turnover_amount')
    def minimum_income_turnover_amount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('minimum_income_turnover_currency')
    def minimum_income_turnover_currency_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[A-Z]{3}", value):
            raise ValueError(r"must validate the regular expression /[A-Z]{3}/")
        return value

    @field_validator('minimum_operating_balance')
    def minimum_operating_balance_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('minimum_operating_balance_currency')
    def minimum_operating_balance_currency_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[A-Z]{3}", value):
            raise ValueError(r"must validate the regular expression /[A-Z]{3}/")
        return value

    @field_validator('opening_deposit_maximum_amount')
    def opening_deposit_maximum_amount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('opening_deposit_maximum_currency')
    def opening_deposit_maximum_currency_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[A-Z]{3}", value):
            raise ValueError(r"must validate the regular expression /[A-Z]{3}/")
        return value

    @field_validator('opening_deposit_minimum')
    def opening_deposit_minimum_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('opening_deposit_minimum_currency')
    def opening_deposit_minimum_currency_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[A-Z]{3}", value):
            raise ValueError(r"must validate the regular expression /[A-Z]{3}/")
        return value

    @field_validator('residency_restricted_region')
    def residency_restricted_region_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UK', 'EEA', 'EU', 'EFTA', 'GB - ENG', 'GB - NIR', 'GB - SCT', 'GB - WLS', 'IRL']):
            raise ValueError("must be one of enum values ('UK', 'EEA', 'EU', 'EFTA', 'GB - ENG', 'GB - NIR', 'GB - SCT', 'GB - WLS', 'IRL')")
        return value

    @field_validator('single_joint_income')
    def single_joint_income_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Joint', 'SoleIncome', 'SoleOrJoint', 'Turnover']):
            raise ValueError("must be one of enum values ('Joint', 'SoleIncome', 'SoleOrJoint', 'Turnover')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BusinessCurrentAccountEligibility from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BusinessCurrentAccountEligibility from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AgeRestricted": obj.get("AgeRestricted"),
            "AnnualBusinessTurnover": obj.get("AnnualBusinessTurnover"),
            "AnnualBusinessTurnoverCurrency": obj.get("AnnualBusinessTurnoverCurrency"),
            "Description": obj.get("Description"),
            "EligibilityName": obj.get("EligibilityName"),
            "EligibilityNotes": obj.get("EligibilityNotes"),
            "EligibilityType": obj.get("EligibilityType"),
            "IncomeCondition": obj.get("IncomeCondition"),
            "IncomeTurnoverRelated": obj.get("IncomeTurnoverRelated"),
            "MarketingEligibility": obj.get("MarketingEligibility"),
            "MaxNumberOfAccounts": obj.get("MaxNumberOfAccounts"),
            "MaximumAge": obj.get("MaximumAge"),
            "MaximumAgeToOpen": obj.get("MaximumAgeToOpen"),
            "MaximumOpeningAmount": obj.get("MaximumOpeningAmount"),
            "MinIncomeTurnoverPaidIntoAccount": obj.get("MinIncomeTurnoverPaidIntoAccount"),
            "MinimumAge": obj.get("MinimumAge"),
            "MinimumDeposit": obj.get("MinimumDeposit"),
            "MinimumIncomeFrequency": obj.get("MinimumIncomeFrequency"),
            "MinimumIncomeTurnoverAmount": obj.get("MinimumIncomeTurnoverAmount"),
            "MinimumIncomeTurnoverCurrency": obj.get("MinimumIncomeTurnoverCurrency"),
            "MinimumOperatingBalance": obj.get("MinimumOperatingBalance"),
            "MinimumOperatingBalanceCurrency": obj.get("MinimumOperatingBalanceCurrency"),
            "MinimumOperatingBalanceExists": obj.get("MinimumOperatingBalanceExists"),
            "OpeningDepositMaximumAmount": obj.get("OpeningDepositMaximumAmount"),
            "OpeningDepositMaximumCurrency": obj.get("OpeningDepositMaximumCurrency"),
            "OpeningDepositMinimum": obj.get("OpeningDepositMinimum"),
            "OpeningDepositMinimumCurrency": obj.get("OpeningDepositMinimumCurrency"),
            "OtherFinancialHoldingRequired": obj.get("OtherFinancialHoldingRequired"),
            "PreviousBankruptcy": obj.get("PreviousBankruptcy"),
            "ResidencyRestricted": obj.get("ResidencyRestricted"),
            "ResidencyRestrictedRegion": obj.get("ResidencyRestrictedRegion"),
            "SingleJointIncome": obj.get("SingleJointIncome"),
            "ThirdSectorOrganisations": obj.get("ThirdSectorOrganisations")
        })
        return _obj



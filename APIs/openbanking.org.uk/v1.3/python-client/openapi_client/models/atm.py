# coding: utf-8

"""
    Open Data API

    Latest Swagger specification for OpenData

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.atm_address import ATMAddress
from openapi_client.models.atm_geographic_location import ATMGeographicLocation
from openapi_client.models.atm_organisation import ATMOrganisation
from typing import Optional, Set
from typing_extensions import Self

class ATM(BaseModel):
    """
    ATM
    """ # noqa: E501
    atmid: Annotated[str, Field(min_length=1, strict=True, max_length=35)] = Field(description="ATM terminal device identification for the acquirer and the issuer", alias="ATMID")
    atm_services: Annotated[List[StrictStr], Field(min_length=1)] = Field(description="Information about ATM services", alias="ATMServices")
    accessibility_types: Optional[List[StrictStr]] = Field(default=None, description="Information about the accessibility", alias="AccessibilityTypes")
    additional_atm_services: Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=350)]]] = Field(default=None, description="ATM Service Description", alias="AdditionalATMServices")
    address: ATMAddress = Field(alias="Address")
    branch_identification: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=35)]] = Field(default=None, description="Unique and unambiguous identification of a retail branch of a financial institution", alias="BranchIdentification")
    currency: Annotated[List[Annotated[str, Field(strict=True)]], Field(min_length=1)] = Field(description="Defines currency type available for dispense", alias="Currency")
    geographic_location: ATMGeographicLocation = Field(alias="GeographicLocation")
    location_category: Optional[StrictStr] = Field(default=None, description="Indicates the environment of the ATM", alias="LocationCategory")
    minimum_value_dispensed: Optional[StrictStr] = Field(default=None, description="Minimum currency denominations usually available", alias="MinimumValueDispensed")
    organisation: ATMOrganisation = Field(alias="Organisation")
    site_id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=35)]] = Field(default=None, description="Site identifying code, where ATM is located", alias="SiteID")
    site_name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=35)]] = Field(default=None, description="Site identifying name, where ATM is located", alias="SiteName")
    supported_languages: Annotated[List[StrictStr], Field(min_length=1)] = Field(description="Languages that the ATM supports", alias="SupportedLanguages")
    __properties: ClassVar[List[str]] = ["ATMID", "ATMServices", "AccessibilityTypes", "AdditionalATMServices", "Address", "BranchIdentification", "Currency", "GeographicLocation", "LocationCategory", "MinimumValueDispensed", "Organisation", "SiteID", "SiteName", "SupportedLanguages"]

    @field_validator('atm_services')
    def atm_services_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['Balance', 'BillPayments', 'CashDeposits', 'CashWithdrawal', 'CharityDonation', 'ChequeBookRequest', 'ChequeDeposits', 'FastCash', 'MiniStatement', 'MobileBankingRegistration', 'MobilePaymentRegistration', 'MobilePhoneTopUp', 'OrderStatement', 'PINActivation', 'PINChange']):
                raise ValueError("each list item must be one of ('Balance', 'BillPayments', 'CashDeposits', 'CashWithdrawal', 'CharityDonation', 'ChequeBookRequest', 'ChequeDeposits', 'FastCash', 'MiniStatement', 'MobileBankingRegistration', 'MobilePaymentRegistration', 'MobilePhoneTopUp', 'OrderStatement', 'PINActivation', 'PINChange')")
        return value

    @field_validator('accessibility_types')
    def accessibility_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['AudioCashMachine', 'AutomaticDoors', 'ChairAccess', 'DriveThru', 'ExternalRamp', 'InductionLoop', 'InternalRamp', 'LevelAccess', 'LowerLevelCounter', 'WheelchairAccess']):
                raise ValueError("each list item must be one of ('AudioCashMachine', 'AutomaticDoors', 'ChairAccess', 'DriveThru', 'ExternalRamp', 'InductionLoop', 'InternalRamp', 'LevelAccess', 'LowerLevelCounter', 'WheelchairAccess')")
        return value

    @field_validator('location_category')
    def location_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Airport', 'BankSpecialisedOutlet', 'BranchExternal', 'BranchInternal', 'BranchLobby', 'BureauDeChange', 'CoachStation', 'CommercialSpaceInternal', 'ConvenienceStore', 'ExhibitionCentre', 'FactoryOrOffice', 'FillingStation', 'FinancialInstitution', 'GovernmentOffice', 'Hospital', 'Hotel', 'KioskPod', 'LeisureCentre', 'PleasurePark', 'PublicHouse', 'RailwayStation', 'RemoteUnit', 'RetailerDepartmentStore', 'RetailerOutlet', 'SeaportTerminal', 'ServiceStation', 'ShoppingCentreExternal', 'ShoppingCentreInternal', 'StorageDepot', 'SupermarketExternal', 'SupermarketInternal', 'UndergroundRailwayStation', 'UniversityOrCollege']):
            raise ValueError("must be one of enum values ('Airport', 'BankSpecialisedOutlet', 'BranchExternal', 'BranchInternal', 'BranchLobby', 'BureauDeChange', 'CoachStation', 'CommercialSpaceInternal', 'ConvenienceStore', 'ExhibitionCentre', 'FactoryOrOffice', 'FillingStation', 'FinancialInstitution', 'GovernmentOffice', 'Hospital', 'Hotel', 'KioskPod', 'LeisureCentre', 'PleasurePark', 'PublicHouse', 'RailwayStation', 'RemoteUnit', 'RetailerDepartmentStore', 'RetailerOutlet', 'SeaportTerminal', 'ServiceStation', 'ShoppingCentreExternal', 'ShoppingCentreInternal', 'StorageDepot', 'SupermarketExternal', 'SupermarketInternal', 'UndergroundRailwayStation', 'UniversityOrCollege')")
        return value

    @field_validator('minimum_value_dispensed')
    def minimum_value_dispensed_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['£5', '£10', '£20', '£50', '£100']):
            raise ValueError("must be one of enum values ('£5', '£10', '£20', '£50', '£100')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ATM from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['Address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geographic_location
        if self.geographic_location:
            _dict['GeographicLocation'] = self.geographic_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organisation
        if self.organisation:
            _dict['Organisation'] = self.organisation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ATM from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ATMID": obj.get("ATMID"),
            "ATMServices": obj.get("ATMServices"),
            "AccessibilityTypes": obj.get("AccessibilityTypes"),
            "AdditionalATMServices": obj.get("AdditionalATMServices"),
            "Address": ATMAddress.from_dict(obj["Address"]) if obj.get("Address") is not None else None,
            "BranchIdentification": obj.get("BranchIdentification"),
            "Currency": obj.get("Currency"),
            "GeographicLocation": ATMGeographicLocation.from_dict(obj["GeographicLocation"]) if obj.get("GeographicLocation") is not None else None,
            "LocationCategory": obj.get("LocationCategory"),
            "MinimumValueDispensed": obj.get("MinimumValueDispensed"),
            "Organisation": ATMOrganisation.from_dict(obj["Organisation"]) if obj.get("Organisation") is not None else None,
            "SiteID": obj.get("SiteID"),
            "SiteName": obj.get("SiteName"),
            "SupportedLanguages": obj.get("SupportedLanguages")
        })
        return _obj



# coding: utf-8

"""
    Open Data API

    Latest Swagger specification for OpenData

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.business_current_account_fees_and_charges_inner_fees_fee_details_inner import BusinessCurrentAccountFeesAndChargesInnerFeesFeeDetailsInner
from typing import Optional, Set
from typing_extensions import Self

class BusinessCurrentAccountFeesAndChargesInnerFees(BaseModel):
    """
    Fees
    """ # noqa: E501
    date_of_change: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Date of the change if it refers to future terms", alias="DateOfChange")
    fee_details: Annotated[List[BusinessCurrentAccountFeesAndChargesInnerFeesFeeDetailsInner], Field(min_length=1)] = Field(alias="FeeDetails")
    fee_higher_tier: Optional[StrictInt] = Field(default=None, description="Higher occurrence / range boundary e.g. For returned cheques this could be 10, which means the first 10 returned cheque fits into this range", alias="FeeHigherTier")
    fee_lower_tier: Optional[StrictInt] = Field(default=None, description="Lower occurrence / range boundary e.g.. For returned cheques this could be 0, which means the first returned cheque fits into this range", alias="FeeLowerTier")
    length_promotional_in_days: Optional[StrictInt] = Field(default=None, description="Describes the length if only a duration is given instead of a date", alias="LengthPromotionalInDays")
    start_promotion_or_future_terms: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Describes the start date", alias="StartPromotionOrFutureTerms")
    stop_promotion_or_future_terms: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Describes the end date", alias="StopPromotionOrFutureTerms")
    __properties: ClassVar[List[str]] = ["DateOfChange", "FeeDetails", "FeeHigherTier", "FeeLowerTier", "LengthPromotionalInDays", "StartPromotionOrFutureTerms", "StopPromotionOrFutureTerms"]

    @field_validator('date_of_change')
    def date_of_change_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$/")
        return value

    @field_validator('start_promotion_or_future_terms')
    def start_promotion_or_future_terms_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$/")
        return value

    @field_validator('stop_promotion_or_future_terms')
    def stop_promotion_or_future_terms_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BusinessCurrentAccountFeesAndChargesInnerFees from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in fee_details (list)
        _items = []
        if self.fee_details:
            for _item_fee_details in self.fee_details:
                if _item_fee_details:
                    _items.append(_item_fee_details.to_dict())
            _dict['FeeDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BusinessCurrentAccountFeesAndChargesInnerFees from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "DateOfChange": obj.get("DateOfChange"),
            "FeeDetails": [BusinessCurrentAccountFeesAndChargesInnerFeesFeeDetailsInner.from_dict(_item) for _item in obj["FeeDetails"]] if obj.get("FeeDetails") is not None else None,
            "FeeHigherTier": obj.get("FeeHigherTier"),
            "FeeLowerTier": obj.get("FeeLowerTier"),
            "LengthPromotionalInDays": obj.get("LengthPromotionalInDays"),
            "StartPromotionOrFutureTerms": obj.get("StartPromotionOrFutureTerms"),
            "StopPromotionOrFutureTerms": obj.get("StopPromotionOrFutureTerms")
        })
        return _obj



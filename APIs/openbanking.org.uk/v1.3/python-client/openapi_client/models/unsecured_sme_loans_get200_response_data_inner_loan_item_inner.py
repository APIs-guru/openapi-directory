# coding: utf-8

"""
    Open Data API

    Latest Swagger specification for OpenData

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.unsecured_sme_loans_get200_response_data_inner_loan_item_inner_loan_pricing_inner import UnsecuredSmeLoansGet200ResponseDataInnerLoanItemInnerLoanPricingInner
from typing import Optional, Set
from typing_extensions import Self

class UnsecuredSmeLoansGet200ResponseDataInnerLoanItemInner(BaseModel):
    """
    Loan Item
    """ # noqa: E501
    cca_regulated_entity: StrictBool = Field(alias="CCARegulatedEntity")
    date_of_change: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Date of the change if it refers to future terms", alias="DateOfChange")
    is_a_low_interest_repayment_start_possible: StrictBool = Field(alias="IsALowInterestRepaymentStartPossible")
    is_this_an_interest_only_loan: StrictBool = Field(alias="IsThisAnInterestOnlyLoan")
    length_promotional_in_days: Optional[StrictInt] = Field(default=None, description="Describes the length if only a duration is given instead of a date in days", alias="LengthPromotionalInDays")
    loan_pricing: Optional[List[UnsecuredSmeLoansGet200ResponseDataInnerLoanItemInnerLoanPricingInner]] = Field(default=None, alias="LoanPricing")
    product_state: StrictStr = Field(description="Describes if the offering is promotional or a description of a future state.", alias="ProductState")
    start_promotion_or_future_terms: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Describes the start date", alias="StartPromotionOrFutureTerms")
    stop_promotion_or_future_terms: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Describes the end date", alias="StopPromotionOrFutureTerms")
    will_the_loan_be_paid_in_tranche_drawdowns: StrictBool = Field(alias="WillTheLoanBePaidInTrancheDrawdowns")
    __properties: ClassVar[List[str]] = ["CCARegulatedEntity", "DateOfChange", "IsALowInterestRepaymentStartPossible", "IsThisAnInterestOnlyLoan", "LengthPromotionalInDays", "LoanPricing", "ProductState", "StartPromotionOrFutureTerms", "StopPromotionOrFutureTerms", "WillTheLoanBePaidInTrancheDrawdowns"]

    @field_validator('date_of_change')
    def date_of_change_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$/")
        return value

    @field_validator('product_state')
    def product_state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['FutureMultipleTerms', 'Promotional', 'Regular']):
            raise ValueError("must be one of enum values ('FutureMultipleTerms', 'Promotional', 'Regular')")
        return value

    @field_validator('start_promotion_or_future_terms')
    def start_promotion_or_future_terms_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$/")
        return value

    @field_validator('stop_promotion_or_future_terms')
    def stop_promotion_or_future_terms_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnsecuredSmeLoansGet200ResponseDataInnerLoanItemInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in loan_pricing (list)
        _items = []
        if self.loan_pricing:
            for _item_loan_pricing in self.loan_pricing:
                if _item_loan_pricing:
                    _items.append(_item_loan_pricing.to_dict())
            _dict['LoanPricing'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnsecuredSmeLoansGet200ResponseDataInnerLoanItemInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CCARegulatedEntity": obj.get("CCARegulatedEntity"),
            "DateOfChange": obj.get("DateOfChange"),
            "IsALowInterestRepaymentStartPossible": obj.get("IsALowInterestRepaymentStartPossible"),
            "IsThisAnInterestOnlyLoan": obj.get("IsThisAnInterestOnlyLoan"),
            "LengthPromotionalInDays": obj.get("LengthPromotionalInDays"),
            "LoanPricing": [UnsecuredSmeLoansGet200ResponseDataInnerLoanItemInnerLoanPricingInner.from_dict(_item) for _item in obj["LoanPricing"]] if obj.get("LoanPricing") is not None else None,
            "ProductState": obj.get("ProductState"),
            "StartPromotionOrFutureTerms": obj.get("StartPromotionOrFutureTerms"),
            "StopPromotionOrFutureTerms": obj.get("StopPromotionOrFutureTerms"),
            "WillTheLoanBePaidInTrancheDrawdowns": obj.get("WillTheLoanBePaidInTrancheDrawdowns")
        })
        return _obj



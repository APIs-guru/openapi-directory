# coding: utf-8

"""
    Open Data API

    Latest Swagger specification for OpenData

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CommercialCreditCardsGet200ResponseDataInnerDetailsCommercialCreditCardItem(BaseModel):
    """
    Commercial Credit Card Item 
    """ # noqa: E501
    apr_rate: Annotated[str, Field(strict=True)] = Field(description="Annual Percentage Rate", alias="APRRate")
    ability_to_set_individual_limits: Optional[StrictBool] = Field(default=None, description="The ability to set separate limts on different cards in one account", alias="AbilityToSetIndividualLimits")
    access_to_online_data_reporting_tool: StrictBool = Field(description="Describes whether the account have access to an online tool for reprting on expenditure", alias="AccessToOnlineDataReportingTool")
    allocationof_repayment: Optional[StrictStr] = Field(default=None, description="Allocation rules for repayment", alias="AllocationofRepayment")
    annual_account_fee_type: Optional[StrictStr] = Field(default=None, description="Details on annual account fee, such as non payable when there is a turnover above a certain sum", alias="AnnualAccountFeeType")
    annual_fee_amount: Annotated[str, Field(strict=True)] = Field(description="Standard fee on the card", alias="AnnualFeeAmount")
    balance_transfer_interest_rate_period: Optional[StrictStr] = Field(default=None, description="The period used to define the specific interest rate for balance transfers", alias="BalanceTransferInterestRatePeriod")
    balance_transfer_rate: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Balance transfer rate", alias="BalanceTransferRate")
    card_scheme: StrictStr = Field(description="Card Scheme Code", alias="CardScheme")
    cash_advance_rate: Annotated[str, Field(strict=True)] = Field(description="Cash advance rate", alias="CashAdvanceRate")
    cash_withdrawals_allowed: StrictBool = Field(description="Describes whether cash withdrawals are allowed", alias="CashWithdrawalsAllowed")
    cashback_percent: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Percent of cashback on amount spend", alias="CashbackPercent")
    cheque_fee_percent: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Percentage fee on convenience cheques", alias="ChequeFeePercent")
    convenience_cheque: StrictBool = Field(description="Describes whether the card account allow convenience cheques", alias="ConvenienceCheque")
    date_of_change: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Date of the change if it refers to future terms", alias="DateOfChange")
    days_interest_free_credit_if_payment_full: StrictInt = Field(description="Describes how many interest free days are given if the card is fully paid at each term", alias="DaysInterestFreeCreditIfPaymentFull")
    exchange_rate_adjustment: Annotated[str, Field(strict=True)] = Field(description="The margin added, by certain card issuers, to the scheme rate in order to arrive at the exchange rate qouted as the reference exchange rate to the cardholder", alias="ExchangeRateAdjustment")
    fees_on_cheque: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Percentage fee on a convenince cheques", alias="FeesOnCheque")
    foreign_cash_fee: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Additional card fee applied to sterling cash withdrawal made abroad", alias="ForeignCashFee")
    foreign_cash_fee_rate: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Additional card fee rate applied to sterling cash withdrawal made abroad", alias="ForeignCashFeeRate")
    foreign_purchase_fee: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Additional card fee applied to sterling retail transactions made abroad", alias="ForeignPurchaseFee")
    foreign_purchase_fee_rate: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Additional card fee rate applied to sterling retail transactions made abroad", alias="ForeignPurchaseFeeRate")
    issuing_emergency_cards_fees: Annotated[str, Field(strict=True)] = Field(description="Amount payable for issuing an emergency card", alias="IssuingEmergencyCardsFees")
    length_promotional_in_days: Optional[StrictInt] = Field(default=None, description="Describes the length if only a duration is given instead of a date", alias="LengthPromotionalInDays")
    maximum_number_of_cards_permitted: Optional[StrictInt] = Field(default=None, description="The maximum numbers of cards per account", alias="MaximumNumberOfCardsPermitted")
    minimum_credit_limit: Annotated[str, Field(strict=True)] = Field(description="Minimum Â£500, maximum subject to status", alias="MinimumCreditLimit")
    minimum_lending_amount: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The minimum lending available", alias="MinimumLendingAmount")
    minimum_repayment_amount: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Minimum repayment amount", alias="MinimumRepaymentAmount")
    minimum_repayment_percentage: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Minimum repayment as percentage", alias="MinimumRepaymentPercentage")
    non_sterling_cash_fee: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="An additional fee applied to certain card cash withdrawals. This fee also applies to cash near fees such as gambling", alias="NonSterlingCashFee")
    non_sterling_cash_fee_rate: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="An additional fee rate applied to certain card cash withdrawals. This fee also applies to cash near fees such as gambling", alias="NonSterlingCashFeeRate")
    non_sterling_purchase_fee: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="An additional fee applied to certain card retail transactions", alias="NonSterlingPurchaseFee")
    non_sterling_purchase_fee_rate: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="An additional fee rate applied to certain card retail transactions", alias="NonSterlingPurchaseFeeRate")
    non_sterling_transaction_fee: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="A fee applied to all non-Sterling card transactions", alias="NonSterlingTransactionFee")
    non_sterling_transaction_fee_rate: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="A fee rate applied to all non-Sterling card transactions", alias="NonSterlingTransactionFeeRate")
    over_limit_fee: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Fee applicable if the card was credited over its limit", alias="OverLimitFee")
    payment_days_after_statement: StrictInt = Field(description="How many days after statement is the payment expected", alias="PaymentDaysAfterStatement")
    payment_scheme_exchange_fee: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Any payment network fee applied to some or all non-sterling transactions that the card issuer recover directly from the cardholder", alias="PaymentSchemeExchangeFee")
    payment_scheme_exchange_fee_rate: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Any payment network fee rate applied to some or all non-sterling transactions that the card issuer recover directly from the cardholder", alias="PaymentSchemeExchangeFeeRate")
    payment_scheme_exchange_rate: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The base exchange rate used in settlement of the transaction between issuer and scheme", alias="PaymentSchemeExchangeRate")
    purchase_rate: Annotated[str, Field(strict=True)] = Field(description="Purchase rate", alias="PurchaseRate")
    repayment_frequency: StrictStr = Field(description="Repayment frequency", alias="RepaymentFrequency")
    repayment_notes: Optional[StrictStr] = Field(default=None, description="Additional notes", alias="RepaymentNotes")
    start_promotion_or_future_terms: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Describes the start date", alias="StartPromotionOrFutureTerms")
    statement_at_account_level: StrictBool = Field(description="Describes whether there is a statement at account level", alias="StatementAtAccountLevel")
    statement_at_personal_level: StrictBool = Field(description="Describes whether there is a statement at card level", alias="StatementAtPersonalLevel")
    stop_promotion_or_future_terms: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Describes the end date", alias="StopPromotionOrFutureTerms")
    __properties: ClassVar[List[str]] = ["APRRate", "AbilityToSetIndividualLimits", "AccessToOnlineDataReportingTool", "AllocationofRepayment", "AnnualAccountFeeType", "AnnualFeeAmount", "BalanceTransferInterestRatePeriod", "BalanceTransferRate", "CardScheme", "CashAdvanceRate", "CashWithdrawalsAllowed", "CashbackPercent", "ChequeFeePercent", "ConvenienceCheque", "DateOfChange", "DaysInterestFreeCreditIfPaymentFull", "ExchangeRateAdjustment", "FeesOnCheque", "ForeignCashFee", "ForeignCashFeeRate", "ForeignPurchaseFee", "ForeignPurchaseFeeRate", "IssuingEmergencyCardsFees", "LengthPromotionalInDays", "MaximumNumberOfCardsPermitted", "MinimumCreditLimit", "MinimumLendingAmount", "MinimumRepaymentAmount", "MinimumRepaymentPercentage", "NonSterlingCashFee", "NonSterlingCashFeeRate", "NonSterlingPurchaseFee", "NonSterlingPurchaseFeeRate", "NonSterlingTransactionFee", "NonSterlingTransactionFeeRate", "OverLimitFee", "PaymentDaysAfterStatement", "PaymentSchemeExchangeFee", "PaymentSchemeExchangeFeeRate", "PaymentSchemeExchangeRate", "PurchaseRate", "RepaymentFrequency", "RepaymentNotes", "StartPromotionOrFutureTerms", "StatementAtAccountLevel", "StatementAtPersonalLevel", "StopPromotionOrFutureTerms"]

    @field_validator('apr_rate')
    def apr_rate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-?\d{1,3}\.\d{1,4}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,3}\.\d{1,4}$/")
        return value

    @field_validator('annual_fee_amount')
    def annual_fee_amount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('balance_transfer_interest_rate_period')
    def balance_transfer_interest_rate_period_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Annual', 'Monthly']):
            raise ValueError("must be one of enum values ('Annual', 'Monthly')")
        return value

    @field_validator('balance_transfer_rate')
    def balance_transfer_rate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,3}\.\d{1,4}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,3}\.\d{1,4}$/")
        return value

    @field_validator('card_scheme')
    def card_scheme_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Cashcard', 'CreditMastercard', 'CreditVisa']):
            raise ValueError("must be one of enum values ('Cashcard', 'CreditMastercard', 'CreditVisa')")
        return value

    @field_validator('cash_advance_rate')
    def cash_advance_rate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-?\d{1,3}\.\d{1,4}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,3}\.\d{1,4}$/")
        return value

    @field_validator('cashback_percent')
    def cashback_percent_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,3}\.\d{1,4}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,3}\.\d{1,4}$/")
        return value

    @field_validator('cheque_fee_percent')
    def cheque_fee_percent_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,3}\.\d{1,4}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,3}\.\d{1,4}$/")
        return value

    @field_validator('date_of_change')
    def date_of_change_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$/")
        return value

    @field_validator('exchange_rate_adjustment')
    def exchange_rate_adjustment_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-?\d{1,3}\.\d{1,4}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,3}\.\d{1,4}$/")
        return value

    @field_validator('fees_on_cheque')
    def fees_on_cheque_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('foreign_cash_fee')
    def foreign_cash_fee_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('foreign_cash_fee_rate')
    def foreign_cash_fee_rate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,3}\.\d{1,4}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,3}\.\d{1,4}$/")
        return value

    @field_validator('foreign_purchase_fee')
    def foreign_purchase_fee_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('foreign_purchase_fee_rate')
    def foreign_purchase_fee_rate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,3}\.\d{1,4}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,3}\.\d{1,4}$/")
        return value

    @field_validator('issuing_emergency_cards_fees')
    def issuing_emergency_cards_fees_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('minimum_credit_limit')
    def minimum_credit_limit_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('minimum_lending_amount')
    def minimum_lending_amount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('minimum_repayment_amount')
    def minimum_repayment_amount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('minimum_repayment_percentage')
    def minimum_repayment_percentage_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,3}\.\d{1,4}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,3}\.\d{1,4}$/")
        return value

    @field_validator('non_sterling_cash_fee')
    def non_sterling_cash_fee_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('non_sterling_cash_fee_rate')
    def non_sterling_cash_fee_rate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,3}\.\d{1,4}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,3}\.\d{1,4}$/")
        return value

    @field_validator('non_sterling_purchase_fee')
    def non_sterling_purchase_fee_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('non_sterling_purchase_fee_rate')
    def non_sterling_purchase_fee_rate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,3}\.\d{1,4}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,3}\.\d{1,4}$/")
        return value

    @field_validator('non_sterling_transaction_fee')
    def non_sterling_transaction_fee_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('non_sterling_transaction_fee_rate')
    def non_sterling_transaction_fee_rate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,3}\.\d{1,4}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,3}\.\d{1,4}$/")
        return value

    @field_validator('over_limit_fee')
    def over_limit_fee_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('payment_scheme_exchange_fee')
    def payment_scheme_exchange_fee_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('payment_scheme_exchange_fee_rate')
    def payment_scheme_exchange_fee_rate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,3}\.\d{1,4}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,3}\.\d{1,4}$/")
        return value

    @field_validator('payment_scheme_exchange_rate')
    def payment_scheme_exchange_rate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,3}\.\d{1,4}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,3}\.\d{1,4}$/")
        return value

    @field_validator('purchase_rate')
    def purchase_rate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-?\d{1,3}\.\d{1,4}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,3}\.\d{1,4}$/")
        return value

    @field_validator('repayment_frequency')
    def repayment_frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Daily', 'Flexible', 'Fortnightly', 'HalfYearly', 'Monthly', 'Quarterly', 'Weekly', 'Yearly']):
            raise ValueError("must be one of enum values ('Daily', 'Flexible', 'Fortnightly', 'HalfYearly', 'Monthly', 'Quarterly', 'Weekly', 'Yearly')")
        return value

    @field_validator('start_promotion_or_future_terms')
    def start_promotion_or_future_terms_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$/")
        return value

    @field_validator('stop_promotion_or_future_terms')
    def stop_promotion_or_future_terms_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommercialCreditCardsGet200ResponseDataInnerDetailsCommercialCreditCardItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommercialCreditCardsGet200ResponseDataInnerDetailsCommercialCreditCardItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "APRRate": obj.get("APRRate"),
            "AbilityToSetIndividualLimits": obj.get("AbilityToSetIndividualLimits"),
            "AccessToOnlineDataReportingTool": obj.get("AccessToOnlineDataReportingTool"),
            "AllocationofRepayment": obj.get("AllocationofRepayment"),
            "AnnualAccountFeeType": obj.get("AnnualAccountFeeType"),
            "AnnualFeeAmount": obj.get("AnnualFeeAmount"),
            "BalanceTransferInterestRatePeriod": obj.get("BalanceTransferInterestRatePeriod"),
            "BalanceTransferRate": obj.get("BalanceTransferRate"),
            "CardScheme": obj.get("CardScheme"),
            "CashAdvanceRate": obj.get("CashAdvanceRate"),
            "CashWithdrawalsAllowed": obj.get("CashWithdrawalsAllowed"),
            "CashbackPercent": obj.get("CashbackPercent"),
            "ChequeFeePercent": obj.get("ChequeFeePercent"),
            "ConvenienceCheque": obj.get("ConvenienceCheque"),
            "DateOfChange": obj.get("DateOfChange"),
            "DaysInterestFreeCreditIfPaymentFull": obj.get("DaysInterestFreeCreditIfPaymentFull"),
            "ExchangeRateAdjustment": obj.get("ExchangeRateAdjustment"),
            "FeesOnCheque": obj.get("FeesOnCheque"),
            "ForeignCashFee": obj.get("ForeignCashFee"),
            "ForeignCashFeeRate": obj.get("ForeignCashFeeRate"),
            "ForeignPurchaseFee": obj.get("ForeignPurchaseFee"),
            "ForeignPurchaseFeeRate": obj.get("ForeignPurchaseFeeRate"),
            "IssuingEmergencyCardsFees": obj.get("IssuingEmergencyCardsFees"),
            "LengthPromotionalInDays": obj.get("LengthPromotionalInDays"),
            "MaximumNumberOfCardsPermitted": obj.get("MaximumNumberOfCardsPermitted"),
            "MinimumCreditLimit": obj.get("MinimumCreditLimit"),
            "MinimumLendingAmount": obj.get("MinimumLendingAmount"),
            "MinimumRepaymentAmount": obj.get("MinimumRepaymentAmount"),
            "MinimumRepaymentPercentage": obj.get("MinimumRepaymentPercentage"),
            "NonSterlingCashFee": obj.get("NonSterlingCashFee"),
            "NonSterlingCashFeeRate": obj.get("NonSterlingCashFeeRate"),
            "NonSterlingPurchaseFee": obj.get("NonSterlingPurchaseFee"),
            "NonSterlingPurchaseFeeRate": obj.get("NonSterlingPurchaseFeeRate"),
            "NonSterlingTransactionFee": obj.get("NonSterlingTransactionFee"),
            "NonSterlingTransactionFeeRate": obj.get("NonSterlingTransactionFeeRate"),
            "OverLimitFee": obj.get("OverLimitFee"),
            "PaymentDaysAfterStatement": obj.get("PaymentDaysAfterStatement"),
            "PaymentSchemeExchangeFee": obj.get("PaymentSchemeExchangeFee"),
            "PaymentSchemeExchangeFeeRate": obj.get("PaymentSchemeExchangeFeeRate"),
            "PaymentSchemeExchangeRate": obj.get("PaymentSchemeExchangeRate"),
            "PurchaseRate": obj.get("PurchaseRate"),
            "RepaymentFrequency": obj.get("RepaymentFrequency"),
            "RepaymentNotes": obj.get("RepaymentNotes"),
            "StartPromotionOrFutureTerms": obj.get("StartPromotionOrFutureTerms"),
            "StatementAtAccountLevel": obj.get("StatementAtAccountLevel"),
            "StatementAtPersonalLevel": obj.get("StatementAtPersonalLevel"),
            "StopPromotionOrFutureTerms": obj.get("StopPromotionOrFutureTerms")
        })
        return _obj



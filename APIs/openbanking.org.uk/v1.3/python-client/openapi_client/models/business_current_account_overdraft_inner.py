# coding: utf-8

"""
    Open Data API

    Latest Swagger specification for OpenData

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.business_current_account_overdraft_inner_fees_and_charges_inner import BusinessCurrentAccountOverdraftInnerFeesAndChargesInner
from openapi_client.models.business_current_account_overdraft_inner_overdraft_tier_band_set_inner import BusinessCurrentAccountOverdraftInnerOverdraftTierBandSetInner
from typing import Optional, Set
from typing_extensions import Self

class BusinessCurrentAccountOverdraftInner(BaseModel):
    """
    Overdraft
    """ # noqa: E501
    date_of_change: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Date of the change if it refers to future terms", alias="DateOfChange")
    fee_charge_negotiable_indicator: Optional[StrictStr] = Field(default=None, description="Fee Charge negotiable Indicator", alias="FeeChargeNegotiableIndicator")
    fees_and_charges: Optional[List[BusinessCurrentAccountOverdraftInnerFeesAndChargesInner]] = Field(default=None, alias="FeesAndCharges")
    length_promotional_in_days: Optional[StrictInt] = Field(default=None, description="Describes the length if only a duration is given instead of a date", alias="LengthPromotionalInDays")
    maximum_monthly_overdraft_charge: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Maximum Monthly Charge (MMC) for Overdraft fee and charges.", alias="MaximumMonthlyOverdraftCharge")
    notes: Optional[StrictStr] = Field(default=None, description="Notes on the overdraft", alias="Notes")
    overdraft_product_state: Optional[StrictStr] = Field(default=None, description="Describes if the offering is promotional or a description of a future state.", alias="OverdraftProductState")
    overdraft_tier_band_set: Optional[List[BusinessCurrentAccountOverdraftInnerOverdraftTierBandSetInner]] = Field(default=None, description="Overdraft Tier Band Set", alias="OverdraftTierBandSet")
    overdraft_type: Optional[StrictStr] = Field(default=None, description="Defines if the overdraft facility is committed ", alias="OverdraftType")
    start_promotion_or_future_terms: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Describes the start date", alias="StartPromotionOrFutureTerms")
    stop_promotion_or_future_terms: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Describes the end date", alias="StopPromotionOrFutureTerms")
    term: Optional[StrictStr] = Field(default=None, description="The duration of the overdraft, if it is non permanent", alias="Term")
    __properties: ClassVar[List[str]] = ["DateOfChange", "FeeChargeNegotiableIndicator", "FeesAndCharges", "LengthPromotionalInDays", "MaximumMonthlyOverdraftCharge", "Notes", "OverdraftProductState", "OverdraftTierBandSet", "OverdraftType", "StartPromotionOrFutureTerms", "StopPromotionOrFutureTerms", "Term"]

    @field_validator('date_of_change')
    def date_of_change_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$/")
        return value

    @field_validator('fee_charge_negotiable_indicator')
    def fee_charge_negotiable_indicator_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['false', 'true']):
            raise ValueError("must be one of enum values ('false', 'true')")
        return value

    @field_validator('maximum_monthly_overdraft_charge')
    def maximum_monthly_overdraft_charge_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('overdraft_product_state')
    def overdraft_product_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FutureMultipleTerms', 'Promotional', 'Regular']):
            raise ValueError("must be one of enum values ('FutureMultipleTerms', 'Promotional', 'Regular')")
        return value

    @field_validator('overdraft_type')
    def overdraft_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Committed', 'OnDemand']):
            raise ValueError("must be one of enum values ('Committed', 'OnDemand')")
        return value

    @field_validator('start_promotion_or_future_terms')
    def start_promotion_or_future_terms_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$/")
        return value

    @field_validator('stop_promotion_or_future_terms')
    def stop_promotion_or_future_terms_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-(0[1-9]|(1[0|1|2]))-((0[1-9])|((1|2)[0-9])|(30|31))$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BusinessCurrentAccountOverdraftInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in fees_and_charges (list)
        _items = []
        if self.fees_and_charges:
            for _item_fees_and_charges in self.fees_and_charges:
                if _item_fees_and_charges:
                    _items.append(_item_fees_and_charges.to_dict())
            _dict['FeesAndCharges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in overdraft_tier_band_set (list)
        _items = []
        if self.overdraft_tier_band_set:
            for _item_overdraft_tier_band_set in self.overdraft_tier_band_set:
                if _item_overdraft_tier_band_set:
                    _items.append(_item_overdraft_tier_band_set.to_dict())
            _dict['OverdraftTierBandSet'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BusinessCurrentAccountOverdraftInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "DateOfChange": obj.get("DateOfChange"),
            "FeeChargeNegotiableIndicator": obj.get("FeeChargeNegotiableIndicator"),
            "FeesAndCharges": [BusinessCurrentAccountOverdraftInnerFeesAndChargesInner.from_dict(_item) for _item in obj["FeesAndCharges"]] if obj.get("FeesAndCharges") is not None else None,
            "LengthPromotionalInDays": obj.get("LengthPromotionalInDays"),
            "MaximumMonthlyOverdraftCharge": obj.get("MaximumMonthlyOverdraftCharge"),
            "Notes": obj.get("Notes"),
            "OverdraftProductState": obj.get("OverdraftProductState"),
            "OverdraftTierBandSet": [BusinessCurrentAccountOverdraftInnerOverdraftTierBandSetInner.from_dict(_item) for _item in obj["OverdraftTierBandSet"]] if obj.get("OverdraftTierBandSet") is not None else None,
            "OverdraftType": obj.get("OverdraftType"),
            "StartPromotionOrFutureTerms": obj.get("StartPromotionOrFutureTerms"),
            "StopPromotionOrFutureTerms": obj.get("StopPromotionOrFutureTerms"),
            "Term": obj.get("Term")
        })
        return _obj



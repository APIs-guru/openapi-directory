# coding: utf-8

"""
    Open Data API

    Latest Swagger specification for OpenData

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class BusinessCurrentAccountFeesAndChargesInnerFeesFeeDetailsInnerFeeDetailFeeSubDetails(BaseModel):
    """
    Fee Sub Details
    """ # noqa: E501
    fee_amount: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Fee in GBP", alias="FeeAmount")
    fee_frequency: StrictStr = Field(description="Triggering frequency of the fee", alias="FeeFrequency")
    fee_higher_tier: Optional[StrictInt] = Field(default=None, description="Higher occurrence / range boundary e.g. For returned cheques this could be 10, which means the first 10 returned cheque fits into this range", alias="FeeHigherTier")
    fee_lower_tier: Optional[StrictInt] = Field(default=None, description="Lower occurrence / range boundary e.g. For returned cheques this could be 0, which means the first returned cheque fits into this range", alias="FeeLowerTier")
    fee_max: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Fee in GBP", alias="FeeMax")
    fee_min: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Fee in GBP", alias="FeeMin")
    fee_rate: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="% Rate", alias="FeeRate")
    fees_and_charges_notes: Optional[StrictStr] = Field(default=None, description="Supplementary information for fees and charges", alias="FeesAndChargesNotes")
    negotiable: StrictBool = Field(description="Indicates that this Fee Rate or Fee Amount is negotiable based on risk or other factor", alias="Negotiable")
    representative_rate: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Representative Rate", alias="RepresentativeRate")
    __properties: ClassVar[List[str]] = ["FeeAmount", "FeeFrequency", "FeeHigherTier", "FeeLowerTier", "FeeMax", "FeeMin", "FeeRate", "FeesAndChargesNotes", "Negotiable", "RepresentativeRate"]

    @field_validator('fee_amount')
    def fee_amount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('fee_frequency')
    def fee_frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['AcademicTerm', 'AccountClosing', 'AccountOpening', 'AtTimeOfLoanRepayment', 'ChargingPeriod', 'Daily', 'EveryFiveBusinessDays', 'Item', 'Monthly', 'OnAccountAnniversary', 'PerHour', 'PerOccurrence', 'PerSheet', 'PerTransactionAmount', 'PerTransactionPercentage', 'Quarterly', 'SixMonthly', 'StartOfLoan', 'StatementMonthly', 'Weekly', 'Yearly']):
            raise ValueError("must be one of enum values ('AcademicTerm', 'AccountClosing', 'AccountOpening', 'AtTimeOfLoanRepayment', 'ChargingPeriod', 'Daily', 'EveryFiveBusinessDays', 'Item', 'Monthly', 'OnAccountAnniversary', 'PerHour', 'PerOccurrence', 'PerSheet', 'PerTransactionAmount', 'PerTransactionPercentage', 'Quarterly', 'SixMonthly', 'StartOfLoan', 'StatementMonthly', 'Weekly', 'Yearly')")
        return value

    @field_validator('fee_max')
    def fee_max_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('fee_min')
    def fee_min_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('fee_rate')
    def fee_rate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,3}\.\d{1,4}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,3}\.\d{1,4}$/")
        return value

    @field_validator('representative_rate')
    def representative_rate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,3}\.\d{1,4}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,3}\.\d{1,4}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BusinessCurrentAccountFeesAndChargesInnerFeesFeeDetailsInnerFeeDetailFeeSubDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BusinessCurrentAccountFeesAndChargesInnerFeesFeeDetailsInnerFeeDetailFeeSubDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "FeeAmount": obj.get("FeeAmount"),
            "FeeFrequency": obj.get("FeeFrequency"),
            "FeeHigherTier": obj.get("FeeHigherTier"),
            "FeeLowerTier": obj.get("FeeLowerTier"),
            "FeeMax": obj.get("FeeMax"),
            "FeeMin": obj.get("FeeMin"),
            "FeeRate": obj.get("FeeRate"),
            "FeesAndChargesNotes": obj.get("FeesAndChargesNotes"),
            "Negotiable": obj.get("Negotiable"),
            "RepresentativeRate": obj.get("RepresentativeRate")
        })
        return _obj



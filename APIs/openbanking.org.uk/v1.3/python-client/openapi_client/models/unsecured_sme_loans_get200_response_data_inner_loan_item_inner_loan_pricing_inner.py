# coding: utf-8

"""
    Open Data API

    Latest Swagger specification for OpenData

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class UnsecuredSmeLoansGet200ResponseDataInnerLoanItemInnerLoanPricingInner(BaseModel):
    """
    Loan Pricing
    """ # noqa: E501
    indicative_rate: StrictStr = Field(alias="IndicativeRate")
    loan_length_increment: StrictStr = Field(description="Loan Length Increments", alias="LoanLengthIncrement")
    loan_length_increment_lower: StrictInt = Field(alias="LoanLengthIncrementLower")
    loan_length_increment_upper: StrictInt = Field(alias="LoanLengthIncrementUpper")
    loan_size_band_lower: Annotated[str, Field(strict=True)] = Field(description="Monetary amount without currency", alias="LoanSizeBandLower")
    loan_size_band_upper: Annotated[str, Field(strict=True)] = Field(description="Monetary amount without currency", alias="LoanSizeBandUpper")
    negotiable: StrictBool = Field(alias="Negotiable")
    rate_comparison_type: Optional[StrictStr] = Field(default=None, description="Rate Comparison Type", alias="RateComparisonType")
    repayment_frequency: Annotated[List[StrictStr], Field(min_length=1)] = Field(alias="RepaymentFrequency")
    size_increment: StrictStr = Field(description="Identifier for tier only where it has been supplied under Part 8 (article 32 or the CMA order), value reflects upper tier value", alias="SizeIncrement")
    __properties: ClassVar[List[str]] = ["IndicativeRate", "LoanLengthIncrement", "LoanLengthIncrementLower", "LoanLengthIncrementUpper", "LoanSizeBandLower", "LoanSizeBandUpper", "Negotiable", "RateComparisonType", "RepaymentFrequency", "SizeIncrement"]

    @field_validator('loan_length_increment')
    def loan_length_increment_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['1 year', '2 years', '3 years', '4 years', '5 years']):
            raise ValueError("must be one of enum values ('1 year', '2 years', '3 years', '4 years', '5 years')")
        return value

    @field_validator('loan_size_band_lower')
    def loan_size_band_lower_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('loan_size_band_upper')
    def loan_size_band_upper_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('rate_comparison_type')
    def rate_comparison_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['APR', 'AER', 'Gross', 'Net', 'RepApr']):
            raise ValueError("must be one of enum values ('APR', 'AER', 'Gross', 'Net', 'RepApr')")
        return value

    @field_validator('repayment_frequency')
    def repayment_frequency_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['Daily', 'Flexible', 'Fortnightly', 'HalfYearly', 'Monthly', 'Quarterly', 'Weekly', 'Yearly']):
                raise ValueError("each list item must be one of ('Daily', 'Flexible', 'Fortnightly', 'HalfYearly', 'Monthly', 'Quarterly', 'Weekly', 'Yearly')")
        return value

    @field_validator('size_increment')
    def size_increment_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['£5000', '£10000', '£15000', '£20000', '£25000', 'Other', 'TierMaximum', 'TierMinimum']):
            raise ValueError("must be one of enum values ('£5000', '£10000', '£15000', '£20000', '£25000', 'Other', 'TierMaximum', 'TierMinimum')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnsecuredSmeLoansGet200ResponseDataInnerLoanItemInnerLoanPricingInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnsecuredSmeLoansGet200ResponseDataInnerLoanItemInnerLoanPricingInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "IndicativeRate": obj.get("IndicativeRate"),
            "LoanLengthIncrement": obj.get("LoanLengthIncrement"),
            "LoanLengthIncrementLower": obj.get("LoanLengthIncrementLower"),
            "LoanLengthIncrementUpper": obj.get("LoanLengthIncrementUpper"),
            "LoanSizeBandLower": obj.get("LoanSizeBandLower"),
            "LoanSizeBandUpper": obj.get("LoanSizeBandUpper"),
            "Negotiable": obj.get("Negotiable"),
            "RateComparisonType": obj.get("RateComparisonType"),
            "RepaymentFrequency": obj.get("RepaymentFrequency"),
            "SizeIncrement": obj.get("SizeIncrement")
        })
        return _obj



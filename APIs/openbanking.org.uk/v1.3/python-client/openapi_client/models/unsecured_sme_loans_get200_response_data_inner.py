# coding: utf-8

"""
    Open Data API

    Latest Swagger specification for OpenData

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.atm_organisation import ATMOrganisation
from openapi_client.models.business_current_account_benefits import BusinessCurrentAccountBenefits
from openapi_client.models.business_current_account_eligibility import BusinessCurrentAccountEligibility
from openapi_client.models.business_current_account_fees_and_charges_inner import BusinessCurrentAccountFeesAndChargesInner
from openapi_client.models.unsecured_sme_loans_get200_response_data_inner_loan_item_inner import UnsecuredSmeLoansGet200ResponseDataInnerLoanItemInner
from typing import Optional, Set
from typing_extensions import Self

class UnsecuredSmeLoansGet200ResponseDataInner(BaseModel):
    """
    SME Loan
    """ # noqa: E501
    arrears_treatment: Optional[StrictStr] = Field(default=None, description="Arrears treatment", alias="ArrearsTreatment")
    benefits: BusinessCurrentAccountBenefits = Field(alias="Benefits")
    currency: Annotated[List[Annotated[str, Field(strict=True)]], Field(min_length=1)] = Field(description="Currency of the Account. Default to GBP at present", alias="Currency")
    customer_access_channels: Annotated[List[StrictStr], Field(min_length=1)] = Field(description="Ways to interact with the bank", alias="CustomerAccessChannels")
    eligibility: BusinessCurrentAccountEligibility = Field(alias="Eligibility")
    fees_and_charges: Annotated[List[BusinessCurrentAccountFeesAndChargesInner], Field(min_length=1)] = Field(alias="FeesAndCharges")
    loan_item: List[UnsecuredSmeLoansGet200ResponseDataInnerLoanItemInner] = Field(alias="LoanItem")
    maximum_loan_amount: Annotated[str, Field(strict=True)] = Field(description="Maximum loan amount", alias="MaximumLoanAmount")
    maximum_loan_term: StrictInt = Field(description="Maximum loan term (Days)", alias="MaximumLoanTerm")
    minimum_loan_amount: Annotated[str, Field(strict=True)] = Field(description="Minimum loan amount", alias="MinimumLoanAmount")
    minimum_loan_term: StrictInt = Field(description="Minimum term (Days)", alias="MinimumLoanTerm")
    organisation: ATMOrganisation = Field(alias="Organisation")
    payment_holiday: StrictBool = Field(description="Indicates whether a repayment holiday is allowed", alias="PaymentHoliday")
    product_description: StrictStr = Field(description="Description of the product provided by the parent Organisation", alias="ProductDescription")
    product_identifier: StrictStr = Field(description="Identifier within the parent organisation for the product. Must be unique in the organisation", alias="ProductIdentifier")
    product_name: StrictStr = Field(description="The short product or marketing name assigned by the parent organisation", alias="ProductName")
    product_segment: Annotated[List[StrictStr], Field(min_length=1)] = Field(alias="ProductSegment")
    product_type_name: StrictStr = Field(description="Descriptive code for the product category", alias="ProductTypeName")
    product_url: Annotated[List[StrictStr], Field(min_length=1)] = Field(alias="ProductURL")
    tsand_cs: Annotated[List[StrictStr], Field(min_length=1)] = Field(description="URL provided by the parent organisation which redirects to the T&Cs", alias="TsandCs")
    __properties: ClassVar[List[str]] = ["ArrearsTreatment", "Benefits", "Currency", "CustomerAccessChannels", "Eligibility", "FeesAndCharges", "LoanItem", "MaximumLoanAmount", "MaximumLoanTerm", "MinimumLoanAmount", "MinimumLoanTerm", "Organisation", "PaymentHoliday", "ProductDescription", "ProductIdentifier", "ProductName", "ProductSegment", "ProductTypeName", "ProductURL", "TsandCs"]

    @field_validator('customer_access_channels')
    def customer_access_channels_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['Branch', 'MobileBankingApp', 'Online', 'Phone', 'Post', 'PostOffice', 'Text']):
                raise ValueError("each list item must be one of ('Branch', 'MobileBankingApp', 'Online', 'Phone', 'Post', 'PostOffice', 'Text')")
        return value

    @field_validator('maximum_loan_amount')
    def maximum_loan_amount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('minimum_loan_amount')
    def minimum_loan_amount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('product_segment')
    def product_segment_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['AgricultureSector', 'AllSegmentsCorporate', 'Corporate', 'FixedGroup', 'FlexibleBusinessLoan', 'GovernmentScheme', 'NewCustomersOnly', 'SmallLoan', 'SpecialisedSector', 'SwitchersOnly']):
                raise ValueError("each list item must be one of ('AgricultureSector', 'AllSegmentsCorporate', 'Corporate', 'FixedGroup', 'FlexibleBusinessLoan', 'GovernmentScheme', 'NewCustomersOnly', 'SmallLoan', 'SpecialisedSector', 'SwitchersOnly')")
        return value

    @field_validator('product_type_name')
    def product_type_name_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['FlexibleBusinessLoan', 'SmallBusinessLoan', 'SmeUnsecuredLoan']):
            raise ValueError("must be one of enum values ('FlexibleBusinessLoan', 'SmallBusinessLoan', 'SmeUnsecuredLoan')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnsecuredSmeLoansGet200ResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of benefits
        if self.benefits:
            _dict['Benefits'] = self.benefits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eligibility
        if self.eligibility:
            _dict['Eligibility'] = self.eligibility.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in fees_and_charges (list)
        _items = []
        if self.fees_and_charges:
            for _item_fees_and_charges in self.fees_and_charges:
                if _item_fees_and_charges:
                    _items.append(_item_fees_and_charges.to_dict())
            _dict['FeesAndCharges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in loan_item (list)
        _items = []
        if self.loan_item:
            for _item_loan_item in self.loan_item:
                if _item_loan_item:
                    _items.append(_item_loan_item.to_dict())
            _dict['LoanItem'] = _items
        # override the default output from pydantic by calling `to_dict()` of organisation
        if self.organisation:
            _dict['Organisation'] = self.organisation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnsecuredSmeLoansGet200ResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ArrearsTreatment": obj.get("ArrearsTreatment"),
            "Benefits": BusinessCurrentAccountBenefits.from_dict(obj["Benefits"]) if obj.get("Benefits") is not None else None,
            "Currency": obj.get("Currency"),
            "CustomerAccessChannels": obj.get("CustomerAccessChannels"),
            "Eligibility": BusinessCurrentAccountEligibility.from_dict(obj["Eligibility"]) if obj.get("Eligibility") is not None else None,
            "FeesAndCharges": [BusinessCurrentAccountFeesAndChargesInner.from_dict(_item) for _item in obj["FeesAndCharges"]] if obj.get("FeesAndCharges") is not None else None,
            "LoanItem": [UnsecuredSmeLoansGet200ResponseDataInnerLoanItemInner.from_dict(_item) for _item in obj["LoanItem"]] if obj.get("LoanItem") is not None else None,
            "MaximumLoanAmount": obj.get("MaximumLoanAmount"),
            "MaximumLoanTerm": obj.get("MaximumLoanTerm"),
            "MinimumLoanAmount": obj.get("MinimumLoanAmount"),
            "MinimumLoanTerm": obj.get("MinimumLoanTerm"),
            "Organisation": ATMOrganisation.from_dict(obj["Organisation"]) if obj.get("Organisation") is not None else None,
            "PaymentHoliday": obj.get("PaymentHoliday"),
            "ProductDescription": obj.get("ProductDescription"),
            "ProductIdentifier": obj.get("ProductIdentifier"),
            "ProductName": obj.get("ProductName"),
            "ProductSegment": obj.get("ProductSegment"),
            "ProductTypeName": obj.get("ProductTypeName"),
            "ProductURL": obj.get("ProductURL"),
            "TsandCs": obj.get("TsandCs")
        })
        return _obj



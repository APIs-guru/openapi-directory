# coding: utf-8

"""
    Open Data API

    Latest Swagger specification for OpenData

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.atm_organisation import ATMOrganisation
from openapi_client.models.business_current_account_benefits import BusinessCurrentAccountBenefits
from openapi_client.models.business_current_account_eligibility import BusinessCurrentAccountEligibility
from openapi_client.models.commercial_credit_cards_get200_response_data_inner_details import CommercialCreditCardsGet200ResponseDataInnerDetails
from typing import Optional, Set
from typing_extensions import Self

class CommercialCreditCardsGet200ResponseDataInner(BaseModel):
    """
    Commercial Credit Card
    """ # noqa: E501
    benefits: BusinessCurrentAccountBenefits = Field(alias="Benefits")
    description: StrictStr = Field(description="Product description", alias="Description")
    details: CommercialCreditCardsGet200ResponseDataInnerDetails = Field(alias="Details")
    eligibility: BusinessCurrentAccountEligibility = Field(alias="Eligibility")
    key_features: StrictStr = Field(description="Product key features", alias="KeyFeatures")
    organisation: ATMOrganisation = Field(alias="Organisation")
    other_key_features: Optional[StrictStr] = Field(default=None, description="Additional Features of the card", alias="OtherKeyFeatures")
    payment_holiday: StrictBool = Field(description="Indicates whether a payment holiday is possible", alias="PaymentHoliday")
    payment_holiday_description: Optional[StrictStr] = Field(default=None, description="Detailed description on the payment holiday if available", alias="PaymentHolidayDescription")
    product_identifier: StrictStr = Field(description="Identifier within the parent organisation for the product. Must be unique in the organisation", alias="ProductIdentifier")
    product_name: StrictStr = Field(description="Name of the Commercial Credit Card", alias="ProductName")
    product_segment: Optional[List[StrictStr]] = Field(default=None, description="Marketing or industry segment that the product is designed for", alias="ProductSegment")
    product_type: StrictStr = Field(description="Descriptive code for the product category", alias="ProductType")
    product_url: Annotated[List[StrictStr], Field(min_length=1)] = Field(description="URL provided by the organisation which redirects to the product (on live products only). There might be more than one product at a given URL", alias="ProductURL")
    tsand_cs: Annotated[List[StrictStr], Field(min_length=1)] = Field(description="URL provided by the parent organisation which redirects to the current T&Cs. Only applies on live products", alias="TsandCs")
    __properties: ClassVar[List[str]] = ["Benefits", "Description", "Details", "Eligibility", "KeyFeatures", "Organisation", "OtherKeyFeatures", "PaymentHoliday", "PaymentHolidayDescription", "ProductIdentifier", "ProductName", "ProductSegment", "ProductType", "ProductURL", "TsandCs"]

    @field_validator('product_segment')
    def product_segment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['Cashback', 'Corporate', 'General', 'Reward', 'SME']):
                raise ValueError("each list item must be one of ('Cashback', 'Corporate', 'General', 'Reward', 'SME')")
        return value

    @field_validator('product_type')
    def product_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['CommercialCreditCards']):
            raise ValueError("must be one of enum values ('CommercialCreditCards')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommercialCreditCardsGet200ResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of benefits
        if self.benefits:
            _dict['Benefits'] = self.benefits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of details
        if self.details:
            _dict['Details'] = self.details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eligibility
        if self.eligibility:
            _dict['Eligibility'] = self.eligibility.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organisation
        if self.organisation:
            _dict['Organisation'] = self.organisation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommercialCreditCardsGet200ResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Benefits": BusinessCurrentAccountBenefits.from_dict(obj["Benefits"]) if obj.get("Benefits") is not None else None,
            "Description": obj.get("Description"),
            "Details": CommercialCreditCardsGet200ResponseDataInnerDetails.from_dict(obj["Details"]) if obj.get("Details") is not None else None,
            "Eligibility": BusinessCurrentAccountEligibility.from_dict(obj["Eligibility"]) if obj.get("Eligibility") is not None else None,
            "KeyFeatures": obj.get("KeyFeatures"),
            "Organisation": ATMOrganisation.from_dict(obj["Organisation"]) if obj.get("Organisation") is not None else None,
            "OtherKeyFeatures": obj.get("OtherKeyFeatures"),
            "PaymentHoliday": obj.get("PaymentHoliday"),
            "PaymentHolidayDescription": obj.get("PaymentHolidayDescription"),
            "ProductIdentifier": obj.get("ProductIdentifier"),
            "ProductName": obj.get("ProductName"),
            "ProductSegment": obj.get("ProductSegment"),
            "ProductType": obj.get("ProductType"),
            "ProductURL": obj.get("ProductURL"),
            "TsandCs": obj.get("TsandCs")
        })
        return _obj



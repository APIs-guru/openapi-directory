# coding: utf-8

"""
    Open Data API

    Latest Swagger specification for OpenData

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.business_current_account_overdraft_inner_fees_and_charges_inner import BusinessCurrentAccountOverdraftInnerFeesAndChargesInner
from openapi_client.models.business_current_account_overdraft_inner_fees_and_charges_inner_fee_charge_other_application_frequency import BusinessCurrentAccountOverdraftInnerFeesAndChargesInnerFeeChargeOtherApplicationFrequency
from openapi_client.models.business_current_account_overdraft_inner_overdraft_tier_band_set_inner_overdraft_tier_band_inner import BusinessCurrentAccountOverdraftInnerOverdraftTierBandSetInnerOverdraftTierBandInner
from typing import Optional, Set
from typing_extensions import Self

class BusinessCurrentAccountOverdraftInnerOverdraftTierBandSetInner(BaseModel):
    """
    Tier Bandset
    """ # noqa: E501
    arrangement_other_type: Optional[BusinessCurrentAccountOverdraftInnerFeesAndChargesInnerFeeChargeOtherApplicationFrequency] = Field(default=None, alias="ArrangementOtherType")
    arrangement_type: StrictStr = Field(description="Defines the arrangement of the overdraft", alias="ArrangementType")
    buffer_amount: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Amount on overdraft that is prearranged", alias="BufferAmount")
    cma_defined_indicator: StrictBool = Field(description="describes that the tiers and bands are set by the CMA order, as opposed to be set by the banks", alias="CMADefinedIndicator")
    ear: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="EAR of the Overdraft Set", alias="EAR")
    fees_and_charges: Optional[List[BusinessCurrentAccountOverdraftInnerFeesAndChargesInner]] = Field(default=None, description="Type of fee or charge", alias="FeesAndCharges")
    notes: Optional[StrictStr] = Field(default=None, description="Notes on the Overdraft", alias="Notes")
    overdraft_tier_band: Optional[List[BusinessCurrentAccountOverdraftInnerOverdraftTierBandSetInnerOverdraftTierBandInner]] = Field(default=None, alias="OverdraftTierBand")
    tier_band_set_identification: Optional[StrictStr] = Field(default=None, description="Identification of the set of tiers or bands", alias="TierBandSetIdentification")
    __properties: ClassVar[List[str]] = ["ArrangementOtherType", "ArrangementType", "BufferAmount", "CMADefinedIndicator", "EAR", "FeesAndCharges", "Notes", "OverdraftTierBand", "TierBandSetIdentification"]

    @field_validator('arrangement_type')
    def arrangement_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Unarranged', 'Arranged', 'Other']):
            raise ValueError("must be one of enum values ('Unarranged', 'Arranged', 'Other')")
        return value

    @field_validator('buffer_amount')
    def buffer_amount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('ear')
    def ear_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,3}\.\d{1,4}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,3}\.\d{1,4}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BusinessCurrentAccountOverdraftInnerOverdraftTierBandSetInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of arrangement_other_type
        if self.arrangement_other_type:
            _dict['ArrangementOtherType'] = self.arrangement_other_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in fees_and_charges (list)
        _items = []
        if self.fees_and_charges:
            for _item_fees_and_charges in self.fees_and_charges:
                if _item_fees_and_charges:
                    _items.append(_item_fees_and_charges.to_dict())
            _dict['FeesAndCharges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in overdraft_tier_band (list)
        _items = []
        if self.overdraft_tier_band:
            for _item_overdraft_tier_band in self.overdraft_tier_band:
                if _item_overdraft_tier_band:
                    _items.append(_item_overdraft_tier_band.to_dict())
            _dict['OverdraftTierBand'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BusinessCurrentAccountOverdraftInnerOverdraftTierBandSetInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ArrangementOtherType": BusinessCurrentAccountOverdraftInnerFeesAndChargesInnerFeeChargeOtherApplicationFrequency.from_dict(obj["ArrangementOtherType"]) if obj.get("ArrangementOtherType") is not None else None,
            "ArrangementType": obj.get("ArrangementType"),
            "BufferAmount": obj.get("BufferAmount"),
            "CMADefinedIndicator": obj.get("CMADefinedIndicator"),
            "EAR": obj.get("EAR"),
            "FeesAndCharges": [BusinessCurrentAccountOverdraftInnerFeesAndChargesInner.from_dict(_item) for _item in obj["FeesAndCharges"]] if obj.get("FeesAndCharges") is not None else None,
            "Notes": obj.get("Notes"),
            "OverdraftTierBand": [BusinessCurrentAccountOverdraftInnerOverdraftTierBandSetInnerOverdraftTierBandInner.from_dict(_item) for _item in obj["OverdraftTierBand"]] if obj.get("OverdraftTierBand") is not None else None,
            "TierBandSetIdentification": obj.get("TierBandSetIdentification")
        })
        return _obj



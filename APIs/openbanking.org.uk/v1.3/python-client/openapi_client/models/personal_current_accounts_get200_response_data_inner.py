# coding: utf-8

"""
    Open Data API

    Latest Swagger specification for OpenData

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.atm_organisation import ATMOrganisation
from openapi_client.models.business_current_account_benefits import BusinessCurrentAccountBenefits
from openapi_client.models.business_current_account_ca_pricing_inner import BusinessCurrentAccountCAPricingInner
from openapi_client.models.business_current_account_credit_interest import BusinessCurrentAccountCreditInterest
from openapi_client.models.business_current_account_eligibility import BusinessCurrentAccountEligibility
from openapi_client.models.business_current_account_feature_inner import BusinessCurrentAccountFeatureInner
from openapi_client.models.business_current_account_fees_and_charges_inner import BusinessCurrentAccountFeesAndChargesInner
from openapi_client.models.business_current_account_overdraft_inner import BusinessCurrentAccountOverdraftInner
from typing import Optional, Set
from typing_extensions import Self

class PersonalCurrentAccountsGet200ResponseDataInner(BaseModel):
    """
    Personal Current Account
    """ # noqa: E501
    access_channels: Annotated[List[StrictStr], Field(min_length=1)] = Field(description="Ways to interact with the bank when managing account", alias="AccessChannels")
    benefits: BusinessCurrentAccountBenefits = Field(alias="Benefits")
    ca_pricing: Annotated[List[BusinessCurrentAccountCAPricingInner], Field(min_length=1)] = Field(alias="CAPricing")
    card_notes: Optional[StrictStr] = Field(default=None, description="Optional additional notes to supplement the card details", alias="CardNotes")
    card_type: Annotated[List[StrictStr], Field(min_length=1)] = Field(description="Card Type available", alias="CardType")
    card_withdrawal_limit: Annotated[str, Field(strict=True)] = Field(description="The daily Limit that a customer can get via the ATM. This describes the default limit rather than the maximum", alias="CardWithdrawalLimit")
    cheque_book_available: StrictBool = Field(description="Can a chequebook be issued", alias="ChequeBookAvailable")
    contactless: StrictBool = Field(description="Does the card issued have contactless facility", alias="Contactless")
    credit_interest: BusinessCurrentAccountCreditInterest = Field(alias="CreditInterest")
    credit_scoring_part_of_account_opening_for_getting_an_account: StrictBool = Field(description="Indicates whether a credit check performed on an inquiry to open an account is submitted", alias="CreditScoringPartOfAccountOpeningForGettingAnAccount")
    credit_scoring_part_of_account_opening_for_id_verification: Optional[StrictBool] = Field(default=None, description="Indicates whether a credit check is used to check the address of a potential new account holder", alias="CreditScoringPartOfAccountOpeningForIDVerification")
    credit_scoring_part_of_account_opening_id_verification_is_a_hard_or_soft_credit_score: Optional[List[StrictStr]] = Field(default=None, alias="CreditScoringPartOfAccountOpeningIDVerificationIsAHardOrSoftCreditScore")
    credit_scoring_part_of_account_opening_id_verification_text: Optional[List[StrictStr]] = Field(default=None, description="Details on the specific credit scoring", alias="CreditScoringPartOfAccountOpeningIDVerificationText")
    credit_scoring_part_of_account_opening_is_a_hard_or_soft_credit_score: Optional[List[StrictStr]] = Field(default=None, description="Describes the type of credit scoring", alias="CreditScoringPartOfAccountOpeningIsAHardOrSoftCreditScore")
    credit_scoring_part_of_account_opening_text: Optional[StrictStr] = Field(default=None, description="Details on the specific credit scoring", alias="CreditScoringPartOfAccountOpeningText")
    currency: Annotated[List[Annotated[str, Field(strict=True)]], Field(min_length=1)] = Field(description="Currency of the Account. Default to GBP at present", alias="Currency")
    eligibility: BusinessCurrentAccountEligibility = Field(alias="Eligibility")
    feature: Optional[List[BusinessCurrentAccountFeatureInner]] = Field(default=None, alias="Feature")
    fees_and_charges: Annotated[List[BusinessCurrentAccountFeesAndChargesInner], Field(min_length=1)] = Field(alias="FeesAndCharges")
    international_payments_supported: StrictBool = Field(description="Indicates that the account supports international payments", alias="InternationalPaymentsSupported")
    maximum_monthly_charge: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The maximum Relevant Charges that could accrue", alias="MaximumMonthlyCharge")
    mobile_wallet: Optional[List[StrictStr]] = Field(default=None, description="Mobile wallet supported by this product. A mobile wallet being any electronic device that allows an individual to make electronic commerce transactions", alias="MobileWallet")
    organisation: ATMOrganisation = Field(alias="Organisation")
    overdraft: Optional[List[BusinessCurrentAccountOverdraftInner]] = Field(default=None, alias="Overdraft")
    overdraft_offered: StrictBool = Field(description="Indicates whether an overdraft offered for this account", alias="OverdraftOffered")
    product_description: StrictStr = Field(description="Description of the product provided by the parent organisation", alias="ProductDescription")
    product_identifier: StrictStr = Field(description="Identifier within the parent organisation for the product. Must be unique in the organisation", alias="ProductIdentifier")
    product_name: Optional[StrictStr] = Field(default=None, description="The name of the product used for marketing purposes from a customer perspective. i.e. what the customer would recognise", alias="ProductName")
    product_segment: Annotated[List[StrictStr], Field(min_length=1)] = Field(alias="ProductSegment")
    product_type: StrictStr = Field(description="Descriptive code for the product category", alias="ProductType")
    product_url: Annotated[List[StrictStr], Field(min_length=1)] = Field(description="URL provided by the organisation which redirects to the product (on live products only). There might be more than one product at a given URL", alias="ProductURL")
    tsand_cs: Annotated[List[StrictStr], Field(min_length=1)] = Field(description="URL provided by the parent organisation which redirects to the current T&Cs", alias="TsandCs")
    __properties: ClassVar[List[str]] = ["AccessChannels", "Benefits", "CAPricing", "CardNotes", "CardType", "CardWithdrawalLimit", "ChequeBookAvailable", "Contactless", "CreditInterest", "CreditScoringPartOfAccountOpeningForGettingAnAccount", "CreditScoringPartOfAccountOpeningForIDVerification", "CreditScoringPartOfAccountOpeningIDVerificationIsAHardOrSoftCreditScore", "CreditScoringPartOfAccountOpeningIDVerificationText", "CreditScoringPartOfAccountOpeningIsAHardOrSoftCreditScore", "CreditScoringPartOfAccountOpeningText", "Currency", "Eligibility", "Feature", "FeesAndCharges", "InternationalPaymentsSupported", "MaximumMonthlyCharge", "MobileWallet", "Organisation", "Overdraft", "OverdraftOffered", "ProductDescription", "ProductIdentifier", "ProductName", "ProductSegment", "ProductType", "ProductURL", "TsandCs"]

    @field_validator('access_channels')
    def access_channels_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['ATM', 'Branch', 'BusinessCommercialCentre', 'CallCentre', 'MobileApps', 'MobileBanking', 'Online', 'Phone', 'Post', 'PostOffice', 'RelationshipManager', 'Text']):
                raise ValueError("each list item must be one of ('ATM', 'Branch', 'BusinessCommercialCentre', 'CallCentre', 'MobileApps', 'MobileBanking', 'Online', 'Phone', 'Post', 'PostOffice', 'RelationshipManager', 'Text')")
        return value

    @field_validator('card_type')
    def card_type_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['BasicCard', 'BusinessQuickLodgeCard', 'Cashcard', 'ContactlessCashcard', 'ContactlessDebitMastercard', 'ContactlessDebitVisa', 'DebitMastercard', 'VisaDebit', 'DepositCard', 'OperatorCard', 'POCACard']):
                raise ValueError("each list item must be one of ('BasicCard', 'BusinessQuickLodgeCard', 'Cashcard', 'ContactlessCashcard', 'ContactlessDebitMastercard', 'ContactlessDebitVisa', 'DebitMastercard', 'VisaDebit', 'DepositCard', 'OperatorCard', 'POCACard')")
        return value

    @field_validator('card_withdrawal_limit')
    def card_withdrawal_limit_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('credit_scoring_part_of_account_opening_id_verification_is_a_hard_or_soft_credit_score')
    def credit_scoring_part_of_account_opening_id_verification_is_a_hard_or_soft_credit_score_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['Hard', 'Soft']):
                raise ValueError("each list item must be one of ('Hard', 'Soft')")
        return value

    @field_validator('credit_scoring_part_of_account_opening_is_a_hard_or_soft_credit_score')
    def credit_scoring_part_of_account_opening_is_a_hard_or_soft_credit_score_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['Hard', 'Soft']):
                raise ValueError("each list item must be one of ('Hard', 'Soft')")
        return value

    @field_validator('maximum_monthly_charge')
    def maximum_monthly_charge_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{1,10}\.\d{1,2}$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{1,10}\.\d{1,2}$/")
        return value

    @field_validator('mobile_wallet')
    def mobile_wallet_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['AndroidPay', 'ApplePay', 'IssuerMobileApp', 'MobileBankingApp', 'Other', 'PayM', 'SamsungPay', 'VodafoneWallet']):
                raise ValueError("each list item must be one of ('AndroidPay', 'ApplePay', 'IssuerMobileApp', 'MobileBankingApp', 'Other', 'PayM', 'SamsungPay', 'VodafoneWallet')")
        return value

    @field_validator('product_segment')
    def product_segment_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['Basic', 'Business', 'General', 'Graduate', 'International', 'Packaged', 'Personal', 'Premium', 'Reward', 'SME', 'Student', 'YoungAdult', 'Youth']):
                raise ValueError("each list item must be one of ('Basic', 'Business', 'General', 'Graduate', 'International', 'Packaged', 'Personal', 'Premium', 'Reward', 'SME', 'Student', 'YoungAdult', 'Youth')")
        return value

    @field_validator('product_type')
    def product_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['PCA']):
            raise ValueError("must be one of enum values ('PCA')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PersonalCurrentAccountsGet200ResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of benefits
        if self.benefits:
            _dict['Benefits'] = self.benefits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ca_pricing (list)
        _items = []
        if self.ca_pricing:
            for _item_ca_pricing in self.ca_pricing:
                if _item_ca_pricing:
                    _items.append(_item_ca_pricing.to_dict())
            _dict['CAPricing'] = _items
        # override the default output from pydantic by calling `to_dict()` of credit_interest
        if self.credit_interest:
            _dict['CreditInterest'] = self.credit_interest.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eligibility
        if self.eligibility:
            _dict['Eligibility'] = self.eligibility.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in feature (list)
        _items = []
        if self.feature:
            for _item_feature in self.feature:
                if _item_feature:
                    _items.append(_item_feature.to_dict())
            _dict['Feature'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fees_and_charges (list)
        _items = []
        if self.fees_and_charges:
            for _item_fees_and_charges in self.fees_and_charges:
                if _item_fees_and_charges:
                    _items.append(_item_fees_and_charges.to_dict())
            _dict['FeesAndCharges'] = _items
        # override the default output from pydantic by calling `to_dict()` of organisation
        if self.organisation:
            _dict['Organisation'] = self.organisation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in overdraft (list)
        _items = []
        if self.overdraft:
            for _item_overdraft in self.overdraft:
                if _item_overdraft:
                    _items.append(_item_overdraft.to_dict())
            _dict['Overdraft'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PersonalCurrentAccountsGet200ResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccessChannels": obj.get("AccessChannels"),
            "Benefits": BusinessCurrentAccountBenefits.from_dict(obj["Benefits"]) if obj.get("Benefits") is not None else None,
            "CAPricing": [BusinessCurrentAccountCAPricingInner.from_dict(_item) for _item in obj["CAPricing"]] if obj.get("CAPricing") is not None else None,
            "CardNotes": obj.get("CardNotes"),
            "CardType": obj.get("CardType"),
            "CardWithdrawalLimit": obj.get("CardWithdrawalLimit"),
            "ChequeBookAvailable": obj.get("ChequeBookAvailable"),
            "Contactless": obj.get("Contactless"),
            "CreditInterest": BusinessCurrentAccountCreditInterest.from_dict(obj["CreditInterest"]) if obj.get("CreditInterest") is not None else None,
            "CreditScoringPartOfAccountOpeningForGettingAnAccount": obj.get("CreditScoringPartOfAccountOpeningForGettingAnAccount"),
            "CreditScoringPartOfAccountOpeningForIDVerification": obj.get("CreditScoringPartOfAccountOpeningForIDVerification"),
            "CreditScoringPartOfAccountOpeningIDVerificationIsAHardOrSoftCreditScore": obj.get("CreditScoringPartOfAccountOpeningIDVerificationIsAHardOrSoftCreditScore"),
            "CreditScoringPartOfAccountOpeningIDVerificationText": obj.get("CreditScoringPartOfAccountOpeningIDVerificationText"),
            "CreditScoringPartOfAccountOpeningIsAHardOrSoftCreditScore": obj.get("CreditScoringPartOfAccountOpeningIsAHardOrSoftCreditScore"),
            "CreditScoringPartOfAccountOpeningText": obj.get("CreditScoringPartOfAccountOpeningText"),
            "Currency": obj.get("Currency"),
            "Eligibility": BusinessCurrentAccountEligibility.from_dict(obj["Eligibility"]) if obj.get("Eligibility") is not None else None,
            "Feature": [BusinessCurrentAccountFeatureInner.from_dict(_item) for _item in obj["Feature"]] if obj.get("Feature") is not None else None,
            "FeesAndCharges": [BusinessCurrentAccountFeesAndChargesInner.from_dict(_item) for _item in obj["FeesAndCharges"]] if obj.get("FeesAndCharges") is not None else None,
            "InternationalPaymentsSupported": obj.get("InternationalPaymentsSupported"),
            "MaximumMonthlyCharge": obj.get("MaximumMonthlyCharge"),
            "MobileWallet": obj.get("MobileWallet"),
            "Organisation": ATMOrganisation.from_dict(obj["Organisation"]) if obj.get("Organisation") is not None else None,
            "Overdraft": [BusinessCurrentAccountOverdraftInner.from_dict(_item) for _item in obj["Overdraft"]] if obj.get("Overdraft") is not None else None,
            "OverdraftOffered": obj.get("OverdraftOffered"),
            "ProductDescription": obj.get("ProductDescription"),
            "ProductIdentifier": obj.get("ProductIdentifier"),
            "ProductName": obj.get("ProductName"),
            "ProductSegment": obj.get("ProductSegment"),
            "ProductType": obj.get("ProductType"),
            "ProductURL": obj.get("ProductURL"),
            "TsandCs": obj.get("TsandCs")
        })
        return _obj



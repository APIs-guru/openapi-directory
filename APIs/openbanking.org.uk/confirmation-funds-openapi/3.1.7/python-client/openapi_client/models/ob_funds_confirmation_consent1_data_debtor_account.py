# coding: utf-8

"""
    Confirmation of Funds API Specification

    Swagger for Confirmation of Funds API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class OBFundsConfirmationConsent1DataDebtorAccount(BaseModel):
    """
    Unambiguous identification of the account of the debtor to which a confirmation of funds consent will be applied.
    """ # noqa: E501
    identification: Annotated[str, Field(min_length=1, strict=True, max_length=256)] = Field(description="Identification assigned by an institution to identify an account. This identification is known by the account owner.", alias="Identification")
    name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=350)]] = Field(default=None, description="Name of the account, as assigned by the account servicing institution. Usage: The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.", alias="Name")
    scheme_name: StrictStr = Field(description="Name of the identification scheme, in a coded form as published in an external list.", alias="SchemeName")
    secondary_identification: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=34)]] = Field(default=None, description="This is secondary identification of the account, as assigned by the account servicing institution.  This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).", alias="SecondaryIdentification")
    __properties: ClassVar[List[str]] = ["Identification", "Name", "SchemeName", "SecondaryIdentification"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBFundsConfirmationConsent1DataDebtorAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBFundsConfirmationConsent1DataDebtorAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Identification": obj.get("Identification"),
            "Name": obj.get("Name"),
            "SchemeName": obj.get("SchemeName"),
            "SecondaryIdentification": obj.get("SecondaryIdentification")
        })
        return _obj



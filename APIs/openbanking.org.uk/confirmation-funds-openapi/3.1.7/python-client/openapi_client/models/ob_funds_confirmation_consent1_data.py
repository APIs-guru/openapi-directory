# coding: utf-8

"""
    Confirmation of Funds API Specification

    Swagger for Confirmation of Funds API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ob_funds_confirmation_consent1_data_debtor_account import OBFundsConfirmationConsent1DataDebtorAccount
from typing import Optional, Set
from typing_extensions import Self

class OBFundsConfirmationConsent1Data(BaseModel):
    """
    OBFundsConfirmationConsent1Data
    """ # noqa: E501
    debtor_account: OBFundsConfirmationConsent1DataDebtorAccount = Field(alias="DebtorAccount")
    expiration_date_time: Optional[datetime] = Field(default=None, description="Specified date and time the funds confirmation authorisation will expire.  If this is not populated, the authorisation will be open ended.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00", alias="ExpirationDateTime")
    __properties: ClassVar[List[str]] = ["DebtorAccount", "ExpirationDateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBFundsConfirmationConsent1Data from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of debtor_account
        if self.debtor_account:
            _dict['DebtorAccount'] = self.debtor_account.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBFundsConfirmationConsent1Data from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "DebtorAccount": OBFundsConfirmationConsent1DataDebtorAccount.from_dict(obj["DebtorAccount"]) if obj.get("DebtorAccount") is not None else None,
            "ExpirationDateTime": obj.get("ExpirationDateTime")
        })
        return _obj



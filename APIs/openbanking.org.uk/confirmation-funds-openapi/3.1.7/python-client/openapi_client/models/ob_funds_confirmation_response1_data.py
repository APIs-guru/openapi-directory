# coding: utf-8

"""
    Confirmation of Funds API Specification

    Swagger for Confirmation of Funds API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from openapi_client.models.ob_funds_confirmation1_data_instructed_amount import OBFundsConfirmation1DataInstructedAmount
from typing import Optional, Set
from typing_extensions import Self

class OBFundsConfirmationResponse1Data(BaseModel):
    """
    OBFundsConfirmationResponse1Data
    """ # noqa: E501
    consent_id: Annotated[str, Field(min_length=1, strict=True, max_length=128)] = Field(description="Unique identification as assigned by the ASPSP to uniquely identify the funds confirmation consent resource.", alias="ConsentId")
    creation_date_time: datetime = Field(description="Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00", alias="CreationDateTime")
    funds_available: StrictBool = Field(description="Flag to indicate the result of a confirmation of funds check.", alias="FundsAvailable")
    funds_confirmation_id: Annotated[str, Field(min_length=1, strict=True, max_length=40)] = Field(description="Unique identification as assigned by the ASPSP to uniquely identify the funds confirmation resource.", alias="FundsConfirmationId")
    instructed_amount: OBFundsConfirmation1DataInstructedAmount = Field(alias="InstructedAmount")
    reference: Annotated[str, Field(min_length=1, strict=True, max_length=35)] = Field(description="Unique reference, as assigned by the CBPII, to unambiguously refer to the request related to the payment transaction.", alias="Reference")
    __properties: ClassVar[List[str]] = ["ConsentId", "CreationDateTime", "FundsAvailable", "FundsConfirmationId", "InstructedAmount", "Reference"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBFundsConfirmationResponse1Data from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of instructed_amount
        if self.instructed_amount:
            _dict['InstructedAmount'] = self.instructed_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBFundsConfirmationResponse1Data from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ConsentId": obj.get("ConsentId"),
            "CreationDateTime": obj.get("CreationDateTime"),
            "FundsAvailable": obj.get("FundsAvailable"),
            "FundsConfirmationId": obj.get("FundsConfirmationId"),
            "InstructedAmount": OBFundsConfirmation1DataInstructedAmount.from_dict(obj["InstructedAmount"]) if obj.get("InstructedAmount") is not None else None,
            "Reference": obj.get("Reference")
        })
        return _obj



# coding: utf-8

"""
    Payment Initiation API

    Swagger for Payment Initiation API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.ob_write_international_standing_order_response7_data_refund import OBWriteInternationalStandingOrderResponse7DataRefund

class TestOBWriteInternationalStandingOrderResponse7DataRefund(unittest.TestCase):
    """OBWriteInternationalStandingOrderResponse7DataRefund unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OBWriteInternationalStandingOrderResponse7DataRefund:
        """Test OBWriteInternationalStandingOrderResponse7DataRefund
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OBWriteInternationalStandingOrderResponse7DataRefund`
        """
        model = OBWriteInternationalStandingOrderResponse7DataRefund()
        if include_optional:
            return OBWriteInternationalStandingOrderResponse7DataRefund(
                account = openapi_client.models.ob_write_domestic_response5_data_refund_account.OBWriteDomesticResponse5_Data_Refund_Account(
                    identification = '0', 
                    name = '0', 
                    scheme_name = '', 
                    secondary_identification = '0', ),
                agent = openapi_client.models.ob_write_international_response5_data_refund_agent.OBWriteInternationalResponse5_Data_Refund_Agent(
                    identification = '0', 
                    name = '0', 
                    postal_address = openapi_client.models.ob_postal_address6.OBPostalAddress6(
                        address_line = [
                            '0'
                            ], 
                        address_type = 'Business', 
                        building_number = '0', 
                        country = 'AE', 
                        country_sub_division = '0', 
                        department = '0', 
                        post_code = '0', 
                        street_name = '0', 
                        sub_department = '0', 
                        town_name = '0', ), 
                    scheme_name = '', ),
                creditor = openapi_client.models.ob_write_international_standing_order_response7_data_refund_creditor.OBWriteInternationalStandingOrderResponse7_Data_Refund_Creditor(
                    name = '0', 
                    postal_address = openapi_client.models.ob_postal_address6.OBPostalAddress6(
                        address_line = [
                            '0'
                            ], 
                        address_type = 'Business', 
                        building_number = '0', 
                        country = 'AE', 
                        country_sub_division = '0', 
                        department = '0', 
                        post_code = '0', 
                        street_name = '0', 
                        sub_department = '0', 
                        town_name = '0', ), )
            )
        else:
            return OBWriteInternationalStandingOrderResponse7DataRefund(
                account = openapi_client.models.ob_write_domestic_response5_data_refund_account.OBWriteDomesticResponse5_Data_Refund_Account(
                    identification = '0', 
                    name = '0', 
                    scheme_name = '', 
                    secondary_identification = '0', ),
        )
        """

    def testOBWriteInternationalStandingOrderResponse7DataRefund(self):
        """Test OBWriteInternationalStandingOrderResponse7DataRefund"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

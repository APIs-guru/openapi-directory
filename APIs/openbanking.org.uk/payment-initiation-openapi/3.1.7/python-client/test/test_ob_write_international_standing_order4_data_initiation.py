# coding: utf-8

"""
    Payment Initiation API

    Swagger for Payment Initiation API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.ob_write_international_standing_order4_data_initiation import OBWriteInternationalStandingOrder4DataInitiation

class TestOBWriteInternationalStandingOrder4DataInitiation(unittest.TestCase):
    """OBWriteInternationalStandingOrder4DataInitiation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OBWriteInternationalStandingOrder4DataInitiation:
        """Test OBWriteInternationalStandingOrder4DataInitiation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OBWriteInternationalStandingOrder4DataInitiation`
        """
        model = OBWriteInternationalStandingOrder4DataInitiation()
        if include_optional:
            return OBWriteInternationalStandingOrder4DataInitiation(
                charge_bearer = 'BorneByCreditor',
                creditor = openapi_client.models.ob_write_international_scheduled_consent_response6_data_initiation_creditor.OBWriteInternationalScheduledConsentResponse6_Data_Initiation_Creditor(
                    name = '0', 
                    postal_address = openapi_client.models.ob_postal_address6.OBPostalAddress6(
                        address_line = [
                            '0'
                            ], 
                        address_type = 'Business', 
                        building_number = '0', 
                        country = 'AE', 
                        country_sub_division = '0', 
                        department = '0', 
                        post_code = '0', 
                        street_name = '0', 
                        sub_department = '0', 
                        town_name = '0', ), ),
                creditor_account = openapi_client.models.ob_write_international_standing_order4_data_initiation_creditor_account.OBWriteInternationalStandingOrder4_Data_Initiation_CreditorAccount(
                    identification = '0', 
                    name = '0', 
                    scheme_name = '', 
                    secondary_identification = '0', ),
                creditor_agent = openapi_client.models.ob_write_international_standing_order4_data_initiation_creditor_agent.OBWriteInternationalStandingOrder4_Data_Initiation_CreditorAgent(
                    identification = '0', 
                    name = '0', 
                    postal_address = openapi_client.models.ob_postal_address6.OBPostalAddress6(
                        address_line = [
                            '0'
                            ], 
                        address_type = 'Business', 
                        building_number = '0', 
                        country = 'AE', 
                        country_sub_division = '0', 
                        department = '0', 
                        post_code = '0', 
                        street_name = '0', 
                        sub_department = '0', 
                        town_name = '0', ), 
                    scheme_name = '', ),
                currency_of_transfer = 'AEI',
                debtor_account = openapi_client.models.ob_write_domestic_standing_order3_data_initiation_debtor_account.OBWriteDomesticStandingOrder3_Data_Initiation_DebtorAccount(
                    identification = '0', 
                    name = '0', 
                    scheme_name = '', 
                    secondary_identification = '0', ),
                destination_country_code = 'AE',
                extended_purpose = '0',
                final_payment_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                first_payment_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                frequency = 'QtrDay:RECEIVED',
                instructed_amount = openapi_client.models.ob_write_domestic2_data_initiation_instructed_amount.OBWriteDomestic2_Data_Initiation_InstructedAmount(
                    amount = '80728.8001', 
                    currency = 'AEI', ),
                number_of_payments = '0',
                purpose = '0',
                reference = '0',
                supplementary_data = { }
            )
        else:
            return OBWriteInternationalStandingOrder4DataInitiation(
                creditor_account = openapi_client.models.ob_write_international_standing_order4_data_initiation_creditor_account.OBWriteInternationalStandingOrder4_Data_Initiation_CreditorAccount(
                    identification = '0', 
                    name = '0', 
                    scheme_name = '', 
                    secondary_identification = '0', ),
                currency_of_transfer = 'AEI',
                first_payment_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                frequency = 'QtrDay:RECEIVED',
                instructed_amount = openapi_client.models.ob_write_domestic2_data_initiation_instructed_amount.OBWriteDomestic2_Data_Initiation_InstructedAmount(
                    amount = '80728.8001', 
                    currency = 'AEI', ),
        )
        """

    def testOBWriteInternationalStandingOrder4DataInitiation(self):
        """Test OBWriteInternationalStandingOrder4DataInitiation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Payment Initiation API

    Swagger for Payment Initiation API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.ob_write_domestic_scheduled2_data import OBWriteDomesticScheduled2Data

class TestOBWriteDomesticScheduled2Data(unittest.TestCase):
    """OBWriteDomesticScheduled2Data unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OBWriteDomesticScheduled2Data:
        """Test OBWriteDomesticScheduled2Data
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OBWriteDomesticScheduled2Data`
        """
        model = OBWriteDomesticScheduled2Data()
        if include_optional:
            return OBWriteDomesticScheduled2Data(
                consent_id = '0',
                initiation = openapi_client.models.ob_write_domestic_scheduled2_data_initiation.OBWriteDomesticScheduled2_Data_Initiation(
                    creditor_account = openapi_client.models.ob_write_domestic2_data_initiation_creditor_account.OBWriteDomestic2_Data_Initiation_CreditorAccount(
                        identification = '0', 
                        name = '0', 
                        scheme_name = '', 
                        secondary_identification = '0', ), 
                    creditor_postal_address = openapi_client.models.ob_postal_address6.OBPostalAddress6(
                        address_line = [
                            '0'
                            ], 
                        address_type = 'Business', 
                        building_number = '0', 
                        country = 'AE', 
                        country_sub_division = '0', 
                        department = '0', 
                        post_code = '0', 
                        street_name = '0', 
                        sub_department = '0', 
                        town_name = '0', ), 
                    debtor_account = openapi_client.models.ob_write_domestic2_data_initiation_debtor_account.OBWriteDomestic2_Data_Initiation_DebtorAccount(
                        identification = '0', 
                        name = '0', 
                        scheme_name = '', 
                        secondary_identification = '0', ), 
                    end_to_end_identification = '0', 
                    instructed_amount = openapi_client.models.ob_write_domestic2_data_initiation_instructed_amount.OBWriteDomestic2_Data_Initiation_InstructedAmount(
                        amount = '80728.8001', 
                        currency = 'AEI', ), 
                    instruction_identification = '0', 
                    local_instrument = '', 
                    remittance_information = openapi_client.models.ob_write_domestic2_data_initiation_remittance_information.OBWriteDomestic2_Data_Initiation_RemittanceInformation(
                        reference = '0', 
                        unstructured = '0', ), 
                    requested_execution_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    supplementary_data = { }, )
            )
        else:
            return OBWriteDomesticScheduled2Data(
                consent_id = '0',
                initiation = openapi_client.models.ob_write_domestic_scheduled2_data_initiation.OBWriteDomesticScheduled2_Data_Initiation(
                    creditor_account = openapi_client.models.ob_write_domestic2_data_initiation_creditor_account.OBWriteDomestic2_Data_Initiation_CreditorAccount(
                        identification = '0', 
                        name = '0', 
                        scheme_name = '', 
                        secondary_identification = '0', ), 
                    creditor_postal_address = openapi_client.models.ob_postal_address6.OBPostalAddress6(
                        address_line = [
                            '0'
                            ], 
                        address_type = 'Business', 
                        building_number = '0', 
                        country = 'AE', 
                        country_sub_division = '0', 
                        department = '0', 
                        post_code = '0', 
                        street_name = '0', 
                        sub_department = '0', 
                        town_name = '0', ), 
                    debtor_account = openapi_client.models.ob_write_domestic2_data_initiation_debtor_account.OBWriteDomestic2_Data_Initiation_DebtorAccount(
                        identification = '0', 
                        name = '0', 
                        scheme_name = '', 
                        secondary_identification = '0', ), 
                    end_to_end_identification = '0', 
                    instructed_amount = openapi_client.models.ob_write_domestic2_data_initiation_instructed_amount.OBWriteDomestic2_Data_Initiation_InstructedAmount(
                        amount = '80728.8001', 
                        currency = 'AEI', ), 
                    instruction_identification = '0', 
                    local_instrument = '', 
                    remittance_information = openapi_client.models.ob_write_domestic2_data_initiation_remittance_information.OBWriteDomestic2_Data_Initiation_RemittanceInformation(
                        reference = '0', 
                        unstructured = '0', ), 
                    requested_execution_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    supplementary_data = { }, ),
        )
        """

    def testOBWriteDomesticScheduled2Data(self):
        """Test OBWriteDomesticScheduled2Data"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

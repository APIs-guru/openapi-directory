# coding: utf-8

"""
    Payment Initiation API

    Swagger for Payment Initiation API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.ob_write_domestic_standing_order3_data_initiation import OBWriteDomesticStandingOrder3DataInitiation

class TestOBWriteDomesticStandingOrder3DataInitiation(unittest.TestCase):
    """OBWriteDomesticStandingOrder3DataInitiation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OBWriteDomesticStandingOrder3DataInitiation:
        """Test OBWriteDomesticStandingOrder3DataInitiation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OBWriteDomesticStandingOrder3DataInitiation`
        """
        model = OBWriteDomesticStandingOrder3DataInitiation()
        if include_optional:
            return OBWriteDomesticStandingOrder3DataInitiation(
                creditor_account = openapi_client.models.ob_write_domestic_standing_order3_data_initiation_creditor_account.OBWriteDomesticStandingOrder3_Data_Initiation_CreditorAccount(
                    identification = '0', 
                    name = '0', 
                    scheme_name = '', 
                    secondary_identification = '0', ),
                debtor_account = openapi_client.models.ob_write_domestic_standing_order3_data_initiation_debtor_account.OBWriteDomesticStandingOrder3_Data_Initiation_DebtorAccount(
                    identification = '0', 
                    name = '0', 
                    scheme_name = '', 
                    secondary_identification = '0', ),
                final_payment_amount = openapi_client.models.ob_write_domestic_standing_order3_data_initiation_final_payment_amount.OBWriteDomesticStandingOrder3_Data_Initiation_FinalPaymentAmount(
                    amount = '80728.8001', 
                    currency = 'AEI', ),
                final_payment_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                first_payment_amount = openapi_client.models.ob_write_domestic_standing_order3_data_initiation_first_payment_amount.OBWriteDomesticStandingOrder3_Data_Initiation_FirstPaymentAmount(
                    amount = '80728.8001', 
                    currency = 'AEI', ),
                first_payment_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                frequency = 'QtrDay:RECEIVED',
                number_of_payments = '0',
                recurring_payment_amount = openapi_client.models.ob_write_domestic_standing_order3_data_initiation_recurring_payment_amount.OBWriteDomesticStandingOrder3_Data_Initiation_RecurringPaymentAmount(
                    amount = '80728.8001', 
                    currency = 'AEI', ),
                recurring_payment_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                reference = '0',
                supplementary_data = { }
            )
        else:
            return OBWriteDomesticStandingOrder3DataInitiation(
                creditor_account = openapi_client.models.ob_write_domestic_standing_order3_data_initiation_creditor_account.OBWriteDomesticStandingOrder3_Data_Initiation_CreditorAccount(
                    identification = '0', 
                    name = '0', 
                    scheme_name = '', 
                    secondary_identification = '0', ),
                first_payment_amount = openapi_client.models.ob_write_domestic_standing_order3_data_initiation_first_payment_amount.OBWriteDomesticStandingOrder3_Data_Initiation_FirstPaymentAmount(
                    amount = '80728.8001', 
                    currency = 'AEI', ),
                first_payment_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                frequency = 'QtrDay:RECEIVED',
        )
        """

    def testOBWriteDomesticStandingOrder3DataInitiation(self):
        """Test OBWriteDomesticStandingOrder3DataInitiation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

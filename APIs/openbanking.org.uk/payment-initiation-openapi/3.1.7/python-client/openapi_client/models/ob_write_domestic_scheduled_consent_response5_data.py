# coding: utf-8

"""
    Payment Initiation API

    Swagger for Payment Initiation API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ob_cash_account_debtor4 import OBCashAccountDebtor4
from openapi_client.models.ob_write_domestic_consent4_data_authorisation import OBWriteDomesticConsent4DataAuthorisation
from openapi_client.models.ob_write_domestic_consent_response5_data_charges_inner import OBWriteDomesticConsentResponse5DataChargesInner
from openapi_client.models.ob_write_domestic_scheduled2_data_initiation import OBWriteDomesticScheduled2DataInitiation
from openapi_client.models.obsca_support_data1 import OBSCASupportData1
from typing import Optional, Set
from typing_extensions import Self

class OBWriteDomesticScheduledConsentResponse5Data(BaseModel):
    """
    OBWriteDomesticScheduledConsentResponse5Data
    """ # noqa: E501
    authorisation: Optional[OBWriteDomesticConsent4DataAuthorisation] = Field(default=None, alias="Authorisation")
    charges: Optional[List[OBWriteDomesticConsentResponse5DataChargesInner]] = Field(default=None, alias="Charges")
    consent_id: Annotated[str, Field(min_length=1, strict=True, max_length=128)] = Field(description="OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.", alias="ConsentId")
    creation_date_time: datetime = Field(description="Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00", alias="CreationDateTime")
    cut_off_date_time: Optional[datetime] = Field(default=None, description="Specified cut-off date and time for the payment consent.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00", alias="CutOffDateTime")
    debtor: Optional[OBCashAccountDebtor4] = Field(default=None, alias="Debtor")
    expected_execution_date_time: Optional[datetime] = Field(default=None, description="Expected execution date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00", alias="ExpectedExecutionDateTime")
    expected_settlement_date_time: Optional[datetime] = Field(default=None, description="Expected settlement date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00", alias="ExpectedSettlementDateTime")
    initiation: OBWriteDomesticScheduled2DataInitiation = Field(alias="Initiation")
    permission: StrictStr = Field(description="Specifies the Open Banking service request types.", alias="Permission")
    read_refund_account: Optional[StrictStr] = Field(default=None, description="Specifies to share the refund account details with PISP", alias="ReadRefundAccount")
    sca_support_data: Optional[OBSCASupportData1] = Field(default=None, alias="SCASupportData")
    status: StrictStr = Field(description="Specifies the status of consent resource in code form.", alias="Status")
    status_update_date_time: datetime = Field(description="Date and time at which the consent resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00", alias="StatusUpdateDateTime")
    __properties: ClassVar[List[str]] = ["Authorisation", "Charges", "ConsentId", "CreationDateTime", "CutOffDateTime", "Debtor", "ExpectedExecutionDateTime", "ExpectedSettlementDateTime", "Initiation", "Permission", "ReadRefundAccount", "SCASupportData", "Status", "StatusUpdateDateTime"]

    @field_validator('permission')
    def permission_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Create']):
            raise ValueError("must be one of enum values ('Create')")
        return value

    @field_validator('read_refund_account')
    def read_refund_account_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['false', 'true']):
            raise ValueError("must be one of enum values ('false', 'true')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Authorised', 'AwaitingAuthorisation', 'Consumed', 'Rejected']):
            raise ValueError("must be one of enum values ('Authorised', 'AwaitingAuthorisation', 'Consumed', 'Rejected')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBWriteDomesticScheduledConsentResponse5Data from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of authorisation
        if self.authorisation:
            _dict['Authorisation'] = self.authorisation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in charges (list)
        _items = []
        if self.charges:
            for _item_charges in self.charges:
                if _item_charges:
                    _items.append(_item_charges.to_dict())
            _dict['Charges'] = _items
        # override the default output from pydantic by calling `to_dict()` of debtor
        if self.debtor:
            _dict['Debtor'] = self.debtor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of initiation
        if self.initiation:
            _dict['Initiation'] = self.initiation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sca_support_data
        if self.sca_support_data:
            _dict['SCASupportData'] = self.sca_support_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBWriteDomesticScheduledConsentResponse5Data from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Authorisation": OBWriteDomesticConsent4DataAuthorisation.from_dict(obj["Authorisation"]) if obj.get("Authorisation") is not None else None,
            "Charges": [OBWriteDomesticConsentResponse5DataChargesInner.from_dict(_item) for _item in obj["Charges"]] if obj.get("Charges") is not None else None,
            "ConsentId": obj.get("ConsentId"),
            "CreationDateTime": obj.get("CreationDateTime"),
            "CutOffDateTime": obj.get("CutOffDateTime"),
            "Debtor": OBCashAccountDebtor4.from_dict(obj["Debtor"]) if obj.get("Debtor") is not None else None,
            "ExpectedExecutionDateTime": obj.get("ExpectedExecutionDateTime"),
            "ExpectedSettlementDateTime": obj.get("ExpectedSettlementDateTime"),
            "Initiation": OBWriteDomesticScheduled2DataInitiation.from_dict(obj["Initiation"]) if obj.get("Initiation") is not None else None,
            "Permission": obj.get("Permission"),
            "ReadRefundAccount": obj.get("ReadRefundAccount"),
            "SCASupportData": OBSCASupportData1.from_dict(obj["SCASupportData"]) if obj.get("SCASupportData") is not None else None,
            "Status": obj.get("Status"),
            "StatusUpdateDateTime": obj.get("StatusUpdateDateTime")
        })
        return _obj



# coding: utf-8

"""
    Payment Initiation API

    Swagger for Payment Initiation API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ob_write_payment_details_response1_data_payment_status_inner_status_detail import OBWritePaymentDetailsResponse1DataPaymentStatusInnerStatusDetail
from typing import Optional, Set
from typing_extensions import Self

class OBWritePaymentDetailsResponse1DataPaymentStatusInner(BaseModel):
    """
    Payment status details.
    """ # noqa: E501
    payment_transaction_id: Annotated[str, Field(min_length=1, strict=True, max_length=210)] = Field(description="Unique identifier for the transaction within an servicing institution. This identifier is both unique and immutable.", alias="PaymentTransactionId")
    status: StrictStr = Field(description="Status of a transfe, as assigned by the transaction administrator.", alias="Status")
    status_detail: Optional[OBWritePaymentDetailsResponse1DataPaymentStatusInnerStatusDetail] = Field(default=None, alias="StatusDetail")
    status_update_date_time: datetime = Field(description="Date and time at which the status was assigned to the transfer.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00", alias="StatusUpdateDateTime")
    __properties: ClassVar[List[str]] = ["PaymentTransactionId", "Status", "StatusDetail", "StatusUpdateDateTime"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Accepted', 'AcceptedCancellationRequest', 'AcceptedCreditSettlementCompleted', 'AcceptedCustomerProfile', 'AcceptedFundsChecked', 'AcceptedSettlementCompleted', 'AcceptedSettlementInProcess', 'AcceptedTechnicalValidation', 'AcceptedWithChange', 'AcceptedWithoutPosting', 'Cancelled', 'NoCancellationProcess', 'PartiallyAcceptedCancellationRequest', 'PartiallyAcceptedTechnicalCorrect', 'PaymentCancelled', 'Pending', 'PendingCancellationRequest', 'Received', 'Rejected', 'RejectedCancellationRequest']):
            raise ValueError("must be one of enum values ('Accepted', 'AcceptedCancellationRequest', 'AcceptedCreditSettlementCompleted', 'AcceptedCustomerProfile', 'AcceptedFundsChecked', 'AcceptedSettlementCompleted', 'AcceptedSettlementInProcess', 'AcceptedTechnicalValidation', 'AcceptedWithChange', 'AcceptedWithoutPosting', 'Cancelled', 'NoCancellationProcess', 'PartiallyAcceptedCancellationRequest', 'PartiallyAcceptedTechnicalCorrect', 'PaymentCancelled', 'Pending', 'PendingCancellationRequest', 'Received', 'Rejected', 'RejectedCancellationRequest')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBWritePaymentDetailsResponse1DataPaymentStatusInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status_detail
        if self.status_detail:
            _dict['StatusDetail'] = self.status_detail.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBWritePaymentDetailsResponse1DataPaymentStatusInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "PaymentTransactionId": obj.get("PaymentTransactionId"),
            "Status": obj.get("Status"),
            "StatusDetail": OBWritePaymentDetailsResponse1DataPaymentStatusInnerStatusDetail.from_dict(obj["StatusDetail"]) if obj.get("StatusDetail") is not None else None,
            "StatusUpdateDateTime": obj.get("StatusUpdateDateTime")
        })
        return _obj



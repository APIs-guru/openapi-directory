# coding: utf-8

"""
    Payment Initiation API

    Swagger for Payment Initiation API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ob_charge_bearer_type1_code import OBChargeBearerType1Code
from openapi_client.models.ob_write_domestic2_data_initiation_creditor_account import OBWriteDomestic2DataInitiationCreditorAccount
from openapi_client.models.ob_write_domestic2_data_initiation_debtor_account import OBWriteDomestic2DataInitiationDebtorAccount
from openapi_client.models.ob_write_domestic2_data_initiation_instructed_amount import OBWriteDomestic2DataInitiationInstructedAmount
from openapi_client.models.ob_write_domestic2_data_initiation_remittance_information import OBWriteDomestic2DataInitiationRemittanceInformation
from openapi_client.models.ob_write_international3_data_initiation_creditor import OBWriteInternational3DataInitiationCreditor
from openapi_client.models.ob_write_international3_data_initiation_creditor_agent import OBWriteInternational3DataInitiationCreditorAgent
from openapi_client.models.ob_write_international3_data_initiation_exchange_rate_information import OBWriteInternational3DataInitiationExchangeRateInformation
from typing import Optional, Set
from typing_extensions import Self

class OBWriteInternationalScheduled3DataInitiation(BaseModel):
    """
    The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled international payment.
    """ # noqa: E501
    charge_bearer: Optional[OBChargeBearerType1Code] = Field(default=None, alias="ChargeBearer")
    creditor: Optional[OBWriteInternational3DataInitiationCreditor] = Field(default=None, alias="Creditor")
    creditor_account: OBWriteDomestic2DataInitiationCreditorAccount = Field(alias="CreditorAccount")
    creditor_agent: Optional[OBWriteInternational3DataInitiationCreditorAgent] = Field(default=None, alias="CreditorAgent")
    currency_of_transfer: Annotated[str, Field(strict=True)] = Field(description="Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.", alias="CurrencyOfTransfer")
    debtor_account: Optional[OBWriteDomestic2DataInitiationDebtorAccount] = Field(default=None, alias="DebtorAccount")
    destination_country_code: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).", alias="DestinationCountryCode")
    end_to_end_identification: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=35)]] = Field(default=None, description="Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain. Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction. OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.", alias="EndToEndIdentification")
    exchange_rate_information: Optional[OBWriteInternational3DataInitiationExchangeRateInformation] = Field(default=None, alias="ExchangeRateInformation")
    extended_purpose: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=140)]] = Field(default=None, description="Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.", alias="ExtendedPurpose")
    instructed_amount: OBWriteDomestic2DataInitiationInstructedAmount = Field(alias="InstructedAmount")
    instruction_identification: Annotated[str, Field(min_length=1, strict=True, max_length=35)] = Field(description="Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction. Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.", alias="InstructionIdentification")
    instruction_priority: Optional[StrictStr] = Field(default=None, description="Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.", alias="InstructionPriority")
    local_instrument: Optional[StrictStr] = Field(default=None, description="User community specific instrument. Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.", alias="LocalInstrument")
    purpose: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=4)]] = Field(default=None, description="Specifies the external purpose code in the format of character string with a maximum length of 4 characters. The list of valid codes is an external code list published separately. External code sets can be downloaded from www.iso20022.org.", alias="Purpose")
    remittance_information: Optional[OBWriteDomestic2DataInitiationRemittanceInformation] = Field(default=None, alias="RemittanceInformation")
    requested_execution_date_time: datetime = Field(description="Date at which the initiating party requests the clearing agent to process the payment.  Usage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00", alias="RequestedExecutionDateTime")
    supplementary_data: Optional[Dict[str, Any]] = Field(default=None, description="Additional information that can not be captured in the structured fields and/or any other specific block.", alias="SupplementaryData")
    __properties: ClassVar[List[str]] = ["ChargeBearer", "Creditor", "CreditorAccount", "CreditorAgent", "CurrencyOfTransfer", "DebtorAccount", "DestinationCountryCode", "EndToEndIdentification", "ExchangeRateInformation", "ExtendedPurpose", "InstructedAmount", "InstructionIdentification", "InstructionPriority", "LocalInstrument", "Purpose", "RemittanceInformation", "RequestedExecutionDateTime", "SupplementaryData"]

    @field_validator('currency_of_transfer')
    def currency_of_transfer_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Z]{3,3}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{3,3}$/")
        return value

    @field_validator('destination_country_code')
    def destination_country_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[A-Z]{2,2}", value):
            raise ValueError(r"must validate the regular expression /[A-Z]{2,2}/")
        return value

    @field_validator('instruction_priority')
    def instruction_priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Normal', 'Urgent']):
            raise ValueError("must be one of enum values ('Normal', 'Urgent')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBWriteInternationalScheduled3DataInitiation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creditor
        if self.creditor:
            _dict['Creditor'] = self.creditor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creditor_account
        if self.creditor_account:
            _dict['CreditorAccount'] = self.creditor_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creditor_agent
        if self.creditor_agent:
            _dict['CreditorAgent'] = self.creditor_agent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of debtor_account
        if self.debtor_account:
            _dict['DebtorAccount'] = self.debtor_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of exchange_rate_information
        if self.exchange_rate_information:
            _dict['ExchangeRateInformation'] = self.exchange_rate_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of instructed_amount
        if self.instructed_amount:
            _dict['InstructedAmount'] = self.instructed_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remittance_information
        if self.remittance_information:
            _dict['RemittanceInformation'] = self.remittance_information.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBWriteInternationalScheduled3DataInitiation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ChargeBearer": obj.get("ChargeBearer"),
            "Creditor": OBWriteInternational3DataInitiationCreditor.from_dict(obj["Creditor"]) if obj.get("Creditor") is not None else None,
            "CreditorAccount": OBWriteDomestic2DataInitiationCreditorAccount.from_dict(obj["CreditorAccount"]) if obj.get("CreditorAccount") is not None else None,
            "CreditorAgent": OBWriteInternational3DataInitiationCreditorAgent.from_dict(obj["CreditorAgent"]) if obj.get("CreditorAgent") is not None else None,
            "CurrencyOfTransfer": obj.get("CurrencyOfTransfer"),
            "DebtorAccount": OBWriteDomestic2DataInitiationDebtorAccount.from_dict(obj["DebtorAccount"]) if obj.get("DebtorAccount") is not None else None,
            "DestinationCountryCode": obj.get("DestinationCountryCode"),
            "EndToEndIdentification": obj.get("EndToEndIdentification"),
            "ExchangeRateInformation": OBWriteInternational3DataInitiationExchangeRateInformation.from_dict(obj["ExchangeRateInformation"]) if obj.get("ExchangeRateInformation") is not None else None,
            "ExtendedPurpose": obj.get("ExtendedPurpose"),
            "InstructedAmount": OBWriteDomestic2DataInitiationInstructedAmount.from_dict(obj["InstructedAmount"]) if obj.get("InstructedAmount") is not None else None,
            "InstructionIdentification": obj.get("InstructionIdentification"),
            "InstructionPriority": obj.get("InstructionPriority"),
            "LocalInstrument": obj.get("LocalInstrument"),
            "Purpose": obj.get("Purpose"),
            "RemittanceInformation": OBWriteDomestic2DataInitiationRemittanceInformation.from_dict(obj["RemittanceInformation"]) if obj.get("RemittanceInformation") is not None else None,
            "RequestedExecutionDateTime": obj.get("RequestedExecutionDateTime"),
            "SupplementaryData": obj.get("SupplementaryData")
        })
        return _obj



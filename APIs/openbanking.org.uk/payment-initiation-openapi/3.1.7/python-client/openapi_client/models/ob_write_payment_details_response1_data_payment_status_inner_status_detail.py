# coding: utf-8

"""
    Payment Initiation API

    Swagger for Payment Initiation API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class OBWritePaymentDetailsResponse1DataPaymentStatusInnerStatusDetail(BaseModel):
    """
    Payment status details as per underlying Payment Rail.
    """ # noqa: E501
    local_instrument: Optional[StrictStr] = Field(default=None, description="User community specific instrument. Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.", alias="LocalInstrument")
    status: Annotated[str, Field(min_length=1, strict=True, max_length=128)] = Field(description="Status of a transfer, as assigned by the transaction administrator.", alias="Status")
    status_reason: Optional[StrictStr] = Field(default=None, description="Reason Code provided for the status of a transfer.", alias="StatusReason")
    status_reason_description: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=256)]] = Field(default=None, description="Reason provided for the status of a transfer.", alias="StatusReasonDescription")
    __properties: ClassVar[List[str]] = ["LocalInstrument", "Status", "StatusReason", "StatusReasonDescription"]

    @field_validator('status_reason')
    def status_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Cancelled', 'PendingFailingSettlement', 'PendingSettlement', 'Proprietary', 'ProprietaryRejection', 'Suspended', 'Unmatched']):
            raise ValueError("must be one of enum values ('Cancelled', 'PendingFailingSettlement', 'PendingSettlement', 'Proprietary', 'ProprietaryRejection', 'Suspended', 'Unmatched')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBWritePaymentDetailsResponse1DataPaymentStatusInnerStatusDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBWritePaymentDetailsResponse1DataPaymentStatusInnerStatusDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "LocalInstrument": obj.get("LocalInstrument"),
            "Status": obj.get("Status"),
            "StatusReason": obj.get("StatusReason"),
            "StatusReasonDescription": obj.get("StatusReasonDescription")
        })
        return _obj



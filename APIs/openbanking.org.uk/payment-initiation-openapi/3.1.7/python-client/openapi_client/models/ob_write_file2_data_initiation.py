# coding: utf-8

"""
    Payment Initiation API

    Swagger for Payment Initiation API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.ob_write_domestic2_data_initiation_debtor_account import OBWriteDomestic2DataInitiationDebtorAccount
from openapi_client.models.ob_write_domestic2_data_initiation_remittance_information import OBWriteDomestic2DataInitiationRemittanceInformation
from typing import Optional, Set
from typing_extensions import Self

class OBWriteFile2DataInitiation(BaseModel):
    """
    The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds using a payment file.
    """ # noqa: E501
    control_sum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total of all individual amounts included in the group, irrespective of currencies.", alias="ControlSum")
    debtor_account: Optional[OBWriteDomestic2DataInitiationDebtorAccount] = Field(default=None, alias="DebtorAccount")
    file_hash: Annotated[str, Field(min_length=1, strict=True, max_length=44)] = Field(description="A base64 encoding of a SHA256 hash of the file to be uploaded.", alias="FileHash")
    file_reference: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=40)]] = Field(default=None, description="Reference for the file.", alias="FileReference")
    file_type: StrictStr = Field(description="Specifies the payment file type.", alias="FileType")
    local_instrument: Optional[StrictStr] = Field(default=None, description="User community specific instrument. Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.", alias="LocalInstrument")
    number_of_transactions: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Number of individual transactions contained in the payment information group.", alias="NumberOfTransactions")
    remittance_information: Optional[OBWriteDomestic2DataInitiationRemittanceInformation] = Field(default=None, alias="RemittanceInformation")
    requested_execution_date_time: Optional[datetime] = Field(default=None, description="Date at which the initiating party requests the clearing agent to process the payment.  Usage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00", alias="RequestedExecutionDateTime")
    supplementary_data: Optional[Dict[str, Any]] = Field(default=None, description="Additional information that can not be captured in the structured fields and/or any other specific block.", alias="SupplementaryData")
    __properties: ClassVar[List[str]] = ["ControlSum", "DebtorAccount", "FileHash", "FileReference", "FileType", "LocalInstrument", "NumberOfTransactions", "RemittanceInformation", "RequestedExecutionDateTime", "SupplementaryData"]

    @field_validator('number_of_transactions')
    def number_of_transactions_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[0-9]{1,15}", value):
            raise ValueError(r"must validate the regular expression /[0-9]{1,15}/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBWriteFile2DataInitiation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of debtor_account
        if self.debtor_account:
            _dict['DebtorAccount'] = self.debtor_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remittance_information
        if self.remittance_information:
            _dict['RemittanceInformation'] = self.remittance_information.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBWriteFile2DataInitiation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ControlSum": obj.get("ControlSum"),
            "DebtorAccount": OBWriteDomestic2DataInitiationDebtorAccount.from_dict(obj["DebtorAccount"]) if obj.get("DebtorAccount") is not None else None,
            "FileHash": obj.get("FileHash"),
            "FileReference": obj.get("FileReference"),
            "FileType": obj.get("FileType"),
            "LocalInstrument": obj.get("LocalInstrument"),
            "NumberOfTransactions": obj.get("NumberOfTransactions"),
            "RemittanceInformation": OBWriteDomestic2DataInitiationRemittanceInformation.from_dict(obj["RemittanceInformation"]) if obj.get("RemittanceInformation") is not None else None,
            "RequestedExecutionDateTime": obj.get("RequestedExecutionDateTime"),
            "SupplementaryData": obj.get("SupplementaryData")
        })
        return _obj



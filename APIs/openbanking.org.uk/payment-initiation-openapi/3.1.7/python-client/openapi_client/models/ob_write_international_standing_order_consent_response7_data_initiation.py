# coding: utf-8

"""
    Payment Initiation API

    Swagger for Payment Initiation API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ob_charge_bearer_type1_code import OBChargeBearerType1Code
from openapi_client.models.ob_write_domestic2_data_initiation_debtor_account import OBWriteDomestic2DataInitiationDebtorAccount
from openapi_client.models.ob_write_domestic2_data_initiation_instructed_amount import OBWriteDomestic2DataInitiationInstructedAmount
from openapi_client.models.ob_write_international_scheduled_consent_response6_data_initiation_creditor import OBWriteInternationalScheduledConsentResponse6DataInitiationCreditor
from openapi_client.models.ob_write_international_standing_order4_data_initiation_creditor_account import OBWriteInternationalStandingOrder4DataInitiationCreditorAccount
from openapi_client.models.ob_write_international_standing_order4_data_initiation_creditor_agent import OBWriteInternationalStandingOrder4DataInitiationCreditorAgent
from typing import Optional, Set
from typing_extensions import Self

class OBWriteInternationalStandingOrderConsentResponse7DataInitiation(BaseModel):
    """
    The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for an international standing order.
    """ # noqa: E501
    charge_bearer: Optional[OBChargeBearerType1Code] = Field(default=None, alias="ChargeBearer")
    creditor: Optional[OBWriteInternationalScheduledConsentResponse6DataInitiationCreditor] = Field(default=None, alias="Creditor")
    creditor_account: OBWriteInternationalStandingOrder4DataInitiationCreditorAccount = Field(alias="CreditorAccount")
    creditor_agent: Optional[OBWriteInternationalStandingOrder4DataInitiationCreditorAgent] = Field(default=None, alias="CreditorAgent")
    currency_of_transfer: Annotated[str, Field(strict=True)] = Field(description="Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.", alias="CurrencyOfTransfer")
    debtor_account: Optional[OBWriteDomestic2DataInitiationDebtorAccount] = Field(default=None, alias="DebtorAccount")
    destination_country_code: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).", alias="DestinationCountryCode")
    extended_purpose: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=140)]] = Field(default=None, description="Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.", alias="ExtendedPurpose")
    final_payment_date_time: Optional[datetime] = Field(default=None, description="The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00", alias="FinalPaymentDateTime")
    first_payment_date_time: datetime = Field(description="The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00", alias="FirstPaymentDateTime")
    frequency: Annotated[str, Field(strict=True)] = Field(description="Individual Definitions: EvryDay - Every day EvryWorkgDay - Every working day IntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07) WkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07) IntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-5 to -1, 1 to 31) QtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED).  ENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December.  SCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November. RECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December.  Individual Patterns: EvryDay (ScheduleCode) EvryWorkgDay (ScheduleCode) IntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek) WkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek) IntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth) QtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay The regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here: EvryDay EvryWorkgDay IntrvlWkDay:0[1-9]:0[1-7] WkInMnthDay:0[1-5]:0[1-7] IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]) QtrDay:(ENGLISH|SCOTTISH|RECEIVED) Full Regular Expression: ^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$", alias="Frequency")
    instructed_amount: OBWriteDomestic2DataInitiationInstructedAmount = Field(alias="InstructedAmount")
    number_of_payments: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=35)]] = Field(default=None, description="Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.", alias="NumberOfPayments")
    purpose: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=4)]] = Field(default=None, description="Specifies the external purpose code in the format of character string with a maximum length of 4 characters. The list of valid codes is an external code list published separately. External code sets can be downloaded from www.iso20022.org.", alias="Purpose")
    reference: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=35)]] = Field(default=None, description="Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction. Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money. If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.", alias="Reference")
    supplementary_data: Optional[Dict[str, Any]] = Field(default=None, description="Additional information that can not be captured in the structured fields and/or any other specific block.", alias="SupplementaryData")
    __properties: ClassVar[List[str]] = ["ChargeBearer", "Creditor", "CreditorAccount", "CreditorAgent", "CurrencyOfTransfer", "DebtorAccount", "DestinationCountryCode", "ExtendedPurpose", "FinalPaymentDateTime", "FirstPaymentDateTime", "Frequency", "InstructedAmount", "NumberOfPayments", "Purpose", "Reference", "SupplementaryData"]

    @field_validator('currency_of_transfer')
    def currency_of_transfer_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Z]{3,3}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{3,3}$/")
        return value

    @field_validator('destination_country_code')
    def destination_country_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[A-Z]{2,2}", value):
            raise ValueError(r"must validate the regular expression /[A-Z]{2,2}/")
        return value

    @field_validator('frequency')
    def frequency_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$", value):
            raise ValueError(r"must validate the regular expression /^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBWriteInternationalStandingOrderConsentResponse7DataInitiation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creditor
        if self.creditor:
            _dict['Creditor'] = self.creditor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creditor_account
        if self.creditor_account:
            _dict['CreditorAccount'] = self.creditor_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creditor_agent
        if self.creditor_agent:
            _dict['CreditorAgent'] = self.creditor_agent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of debtor_account
        if self.debtor_account:
            _dict['DebtorAccount'] = self.debtor_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of instructed_amount
        if self.instructed_amount:
            _dict['InstructedAmount'] = self.instructed_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBWriteInternationalStandingOrderConsentResponse7DataInitiation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ChargeBearer": obj.get("ChargeBearer"),
            "Creditor": OBWriteInternationalScheduledConsentResponse6DataInitiationCreditor.from_dict(obj["Creditor"]) if obj.get("Creditor") is not None else None,
            "CreditorAccount": OBWriteInternationalStandingOrder4DataInitiationCreditorAccount.from_dict(obj["CreditorAccount"]) if obj.get("CreditorAccount") is not None else None,
            "CreditorAgent": OBWriteInternationalStandingOrder4DataInitiationCreditorAgent.from_dict(obj["CreditorAgent"]) if obj.get("CreditorAgent") is not None else None,
            "CurrencyOfTransfer": obj.get("CurrencyOfTransfer"),
            "DebtorAccount": OBWriteDomestic2DataInitiationDebtorAccount.from_dict(obj["DebtorAccount"]) if obj.get("DebtorAccount") is not None else None,
            "DestinationCountryCode": obj.get("DestinationCountryCode"),
            "ExtendedPurpose": obj.get("ExtendedPurpose"),
            "FinalPaymentDateTime": obj.get("FinalPaymentDateTime"),
            "FirstPaymentDateTime": obj.get("FirstPaymentDateTime"),
            "Frequency": obj.get("Frequency"),
            "InstructedAmount": OBWriteDomestic2DataInitiationInstructedAmount.from_dict(obj["InstructedAmount"]) if obj.get("InstructedAmount") is not None else None,
            "NumberOfPayments": obj.get("NumberOfPayments"),
            "Purpose": obj.get("Purpose"),
            "Reference": obj.get("Reference"),
            "SupplementaryData": obj.get("SupplementaryData")
        })
        return _obj



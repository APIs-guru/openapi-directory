# coding: utf-8

"""
    Payment Initiation API

    Swagger for Payment Initiation API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class OBWriteInternational3DataInitiationExchangeRateInformation(BaseModel):
    """
    Provides details on the currency exchange rate and contract.
    """ # noqa: E501
    contract_identification: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=256)]] = Field(default=None, description="Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.", alias="ContractIdentification")
    exchange_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.", alias="ExchangeRate")
    rate_type: StrictStr = Field(description="Specifies the type used to complete the currency exchange.", alias="RateType")
    unit_currency: Annotated[str, Field(strict=True)] = Field(description="Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.", alias="UnitCurrency")
    __properties: ClassVar[List[str]] = ["ContractIdentification", "ExchangeRate", "RateType", "UnitCurrency"]

    @field_validator('rate_type')
    def rate_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Actual', 'Agreed', 'Indicative']):
            raise ValueError("must be one of enum values ('Actual', 'Agreed', 'Indicative')")
        return value

    @field_validator('unit_currency')
    def unit_currency_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Z]{3,3}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{3,3}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBWriteInternational3DataInitiationExchangeRateInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBWriteInternational3DataInitiationExchangeRateInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ContractIdentification": obj.get("ContractIdentification"),
            "ExchangeRate": obj.get("ExchangeRate"),
            "RateType": obj.get("RateType"),
            "UnitCurrency": obj.get("UnitCurrency")
        })
        return _obj



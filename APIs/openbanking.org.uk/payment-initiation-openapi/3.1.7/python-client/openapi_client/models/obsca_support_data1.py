# coding: utf-8

"""
    Payment Initiation API

    Swagger for Payment Initiation API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class OBSCASupportData1(BaseModel):
    """
    Supporting Data provided by TPP, when requesting SCA Exemption.
    """ # noqa: E501
    applied_authentication_approach: Optional[Annotated[str, Field(strict=True, max_length=40)]] = Field(default=None, description="Specifies a character string with a maximum length of 40 characters. Usage: This field indicates whether the PSU was subject to SCA performed by the TPP", alias="AppliedAuthenticationApproach")
    reference_payment_order_id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=40)]] = Field(default=None, description="If the payment is recurring, then this field is populated with the transaction identifier of the previous payment occurrence so that the ASPSP can verify that the PISP, amount and the payee are the same as the previous occurrence. The value here refers to the payment id e.g. DomesticPaymentId  ", alias="ReferencePaymentOrderId")
    requested_sca_exemption_type: Optional[StrictStr] = Field(default=None, description="This field allows a PISP to request specific SCA Exemption for a Payment Initiation", alias="RequestedSCAExemptionType")
    __properties: ClassVar[List[str]] = ["AppliedAuthenticationApproach", "ReferencePaymentOrderId", "RequestedSCAExemptionType"]

    @field_validator('applied_authentication_approach')
    def applied_authentication_approach_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CA', 'SCA']):
            raise ValueError("must be one of enum values ('CA', 'SCA')")
        return value

    @field_validator('requested_sca_exemption_type')
    def requested_sca_exemption_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BillPayment', 'ContactlessTravel', 'EcommerceGoods', 'EcommerceServices', 'Kiosk', 'Parking', 'PartyToParty']):
            raise ValueError("must be one of enum values ('BillPayment', 'ContactlessTravel', 'EcommerceGoods', 'EcommerceServices', 'Kiosk', 'Parking', 'PartyToParty')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OBSCASupportData1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OBSCASupportData1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AppliedAuthenticationApproach": obj.get("AppliedAuthenticationApproach"),
            "ReferencePaymentOrderId": obj.get("ReferencePaymentOrderId"),
            "RequestedSCAExemptionType": obj.get("RequestedSCAExemptionType")
        })
        return _obj



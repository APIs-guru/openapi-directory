# coding: utf-8

"""
    Payment Initiation API

    Swagger for Payment Initiation API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.ob_write_domestic_scheduled2 import OBWriteDomesticScheduled2
from openapi_client.models.ob_write_domestic_scheduled_consent4 import OBWriteDomesticScheduledConsent4
from openapi_client.models.ob_write_domestic_scheduled_consent_response5 import OBWriteDomesticScheduledConsentResponse5
from openapi_client.models.ob_write_domestic_scheduled_response5 import OBWriteDomesticScheduledResponse5

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DomesticScheduledPaymentsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_domestic_scheduled_payment_consents(
        self,
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_idempotency_key: Annotated[str, Field(strict=True, max_length=40, description="Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours. ")],
        x_jws_signature: Annotated[StrictStr, Field(description="A detached JWS signature of the body of the payload.")],
        ob_write_domestic_scheduled_consent4: Annotated[OBWriteDomesticScheduledConsent4, Field(description="Default")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBWriteDomesticScheduledConsentResponse5:
        """Create Domestic Scheduled Payment Consents


        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_idempotency_key: Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours.  (required)
        :type x_idempotency_key: str
        :param x_jws_signature: A detached JWS signature of the body of the payload. (required)
        :type x_jws_signature: str
        :param ob_write_domestic_scheduled_consent4: Default (required)
        :type ob_write_domestic_scheduled_consent4: OBWriteDomesticScheduledConsent4
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_domestic_scheduled_payment_consents_serialize(
            authorization=authorization,
            x_idempotency_key=x_idempotency_key,
            x_jws_signature=x_jws_signature,
            ob_write_domestic_scheduled_consent4=ob_write_domestic_scheduled_consent4,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "OBWriteDomesticScheduledConsentResponse5",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '415': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_domestic_scheduled_payment_consents_with_http_info(
        self,
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_idempotency_key: Annotated[str, Field(strict=True, max_length=40, description="Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours. ")],
        x_jws_signature: Annotated[StrictStr, Field(description="A detached JWS signature of the body of the payload.")],
        ob_write_domestic_scheduled_consent4: Annotated[OBWriteDomesticScheduledConsent4, Field(description="Default")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBWriteDomesticScheduledConsentResponse5]:
        """Create Domestic Scheduled Payment Consents


        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_idempotency_key: Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours.  (required)
        :type x_idempotency_key: str
        :param x_jws_signature: A detached JWS signature of the body of the payload. (required)
        :type x_jws_signature: str
        :param ob_write_domestic_scheduled_consent4: Default (required)
        :type ob_write_domestic_scheduled_consent4: OBWriteDomesticScheduledConsent4
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_domestic_scheduled_payment_consents_serialize(
            authorization=authorization,
            x_idempotency_key=x_idempotency_key,
            x_jws_signature=x_jws_signature,
            ob_write_domestic_scheduled_consent4=ob_write_domestic_scheduled_consent4,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "OBWriteDomesticScheduledConsentResponse5",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '415': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_domestic_scheduled_payment_consents_without_preload_content(
        self,
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_idempotency_key: Annotated[str, Field(strict=True, max_length=40, description="Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours. ")],
        x_jws_signature: Annotated[StrictStr, Field(description="A detached JWS signature of the body of the payload.")],
        ob_write_domestic_scheduled_consent4: Annotated[OBWriteDomesticScheduledConsent4, Field(description="Default")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create Domestic Scheduled Payment Consents


        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_idempotency_key: Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours.  (required)
        :type x_idempotency_key: str
        :param x_jws_signature: A detached JWS signature of the body of the payload. (required)
        :type x_jws_signature: str
        :param ob_write_domestic_scheduled_consent4: Default (required)
        :type ob_write_domestic_scheduled_consent4: OBWriteDomesticScheduledConsent4
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_domestic_scheduled_payment_consents_serialize(
            authorization=authorization,
            x_idempotency_key=x_idempotency_key,
            x_jws_signature=x_jws_signature,
            ob_write_domestic_scheduled_consent4=ob_write_domestic_scheduled_consent4,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "OBWriteDomesticScheduledConsentResponse5",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '415': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_domestic_scheduled_payment_consents_serialize(
        self,
        authorization,
        x_idempotency_key,
        x_jws_signature,
        ob_write_domestic_scheduled_consent4,
        x_fapi_auth_date,
        x_fapi_customer_ip_address,
        x_fapi_interaction_id,
        x_customer_user_agent,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_fapi_auth_date is not None:
            _header_params['x-fapi-auth-date'] = x_fapi_auth_date
        if x_fapi_customer_ip_address is not None:
            _header_params['x-fapi-customer-ip-address'] = x_fapi_customer_ip_address
        if x_fapi_interaction_id is not None:
            _header_params['x-fapi-interaction-id'] = x_fapi_interaction_id
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if x_idempotency_key is not None:
            _header_params['x-idempotency-key'] = x_idempotency_key
        if x_jws_signature is not None:
            _header_params['x-jws-signature'] = x_jws_signature
        if x_customer_user_agent is not None:
            _header_params['x-customer-user-agent'] = x_customer_user_agent
        # process the form parameters
        # process the body parameter
        if ob_write_domestic_scheduled_consent4 is not None:
            _body_params = ob_write_domestic_scheduled_consent4


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/jose+jwe', 
                    'application/json', 
                    'application/json; charset=utf-8'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/jose+jwe', 
                        'application/json', 
                        'application/json; charset=utf-8'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'TPPOAuth2Security'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/domestic-scheduled-payment-consents',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_domestic_scheduled_payments(
        self,
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_idempotency_key: Annotated[str, Field(strict=True, max_length=40, description="Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours. ")],
        x_jws_signature: Annotated[StrictStr, Field(description="A detached JWS signature of the body of the payload.")],
        ob_write_domestic_scheduled2: Annotated[OBWriteDomesticScheduled2, Field(description="Default")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBWriteDomesticScheduledResponse5:
        """Create Domestic Scheduled Payments


        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_idempotency_key: Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours.  (required)
        :type x_idempotency_key: str
        :param x_jws_signature: A detached JWS signature of the body of the payload. (required)
        :type x_jws_signature: str
        :param ob_write_domestic_scheduled2: Default (required)
        :type ob_write_domestic_scheduled2: OBWriteDomesticScheduled2
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_domestic_scheduled_payments_serialize(
            authorization=authorization,
            x_idempotency_key=x_idempotency_key,
            x_jws_signature=x_jws_signature,
            ob_write_domestic_scheduled2=ob_write_domestic_scheduled2,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "OBWriteDomesticScheduledResponse5",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '415': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_domestic_scheduled_payments_with_http_info(
        self,
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_idempotency_key: Annotated[str, Field(strict=True, max_length=40, description="Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours. ")],
        x_jws_signature: Annotated[StrictStr, Field(description="A detached JWS signature of the body of the payload.")],
        ob_write_domestic_scheduled2: Annotated[OBWriteDomesticScheduled2, Field(description="Default")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBWriteDomesticScheduledResponse5]:
        """Create Domestic Scheduled Payments


        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_idempotency_key: Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours.  (required)
        :type x_idempotency_key: str
        :param x_jws_signature: A detached JWS signature of the body of the payload. (required)
        :type x_jws_signature: str
        :param ob_write_domestic_scheduled2: Default (required)
        :type ob_write_domestic_scheduled2: OBWriteDomesticScheduled2
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_domestic_scheduled_payments_serialize(
            authorization=authorization,
            x_idempotency_key=x_idempotency_key,
            x_jws_signature=x_jws_signature,
            ob_write_domestic_scheduled2=ob_write_domestic_scheduled2,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "OBWriteDomesticScheduledResponse5",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '415': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_domestic_scheduled_payments_without_preload_content(
        self,
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_idempotency_key: Annotated[str, Field(strict=True, max_length=40, description="Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours. ")],
        x_jws_signature: Annotated[StrictStr, Field(description="A detached JWS signature of the body of the payload.")],
        ob_write_domestic_scheduled2: Annotated[OBWriteDomesticScheduled2, Field(description="Default")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create Domestic Scheduled Payments


        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_idempotency_key: Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours.  (required)
        :type x_idempotency_key: str
        :param x_jws_signature: A detached JWS signature of the body of the payload. (required)
        :type x_jws_signature: str
        :param ob_write_domestic_scheduled2: Default (required)
        :type ob_write_domestic_scheduled2: OBWriteDomesticScheduled2
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_domestic_scheduled_payments_serialize(
            authorization=authorization,
            x_idempotency_key=x_idempotency_key,
            x_jws_signature=x_jws_signature,
            ob_write_domestic_scheduled2=ob_write_domestic_scheduled2,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "OBWriteDomesticScheduledResponse5",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '415': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_domestic_scheduled_payments_serialize(
        self,
        authorization,
        x_idempotency_key,
        x_jws_signature,
        ob_write_domestic_scheduled2,
        x_fapi_auth_date,
        x_fapi_customer_ip_address,
        x_fapi_interaction_id,
        x_customer_user_agent,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_fapi_auth_date is not None:
            _header_params['x-fapi-auth-date'] = x_fapi_auth_date
        if x_fapi_customer_ip_address is not None:
            _header_params['x-fapi-customer-ip-address'] = x_fapi_customer_ip_address
        if x_fapi_interaction_id is not None:
            _header_params['x-fapi-interaction-id'] = x_fapi_interaction_id
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if x_idempotency_key is not None:
            _header_params['x-idempotency-key'] = x_idempotency_key
        if x_jws_signature is not None:
            _header_params['x-jws-signature'] = x_jws_signature
        if x_customer_user_agent is not None:
            _header_params['x-customer-user-agent'] = x_customer_user_agent
        # process the form parameters
        # process the body parameter
        if ob_write_domestic_scheduled2 is not None:
            _body_params = ob_write_domestic_scheduled2


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/jose+jwe', 
                    'application/json', 
                    'application/json; charset=utf-8'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/jose+jwe', 
                        'application/json', 
                        'application/json; charset=utf-8'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'PSUOAuth2Security'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/domestic-scheduled-payments',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_domestic_scheduled_payment_consents_consent_id(
        self,
        consent_id: Annotated[StrictStr, Field(description="ConsentId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBWriteDomesticScheduledConsentResponse5:
        """Get Domestic Scheduled Payment Consents


        :param consent_id: ConsentId (required)
        :type consent_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domestic_scheduled_payment_consents_consent_id_serialize(
            consent_id=consent_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWriteDomesticScheduledConsentResponse5",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_domestic_scheduled_payment_consents_consent_id_with_http_info(
        self,
        consent_id: Annotated[StrictStr, Field(description="ConsentId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBWriteDomesticScheduledConsentResponse5]:
        """Get Domestic Scheduled Payment Consents


        :param consent_id: ConsentId (required)
        :type consent_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domestic_scheduled_payment_consents_consent_id_serialize(
            consent_id=consent_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWriteDomesticScheduledConsentResponse5",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_domestic_scheduled_payment_consents_consent_id_without_preload_content(
        self,
        consent_id: Annotated[StrictStr, Field(description="ConsentId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Domestic Scheduled Payment Consents


        :param consent_id: ConsentId (required)
        :type consent_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domestic_scheduled_payment_consents_consent_id_serialize(
            consent_id=consent_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWriteDomesticScheduledConsentResponse5",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_domestic_scheduled_payment_consents_consent_id_serialize(
        self,
        consent_id,
        authorization,
        x_fapi_auth_date,
        x_fapi_customer_ip_address,
        x_fapi_interaction_id,
        x_customer_user_agent,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if consent_id is not None:
            _path_params['ConsentId'] = consent_id
        # process the query parameters
        # process the header parameters
        if x_fapi_auth_date is not None:
            _header_params['x-fapi-auth-date'] = x_fapi_auth_date
        if x_fapi_customer_ip_address is not None:
            _header_params['x-fapi-customer-ip-address'] = x_fapi_customer_ip_address
        if x_fapi_interaction_id is not None:
            _header_params['x-fapi-interaction-id'] = x_fapi_interaction_id
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if x_customer_user_agent is not None:
            _header_params['x-customer-user-agent'] = x_customer_user_agent
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/jose+jwe', 
                    'application/json', 
                    'application/json; charset=utf-8'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'TPPOAuth2Security'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/domestic-scheduled-payment-consents/{ConsentId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_domestic_scheduled_payments_domestic_scheduled_payment_id(
        self,
        domestic_scheduled_payment_id: Annotated[StrictStr, Field(description="DomesticScheduledPaymentId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBWriteDomesticScheduledResponse5:
        """Get Domestic Scheduled Payments


        :param domestic_scheduled_payment_id: DomesticScheduledPaymentId (required)
        :type domestic_scheduled_payment_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domestic_scheduled_payments_domestic_scheduled_payment_id_serialize(
            domestic_scheduled_payment_id=domestic_scheduled_payment_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWriteDomesticScheduledResponse5",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_domestic_scheduled_payments_domestic_scheduled_payment_id_with_http_info(
        self,
        domestic_scheduled_payment_id: Annotated[StrictStr, Field(description="DomesticScheduledPaymentId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBWriteDomesticScheduledResponse5]:
        """Get Domestic Scheduled Payments


        :param domestic_scheduled_payment_id: DomesticScheduledPaymentId (required)
        :type domestic_scheduled_payment_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domestic_scheduled_payments_domestic_scheduled_payment_id_serialize(
            domestic_scheduled_payment_id=domestic_scheduled_payment_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWriteDomesticScheduledResponse5",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_domestic_scheduled_payments_domestic_scheduled_payment_id_without_preload_content(
        self,
        domestic_scheduled_payment_id: Annotated[StrictStr, Field(description="DomesticScheduledPaymentId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Domestic Scheduled Payments


        :param domestic_scheduled_payment_id: DomesticScheduledPaymentId (required)
        :type domestic_scheduled_payment_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domestic_scheduled_payments_domestic_scheduled_payment_id_serialize(
            domestic_scheduled_payment_id=domestic_scheduled_payment_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWriteDomesticScheduledResponse5",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_domestic_scheduled_payments_domestic_scheduled_payment_id_serialize(
        self,
        domestic_scheduled_payment_id,
        authorization,
        x_fapi_auth_date,
        x_fapi_customer_ip_address,
        x_fapi_interaction_id,
        x_customer_user_agent,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if domestic_scheduled_payment_id is not None:
            _path_params['DomesticScheduledPaymentId'] = domestic_scheduled_payment_id
        # process the query parameters
        # process the header parameters
        if x_fapi_auth_date is not None:
            _header_params['x-fapi-auth-date'] = x_fapi_auth_date
        if x_fapi_customer_ip_address is not None:
            _header_params['x-fapi-customer-ip-address'] = x_fapi_customer_ip_address
        if x_fapi_interaction_id is not None:
            _header_params['x-fapi-interaction-id'] = x_fapi_interaction_id
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if x_customer_user_agent is not None:
            _header_params['x-customer-user-agent'] = x_customer_user_agent
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/jose+jwe', 
                    'application/json', 
                    'application/json; charset=utf-8'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'TPPOAuth2Security'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/domestic-scheduled-payments/{DomesticScheduledPaymentId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



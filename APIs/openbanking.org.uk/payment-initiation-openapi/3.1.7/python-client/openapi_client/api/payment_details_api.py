# coding: utf-8

"""
    Payment Initiation API

    Swagger for Payment Initiation API Specification

    The version of the OpenAPI document: 3.1.7
    Contact: ServiceDesk@openbanking.org.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.ob_write_payment_details_response1 import OBWritePaymentDetailsResponse1

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class PaymentDetailsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_domestic_payments_domestic_payment_id_payment_details(
        self,
        domestic_payment_id: Annotated[StrictStr, Field(description="DomesticPaymentId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBWritePaymentDetailsResponse1:
        """Get Payment Details


        :param domestic_payment_id: DomesticPaymentId (required)
        :type domestic_payment_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domestic_payments_domestic_payment_id_payment_details_serialize(
            domestic_payment_id=domestic_payment_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWritePaymentDetailsResponse1",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_domestic_payments_domestic_payment_id_payment_details_with_http_info(
        self,
        domestic_payment_id: Annotated[StrictStr, Field(description="DomesticPaymentId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBWritePaymentDetailsResponse1]:
        """Get Payment Details


        :param domestic_payment_id: DomesticPaymentId (required)
        :type domestic_payment_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domestic_payments_domestic_payment_id_payment_details_serialize(
            domestic_payment_id=domestic_payment_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWritePaymentDetailsResponse1",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_domestic_payments_domestic_payment_id_payment_details_without_preload_content(
        self,
        domestic_payment_id: Annotated[StrictStr, Field(description="DomesticPaymentId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Payment Details


        :param domestic_payment_id: DomesticPaymentId (required)
        :type domestic_payment_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domestic_payments_domestic_payment_id_payment_details_serialize(
            domestic_payment_id=domestic_payment_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWritePaymentDetailsResponse1",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_domestic_payments_domestic_payment_id_payment_details_serialize(
        self,
        domestic_payment_id,
        authorization,
        x_fapi_auth_date,
        x_fapi_customer_ip_address,
        x_fapi_interaction_id,
        x_customer_user_agent,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if domestic_payment_id is not None:
            _path_params['DomesticPaymentId'] = domestic_payment_id
        # process the query parameters
        # process the header parameters
        if x_fapi_auth_date is not None:
            _header_params['x-fapi-auth-date'] = x_fapi_auth_date
        if x_fapi_customer_ip_address is not None:
            _header_params['x-fapi-customer-ip-address'] = x_fapi_customer_ip_address
        if x_fapi_interaction_id is not None:
            _header_params['x-fapi-interaction-id'] = x_fapi_interaction_id
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if x_customer_user_agent is not None:
            _header_params['x-customer-user-agent'] = x_customer_user_agent
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/jose+jwe', 
                    'application/json', 
                    'application/json; charset=utf-8'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'TPPOAuth2Security'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/domestic-payments/{DomesticPaymentId}/payment-details',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_domestic_scheduled_payments_domestic_scheduled_payment_id_payment_details(
        self,
        domestic_scheduled_payment_id: Annotated[StrictStr, Field(description="DomesticScheduledPaymentId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBWritePaymentDetailsResponse1:
        """Get Payment Details


        :param domestic_scheduled_payment_id: DomesticScheduledPaymentId (required)
        :type domestic_scheduled_payment_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domestic_scheduled_payments_domestic_scheduled_payment_id_payment_details_serialize(
            domestic_scheduled_payment_id=domestic_scheduled_payment_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWritePaymentDetailsResponse1",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_domestic_scheduled_payments_domestic_scheduled_payment_id_payment_details_with_http_info(
        self,
        domestic_scheduled_payment_id: Annotated[StrictStr, Field(description="DomesticScheduledPaymentId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBWritePaymentDetailsResponse1]:
        """Get Payment Details


        :param domestic_scheduled_payment_id: DomesticScheduledPaymentId (required)
        :type domestic_scheduled_payment_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domestic_scheduled_payments_domestic_scheduled_payment_id_payment_details_serialize(
            domestic_scheduled_payment_id=domestic_scheduled_payment_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWritePaymentDetailsResponse1",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_domestic_scheduled_payments_domestic_scheduled_payment_id_payment_details_without_preload_content(
        self,
        domestic_scheduled_payment_id: Annotated[StrictStr, Field(description="DomesticScheduledPaymentId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Payment Details


        :param domestic_scheduled_payment_id: DomesticScheduledPaymentId (required)
        :type domestic_scheduled_payment_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domestic_scheduled_payments_domestic_scheduled_payment_id_payment_details_serialize(
            domestic_scheduled_payment_id=domestic_scheduled_payment_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWritePaymentDetailsResponse1",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_domestic_scheduled_payments_domestic_scheduled_payment_id_payment_details_serialize(
        self,
        domestic_scheduled_payment_id,
        authorization,
        x_fapi_auth_date,
        x_fapi_customer_ip_address,
        x_fapi_interaction_id,
        x_customer_user_agent,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if domestic_scheduled_payment_id is not None:
            _path_params['DomesticScheduledPaymentId'] = domestic_scheduled_payment_id
        # process the query parameters
        # process the header parameters
        if x_fapi_auth_date is not None:
            _header_params['x-fapi-auth-date'] = x_fapi_auth_date
        if x_fapi_customer_ip_address is not None:
            _header_params['x-fapi-customer-ip-address'] = x_fapi_customer_ip_address
        if x_fapi_interaction_id is not None:
            _header_params['x-fapi-interaction-id'] = x_fapi_interaction_id
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if x_customer_user_agent is not None:
            _header_params['x-customer-user-agent'] = x_customer_user_agent
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/jose+jwe', 
                    'application/json', 
                    'application/json; charset=utf-8'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'TPPOAuth2Security'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/domestic-scheduled-payments/{DomesticScheduledPaymentId}/payment-details',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_domestic_standing_orders_domestic_standing_order_id_payment_details(
        self,
        domestic_standing_order_id: Annotated[StrictStr, Field(description="DomesticStandingOrderId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBWritePaymentDetailsResponse1:
        """Get Payment Details


        :param domestic_standing_order_id: DomesticStandingOrderId (required)
        :type domestic_standing_order_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domestic_standing_orders_domestic_standing_order_id_payment_details_serialize(
            domestic_standing_order_id=domestic_standing_order_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWritePaymentDetailsResponse1",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_domestic_standing_orders_domestic_standing_order_id_payment_details_with_http_info(
        self,
        domestic_standing_order_id: Annotated[StrictStr, Field(description="DomesticStandingOrderId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBWritePaymentDetailsResponse1]:
        """Get Payment Details


        :param domestic_standing_order_id: DomesticStandingOrderId (required)
        :type domestic_standing_order_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domestic_standing_orders_domestic_standing_order_id_payment_details_serialize(
            domestic_standing_order_id=domestic_standing_order_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWritePaymentDetailsResponse1",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_domestic_standing_orders_domestic_standing_order_id_payment_details_without_preload_content(
        self,
        domestic_standing_order_id: Annotated[StrictStr, Field(description="DomesticStandingOrderId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Payment Details


        :param domestic_standing_order_id: DomesticStandingOrderId (required)
        :type domestic_standing_order_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_domestic_standing_orders_domestic_standing_order_id_payment_details_serialize(
            domestic_standing_order_id=domestic_standing_order_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWritePaymentDetailsResponse1",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_domestic_standing_orders_domestic_standing_order_id_payment_details_serialize(
        self,
        domestic_standing_order_id,
        authorization,
        x_fapi_auth_date,
        x_fapi_customer_ip_address,
        x_fapi_interaction_id,
        x_customer_user_agent,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if domestic_standing_order_id is not None:
            _path_params['DomesticStandingOrderId'] = domestic_standing_order_id
        # process the query parameters
        # process the header parameters
        if x_fapi_auth_date is not None:
            _header_params['x-fapi-auth-date'] = x_fapi_auth_date
        if x_fapi_customer_ip_address is not None:
            _header_params['x-fapi-customer-ip-address'] = x_fapi_customer_ip_address
        if x_fapi_interaction_id is not None:
            _header_params['x-fapi-interaction-id'] = x_fapi_interaction_id
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if x_customer_user_agent is not None:
            _header_params['x-customer-user-agent'] = x_customer_user_agent
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/jose+jwe', 
                    'application/json', 
                    'application/json; charset=utf-8'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'TPPOAuth2Security'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/domestic-standing-orders/{DomesticStandingOrderId}/payment-details',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_file_payments_file_payment_id_payment_details(
        self,
        file_payment_id: Annotated[StrictStr, Field(description="FilePaymentId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBWritePaymentDetailsResponse1:
        """Get Payment Details


        :param file_payment_id: FilePaymentId (required)
        :type file_payment_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_file_payments_file_payment_id_payment_details_serialize(
            file_payment_id=file_payment_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWritePaymentDetailsResponse1",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_file_payments_file_payment_id_payment_details_with_http_info(
        self,
        file_payment_id: Annotated[StrictStr, Field(description="FilePaymentId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBWritePaymentDetailsResponse1]:
        """Get Payment Details


        :param file_payment_id: FilePaymentId (required)
        :type file_payment_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_file_payments_file_payment_id_payment_details_serialize(
            file_payment_id=file_payment_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWritePaymentDetailsResponse1",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_file_payments_file_payment_id_payment_details_without_preload_content(
        self,
        file_payment_id: Annotated[StrictStr, Field(description="FilePaymentId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Payment Details


        :param file_payment_id: FilePaymentId (required)
        :type file_payment_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_file_payments_file_payment_id_payment_details_serialize(
            file_payment_id=file_payment_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWritePaymentDetailsResponse1",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_file_payments_file_payment_id_payment_details_serialize(
        self,
        file_payment_id,
        authorization,
        x_fapi_auth_date,
        x_fapi_customer_ip_address,
        x_fapi_interaction_id,
        x_customer_user_agent,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if file_payment_id is not None:
            _path_params['FilePaymentId'] = file_payment_id
        # process the query parameters
        # process the header parameters
        if x_fapi_auth_date is not None:
            _header_params['x-fapi-auth-date'] = x_fapi_auth_date
        if x_fapi_customer_ip_address is not None:
            _header_params['x-fapi-customer-ip-address'] = x_fapi_customer_ip_address
        if x_fapi_interaction_id is not None:
            _header_params['x-fapi-interaction-id'] = x_fapi_interaction_id
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if x_customer_user_agent is not None:
            _header_params['x-customer-user-agent'] = x_customer_user_agent
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/jose+jwe', 
                    'application/json', 
                    'application/json; charset=utf-8'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'TPPOAuth2Security'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/file-payments/{FilePaymentId}/payment-details',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_international_payments_international_payment_id_payment_details(
        self,
        international_payment_id: Annotated[StrictStr, Field(description="InternationalPaymentId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBWritePaymentDetailsResponse1:
        """Get Payment Details


        :param international_payment_id: InternationalPaymentId (required)
        :type international_payment_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_international_payments_international_payment_id_payment_details_serialize(
            international_payment_id=international_payment_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWritePaymentDetailsResponse1",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_international_payments_international_payment_id_payment_details_with_http_info(
        self,
        international_payment_id: Annotated[StrictStr, Field(description="InternationalPaymentId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBWritePaymentDetailsResponse1]:
        """Get Payment Details


        :param international_payment_id: InternationalPaymentId (required)
        :type international_payment_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_international_payments_international_payment_id_payment_details_serialize(
            international_payment_id=international_payment_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWritePaymentDetailsResponse1",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_international_payments_international_payment_id_payment_details_without_preload_content(
        self,
        international_payment_id: Annotated[StrictStr, Field(description="InternationalPaymentId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Payment Details


        :param international_payment_id: InternationalPaymentId (required)
        :type international_payment_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_international_payments_international_payment_id_payment_details_serialize(
            international_payment_id=international_payment_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWritePaymentDetailsResponse1",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_international_payments_international_payment_id_payment_details_serialize(
        self,
        international_payment_id,
        authorization,
        x_fapi_auth_date,
        x_fapi_customer_ip_address,
        x_fapi_interaction_id,
        x_customer_user_agent,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if international_payment_id is not None:
            _path_params['InternationalPaymentId'] = international_payment_id
        # process the query parameters
        # process the header parameters
        if x_fapi_auth_date is not None:
            _header_params['x-fapi-auth-date'] = x_fapi_auth_date
        if x_fapi_customer_ip_address is not None:
            _header_params['x-fapi-customer-ip-address'] = x_fapi_customer_ip_address
        if x_fapi_interaction_id is not None:
            _header_params['x-fapi-interaction-id'] = x_fapi_interaction_id
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if x_customer_user_agent is not None:
            _header_params['x-customer-user-agent'] = x_customer_user_agent
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/jose+jwe', 
                    'application/json', 
                    'application/json; charset=utf-8'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'TPPOAuth2Security'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/international-payments/{InternationalPaymentId}/payment-details',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_international_scheduled_payments_international_scheduled_payment_id_payment_details(
        self,
        international_scheduled_payment_id: Annotated[StrictStr, Field(description="InternationalScheduledPaymentId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBWritePaymentDetailsResponse1:
        """Get Payment Details


        :param international_scheduled_payment_id: InternationalScheduledPaymentId (required)
        :type international_scheduled_payment_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_international_scheduled_payments_international_scheduled_payment_id_payment_details_serialize(
            international_scheduled_payment_id=international_scheduled_payment_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWritePaymentDetailsResponse1",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_international_scheduled_payments_international_scheduled_payment_id_payment_details_with_http_info(
        self,
        international_scheduled_payment_id: Annotated[StrictStr, Field(description="InternationalScheduledPaymentId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBWritePaymentDetailsResponse1]:
        """Get Payment Details


        :param international_scheduled_payment_id: InternationalScheduledPaymentId (required)
        :type international_scheduled_payment_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_international_scheduled_payments_international_scheduled_payment_id_payment_details_serialize(
            international_scheduled_payment_id=international_scheduled_payment_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWritePaymentDetailsResponse1",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_international_scheduled_payments_international_scheduled_payment_id_payment_details_without_preload_content(
        self,
        international_scheduled_payment_id: Annotated[StrictStr, Field(description="InternationalScheduledPaymentId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Payment Details


        :param international_scheduled_payment_id: InternationalScheduledPaymentId (required)
        :type international_scheduled_payment_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_international_scheduled_payments_international_scheduled_payment_id_payment_details_serialize(
            international_scheduled_payment_id=international_scheduled_payment_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWritePaymentDetailsResponse1",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_international_scheduled_payments_international_scheduled_payment_id_payment_details_serialize(
        self,
        international_scheduled_payment_id,
        authorization,
        x_fapi_auth_date,
        x_fapi_customer_ip_address,
        x_fapi_interaction_id,
        x_customer_user_agent,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if international_scheduled_payment_id is not None:
            _path_params['InternationalScheduledPaymentId'] = international_scheduled_payment_id
        # process the query parameters
        # process the header parameters
        if x_fapi_auth_date is not None:
            _header_params['x-fapi-auth-date'] = x_fapi_auth_date
        if x_fapi_customer_ip_address is not None:
            _header_params['x-fapi-customer-ip-address'] = x_fapi_customer_ip_address
        if x_fapi_interaction_id is not None:
            _header_params['x-fapi-interaction-id'] = x_fapi_interaction_id
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if x_customer_user_agent is not None:
            _header_params['x-customer-user-agent'] = x_customer_user_agent
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/jose+jwe', 
                    'application/json', 
                    'application/json; charset=utf-8'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'TPPOAuth2Security'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/international-scheduled-payments/{InternationalScheduledPaymentId}/payment-details',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_international_standing_orders_international_standing_order_payment_id_payment_details(
        self,
        international_standing_order_payment_id: Annotated[StrictStr, Field(description="InternationalStandingOrderPaymentId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBWritePaymentDetailsResponse1:
        """Get Payment Details


        :param international_standing_order_payment_id: InternationalStandingOrderPaymentId (required)
        :type international_standing_order_payment_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_international_standing_orders_international_standing_order_payment_id_payment_details_serialize(
            international_standing_order_payment_id=international_standing_order_payment_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWritePaymentDetailsResponse1",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_international_standing_orders_international_standing_order_payment_id_payment_details_with_http_info(
        self,
        international_standing_order_payment_id: Annotated[StrictStr, Field(description="InternationalStandingOrderPaymentId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBWritePaymentDetailsResponse1]:
        """Get Payment Details


        :param international_standing_order_payment_id: InternationalStandingOrderPaymentId (required)
        :type international_standing_order_payment_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_international_standing_orders_international_standing_order_payment_id_payment_details_serialize(
            international_standing_order_payment_id=international_standing_order_payment_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWritePaymentDetailsResponse1",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_international_standing_orders_international_standing_order_payment_id_payment_details_without_preload_content(
        self,
        international_standing_order_payment_id: Annotated[StrictStr, Field(description="InternationalStandingOrderPaymentId")],
        authorization: Annotated[StrictStr, Field(description="An Authorisation Token as per https://tools.ietf.org/html/rfc6750")],
        x_fapi_auth_date: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC")] = None,
        x_fapi_customer_ip_address: Annotated[Optional[StrictStr], Field(description="The PSU's IP address if the PSU is currently logged in with the TPP.")] = None,
        x_fapi_interaction_id: Annotated[Optional[StrictStr], Field(description="An RFC4122 UID used as a correlation id.")] = None,
        x_customer_user_agent: Annotated[Optional[StrictStr], Field(description="Indicates the user-agent that the PSU is using.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Payment Details


        :param international_standing_order_payment_id: InternationalStandingOrderPaymentId (required)
        :type international_standing_order_payment_id: str
        :param authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :type authorization: str
        :param x_fapi_auth_date: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :type x_fapi_auth_date: str
        :param x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :type x_fapi_customer_ip_address: str
        :param x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :type x_fapi_interaction_id: str
        :param x_customer_user_agent: Indicates the user-agent that the PSU is using.
        :type x_customer_user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_international_standing_orders_international_standing_order_payment_id_payment_details_serialize(
            international_standing_order_payment_id=international_standing_order_payment_id,
            authorization=authorization,
            x_fapi_auth_date=x_fapi_auth_date,
            x_fapi_customer_ip_address=x_fapi_customer_ip_address,
            x_fapi_interaction_id=x_fapi_interaction_id,
            x_customer_user_agent=x_customer_user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBWritePaymentDetailsResponse1",
            '400': "OBErrorResponse1",
            '401': None,
            '403': "OBErrorResponse1",
            '404': None,
            '405': None,
            '406': None,
            '429': None,
            '500': "OBErrorResponse1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_international_standing_orders_international_standing_order_payment_id_payment_details_serialize(
        self,
        international_standing_order_payment_id,
        authorization,
        x_fapi_auth_date,
        x_fapi_customer_ip_address,
        x_fapi_interaction_id,
        x_customer_user_agent,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if international_standing_order_payment_id is not None:
            _path_params['InternationalStandingOrderPaymentId'] = international_standing_order_payment_id
        # process the query parameters
        # process the header parameters
        if x_fapi_auth_date is not None:
            _header_params['x-fapi-auth-date'] = x_fapi_auth_date
        if x_fapi_customer_ip_address is not None:
            _header_params['x-fapi-customer-ip-address'] = x_fapi_customer_ip_address
        if x_fapi_interaction_id is not None:
            _header_params['x-fapi-interaction-id'] = x_fapi_interaction_id
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if x_customer_user_agent is not None:
            _header_params['x-customer-user-agent'] = x_customer_user_agent
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/jose+jwe', 
                    'application/json', 
                    'application/json; charset=utf-8'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'TPPOAuth2Security'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/international-standing-orders/{InternationalStandingOrderPaymentId}/payment-details',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



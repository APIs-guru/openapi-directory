# coding: utf-8

"""
    Polygon

    The future of fintech.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class LastQuote(BaseModel):
    """
    LastQuote
    """ # noqa: E501
    askexchange: Optional[StrictInt] = Field(default=None, description="Exchange the ask happened on")
    askprice: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Ask Price")
    asksize: Optional[StrictInt] = Field(default=None, description="Ask Size")
    bidexchange: Optional[StrictInt] = Field(default=None, description="Exchange the bid happened on")
    bidprice: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Bid Price")
    bidsize: Optional[StrictInt] = Field(default=None, description="Bid Size")
    cond: Optional[StrictInt] = Field(default=None, description="Condition of the quote")
    timestamp: Optional[StrictInt] = Field(default=None, description="Timestamp of this trade")
    __properties: ClassVar[List[str]] = ["askexchange", "askprice", "asksize", "bidexchange", "bidprice", "bidsize", "cond", "timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LastQuote from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LastQuote from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "askexchange": obj.get("askexchange"),
            "askprice": obj.get("askprice"),
            "asksize": obj.get("asksize"),
            "bidexchange": obj.get("bidexchange"),
            "bidprice": obj.get("bidprice"),
            "bidsize": obj.get("bidsize"),
            "cond": obj.get("cond"),
            "timestamp": obj.get("timestamp")
        })
        return _obj



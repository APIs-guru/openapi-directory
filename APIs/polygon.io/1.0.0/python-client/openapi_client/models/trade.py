# coding: utf-8

"""
    Polygon

    The future of fintech.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Trade(BaseModel):
    """
    Trade
    """ # noqa: E501
    c1: Optional[StrictInt] = Field(default=None, description="Condition 1 of this trade")
    c2: Optional[StrictInt] = Field(default=None, description="Condition 2 of this trade")
    c3: Optional[StrictInt] = Field(default=None, description="Condition 3 of this trade")
    c4: Optional[StrictInt] = Field(default=None, description="Condition 4 of this trade")
    e: Optional[StrictStr] = Field(default=None, description="The exchange this trade happened on")
    p: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Price of this trade")
    s: Optional[StrictInt] = Field(default=None, description="Size of the trade")
    t: Optional[StrictInt] = Field(default=None, description="Timestamp of this trade")
    __properties: ClassVar[List[str]] = ["c1", "c2", "c3", "c4", "e", "p", "s", "t"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Trade from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Trade from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "c1": obj.get("c1"),
            "c2": obj.get("c2"),
            "c3": obj.get("c3"),
            "c4": obj.get("c4"),
            "e": obj.get("e"),
            "p": obj.get("p"),
            "s": obj.get("s"),
            "t": obj.get("t")
        })
        return _obj



# coding: utf-8

"""
    OpenALPR CarCheck API

    The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format 

    The version of the OpenAPI document: 3.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.vehicle_candidate import VehicleCandidate
from typing import Optional, Set
from typing_extensions import Self

class VehicleDetails(BaseModel):
    """
    VehicleDetails
    """ # noqa: E501
    body_type: Optional[List[VehicleCandidate]] = None
    color: Optional[List[VehicleCandidate]] = None
    make: Optional[List[VehicleCandidate]] = None
    make_model: Optional[List[VehicleCandidate]] = None
    orientation: Optional[List[VehicleCandidate]] = None
    year: Optional[List[VehicleCandidate]] = None
    __properties: ClassVar[List[str]] = ["body_type", "color", "make", "make_model", "orientation", "year"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VehicleDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in body_type (list)
        _items = []
        if self.body_type:
            for _item_body_type in self.body_type:
                if _item_body_type:
                    _items.append(_item_body_type.to_dict())
            _dict['body_type'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in color (list)
        _items = []
        if self.color:
            for _item_color in self.color:
                if _item_color:
                    _items.append(_item_color.to_dict())
            _dict['color'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in make (list)
        _items = []
        if self.make:
            for _item_make in self.make:
                if _item_make:
                    _items.append(_item_make.to_dict())
            _dict['make'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in make_model (list)
        _items = []
        if self.make_model:
            for _item_make_model in self.make_model:
                if _item_make_model:
                    _items.append(_item_make_model.to_dict())
            _dict['make_model'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in orientation (list)
        _items = []
        if self.orientation:
            for _item_orientation in self.orientation:
                if _item_orientation:
                    _items.append(_item_orientation.to_dict())
            _dict['orientation'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in year (list)
        _items = []
        if self.year:
            for _item_year in self.year:
                if _item_year:
                    _items.append(_item_year.to_dict())
            _dict['year'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VehicleDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "body_type": [VehicleCandidate.from_dict(_item) for _item in obj["body_type"]] if obj.get("body_type") is not None else None,
            "color": [VehicleCandidate.from_dict(_item) for _item in obj["color"]] if obj.get("color") is not None else None,
            "make": [VehicleCandidate.from_dict(_item) for _item in obj["make"]] if obj.get("make") is not None else None,
            "make_model": [VehicleCandidate.from_dict(_item) for _item in obj["make_model"]] if obj.get("make_model") is not None else None,
            "orientation": [VehicleCandidate.from_dict(_item) for _item in obj["orientation"]] if obj.get("orientation") is not None else None,
            "year": [VehicleCandidate.from_dict(_item) for _item in obj["year"]] if obj.get("year") is not None else None
        })
        return _obj



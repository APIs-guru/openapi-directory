# coding: utf-8

"""
    OpenALPR CarCheck API

    The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format 

    The version of the OpenAPI document: 3.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.coordinate import Coordinate
from openapi_client.models.plate_candidate import PlateCandidate
from openapi_client.models.region_of_interest import RegionOfInterest
from openapi_client.models.vehicle_details import VehicleDetails
from typing import Optional, Set
from typing_extensions import Self

class PlateDetails(BaseModel):
    """
    PlateDetails
    """ # noqa: E501
    candidates: Optional[List[PlateCandidate]] = Field(default=None, description="All the top N candidates that could be the correct plate number")
    confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Confidence percentage that the plate number is correct")
    coordinates: Optional[List[Coordinate]] = Field(default=None, description="The X/Y coordinates of the license plate in the image Four coordinates are provided that form a polygon starting from the top-left and moving clockwise ending in the bottom left ")
    matches_template: Optional[StrictInt] = Field(default=None, description="Indicates whether the plate matched a regional text pattern")
    plate: Optional[StrictStr] = Field(default=None, description="Best plate number for this plate")
    processing_time_ms: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of milliseconds to process the license plate")
    region: Optional[StrictStr] = Field(default=None, description="Specified or detected region (e.g., tx for Texas)")
    region_confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Confidence percentage that the plate region is correct")
    requested_topn: Optional[StrictInt] = Field(default=None, description="The max number of results requested")
    vehicle: Optional[VehicleDetails] = None
    vehicle_region: Optional[RegionOfInterest] = None
    __properties: ClassVar[List[str]] = ["candidates", "confidence", "coordinates", "matches_template", "plate", "processing_time_ms", "region", "region_confidence", "requested_topn", "vehicle", "vehicle_region"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlateDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in candidates (list)
        _items = []
        if self.candidates:
            for _item_candidates in self.candidates:
                if _item_candidates:
                    _items.append(_item_candidates.to_dict())
            _dict['candidates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in coordinates (list)
        _items = []
        if self.coordinates:
            for _item_coordinates in self.coordinates:
                if _item_coordinates:
                    _items.append(_item_coordinates.to_dict())
            _dict['coordinates'] = _items
        # override the default output from pydantic by calling `to_dict()` of vehicle
        if self.vehicle:
            _dict['vehicle'] = self.vehicle.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vehicle_region
        if self.vehicle_region:
            _dict['vehicle_region'] = self.vehicle_region.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlateDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "candidates": [PlateCandidate.from_dict(_item) for _item in obj["candidates"]] if obj.get("candidates") is not None else None,
            "confidence": obj.get("confidence"),
            "coordinates": [Coordinate.from_dict(_item) for _item in obj["coordinates"]] if obj.get("coordinates") is not None else None,
            "matches_template": obj.get("matches_template"),
            "plate": obj.get("plate"),
            "processing_time_ms": obj.get("processing_time_ms"),
            "region": obj.get("region"),
            "region_confidence": obj.get("region_confidence"),
            "requested_topn": obj.get("requested_topn"),
            "vehicle": VehicleDetails.from_dict(obj["vehicle"]) if obj.get("vehicle") is not None else None,
            "vehicle_region": RegionOfInterest.from_dict(obj["vehicle_region"]) if obj.get("vehicle_region") is not None else None
        })
        return _obj



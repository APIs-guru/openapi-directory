# coding: utf-8

"""
    OpenALPR CarCheck API

    The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format 

    The version of the OpenAPI document: 3.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.plate_details import PlateDetails
from openapi_client.models.recognize_file200_response_processing_time import RecognizeFile200ResponseProcessingTime
from openapi_client.models.region_of_interest import RegionOfInterest
from openapi_client.models.vehicles import Vehicles
from typing import Optional, Set
from typing_extensions import Self

class RecognizeFile200Response(BaseModel):
    """
    RecognizeFile200Response
    """ # noqa: E501
    credit_cost: Optional[StrictInt] = Field(default=None, description="The number of API credits that were used to process this image")
    credits_monthly_total: Optional[StrictInt] = Field(default=None, description="The maximum number of API credits available this month according to your plan")
    credits_monthly_used: Optional[StrictInt] = Field(default=None, description="The number of API credits used this month")
    data_type: Optional[StrictStr] = Field(default=None, description="Specifies the type of data in this response")
    epoch_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Epoch time that the image was processed in milliseconds")
    img_height: Optional[StrictInt] = Field(default=None, description="Height of the input image in pixels")
    img_width: Optional[StrictInt] = Field(default=None, description="Width of the uploaded image in pixels")
    processing_time: Optional[RecognizeFile200ResponseProcessingTime] = None
    regions_of_interest: Optional[List[RegionOfInterest]] = Field(default=None, description="Describes the areas analyzed in the input image")
    results: Optional[List[PlateDetails]] = None
    vehicles: Optional[List[Vehicles]] = Field(default=None, description="Describes all vehicles found in the input image")
    version: Optional[StrictInt] = Field(default=None, description="API format version")
    __properties: ClassVar[List[str]] = ["credit_cost", "credits_monthly_total", "credits_monthly_used", "data_type", "epoch_time", "img_height", "img_width", "processing_time", "regions_of_interest", "results", "vehicles", "version"]

    @field_validator('data_type')
    def data_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['alpr_results', 'alpr_group', 'heartbeat']):
            raise ValueError("must be one of enum values ('alpr_results', 'alpr_group', 'heartbeat')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecognizeFile200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of processing_time
        if self.processing_time:
            _dict['processing_time'] = self.processing_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in regions_of_interest (list)
        _items = []
        if self.regions_of_interest:
            for _item_regions_of_interest in self.regions_of_interest:
                if _item_regions_of_interest:
                    _items.append(_item_regions_of_interest.to_dict())
            _dict['regions_of_interest'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        _items = []
        if self.results:
            for _item_results in self.results:
                if _item_results:
                    _items.append(_item_results.to_dict())
            _dict['results'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vehicles (list)
        _items = []
        if self.vehicles:
            for _item_vehicles in self.vehicles:
                if _item_vehicles:
                    _items.append(_item_vehicles.to_dict())
            _dict['vehicles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecognizeFile200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "credit_cost": obj.get("credit_cost"),
            "credits_monthly_total": obj.get("credits_monthly_total"),
            "credits_monthly_used": obj.get("credits_monthly_used"),
            "data_type": obj.get("data_type"),
            "epoch_time": obj.get("epoch_time"),
            "img_height": obj.get("img_height"),
            "img_width": obj.get("img_width"),
            "processing_time": RecognizeFile200ResponseProcessingTime.from_dict(obj["processing_time"]) if obj.get("processing_time") is not None else None,
            "regions_of_interest": [RegionOfInterest.from_dict(_item) for _item in obj["regions_of_interest"]] if obj.get("regions_of_interest") is not None else None,
            "results": [PlateDetails.from_dict(_item) for _item in obj["results"]] if obj.get("results") is not None else None,
            "vehicles": [Vehicles.from_dict(_item) for _item in obj["vehicles"]] if obj.get("vehicles") is not None else None,
            "version": obj.get("version")
        })
        return _obj



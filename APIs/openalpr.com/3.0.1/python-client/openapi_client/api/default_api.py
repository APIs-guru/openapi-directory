# coding: utf-8

"""
    OpenALPR CarCheck API

    The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format 

    The version of the OpenAPI document: 3.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBytes, StrictInt, StrictStr, field_validator
from typing import Optional, Tuple, Union
from typing_extensions import Annotated
from openapi_client.models.get_config200_response import GetConfig200Response
from openapi_client.models.recognize_file200_response import RecognizeFile200Response

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_config(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetConfig200Response:
        """get_config

        Get a list of available results for plate and vehicle recognition 

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_config_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetConfig200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_config_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetConfig200Response]:
        """get_config

        Get a list of available results for plate and vehicle recognition 

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_config_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetConfig200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_config_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_config

        Get a list of available results for plate and vehicle recognition 

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_config_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetConfig200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_config_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/config',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def recognize_bytes(
        self,
        secret_key: Annotated[StrictStr, Field(description="The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ ")],
        country: Annotated[StrictStr, Field(description="Defines the training data used by OpenALPR.  \"us\" analyzes  North-American style plates.  \"eu\" analyzes European-style plates.  This field is required if using the \"plate\" task ")],
        image_bytes: Annotated[StrictStr, Field(description="The image file that you wish to analyze encoded in base64 ")],
        recognize_vehicle: Annotated[Optional[StrictInt], Field(description="If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request ")] = None,
        return_image: Annotated[Optional[StrictInt], Field(description="If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response ")] = None,
        topn: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="The number of results you would like to be returned for plate  candidates and vehicle classifications ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RecognizeFile200Response:
        """recognize_bytes

        Send an image for OpenALPR to analyze and provide metadata back The image is sent as base64 encoded bytes. 

        :param secret_key: The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
        :type secret_key: str
        :param country: Defines the training data used by OpenALPR.  \"us\" analyzes  North-American style plates.  \"eu\" analyzes European-style plates.  This field is required if using the \"plate\" task  (required)
        :type country: str
        :param image_bytes: The image file that you wish to analyze encoded in base64  (required)
        :type image_bytes: str
        :param recognize_vehicle: If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request 
        :type recognize_vehicle: int
        :param return_image: If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response 
        :type return_image: int
        :param topn: The number of results you would like to be returned for plate  candidates and vehicle classifications 
        :type topn: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recognize_bytes_serialize(
            secret_key=secret_key,
            country=country,
            image_bytes=image_bytes,
            recognize_vehicle=recognize_vehicle,
            return_image=return_image,
            topn=topn,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecognizeFile200Response",
            '400': "RecognizeFile400Response",
            '401': "RecognizeFile400Response",
            '402': "RecognizeFile400Response",
            '403': "RecognizeFile400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def recognize_bytes_with_http_info(
        self,
        secret_key: Annotated[StrictStr, Field(description="The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ ")],
        country: Annotated[StrictStr, Field(description="Defines the training data used by OpenALPR.  \"us\" analyzes  North-American style plates.  \"eu\" analyzes European-style plates.  This field is required if using the \"plate\" task ")],
        image_bytes: Annotated[StrictStr, Field(description="The image file that you wish to analyze encoded in base64 ")],
        recognize_vehicle: Annotated[Optional[StrictInt], Field(description="If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request ")] = None,
        return_image: Annotated[Optional[StrictInt], Field(description="If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response ")] = None,
        topn: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="The number of results you would like to be returned for plate  candidates and vehicle classifications ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RecognizeFile200Response]:
        """recognize_bytes

        Send an image for OpenALPR to analyze and provide metadata back The image is sent as base64 encoded bytes. 

        :param secret_key: The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
        :type secret_key: str
        :param country: Defines the training data used by OpenALPR.  \"us\" analyzes  North-American style plates.  \"eu\" analyzes European-style plates.  This field is required if using the \"plate\" task  (required)
        :type country: str
        :param image_bytes: The image file that you wish to analyze encoded in base64  (required)
        :type image_bytes: str
        :param recognize_vehicle: If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request 
        :type recognize_vehicle: int
        :param return_image: If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response 
        :type return_image: int
        :param topn: The number of results you would like to be returned for plate  candidates and vehicle classifications 
        :type topn: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recognize_bytes_serialize(
            secret_key=secret_key,
            country=country,
            image_bytes=image_bytes,
            recognize_vehicle=recognize_vehicle,
            return_image=return_image,
            topn=topn,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecognizeFile200Response",
            '400': "RecognizeFile400Response",
            '401': "RecognizeFile400Response",
            '402': "RecognizeFile400Response",
            '403': "RecognizeFile400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def recognize_bytes_without_preload_content(
        self,
        secret_key: Annotated[StrictStr, Field(description="The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ ")],
        country: Annotated[StrictStr, Field(description="Defines the training data used by OpenALPR.  \"us\" analyzes  North-American style plates.  \"eu\" analyzes European-style plates.  This field is required if using the \"plate\" task ")],
        image_bytes: Annotated[StrictStr, Field(description="The image file that you wish to analyze encoded in base64 ")],
        recognize_vehicle: Annotated[Optional[StrictInt], Field(description="If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request ")] = None,
        return_image: Annotated[Optional[StrictInt], Field(description="If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response ")] = None,
        topn: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="The number of results you would like to be returned for plate  candidates and vehicle classifications ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """recognize_bytes

        Send an image for OpenALPR to analyze and provide metadata back The image is sent as base64 encoded bytes. 

        :param secret_key: The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
        :type secret_key: str
        :param country: Defines the training data used by OpenALPR.  \"us\" analyzes  North-American style plates.  \"eu\" analyzes European-style plates.  This field is required if using the \"plate\" task  (required)
        :type country: str
        :param image_bytes: The image file that you wish to analyze encoded in base64  (required)
        :type image_bytes: str
        :param recognize_vehicle: If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request 
        :type recognize_vehicle: int
        :param return_image: If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response 
        :type return_image: int
        :param topn: The number of results you would like to be returned for plate  candidates and vehicle classifications 
        :type topn: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recognize_bytes_serialize(
            secret_key=secret_key,
            country=country,
            image_bytes=image_bytes,
            recognize_vehicle=recognize_vehicle,
            return_image=return_image,
            topn=topn,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecognizeFile200Response",
            '400': "RecognizeFile400Response",
            '401': "RecognizeFile400Response",
            '402': "RecognizeFile400Response",
            '403': "RecognizeFile400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _recognize_bytes_serialize(
        self,
        secret_key,
        country,
        image_bytes,
        recognize_vehicle,
        return_image,
        topn,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if secret_key is not None:
            
            _query_params.append(('secret_key', secret_key))
            
        if recognize_vehicle is not None:
            
            _query_params.append(('recognize_vehicle', recognize_vehicle))
            
        if country is not None:
            
            _query_params.append(('country', country))
            
        if return_image is not None:
            
            _query_params.append(('return_image', return_image))
            
        if topn is not None:
            
            _query_params.append(('topn', topn))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if image_bytes is not None:
            _body_params = image_bytes


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/recognize_bytes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def recognize_file(
        self,
        secret_key: Annotated[StrictStr, Field(description="The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ ")],
        country: Annotated[StrictStr, Field(description="Defines the training data used by OpenALPR.  \"us\" analyzes  North-American style plates.  \"eu\" analyzes European-style plates.  This field is required if using the \"plate\" task ")],
        image: Annotated[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]], Field(description="The image file that you wish to analyze ")],
        recognize_vehicle: Annotated[Optional[StrictInt], Field(description="If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request ")] = None,
        return_image: Annotated[Optional[StrictInt], Field(description="If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response ")] = None,
        topn: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="The number of results you would like to be returned for plate  candidates and vehicle classifications ")] = None,
        is_cropped: Annotated[Optional[StrictInt], Field(description="When providing a plate or vehicle that is already cropped,   this performs a recognition against the full crop and does not  attempt to localize the plate/vehicle ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RecognizeFile200Response:
        """recognize_file

        Send an image for OpenALPR to analyze and provide metadata back The image is sent as a file using a form data POST 

        :param secret_key: The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
        :type secret_key: str
        :param country: Defines the training data used by OpenALPR.  \"us\" analyzes  North-American style plates.  \"eu\" analyzes European-style plates.  This field is required if using the \"plate\" task  (required)
        :type country: str
        :param image: The image file that you wish to analyze  (required)
        :type image: bytearray
        :param recognize_vehicle: If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request 
        :type recognize_vehicle: int
        :param return_image: If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response 
        :type return_image: int
        :param topn: The number of results you would like to be returned for plate  candidates and vehicle classifications 
        :type topn: int
        :param is_cropped: When providing a plate or vehicle that is already cropped,   this performs a recognition against the full crop and does not  attempt to localize the plate/vehicle 
        :type is_cropped: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recognize_file_serialize(
            secret_key=secret_key,
            country=country,
            image=image,
            recognize_vehicle=recognize_vehicle,
            return_image=return_image,
            topn=topn,
            is_cropped=is_cropped,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecognizeFile200Response",
            '400': "RecognizeFile400Response",
            '401': "RecognizeFile400Response",
            '402': "RecognizeFile400Response",
            '403': "RecognizeFile400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def recognize_file_with_http_info(
        self,
        secret_key: Annotated[StrictStr, Field(description="The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ ")],
        country: Annotated[StrictStr, Field(description="Defines the training data used by OpenALPR.  \"us\" analyzes  North-American style plates.  \"eu\" analyzes European-style plates.  This field is required if using the \"plate\" task ")],
        image: Annotated[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]], Field(description="The image file that you wish to analyze ")],
        recognize_vehicle: Annotated[Optional[StrictInt], Field(description="If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request ")] = None,
        return_image: Annotated[Optional[StrictInt], Field(description="If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response ")] = None,
        topn: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="The number of results you would like to be returned for plate  candidates and vehicle classifications ")] = None,
        is_cropped: Annotated[Optional[StrictInt], Field(description="When providing a plate or vehicle that is already cropped,   this performs a recognition against the full crop and does not  attempt to localize the plate/vehicle ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RecognizeFile200Response]:
        """recognize_file

        Send an image for OpenALPR to analyze and provide metadata back The image is sent as a file using a form data POST 

        :param secret_key: The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
        :type secret_key: str
        :param country: Defines the training data used by OpenALPR.  \"us\" analyzes  North-American style plates.  \"eu\" analyzes European-style plates.  This field is required if using the \"plate\" task  (required)
        :type country: str
        :param image: The image file that you wish to analyze  (required)
        :type image: bytearray
        :param recognize_vehicle: If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request 
        :type recognize_vehicle: int
        :param return_image: If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response 
        :type return_image: int
        :param topn: The number of results you would like to be returned for plate  candidates and vehicle classifications 
        :type topn: int
        :param is_cropped: When providing a plate or vehicle that is already cropped,   this performs a recognition against the full crop and does not  attempt to localize the plate/vehicle 
        :type is_cropped: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recognize_file_serialize(
            secret_key=secret_key,
            country=country,
            image=image,
            recognize_vehicle=recognize_vehicle,
            return_image=return_image,
            topn=topn,
            is_cropped=is_cropped,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecognizeFile200Response",
            '400': "RecognizeFile400Response",
            '401': "RecognizeFile400Response",
            '402': "RecognizeFile400Response",
            '403': "RecognizeFile400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def recognize_file_without_preload_content(
        self,
        secret_key: Annotated[StrictStr, Field(description="The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ ")],
        country: Annotated[StrictStr, Field(description="Defines the training data used by OpenALPR.  \"us\" analyzes  North-American style plates.  \"eu\" analyzes European-style plates.  This field is required if using the \"plate\" task ")],
        image: Annotated[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]], Field(description="The image file that you wish to analyze ")],
        recognize_vehicle: Annotated[Optional[StrictInt], Field(description="If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request ")] = None,
        return_image: Annotated[Optional[StrictInt], Field(description="If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response ")] = None,
        topn: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="The number of results you would like to be returned for plate  candidates and vehicle classifications ")] = None,
        is_cropped: Annotated[Optional[StrictInt], Field(description="When providing a plate or vehicle that is already cropped,   this performs a recognition against the full crop and does not  attempt to localize the plate/vehicle ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """recognize_file

        Send an image for OpenALPR to analyze and provide metadata back The image is sent as a file using a form data POST 

        :param secret_key: The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
        :type secret_key: str
        :param country: Defines the training data used by OpenALPR.  \"us\" analyzes  North-American style plates.  \"eu\" analyzes European-style plates.  This field is required if using the \"plate\" task  (required)
        :type country: str
        :param image: The image file that you wish to analyze  (required)
        :type image: bytearray
        :param recognize_vehicle: If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request 
        :type recognize_vehicle: int
        :param return_image: If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response 
        :type return_image: int
        :param topn: The number of results you would like to be returned for plate  candidates and vehicle classifications 
        :type topn: int
        :param is_cropped: When providing a plate or vehicle that is already cropped,   this performs a recognition against the full crop and does not  attempt to localize the plate/vehicle 
        :type is_cropped: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recognize_file_serialize(
            secret_key=secret_key,
            country=country,
            image=image,
            recognize_vehicle=recognize_vehicle,
            return_image=return_image,
            topn=topn,
            is_cropped=is_cropped,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecognizeFile200Response",
            '400': "RecognizeFile400Response",
            '401': "RecognizeFile400Response",
            '402': "RecognizeFile400Response",
            '403': "RecognizeFile400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _recognize_file_serialize(
        self,
        secret_key,
        country,
        image,
        recognize_vehicle,
        return_image,
        topn,
        is_cropped,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if secret_key is not None:
            
            _query_params.append(('secret_key', secret_key))
            
        if recognize_vehicle is not None:
            
            _query_params.append(('recognize_vehicle', recognize_vehicle))
            
        if country is not None:
            
            _query_params.append(('country', country))
            
        if return_image is not None:
            
            _query_params.append(('return_image', return_image))
            
        if topn is not None:
            
            _query_params.append(('topn', topn))
            
        if is_cropped is not None:
            
            _query_params.append(('is_cropped', is_cropped))
            
        # process the header parameters
        # process the form parameters
        if image is not None:
            _files['image'] = image
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/recognize',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def recognize_url(
        self,
        image_url: Annotated[StrictStr, Field(description="A URL to an image that you wish to analyze ")],
        secret_key: Annotated[StrictStr, Field(description="The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ ")],
        country: Annotated[StrictStr, Field(description="Defines the training data used by OpenALPR.  \"us\" analyzes  North-American style plates.  \"eu\" analyzes European-style plates.  This field is required if using the \"plate\" task ")],
        recognize_vehicle: Annotated[Optional[StrictInt], Field(description="If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request ")] = None,
        return_image: Annotated[Optional[StrictInt], Field(description="If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response ")] = None,
        topn: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="The number of results you would like to be returned for plate  candidates and vehicle classifications ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RecognizeFile200Response:
        """recognize_url

        Send an image for OpenALPR to analyze and provide metadata back The image is sent as a URL.  The OpenALPR service will download the image  and process it 

        :param image_url: A URL to an image that you wish to analyze  (required)
        :type image_url: str
        :param secret_key: The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
        :type secret_key: str
        :param country: Defines the training data used by OpenALPR.  \"us\" analyzes  North-American style plates.  \"eu\" analyzes European-style plates.  This field is required if using the \"plate\" task  (required)
        :type country: str
        :param recognize_vehicle: If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request 
        :type recognize_vehicle: int
        :param return_image: If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response 
        :type return_image: int
        :param topn: The number of results you would like to be returned for plate  candidates and vehicle classifications 
        :type topn: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recognize_url_serialize(
            image_url=image_url,
            secret_key=secret_key,
            country=country,
            recognize_vehicle=recognize_vehicle,
            return_image=return_image,
            topn=topn,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecognizeFile200Response",
            '400': "RecognizeFile400Response",
            '401': "RecognizeFile400Response",
            '402': "RecognizeFile400Response",
            '403': "RecognizeFile400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def recognize_url_with_http_info(
        self,
        image_url: Annotated[StrictStr, Field(description="A URL to an image that you wish to analyze ")],
        secret_key: Annotated[StrictStr, Field(description="The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ ")],
        country: Annotated[StrictStr, Field(description="Defines the training data used by OpenALPR.  \"us\" analyzes  North-American style plates.  \"eu\" analyzes European-style plates.  This field is required if using the \"plate\" task ")],
        recognize_vehicle: Annotated[Optional[StrictInt], Field(description="If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request ")] = None,
        return_image: Annotated[Optional[StrictInt], Field(description="If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response ")] = None,
        topn: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="The number of results you would like to be returned for plate  candidates and vehicle classifications ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RecognizeFile200Response]:
        """recognize_url

        Send an image for OpenALPR to analyze and provide metadata back The image is sent as a URL.  The OpenALPR service will download the image  and process it 

        :param image_url: A URL to an image that you wish to analyze  (required)
        :type image_url: str
        :param secret_key: The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
        :type secret_key: str
        :param country: Defines the training data used by OpenALPR.  \"us\" analyzes  North-American style plates.  \"eu\" analyzes European-style plates.  This field is required if using the \"plate\" task  (required)
        :type country: str
        :param recognize_vehicle: If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request 
        :type recognize_vehicle: int
        :param return_image: If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response 
        :type return_image: int
        :param topn: The number of results you would like to be returned for plate  candidates and vehicle classifications 
        :type topn: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recognize_url_serialize(
            image_url=image_url,
            secret_key=secret_key,
            country=country,
            recognize_vehicle=recognize_vehicle,
            return_image=return_image,
            topn=topn,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecognizeFile200Response",
            '400': "RecognizeFile400Response",
            '401': "RecognizeFile400Response",
            '402': "RecognizeFile400Response",
            '403': "RecognizeFile400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def recognize_url_without_preload_content(
        self,
        image_url: Annotated[StrictStr, Field(description="A URL to an image that you wish to analyze ")],
        secret_key: Annotated[StrictStr, Field(description="The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/ ")],
        country: Annotated[StrictStr, Field(description="Defines the training data used by OpenALPR.  \"us\" analyzes  North-American style plates.  \"eu\" analyzes European-style plates.  This field is required if using the \"plate\" task ")],
        recognize_vehicle: Annotated[Optional[StrictInt], Field(description="If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request ")] = None,
        return_image: Annotated[Optional[StrictInt], Field(description="If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response ")] = None,
        topn: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="The number of results you would like to be returned for plate  candidates and vehicle classifications ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """recognize_url

        Send an image for OpenALPR to analyze and provide metadata back The image is sent as a URL.  The OpenALPR service will download the image  and process it 

        :param image_url: A URL to an image that you wish to analyze  (required)
        :type image_url: str
        :param secret_key: The secret key used to authenticate your account.  You can view your  secret key by visiting  https://cloud.openalpr.com/  (required)
        :type secret_key: str
        :param country: Defines the training data used by OpenALPR.  \"us\" analyzes  North-American style plates.  \"eu\" analyzes European-style plates.  This field is required if using the \"plate\" task  (required)
        :type country: str
        :param recognize_vehicle: If set to 1, the vehicle will also be recognized in the image This requires an additional credit per request 
        :type recognize_vehicle: int
        :param return_image: If set to 1, the image you uploaded will be encoded in base64 and  sent back along with the response 
        :type return_image: int
        :param topn: The number of results you would like to be returned for plate  candidates and vehicle classifications 
        :type topn: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recognize_url_serialize(
            image_url=image_url,
            secret_key=secret_key,
            country=country,
            recognize_vehicle=recognize_vehicle,
            return_image=return_image,
            topn=topn,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RecognizeFile200Response",
            '400': "RecognizeFile400Response",
            '401': "RecognizeFile400Response",
            '402': "RecognizeFile400Response",
            '403': "RecognizeFile400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _recognize_url_serialize(
        self,
        image_url,
        secret_key,
        country,
        recognize_vehicle,
        return_image,
        topn,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if image_url is not None:
            
            _query_params.append(('image_url', image_url))
            
        if secret_key is not None:
            
            _query_params.append(('secret_key', secret_key))
            
        if recognize_vehicle is not None:
            
            _query_params.append(('recognize_vehicle', recognize_vehicle))
            
        if country is not None:
            
            _query_params.append(('country', country))
            
        if return_image is not None:
            
            _query_params.append(('return_image', return_image))
            
        if topn is not None:
            
            _query_params.append(('topn', topn))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/recognize_url',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



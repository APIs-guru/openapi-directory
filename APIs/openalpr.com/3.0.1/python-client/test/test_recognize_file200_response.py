# coding: utf-8

"""
    OpenALPR CarCheck API

    The OpenALPR CarCheck API allows you to send images to the cloud for processing.  The image will be analyzed for license plates and vehicle make/models.  The results  are returned in JSON format 

    The version of the OpenAPI document: 3.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.recognize_file200_response import RecognizeFile200Response

class TestRecognizeFile200Response(unittest.TestCase):
    """RecognizeFile200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RecognizeFile200Response:
        """Test RecognizeFile200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RecognizeFile200Response`
        """
        model = RecognizeFile200Response()
        if include_optional:
            return RecognizeFile200Response(
                credit_cost = 56,
                credits_monthly_total = 56,
                credits_monthly_used = 56,
                data_type = 'alpr_results',
                epoch_time = 1.337,
                img_height = 56,
                img_width = 56,
                processing_time = openapi_client.models.recognize_file_200_response_processing_time.recognizeFile_200_response_processing_time(
                    plates = 1.337, 
                    total = 1.337, 
                    vehicles = 1.337, ),
                regions_of_interest = [
                    openapi_client.models.region_of_interest.region_of_interest(
                        height = 56, 
                        width = 56, 
                        x = 56, 
                        y = 56, )
                    ],
                results = [
                    openapi_client.models.plate_details.plate_details(
                        candidates = [
                            openapi_client.models.plate_candidate.plate_candidate(
                                confidence = 1.337, 
                                matches_template = 56, 
                                plate = '', )
                            ], 
                        confidence = 1.337, 
                        coordinates = [
                            openapi_client.models.coordinate.coordinate(
                                x = 56, 
                                y = 56, )
                            ], 
                        matches_template = 56, 
                        plate = '', 
                        processing_time_ms = 1.337, 
                        region = '', 
                        region_confidence = 1.337, 
                        requested_topn = 56, 
                        vehicle = openapi_client.models.vehicle_details.vehicle_details(
                            body_type = [
                                openapi_client.models.vehicle_candidate.vehicle_candidate(
                                    confidence = 1.337, 
                                    name = '', )
                                ], 
                            color = [
                                openapi_client.models.vehicle_candidate.vehicle_candidate(
                                    confidence = 1.337, 
                                    name = '', )
                                ], 
                            make = [
                                
                                ], 
                            make_model = [
                                
                                ], 
                            orientation = [
                                
                                ], 
                            year = [
                                
                                ], ), 
                        vehicle_region = openapi_client.models.region_of_interest.region_of_interest(
                            height = 56, 
                            width = 56, 
                            x = 56, 
                            y = 56, ), )
                    ],
                vehicles = [
                    openapi_client.models.vehicles.vehicles(
                        details = openapi_client.models.vehicle_details.vehicle_details(
                            body_type = [
                                openapi_client.models.vehicle_candidate.vehicle_candidate(
                                    confidence = 1.337, 
                                    name = '', )
                                ], 
                            color = [
                                openapi_client.models.vehicle_candidate.vehicle_candidate(
                                    confidence = 1.337, 
                                    name = '', )
                                ], 
                            make = [
                                
                                ], 
                            make_model = [
                                
                                ], 
                            orientation = [
                                
                                ], 
                            year = [
                                
                                ], ), 
                        height = 56, 
                        width = 56, 
                        x = 56, 
                        y = 56, )
                    ],
                version = 56
            )
        else:
            return RecognizeFile200Response(
        )
        """

    def testRecognizeFile200Response(self):
        """Test RecognizeFile200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

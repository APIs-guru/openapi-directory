# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.age_rating_declaration_response import AgeRatingDeclarationResponse
from openapi_client.models.app_store_review_detail_response import AppStoreReviewDetailResponse
from openapi_client.models.app_store_version_build_linkage_request import AppStoreVersionBuildLinkageRequest
from openapi_client.models.app_store_version_build_linkage_response import AppStoreVersionBuildLinkageResponse
from openapi_client.models.app_store_version_create_request import AppStoreVersionCreateRequest
from openapi_client.models.app_store_version_localizations_response import AppStoreVersionLocalizationsResponse
from openapi_client.models.app_store_version_phased_release_response import AppStoreVersionPhasedReleaseResponse
from openapi_client.models.app_store_version_response import AppStoreVersionResponse
from openapi_client.models.app_store_version_submission_response import AppStoreVersionSubmissionResponse
from openapi_client.models.app_store_version_update_request import AppStoreVersionUpdateRequest
from openapi_client.models.build_response import BuildResponse
from openapi_client.models.idfa_declaration_response import IdfaDeclarationResponse
from openapi_client.models.routing_app_coverage_response import RoutingAppCoverageResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class AppStoreVersionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def app_store_versions_age_rating_declaration_get_to_one_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_age_rating_declarations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type ageRatingDeclarations")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AgeRatingDeclarationResponse:
        """(Deprecated) app_store_versions_age_rating_declaration_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_age_rating_declarations: the fields to include for returned resources of type ageRatingDeclarations
        :type fields_age_rating_declarations: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v1/appStoreVersions/{id}/ageRatingDeclaration is deprecated.", DeprecationWarning)

        _param = self._app_store_versions_age_rating_declaration_get_to_one_related_serialize(
            id=id,
            fields_age_rating_declarations=fields_age_rating_declarations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AgeRatingDeclarationResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def app_store_versions_age_rating_declaration_get_to_one_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_age_rating_declarations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type ageRatingDeclarations")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AgeRatingDeclarationResponse]:
        """(Deprecated) app_store_versions_age_rating_declaration_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_age_rating_declarations: the fields to include for returned resources of type ageRatingDeclarations
        :type fields_age_rating_declarations: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v1/appStoreVersions/{id}/ageRatingDeclaration is deprecated.", DeprecationWarning)

        _param = self._app_store_versions_age_rating_declaration_get_to_one_related_serialize(
            id=id,
            fields_age_rating_declarations=fields_age_rating_declarations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AgeRatingDeclarationResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def app_store_versions_age_rating_declaration_get_to_one_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_age_rating_declarations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type ageRatingDeclarations")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) app_store_versions_age_rating_declaration_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_age_rating_declarations: the fields to include for returned resources of type ageRatingDeclarations
        :type fields_age_rating_declarations: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v1/appStoreVersions/{id}/ageRatingDeclaration is deprecated.", DeprecationWarning)

        _param = self._app_store_versions_age_rating_declaration_get_to_one_related_serialize(
            id=id,
            fields_age_rating_declarations=fields_age_rating_declarations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AgeRatingDeclarationResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _app_store_versions_age_rating_declaration_get_to_one_related_serialize(
        self,
        id,
        fields_age_rating_declarations,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[ageRatingDeclarations]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_age_rating_declarations is not None:
            
            _query_params.append(('fields[ageRatingDeclarations]', fields_age_rating_declarations))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/appStoreVersions/{id}/ageRatingDeclaration',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def app_store_versions_app_store_review_detail_get_to_one_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_app_store_review_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreReviewDetails")] = None,
        fields_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersions")] = None,
        fields_app_store_review_attachments: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreReviewAttachments")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AppStoreReviewDetailResponse:
        """app_store_versions_app_store_review_detail_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_app_store_review_details: the fields to include for returned resources of type appStoreReviewDetails
        :type fields_app_store_review_details: List[str]
        :param fields_app_store_versions: the fields to include for returned resources of type appStoreVersions
        :type fields_app_store_versions: List[str]
        :param fields_app_store_review_attachments: the fields to include for returned resources of type appStoreReviewAttachments
        :type fields_app_store_review_attachments: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_app_store_review_detail_get_to_one_related_serialize(
            id=id,
            fields_app_store_review_details=fields_app_store_review_details,
            fields_app_store_versions=fields_app_store_versions,
            fields_app_store_review_attachments=fields_app_store_review_attachments,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppStoreReviewDetailResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def app_store_versions_app_store_review_detail_get_to_one_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_app_store_review_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreReviewDetails")] = None,
        fields_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersions")] = None,
        fields_app_store_review_attachments: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreReviewAttachments")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AppStoreReviewDetailResponse]:
        """app_store_versions_app_store_review_detail_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_app_store_review_details: the fields to include for returned resources of type appStoreReviewDetails
        :type fields_app_store_review_details: List[str]
        :param fields_app_store_versions: the fields to include for returned resources of type appStoreVersions
        :type fields_app_store_versions: List[str]
        :param fields_app_store_review_attachments: the fields to include for returned resources of type appStoreReviewAttachments
        :type fields_app_store_review_attachments: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_app_store_review_detail_get_to_one_related_serialize(
            id=id,
            fields_app_store_review_details=fields_app_store_review_details,
            fields_app_store_versions=fields_app_store_versions,
            fields_app_store_review_attachments=fields_app_store_review_attachments,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppStoreReviewDetailResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def app_store_versions_app_store_review_detail_get_to_one_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_app_store_review_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreReviewDetails")] = None,
        fields_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersions")] = None,
        fields_app_store_review_attachments: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreReviewAttachments")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """app_store_versions_app_store_review_detail_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_app_store_review_details: the fields to include for returned resources of type appStoreReviewDetails
        :type fields_app_store_review_details: List[str]
        :param fields_app_store_versions: the fields to include for returned resources of type appStoreVersions
        :type fields_app_store_versions: List[str]
        :param fields_app_store_review_attachments: the fields to include for returned resources of type appStoreReviewAttachments
        :type fields_app_store_review_attachments: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_app_store_review_detail_get_to_one_related_serialize(
            id=id,
            fields_app_store_review_details=fields_app_store_review_details,
            fields_app_store_versions=fields_app_store_versions,
            fields_app_store_review_attachments=fields_app_store_review_attachments,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppStoreReviewDetailResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _app_store_versions_app_store_review_detail_get_to_one_related_serialize(
        self,
        id,
        fields_app_store_review_details,
        fields_app_store_versions,
        fields_app_store_review_attachments,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[appStoreReviewDetails]': 'csv',
            'fields[appStoreVersions]': 'csv',
            'fields[appStoreReviewAttachments]': 'csv',
            'include': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_app_store_review_details is not None:
            
            _query_params.append(('fields[appStoreReviewDetails]', fields_app_store_review_details))
            
        if fields_app_store_versions is not None:
            
            _query_params.append(('fields[appStoreVersions]', fields_app_store_versions))
            
        if fields_app_store_review_attachments is not None:
            
            _query_params.append(('fields[appStoreReviewAttachments]', fields_app_store_review_attachments))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/appStoreVersions/{id}/appStoreReviewDetail',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def app_store_versions_app_store_version_localizations_get_to_many_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_app_store_version_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionLocalizations")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AppStoreVersionLocalizationsResponse:
        """app_store_versions_app_store_version_localizations_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_app_store_version_localizations: the fields to include for returned resources of type appStoreVersionLocalizations
        :type fields_app_store_version_localizations: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_app_store_version_localizations_get_to_many_related_serialize(
            id=id,
            fields_app_store_version_localizations=fields_app_store_version_localizations,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppStoreVersionLocalizationsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def app_store_versions_app_store_version_localizations_get_to_many_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_app_store_version_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionLocalizations")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AppStoreVersionLocalizationsResponse]:
        """app_store_versions_app_store_version_localizations_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_app_store_version_localizations: the fields to include for returned resources of type appStoreVersionLocalizations
        :type fields_app_store_version_localizations: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_app_store_version_localizations_get_to_many_related_serialize(
            id=id,
            fields_app_store_version_localizations=fields_app_store_version_localizations,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppStoreVersionLocalizationsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def app_store_versions_app_store_version_localizations_get_to_many_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_app_store_version_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionLocalizations")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """app_store_versions_app_store_version_localizations_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_app_store_version_localizations: the fields to include for returned resources of type appStoreVersionLocalizations
        :type fields_app_store_version_localizations: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_app_store_version_localizations_get_to_many_related_serialize(
            id=id,
            fields_app_store_version_localizations=fields_app_store_version_localizations,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppStoreVersionLocalizationsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _app_store_versions_app_store_version_localizations_get_to_many_related_serialize(
        self,
        id,
        fields_app_store_version_localizations,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[appStoreVersionLocalizations]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_app_store_version_localizations is not None:
            
            _query_params.append(('fields[appStoreVersionLocalizations]', fields_app_store_version_localizations))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/appStoreVersions/{id}/appStoreVersionLocalizations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def app_store_versions_app_store_version_phased_release_get_to_one_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_app_store_version_phased_releases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionPhasedReleases")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AppStoreVersionPhasedReleaseResponse:
        """app_store_versions_app_store_version_phased_release_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_app_store_version_phased_releases: the fields to include for returned resources of type appStoreVersionPhasedReleases
        :type fields_app_store_version_phased_releases: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_app_store_version_phased_release_get_to_one_related_serialize(
            id=id,
            fields_app_store_version_phased_releases=fields_app_store_version_phased_releases,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppStoreVersionPhasedReleaseResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def app_store_versions_app_store_version_phased_release_get_to_one_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_app_store_version_phased_releases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionPhasedReleases")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AppStoreVersionPhasedReleaseResponse]:
        """app_store_versions_app_store_version_phased_release_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_app_store_version_phased_releases: the fields to include for returned resources of type appStoreVersionPhasedReleases
        :type fields_app_store_version_phased_releases: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_app_store_version_phased_release_get_to_one_related_serialize(
            id=id,
            fields_app_store_version_phased_releases=fields_app_store_version_phased_releases,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppStoreVersionPhasedReleaseResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def app_store_versions_app_store_version_phased_release_get_to_one_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_app_store_version_phased_releases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionPhasedReleases")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """app_store_versions_app_store_version_phased_release_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_app_store_version_phased_releases: the fields to include for returned resources of type appStoreVersionPhasedReleases
        :type fields_app_store_version_phased_releases: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_app_store_version_phased_release_get_to_one_related_serialize(
            id=id,
            fields_app_store_version_phased_releases=fields_app_store_version_phased_releases,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppStoreVersionPhasedReleaseResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _app_store_versions_app_store_version_phased_release_get_to_one_related_serialize(
        self,
        id,
        fields_app_store_version_phased_releases,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[appStoreVersionPhasedReleases]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_app_store_version_phased_releases is not None:
            
            _query_params.append(('fields[appStoreVersionPhasedReleases]', fields_app_store_version_phased_releases))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/appStoreVersions/{id}/appStoreVersionPhasedRelease',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def app_store_versions_app_store_version_submission_get_to_one_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersions")] = None,
        fields_app_store_version_submissions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionSubmissions")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AppStoreVersionSubmissionResponse:
        """app_store_versions_app_store_version_submission_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_app_store_versions: the fields to include for returned resources of type appStoreVersions
        :type fields_app_store_versions: List[str]
        :param fields_app_store_version_submissions: the fields to include for returned resources of type appStoreVersionSubmissions
        :type fields_app_store_version_submissions: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_app_store_version_submission_get_to_one_related_serialize(
            id=id,
            fields_app_store_versions=fields_app_store_versions,
            fields_app_store_version_submissions=fields_app_store_version_submissions,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppStoreVersionSubmissionResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def app_store_versions_app_store_version_submission_get_to_one_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersions")] = None,
        fields_app_store_version_submissions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionSubmissions")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AppStoreVersionSubmissionResponse]:
        """app_store_versions_app_store_version_submission_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_app_store_versions: the fields to include for returned resources of type appStoreVersions
        :type fields_app_store_versions: List[str]
        :param fields_app_store_version_submissions: the fields to include for returned resources of type appStoreVersionSubmissions
        :type fields_app_store_version_submissions: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_app_store_version_submission_get_to_one_related_serialize(
            id=id,
            fields_app_store_versions=fields_app_store_versions,
            fields_app_store_version_submissions=fields_app_store_version_submissions,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppStoreVersionSubmissionResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def app_store_versions_app_store_version_submission_get_to_one_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersions")] = None,
        fields_app_store_version_submissions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionSubmissions")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """app_store_versions_app_store_version_submission_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_app_store_versions: the fields to include for returned resources of type appStoreVersions
        :type fields_app_store_versions: List[str]
        :param fields_app_store_version_submissions: the fields to include for returned resources of type appStoreVersionSubmissions
        :type fields_app_store_version_submissions: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_app_store_version_submission_get_to_one_related_serialize(
            id=id,
            fields_app_store_versions=fields_app_store_versions,
            fields_app_store_version_submissions=fields_app_store_version_submissions,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppStoreVersionSubmissionResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _app_store_versions_app_store_version_submission_get_to_one_related_serialize(
        self,
        id,
        fields_app_store_versions,
        fields_app_store_version_submissions,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[appStoreVersions]': 'csv',
            'fields[appStoreVersionSubmissions]': 'csv',
            'include': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_app_store_versions is not None:
            
            _query_params.append(('fields[appStoreVersions]', fields_app_store_versions))
            
        if fields_app_store_version_submissions is not None:
            
            _query_params.append(('fields[appStoreVersionSubmissions]', fields_app_store_version_submissions))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/appStoreVersions/{id}/appStoreVersionSubmission',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def app_store_versions_build_get_to_one_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BuildResponse:
        """app_store_versions_build_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_build_get_to_one_related_serialize(
            id=id,
            fields_builds=fields_builds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BuildResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def app_store_versions_build_get_to_one_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BuildResponse]:
        """app_store_versions_build_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_build_get_to_one_related_serialize(
            id=id,
            fields_builds=fields_builds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BuildResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def app_store_versions_build_get_to_one_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """app_store_versions_build_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_build_get_to_one_related_serialize(
            id=id,
            fields_builds=fields_builds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BuildResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _app_store_versions_build_get_to_one_related_serialize(
        self,
        id,
        fields_builds,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[builds]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_builds is not None:
            
            _query_params.append(('fields[builds]', fields_builds))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/appStoreVersions/{id}/build',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def app_store_versions_build_get_to_one_relationship(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AppStoreVersionBuildLinkageResponse:
        """app_store_versions_build_get_to_one_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_build_get_to_one_relationship_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppStoreVersionBuildLinkageResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def app_store_versions_build_get_to_one_relationship_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AppStoreVersionBuildLinkageResponse]:
        """app_store_versions_build_get_to_one_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_build_get_to_one_relationship_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppStoreVersionBuildLinkageResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def app_store_versions_build_get_to_one_relationship_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """app_store_versions_build_get_to_one_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_build_get_to_one_relationship_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppStoreVersionBuildLinkageResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _app_store_versions_build_get_to_one_relationship_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/appStoreVersions/{id}/relationships/build',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def app_store_versions_build_update_to_one_relationship(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        app_store_version_build_linkage_request: Annotated[AppStoreVersionBuildLinkageRequest, Field(description="Related linkage")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """app_store_versions_build_update_to_one_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param app_store_version_build_linkage_request: Related linkage (required)
        :type app_store_version_build_linkage_request: AppStoreVersionBuildLinkageRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_build_update_to_one_relationship_serialize(
            id=id,
            app_store_version_build_linkage_request=app_store_version_build_linkage_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def app_store_versions_build_update_to_one_relationship_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        app_store_version_build_linkage_request: Annotated[AppStoreVersionBuildLinkageRequest, Field(description="Related linkage")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """app_store_versions_build_update_to_one_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param app_store_version_build_linkage_request: Related linkage (required)
        :type app_store_version_build_linkage_request: AppStoreVersionBuildLinkageRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_build_update_to_one_relationship_serialize(
            id=id,
            app_store_version_build_linkage_request=app_store_version_build_linkage_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def app_store_versions_build_update_to_one_relationship_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        app_store_version_build_linkage_request: Annotated[AppStoreVersionBuildLinkageRequest, Field(description="Related linkage")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """app_store_versions_build_update_to_one_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param app_store_version_build_linkage_request: Related linkage (required)
        :type app_store_version_build_linkage_request: AppStoreVersionBuildLinkageRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_build_update_to_one_relationship_serialize(
            id=id,
            app_store_version_build_linkage_request=app_store_version_build_linkage_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _app_store_versions_build_update_to_one_relationship_serialize(
        self,
        id,
        app_store_version_build_linkage_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if app_store_version_build_linkage_request is not None:
            _body_params = app_store_version_build_linkage_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/v1/appStoreVersions/{id}/relationships/build',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def app_store_versions_create_instance(
        self,
        app_store_version_create_request: Annotated[AppStoreVersionCreateRequest, Field(description="AppStoreVersion representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AppStoreVersionResponse:
        """app_store_versions_create_instance


        :param app_store_version_create_request: AppStoreVersion representation (required)
        :type app_store_version_create_request: AppStoreVersionCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_create_instance_serialize(
            app_store_version_create_request=app_store_version_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "AppStoreVersionResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def app_store_versions_create_instance_with_http_info(
        self,
        app_store_version_create_request: Annotated[AppStoreVersionCreateRequest, Field(description="AppStoreVersion representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AppStoreVersionResponse]:
        """app_store_versions_create_instance


        :param app_store_version_create_request: AppStoreVersion representation (required)
        :type app_store_version_create_request: AppStoreVersionCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_create_instance_serialize(
            app_store_version_create_request=app_store_version_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "AppStoreVersionResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def app_store_versions_create_instance_without_preload_content(
        self,
        app_store_version_create_request: Annotated[AppStoreVersionCreateRequest, Field(description="AppStoreVersion representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """app_store_versions_create_instance


        :param app_store_version_create_request: AppStoreVersion representation (required)
        :type app_store_version_create_request: AppStoreVersionCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_create_instance_serialize(
            app_store_version_create_request=app_store_version_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "AppStoreVersionResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _app_store_versions_create_instance_serialize(
        self,
        app_store_version_create_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if app_store_version_create_request is not None:
            _body_params = app_store_version_create_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/appStoreVersions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def app_store_versions_delete_instance(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """app_store_versions_delete_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_delete_instance_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def app_store_versions_delete_instance_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """app_store_versions_delete_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_delete_instance_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def app_store_versions_delete_instance_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """app_store_versions_delete_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_delete_instance_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _app_store_versions_delete_instance_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/appStoreVersions/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def app_store_versions_get_instance(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersions")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        fields_app_store_version_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionLocalizations")] = None,
        fields_idfa_declarations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type idfaDeclarations")] = None,
        fields_routing_app_coverages: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type routingAppCoverages")] = None,
        fields_app_store_version_phased_releases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionPhasedReleases")] = None,
        fields_age_rating_declarations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type ageRatingDeclarations")] = None,
        fields_app_store_review_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreReviewDetails")] = None,
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        fields_app_store_version_submissions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionSubmissions")] = None,
        limit_app_store_version_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related appStoreVersionLocalizations returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AppStoreVersionResponse:
        """app_store_versions_get_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_app_store_versions: the fields to include for returned resources of type appStoreVersions
        :type fields_app_store_versions: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param fields_app_store_version_localizations: the fields to include for returned resources of type appStoreVersionLocalizations
        :type fields_app_store_version_localizations: List[str]
        :param fields_idfa_declarations: the fields to include for returned resources of type idfaDeclarations
        :type fields_idfa_declarations: List[str]
        :param fields_routing_app_coverages: the fields to include for returned resources of type routingAppCoverages
        :type fields_routing_app_coverages: List[str]
        :param fields_app_store_version_phased_releases: the fields to include for returned resources of type appStoreVersionPhasedReleases
        :type fields_app_store_version_phased_releases: List[str]
        :param fields_age_rating_declarations: the fields to include for returned resources of type ageRatingDeclarations
        :type fields_age_rating_declarations: List[str]
        :param fields_app_store_review_details: the fields to include for returned resources of type appStoreReviewDetails
        :type fields_app_store_review_details: List[str]
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param fields_app_store_version_submissions: the fields to include for returned resources of type appStoreVersionSubmissions
        :type fields_app_store_version_submissions: List[str]
        :param limit_app_store_version_localizations: maximum number of related appStoreVersionLocalizations returned (when they are included)
        :type limit_app_store_version_localizations: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_get_instance_serialize(
            id=id,
            fields_app_store_versions=fields_app_store_versions,
            include=include,
            fields_app_store_version_localizations=fields_app_store_version_localizations,
            fields_idfa_declarations=fields_idfa_declarations,
            fields_routing_app_coverages=fields_routing_app_coverages,
            fields_app_store_version_phased_releases=fields_app_store_version_phased_releases,
            fields_age_rating_declarations=fields_age_rating_declarations,
            fields_app_store_review_details=fields_app_store_review_details,
            fields_builds=fields_builds,
            fields_app_store_version_submissions=fields_app_store_version_submissions,
            limit_app_store_version_localizations=limit_app_store_version_localizations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppStoreVersionResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def app_store_versions_get_instance_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersions")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        fields_app_store_version_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionLocalizations")] = None,
        fields_idfa_declarations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type idfaDeclarations")] = None,
        fields_routing_app_coverages: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type routingAppCoverages")] = None,
        fields_app_store_version_phased_releases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionPhasedReleases")] = None,
        fields_age_rating_declarations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type ageRatingDeclarations")] = None,
        fields_app_store_review_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreReviewDetails")] = None,
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        fields_app_store_version_submissions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionSubmissions")] = None,
        limit_app_store_version_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related appStoreVersionLocalizations returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AppStoreVersionResponse]:
        """app_store_versions_get_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_app_store_versions: the fields to include for returned resources of type appStoreVersions
        :type fields_app_store_versions: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param fields_app_store_version_localizations: the fields to include for returned resources of type appStoreVersionLocalizations
        :type fields_app_store_version_localizations: List[str]
        :param fields_idfa_declarations: the fields to include for returned resources of type idfaDeclarations
        :type fields_idfa_declarations: List[str]
        :param fields_routing_app_coverages: the fields to include for returned resources of type routingAppCoverages
        :type fields_routing_app_coverages: List[str]
        :param fields_app_store_version_phased_releases: the fields to include for returned resources of type appStoreVersionPhasedReleases
        :type fields_app_store_version_phased_releases: List[str]
        :param fields_age_rating_declarations: the fields to include for returned resources of type ageRatingDeclarations
        :type fields_age_rating_declarations: List[str]
        :param fields_app_store_review_details: the fields to include for returned resources of type appStoreReviewDetails
        :type fields_app_store_review_details: List[str]
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param fields_app_store_version_submissions: the fields to include for returned resources of type appStoreVersionSubmissions
        :type fields_app_store_version_submissions: List[str]
        :param limit_app_store_version_localizations: maximum number of related appStoreVersionLocalizations returned (when they are included)
        :type limit_app_store_version_localizations: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_get_instance_serialize(
            id=id,
            fields_app_store_versions=fields_app_store_versions,
            include=include,
            fields_app_store_version_localizations=fields_app_store_version_localizations,
            fields_idfa_declarations=fields_idfa_declarations,
            fields_routing_app_coverages=fields_routing_app_coverages,
            fields_app_store_version_phased_releases=fields_app_store_version_phased_releases,
            fields_age_rating_declarations=fields_age_rating_declarations,
            fields_app_store_review_details=fields_app_store_review_details,
            fields_builds=fields_builds,
            fields_app_store_version_submissions=fields_app_store_version_submissions,
            limit_app_store_version_localizations=limit_app_store_version_localizations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppStoreVersionResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def app_store_versions_get_instance_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersions")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        fields_app_store_version_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionLocalizations")] = None,
        fields_idfa_declarations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type idfaDeclarations")] = None,
        fields_routing_app_coverages: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type routingAppCoverages")] = None,
        fields_app_store_version_phased_releases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionPhasedReleases")] = None,
        fields_age_rating_declarations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type ageRatingDeclarations")] = None,
        fields_app_store_review_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreReviewDetails")] = None,
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        fields_app_store_version_submissions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionSubmissions")] = None,
        limit_app_store_version_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related appStoreVersionLocalizations returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """app_store_versions_get_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_app_store_versions: the fields to include for returned resources of type appStoreVersions
        :type fields_app_store_versions: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param fields_app_store_version_localizations: the fields to include for returned resources of type appStoreVersionLocalizations
        :type fields_app_store_version_localizations: List[str]
        :param fields_idfa_declarations: the fields to include for returned resources of type idfaDeclarations
        :type fields_idfa_declarations: List[str]
        :param fields_routing_app_coverages: the fields to include for returned resources of type routingAppCoverages
        :type fields_routing_app_coverages: List[str]
        :param fields_app_store_version_phased_releases: the fields to include for returned resources of type appStoreVersionPhasedReleases
        :type fields_app_store_version_phased_releases: List[str]
        :param fields_age_rating_declarations: the fields to include for returned resources of type ageRatingDeclarations
        :type fields_age_rating_declarations: List[str]
        :param fields_app_store_review_details: the fields to include for returned resources of type appStoreReviewDetails
        :type fields_app_store_review_details: List[str]
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param fields_app_store_version_submissions: the fields to include for returned resources of type appStoreVersionSubmissions
        :type fields_app_store_version_submissions: List[str]
        :param limit_app_store_version_localizations: maximum number of related appStoreVersionLocalizations returned (when they are included)
        :type limit_app_store_version_localizations: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_get_instance_serialize(
            id=id,
            fields_app_store_versions=fields_app_store_versions,
            include=include,
            fields_app_store_version_localizations=fields_app_store_version_localizations,
            fields_idfa_declarations=fields_idfa_declarations,
            fields_routing_app_coverages=fields_routing_app_coverages,
            fields_app_store_version_phased_releases=fields_app_store_version_phased_releases,
            fields_age_rating_declarations=fields_age_rating_declarations,
            fields_app_store_review_details=fields_app_store_review_details,
            fields_builds=fields_builds,
            fields_app_store_version_submissions=fields_app_store_version_submissions,
            limit_app_store_version_localizations=limit_app_store_version_localizations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppStoreVersionResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _app_store_versions_get_instance_serialize(
        self,
        id,
        fields_app_store_versions,
        include,
        fields_app_store_version_localizations,
        fields_idfa_declarations,
        fields_routing_app_coverages,
        fields_app_store_version_phased_releases,
        fields_age_rating_declarations,
        fields_app_store_review_details,
        fields_builds,
        fields_app_store_version_submissions,
        limit_app_store_version_localizations,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[appStoreVersions]': 'csv',
            'include': 'csv',
            'fields[appStoreVersionLocalizations]': 'csv',
            'fields[idfaDeclarations]': 'csv',
            'fields[routingAppCoverages]': 'csv',
            'fields[appStoreVersionPhasedReleases]': 'csv',
            'fields[ageRatingDeclarations]': 'csv',
            'fields[appStoreReviewDetails]': 'csv',
            'fields[builds]': 'csv',
            'fields[appStoreVersionSubmissions]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_app_store_versions is not None:
            
            _query_params.append(('fields[appStoreVersions]', fields_app_store_versions))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        if fields_app_store_version_localizations is not None:
            
            _query_params.append(('fields[appStoreVersionLocalizations]', fields_app_store_version_localizations))
            
        if fields_idfa_declarations is not None:
            
            _query_params.append(('fields[idfaDeclarations]', fields_idfa_declarations))
            
        if fields_routing_app_coverages is not None:
            
            _query_params.append(('fields[routingAppCoverages]', fields_routing_app_coverages))
            
        if fields_app_store_version_phased_releases is not None:
            
            _query_params.append(('fields[appStoreVersionPhasedReleases]', fields_app_store_version_phased_releases))
            
        if fields_age_rating_declarations is not None:
            
            _query_params.append(('fields[ageRatingDeclarations]', fields_age_rating_declarations))
            
        if fields_app_store_review_details is not None:
            
            _query_params.append(('fields[appStoreReviewDetails]', fields_app_store_review_details))
            
        if fields_builds is not None:
            
            _query_params.append(('fields[builds]', fields_builds))
            
        if fields_app_store_version_submissions is not None:
            
            _query_params.append(('fields[appStoreVersionSubmissions]', fields_app_store_version_submissions))
            
        if limit_app_store_version_localizations is not None:
            
            _query_params.append(('limit[appStoreVersionLocalizations]', limit_app_store_version_localizations))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/appStoreVersions/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def app_store_versions_idfa_declaration_get_to_one_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_idfa_declarations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type idfaDeclarations")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> IdfaDeclarationResponse:
        """app_store_versions_idfa_declaration_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_idfa_declarations: the fields to include for returned resources of type idfaDeclarations
        :type fields_idfa_declarations: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_idfa_declaration_get_to_one_related_serialize(
            id=id,
            fields_idfa_declarations=fields_idfa_declarations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IdfaDeclarationResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def app_store_versions_idfa_declaration_get_to_one_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_idfa_declarations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type idfaDeclarations")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[IdfaDeclarationResponse]:
        """app_store_versions_idfa_declaration_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_idfa_declarations: the fields to include for returned resources of type idfaDeclarations
        :type fields_idfa_declarations: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_idfa_declaration_get_to_one_related_serialize(
            id=id,
            fields_idfa_declarations=fields_idfa_declarations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IdfaDeclarationResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def app_store_versions_idfa_declaration_get_to_one_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_idfa_declarations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type idfaDeclarations")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """app_store_versions_idfa_declaration_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_idfa_declarations: the fields to include for returned resources of type idfaDeclarations
        :type fields_idfa_declarations: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_idfa_declaration_get_to_one_related_serialize(
            id=id,
            fields_idfa_declarations=fields_idfa_declarations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IdfaDeclarationResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _app_store_versions_idfa_declaration_get_to_one_related_serialize(
        self,
        id,
        fields_idfa_declarations,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[idfaDeclarations]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_idfa_declarations is not None:
            
            _query_params.append(('fields[idfaDeclarations]', fields_idfa_declarations))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/appStoreVersions/{id}/idfaDeclaration',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def app_store_versions_routing_app_coverage_get_to_one_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_routing_app_coverages: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type routingAppCoverages")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RoutingAppCoverageResponse:
        """app_store_versions_routing_app_coverage_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_routing_app_coverages: the fields to include for returned resources of type routingAppCoverages
        :type fields_routing_app_coverages: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_routing_app_coverage_get_to_one_related_serialize(
            id=id,
            fields_routing_app_coverages=fields_routing_app_coverages,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RoutingAppCoverageResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def app_store_versions_routing_app_coverage_get_to_one_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_routing_app_coverages: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type routingAppCoverages")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RoutingAppCoverageResponse]:
        """app_store_versions_routing_app_coverage_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_routing_app_coverages: the fields to include for returned resources of type routingAppCoverages
        :type fields_routing_app_coverages: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_routing_app_coverage_get_to_one_related_serialize(
            id=id,
            fields_routing_app_coverages=fields_routing_app_coverages,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RoutingAppCoverageResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def app_store_versions_routing_app_coverage_get_to_one_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_routing_app_coverages: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type routingAppCoverages")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """app_store_versions_routing_app_coverage_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_routing_app_coverages: the fields to include for returned resources of type routingAppCoverages
        :type fields_routing_app_coverages: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_routing_app_coverage_get_to_one_related_serialize(
            id=id,
            fields_routing_app_coverages=fields_routing_app_coverages,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RoutingAppCoverageResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _app_store_versions_routing_app_coverage_get_to_one_related_serialize(
        self,
        id,
        fields_routing_app_coverages,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[routingAppCoverages]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_routing_app_coverages is not None:
            
            _query_params.append(('fields[routingAppCoverages]', fields_routing_app_coverages))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/appStoreVersions/{id}/routingAppCoverage',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def app_store_versions_update_instance(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        app_store_version_update_request: Annotated[AppStoreVersionUpdateRequest, Field(description="AppStoreVersion representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AppStoreVersionResponse:
        """app_store_versions_update_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param app_store_version_update_request: AppStoreVersion representation (required)
        :type app_store_version_update_request: AppStoreVersionUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_update_instance_serialize(
            id=id,
            app_store_version_update_request=app_store_version_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppStoreVersionResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def app_store_versions_update_instance_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        app_store_version_update_request: Annotated[AppStoreVersionUpdateRequest, Field(description="AppStoreVersion representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AppStoreVersionResponse]:
        """app_store_versions_update_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param app_store_version_update_request: AppStoreVersion representation (required)
        :type app_store_version_update_request: AppStoreVersionUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_update_instance_serialize(
            id=id,
            app_store_version_update_request=app_store_version_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppStoreVersionResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def app_store_versions_update_instance_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        app_store_version_update_request: Annotated[AppStoreVersionUpdateRequest, Field(description="AppStoreVersion representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """app_store_versions_update_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param app_store_version_update_request: AppStoreVersion representation (required)
        :type app_store_version_update_request: AppStoreVersionUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_store_versions_update_instance_serialize(
            id=id,
            app_store_version_update_request=app_store_version_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppStoreVersionResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _app_store_versions_update_instance_serialize(
        self,
        id,
        app_store_version_update_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if app_store_version_update_request is not None:
            _body_params = app_store_version_update_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/v1/appStoreVersions/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



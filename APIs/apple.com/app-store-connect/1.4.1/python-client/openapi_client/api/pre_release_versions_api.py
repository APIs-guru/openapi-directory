# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.app_response import AppResponse
from openapi_client.models.builds_response import BuildsResponse
from openapi_client.models.pre_release_versions_response import PreReleaseVersionsResponse
from openapi_client.models.prerelease_version_response import PrereleaseVersionResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class PreReleaseVersionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def pre_release_versions_app_get_to_one_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AppResponse:
        """pre_release_versions_app_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pre_release_versions_app_get_to_one_related_serialize(
            id=id,
            fields_apps=fields_apps,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def pre_release_versions_app_get_to_one_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AppResponse]:
        """pre_release_versions_app_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pre_release_versions_app_get_to_one_related_serialize(
            id=id,
            fields_apps=fields_apps,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def pre_release_versions_app_get_to_one_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """pre_release_versions_app_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pre_release_versions_app_get_to_one_related_serialize(
            id=id,
            fields_apps=fields_apps,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _pre_release_versions_app_get_to_one_related_serialize(
        self,
        id,
        fields_apps,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[apps]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_apps is not None:
            
            _query_params.append(('fields[apps]', fields_apps))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/preReleaseVersions/{id}/app',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def pre_release_versions_builds_get_to_many_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BuildsResponse:
        """pre_release_versions_builds_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pre_release_versions_builds_get_to_many_related_serialize(
            id=id,
            fields_builds=fields_builds,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BuildsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def pre_release_versions_builds_get_to_many_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BuildsResponse]:
        """pre_release_versions_builds_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pre_release_versions_builds_get_to_many_related_serialize(
            id=id,
            fields_builds=fields_builds,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BuildsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def pre_release_versions_builds_get_to_many_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """pre_release_versions_builds_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pre_release_versions_builds_get_to_many_related_serialize(
            id=id,
            fields_builds=fields_builds,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BuildsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _pre_release_versions_builds_get_to_many_related_serialize(
        self,
        id,
        fields_builds,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[builds]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_builds is not None:
            
            _query_params.append(('fields[builds]', fields_builds))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/preReleaseVersions/{id}/builds',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def pre_release_versions_get_collection(
        self,
        filter_builds_expired: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'builds.expired'")] = None,
        filter_builds_processing_state: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'builds.processingState'")] = None,
        filter_platform: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'platform'")] = None,
        filter_version: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'version'")] = None,
        filter_app: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s) of related 'app'")] = None,
        filter_builds: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s) of related 'builds'")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; resources will be sorted as specified")] = None,
        fields_pre_release_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type preReleaseVersions")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        limit_builds: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related builds returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PreReleaseVersionsResponse:
        """pre_release_versions_get_collection


        :param filter_builds_expired: filter by attribute 'builds.expired'
        :type filter_builds_expired: List[str]
        :param filter_builds_processing_state: filter by attribute 'builds.processingState'
        :type filter_builds_processing_state: List[str]
        :param filter_platform: filter by attribute 'platform'
        :type filter_platform: List[str]
        :param filter_version: filter by attribute 'version'
        :type filter_version: List[str]
        :param filter_app: filter by id(s) of related 'app'
        :type filter_app: List[str]
        :param filter_builds: filter by id(s) of related 'builds'
        :type filter_builds: List[str]
        :param sort: comma-separated list of sort expressions; resources will be sorted as specified
        :type sort: List[str]
        :param fields_pre_release_versions: the fields to include for returned resources of type preReleaseVersions
        :type fields_pre_release_versions: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param limit_builds: maximum number of related builds returned (when they are included)
        :type limit_builds: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pre_release_versions_get_collection_serialize(
            filter_builds_expired=filter_builds_expired,
            filter_builds_processing_state=filter_builds_processing_state,
            filter_platform=filter_platform,
            filter_version=filter_version,
            filter_app=filter_app,
            filter_builds=filter_builds,
            sort=sort,
            fields_pre_release_versions=fields_pre_release_versions,
            limit=limit,
            include=include,
            fields_builds=fields_builds,
            fields_apps=fields_apps,
            limit_builds=limit_builds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PreReleaseVersionsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def pre_release_versions_get_collection_with_http_info(
        self,
        filter_builds_expired: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'builds.expired'")] = None,
        filter_builds_processing_state: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'builds.processingState'")] = None,
        filter_platform: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'platform'")] = None,
        filter_version: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'version'")] = None,
        filter_app: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s) of related 'app'")] = None,
        filter_builds: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s) of related 'builds'")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; resources will be sorted as specified")] = None,
        fields_pre_release_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type preReleaseVersions")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        limit_builds: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related builds returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PreReleaseVersionsResponse]:
        """pre_release_versions_get_collection


        :param filter_builds_expired: filter by attribute 'builds.expired'
        :type filter_builds_expired: List[str]
        :param filter_builds_processing_state: filter by attribute 'builds.processingState'
        :type filter_builds_processing_state: List[str]
        :param filter_platform: filter by attribute 'platform'
        :type filter_platform: List[str]
        :param filter_version: filter by attribute 'version'
        :type filter_version: List[str]
        :param filter_app: filter by id(s) of related 'app'
        :type filter_app: List[str]
        :param filter_builds: filter by id(s) of related 'builds'
        :type filter_builds: List[str]
        :param sort: comma-separated list of sort expressions; resources will be sorted as specified
        :type sort: List[str]
        :param fields_pre_release_versions: the fields to include for returned resources of type preReleaseVersions
        :type fields_pre_release_versions: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param limit_builds: maximum number of related builds returned (when they are included)
        :type limit_builds: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pre_release_versions_get_collection_serialize(
            filter_builds_expired=filter_builds_expired,
            filter_builds_processing_state=filter_builds_processing_state,
            filter_platform=filter_platform,
            filter_version=filter_version,
            filter_app=filter_app,
            filter_builds=filter_builds,
            sort=sort,
            fields_pre_release_versions=fields_pre_release_versions,
            limit=limit,
            include=include,
            fields_builds=fields_builds,
            fields_apps=fields_apps,
            limit_builds=limit_builds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PreReleaseVersionsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def pre_release_versions_get_collection_without_preload_content(
        self,
        filter_builds_expired: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'builds.expired'")] = None,
        filter_builds_processing_state: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'builds.processingState'")] = None,
        filter_platform: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'platform'")] = None,
        filter_version: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'version'")] = None,
        filter_app: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s) of related 'app'")] = None,
        filter_builds: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s) of related 'builds'")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; resources will be sorted as specified")] = None,
        fields_pre_release_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type preReleaseVersions")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        limit_builds: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related builds returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """pre_release_versions_get_collection


        :param filter_builds_expired: filter by attribute 'builds.expired'
        :type filter_builds_expired: List[str]
        :param filter_builds_processing_state: filter by attribute 'builds.processingState'
        :type filter_builds_processing_state: List[str]
        :param filter_platform: filter by attribute 'platform'
        :type filter_platform: List[str]
        :param filter_version: filter by attribute 'version'
        :type filter_version: List[str]
        :param filter_app: filter by id(s) of related 'app'
        :type filter_app: List[str]
        :param filter_builds: filter by id(s) of related 'builds'
        :type filter_builds: List[str]
        :param sort: comma-separated list of sort expressions; resources will be sorted as specified
        :type sort: List[str]
        :param fields_pre_release_versions: the fields to include for returned resources of type preReleaseVersions
        :type fields_pre_release_versions: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param limit_builds: maximum number of related builds returned (when they are included)
        :type limit_builds: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pre_release_versions_get_collection_serialize(
            filter_builds_expired=filter_builds_expired,
            filter_builds_processing_state=filter_builds_processing_state,
            filter_platform=filter_platform,
            filter_version=filter_version,
            filter_app=filter_app,
            filter_builds=filter_builds,
            sort=sort,
            fields_pre_release_versions=fields_pre_release_versions,
            limit=limit,
            include=include,
            fields_builds=fields_builds,
            fields_apps=fields_apps,
            limit_builds=limit_builds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PreReleaseVersionsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _pre_release_versions_get_collection_serialize(
        self,
        filter_builds_expired,
        filter_builds_processing_state,
        filter_platform,
        filter_version,
        filter_app,
        filter_builds,
        sort,
        fields_pre_release_versions,
        limit,
        include,
        fields_builds,
        fields_apps,
        limit_builds,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filter[builds.expired]': 'csv',
            'filter[builds.processingState]': 'csv',
            'filter[platform]': 'csv',
            'filter[version]': 'csv',
            'filter[app]': 'csv',
            'filter[builds]': 'csv',
            'sort': 'csv',
            'fields[preReleaseVersions]': 'csv',
            'include': 'csv',
            'fields[builds]': 'csv',
            'fields[apps]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if filter_builds_expired is not None:
            
            _query_params.append(('filter[builds.expired]', filter_builds_expired))
            
        if filter_builds_processing_state is not None:
            
            _query_params.append(('filter[builds.processingState]', filter_builds_processing_state))
            
        if filter_platform is not None:
            
            _query_params.append(('filter[platform]', filter_platform))
            
        if filter_version is not None:
            
            _query_params.append(('filter[version]', filter_version))
            
        if filter_app is not None:
            
            _query_params.append(('filter[app]', filter_app))
            
        if filter_builds is not None:
            
            _query_params.append(('filter[builds]', filter_builds))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if fields_pre_release_versions is not None:
            
            _query_params.append(('fields[preReleaseVersions]', fields_pre_release_versions))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        if fields_builds is not None:
            
            _query_params.append(('fields[builds]', fields_builds))
            
        if fields_apps is not None:
            
            _query_params.append(('fields[apps]', fields_apps))
            
        if limit_builds is not None:
            
            _query_params.append(('limit[builds]', limit_builds))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/preReleaseVersions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def pre_release_versions_get_instance(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_pre_release_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type preReleaseVersions")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        limit_builds: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related builds returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PrereleaseVersionResponse:
        """pre_release_versions_get_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_pre_release_versions: the fields to include for returned resources of type preReleaseVersions
        :type fields_pre_release_versions: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param limit_builds: maximum number of related builds returned (when they are included)
        :type limit_builds: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pre_release_versions_get_instance_serialize(
            id=id,
            fields_pre_release_versions=fields_pre_release_versions,
            include=include,
            fields_builds=fields_builds,
            fields_apps=fields_apps,
            limit_builds=limit_builds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PrereleaseVersionResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def pre_release_versions_get_instance_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_pre_release_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type preReleaseVersions")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        limit_builds: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related builds returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PrereleaseVersionResponse]:
        """pre_release_versions_get_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_pre_release_versions: the fields to include for returned resources of type preReleaseVersions
        :type fields_pre_release_versions: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param limit_builds: maximum number of related builds returned (when they are included)
        :type limit_builds: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pre_release_versions_get_instance_serialize(
            id=id,
            fields_pre_release_versions=fields_pre_release_versions,
            include=include,
            fields_builds=fields_builds,
            fields_apps=fields_apps,
            limit_builds=limit_builds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PrereleaseVersionResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def pre_release_versions_get_instance_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_pre_release_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type preReleaseVersions")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        limit_builds: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related builds returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """pre_release_versions_get_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_pre_release_versions: the fields to include for returned resources of type preReleaseVersions
        :type fields_pre_release_versions: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param limit_builds: maximum number of related builds returned (when they are included)
        :type limit_builds: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pre_release_versions_get_instance_serialize(
            id=id,
            fields_pre_release_versions=fields_pre_release_versions,
            include=include,
            fields_builds=fields_builds,
            fields_apps=fields_apps,
            limit_builds=limit_builds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PrereleaseVersionResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _pre_release_versions_get_instance_serialize(
        self,
        id,
        fields_pre_release_versions,
        include,
        fields_builds,
        fields_apps,
        limit_builds,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[preReleaseVersions]': 'csv',
            'include': 'csv',
            'fields[builds]': 'csv',
            'fields[apps]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_pre_release_versions is not None:
            
            _query_params.append(('fields[preReleaseVersions]', fields_pre_release_versions))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        if fields_builds is not None:
            
            _query_params.append(('fields[builds]', fields_builds))
            
        if fields_apps is not None:
            
            _query_params.append(('fields[apps]', fields_apps))
            
        if limit_builds is not None:
            
            _query_params.append(('limit[builds]', limit_builds))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/preReleaseVersions/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.app_beta_testers_linkages_request import AppBetaTestersLinkagesRequest
from openapi_client.models.app_infos_response import AppInfosResponse
from openapi_client.models.app_pre_order_response import AppPreOrderResponse
from openapi_client.models.app_prices_response import AppPricesResponse
from openapi_client.models.app_response import AppResponse
from openapi_client.models.app_store_versions_response import AppStoreVersionsResponse
from openapi_client.models.app_update_request import AppUpdateRequest
from openapi_client.models.apps_response import AppsResponse
from openapi_client.models.beta_app_localizations_response import BetaAppLocalizationsResponse
from openapi_client.models.beta_app_review_detail_response import BetaAppReviewDetailResponse
from openapi_client.models.beta_groups_response import BetaGroupsResponse
from openapi_client.models.beta_license_agreement_response import BetaLicenseAgreementResponse
from openapi_client.models.builds_response import BuildsResponse
from openapi_client.models.end_user_license_agreement_response import EndUserLicenseAgreementResponse
from openapi_client.models.game_center_enabled_versions_response import GameCenterEnabledVersionsResponse
from openapi_client.models.in_app_purchases_response import InAppPurchasesResponse
from openapi_client.models.perf_power_metrics_response import PerfPowerMetricsResponse
from openapi_client.models.pre_release_versions_response import PreReleaseVersionsResponse
from openapi_client.models.territories_response import TerritoriesResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class AppsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def apps_app_infos_get_to_many_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_age_rating_declarations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type ageRatingDeclarations")] = None,
        fields_app_infos: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appInfos")] = None,
        fields_app_categories: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appCategories")] = None,
        fields_app_info_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appInfoLocalizations")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AppInfosResponse:
        """apps_app_infos_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_age_rating_declarations: the fields to include for returned resources of type ageRatingDeclarations
        :type fields_age_rating_declarations: List[str]
        :param fields_app_infos: the fields to include for returned resources of type appInfos
        :type fields_app_infos: List[str]
        :param fields_app_categories: the fields to include for returned resources of type appCategories
        :type fields_app_categories: List[str]
        :param fields_app_info_localizations: the fields to include for returned resources of type appInfoLocalizations
        :type fields_app_info_localizations: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_app_infos_get_to_many_related_serialize(
            id=id,
            fields_age_rating_declarations=fields_age_rating_declarations,
            fields_app_infos=fields_app_infos,
            fields_app_categories=fields_app_categories,
            fields_app_info_localizations=fields_app_info_localizations,
            fields_apps=fields_apps,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppInfosResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def apps_app_infos_get_to_many_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_age_rating_declarations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type ageRatingDeclarations")] = None,
        fields_app_infos: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appInfos")] = None,
        fields_app_categories: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appCategories")] = None,
        fields_app_info_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appInfoLocalizations")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AppInfosResponse]:
        """apps_app_infos_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_age_rating_declarations: the fields to include for returned resources of type ageRatingDeclarations
        :type fields_age_rating_declarations: List[str]
        :param fields_app_infos: the fields to include for returned resources of type appInfos
        :type fields_app_infos: List[str]
        :param fields_app_categories: the fields to include for returned resources of type appCategories
        :type fields_app_categories: List[str]
        :param fields_app_info_localizations: the fields to include for returned resources of type appInfoLocalizations
        :type fields_app_info_localizations: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_app_infos_get_to_many_related_serialize(
            id=id,
            fields_age_rating_declarations=fields_age_rating_declarations,
            fields_app_infos=fields_app_infos,
            fields_app_categories=fields_app_categories,
            fields_app_info_localizations=fields_app_info_localizations,
            fields_apps=fields_apps,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppInfosResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def apps_app_infos_get_to_many_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_age_rating_declarations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type ageRatingDeclarations")] = None,
        fields_app_infos: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appInfos")] = None,
        fields_app_categories: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appCategories")] = None,
        fields_app_info_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appInfoLocalizations")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """apps_app_infos_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_age_rating_declarations: the fields to include for returned resources of type ageRatingDeclarations
        :type fields_age_rating_declarations: List[str]
        :param fields_app_infos: the fields to include for returned resources of type appInfos
        :type fields_app_infos: List[str]
        :param fields_app_categories: the fields to include for returned resources of type appCategories
        :type fields_app_categories: List[str]
        :param fields_app_info_localizations: the fields to include for returned resources of type appInfoLocalizations
        :type fields_app_info_localizations: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_app_infos_get_to_many_related_serialize(
            id=id,
            fields_age_rating_declarations=fields_age_rating_declarations,
            fields_app_infos=fields_app_infos,
            fields_app_categories=fields_app_categories,
            fields_app_info_localizations=fields_app_info_localizations,
            fields_apps=fields_apps,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppInfosResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _apps_app_infos_get_to_many_related_serialize(
        self,
        id,
        fields_age_rating_declarations,
        fields_app_infos,
        fields_app_categories,
        fields_app_info_localizations,
        fields_apps,
        limit,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[ageRatingDeclarations]': 'csv',
            'fields[appInfos]': 'csv',
            'fields[appCategories]': 'csv',
            'fields[appInfoLocalizations]': 'csv',
            'fields[apps]': 'csv',
            'include': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_age_rating_declarations is not None:
            
            _query_params.append(('fields[ageRatingDeclarations]', fields_age_rating_declarations))
            
        if fields_app_infos is not None:
            
            _query_params.append(('fields[appInfos]', fields_app_infos))
            
        if fields_app_categories is not None:
            
            _query_params.append(('fields[appCategories]', fields_app_categories))
            
        if fields_app_info_localizations is not None:
            
            _query_params.append(('fields[appInfoLocalizations]', fields_app_info_localizations))
            
        if fields_apps is not None:
            
            _query_params.append(('fields[apps]', fields_apps))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{id}/appInfos',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def apps_app_store_versions_get_to_many_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_app_store_state: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'appStoreState'")] = None,
        filter_platform: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'platform'")] = None,
        filter_version_string: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'versionString'")] = None,
        filter_id: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s)")] = None,
        fields_idfa_declarations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type idfaDeclarations")] = None,
        fields_app_store_version_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionLocalizations")] = None,
        fields_routing_app_coverages: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type routingAppCoverages")] = None,
        fields_app_store_version_phased_releases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionPhasedReleases")] = None,
        fields_age_rating_declarations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type ageRatingDeclarations")] = None,
        fields_app_store_review_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreReviewDetails")] = None,
        fields_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersions")] = None,
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        fields_app_store_version_submissions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionSubmissions")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AppStoreVersionsResponse:
        """apps_app_store_versions_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_app_store_state: filter by attribute 'appStoreState'
        :type filter_app_store_state: List[str]
        :param filter_platform: filter by attribute 'platform'
        :type filter_platform: List[str]
        :param filter_version_string: filter by attribute 'versionString'
        :type filter_version_string: List[str]
        :param filter_id: filter by id(s)
        :type filter_id: List[str]
        :param fields_idfa_declarations: the fields to include for returned resources of type idfaDeclarations
        :type fields_idfa_declarations: List[str]
        :param fields_app_store_version_localizations: the fields to include for returned resources of type appStoreVersionLocalizations
        :type fields_app_store_version_localizations: List[str]
        :param fields_routing_app_coverages: the fields to include for returned resources of type routingAppCoverages
        :type fields_routing_app_coverages: List[str]
        :param fields_app_store_version_phased_releases: the fields to include for returned resources of type appStoreVersionPhasedReleases
        :type fields_app_store_version_phased_releases: List[str]
        :param fields_age_rating_declarations: the fields to include for returned resources of type ageRatingDeclarations
        :type fields_age_rating_declarations: List[str]
        :param fields_app_store_review_details: the fields to include for returned resources of type appStoreReviewDetails
        :type fields_app_store_review_details: List[str]
        :param fields_app_store_versions: the fields to include for returned resources of type appStoreVersions
        :type fields_app_store_versions: List[str]
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param fields_app_store_version_submissions: the fields to include for returned resources of type appStoreVersionSubmissions
        :type fields_app_store_version_submissions: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_app_store_versions_get_to_many_related_serialize(
            id=id,
            filter_app_store_state=filter_app_store_state,
            filter_platform=filter_platform,
            filter_version_string=filter_version_string,
            filter_id=filter_id,
            fields_idfa_declarations=fields_idfa_declarations,
            fields_app_store_version_localizations=fields_app_store_version_localizations,
            fields_routing_app_coverages=fields_routing_app_coverages,
            fields_app_store_version_phased_releases=fields_app_store_version_phased_releases,
            fields_age_rating_declarations=fields_age_rating_declarations,
            fields_app_store_review_details=fields_app_store_review_details,
            fields_app_store_versions=fields_app_store_versions,
            fields_builds=fields_builds,
            fields_app_store_version_submissions=fields_app_store_version_submissions,
            fields_apps=fields_apps,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppStoreVersionsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def apps_app_store_versions_get_to_many_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_app_store_state: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'appStoreState'")] = None,
        filter_platform: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'platform'")] = None,
        filter_version_string: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'versionString'")] = None,
        filter_id: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s)")] = None,
        fields_idfa_declarations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type idfaDeclarations")] = None,
        fields_app_store_version_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionLocalizations")] = None,
        fields_routing_app_coverages: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type routingAppCoverages")] = None,
        fields_app_store_version_phased_releases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionPhasedReleases")] = None,
        fields_age_rating_declarations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type ageRatingDeclarations")] = None,
        fields_app_store_review_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreReviewDetails")] = None,
        fields_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersions")] = None,
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        fields_app_store_version_submissions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionSubmissions")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AppStoreVersionsResponse]:
        """apps_app_store_versions_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_app_store_state: filter by attribute 'appStoreState'
        :type filter_app_store_state: List[str]
        :param filter_platform: filter by attribute 'platform'
        :type filter_platform: List[str]
        :param filter_version_string: filter by attribute 'versionString'
        :type filter_version_string: List[str]
        :param filter_id: filter by id(s)
        :type filter_id: List[str]
        :param fields_idfa_declarations: the fields to include for returned resources of type idfaDeclarations
        :type fields_idfa_declarations: List[str]
        :param fields_app_store_version_localizations: the fields to include for returned resources of type appStoreVersionLocalizations
        :type fields_app_store_version_localizations: List[str]
        :param fields_routing_app_coverages: the fields to include for returned resources of type routingAppCoverages
        :type fields_routing_app_coverages: List[str]
        :param fields_app_store_version_phased_releases: the fields to include for returned resources of type appStoreVersionPhasedReleases
        :type fields_app_store_version_phased_releases: List[str]
        :param fields_age_rating_declarations: the fields to include for returned resources of type ageRatingDeclarations
        :type fields_age_rating_declarations: List[str]
        :param fields_app_store_review_details: the fields to include for returned resources of type appStoreReviewDetails
        :type fields_app_store_review_details: List[str]
        :param fields_app_store_versions: the fields to include for returned resources of type appStoreVersions
        :type fields_app_store_versions: List[str]
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param fields_app_store_version_submissions: the fields to include for returned resources of type appStoreVersionSubmissions
        :type fields_app_store_version_submissions: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_app_store_versions_get_to_many_related_serialize(
            id=id,
            filter_app_store_state=filter_app_store_state,
            filter_platform=filter_platform,
            filter_version_string=filter_version_string,
            filter_id=filter_id,
            fields_idfa_declarations=fields_idfa_declarations,
            fields_app_store_version_localizations=fields_app_store_version_localizations,
            fields_routing_app_coverages=fields_routing_app_coverages,
            fields_app_store_version_phased_releases=fields_app_store_version_phased_releases,
            fields_age_rating_declarations=fields_age_rating_declarations,
            fields_app_store_review_details=fields_app_store_review_details,
            fields_app_store_versions=fields_app_store_versions,
            fields_builds=fields_builds,
            fields_app_store_version_submissions=fields_app_store_version_submissions,
            fields_apps=fields_apps,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppStoreVersionsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def apps_app_store_versions_get_to_many_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_app_store_state: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'appStoreState'")] = None,
        filter_platform: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'platform'")] = None,
        filter_version_string: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'versionString'")] = None,
        filter_id: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s)")] = None,
        fields_idfa_declarations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type idfaDeclarations")] = None,
        fields_app_store_version_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionLocalizations")] = None,
        fields_routing_app_coverages: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type routingAppCoverages")] = None,
        fields_app_store_version_phased_releases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionPhasedReleases")] = None,
        fields_age_rating_declarations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type ageRatingDeclarations")] = None,
        fields_app_store_review_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreReviewDetails")] = None,
        fields_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersions")] = None,
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        fields_app_store_version_submissions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersionSubmissions")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """apps_app_store_versions_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_app_store_state: filter by attribute 'appStoreState'
        :type filter_app_store_state: List[str]
        :param filter_platform: filter by attribute 'platform'
        :type filter_platform: List[str]
        :param filter_version_string: filter by attribute 'versionString'
        :type filter_version_string: List[str]
        :param filter_id: filter by id(s)
        :type filter_id: List[str]
        :param fields_idfa_declarations: the fields to include for returned resources of type idfaDeclarations
        :type fields_idfa_declarations: List[str]
        :param fields_app_store_version_localizations: the fields to include for returned resources of type appStoreVersionLocalizations
        :type fields_app_store_version_localizations: List[str]
        :param fields_routing_app_coverages: the fields to include for returned resources of type routingAppCoverages
        :type fields_routing_app_coverages: List[str]
        :param fields_app_store_version_phased_releases: the fields to include for returned resources of type appStoreVersionPhasedReleases
        :type fields_app_store_version_phased_releases: List[str]
        :param fields_age_rating_declarations: the fields to include for returned resources of type ageRatingDeclarations
        :type fields_age_rating_declarations: List[str]
        :param fields_app_store_review_details: the fields to include for returned resources of type appStoreReviewDetails
        :type fields_app_store_review_details: List[str]
        :param fields_app_store_versions: the fields to include for returned resources of type appStoreVersions
        :type fields_app_store_versions: List[str]
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param fields_app_store_version_submissions: the fields to include for returned resources of type appStoreVersionSubmissions
        :type fields_app_store_version_submissions: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_app_store_versions_get_to_many_related_serialize(
            id=id,
            filter_app_store_state=filter_app_store_state,
            filter_platform=filter_platform,
            filter_version_string=filter_version_string,
            filter_id=filter_id,
            fields_idfa_declarations=fields_idfa_declarations,
            fields_app_store_version_localizations=fields_app_store_version_localizations,
            fields_routing_app_coverages=fields_routing_app_coverages,
            fields_app_store_version_phased_releases=fields_app_store_version_phased_releases,
            fields_age_rating_declarations=fields_age_rating_declarations,
            fields_app_store_review_details=fields_app_store_review_details,
            fields_app_store_versions=fields_app_store_versions,
            fields_builds=fields_builds,
            fields_app_store_version_submissions=fields_app_store_version_submissions,
            fields_apps=fields_apps,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppStoreVersionsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _apps_app_store_versions_get_to_many_related_serialize(
        self,
        id,
        filter_app_store_state,
        filter_platform,
        filter_version_string,
        filter_id,
        fields_idfa_declarations,
        fields_app_store_version_localizations,
        fields_routing_app_coverages,
        fields_app_store_version_phased_releases,
        fields_age_rating_declarations,
        fields_app_store_review_details,
        fields_app_store_versions,
        fields_builds,
        fields_app_store_version_submissions,
        fields_apps,
        limit,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filter[appStoreState]': 'csv',
            'filter[platform]': 'csv',
            'filter[versionString]': 'csv',
            'filter[id]': 'csv',
            'fields[idfaDeclarations]': 'csv',
            'fields[appStoreVersionLocalizations]': 'csv',
            'fields[routingAppCoverages]': 'csv',
            'fields[appStoreVersionPhasedReleases]': 'csv',
            'fields[ageRatingDeclarations]': 'csv',
            'fields[appStoreReviewDetails]': 'csv',
            'fields[appStoreVersions]': 'csv',
            'fields[builds]': 'csv',
            'fields[appStoreVersionSubmissions]': 'csv',
            'fields[apps]': 'csv',
            'include': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if filter_app_store_state is not None:
            
            _query_params.append(('filter[appStoreState]', filter_app_store_state))
            
        if filter_platform is not None:
            
            _query_params.append(('filter[platform]', filter_platform))
            
        if filter_version_string is not None:
            
            _query_params.append(('filter[versionString]', filter_version_string))
            
        if filter_id is not None:
            
            _query_params.append(('filter[id]', filter_id))
            
        if fields_idfa_declarations is not None:
            
            _query_params.append(('fields[idfaDeclarations]', fields_idfa_declarations))
            
        if fields_app_store_version_localizations is not None:
            
            _query_params.append(('fields[appStoreVersionLocalizations]', fields_app_store_version_localizations))
            
        if fields_routing_app_coverages is not None:
            
            _query_params.append(('fields[routingAppCoverages]', fields_routing_app_coverages))
            
        if fields_app_store_version_phased_releases is not None:
            
            _query_params.append(('fields[appStoreVersionPhasedReleases]', fields_app_store_version_phased_releases))
            
        if fields_age_rating_declarations is not None:
            
            _query_params.append(('fields[ageRatingDeclarations]', fields_age_rating_declarations))
            
        if fields_app_store_review_details is not None:
            
            _query_params.append(('fields[appStoreReviewDetails]', fields_app_store_review_details))
            
        if fields_app_store_versions is not None:
            
            _query_params.append(('fields[appStoreVersions]', fields_app_store_versions))
            
        if fields_builds is not None:
            
            _query_params.append(('fields[builds]', fields_builds))
            
        if fields_app_store_version_submissions is not None:
            
            _query_params.append(('fields[appStoreVersionSubmissions]', fields_app_store_version_submissions))
            
        if fields_apps is not None:
            
            _query_params.append(('fields[apps]', fields_apps))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{id}/appStoreVersions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def apps_available_territories_get_to_many_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_territories: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type territories")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TerritoriesResponse:
        """apps_available_territories_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_territories: the fields to include for returned resources of type territories
        :type fields_territories: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_available_territories_get_to_many_related_serialize(
            id=id,
            fields_territories=fields_territories,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TerritoriesResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def apps_available_territories_get_to_many_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_territories: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type territories")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TerritoriesResponse]:
        """apps_available_territories_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_territories: the fields to include for returned resources of type territories
        :type fields_territories: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_available_territories_get_to_many_related_serialize(
            id=id,
            fields_territories=fields_territories,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TerritoriesResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def apps_available_territories_get_to_many_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_territories: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type territories")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """apps_available_territories_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_territories: the fields to include for returned resources of type territories
        :type fields_territories: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_available_territories_get_to_many_related_serialize(
            id=id,
            fields_territories=fields_territories,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TerritoriesResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _apps_available_territories_get_to_many_related_serialize(
        self,
        id,
        fields_territories,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[territories]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_territories is not None:
            
            _query_params.append(('fields[territories]', fields_territories))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{id}/availableTerritories',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def apps_beta_app_localizations_get_to_many_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_beta_app_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaAppLocalizations")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BetaAppLocalizationsResponse:
        """apps_beta_app_localizations_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_beta_app_localizations: the fields to include for returned resources of type betaAppLocalizations
        :type fields_beta_app_localizations: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_beta_app_localizations_get_to_many_related_serialize(
            id=id,
            fields_beta_app_localizations=fields_beta_app_localizations,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BetaAppLocalizationsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def apps_beta_app_localizations_get_to_many_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_beta_app_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaAppLocalizations")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BetaAppLocalizationsResponse]:
        """apps_beta_app_localizations_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_beta_app_localizations: the fields to include for returned resources of type betaAppLocalizations
        :type fields_beta_app_localizations: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_beta_app_localizations_get_to_many_related_serialize(
            id=id,
            fields_beta_app_localizations=fields_beta_app_localizations,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BetaAppLocalizationsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def apps_beta_app_localizations_get_to_many_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_beta_app_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaAppLocalizations")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """apps_beta_app_localizations_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_beta_app_localizations: the fields to include for returned resources of type betaAppLocalizations
        :type fields_beta_app_localizations: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_beta_app_localizations_get_to_many_related_serialize(
            id=id,
            fields_beta_app_localizations=fields_beta_app_localizations,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BetaAppLocalizationsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _apps_beta_app_localizations_get_to_many_related_serialize(
        self,
        id,
        fields_beta_app_localizations,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[betaAppLocalizations]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_beta_app_localizations is not None:
            
            _query_params.append(('fields[betaAppLocalizations]', fields_beta_app_localizations))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{id}/betaAppLocalizations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def apps_beta_app_review_detail_get_to_one_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_beta_app_review_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaAppReviewDetails")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BetaAppReviewDetailResponse:
        """apps_beta_app_review_detail_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_beta_app_review_details: the fields to include for returned resources of type betaAppReviewDetails
        :type fields_beta_app_review_details: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_beta_app_review_detail_get_to_one_related_serialize(
            id=id,
            fields_beta_app_review_details=fields_beta_app_review_details,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BetaAppReviewDetailResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def apps_beta_app_review_detail_get_to_one_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_beta_app_review_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaAppReviewDetails")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BetaAppReviewDetailResponse]:
        """apps_beta_app_review_detail_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_beta_app_review_details: the fields to include for returned resources of type betaAppReviewDetails
        :type fields_beta_app_review_details: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_beta_app_review_detail_get_to_one_related_serialize(
            id=id,
            fields_beta_app_review_details=fields_beta_app_review_details,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BetaAppReviewDetailResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def apps_beta_app_review_detail_get_to_one_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_beta_app_review_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaAppReviewDetails")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """apps_beta_app_review_detail_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_beta_app_review_details: the fields to include for returned resources of type betaAppReviewDetails
        :type fields_beta_app_review_details: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_beta_app_review_detail_get_to_one_related_serialize(
            id=id,
            fields_beta_app_review_details=fields_beta_app_review_details,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BetaAppReviewDetailResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _apps_beta_app_review_detail_get_to_one_related_serialize(
        self,
        id,
        fields_beta_app_review_details,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[betaAppReviewDetails]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_beta_app_review_details is not None:
            
            _query_params.append(('fields[betaAppReviewDetails]', fields_beta_app_review_details))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{id}/betaAppReviewDetail',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def apps_beta_groups_get_to_many_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_beta_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaGroups")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BetaGroupsResponse:
        """apps_beta_groups_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_beta_groups: the fields to include for returned resources of type betaGroups
        :type fields_beta_groups: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_beta_groups_get_to_many_related_serialize(
            id=id,
            fields_beta_groups=fields_beta_groups,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BetaGroupsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def apps_beta_groups_get_to_many_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_beta_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaGroups")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BetaGroupsResponse]:
        """apps_beta_groups_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_beta_groups: the fields to include for returned resources of type betaGroups
        :type fields_beta_groups: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_beta_groups_get_to_many_related_serialize(
            id=id,
            fields_beta_groups=fields_beta_groups,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BetaGroupsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def apps_beta_groups_get_to_many_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_beta_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaGroups")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """apps_beta_groups_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_beta_groups: the fields to include for returned resources of type betaGroups
        :type fields_beta_groups: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_beta_groups_get_to_many_related_serialize(
            id=id,
            fields_beta_groups=fields_beta_groups,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BetaGroupsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _apps_beta_groups_get_to_many_related_serialize(
        self,
        id,
        fields_beta_groups,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[betaGroups]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_beta_groups is not None:
            
            _query_params.append(('fields[betaGroups]', fields_beta_groups))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{id}/betaGroups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def apps_beta_license_agreement_get_to_one_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_beta_license_agreements: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaLicenseAgreements")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BetaLicenseAgreementResponse:
        """apps_beta_license_agreement_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_beta_license_agreements: the fields to include for returned resources of type betaLicenseAgreements
        :type fields_beta_license_agreements: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_beta_license_agreement_get_to_one_related_serialize(
            id=id,
            fields_beta_license_agreements=fields_beta_license_agreements,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BetaLicenseAgreementResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def apps_beta_license_agreement_get_to_one_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_beta_license_agreements: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaLicenseAgreements")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BetaLicenseAgreementResponse]:
        """apps_beta_license_agreement_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_beta_license_agreements: the fields to include for returned resources of type betaLicenseAgreements
        :type fields_beta_license_agreements: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_beta_license_agreement_get_to_one_related_serialize(
            id=id,
            fields_beta_license_agreements=fields_beta_license_agreements,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BetaLicenseAgreementResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def apps_beta_license_agreement_get_to_one_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_beta_license_agreements: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaLicenseAgreements")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """apps_beta_license_agreement_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_beta_license_agreements: the fields to include for returned resources of type betaLicenseAgreements
        :type fields_beta_license_agreements: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_beta_license_agreement_get_to_one_related_serialize(
            id=id,
            fields_beta_license_agreements=fields_beta_license_agreements,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BetaLicenseAgreementResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _apps_beta_license_agreement_get_to_one_related_serialize(
        self,
        id,
        fields_beta_license_agreements,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[betaLicenseAgreements]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_beta_license_agreements is not None:
            
            _query_params.append(('fields[betaLicenseAgreements]', fields_beta_license_agreements))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{id}/betaLicenseAgreement',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def apps_beta_testers_delete_to_many_relationship(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        app_beta_testers_linkages_request: Annotated[AppBetaTestersLinkagesRequest, Field(description="List of related linkages")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """apps_beta_testers_delete_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param app_beta_testers_linkages_request: List of related linkages (required)
        :type app_beta_testers_linkages_request: AppBetaTestersLinkagesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_beta_testers_delete_to_many_relationship_serialize(
            id=id,
            app_beta_testers_linkages_request=app_beta_testers_linkages_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def apps_beta_testers_delete_to_many_relationship_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        app_beta_testers_linkages_request: Annotated[AppBetaTestersLinkagesRequest, Field(description="List of related linkages")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """apps_beta_testers_delete_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param app_beta_testers_linkages_request: List of related linkages (required)
        :type app_beta_testers_linkages_request: AppBetaTestersLinkagesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_beta_testers_delete_to_many_relationship_serialize(
            id=id,
            app_beta_testers_linkages_request=app_beta_testers_linkages_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def apps_beta_testers_delete_to_many_relationship_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        app_beta_testers_linkages_request: Annotated[AppBetaTestersLinkagesRequest, Field(description="List of related linkages")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """apps_beta_testers_delete_to_many_relationship


        :param id: the id of the requested resource (required)
        :type id: str
        :param app_beta_testers_linkages_request: List of related linkages (required)
        :type app_beta_testers_linkages_request: AppBetaTestersLinkagesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_beta_testers_delete_to_many_relationship_serialize(
            id=id,
            app_beta_testers_linkages_request=app_beta_testers_linkages_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _apps_beta_testers_delete_to_many_relationship_serialize(
        self,
        id,
        app_beta_testers_linkages_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if app_beta_testers_linkages_request is not None:
            _body_params = app_beta_testers_linkages_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/apps/{id}/relationships/betaTesters',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def apps_builds_get_to_many_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BuildsResponse:
        """apps_builds_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_builds_get_to_many_related_serialize(
            id=id,
            fields_builds=fields_builds,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BuildsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def apps_builds_get_to_many_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BuildsResponse]:
        """apps_builds_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_builds_get_to_many_related_serialize(
            id=id,
            fields_builds=fields_builds,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BuildsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def apps_builds_get_to_many_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """apps_builds_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_builds_get_to_many_related_serialize(
            id=id,
            fields_builds=fields_builds,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BuildsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _apps_builds_get_to_many_related_serialize(
        self,
        id,
        fields_builds,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[builds]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_builds is not None:
            
            _query_params.append(('fields[builds]', fields_builds))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{id}/builds',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def apps_end_user_license_agreement_get_to_one_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_end_user_license_agreements: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type endUserLicenseAgreements")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> EndUserLicenseAgreementResponse:
        """apps_end_user_license_agreement_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_end_user_license_agreements: the fields to include for returned resources of type endUserLicenseAgreements
        :type fields_end_user_license_agreements: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_end_user_license_agreement_get_to_one_related_serialize(
            id=id,
            fields_end_user_license_agreements=fields_end_user_license_agreements,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EndUserLicenseAgreementResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def apps_end_user_license_agreement_get_to_one_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_end_user_license_agreements: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type endUserLicenseAgreements")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[EndUserLicenseAgreementResponse]:
        """apps_end_user_license_agreement_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_end_user_license_agreements: the fields to include for returned resources of type endUserLicenseAgreements
        :type fields_end_user_license_agreements: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_end_user_license_agreement_get_to_one_related_serialize(
            id=id,
            fields_end_user_license_agreements=fields_end_user_license_agreements,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EndUserLicenseAgreementResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def apps_end_user_license_agreement_get_to_one_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_end_user_license_agreements: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type endUserLicenseAgreements")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """apps_end_user_license_agreement_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_end_user_license_agreements: the fields to include for returned resources of type endUserLicenseAgreements
        :type fields_end_user_license_agreements: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_end_user_license_agreement_get_to_one_related_serialize(
            id=id,
            fields_end_user_license_agreements=fields_end_user_license_agreements,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EndUserLicenseAgreementResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _apps_end_user_license_agreement_get_to_one_related_serialize(
        self,
        id,
        fields_end_user_license_agreements,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[endUserLicenseAgreements]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_end_user_license_agreements is not None:
            
            _query_params.append(('fields[endUserLicenseAgreements]', fields_end_user_license_agreements))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{id}/endUserLicenseAgreement',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def apps_game_center_enabled_versions_get_to_many_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_platform: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'platform'")] = None,
        filter_version_string: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'versionString'")] = None,
        filter_id: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s)")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; resources will be sorted as specified")] = None,
        fields_game_center_enabled_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterEnabledVersions")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GameCenterEnabledVersionsResponse:
        """apps_game_center_enabled_versions_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_platform: filter by attribute 'platform'
        :type filter_platform: List[str]
        :param filter_version_string: filter by attribute 'versionString'
        :type filter_version_string: List[str]
        :param filter_id: filter by id(s)
        :type filter_id: List[str]
        :param sort: comma-separated list of sort expressions; resources will be sorted as specified
        :type sort: List[str]
        :param fields_game_center_enabled_versions: the fields to include for returned resources of type gameCenterEnabledVersions
        :type fields_game_center_enabled_versions: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_game_center_enabled_versions_get_to_many_related_serialize(
            id=id,
            filter_platform=filter_platform,
            filter_version_string=filter_version_string,
            filter_id=filter_id,
            sort=sort,
            fields_game_center_enabled_versions=fields_game_center_enabled_versions,
            fields_apps=fields_apps,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GameCenterEnabledVersionsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def apps_game_center_enabled_versions_get_to_many_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_platform: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'platform'")] = None,
        filter_version_string: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'versionString'")] = None,
        filter_id: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s)")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; resources will be sorted as specified")] = None,
        fields_game_center_enabled_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterEnabledVersions")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GameCenterEnabledVersionsResponse]:
        """apps_game_center_enabled_versions_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_platform: filter by attribute 'platform'
        :type filter_platform: List[str]
        :param filter_version_string: filter by attribute 'versionString'
        :type filter_version_string: List[str]
        :param filter_id: filter by id(s)
        :type filter_id: List[str]
        :param sort: comma-separated list of sort expressions; resources will be sorted as specified
        :type sort: List[str]
        :param fields_game_center_enabled_versions: the fields to include for returned resources of type gameCenterEnabledVersions
        :type fields_game_center_enabled_versions: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_game_center_enabled_versions_get_to_many_related_serialize(
            id=id,
            filter_platform=filter_platform,
            filter_version_string=filter_version_string,
            filter_id=filter_id,
            sort=sort,
            fields_game_center_enabled_versions=fields_game_center_enabled_versions,
            fields_apps=fields_apps,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GameCenterEnabledVersionsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def apps_game_center_enabled_versions_get_to_many_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_platform: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'platform'")] = None,
        filter_version_string: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'versionString'")] = None,
        filter_id: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s)")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; resources will be sorted as specified")] = None,
        fields_game_center_enabled_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterEnabledVersions")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """apps_game_center_enabled_versions_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_platform: filter by attribute 'platform'
        :type filter_platform: List[str]
        :param filter_version_string: filter by attribute 'versionString'
        :type filter_version_string: List[str]
        :param filter_id: filter by id(s)
        :type filter_id: List[str]
        :param sort: comma-separated list of sort expressions; resources will be sorted as specified
        :type sort: List[str]
        :param fields_game_center_enabled_versions: the fields to include for returned resources of type gameCenterEnabledVersions
        :type fields_game_center_enabled_versions: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_game_center_enabled_versions_get_to_many_related_serialize(
            id=id,
            filter_platform=filter_platform,
            filter_version_string=filter_version_string,
            filter_id=filter_id,
            sort=sort,
            fields_game_center_enabled_versions=fields_game_center_enabled_versions,
            fields_apps=fields_apps,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GameCenterEnabledVersionsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _apps_game_center_enabled_versions_get_to_many_related_serialize(
        self,
        id,
        filter_platform,
        filter_version_string,
        filter_id,
        sort,
        fields_game_center_enabled_versions,
        fields_apps,
        limit,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filter[platform]': 'csv',
            'filter[versionString]': 'csv',
            'filter[id]': 'csv',
            'sort': 'csv',
            'fields[gameCenterEnabledVersions]': 'csv',
            'fields[apps]': 'csv',
            'include': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if filter_platform is not None:
            
            _query_params.append(('filter[platform]', filter_platform))
            
        if filter_version_string is not None:
            
            _query_params.append(('filter[versionString]', filter_version_string))
            
        if filter_id is not None:
            
            _query_params.append(('filter[id]', filter_id))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if fields_game_center_enabled_versions is not None:
            
            _query_params.append(('fields[gameCenterEnabledVersions]', fields_game_center_enabled_versions))
            
        if fields_apps is not None:
            
            _query_params.append(('fields[apps]', fields_apps))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{id}/gameCenterEnabledVersions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def apps_get_collection(
        self,
        filter_app_store_versions_app_store_state: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'appStoreVersions.appStoreState'")] = None,
        filter_app_store_versions_platform: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'appStoreVersions.platform'")] = None,
        filter_bundle_id: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'bundleId'")] = None,
        filter_name: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'name'")] = None,
        filter_sku: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'sku'")] = None,
        filter_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s) of related 'appStoreVersions'")] = None,
        filter_id: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s)")] = None,
        exists_game_center_enabled_versions: Annotated[Optional[List[StrictStr]], Field(description="filter by existence or non-existence of related 'gameCenterEnabledVersions'")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; resources will be sorted as specified")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        fields_beta_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaGroups")] = None,
        fields_perf_power_metrics: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type perfPowerMetrics")] = None,
        fields_app_infos: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appInfos")] = None,
        fields_app_pre_orders: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appPreOrders")] = None,
        fields_pre_release_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type preReleaseVersions")] = None,
        fields_app_prices: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appPrices")] = None,
        fields_in_app_purchases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type inAppPurchases")] = None,
        fields_beta_app_review_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaAppReviewDetails")] = None,
        fields_territories: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type territories")] = None,
        fields_game_center_enabled_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterEnabledVersions")] = None,
        fields_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersions")] = None,
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        fields_beta_app_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaAppLocalizations")] = None,
        fields_beta_license_agreements: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaLicenseAgreements")] = None,
        fields_end_user_license_agreements: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type endUserLicenseAgreements")] = None,
        limit_app_infos: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related appInfos returned (when they are included)")] = None,
        limit_app_store_versions: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related appStoreVersions returned (when they are included)")] = None,
        limit_available_territories: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related availableTerritories returned (when they are included)")] = None,
        limit_beta_app_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related betaAppLocalizations returned (when they are included)")] = None,
        limit_beta_groups: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related betaGroups returned (when they are included)")] = None,
        limit_builds: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related builds returned (when they are included)")] = None,
        limit_game_center_enabled_versions: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related gameCenterEnabledVersions returned (when they are included)")] = None,
        limit_in_app_purchases: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related inAppPurchases returned (when they are included)")] = None,
        limit_pre_release_versions: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related preReleaseVersions returned (when they are included)")] = None,
        limit_prices: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related prices returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AppsResponse:
        """apps_get_collection


        :param filter_app_store_versions_app_store_state: filter by attribute 'appStoreVersions.appStoreState'
        :type filter_app_store_versions_app_store_state: List[str]
        :param filter_app_store_versions_platform: filter by attribute 'appStoreVersions.platform'
        :type filter_app_store_versions_platform: List[str]
        :param filter_bundle_id: filter by attribute 'bundleId'
        :type filter_bundle_id: List[str]
        :param filter_name: filter by attribute 'name'
        :type filter_name: List[str]
        :param filter_sku: filter by attribute 'sku'
        :type filter_sku: List[str]
        :param filter_app_store_versions: filter by id(s) of related 'appStoreVersions'
        :type filter_app_store_versions: List[str]
        :param filter_id: filter by id(s)
        :type filter_id: List[str]
        :param exists_game_center_enabled_versions: filter by existence or non-existence of related 'gameCenterEnabledVersions'
        :type exists_game_center_enabled_versions: List[str]
        :param sort: comma-separated list of sort expressions; resources will be sorted as specified
        :type sort: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param fields_beta_groups: the fields to include for returned resources of type betaGroups
        :type fields_beta_groups: List[str]
        :param fields_perf_power_metrics: the fields to include for returned resources of type perfPowerMetrics
        :type fields_perf_power_metrics: List[str]
        :param fields_app_infos: the fields to include for returned resources of type appInfos
        :type fields_app_infos: List[str]
        :param fields_app_pre_orders: the fields to include for returned resources of type appPreOrders
        :type fields_app_pre_orders: List[str]
        :param fields_pre_release_versions: the fields to include for returned resources of type preReleaseVersions
        :type fields_pre_release_versions: List[str]
        :param fields_app_prices: the fields to include for returned resources of type appPrices
        :type fields_app_prices: List[str]
        :param fields_in_app_purchases: the fields to include for returned resources of type inAppPurchases
        :type fields_in_app_purchases: List[str]
        :param fields_beta_app_review_details: the fields to include for returned resources of type betaAppReviewDetails
        :type fields_beta_app_review_details: List[str]
        :param fields_territories: the fields to include for returned resources of type territories
        :type fields_territories: List[str]
        :param fields_game_center_enabled_versions: the fields to include for returned resources of type gameCenterEnabledVersions
        :type fields_game_center_enabled_versions: List[str]
        :param fields_app_store_versions: the fields to include for returned resources of type appStoreVersions
        :type fields_app_store_versions: List[str]
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param fields_beta_app_localizations: the fields to include for returned resources of type betaAppLocalizations
        :type fields_beta_app_localizations: List[str]
        :param fields_beta_license_agreements: the fields to include for returned resources of type betaLicenseAgreements
        :type fields_beta_license_agreements: List[str]
        :param fields_end_user_license_agreements: the fields to include for returned resources of type endUserLicenseAgreements
        :type fields_end_user_license_agreements: List[str]
        :param limit_app_infos: maximum number of related appInfos returned (when they are included)
        :type limit_app_infos: int
        :param limit_app_store_versions: maximum number of related appStoreVersions returned (when they are included)
        :type limit_app_store_versions: int
        :param limit_available_territories: maximum number of related availableTerritories returned (when they are included)
        :type limit_available_territories: int
        :param limit_beta_app_localizations: maximum number of related betaAppLocalizations returned (when they are included)
        :type limit_beta_app_localizations: int
        :param limit_beta_groups: maximum number of related betaGroups returned (when they are included)
        :type limit_beta_groups: int
        :param limit_builds: maximum number of related builds returned (when they are included)
        :type limit_builds: int
        :param limit_game_center_enabled_versions: maximum number of related gameCenterEnabledVersions returned (when they are included)
        :type limit_game_center_enabled_versions: int
        :param limit_in_app_purchases: maximum number of related inAppPurchases returned (when they are included)
        :type limit_in_app_purchases: int
        :param limit_pre_release_versions: maximum number of related preReleaseVersions returned (when they are included)
        :type limit_pre_release_versions: int
        :param limit_prices: maximum number of related prices returned (when they are included)
        :type limit_prices: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_get_collection_serialize(
            filter_app_store_versions_app_store_state=filter_app_store_versions_app_store_state,
            filter_app_store_versions_platform=filter_app_store_versions_platform,
            filter_bundle_id=filter_bundle_id,
            filter_name=filter_name,
            filter_sku=filter_sku,
            filter_app_store_versions=filter_app_store_versions,
            filter_id=filter_id,
            exists_game_center_enabled_versions=exists_game_center_enabled_versions,
            sort=sort,
            fields_apps=fields_apps,
            limit=limit,
            include=include,
            fields_beta_groups=fields_beta_groups,
            fields_perf_power_metrics=fields_perf_power_metrics,
            fields_app_infos=fields_app_infos,
            fields_app_pre_orders=fields_app_pre_orders,
            fields_pre_release_versions=fields_pre_release_versions,
            fields_app_prices=fields_app_prices,
            fields_in_app_purchases=fields_in_app_purchases,
            fields_beta_app_review_details=fields_beta_app_review_details,
            fields_territories=fields_territories,
            fields_game_center_enabled_versions=fields_game_center_enabled_versions,
            fields_app_store_versions=fields_app_store_versions,
            fields_builds=fields_builds,
            fields_beta_app_localizations=fields_beta_app_localizations,
            fields_beta_license_agreements=fields_beta_license_agreements,
            fields_end_user_license_agreements=fields_end_user_license_agreements,
            limit_app_infos=limit_app_infos,
            limit_app_store_versions=limit_app_store_versions,
            limit_available_territories=limit_available_territories,
            limit_beta_app_localizations=limit_beta_app_localizations,
            limit_beta_groups=limit_beta_groups,
            limit_builds=limit_builds,
            limit_game_center_enabled_versions=limit_game_center_enabled_versions,
            limit_in_app_purchases=limit_in_app_purchases,
            limit_pre_release_versions=limit_pre_release_versions,
            limit_prices=limit_prices,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def apps_get_collection_with_http_info(
        self,
        filter_app_store_versions_app_store_state: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'appStoreVersions.appStoreState'")] = None,
        filter_app_store_versions_platform: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'appStoreVersions.platform'")] = None,
        filter_bundle_id: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'bundleId'")] = None,
        filter_name: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'name'")] = None,
        filter_sku: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'sku'")] = None,
        filter_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s) of related 'appStoreVersions'")] = None,
        filter_id: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s)")] = None,
        exists_game_center_enabled_versions: Annotated[Optional[List[StrictStr]], Field(description="filter by existence or non-existence of related 'gameCenterEnabledVersions'")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; resources will be sorted as specified")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        fields_beta_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaGroups")] = None,
        fields_perf_power_metrics: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type perfPowerMetrics")] = None,
        fields_app_infos: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appInfos")] = None,
        fields_app_pre_orders: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appPreOrders")] = None,
        fields_pre_release_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type preReleaseVersions")] = None,
        fields_app_prices: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appPrices")] = None,
        fields_in_app_purchases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type inAppPurchases")] = None,
        fields_beta_app_review_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaAppReviewDetails")] = None,
        fields_territories: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type territories")] = None,
        fields_game_center_enabled_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterEnabledVersions")] = None,
        fields_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersions")] = None,
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        fields_beta_app_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaAppLocalizations")] = None,
        fields_beta_license_agreements: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaLicenseAgreements")] = None,
        fields_end_user_license_agreements: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type endUserLicenseAgreements")] = None,
        limit_app_infos: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related appInfos returned (when they are included)")] = None,
        limit_app_store_versions: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related appStoreVersions returned (when they are included)")] = None,
        limit_available_territories: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related availableTerritories returned (when they are included)")] = None,
        limit_beta_app_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related betaAppLocalizations returned (when they are included)")] = None,
        limit_beta_groups: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related betaGroups returned (when they are included)")] = None,
        limit_builds: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related builds returned (when they are included)")] = None,
        limit_game_center_enabled_versions: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related gameCenterEnabledVersions returned (when they are included)")] = None,
        limit_in_app_purchases: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related inAppPurchases returned (when they are included)")] = None,
        limit_pre_release_versions: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related preReleaseVersions returned (when they are included)")] = None,
        limit_prices: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related prices returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AppsResponse]:
        """apps_get_collection


        :param filter_app_store_versions_app_store_state: filter by attribute 'appStoreVersions.appStoreState'
        :type filter_app_store_versions_app_store_state: List[str]
        :param filter_app_store_versions_platform: filter by attribute 'appStoreVersions.platform'
        :type filter_app_store_versions_platform: List[str]
        :param filter_bundle_id: filter by attribute 'bundleId'
        :type filter_bundle_id: List[str]
        :param filter_name: filter by attribute 'name'
        :type filter_name: List[str]
        :param filter_sku: filter by attribute 'sku'
        :type filter_sku: List[str]
        :param filter_app_store_versions: filter by id(s) of related 'appStoreVersions'
        :type filter_app_store_versions: List[str]
        :param filter_id: filter by id(s)
        :type filter_id: List[str]
        :param exists_game_center_enabled_versions: filter by existence or non-existence of related 'gameCenterEnabledVersions'
        :type exists_game_center_enabled_versions: List[str]
        :param sort: comma-separated list of sort expressions; resources will be sorted as specified
        :type sort: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param fields_beta_groups: the fields to include for returned resources of type betaGroups
        :type fields_beta_groups: List[str]
        :param fields_perf_power_metrics: the fields to include for returned resources of type perfPowerMetrics
        :type fields_perf_power_metrics: List[str]
        :param fields_app_infos: the fields to include for returned resources of type appInfos
        :type fields_app_infos: List[str]
        :param fields_app_pre_orders: the fields to include for returned resources of type appPreOrders
        :type fields_app_pre_orders: List[str]
        :param fields_pre_release_versions: the fields to include for returned resources of type preReleaseVersions
        :type fields_pre_release_versions: List[str]
        :param fields_app_prices: the fields to include for returned resources of type appPrices
        :type fields_app_prices: List[str]
        :param fields_in_app_purchases: the fields to include for returned resources of type inAppPurchases
        :type fields_in_app_purchases: List[str]
        :param fields_beta_app_review_details: the fields to include for returned resources of type betaAppReviewDetails
        :type fields_beta_app_review_details: List[str]
        :param fields_territories: the fields to include for returned resources of type territories
        :type fields_territories: List[str]
        :param fields_game_center_enabled_versions: the fields to include for returned resources of type gameCenterEnabledVersions
        :type fields_game_center_enabled_versions: List[str]
        :param fields_app_store_versions: the fields to include for returned resources of type appStoreVersions
        :type fields_app_store_versions: List[str]
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param fields_beta_app_localizations: the fields to include for returned resources of type betaAppLocalizations
        :type fields_beta_app_localizations: List[str]
        :param fields_beta_license_agreements: the fields to include for returned resources of type betaLicenseAgreements
        :type fields_beta_license_agreements: List[str]
        :param fields_end_user_license_agreements: the fields to include for returned resources of type endUserLicenseAgreements
        :type fields_end_user_license_agreements: List[str]
        :param limit_app_infos: maximum number of related appInfos returned (when they are included)
        :type limit_app_infos: int
        :param limit_app_store_versions: maximum number of related appStoreVersions returned (when they are included)
        :type limit_app_store_versions: int
        :param limit_available_territories: maximum number of related availableTerritories returned (when they are included)
        :type limit_available_territories: int
        :param limit_beta_app_localizations: maximum number of related betaAppLocalizations returned (when they are included)
        :type limit_beta_app_localizations: int
        :param limit_beta_groups: maximum number of related betaGroups returned (when they are included)
        :type limit_beta_groups: int
        :param limit_builds: maximum number of related builds returned (when they are included)
        :type limit_builds: int
        :param limit_game_center_enabled_versions: maximum number of related gameCenterEnabledVersions returned (when they are included)
        :type limit_game_center_enabled_versions: int
        :param limit_in_app_purchases: maximum number of related inAppPurchases returned (when they are included)
        :type limit_in_app_purchases: int
        :param limit_pre_release_versions: maximum number of related preReleaseVersions returned (when they are included)
        :type limit_pre_release_versions: int
        :param limit_prices: maximum number of related prices returned (when they are included)
        :type limit_prices: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_get_collection_serialize(
            filter_app_store_versions_app_store_state=filter_app_store_versions_app_store_state,
            filter_app_store_versions_platform=filter_app_store_versions_platform,
            filter_bundle_id=filter_bundle_id,
            filter_name=filter_name,
            filter_sku=filter_sku,
            filter_app_store_versions=filter_app_store_versions,
            filter_id=filter_id,
            exists_game_center_enabled_versions=exists_game_center_enabled_versions,
            sort=sort,
            fields_apps=fields_apps,
            limit=limit,
            include=include,
            fields_beta_groups=fields_beta_groups,
            fields_perf_power_metrics=fields_perf_power_metrics,
            fields_app_infos=fields_app_infos,
            fields_app_pre_orders=fields_app_pre_orders,
            fields_pre_release_versions=fields_pre_release_versions,
            fields_app_prices=fields_app_prices,
            fields_in_app_purchases=fields_in_app_purchases,
            fields_beta_app_review_details=fields_beta_app_review_details,
            fields_territories=fields_territories,
            fields_game_center_enabled_versions=fields_game_center_enabled_versions,
            fields_app_store_versions=fields_app_store_versions,
            fields_builds=fields_builds,
            fields_beta_app_localizations=fields_beta_app_localizations,
            fields_beta_license_agreements=fields_beta_license_agreements,
            fields_end_user_license_agreements=fields_end_user_license_agreements,
            limit_app_infos=limit_app_infos,
            limit_app_store_versions=limit_app_store_versions,
            limit_available_territories=limit_available_territories,
            limit_beta_app_localizations=limit_beta_app_localizations,
            limit_beta_groups=limit_beta_groups,
            limit_builds=limit_builds,
            limit_game_center_enabled_versions=limit_game_center_enabled_versions,
            limit_in_app_purchases=limit_in_app_purchases,
            limit_pre_release_versions=limit_pre_release_versions,
            limit_prices=limit_prices,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def apps_get_collection_without_preload_content(
        self,
        filter_app_store_versions_app_store_state: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'appStoreVersions.appStoreState'")] = None,
        filter_app_store_versions_platform: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'appStoreVersions.platform'")] = None,
        filter_bundle_id: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'bundleId'")] = None,
        filter_name: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'name'")] = None,
        filter_sku: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'sku'")] = None,
        filter_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s) of related 'appStoreVersions'")] = None,
        filter_id: Annotated[Optional[List[StrictStr]], Field(description="filter by id(s)")] = None,
        exists_game_center_enabled_versions: Annotated[Optional[List[StrictStr]], Field(description="filter by existence or non-existence of related 'gameCenterEnabledVersions'")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; resources will be sorted as specified")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        fields_beta_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaGroups")] = None,
        fields_perf_power_metrics: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type perfPowerMetrics")] = None,
        fields_app_infos: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appInfos")] = None,
        fields_app_pre_orders: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appPreOrders")] = None,
        fields_pre_release_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type preReleaseVersions")] = None,
        fields_app_prices: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appPrices")] = None,
        fields_in_app_purchases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type inAppPurchases")] = None,
        fields_beta_app_review_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaAppReviewDetails")] = None,
        fields_territories: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type territories")] = None,
        fields_game_center_enabled_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterEnabledVersions")] = None,
        fields_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersions")] = None,
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        fields_beta_app_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaAppLocalizations")] = None,
        fields_beta_license_agreements: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaLicenseAgreements")] = None,
        fields_end_user_license_agreements: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type endUserLicenseAgreements")] = None,
        limit_app_infos: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related appInfos returned (when they are included)")] = None,
        limit_app_store_versions: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related appStoreVersions returned (when they are included)")] = None,
        limit_available_territories: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related availableTerritories returned (when they are included)")] = None,
        limit_beta_app_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related betaAppLocalizations returned (when they are included)")] = None,
        limit_beta_groups: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related betaGroups returned (when they are included)")] = None,
        limit_builds: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related builds returned (when they are included)")] = None,
        limit_game_center_enabled_versions: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related gameCenterEnabledVersions returned (when they are included)")] = None,
        limit_in_app_purchases: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related inAppPurchases returned (when they are included)")] = None,
        limit_pre_release_versions: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related preReleaseVersions returned (when they are included)")] = None,
        limit_prices: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related prices returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """apps_get_collection


        :param filter_app_store_versions_app_store_state: filter by attribute 'appStoreVersions.appStoreState'
        :type filter_app_store_versions_app_store_state: List[str]
        :param filter_app_store_versions_platform: filter by attribute 'appStoreVersions.platform'
        :type filter_app_store_versions_platform: List[str]
        :param filter_bundle_id: filter by attribute 'bundleId'
        :type filter_bundle_id: List[str]
        :param filter_name: filter by attribute 'name'
        :type filter_name: List[str]
        :param filter_sku: filter by attribute 'sku'
        :type filter_sku: List[str]
        :param filter_app_store_versions: filter by id(s) of related 'appStoreVersions'
        :type filter_app_store_versions: List[str]
        :param filter_id: filter by id(s)
        :type filter_id: List[str]
        :param exists_game_center_enabled_versions: filter by existence or non-existence of related 'gameCenterEnabledVersions'
        :type exists_game_center_enabled_versions: List[str]
        :param sort: comma-separated list of sort expressions; resources will be sorted as specified
        :type sort: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param fields_beta_groups: the fields to include for returned resources of type betaGroups
        :type fields_beta_groups: List[str]
        :param fields_perf_power_metrics: the fields to include for returned resources of type perfPowerMetrics
        :type fields_perf_power_metrics: List[str]
        :param fields_app_infos: the fields to include for returned resources of type appInfos
        :type fields_app_infos: List[str]
        :param fields_app_pre_orders: the fields to include for returned resources of type appPreOrders
        :type fields_app_pre_orders: List[str]
        :param fields_pre_release_versions: the fields to include for returned resources of type preReleaseVersions
        :type fields_pre_release_versions: List[str]
        :param fields_app_prices: the fields to include for returned resources of type appPrices
        :type fields_app_prices: List[str]
        :param fields_in_app_purchases: the fields to include for returned resources of type inAppPurchases
        :type fields_in_app_purchases: List[str]
        :param fields_beta_app_review_details: the fields to include for returned resources of type betaAppReviewDetails
        :type fields_beta_app_review_details: List[str]
        :param fields_territories: the fields to include for returned resources of type territories
        :type fields_territories: List[str]
        :param fields_game_center_enabled_versions: the fields to include for returned resources of type gameCenterEnabledVersions
        :type fields_game_center_enabled_versions: List[str]
        :param fields_app_store_versions: the fields to include for returned resources of type appStoreVersions
        :type fields_app_store_versions: List[str]
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param fields_beta_app_localizations: the fields to include for returned resources of type betaAppLocalizations
        :type fields_beta_app_localizations: List[str]
        :param fields_beta_license_agreements: the fields to include for returned resources of type betaLicenseAgreements
        :type fields_beta_license_agreements: List[str]
        :param fields_end_user_license_agreements: the fields to include for returned resources of type endUserLicenseAgreements
        :type fields_end_user_license_agreements: List[str]
        :param limit_app_infos: maximum number of related appInfos returned (when they are included)
        :type limit_app_infos: int
        :param limit_app_store_versions: maximum number of related appStoreVersions returned (when they are included)
        :type limit_app_store_versions: int
        :param limit_available_territories: maximum number of related availableTerritories returned (when they are included)
        :type limit_available_territories: int
        :param limit_beta_app_localizations: maximum number of related betaAppLocalizations returned (when they are included)
        :type limit_beta_app_localizations: int
        :param limit_beta_groups: maximum number of related betaGroups returned (when they are included)
        :type limit_beta_groups: int
        :param limit_builds: maximum number of related builds returned (when they are included)
        :type limit_builds: int
        :param limit_game_center_enabled_versions: maximum number of related gameCenterEnabledVersions returned (when they are included)
        :type limit_game_center_enabled_versions: int
        :param limit_in_app_purchases: maximum number of related inAppPurchases returned (when they are included)
        :type limit_in_app_purchases: int
        :param limit_pre_release_versions: maximum number of related preReleaseVersions returned (when they are included)
        :type limit_pre_release_versions: int
        :param limit_prices: maximum number of related prices returned (when they are included)
        :type limit_prices: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_get_collection_serialize(
            filter_app_store_versions_app_store_state=filter_app_store_versions_app_store_state,
            filter_app_store_versions_platform=filter_app_store_versions_platform,
            filter_bundle_id=filter_bundle_id,
            filter_name=filter_name,
            filter_sku=filter_sku,
            filter_app_store_versions=filter_app_store_versions,
            filter_id=filter_id,
            exists_game_center_enabled_versions=exists_game_center_enabled_versions,
            sort=sort,
            fields_apps=fields_apps,
            limit=limit,
            include=include,
            fields_beta_groups=fields_beta_groups,
            fields_perf_power_metrics=fields_perf_power_metrics,
            fields_app_infos=fields_app_infos,
            fields_app_pre_orders=fields_app_pre_orders,
            fields_pre_release_versions=fields_pre_release_versions,
            fields_app_prices=fields_app_prices,
            fields_in_app_purchases=fields_in_app_purchases,
            fields_beta_app_review_details=fields_beta_app_review_details,
            fields_territories=fields_territories,
            fields_game_center_enabled_versions=fields_game_center_enabled_versions,
            fields_app_store_versions=fields_app_store_versions,
            fields_builds=fields_builds,
            fields_beta_app_localizations=fields_beta_app_localizations,
            fields_beta_license_agreements=fields_beta_license_agreements,
            fields_end_user_license_agreements=fields_end_user_license_agreements,
            limit_app_infos=limit_app_infos,
            limit_app_store_versions=limit_app_store_versions,
            limit_available_territories=limit_available_territories,
            limit_beta_app_localizations=limit_beta_app_localizations,
            limit_beta_groups=limit_beta_groups,
            limit_builds=limit_builds,
            limit_game_center_enabled_versions=limit_game_center_enabled_versions,
            limit_in_app_purchases=limit_in_app_purchases,
            limit_pre_release_versions=limit_pre_release_versions,
            limit_prices=limit_prices,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _apps_get_collection_serialize(
        self,
        filter_app_store_versions_app_store_state,
        filter_app_store_versions_platform,
        filter_bundle_id,
        filter_name,
        filter_sku,
        filter_app_store_versions,
        filter_id,
        exists_game_center_enabled_versions,
        sort,
        fields_apps,
        limit,
        include,
        fields_beta_groups,
        fields_perf_power_metrics,
        fields_app_infos,
        fields_app_pre_orders,
        fields_pre_release_versions,
        fields_app_prices,
        fields_in_app_purchases,
        fields_beta_app_review_details,
        fields_territories,
        fields_game_center_enabled_versions,
        fields_app_store_versions,
        fields_builds,
        fields_beta_app_localizations,
        fields_beta_license_agreements,
        fields_end_user_license_agreements,
        limit_app_infos,
        limit_app_store_versions,
        limit_available_territories,
        limit_beta_app_localizations,
        limit_beta_groups,
        limit_builds,
        limit_game_center_enabled_versions,
        limit_in_app_purchases,
        limit_pre_release_versions,
        limit_prices,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filter[appStoreVersions.appStoreState]': 'csv',
            'filter[appStoreVersions.platform]': 'csv',
            'filter[bundleId]': 'csv',
            'filter[name]': 'csv',
            'filter[sku]': 'csv',
            'filter[appStoreVersions]': 'csv',
            'filter[id]': 'csv',
            'exists[gameCenterEnabledVersions]': 'csv',
            'sort': 'csv',
            'fields[apps]': 'csv',
            'include': 'csv',
            'fields[betaGroups]': 'csv',
            'fields[perfPowerMetrics]': 'csv',
            'fields[appInfos]': 'csv',
            'fields[appPreOrders]': 'csv',
            'fields[preReleaseVersions]': 'csv',
            'fields[appPrices]': 'csv',
            'fields[inAppPurchases]': 'csv',
            'fields[betaAppReviewDetails]': 'csv',
            'fields[territories]': 'csv',
            'fields[gameCenterEnabledVersions]': 'csv',
            'fields[appStoreVersions]': 'csv',
            'fields[builds]': 'csv',
            'fields[betaAppLocalizations]': 'csv',
            'fields[betaLicenseAgreements]': 'csv',
            'fields[endUserLicenseAgreements]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if filter_app_store_versions_app_store_state is not None:
            
            _query_params.append(('filter[appStoreVersions.appStoreState]', filter_app_store_versions_app_store_state))
            
        if filter_app_store_versions_platform is not None:
            
            _query_params.append(('filter[appStoreVersions.platform]', filter_app_store_versions_platform))
            
        if filter_bundle_id is not None:
            
            _query_params.append(('filter[bundleId]', filter_bundle_id))
            
        if filter_name is not None:
            
            _query_params.append(('filter[name]', filter_name))
            
        if filter_sku is not None:
            
            _query_params.append(('filter[sku]', filter_sku))
            
        if filter_app_store_versions is not None:
            
            _query_params.append(('filter[appStoreVersions]', filter_app_store_versions))
            
        if filter_id is not None:
            
            _query_params.append(('filter[id]', filter_id))
            
        if exists_game_center_enabled_versions is not None:
            
            _query_params.append(('exists[gameCenterEnabledVersions]', exists_game_center_enabled_versions))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if fields_apps is not None:
            
            _query_params.append(('fields[apps]', fields_apps))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        if fields_beta_groups is not None:
            
            _query_params.append(('fields[betaGroups]', fields_beta_groups))
            
        if fields_perf_power_metrics is not None:
            
            _query_params.append(('fields[perfPowerMetrics]', fields_perf_power_metrics))
            
        if fields_app_infos is not None:
            
            _query_params.append(('fields[appInfos]', fields_app_infos))
            
        if fields_app_pre_orders is not None:
            
            _query_params.append(('fields[appPreOrders]', fields_app_pre_orders))
            
        if fields_pre_release_versions is not None:
            
            _query_params.append(('fields[preReleaseVersions]', fields_pre_release_versions))
            
        if fields_app_prices is not None:
            
            _query_params.append(('fields[appPrices]', fields_app_prices))
            
        if fields_in_app_purchases is not None:
            
            _query_params.append(('fields[inAppPurchases]', fields_in_app_purchases))
            
        if fields_beta_app_review_details is not None:
            
            _query_params.append(('fields[betaAppReviewDetails]', fields_beta_app_review_details))
            
        if fields_territories is not None:
            
            _query_params.append(('fields[territories]', fields_territories))
            
        if fields_game_center_enabled_versions is not None:
            
            _query_params.append(('fields[gameCenterEnabledVersions]', fields_game_center_enabled_versions))
            
        if fields_app_store_versions is not None:
            
            _query_params.append(('fields[appStoreVersions]', fields_app_store_versions))
            
        if fields_builds is not None:
            
            _query_params.append(('fields[builds]', fields_builds))
            
        if fields_beta_app_localizations is not None:
            
            _query_params.append(('fields[betaAppLocalizations]', fields_beta_app_localizations))
            
        if fields_beta_license_agreements is not None:
            
            _query_params.append(('fields[betaLicenseAgreements]', fields_beta_license_agreements))
            
        if fields_end_user_license_agreements is not None:
            
            _query_params.append(('fields[endUserLicenseAgreements]', fields_end_user_license_agreements))
            
        if limit_app_infos is not None:
            
            _query_params.append(('limit[appInfos]', limit_app_infos))
            
        if limit_app_store_versions is not None:
            
            _query_params.append(('limit[appStoreVersions]', limit_app_store_versions))
            
        if limit_available_territories is not None:
            
            _query_params.append(('limit[availableTerritories]', limit_available_territories))
            
        if limit_beta_app_localizations is not None:
            
            _query_params.append(('limit[betaAppLocalizations]', limit_beta_app_localizations))
            
        if limit_beta_groups is not None:
            
            _query_params.append(('limit[betaGroups]', limit_beta_groups))
            
        if limit_builds is not None:
            
            _query_params.append(('limit[builds]', limit_builds))
            
        if limit_game_center_enabled_versions is not None:
            
            _query_params.append(('limit[gameCenterEnabledVersions]', limit_game_center_enabled_versions))
            
        if limit_in_app_purchases is not None:
            
            _query_params.append(('limit[inAppPurchases]', limit_in_app_purchases))
            
        if limit_pre_release_versions is not None:
            
            _query_params.append(('limit[preReleaseVersions]', limit_pre_release_versions))
            
        if limit_prices is not None:
            
            _query_params.append(('limit[prices]', limit_prices))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def apps_get_instance(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        fields_beta_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaGroups")] = None,
        fields_perf_power_metrics: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type perfPowerMetrics")] = None,
        fields_app_infos: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appInfos")] = None,
        fields_app_pre_orders: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appPreOrders")] = None,
        fields_pre_release_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type preReleaseVersions")] = None,
        fields_app_prices: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appPrices")] = None,
        fields_in_app_purchases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type inAppPurchases")] = None,
        fields_beta_app_review_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaAppReviewDetails")] = None,
        fields_territories: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type territories")] = None,
        fields_game_center_enabled_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterEnabledVersions")] = None,
        fields_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersions")] = None,
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        fields_beta_app_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaAppLocalizations")] = None,
        fields_beta_license_agreements: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaLicenseAgreements")] = None,
        fields_end_user_license_agreements: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type endUserLicenseAgreements")] = None,
        limit_app_infos: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related appInfos returned (when they are included)")] = None,
        limit_app_store_versions: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related appStoreVersions returned (when they are included)")] = None,
        limit_available_territories: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related availableTerritories returned (when they are included)")] = None,
        limit_beta_app_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related betaAppLocalizations returned (when they are included)")] = None,
        limit_beta_groups: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related betaGroups returned (when they are included)")] = None,
        limit_builds: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related builds returned (when they are included)")] = None,
        limit_game_center_enabled_versions: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related gameCenterEnabledVersions returned (when they are included)")] = None,
        limit_in_app_purchases: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related inAppPurchases returned (when they are included)")] = None,
        limit_pre_release_versions: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related preReleaseVersions returned (when they are included)")] = None,
        limit_prices: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related prices returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AppResponse:
        """apps_get_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param fields_beta_groups: the fields to include for returned resources of type betaGroups
        :type fields_beta_groups: List[str]
        :param fields_perf_power_metrics: the fields to include for returned resources of type perfPowerMetrics
        :type fields_perf_power_metrics: List[str]
        :param fields_app_infos: the fields to include for returned resources of type appInfos
        :type fields_app_infos: List[str]
        :param fields_app_pre_orders: the fields to include for returned resources of type appPreOrders
        :type fields_app_pre_orders: List[str]
        :param fields_pre_release_versions: the fields to include for returned resources of type preReleaseVersions
        :type fields_pre_release_versions: List[str]
        :param fields_app_prices: the fields to include for returned resources of type appPrices
        :type fields_app_prices: List[str]
        :param fields_in_app_purchases: the fields to include for returned resources of type inAppPurchases
        :type fields_in_app_purchases: List[str]
        :param fields_beta_app_review_details: the fields to include for returned resources of type betaAppReviewDetails
        :type fields_beta_app_review_details: List[str]
        :param fields_territories: the fields to include for returned resources of type territories
        :type fields_territories: List[str]
        :param fields_game_center_enabled_versions: the fields to include for returned resources of type gameCenterEnabledVersions
        :type fields_game_center_enabled_versions: List[str]
        :param fields_app_store_versions: the fields to include for returned resources of type appStoreVersions
        :type fields_app_store_versions: List[str]
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param fields_beta_app_localizations: the fields to include for returned resources of type betaAppLocalizations
        :type fields_beta_app_localizations: List[str]
        :param fields_beta_license_agreements: the fields to include for returned resources of type betaLicenseAgreements
        :type fields_beta_license_agreements: List[str]
        :param fields_end_user_license_agreements: the fields to include for returned resources of type endUserLicenseAgreements
        :type fields_end_user_license_agreements: List[str]
        :param limit_app_infos: maximum number of related appInfos returned (when they are included)
        :type limit_app_infos: int
        :param limit_app_store_versions: maximum number of related appStoreVersions returned (when they are included)
        :type limit_app_store_versions: int
        :param limit_available_territories: maximum number of related availableTerritories returned (when they are included)
        :type limit_available_territories: int
        :param limit_beta_app_localizations: maximum number of related betaAppLocalizations returned (when they are included)
        :type limit_beta_app_localizations: int
        :param limit_beta_groups: maximum number of related betaGroups returned (when they are included)
        :type limit_beta_groups: int
        :param limit_builds: maximum number of related builds returned (when they are included)
        :type limit_builds: int
        :param limit_game_center_enabled_versions: maximum number of related gameCenterEnabledVersions returned (when they are included)
        :type limit_game_center_enabled_versions: int
        :param limit_in_app_purchases: maximum number of related inAppPurchases returned (when they are included)
        :type limit_in_app_purchases: int
        :param limit_pre_release_versions: maximum number of related preReleaseVersions returned (when they are included)
        :type limit_pre_release_versions: int
        :param limit_prices: maximum number of related prices returned (when they are included)
        :type limit_prices: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_get_instance_serialize(
            id=id,
            fields_apps=fields_apps,
            include=include,
            fields_beta_groups=fields_beta_groups,
            fields_perf_power_metrics=fields_perf_power_metrics,
            fields_app_infos=fields_app_infos,
            fields_app_pre_orders=fields_app_pre_orders,
            fields_pre_release_versions=fields_pre_release_versions,
            fields_app_prices=fields_app_prices,
            fields_in_app_purchases=fields_in_app_purchases,
            fields_beta_app_review_details=fields_beta_app_review_details,
            fields_territories=fields_territories,
            fields_game_center_enabled_versions=fields_game_center_enabled_versions,
            fields_app_store_versions=fields_app_store_versions,
            fields_builds=fields_builds,
            fields_beta_app_localizations=fields_beta_app_localizations,
            fields_beta_license_agreements=fields_beta_license_agreements,
            fields_end_user_license_agreements=fields_end_user_license_agreements,
            limit_app_infos=limit_app_infos,
            limit_app_store_versions=limit_app_store_versions,
            limit_available_territories=limit_available_territories,
            limit_beta_app_localizations=limit_beta_app_localizations,
            limit_beta_groups=limit_beta_groups,
            limit_builds=limit_builds,
            limit_game_center_enabled_versions=limit_game_center_enabled_versions,
            limit_in_app_purchases=limit_in_app_purchases,
            limit_pre_release_versions=limit_pre_release_versions,
            limit_prices=limit_prices,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def apps_get_instance_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        fields_beta_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaGroups")] = None,
        fields_perf_power_metrics: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type perfPowerMetrics")] = None,
        fields_app_infos: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appInfos")] = None,
        fields_app_pre_orders: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appPreOrders")] = None,
        fields_pre_release_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type preReleaseVersions")] = None,
        fields_app_prices: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appPrices")] = None,
        fields_in_app_purchases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type inAppPurchases")] = None,
        fields_beta_app_review_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaAppReviewDetails")] = None,
        fields_territories: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type territories")] = None,
        fields_game_center_enabled_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterEnabledVersions")] = None,
        fields_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersions")] = None,
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        fields_beta_app_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaAppLocalizations")] = None,
        fields_beta_license_agreements: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaLicenseAgreements")] = None,
        fields_end_user_license_agreements: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type endUserLicenseAgreements")] = None,
        limit_app_infos: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related appInfos returned (when they are included)")] = None,
        limit_app_store_versions: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related appStoreVersions returned (when they are included)")] = None,
        limit_available_territories: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related availableTerritories returned (when they are included)")] = None,
        limit_beta_app_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related betaAppLocalizations returned (when they are included)")] = None,
        limit_beta_groups: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related betaGroups returned (when they are included)")] = None,
        limit_builds: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related builds returned (when they are included)")] = None,
        limit_game_center_enabled_versions: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related gameCenterEnabledVersions returned (when they are included)")] = None,
        limit_in_app_purchases: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related inAppPurchases returned (when they are included)")] = None,
        limit_pre_release_versions: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related preReleaseVersions returned (when they are included)")] = None,
        limit_prices: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related prices returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AppResponse]:
        """apps_get_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param fields_beta_groups: the fields to include for returned resources of type betaGroups
        :type fields_beta_groups: List[str]
        :param fields_perf_power_metrics: the fields to include for returned resources of type perfPowerMetrics
        :type fields_perf_power_metrics: List[str]
        :param fields_app_infos: the fields to include for returned resources of type appInfos
        :type fields_app_infos: List[str]
        :param fields_app_pre_orders: the fields to include for returned resources of type appPreOrders
        :type fields_app_pre_orders: List[str]
        :param fields_pre_release_versions: the fields to include for returned resources of type preReleaseVersions
        :type fields_pre_release_versions: List[str]
        :param fields_app_prices: the fields to include for returned resources of type appPrices
        :type fields_app_prices: List[str]
        :param fields_in_app_purchases: the fields to include for returned resources of type inAppPurchases
        :type fields_in_app_purchases: List[str]
        :param fields_beta_app_review_details: the fields to include for returned resources of type betaAppReviewDetails
        :type fields_beta_app_review_details: List[str]
        :param fields_territories: the fields to include for returned resources of type territories
        :type fields_territories: List[str]
        :param fields_game_center_enabled_versions: the fields to include for returned resources of type gameCenterEnabledVersions
        :type fields_game_center_enabled_versions: List[str]
        :param fields_app_store_versions: the fields to include for returned resources of type appStoreVersions
        :type fields_app_store_versions: List[str]
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param fields_beta_app_localizations: the fields to include for returned resources of type betaAppLocalizations
        :type fields_beta_app_localizations: List[str]
        :param fields_beta_license_agreements: the fields to include for returned resources of type betaLicenseAgreements
        :type fields_beta_license_agreements: List[str]
        :param fields_end_user_license_agreements: the fields to include for returned resources of type endUserLicenseAgreements
        :type fields_end_user_license_agreements: List[str]
        :param limit_app_infos: maximum number of related appInfos returned (when they are included)
        :type limit_app_infos: int
        :param limit_app_store_versions: maximum number of related appStoreVersions returned (when they are included)
        :type limit_app_store_versions: int
        :param limit_available_territories: maximum number of related availableTerritories returned (when they are included)
        :type limit_available_territories: int
        :param limit_beta_app_localizations: maximum number of related betaAppLocalizations returned (when they are included)
        :type limit_beta_app_localizations: int
        :param limit_beta_groups: maximum number of related betaGroups returned (when they are included)
        :type limit_beta_groups: int
        :param limit_builds: maximum number of related builds returned (when they are included)
        :type limit_builds: int
        :param limit_game_center_enabled_versions: maximum number of related gameCenterEnabledVersions returned (when they are included)
        :type limit_game_center_enabled_versions: int
        :param limit_in_app_purchases: maximum number of related inAppPurchases returned (when they are included)
        :type limit_in_app_purchases: int
        :param limit_pre_release_versions: maximum number of related preReleaseVersions returned (when they are included)
        :type limit_pre_release_versions: int
        :param limit_prices: maximum number of related prices returned (when they are included)
        :type limit_prices: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_get_instance_serialize(
            id=id,
            fields_apps=fields_apps,
            include=include,
            fields_beta_groups=fields_beta_groups,
            fields_perf_power_metrics=fields_perf_power_metrics,
            fields_app_infos=fields_app_infos,
            fields_app_pre_orders=fields_app_pre_orders,
            fields_pre_release_versions=fields_pre_release_versions,
            fields_app_prices=fields_app_prices,
            fields_in_app_purchases=fields_in_app_purchases,
            fields_beta_app_review_details=fields_beta_app_review_details,
            fields_territories=fields_territories,
            fields_game_center_enabled_versions=fields_game_center_enabled_versions,
            fields_app_store_versions=fields_app_store_versions,
            fields_builds=fields_builds,
            fields_beta_app_localizations=fields_beta_app_localizations,
            fields_beta_license_agreements=fields_beta_license_agreements,
            fields_end_user_license_agreements=fields_end_user_license_agreements,
            limit_app_infos=limit_app_infos,
            limit_app_store_versions=limit_app_store_versions,
            limit_available_territories=limit_available_territories,
            limit_beta_app_localizations=limit_beta_app_localizations,
            limit_beta_groups=limit_beta_groups,
            limit_builds=limit_builds,
            limit_game_center_enabled_versions=limit_game_center_enabled_versions,
            limit_in_app_purchases=limit_in_app_purchases,
            limit_pre_release_versions=limit_pre_release_versions,
            limit_prices=limit_prices,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def apps_get_instance_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        fields_beta_groups: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaGroups")] = None,
        fields_perf_power_metrics: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type perfPowerMetrics")] = None,
        fields_app_infos: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appInfos")] = None,
        fields_app_pre_orders: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appPreOrders")] = None,
        fields_pre_release_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type preReleaseVersions")] = None,
        fields_app_prices: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appPrices")] = None,
        fields_in_app_purchases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type inAppPurchases")] = None,
        fields_beta_app_review_details: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaAppReviewDetails")] = None,
        fields_territories: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type territories")] = None,
        fields_game_center_enabled_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type gameCenterEnabledVersions")] = None,
        fields_app_store_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appStoreVersions")] = None,
        fields_builds: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type builds")] = None,
        fields_beta_app_localizations: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaAppLocalizations")] = None,
        fields_beta_license_agreements: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type betaLicenseAgreements")] = None,
        fields_end_user_license_agreements: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type endUserLicenseAgreements")] = None,
        limit_app_infos: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related appInfos returned (when they are included)")] = None,
        limit_app_store_versions: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related appStoreVersions returned (when they are included)")] = None,
        limit_available_territories: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related availableTerritories returned (when they are included)")] = None,
        limit_beta_app_localizations: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related betaAppLocalizations returned (when they are included)")] = None,
        limit_beta_groups: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related betaGroups returned (when they are included)")] = None,
        limit_builds: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related builds returned (when they are included)")] = None,
        limit_game_center_enabled_versions: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related gameCenterEnabledVersions returned (when they are included)")] = None,
        limit_in_app_purchases: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related inAppPurchases returned (when they are included)")] = None,
        limit_pre_release_versions: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related preReleaseVersions returned (when they are included)")] = None,
        limit_prices: Annotated[Optional[Annotated[int, Field(le=50, strict=True)]], Field(description="maximum number of related prices returned (when they are included)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """apps_get_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param fields_beta_groups: the fields to include for returned resources of type betaGroups
        :type fields_beta_groups: List[str]
        :param fields_perf_power_metrics: the fields to include for returned resources of type perfPowerMetrics
        :type fields_perf_power_metrics: List[str]
        :param fields_app_infos: the fields to include for returned resources of type appInfos
        :type fields_app_infos: List[str]
        :param fields_app_pre_orders: the fields to include for returned resources of type appPreOrders
        :type fields_app_pre_orders: List[str]
        :param fields_pre_release_versions: the fields to include for returned resources of type preReleaseVersions
        :type fields_pre_release_versions: List[str]
        :param fields_app_prices: the fields to include for returned resources of type appPrices
        :type fields_app_prices: List[str]
        :param fields_in_app_purchases: the fields to include for returned resources of type inAppPurchases
        :type fields_in_app_purchases: List[str]
        :param fields_beta_app_review_details: the fields to include for returned resources of type betaAppReviewDetails
        :type fields_beta_app_review_details: List[str]
        :param fields_territories: the fields to include for returned resources of type territories
        :type fields_territories: List[str]
        :param fields_game_center_enabled_versions: the fields to include for returned resources of type gameCenterEnabledVersions
        :type fields_game_center_enabled_versions: List[str]
        :param fields_app_store_versions: the fields to include for returned resources of type appStoreVersions
        :type fields_app_store_versions: List[str]
        :param fields_builds: the fields to include for returned resources of type builds
        :type fields_builds: List[str]
        :param fields_beta_app_localizations: the fields to include for returned resources of type betaAppLocalizations
        :type fields_beta_app_localizations: List[str]
        :param fields_beta_license_agreements: the fields to include for returned resources of type betaLicenseAgreements
        :type fields_beta_license_agreements: List[str]
        :param fields_end_user_license_agreements: the fields to include for returned resources of type endUserLicenseAgreements
        :type fields_end_user_license_agreements: List[str]
        :param limit_app_infos: maximum number of related appInfos returned (when they are included)
        :type limit_app_infos: int
        :param limit_app_store_versions: maximum number of related appStoreVersions returned (when they are included)
        :type limit_app_store_versions: int
        :param limit_available_territories: maximum number of related availableTerritories returned (when they are included)
        :type limit_available_territories: int
        :param limit_beta_app_localizations: maximum number of related betaAppLocalizations returned (when they are included)
        :type limit_beta_app_localizations: int
        :param limit_beta_groups: maximum number of related betaGroups returned (when they are included)
        :type limit_beta_groups: int
        :param limit_builds: maximum number of related builds returned (when they are included)
        :type limit_builds: int
        :param limit_game_center_enabled_versions: maximum number of related gameCenterEnabledVersions returned (when they are included)
        :type limit_game_center_enabled_versions: int
        :param limit_in_app_purchases: maximum number of related inAppPurchases returned (when they are included)
        :type limit_in_app_purchases: int
        :param limit_pre_release_versions: maximum number of related preReleaseVersions returned (when they are included)
        :type limit_pre_release_versions: int
        :param limit_prices: maximum number of related prices returned (when they are included)
        :type limit_prices: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_get_instance_serialize(
            id=id,
            fields_apps=fields_apps,
            include=include,
            fields_beta_groups=fields_beta_groups,
            fields_perf_power_metrics=fields_perf_power_metrics,
            fields_app_infos=fields_app_infos,
            fields_app_pre_orders=fields_app_pre_orders,
            fields_pre_release_versions=fields_pre_release_versions,
            fields_app_prices=fields_app_prices,
            fields_in_app_purchases=fields_in_app_purchases,
            fields_beta_app_review_details=fields_beta_app_review_details,
            fields_territories=fields_territories,
            fields_game_center_enabled_versions=fields_game_center_enabled_versions,
            fields_app_store_versions=fields_app_store_versions,
            fields_builds=fields_builds,
            fields_beta_app_localizations=fields_beta_app_localizations,
            fields_beta_license_agreements=fields_beta_license_agreements,
            fields_end_user_license_agreements=fields_end_user_license_agreements,
            limit_app_infos=limit_app_infos,
            limit_app_store_versions=limit_app_store_versions,
            limit_available_territories=limit_available_territories,
            limit_beta_app_localizations=limit_beta_app_localizations,
            limit_beta_groups=limit_beta_groups,
            limit_builds=limit_builds,
            limit_game_center_enabled_versions=limit_game_center_enabled_versions,
            limit_in_app_purchases=limit_in_app_purchases,
            limit_pre_release_versions=limit_pre_release_versions,
            limit_prices=limit_prices,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _apps_get_instance_serialize(
        self,
        id,
        fields_apps,
        include,
        fields_beta_groups,
        fields_perf_power_metrics,
        fields_app_infos,
        fields_app_pre_orders,
        fields_pre_release_versions,
        fields_app_prices,
        fields_in_app_purchases,
        fields_beta_app_review_details,
        fields_territories,
        fields_game_center_enabled_versions,
        fields_app_store_versions,
        fields_builds,
        fields_beta_app_localizations,
        fields_beta_license_agreements,
        fields_end_user_license_agreements,
        limit_app_infos,
        limit_app_store_versions,
        limit_available_territories,
        limit_beta_app_localizations,
        limit_beta_groups,
        limit_builds,
        limit_game_center_enabled_versions,
        limit_in_app_purchases,
        limit_pre_release_versions,
        limit_prices,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[apps]': 'csv',
            'include': 'csv',
            'fields[betaGroups]': 'csv',
            'fields[perfPowerMetrics]': 'csv',
            'fields[appInfos]': 'csv',
            'fields[appPreOrders]': 'csv',
            'fields[preReleaseVersions]': 'csv',
            'fields[appPrices]': 'csv',
            'fields[inAppPurchases]': 'csv',
            'fields[betaAppReviewDetails]': 'csv',
            'fields[territories]': 'csv',
            'fields[gameCenterEnabledVersions]': 'csv',
            'fields[appStoreVersions]': 'csv',
            'fields[builds]': 'csv',
            'fields[betaAppLocalizations]': 'csv',
            'fields[betaLicenseAgreements]': 'csv',
            'fields[endUserLicenseAgreements]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_apps is not None:
            
            _query_params.append(('fields[apps]', fields_apps))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        if fields_beta_groups is not None:
            
            _query_params.append(('fields[betaGroups]', fields_beta_groups))
            
        if fields_perf_power_metrics is not None:
            
            _query_params.append(('fields[perfPowerMetrics]', fields_perf_power_metrics))
            
        if fields_app_infos is not None:
            
            _query_params.append(('fields[appInfos]', fields_app_infos))
            
        if fields_app_pre_orders is not None:
            
            _query_params.append(('fields[appPreOrders]', fields_app_pre_orders))
            
        if fields_pre_release_versions is not None:
            
            _query_params.append(('fields[preReleaseVersions]', fields_pre_release_versions))
            
        if fields_app_prices is not None:
            
            _query_params.append(('fields[appPrices]', fields_app_prices))
            
        if fields_in_app_purchases is not None:
            
            _query_params.append(('fields[inAppPurchases]', fields_in_app_purchases))
            
        if fields_beta_app_review_details is not None:
            
            _query_params.append(('fields[betaAppReviewDetails]', fields_beta_app_review_details))
            
        if fields_territories is not None:
            
            _query_params.append(('fields[territories]', fields_territories))
            
        if fields_game_center_enabled_versions is not None:
            
            _query_params.append(('fields[gameCenterEnabledVersions]', fields_game_center_enabled_versions))
            
        if fields_app_store_versions is not None:
            
            _query_params.append(('fields[appStoreVersions]', fields_app_store_versions))
            
        if fields_builds is not None:
            
            _query_params.append(('fields[builds]', fields_builds))
            
        if fields_beta_app_localizations is not None:
            
            _query_params.append(('fields[betaAppLocalizations]', fields_beta_app_localizations))
            
        if fields_beta_license_agreements is not None:
            
            _query_params.append(('fields[betaLicenseAgreements]', fields_beta_license_agreements))
            
        if fields_end_user_license_agreements is not None:
            
            _query_params.append(('fields[endUserLicenseAgreements]', fields_end_user_license_agreements))
            
        if limit_app_infos is not None:
            
            _query_params.append(('limit[appInfos]', limit_app_infos))
            
        if limit_app_store_versions is not None:
            
            _query_params.append(('limit[appStoreVersions]', limit_app_store_versions))
            
        if limit_available_territories is not None:
            
            _query_params.append(('limit[availableTerritories]', limit_available_territories))
            
        if limit_beta_app_localizations is not None:
            
            _query_params.append(('limit[betaAppLocalizations]', limit_beta_app_localizations))
            
        if limit_beta_groups is not None:
            
            _query_params.append(('limit[betaGroups]', limit_beta_groups))
            
        if limit_builds is not None:
            
            _query_params.append(('limit[builds]', limit_builds))
            
        if limit_game_center_enabled_versions is not None:
            
            _query_params.append(('limit[gameCenterEnabledVersions]', limit_game_center_enabled_versions))
            
        if limit_in_app_purchases is not None:
            
            _query_params.append(('limit[inAppPurchases]', limit_in_app_purchases))
            
        if limit_pre_release_versions is not None:
            
            _query_params.append(('limit[preReleaseVersions]', limit_pre_release_versions))
            
        if limit_prices is not None:
            
            _query_params.append(('limit[prices]', limit_prices))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def apps_in_app_purchases_get_to_many_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_in_app_purchase_type: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'inAppPurchaseType'")] = None,
        filter_can_be_submitted: Annotated[Optional[List[StrictStr]], Field(description="filter by canBeSubmitted")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; resources will be sorted as specified")] = None,
        fields_in_app_purchases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type inAppPurchases")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> InAppPurchasesResponse:
        """apps_in_app_purchases_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_in_app_purchase_type: filter by attribute 'inAppPurchaseType'
        :type filter_in_app_purchase_type: List[str]
        :param filter_can_be_submitted: filter by canBeSubmitted
        :type filter_can_be_submitted: List[str]
        :param sort: comma-separated list of sort expressions; resources will be sorted as specified
        :type sort: List[str]
        :param fields_in_app_purchases: the fields to include for returned resources of type inAppPurchases
        :type fields_in_app_purchases: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_in_app_purchases_get_to_many_related_serialize(
            id=id,
            filter_in_app_purchase_type=filter_in_app_purchase_type,
            filter_can_be_submitted=filter_can_be_submitted,
            sort=sort,
            fields_in_app_purchases=fields_in_app_purchases,
            fields_apps=fields_apps,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InAppPurchasesResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def apps_in_app_purchases_get_to_many_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_in_app_purchase_type: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'inAppPurchaseType'")] = None,
        filter_can_be_submitted: Annotated[Optional[List[StrictStr]], Field(description="filter by canBeSubmitted")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; resources will be sorted as specified")] = None,
        fields_in_app_purchases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type inAppPurchases")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[InAppPurchasesResponse]:
        """apps_in_app_purchases_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_in_app_purchase_type: filter by attribute 'inAppPurchaseType'
        :type filter_in_app_purchase_type: List[str]
        :param filter_can_be_submitted: filter by canBeSubmitted
        :type filter_can_be_submitted: List[str]
        :param sort: comma-separated list of sort expressions; resources will be sorted as specified
        :type sort: List[str]
        :param fields_in_app_purchases: the fields to include for returned resources of type inAppPurchases
        :type fields_in_app_purchases: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_in_app_purchases_get_to_many_related_serialize(
            id=id,
            filter_in_app_purchase_type=filter_in_app_purchase_type,
            filter_can_be_submitted=filter_can_be_submitted,
            sort=sort,
            fields_in_app_purchases=fields_in_app_purchases,
            fields_apps=fields_apps,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InAppPurchasesResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def apps_in_app_purchases_get_to_many_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_in_app_purchase_type: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'inAppPurchaseType'")] = None,
        filter_can_be_submitted: Annotated[Optional[List[StrictStr]], Field(description="filter by canBeSubmitted")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of sort expressions; resources will be sorted as specified")] = None,
        fields_in_app_purchases: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type inAppPurchases")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """apps_in_app_purchases_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_in_app_purchase_type: filter by attribute 'inAppPurchaseType'
        :type filter_in_app_purchase_type: List[str]
        :param filter_can_be_submitted: filter by canBeSubmitted
        :type filter_can_be_submitted: List[str]
        :param sort: comma-separated list of sort expressions; resources will be sorted as specified
        :type sort: List[str]
        :param fields_in_app_purchases: the fields to include for returned resources of type inAppPurchases
        :type fields_in_app_purchases: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_in_app_purchases_get_to_many_related_serialize(
            id=id,
            filter_in_app_purchase_type=filter_in_app_purchase_type,
            filter_can_be_submitted=filter_can_be_submitted,
            sort=sort,
            fields_in_app_purchases=fields_in_app_purchases,
            fields_apps=fields_apps,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InAppPurchasesResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _apps_in_app_purchases_get_to_many_related_serialize(
        self,
        id,
        filter_in_app_purchase_type,
        filter_can_be_submitted,
        sort,
        fields_in_app_purchases,
        fields_apps,
        limit,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filter[inAppPurchaseType]': 'csv',
            'filter[canBeSubmitted]': 'csv',
            'sort': 'csv',
            'fields[inAppPurchases]': 'csv',
            'fields[apps]': 'csv',
            'include': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if filter_in_app_purchase_type is not None:
            
            _query_params.append(('filter[inAppPurchaseType]', filter_in_app_purchase_type))
            
        if filter_can_be_submitted is not None:
            
            _query_params.append(('filter[canBeSubmitted]', filter_can_be_submitted))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if fields_in_app_purchases is not None:
            
            _query_params.append(('fields[inAppPurchases]', fields_in_app_purchases))
            
        if fields_apps is not None:
            
            _query_params.append(('fields[apps]', fields_apps))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{id}/inAppPurchases',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def apps_perf_power_metrics_get_to_many_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_device_type: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'deviceType'")] = None,
        filter_metric_type: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'metricType'")] = None,
        filter_platform: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'platform'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PerfPowerMetricsResponse:
        """apps_perf_power_metrics_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_device_type: filter by attribute 'deviceType'
        :type filter_device_type: List[str]
        :param filter_metric_type: filter by attribute 'metricType'
        :type filter_metric_type: List[str]
        :param filter_platform: filter by attribute 'platform'
        :type filter_platform: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_perf_power_metrics_get_to_many_related_serialize(
            id=id,
            filter_device_type=filter_device_type,
            filter_metric_type=filter_metric_type,
            filter_platform=filter_platform,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PerfPowerMetricsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def apps_perf_power_metrics_get_to_many_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_device_type: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'deviceType'")] = None,
        filter_metric_type: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'metricType'")] = None,
        filter_platform: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'platform'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PerfPowerMetricsResponse]:
        """apps_perf_power_metrics_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_device_type: filter by attribute 'deviceType'
        :type filter_device_type: List[str]
        :param filter_metric_type: filter by attribute 'metricType'
        :type filter_metric_type: List[str]
        :param filter_platform: filter by attribute 'platform'
        :type filter_platform: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_perf_power_metrics_get_to_many_related_serialize(
            id=id,
            filter_device_type=filter_device_type,
            filter_metric_type=filter_metric_type,
            filter_platform=filter_platform,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PerfPowerMetricsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def apps_perf_power_metrics_get_to_many_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        filter_device_type: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'deviceType'")] = None,
        filter_metric_type: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'metricType'")] = None,
        filter_platform: Annotated[Optional[List[StrictStr]], Field(description="filter by attribute 'platform'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """apps_perf_power_metrics_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param filter_device_type: filter by attribute 'deviceType'
        :type filter_device_type: List[str]
        :param filter_metric_type: filter by attribute 'metricType'
        :type filter_metric_type: List[str]
        :param filter_platform: filter by attribute 'platform'
        :type filter_platform: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_perf_power_metrics_get_to_many_related_serialize(
            id=id,
            filter_device_type=filter_device_type,
            filter_metric_type=filter_metric_type,
            filter_platform=filter_platform,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PerfPowerMetricsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _apps_perf_power_metrics_get_to_many_related_serialize(
        self,
        id,
        filter_device_type,
        filter_metric_type,
        filter_platform,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filter[deviceType]': 'csv',
            'filter[metricType]': 'csv',
            'filter[platform]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if filter_device_type is not None:
            
            _query_params.append(('filter[deviceType]', filter_device_type))
            
        if filter_metric_type is not None:
            
            _query_params.append(('filter[metricType]', filter_metric_type))
            
        if filter_platform is not None:
            
            _query_params.append(('filter[platform]', filter_platform))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{id}/perfPowerMetrics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def apps_pre_order_get_to_one_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_app_pre_orders: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appPreOrders")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AppPreOrderResponse:
        """apps_pre_order_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_app_pre_orders: the fields to include for returned resources of type appPreOrders
        :type fields_app_pre_orders: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_pre_order_get_to_one_related_serialize(
            id=id,
            fields_app_pre_orders=fields_app_pre_orders,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppPreOrderResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def apps_pre_order_get_to_one_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_app_pre_orders: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appPreOrders")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AppPreOrderResponse]:
        """apps_pre_order_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_app_pre_orders: the fields to include for returned resources of type appPreOrders
        :type fields_app_pre_orders: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_pre_order_get_to_one_related_serialize(
            id=id,
            fields_app_pre_orders=fields_app_pre_orders,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppPreOrderResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def apps_pre_order_get_to_one_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_app_pre_orders: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appPreOrders")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """apps_pre_order_get_to_one_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_app_pre_orders: the fields to include for returned resources of type appPreOrders
        :type fields_app_pre_orders: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_pre_order_get_to_one_related_serialize(
            id=id,
            fields_app_pre_orders=fields_app_pre_orders,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppPreOrderResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _apps_pre_order_get_to_one_related_serialize(
        self,
        id,
        fields_app_pre_orders,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[appPreOrders]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_app_pre_orders is not None:
            
            _query_params.append(('fields[appPreOrders]', fields_app_pre_orders))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{id}/preOrder',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def apps_pre_release_versions_get_to_many_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_pre_release_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type preReleaseVersions")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PreReleaseVersionsResponse:
        """apps_pre_release_versions_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_pre_release_versions: the fields to include for returned resources of type preReleaseVersions
        :type fields_pre_release_versions: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_pre_release_versions_get_to_many_related_serialize(
            id=id,
            fields_pre_release_versions=fields_pre_release_versions,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PreReleaseVersionsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def apps_pre_release_versions_get_to_many_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_pre_release_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type preReleaseVersions")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PreReleaseVersionsResponse]:
        """apps_pre_release_versions_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_pre_release_versions: the fields to include for returned resources of type preReleaseVersions
        :type fields_pre_release_versions: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_pre_release_versions_get_to_many_related_serialize(
            id=id,
            fields_pre_release_versions=fields_pre_release_versions,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PreReleaseVersionsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def apps_pre_release_versions_get_to_many_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_pre_release_versions: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type preReleaseVersions")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """apps_pre_release_versions_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_pre_release_versions: the fields to include for returned resources of type preReleaseVersions
        :type fields_pre_release_versions: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_pre_release_versions_get_to_many_related_serialize(
            id=id,
            fields_pre_release_versions=fields_pre_release_versions,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PreReleaseVersionsResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _apps_pre_release_versions_get_to_many_related_serialize(
        self,
        id,
        fields_pre_release_versions,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[preReleaseVersions]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_pre_release_versions is not None:
            
            _query_params.append(('fields[preReleaseVersions]', fields_pre_release_versions))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{id}/preReleaseVersions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def apps_prices_get_to_many_related(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_app_prices: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appPrices")] = None,
        fields_app_price_tiers: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appPriceTiers")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AppPricesResponse:
        """apps_prices_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_app_prices: the fields to include for returned resources of type appPrices
        :type fields_app_prices: List[str]
        :param fields_app_price_tiers: the fields to include for returned resources of type appPriceTiers
        :type fields_app_price_tiers: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_prices_get_to_many_related_serialize(
            id=id,
            fields_app_prices=fields_app_prices,
            fields_app_price_tiers=fields_app_price_tiers,
            fields_apps=fields_apps,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppPricesResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def apps_prices_get_to_many_related_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_app_prices: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appPrices")] = None,
        fields_app_price_tiers: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appPriceTiers")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AppPricesResponse]:
        """apps_prices_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_app_prices: the fields to include for returned resources of type appPrices
        :type fields_app_prices: List[str]
        :param fields_app_price_tiers: the fields to include for returned resources of type appPriceTiers
        :type fields_app_price_tiers: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_prices_get_to_many_related_serialize(
            id=id,
            fields_app_prices=fields_app_prices,
            fields_app_price_tiers=fields_app_price_tiers,
            fields_apps=fields_apps,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppPricesResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def apps_prices_get_to_many_related_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        fields_app_prices: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appPrices")] = None,
        fields_app_price_tiers: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type appPriceTiers")] = None,
        fields_apps: Annotated[Optional[List[StrictStr]], Field(description="the fields to include for returned resources of type apps")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=200, strict=True)]], Field(description="maximum resources per page")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="comma-separated list of relationships to include")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """apps_prices_get_to_many_related


        :param id: the id of the requested resource (required)
        :type id: str
        :param fields_app_prices: the fields to include for returned resources of type appPrices
        :type fields_app_prices: List[str]
        :param fields_app_price_tiers: the fields to include for returned resources of type appPriceTiers
        :type fields_app_price_tiers: List[str]
        :param fields_apps: the fields to include for returned resources of type apps
        :type fields_apps: List[str]
        :param limit: maximum resources per page
        :type limit: int
        :param include: comma-separated list of relationships to include
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_prices_get_to_many_related_serialize(
            id=id,
            fields_app_prices=fields_app_prices,
            fields_app_price_tiers=fields_app_price_tiers,
            fields_apps=fields_apps,
            limit=limit,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppPricesResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _apps_prices_get_to_many_related_serialize(
        self,
        id,
        fields_app_prices,
        fields_app_price_tiers,
        fields_apps,
        limit,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[appPrices]': 'csv',
            'fields[appPriceTiers]': 'csv',
            'fields[apps]': 'csv',
            'include': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_app_prices is not None:
            
            _query_params.append(('fields[appPrices]', fields_app_prices))
            
        if fields_app_price_tiers is not None:
            
            _query_params.append(('fields[appPriceTiers]', fields_app_price_tiers))
            
        if fields_apps is not None:
            
            _query_params.append(('fields[apps]', fields_apps))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{id}/prices',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def apps_update_instance(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        app_update_request: Annotated[AppUpdateRequest, Field(description="App representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AppResponse:
        """apps_update_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param app_update_request: App representation (required)
        :type app_update_request: AppUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_update_instance_serialize(
            id=id,
            app_update_request=app_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def apps_update_instance_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        app_update_request: Annotated[AppUpdateRequest, Field(description="App representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AppResponse]:
        """apps_update_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param app_update_request: App representation (required)
        :type app_update_request: AppUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_update_instance_serialize(
            id=id,
            app_update_request=app_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def apps_update_instance_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="the id of the requested resource")],
        app_update_request: Annotated[AppUpdateRequest, Field(description="App representation")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """apps_update_instance


        :param id: the id of the requested resource (required)
        :type id: str
        :param app_update_request: App representation (required)
        :type app_update_request: AppUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apps_update_instance_serialize(
            id=id,
            app_update_request=app_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppResponse",
            '400': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _apps_update_instance_serialize(
        self,
        id,
        app_update_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if app_update_request is not None:
            _body_params = app_update_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'itc-bearer-token'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/v1/apps/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



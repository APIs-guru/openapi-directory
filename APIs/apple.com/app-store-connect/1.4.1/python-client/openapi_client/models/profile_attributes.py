# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.bundle_id_platform import BundleIdPlatform
from typing import Optional, Set
from typing_extensions import Self

class ProfileAttributes(BaseModel):
    """
    ProfileAttributes
    """ # noqa: E501
    created_date: Optional[datetime] = Field(default=None, alias="createdDate")
    expiration_date: Optional[datetime] = Field(default=None, alias="expirationDate")
    name: Optional[StrictStr] = None
    platform: Optional[BundleIdPlatform] = None
    profile_content: Optional[StrictStr] = Field(default=None, alias="profileContent")
    profile_state: Optional[StrictStr] = Field(default=None, alias="profileState")
    profile_type: Optional[StrictStr] = Field(default=None, alias="profileType")
    uuid: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["createdDate", "expirationDate", "name", "platform", "profileContent", "profileState", "profileType", "uuid"]

    @field_validator('profile_state')
    def profile_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTIVE', 'INVALID']):
            raise ValueError("must be one of enum values ('ACTIVE', 'INVALID')")
        return value

    @field_validator('profile_type')
    def profile_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IOS_APP_DEVELOPMENT', 'IOS_APP_STORE', 'IOS_APP_ADHOC', 'IOS_APP_INHOUSE', 'MAC_APP_DEVELOPMENT', 'MAC_APP_STORE', 'MAC_APP_DIRECT', 'TVOS_APP_DEVELOPMENT', 'TVOS_APP_STORE', 'TVOS_APP_ADHOC', 'TVOS_APP_INHOUSE', 'MAC_CATALYST_APP_DEVELOPMENT', 'MAC_CATALYST_APP_STORE', 'MAC_CATALYST_APP_DIRECT']):
            raise ValueError("must be one of enum values ('IOS_APP_DEVELOPMENT', 'IOS_APP_STORE', 'IOS_APP_ADHOC', 'IOS_APP_INHOUSE', 'MAC_APP_DEVELOPMENT', 'MAC_APP_STORE', 'MAC_APP_DIRECT', 'TVOS_APP_DEVELOPMENT', 'TVOS_APP_STORE', 'TVOS_APP_ADHOC', 'TVOS_APP_INHOUSE', 'MAC_CATALYST_APP_DEVELOPMENT', 'MAC_CATALYST_APP_STORE', 'MAC_CATALYST_APP_DIRECT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProfileAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProfileAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdDate": obj.get("createdDate"),
            "expirationDate": obj.get("expirationDate"),
            "name": obj.get("name"),
            "platform": obj.get("platform"),
            "profileContent": obj.get("profileContent"),
            "profileState": obj.get("profileState"),
            "profileType": obj.get("profileType"),
            "uuid": obj.get("uuid")
        })
        return _obj



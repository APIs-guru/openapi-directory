# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.app import App
from openapi_client.models.app_encryption_declaration import AppEncryptionDeclaration
from openapi_client.models.app_store_version import AppStoreVersion
from openapi_client.models.beta_app_review_submission import BetaAppReviewSubmission
from openapi_client.models.beta_build_localization import BetaBuildLocalization
from openapi_client.models.beta_tester import BetaTester
from openapi_client.models.build_beta_detail import BuildBetaDetail
from openapi_client.models.build_icon import BuildIcon
from openapi_client.models.diagnostic_signature import DiagnosticSignature
from openapi_client.models.perf_power_metric import PerfPowerMetric
from openapi_client.models.prerelease_version import PrereleaseVersion
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

BUILDRESPONSEINCLUDEDINNER_ONE_OF_SCHEMAS = ["App", "AppEncryptionDeclaration", "AppStoreVersion", "BetaAppReviewSubmission", "BetaBuildLocalization", "BetaTester", "BuildBetaDetail", "BuildIcon", "DiagnosticSignature", "PerfPowerMetric", "PrereleaseVersion"]

class BuildResponseIncludedInner(BaseModel):
    """
    BuildResponseIncludedInner
    """
    # data type: PrereleaseVersion
    oneof_schema_1_validator: Optional[PrereleaseVersion] = None
    # data type: BetaTester
    oneof_schema_2_validator: Optional[BetaTester] = None
    # data type: BetaBuildLocalization
    oneof_schema_3_validator: Optional[BetaBuildLocalization] = None
    # data type: AppEncryptionDeclaration
    oneof_schema_4_validator: Optional[AppEncryptionDeclaration] = None
    # data type: BetaAppReviewSubmission
    oneof_schema_5_validator: Optional[BetaAppReviewSubmission] = None
    # data type: App
    oneof_schema_6_validator: Optional[App] = None
    # data type: BuildBetaDetail
    oneof_schema_7_validator: Optional[BuildBetaDetail] = None
    # data type: AppStoreVersion
    oneof_schema_8_validator: Optional[AppStoreVersion] = None
    # data type: BuildIcon
    oneof_schema_9_validator: Optional[BuildIcon] = None
    # data type: PerfPowerMetric
    oneof_schema_10_validator: Optional[PerfPowerMetric] = None
    # data type: DiagnosticSignature
    oneof_schema_11_validator: Optional[DiagnosticSignature] = None
    actual_instance: Optional[Union[App, AppEncryptionDeclaration, AppStoreVersion, BetaAppReviewSubmission, BetaBuildLocalization, BetaTester, BuildBetaDetail, BuildIcon, DiagnosticSignature, PerfPowerMetric, PrereleaseVersion]] = None
    one_of_schemas: Set[str] = { "App", "AppEncryptionDeclaration", "AppStoreVersion", "BetaAppReviewSubmission", "BetaBuildLocalization", "BetaTester", "BuildBetaDetail", "BuildIcon", "DiagnosticSignature", "PerfPowerMetric", "PrereleaseVersion" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = BuildResponseIncludedInner.model_construct()
        error_messages = []
        match = 0
        # validate data type: PrereleaseVersion
        if not isinstance(v, PrereleaseVersion):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PrereleaseVersion`")
        else:
            match += 1
        # validate data type: BetaTester
        if not isinstance(v, BetaTester):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BetaTester`")
        else:
            match += 1
        # validate data type: BetaBuildLocalization
        if not isinstance(v, BetaBuildLocalization):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BetaBuildLocalization`")
        else:
            match += 1
        # validate data type: AppEncryptionDeclaration
        if not isinstance(v, AppEncryptionDeclaration):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AppEncryptionDeclaration`")
        else:
            match += 1
        # validate data type: BetaAppReviewSubmission
        if not isinstance(v, BetaAppReviewSubmission):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BetaAppReviewSubmission`")
        else:
            match += 1
        # validate data type: App
        if not isinstance(v, App):
            error_messages.append(f"Error! Input type `{type(v)}` is not `App`")
        else:
            match += 1
        # validate data type: BuildBetaDetail
        if not isinstance(v, BuildBetaDetail):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BuildBetaDetail`")
        else:
            match += 1
        # validate data type: AppStoreVersion
        if not isinstance(v, AppStoreVersion):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AppStoreVersion`")
        else:
            match += 1
        # validate data type: BuildIcon
        if not isinstance(v, BuildIcon):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BuildIcon`")
        else:
            match += 1
        # validate data type: PerfPowerMetric
        if not isinstance(v, PerfPowerMetric):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PerfPowerMetric`")
        else:
            match += 1
        # validate data type: DiagnosticSignature
        if not isinstance(v, DiagnosticSignature):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DiagnosticSignature`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in BuildResponseIncludedInner with oneOf schemas: App, AppEncryptionDeclaration, AppStoreVersion, BetaAppReviewSubmission, BetaBuildLocalization, BetaTester, BuildBetaDetail, BuildIcon, DiagnosticSignature, PerfPowerMetric, PrereleaseVersion. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in BuildResponseIncludedInner with oneOf schemas: App, AppEncryptionDeclaration, AppStoreVersion, BetaAppReviewSubmission, BetaBuildLocalization, BetaTester, BuildBetaDetail, BuildIcon, DiagnosticSignature, PerfPowerMetric, PrereleaseVersion. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into PrereleaseVersion
        try:
            instance.actual_instance = PrereleaseVersion.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BetaTester
        try:
            instance.actual_instance = BetaTester.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BetaBuildLocalization
        try:
            instance.actual_instance = BetaBuildLocalization.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AppEncryptionDeclaration
        try:
            instance.actual_instance = AppEncryptionDeclaration.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BetaAppReviewSubmission
        try:
            instance.actual_instance = BetaAppReviewSubmission.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into App
        try:
            instance.actual_instance = App.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BuildBetaDetail
        try:
            instance.actual_instance = BuildBetaDetail.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AppStoreVersion
        try:
            instance.actual_instance = AppStoreVersion.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BuildIcon
        try:
            instance.actual_instance = BuildIcon.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PerfPowerMetric
        try:
            instance.actual_instance = PerfPowerMetric.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DiagnosticSignature
        try:
            instance.actual_instance = DiagnosticSignature.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into BuildResponseIncludedInner with oneOf schemas: App, AppEncryptionDeclaration, AppStoreVersion, BetaAppReviewSubmission, BetaBuildLocalization, BetaTester, BuildBetaDetail, BuildIcon, DiagnosticSignature, PerfPowerMetric, PrereleaseVersion. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into BuildResponseIncludedInner with oneOf schemas: App, AppEncryptionDeclaration, AppStoreVersion, BetaAppReviewSubmission, BetaBuildLocalization, BetaTester, BuildBetaDetail, BuildIcon, DiagnosticSignature, PerfPowerMetric, PrereleaseVersion. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], App, AppEncryptionDeclaration, AppStoreVersion, BetaAppReviewSubmission, BetaBuildLocalization, BetaTester, BuildBetaDetail, BuildIcon, DiagnosticSignature, PerfPowerMetric, PrereleaseVersion]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



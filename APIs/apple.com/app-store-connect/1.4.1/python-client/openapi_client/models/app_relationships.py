# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_relationships_app_infos import AppRelationshipsAppInfos
from openapi_client.models.app_relationships_app_store_versions import AppRelationshipsAppStoreVersions
from openapi_client.models.app_relationships_available_territories import AppRelationshipsAvailableTerritories
from openapi_client.models.app_relationships_beta_app_localizations import AppRelationshipsBetaAppLocalizations
from openapi_client.models.app_relationships_beta_app_review_detail import AppRelationshipsBetaAppReviewDetail
from openapi_client.models.app_relationships_beta_groups import AppRelationshipsBetaGroups
from openapi_client.models.app_relationships_beta_license_agreement import AppRelationshipsBetaLicenseAgreement
from openapi_client.models.app_relationships_builds import AppRelationshipsBuilds
from openapi_client.models.app_relationships_end_user_license_agreement import AppRelationshipsEndUserLicenseAgreement
from openapi_client.models.app_relationships_game_center_enabled_versions import AppRelationshipsGameCenterEnabledVersions
from openapi_client.models.app_relationships_in_app_purchases import AppRelationshipsInAppPurchases
from openapi_client.models.app_relationships_pre_order import AppRelationshipsPreOrder
from openapi_client.models.app_relationships_pre_release_versions import AppRelationshipsPreReleaseVersions
from openapi_client.models.app_relationships_prices import AppRelationshipsPrices
from typing import Optional, Set
from typing_extensions import Self

class AppRelationships(BaseModel):
    """
    AppRelationships
    """ # noqa: E501
    app_infos: Optional[AppRelationshipsAppInfos] = Field(default=None, alias="appInfos")
    app_store_versions: Optional[AppRelationshipsAppStoreVersions] = Field(default=None, alias="appStoreVersions")
    available_territories: Optional[AppRelationshipsAvailableTerritories] = Field(default=None, alias="availableTerritories")
    beta_app_localizations: Optional[AppRelationshipsBetaAppLocalizations] = Field(default=None, alias="betaAppLocalizations")
    beta_app_review_detail: Optional[AppRelationshipsBetaAppReviewDetail] = Field(default=None, alias="betaAppReviewDetail")
    beta_groups: Optional[AppRelationshipsBetaGroups] = Field(default=None, alias="betaGroups")
    beta_license_agreement: Optional[AppRelationshipsBetaLicenseAgreement] = Field(default=None, alias="betaLicenseAgreement")
    builds: Optional[AppRelationshipsBuilds] = None
    end_user_license_agreement: Optional[AppRelationshipsEndUserLicenseAgreement] = Field(default=None, alias="endUserLicenseAgreement")
    game_center_enabled_versions: Optional[AppRelationshipsGameCenterEnabledVersions] = Field(default=None, alias="gameCenterEnabledVersions")
    in_app_purchases: Optional[AppRelationshipsInAppPurchases] = Field(default=None, alias="inAppPurchases")
    pre_order: Optional[AppRelationshipsPreOrder] = Field(default=None, alias="preOrder")
    pre_release_versions: Optional[AppRelationshipsPreReleaseVersions] = Field(default=None, alias="preReleaseVersions")
    prices: Optional[AppRelationshipsPrices] = None
    __properties: ClassVar[List[str]] = ["appInfos", "appStoreVersions", "availableTerritories", "betaAppLocalizations", "betaAppReviewDetail", "betaGroups", "betaLicenseAgreement", "builds", "endUserLicenseAgreement", "gameCenterEnabledVersions", "inAppPurchases", "preOrder", "preReleaseVersions", "prices"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppRelationships from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app_infos
        if self.app_infos:
            _dict['appInfos'] = self.app_infos.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_store_versions
        if self.app_store_versions:
            _dict['appStoreVersions'] = self.app_store_versions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of available_territories
        if self.available_territories:
            _dict['availableTerritories'] = self.available_territories.to_dict()
        # override the default output from pydantic by calling `to_dict()` of beta_app_localizations
        if self.beta_app_localizations:
            _dict['betaAppLocalizations'] = self.beta_app_localizations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of beta_app_review_detail
        if self.beta_app_review_detail:
            _dict['betaAppReviewDetail'] = self.beta_app_review_detail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of beta_groups
        if self.beta_groups:
            _dict['betaGroups'] = self.beta_groups.to_dict()
        # override the default output from pydantic by calling `to_dict()` of beta_license_agreement
        if self.beta_license_agreement:
            _dict['betaLicenseAgreement'] = self.beta_license_agreement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of builds
        if self.builds:
            _dict['builds'] = self.builds.to_dict()
        # override the default output from pydantic by calling `to_dict()` of end_user_license_agreement
        if self.end_user_license_agreement:
            _dict['endUserLicenseAgreement'] = self.end_user_license_agreement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of game_center_enabled_versions
        if self.game_center_enabled_versions:
            _dict['gameCenterEnabledVersions'] = self.game_center_enabled_versions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_app_purchases
        if self.in_app_purchases:
            _dict['inAppPurchases'] = self.in_app_purchases.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pre_order
        if self.pre_order:
            _dict['preOrder'] = self.pre_order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pre_release_versions
        if self.pre_release_versions:
            _dict['preReleaseVersions'] = self.pre_release_versions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prices
        if self.prices:
            _dict['prices'] = self.prices.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppRelationships from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appInfos": AppRelationshipsAppInfos.from_dict(obj["appInfos"]) if obj.get("appInfos") is not None else None,
            "appStoreVersions": AppRelationshipsAppStoreVersions.from_dict(obj["appStoreVersions"]) if obj.get("appStoreVersions") is not None else None,
            "availableTerritories": AppRelationshipsAvailableTerritories.from_dict(obj["availableTerritories"]) if obj.get("availableTerritories") is not None else None,
            "betaAppLocalizations": AppRelationshipsBetaAppLocalizations.from_dict(obj["betaAppLocalizations"]) if obj.get("betaAppLocalizations") is not None else None,
            "betaAppReviewDetail": AppRelationshipsBetaAppReviewDetail.from_dict(obj["betaAppReviewDetail"]) if obj.get("betaAppReviewDetail") is not None else None,
            "betaGroups": AppRelationshipsBetaGroups.from_dict(obj["betaGroups"]) if obj.get("betaGroups") is not None else None,
            "betaLicenseAgreement": AppRelationshipsBetaLicenseAgreement.from_dict(obj["betaLicenseAgreement"]) if obj.get("betaLicenseAgreement") is not None else None,
            "builds": AppRelationshipsBuilds.from_dict(obj["builds"]) if obj.get("builds") is not None else None,
            "endUserLicenseAgreement": AppRelationshipsEndUserLicenseAgreement.from_dict(obj["endUserLicenseAgreement"]) if obj.get("endUserLicenseAgreement") is not None else None,
            "gameCenterEnabledVersions": AppRelationshipsGameCenterEnabledVersions.from_dict(obj["gameCenterEnabledVersions"]) if obj.get("gameCenterEnabledVersions") is not None else None,
            "inAppPurchases": AppRelationshipsInAppPurchases.from_dict(obj["inAppPurchases"]) if obj.get("inAppPurchases") is not None else None,
            "preOrder": AppRelationshipsPreOrder.from_dict(obj["preOrder"]) if obj.get("preOrder") is not None else None,
            "preReleaseVersions": AppRelationshipsPreReleaseVersions.from_dict(obj["preReleaseVersions"]) if obj.get("preReleaseVersions") is not None else None,
            "prices": AppRelationshipsPrices.from_dict(obj["prices"]) if obj.get("prices") is not None else None
        })
        return _obj



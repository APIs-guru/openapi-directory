# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class InAppPurchaseAttributes(BaseModel):
    """
    InAppPurchaseAttributes
    """ # noqa: E501
    in_app_purchase_type: Optional[StrictStr] = Field(default=None, alias="inAppPurchaseType")
    product_id: Optional[StrictStr] = Field(default=None, alias="productId")
    reference_name: Optional[StrictStr] = Field(default=None, alias="referenceName")
    state: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["inAppPurchaseType", "productId", "referenceName", "state"]

    @field_validator('in_app_purchase_type')
    def in_app_purchase_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AUTOMATICALLY_RENEWABLE_SUBSCRIPTION', 'NON_CONSUMABLE', 'CONSUMABLE', 'NON_RENEWING_SUBSCRIPTION', 'FREE_SUBSCRIPTION']):
            raise ValueError("must be one of enum values ('AUTOMATICALLY_RENEWABLE_SUBSCRIPTION', 'NON_CONSUMABLE', 'CONSUMABLE', 'NON_RENEWING_SUBSCRIPTION', 'FREE_SUBSCRIPTION')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CREATED', 'DEVELOPER_SIGNED_OFF', 'DEVELOPER_ACTION_NEEDED', 'DELETION_IN_PROGRESS', 'APPROVED', 'DELETED', 'REMOVED_FROM_SALE', 'DEVELOPER_REMOVED_FROM_SALE', 'WAITING_FOR_UPLOAD', 'PROCESSING_CONTENT', 'REPLACED', 'REJECTED', 'WAITING_FOR_SCREENSHOT', 'PREPARE_FOR_SUBMISSION', 'MISSING_METADATA', 'READY_TO_SUBMIT', 'WAITING_FOR_REVIEW', 'IN_REVIEW', 'PENDING_DEVELOPER_RELEASE']):
            raise ValueError("must be one of enum values ('CREATED', 'DEVELOPER_SIGNED_OFF', 'DEVELOPER_ACTION_NEEDED', 'DELETION_IN_PROGRESS', 'APPROVED', 'DELETED', 'REMOVED_FROM_SALE', 'DEVELOPER_REMOVED_FROM_SALE', 'WAITING_FOR_UPLOAD', 'PROCESSING_CONTENT', 'REPLACED', 'REJECTED', 'WAITING_FOR_SCREENSHOT', 'PREPARE_FOR_SUBMISSION', 'MISSING_METADATA', 'READY_TO_SUBMIT', 'WAITING_FOR_REVIEW', 'IN_REVIEW', 'PENDING_DEVELOPER_RELEASE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InAppPurchaseAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InAppPurchaseAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "inAppPurchaseType": obj.get("inAppPurchaseType"),
            "productId": obj.get("productId"),
            "referenceName": obj.get("referenceName"),
            "state": obj.get("state")
        })
        return _obj



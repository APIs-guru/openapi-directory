# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.app_info import AppInfo
from openapi_client.models.app_pre_order import AppPreOrder
from openapi_client.models.app_price import AppPrice
from openapi_client.models.app_store_version import AppStoreVersion
from openapi_client.models.beta_app_localization import BetaAppLocalization
from openapi_client.models.beta_app_review_detail import BetaAppReviewDetail
from openapi_client.models.beta_group import BetaGroup
from openapi_client.models.beta_license_agreement import BetaLicenseAgreement
from openapi_client.models.build import Build
from openapi_client.models.end_user_license_agreement import EndUserLicenseAgreement
from openapi_client.models.game_center_enabled_version import GameCenterEnabledVersion
from openapi_client.models.in_app_purchase import InAppPurchase
from openapi_client.models.perf_power_metric import PerfPowerMetric
from openapi_client.models.prerelease_version import PrereleaseVersion
from openapi_client.models.territory import Territory
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

APPRESPONSEINCLUDEDINNER_ONE_OF_SCHEMAS = ["AppInfo", "AppPreOrder", "AppPrice", "AppStoreVersion", "BetaAppLocalization", "BetaAppReviewDetail", "BetaGroup", "BetaLicenseAgreement", "Build", "EndUserLicenseAgreement", "GameCenterEnabledVersion", "InAppPurchase", "PerfPowerMetric", "PrereleaseVersion", "Territory"]

class AppResponseIncludedInner(BaseModel):
    """
    AppResponseIncludedInner
    """
    # data type: BetaGroup
    oneof_schema_1_validator: Optional[BetaGroup] = None
    # data type: AppStoreVersion
    oneof_schema_2_validator: Optional[AppStoreVersion] = None
    # data type: PrereleaseVersion
    oneof_schema_3_validator: Optional[PrereleaseVersion] = None
    # data type: BetaAppLocalization
    oneof_schema_4_validator: Optional[BetaAppLocalization] = None
    # data type: Build
    oneof_schema_5_validator: Optional[Build] = None
    # data type: BetaLicenseAgreement
    oneof_schema_6_validator: Optional[BetaLicenseAgreement] = None
    # data type: BetaAppReviewDetail
    oneof_schema_7_validator: Optional[BetaAppReviewDetail] = None
    # data type: AppInfo
    oneof_schema_8_validator: Optional[AppInfo] = None
    # data type: EndUserLicenseAgreement
    oneof_schema_9_validator: Optional[EndUserLicenseAgreement] = None
    # data type: AppPreOrder
    oneof_schema_10_validator: Optional[AppPreOrder] = None
    # data type: AppPrice
    oneof_schema_11_validator: Optional[AppPrice] = None
    # data type: Territory
    oneof_schema_12_validator: Optional[Territory] = None
    # data type: InAppPurchase
    oneof_schema_13_validator: Optional[InAppPurchase] = None
    # data type: GameCenterEnabledVersion
    oneof_schema_14_validator: Optional[GameCenterEnabledVersion] = None
    # data type: PerfPowerMetric
    oneof_schema_15_validator: Optional[PerfPowerMetric] = None
    actual_instance: Optional[Union[AppInfo, AppPreOrder, AppPrice, AppStoreVersion, BetaAppLocalization, BetaAppReviewDetail, BetaGroup, BetaLicenseAgreement, Build, EndUserLicenseAgreement, GameCenterEnabledVersion, InAppPurchase, PerfPowerMetric, PrereleaseVersion, Territory]] = None
    one_of_schemas: Set[str] = { "AppInfo", "AppPreOrder", "AppPrice", "AppStoreVersion", "BetaAppLocalization", "BetaAppReviewDetail", "BetaGroup", "BetaLicenseAgreement", "Build", "EndUserLicenseAgreement", "GameCenterEnabledVersion", "InAppPurchase", "PerfPowerMetric", "PrereleaseVersion", "Territory" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = AppResponseIncludedInner.model_construct()
        error_messages = []
        match = 0
        # validate data type: BetaGroup
        if not isinstance(v, BetaGroup):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BetaGroup`")
        else:
            match += 1
        # validate data type: AppStoreVersion
        if not isinstance(v, AppStoreVersion):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AppStoreVersion`")
        else:
            match += 1
        # validate data type: PrereleaseVersion
        if not isinstance(v, PrereleaseVersion):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PrereleaseVersion`")
        else:
            match += 1
        # validate data type: BetaAppLocalization
        if not isinstance(v, BetaAppLocalization):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BetaAppLocalization`")
        else:
            match += 1
        # validate data type: Build
        if not isinstance(v, Build):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Build`")
        else:
            match += 1
        # validate data type: BetaLicenseAgreement
        if not isinstance(v, BetaLicenseAgreement):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BetaLicenseAgreement`")
        else:
            match += 1
        # validate data type: BetaAppReviewDetail
        if not isinstance(v, BetaAppReviewDetail):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BetaAppReviewDetail`")
        else:
            match += 1
        # validate data type: AppInfo
        if not isinstance(v, AppInfo):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AppInfo`")
        else:
            match += 1
        # validate data type: EndUserLicenseAgreement
        if not isinstance(v, EndUserLicenseAgreement):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EndUserLicenseAgreement`")
        else:
            match += 1
        # validate data type: AppPreOrder
        if not isinstance(v, AppPreOrder):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AppPreOrder`")
        else:
            match += 1
        # validate data type: AppPrice
        if not isinstance(v, AppPrice):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AppPrice`")
        else:
            match += 1
        # validate data type: Territory
        if not isinstance(v, Territory):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Territory`")
        else:
            match += 1
        # validate data type: InAppPurchase
        if not isinstance(v, InAppPurchase):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InAppPurchase`")
        else:
            match += 1
        # validate data type: GameCenterEnabledVersion
        if not isinstance(v, GameCenterEnabledVersion):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GameCenterEnabledVersion`")
        else:
            match += 1
        # validate data type: PerfPowerMetric
        if not isinstance(v, PerfPowerMetric):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PerfPowerMetric`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in AppResponseIncludedInner with oneOf schemas: AppInfo, AppPreOrder, AppPrice, AppStoreVersion, BetaAppLocalization, BetaAppReviewDetail, BetaGroup, BetaLicenseAgreement, Build, EndUserLicenseAgreement, GameCenterEnabledVersion, InAppPurchase, PerfPowerMetric, PrereleaseVersion, Territory. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in AppResponseIncludedInner with oneOf schemas: AppInfo, AppPreOrder, AppPrice, AppStoreVersion, BetaAppLocalization, BetaAppReviewDetail, BetaGroup, BetaLicenseAgreement, Build, EndUserLicenseAgreement, GameCenterEnabledVersion, InAppPurchase, PerfPowerMetric, PrereleaseVersion, Territory. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into BetaGroup
        try:
            instance.actual_instance = BetaGroup.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AppStoreVersion
        try:
            instance.actual_instance = AppStoreVersion.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PrereleaseVersion
        try:
            instance.actual_instance = PrereleaseVersion.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BetaAppLocalization
        try:
            instance.actual_instance = BetaAppLocalization.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Build
        try:
            instance.actual_instance = Build.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BetaLicenseAgreement
        try:
            instance.actual_instance = BetaLicenseAgreement.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BetaAppReviewDetail
        try:
            instance.actual_instance = BetaAppReviewDetail.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AppInfo
        try:
            instance.actual_instance = AppInfo.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EndUserLicenseAgreement
        try:
            instance.actual_instance = EndUserLicenseAgreement.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AppPreOrder
        try:
            instance.actual_instance = AppPreOrder.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AppPrice
        try:
            instance.actual_instance = AppPrice.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Territory
        try:
            instance.actual_instance = Territory.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InAppPurchase
        try:
            instance.actual_instance = InAppPurchase.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GameCenterEnabledVersion
        try:
            instance.actual_instance = GameCenterEnabledVersion.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PerfPowerMetric
        try:
            instance.actual_instance = PerfPowerMetric.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into AppResponseIncludedInner with oneOf schemas: AppInfo, AppPreOrder, AppPrice, AppStoreVersion, BetaAppLocalization, BetaAppReviewDetail, BetaGroup, BetaLicenseAgreement, Build, EndUserLicenseAgreement, GameCenterEnabledVersion, InAppPurchase, PerfPowerMetric, PrereleaseVersion, Territory. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into AppResponseIncludedInner with oneOf schemas: AppInfo, AppPreOrder, AppPrice, AppStoreVersion, BetaAppLocalization, BetaAppReviewDetail, BetaGroup, BetaLicenseAgreement, Build, EndUserLicenseAgreement, GameCenterEnabledVersion, InAppPurchase, PerfPowerMetric, PrereleaseVersion, Territory. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AppInfo, AppPreOrder, AppPrice, AppStoreVersion, BetaAppLocalization, BetaAppReviewDetail, BetaGroup, BetaLicenseAgreement, Build, EndUserLicenseAgreement, GameCenterEnabledVersion, InAppPurchase, PerfPowerMetric, PrereleaseVersion, Territory]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



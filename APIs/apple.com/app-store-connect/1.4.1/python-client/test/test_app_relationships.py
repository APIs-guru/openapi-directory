# coding: utf-8

"""
    App Store Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.app_relationships import AppRelationships

class TestAppRelationships(unittest.TestCase):
    """AppRelationships unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AppRelationships:
        """Test AppRelationships
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AppRelationships`
        """
        model = AppRelationships()
        if include_optional:
            return AppRelationships(
                app_infos = openapi_client.models.app_relationships_app_infos.App_relationships_appInfos(
                    data = [
                        openapi_client.models.app_relationships_app_infos_data_inner.App_relationships_appInfos_data_inner(
                            id = '', 
                            type = 'appInfos', )
                        ], 
                    links = openapi_client.models.app_relationships_app_infos_links.App_relationships_appInfos_links(
                        related = '', 
                        self = '', ), 
                    meta = openapi_client.models.paging_information.PagingInformation(
                        paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                            limit = 56, 
                            total = 56, ), ), ),
                app_store_versions = openapi_client.models.app_relationships_app_store_versions.App_relationships_appStoreVersions(
                    data = [
                        openapi_client.models.app_relationships_app_store_versions_data_inner.App_relationships_appStoreVersions_data_inner(
                            id = '', 
                            type = 'appStoreVersions', )
                        ], 
                    links = openapi_client.models.app_relationships_app_infos_links.App_relationships_appInfos_links(
                        related = '', 
                        self = '', ), 
                    meta = openapi_client.models.paging_information.PagingInformation(
                        paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                            limit = 56, 
                            total = 56, ), ), ),
                available_territories = openapi_client.models.app_relationships_available_territories.App_relationships_availableTerritories(
                    data = [
                        openapi_client.models.app_relationships_available_territories_data_inner.App_relationships_availableTerritories_data_inner(
                            id = '', 
                            type = 'territories', )
                        ], 
                    links = openapi_client.models.app_relationships_app_infos_links.App_relationships_appInfos_links(
                        related = '', 
                        self = '', ), 
                    meta = openapi_client.models.paging_information.PagingInformation(
                        paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                            limit = 56, 
                            total = 56, ), ), ),
                beta_app_localizations = openapi_client.models.app_relationships_beta_app_localizations.App_relationships_betaAppLocalizations(
                    data = [
                        openapi_client.models.app_relationships_beta_app_localizations_data_inner.App_relationships_betaAppLocalizations_data_inner(
                            id = '', 
                            type = 'betaAppLocalizations', )
                        ], 
                    links = openapi_client.models.app_relationships_app_infos_links.App_relationships_appInfos_links(
                        related = '', 
                        self = '', ), 
                    meta = openapi_client.models.paging_information.PagingInformation(
                        paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                            limit = 56, 
                            total = 56, ), ), ),
                beta_app_review_detail = openapi_client.models.app_relationships_beta_app_review_detail.App_relationships_betaAppReviewDetail(
                    data = openapi_client.models.app_relationships_beta_app_review_detail_data.App_relationships_betaAppReviewDetail_data(
                        id = '', 
                        type = 'betaAppReviewDetails', ), 
                    links = openapi_client.models.app_relationships_app_infos_links.App_relationships_appInfos_links(
                        related = '', 
                        self = '', ), ),
                beta_groups = openapi_client.models.app_relationships_beta_groups.App_relationships_betaGroups(
                    data = [
                        openapi_client.models.app_relationships_beta_groups_data_inner.App_relationships_betaGroups_data_inner(
                            id = '', 
                            type = 'betaGroups', )
                        ], 
                    links = openapi_client.models.app_relationships_app_infos_links.App_relationships_appInfos_links(
                        related = '', 
                        self = '', ), 
                    meta = openapi_client.models.paging_information.PagingInformation(
                        paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                            limit = 56, 
                            total = 56, ), ), ),
                beta_license_agreement = openapi_client.models.app_relationships_beta_license_agreement.App_relationships_betaLicenseAgreement(
                    data = openapi_client.models.app_relationships_beta_license_agreement_data.App_relationships_betaLicenseAgreement_data(
                        id = '', 
                        type = 'betaLicenseAgreements', ), 
                    links = openapi_client.models.app_relationships_app_infos_links.App_relationships_appInfos_links(
                        related = '', 
                        self = '', ), ),
                builds = openapi_client.models.app_relationships_builds.App_relationships_builds(
                    data = [
                        openapi_client.models.app_relationships_builds_data_inner.App_relationships_builds_data_inner(
                            id = '', 
                            type = 'builds', )
                        ], 
                    links = openapi_client.models.app_relationships_app_infos_links.App_relationships_appInfos_links(
                        related = '', 
                        self = '', ), 
                    meta = openapi_client.models.paging_information.PagingInformation(
                        paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                            limit = 56, 
                            total = 56, ), ), ),
                end_user_license_agreement = openapi_client.models.app_relationships_end_user_license_agreement.App_relationships_endUserLicenseAgreement(
                    data = openapi_client.models.app_relationships_end_user_license_agreement_data.App_relationships_endUserLicenseAgreement_data(
                        id = '', 
                        type = 'endUserLicenseAgreements', ), 
                    links = openapi_client.models.app_relationships_app_infos_links.App_relationships_appInfos_links(
                        related = '', 
                        self = '', ), ),
                game_center_enabled_versions = openapi_client.models.app_relationships_game_center_enabled_versions.App_relationships_gameCenterEnabledVersions(
                    data = [
                        openapi_client.models.app_relationships_game_center_enabled_versions_data_inner.App_relationships_gameCenterEnabledVersions_data_inner(
                            id = '', 
                            type = 'gameCenterEnabledVersions', )
                        ], 
                    links = openapi_client.models.app_relationships_app_infos_links.App_relationships_appInfos_links(
                        related = '', 
                        self = '', ), 
                    meta = openapi_client.models.paging_information.PagingInformation(
                        paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                            limit = 56, 
                            total = 56, ), ), ),
                in_app_purchases = openapi_client.models.app_relationships_in_app_purchases.App_relationships_inAppPurchases(
                    data = [
                        openapi_client.models.app_relationships_in_app_purchases_data_inner.App_relationships_inAppPurchases_data_inner(
                            id = '', 
                            type = 'inAppPurchases', )
                        ], 
                    links = openapi_client.models.app_relationships_app_infos_links.App_relationships_appInfos_links(
                        related = '', 
                        self = '', ), 
                    meta = openapi_client.models.paging_information.PagingInformation(
                        paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                            limit = 56, 
                            total = 56, ), ), ),
                pre_order = openapi_client.models.app_relationships_pre_order.App_relationships_preOrder(
                    data = openapi_client.models.app_relationships_pre_order_data.App_relationships_preOrder_data(
                        id = '', 
                        type = 'appPreOrders', ), 
                    links = openapi_client.models.app_relationships_app_infos_links.App_relationships_appInfos_links(
                        related = '', 
                        self = '', ), ),
                pre_release_versions = openapi_client.models.app_relationships_pre_release_versions.App_relationships_preReleaseVersions(
                    data = [
                        openapi_client.models.app_relationships_pre_release_versions_data_inner.App_relationships_preReleaseVersions_data_inner(
                            id = '', 
                            type = 'preReleaseVersions', )
                        ], 
                    links = openapi_client.models.app_relationships_app_infos_links.App_relationships_appInfos_links(
                        related = '', 
                        self = '', ), 
                    meta = openapi_client.models.paging_information.PagingInformation(
                        paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                            limit = 56, 
                            total = 56, ), ), ),
                prices = openapi_client.models.app_relationships_prices.App_relationships_prices(
                    data = [
                        openapi_client.models.app_relationships_prices_data_inner.App_relationships_prices_data_inner(
                            id = '', 
                            type = 'appPrices', )
                        ], 
                    links = openapi_client.models.app_relationships_app_infos_links.App_relationships_appInfos_links(
                        related = '', 
                        self = '', ), 
                    meta = openapi_client.models.paging_information.PagingInformation(
                        paging = openapi_client.models.paging_information_paging.PagingInformation_paging(
                            limit = 56, 
                            total = 56, ), ), )
            )
        else:
            return AppRelationships(
        )
        """

    def testAppRelationships(self):
        """Test AppRelationships"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

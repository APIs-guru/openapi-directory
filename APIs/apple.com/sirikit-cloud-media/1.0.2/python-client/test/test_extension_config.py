# coding: utf-8

"""
    SiriKit Cloud Media

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.extension_config import ExtensionConfig

class TestExtensionConfig(unittest.TestCase):
    """ExtensionConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ExtensionConfig:
        """Test ExtensionConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ExtensionConfig`
        """
        model = ExtensionConfig()
        if include_optional:
            return ExtensionConfig(
                hdr = {"x-client-type":"headless","x-service-affinity":"cluster1"},
                intent = openapi_client.models.extension_config_intent.ExtensionConfig_intent(
                    add_media = openapi_client.models.extension_config_intent_add_media.ExtensionConfig_intent_addMedia(
                        opt = [
                            'resolveMediaDestination'
                            ], ), 
                    hdr = {"x-service-affinity":"intent2"}, 
                    play_media = openapi_client.models.extension_config_intent_play_media.ExtensionConfig_intent_playMedia(), 
                    update_media_affinity = openapi_client.models.extension_config_intent_update_media_affinity.ExtensionConfig_intent_updateMediaAffinity(), ),
                media = openapi_client.models.extension_config_media.ExtensionConfig_media(
                    queues = openapi_client.models.extension_config_media_queues.ExtensionConfig_media_queues(
                        hdr = {"x-content-min-ttl":1200,"x-media-catalog-region":"en_US"}, 
                        play_media = openapi_client.models.extension_config_media_queues_play_media.ExtensionConfig_media_queues_playMedia(
                            hdr = {"x-headless-client":true}, 
                            url = '/queues/playMedia', ), 
                        update_activity = openapi_client.models.extension_config_media_queues_update_activity.ExtensionConfig_media_queues_updateActivity(
                            hdr = openapi_client.models.hdr.hdr(), 
                            url = '/queues/updateActivity', ), ), ),
                url = '/v2',
                version = '1.0.0'
            )
        else:
            return ExtensionConfig(
                intent = openapi_client.models.extension_config_intent.ExtensionConfig_intent(
                    add_media = openapi_client.models.extension_config_intent_add_media.ExtensionConfig_intent_addMedia(
                        opt = [
                            'resolveMediaDestination'
                            ], ), 
                    hdr = {"x-service-affinity":"intent2"}, 
                    play_media = openapi_client.models.extension_config_intent_play_media.ExtensionConfig_intent_playMedia(), 
                    update_media_affinity = openapi_client.models.extension_config_intent_update_media_affinity.ExtensionConfig_intent_updateMediaAffinity(), ),
                media = openapi_client.models.extension_config_media.ExtensionConfig_media(
                    queues = openapi_client.models.extension_config_media_queues.ExtensionConfig_media_queues(
                        hdr = {"x-content-min-ttl":1200,"x-media-catalog-region":"en_US"}, 
                        play_media = openapi_client.models.extension_config_media_queues_play_media.ExtensionConfig_media_queues_playMedia(
                            hdr = {"x-headless-client":true}, 
                            url = '/queues/playMedia', ), 
                        update_activity = openapi_client.models.extension_config_media_queues_update_activity.ExtensionConfig_media_queues_updateActivity(
                            hdr = openapi_client.models.hdr.hdr(), 
                            url = '/queues/updateActivity', ), ), ),
                version = '1.0.0',
        )
        """

    def testExtensionConfig(self):
        """Test ExtensionConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    SiriKit Cloud Media

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.add_media_intent_handling_resolve_media_items_invocation_response import AddMediaIntentHandlingResolveMediaItemsInvocationResponse

class TestAddMediaIntentHandlingResolveMediaItemsInvocationResponse(unittest.TestCase):
    """AddMediaIntentHandlingResolveMediaItemsInvocationResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AddMediaIntentHandlingResolveMediaItemsInvocationResponse:
        """Test AddMediaIntentHandlingResolveMediaItemsInvocationResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AddMediaIntentHandlingResolveMediaItemsInvocationResponse`
        """
        model = AddMediaIntentHandlingResolveMediaItemsInvocationResponse()
        if include_optional:
            return AddMediaIntentHandlingResolveMediaItemsInvocationResponse(
                method = 'AddMediaIntentHandling.resolveMediaItems',
                result = openapi_client.models.result.result(
                    resolution_result = [
                        openapi_client.models.add_media_media_item_resolution_result.AddMediaMediaItemResolutionResult(
                            class = 'AddMediaMediaItemResolutionResult', 
                            confirmation_required = openapi_client.models.confirmation_required.confirmationRequired(
                                media_item_to_confirm = openapi_client.models.media_item.MediaItem(
                                    artist = '', 
                                    identifier = '', 
                                    title = '', 
                                    type = 'unknown', ), ), 
                            disambiguation = openapi_client.models.disambiguation.disambiguation(
                                media_items_to_disambiguate = [
                                    openapi_client.models.media_item.MediaItem(
                                        artist = '', 
                                        identifier = '', 
                                        title = '', 
                                        type = 'unknown', )
                                    ], ), 
                            success = openapi_client.models.success.success(
                                resolved_media_item = , ), 
                            unsupported = openapi_client.models.unsupported.unsupported(
                                reason = 'loginRequired', ), )
                        ], )
            )
        else:
            return AddMediaIntentHandlingResolveMediaItemsInvocationResponse(
                method = 'AddMediaIntentHandling.resolveMediaItems',
                result = openapi_client.models.result.result(
                    resolution_result = [
                        openapi_client.models.add_media_media_item_resolution_result.AddMediaMediaItemResolutionResult(
                            class = 'AddMediaMediaItemResolutionResult', 
                            confirmation_required = openapi_client.models.confirmation_required.confirmationRequired(
                                media_item_to_confirm = openapi_client.models.media_item.MediaItem(
                                    artist = '', 
                                    identifier = '', 
                                    title = '', 
                                    type = 'unknown', ), ), 
                            disambiguation = openapi_client.models.disambiguation.disambiguation(
                                media_items_to_disambiguate = [
                                    openapi_client.models.media_item.MediaItem(
                                        artist = '', 
                                        identifier = '', 
                                        title = '', 
                                        type = 'unknown', )
                                    ], ), 
                            success = openapi_client.models.success.success(
                                resolved_media_item = , ), 
                            unsupported = openapi_client.models.unsupported.unsupported(
                                reason = 'loginRequired', ), )
                        ], ),
        )
        """

    def testAddMediaIntentHandlingResolveMediaItemsInvocationResponse(self):
        """Test AddMediaIntentHandlingResolveMediaItemsInvocationResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

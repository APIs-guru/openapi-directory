# coding: utf-8

"""
    SiriKit Cloud Media

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.add_media_intent_handling_resolve_media_destination_invocation_response import AddMediaIntentHandlingResolveMediaDestinationInvocationResponse

class TestAddMediaIntentHandlingResolveMediaDestinationInvocationResponse(unittest.TestCase):
    """AddMediaIntentHandlingResolveMediaDestinationInvocationResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AddMediaIntentHandlingResolveMediaDestinationInvocationResponse:
        """Test AddMediaIntentHandlingResolveMediaDestinationInvocationResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AddMediaIntentHandlingResolveMediaDestinationInvocationResponse`
        """
        model = AddMediaIntentHandlingResolveMediaDestinationInvocationResponse()
        if include_optional:
            return AddMediaIntentHandlingResolveMediaDestinationInvocationResponse(
                method = 'AddMediaIntentHandling.resolveMediaDestination',
                result = openapi_client.models.result.result(
                    resolution_result = openapi_client.models.add_media_media_destination_resolution_result.AddMediaMediaDestinationResolutionResult(
                        class = 'AddMediaMediaDestinationResolutionResult', 
                        confirmation_required = openapi_client.models.confirmation_required.confirmationRequired(
                            media_destination_to_confirm = openapi_client.models.media_destination.MediaDestination(
                                media_destination_type = 'library', ), ), 
                        disambiguation = openapi_client.models.disambiguation.disambiguation(
                            media_destinations_to_disambiguate = [
                                openapi_client.models.media_destination.MediaDestination(
                                    media_destination_type = 'library', )
                                ], ), 
                        success = openapi_client.models.success.success(
                            resolved_media_destination = , ), 
                        unsupported = openapi_client.models.unsupported.unsupported(
                            reason = 'playlistNameNotFound', ), ), )
            )
        else:
            return AddMediaIntentHandlingResolveMediaDestinationInvocationResponse(
                method = 'AddMediaIntentHandling.resolveMediaDestination',
                result = openapi_client.models.result.result(
                    resolution_result = openapi_client.models.add_media_media_destination_resolution_result.AddMediaMediaDestinationResolutionResult(
                        class = 'AddMediaMediaDestinationResolutionResult', 
                        confirmation_required = openapi_client.models.confirmation_required.confirmationRequired(
                            media_destination_to_confirm = openapi_client.models.media_destination.MediaDestination(
                                media_destination_type = 'library', ), ), 
                        disambiguation = openapi_client.models.disambiguation.disambiguation(
                            media_destinations_to_disambiguate = [
                                openapi_client.models.media_destination.MediaDestination(
                                    media_destination_type = 'library', )
                                ], ), 
                        success = openapi_client.models.success.success(
                            resolved_media_destination = , ), 
                        unsupported = openapi_client.models.unsupported.unsupported(
                            reason = 'playlistNameNotFound', ), ), ),
        )
        """

    def testAddMediaIntentHandlingResolveMediaDestinationInvocationResponse(self):
        """Test AddMediaIntentHandlingResolveMediaDestinationInvocationResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

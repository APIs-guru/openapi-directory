# coding: utf-8

"""
    SiriKit Cloud Media

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.constraints import Constraints
from openapi_client.models.player_context import PlayerContext
from openapi_client.models.queue_activity_report_event import QueueActivityReportEvent
from openapi_client.models.user_activity import UserActivity
from typing import Optional, Set
from typing_extensions import Self

class UpdateActivityRequest(BaseModel):
    """
    UpdateActivityRequest
    """ # noqa: E501
    constraints: Optional[Constraints] = None
    now_playing: Optional[PlayerContext] = Field(default=None, alias="nowPlaying")
    previously_playing: Optional[PlayerContext] = Field(default=None, alias="previouslyPlaying")
    report: QueueActivityReportEvent
    timestamp: datetime
    user_activity: Optional[UserActivity] = Field(alias="userActivity")
    version: Annotated[str, Field(strict=True)]
    __properties: ClassVar[List[str]] = ["constraints", "nowPlaying", "previouslyPlaying", "report", "timestamp", "userActivity", "version"]

    @field_validator('version')
    def version_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"[0-9]+\.[0-9]+\.[0-9]+", value):
            raise ValueError(r"must validate the regular expression /[0-9]+\.[0-9]+\.[0-9]+/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateActivityRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of constraints
        if self.constraints:
            _dict['constraints'] = self.constraints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of now_playing
        if self.now_playing:
            _dict['nowPlaying'] = self.now_playing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of previously_playing
        if self.previously_playing:
            _dict['previouslyPlaying'] = self.previously_playing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_activity
        if self.user_activity:
            _dict['userActivity'] = self.user_activity.to_dict()
        # set to None if user_activity (nullable) is None
        # and model_fields_set contains the field
        if self.user_activity is None and "user_activity" in self.model_fields_set:
            _dict['userActivity'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateActivityRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "constraints": Constraints.from_dict(obj["constraints"]) if obj.get("constraints") is not None else None,
            "nowPlaying": PlayerContext.from_dict(obj["nowPlaying"]) if obj.get("nowPlaying") is not None else None,
            "previouslyPlaying": PlayerContext.from_dict(obj["previouslyPlaying"]) if obj.get("previouslyPlaying") is not None else None,
            "report": obj.get("report"),
            "timestamp": obj.get("timestamp"),
            "userActivity": UserActivity.from_dict(obj["userActivity"]) if obj.get("userActivity") is not None else None,
            "version": obj.get("version")
        })
        return _obj



# coding: utf-8

"""
    SiriKit Cloud Media

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.content import Content
from openapi_client.models.queue_control_mapping import QueueControlMapping
from openapi_client.models.queue_insert_pointer import QueueInsertPointer
from openapi_client.models.queue_play_pointer import QueuePlayPointer
from typing import Optional, Set
from typing_extensions import Self

class Queue(BaseModel):
    """
    Queue
    """ # noqa: E501
    content: Annotated[List[Content], Field(max_length=1000)]
    content_items_count: Optional[StrictInt] = Field(default=None, alias="contentItemsCount")
    controls: Optional[QueueControlMapping] = None
    identifier: Annotated[str, Field(min_length=1, strict=True, max_length=1024)]
    insert_pointer: Optional[QueueInsertPointer] = Field(default=None, alias="insertPointer")
    next_content_url: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]] = Field(default=None, alias="nextContentUrl")
    play_pointer: Optional[QueuePlayPointer] = Field(default=None, alias="playPointer")
    preroll_seconds: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="prerollSeconds")
    previous_content_url: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]] = Field(default=None, alias="previousContentUrl")
    skips_remaining: Optional[StrictInt] = Field(default=None, alias="skipsRemaining")
    version: Annotated[str, Field(strict=True, max_length=25)]
    __properties: ClassVar[List[str]] = ["content", "contentItemsCount", "controls", "identifier", "insertPointer", "nextContentUrl", "playPointer", "prerollSeconds", "previousContentUrl", "skipsRemaining", "version"]

    @field_validator('version')
    def version_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"[0-9]+\.[0-9]+\.[0-9]+", value):
            raise ValueError(r"must validate the regular expression /[0-9]+\.[0-9]+\.[0-9]+/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Queue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in content (list)
        _items = []
        if self.content:
            for _item_content in self.content:
                if _item_content:
                    _items.append(_item_content.to_dict())
            _dict['content'] = _items
        # override the default output from pydantic by calling `to_dict()` of controls
        if self.controls:
            _dict['controls'] = self.controls.to_dict()
        # override the default output from pydantic by calling `to_dict()` of insert_pointer
        if self.insert_pointer:
            _dict['insertPointer'] = self.insert_pointer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of play_pointer
        if self.play_pointer:
            _dict['playPointer'] = self.play_pointer.to_dict()
        # set to None if content_items_count (nullable) is None
        # and model_fields_set contains the field
        if self.content_items_count is None and "content_items_count" in self.model_fields_set:
            _dict['contentItemsCount'] = None

        # set to None if next_content_url (nullable) is None
        # and model_fields_set contains the field
        if self.next_content_url is None and "next_content_url" in self.model_fields_set:
            _dict['nextContentUrl'] = None

        # set to None if play_pointer (nullable) is None
        # and model_fields_set contains the field
        if self.play_pointer is None and "play_pointer" in self.model_fields_set:
            _dict['playPointer'] = None

        # set to None if previous_content_url (nullable) is None
        # and model_fields_set contains the field
        if self.previous_content_url is None and "previous_content_url" in self.model_fields_set:
            _dict['previousContentUrl'] = None

        # set to None if skips_remaining (nullable) is None
        # and model_fields_set contains the field
        if self.skips_remaining is None and "skips_remaining" in self.model_fields_set:
            _dict['skipsRemaining'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Queue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": [Content.from_dict(_item) for _item in obj["content"]] if obj.get("content") is not None else None,
            "contentItemsCount": obj.get("contentItemsCount"),
            "controls": QueueControlMapping.from_dict(obj["controls"]) if obj.get("controls") is not None else None,
            "identifier": obj.get("identifier"),
            "insertPointer": QueueInsertPointer.from_dict(obj["insertPointer"]) if obj.get("insertPointer") is not None else None,
            "nextContentUrl": obj.get("nextContentUrl"),
            "playPointer": QueuePlayPointer.from_dict(obj["playPointer"]) if obj.get("playPointer") is not None else None,
            "prerollSeconds": obj.get("prerollSeconds"),
            "previousContentUrl": obj.get("previousContentUrl"),
            "skipsRemaining": obj.get("skipsRemaining"),
            "version": obj.get("version")
        })
        return _obj



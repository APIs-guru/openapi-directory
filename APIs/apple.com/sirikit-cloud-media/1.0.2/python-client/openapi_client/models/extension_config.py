# coding: utf-8

"""
    SiriKit Cloud Media

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.extension_config_intent import ExtensionConfigIntent
from openapi_client.models.extension_config_media import ExtensionConfigMedia
from typing import Optional, Set
from typing_extensions import Self

class ExtensionConfig(BaseModel):
    """
    ExtensionConfig
    """ # noqa: E501
    hdr: Optional[Dict[str, Any]] = None
    intent: ExtensionConfigIntent
    media: ExtensionConfigMedia
    url: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2000)]] = None
    version: Annotated[str, Field(strict=True)]
    __properties: ClassVar[List[str]] = ["hdr", "intent", "media", "url", "version"]

    @field_validator('version')
    def version_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"([0-9]+[.]){2}[0-9]+", value):
            raise ValueError(r"must validate the regular expression /([0-9]+[.]){2}[0-9]+/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExtensionConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of intent
        if self.intent:
            _dict['intent'] = self.intent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of media
        if self.media:
            _dict['media'] = self.media.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExtensionConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hdr": obj.get("hdr"),
            "intent": ExtensionConfigIntent.from_dict(obj["intent"]) if obj.get("intent") is not None else None,
            "media": ExtensionConfigMedia.from_dict(obj["media"]) if obj.get("media") is not None else None,
            "url": obj.get("url"),
            "version": obj.get("version")
        })
        return _obj



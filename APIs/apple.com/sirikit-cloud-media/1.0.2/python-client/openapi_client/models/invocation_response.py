# coding: utf-8

"""
    SiriKit Cloud Media

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.execution_metrics import ExecutionMetrics
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.add_media_intent_handling_confirm_invocation_response import AddMediaIntentHandlingConfirmInvocationResponse
    from openapi_client.models.add_media_intent_handling_handle_invocation_response import AddMediaIntentHandlingHandleInvocationResponse
    from openapi_client.models.add_media_intent_handling_resolve_media_destination_invocation_response import AddMediaIntentHandlingResolveMediaDestinationInvocationResponse
    from openapi_client.models.add_media_intent_handling_resolve_media_items_invocation_response import AddMediaIntentHandlingResolveMediaItemsInvocationResponse
    from openapi_client.models.play_media_intent_handling_handle_invocation_response import PlayMediaIntentHandlingHandleInvocationResponse
    from openapi_client.models.play_media_intent_handling_resolve_media_items_invocation_response import PlayMediaIntentHandlingResolveMediaItemsInvocationResponse
    from openapi_client.models.play_media_intent_handling_resolve_play_shuffled_invocation_response import PlayMediaIntentHandlingResolvePlayShuffledInvocationResponse
    from openapi_client.models.play_media_intent_handling_resolve_playback_queue_location_invocation_response import PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse
    from openapi_client.models.play_media_intent_handling_resolve_playback_repeat_mode_invocation_response import PlayMediaIntentHandlingResolvePlaybackRepeatModeInvocationResponse
    from openapi_client.models.play_media_intent_handling_resolve_resume_playback_invocation_response import PlayMediaIntentHandlingResolveResumePlaybackInvocationResponse
    from openapi_client.models.protocol_exception_invocation_response import ProtocolExceptionInvocationResponse
    from openapi_client.models.update_media_affinity_intent_handling_handle_invocation_response import UpdateMediaAffinityIntentHandlingHandleInvocationResponse
    from openapi_client.models.update_media_affinity_intent_handling_resolve_affinity_type_invocation_response import UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse
    from openapi_client.models.update_media_affinity_intent_handling_resolve_media_items_invocation_response import UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse

class InvocationResponse(BaseModel):
    """
    InvocationResponse
    """ # noqa: E501
    debug: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = None
    method: StrictStr
    metrics: Optional[ExecutionMetrics] = None
    result: Optional[Dict[str, Any]]
    __properties: ClassVar[List[str]] = ["debug", "method", "metrics", "result"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'method'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'AddMediaIntentHandling.confirm': 'AddMediaIntentHandlingConfirmInvocationResponse','AddMediaIntentHandling.handle': 'AddMediaIntentHandlingHandleInvocationResponse','AddMediaIntentHandling.resolveMediaDestination': 'AddMediaIntentHandlingResolveMediaDestinationInvocationResponse','AddMediaIntentHandling.resolveMediaItems': 'AddMediaIntentHandlingResolveMediaItemsInvocationResponse','PlayMediaIntentHandling.handle': 'PlayMediaIntentHandlingHandleInvocationResponse','PlayMediaIntentHandling.resolveMediaItems': 'PlayMediaIntentHandlingResolveMediaItemsInvocationResponse','PlayMediaIntentHandling.resolvePlayShuffled': 'PlayMediaIntentHandlingResolvePlayShuffledInvocationResponse','PlayMediaIntentHandling.resolvePlaybackQueueLocation': 'PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse','PlayMediaIntentHandling.resolvePlaybackRepeatMode': 'PlayMediaIntentHandlingResolvePlaybackRepeatModeInvocationResponse','PlayMediaIntentHandling.resolveResumePlayback': 'PlayMediaIntentHandlingResolveResumePlaybackInvocationResponse','ProtocolException': 'ProtocolExceptionInvocationResponse','UpdateMediaAffinityIntentHandling.handle': 'UpdateMediaAffinityIntentHandlingHandleInvocationResponse','UpdateMediaAffinityIntentHandling.resolveAffinityType': 'UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse','UpdateMediaAffinityIntentHandling.resolveMediaItems': 'UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[AddMediaIntentHandlingConfirmInvocationResponse, AddMediaIntentHandlingHandleInvocationResponse, AddMediaIntentHandlingResolveMediaDestinationInvocationResponse, AddMediaIntentHandlingResolveMediaItemsInvocationResponse, PlayMediaIntentHandlingHandleInvocationResponse, PlayMediaIntentHandlingResolveMediaItemsInvocationResponse, PlayMediaIntentHandlingResolvePlayShuffledInvocationResponse, PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse, PlayMediaIntentHandlingResolvePlaybackRepeatModeInvocationResponse, PlayMediaIntentHandlingResolveResumePlaybackInvocationResponse, ProtocolExceptionInvocationResponse, UpdateMediaAffinityIntentHandlingHandleInvocationResponse, UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse, UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse]]:
        """Create an instance of InvocationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metrics
        if self.metrics:
            _dict['metrics'] = self.metrics.to_dict()
        # set to None if result (nullable) is None
        # and model_fields_set contains the field
        if self.result is None and "result" in self.model_fields_set:
            _dict['result'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[AddMediaIntentHandlingConfirmInvocationResponse, AddMediaIntentHandlingHandleInvocationResponse, AddMediaIntentHandlingResolveMediaDestinationInvocationResponse, AddMediaIntentHandlingResolveMediaItemsInvocationResponse, PlayMediaIntentHandlingHandleInvocationResponse, PlayMediaIntentHandlingResolveMediaItemsInvocationResponse, PlayMediaIntentHandlingResolvePlayShuffledInvocationResponse, PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse, PlayMediaIntentHandlingResolvePlaybackRepeatModeInvocationResponse, PlayMediaIntentHandlingResolveResumePlaybackInvocationResponse, ProtocolExceptionInvocationResponse, UpdateMediaAffinityIntentHandlingHandleInvocationResponse, UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse, UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse]]:
        """Create an instance of InvocationResponse from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'AddMediaIntentHandlingConfirmInvocationResponse':
            return import_module("openapi_client.models.add_media_intent_handling_confirm_invocation_response").AddMediaIntentHandlingConfirmInvocationResponse.from_dict(obj)
        if object_type ==  'AddMediaIntentHandlingHandleInvocationResponse':
            return import_module("openapi_client.models.add_media_intent_handling_handle_invocation_response").AddMediaIntentHandlingHandleInvocationResponse.from_dict(obj)
        if object_type ==  'AddMediaIntentHandlingResolveMediaDestinationInvocationResponse':
            return import_module("openapi_client.models.add_media_intent_handling_resolve_media_destination_invocation_response").AddMediaIntentHandlingResolveMediaDestinationInvocationResponse.from_dict(obj)
        if object_type ==  'AddMediaIntentHandlingResolveMediaItemsInvocationResponse':
            return import_module("openapi_client.models.add_media_intent_handling_resolve_media_items_invocation_response").AddMediaIntentHandlingResolveMediaItemsInvocationResponse.from_dict(obj)
        if object_type ==  'PlayMediaIntentHandlingHandleInvocationResponse':
            return import_module("openapi_client.models.play_media_intent_handling_handle_invocation_response").PlayMediaIntentHandlingHandleInvocationResponse.from_dict(obj)
        if object_type ==  'PlayMediaIntentHandlingResolveMediaItemsInvocationResponse':
            return import_module("openapi_client.models.play_media_intent_handling_resolve_media_items_invocation_response").PlayMediaIntentHandlingResolveMediaItemsInvocationResponse.from_dict(obj)
        if object_type ==  'PlayMediaIntentHandlingResolvePlayShuffledInvocationResponse':
            return import_module("openapi_client.models.play_media_intent_handling_resolve_play_shuffled_invocation_response").PlayMediaIntentHandlingResolvePlayShuffledInvocationResponse.from_dict(obj)
        if object_type ==  'PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse':
            return import_module("openapi_client.models.play_media_intent_handling_resolve_playback_queue_location_invocation_response").PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse.from_dict(obj)
        if object_type ==  'PlayMediaIntentHandlingResolvePlaybackRepeatModeInvocationResponse':
            return import_module("openapi_client.models.play_media_intent_handling_resolve_playback_repeat_mode_invocation_response").PlayMediaIntentHandlingResolvePlaybackRepeatModeInvocationResponse.from_dict(obj)
        if object_type ==  'PlayMediaIntentHandlingResolveResumePlaybackInvocationResponse':
            return import_module("openapi_client.models.play_media_intent_handling_resolve_resume_playback_invocation_response").PlayMediaIntentHandlingResolveResumePlaybackInvocationResponse.from_dict(obj)
        if object_type ==  'ProtocolExceptionInvocationResponse':
            return import_module("openapi_client.models.protocol_exception_invocation_response").ProtocolExceptionInvocationResponse.from_dict(obj)
        if object_type ==  'UpdateMediaAffinityIntentHandlingHandleInvocationResponse':
            return import_module("openapi_client.models.update_media_affinity_intent_handling_handle_invocation_response").UpdateMediaAffinityIntentHandlingHandleInvocationResponse.from_dict(obj)
        if object_type ==  'UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse':
            return import_module("openapi_client.models.update_media_affinity_intent_handling_resolve_affinity_type_invocation_response").UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse.from_dict(obj)
        if object_type ==  'UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse':
            return import_module("openapi_client.models.update_media_affinity_intent_handling_resolve_media_items_invocation_response").UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse.from_dict(obj)

        raise ValueError("InvocationResponse failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



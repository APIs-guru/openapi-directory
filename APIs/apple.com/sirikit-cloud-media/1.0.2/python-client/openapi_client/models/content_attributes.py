# coding: utf-8

"""
    SiriKit Cloud Media

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.content_attributes_artwork import ContentAttributesArtwork
from typing import Optional, Set
from typing_extensions import Self

class ContentAttributes(BaseModel):
    """
    ContentAttributes
    """ # noqa: E501
    album_name: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, alias="albumName")
    artist_name: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = Field(default=None, alias="artistName")
    artwork: Optional[ContentAttributesArtwork] = None
    composer_name: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, alias="composerName")
    duration_in_millis: Optional[StrictInt] = Field(default=None, alias="durationInMillis")
    genre_names: Optional[Annotated[List[Annotated[str, Field(strict=True, max_length=250)]], Field(max_length=30)]] = Field(default=None, alias="genreNames")
    name: Optional[Annotated[str, Field(strict=True, max_length=250)]] = None
    track_number: Optional[StrictInt] = Field(default=None, alias="trackNumber")
    __properties: ClassVar[List[str]] = ["albumName", "artistName", "artwork", "composerName", "durationInMillis", "genreNames", "name", "trackNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContentAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of artwork
        if self.artwork:
            _dict['artwork'] = self.artwork.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContentAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "albumName": obj.get("albumName"),
            "artistName": obj.get("artistName"),
            "artwork": ContentAttributesArtwork.from_dict(obj["artwork"]) if obj.get("artwork") is not None else None,
            "composerName": obj.get("composerName"),
            "durationInMillis": obj.get("durationInMillis"),
            "genreNames": obj.get("genreNames"),
            "name": obj.get("name"),
            "trackNumber": obj.get("trackNumber")
        })
        return _obj



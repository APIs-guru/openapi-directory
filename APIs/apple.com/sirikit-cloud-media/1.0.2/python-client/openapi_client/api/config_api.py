# coding: utf-8

"""
    SiriKit Cloud Media

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from openapi_client.models.extension_config import ExtensionConfig

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ConfigApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def extension_configuration(
        self,
        x_applecloudextension_session_id: Annotated[str, Field(min_length=1, strict=True, max_length=128)],
        request_timeout: Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]],
        user_agent: Annotated[str, Field(strict=True, max_length=250)],
        accept_language: StrictStr,
        cache_control: StrictStr,
        x_applecloudextension_retry_count: Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]] = None,
        if_none_match: Optional[Annotated[str, Field(strict=True, max_length=1002)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ExtensionConfig:
        """Configuration Resource


        :param x_applecloudextension_session_id: (required)
        :type x_applecloudextension_session_id: str
        :param request_timeout: (required)
        :type request_timeout: float
        :param user_agent: (required)
        :type user_agent: str
        :param accept_language: (required)
        :type accept_language: str
        :param cache_control: (required)
        :type cache_control: str
        :param x_applecloudextension_retry_count:
        :type x_applecloudextension_retry_count: float
        :param if_none_match:
        :type if_none_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._extension_configuration_serialize(
            x_applecloudextension_session_id=x_applecloudextension_session_id,
            request_timeout=request_timeout,
            user_agent=user_agent,
            accept_language=accept_language,
            cache_control=cache_control,
            x_applecloudextension_retry_count=x_applecloudextension_retry_count,
            if_none_match=if_none_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ExtensionConfig",
            '304': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def extension_configuration_with_http_info(
        self,
        x_applecloudextension_session_id: Annotated[str, Field(min_length=1, strict=True, max_length=128)],
        request_timeout: Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]],
        user_agent: Annotated[str, Field(strict=True, max_length=250)],
        accept_language: StrictStr,
        cache_control: StrictStr,
        x_applecloudextension_retry_count: Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]] = None,
        if_none_match: Optional[Annotated[str, Field(strict=True, max_length=1002)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ExtensionConfig]:
        """Configuration Resource


        :param x_applecloudextension_session_id: (required)
        :type x_applecloudextension_session_id: str
        :param request_timeout: (required)
        :type request_timeout: float
        :param user_agent: (required)
        :type user_agent: str
        :param accept_language: (required)
        :type accept_language: str
        :param cache_control: (required)
        :type cache_control: str
        :param x_applecloudextension_retry_count:
        :type x_applecloudextension_retry_count: float
        :param if_none_match:
        :type if_none_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._extension_configuration_serialize(
            x_applecloudextension_session_id=x_applecloudextension_session_id,
            request_timeout=request_timeout,
            user_agent=user_agent,
            accept_language=accept_language,
            cache_control=cache_control,
            x_applecloudextension_retry_count=x_applecloudextension_retry_count,
            if_none_match=if_none_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ExtensionConfig",
            '304': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def extension_configuration_without_preload_content(
        self,
        x_applecloudextension_session_id: Annotated[str, Field(min_length=1, strict=True, max_length=128)],
        request_timeout: Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]],
        user_agent: Annotated[str, Field(strict=True, max_length=250)],
        accept_language: StrictStr,
        cache_control: StrictStr,
        x_applecloudextension_retry_count: Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]] = None,
        if_none_match: Optional[Annotated[str, Field(strict=True, max_length=1002)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Configuration Resource


        :param x_applecloudextension_session_id: (required)
        :type x_applecloudextension_session_id: str
        :param request_timeout: (required)
        :type request_timeout: float
        :param user_agent: (required)
        :type user_agent: str
        :param accept_language: (required)
        :type accept_language: str
        :param cache_control: (required)
        :type cache_control: str
        :param x_applecloudextension_retry_count:
        :type x_applecloudextension_retry_count: float
        :param if_none_match:
        :type if_none_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._extension_configuration_serialize(
            x_applecloudextension_session_id=x_applecloudextension_session_id,
            request_timeout=request_timeout,
            user_agent=user_agent,
            accept_language=accept_language,
            cache_control=cache_control,
            x_applecloudextension_retry_count=x_applecloudextension_retry_count,
            if_none_match=if_none_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ExtensionConfig",
            '304': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _extension_configuration_serialize(
        self,
        x_applecloudextension_session_id,
        request_timeout,
        user_agent,
        accept_language,
        cache_control,
        x_applecloudextension_retry_count,
        if_none_match,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_applecloudextension_session_id is not None:
            _header_params['x-applecloudextension-session-id'] = x_applecloudextension_session_id
        if x_applecloudextension_retry_count is not None:
            _header_params['x-applecloudextension-retry-count'] = x_applecloudextension_retry_count
        if request_timeout is not None:
            _header_params['Request-Timeout'] = request_timeout
        if user_agent is not None:
            _header_params['User-Agent'] = user_agent
        if accept_language is not None:
            _header_params['Accept-Language'] = accept_language
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        if cache_control is not None:
            _header_params['Cache-Control'] = cache_control
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/jose'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/configuration',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



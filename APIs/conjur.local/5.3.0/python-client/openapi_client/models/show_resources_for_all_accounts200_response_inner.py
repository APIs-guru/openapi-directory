# coding: utf-8

"""
    Conjur

    This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).

    The version of the OpenAPI document: 5.3.0
    Contact: conj_maintainers@cyberark.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.show_resources_for_all_accounts200_response_inner_permissions_inner import ShowResourcesForAllAccounts200ResponseInnerPermissionsInner
from openapi_client.models.show_resources_for_all_accounts200_response_inner_policy_versions_inner import ShowResourcesForAllAccounts200ResponseInnerPolicyVersionsInner
from openapi_client.models.show_resources_for_all_accounts200_response_inner_secrets_inner import ShowResourcesForAllAccounts200ResponseInnerSecretsInner
from typing import Optional, Set
from typing_extensions import Self

class ShowResourcesForAllAccounts200ResponseInner(BaseModel):
    """
    ShowResourcesForAllAccounts200ResponseInner
    """ # noqa: E501
    annotations: Optional[List[StrictStr]] = None
    created_at: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    owner: Optional[StrictStr] = None
    permissions: Optional[List[ShowResourcesForAllAccounts200ResponseInnerPermissionsInner]] = None
    policy: Optional[StrictStr] = None
    policy_versions: Optional[List[ShowResourcesForAllAccounts200ResponseInnerPolicyVersionsInner]] = None
    restricted_to: Optional[List[StrictStr]] = None
    secrets: Optional[List[ShowResourcesForAllAccounts200ResponseInnerSecretsInner]] = None
    __properties: ClassVar[List[str]] = ["annotations", "created_at", "id", "owner", "permissions", "policy", "policy_versions", "restricted_to", "secrets"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShowResourcesForAllAccounts200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in permissions (list)
        _items = []
        if self.permissions:
            for _item_permissions in self.permissions:
                if _item_permissions:
                    _items.append(_item_permissions.to_dict())
            _dict['permissions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in policy_versions (list)
        _items = []
        if self.policy_versions:
            for _item_policy_versions in self.policy_versions:
                if _item_policy_versions:
                    _items.append(_item_policy_versions.to_dict())
            _dict['policy_versions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in secrets (list)
        _items = []
        if self.secrets:
            for _item_secrets in self.secrets:
                if _item_secrets:
                    _items.append(_item_secrets.to_dict())
            _dict['secrets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShowResourcesForAllAccounts200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "created_at": obj.get("created_at"),
            "id": obj.get("id"),
            "owner": obj.get("owner"),
            "permissions": [ShowResourcesForAllAccounts200ResponseInnerPermissionsInner.from_dict(_item) for _item in obj["permissions"]] if obj.get("permissions") is not None else None,
            "policy": obj.get("policy"),
            "policy_versions": [ShowResourcesForAllAccounts200ResponseInnerPolicyVersionsInner.from_dict(_item) for _item in obj["policy_versions"]] if obj.get("policy_versions") is not None else None,
            "restricted_to": obj.get("restricted_to"),
            "secrets": [ShowResourcesForAllAccounts200ResponseInnerSecretsInner.from_dict(_item) for _item in obj["secrets"]] if obj.get("secrets") is not None else None
        })
        return _obj



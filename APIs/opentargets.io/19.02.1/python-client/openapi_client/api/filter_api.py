# coding: utf-8

"""
    Open Targets Platform REST API

    ### The Open Targets Platform REST API  The Open Targets Platform API ('Application Programming Interface') allows programmatic retrieval of the Open Targets Platform data via a set of [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) services.  You can make calls to the latest version of our API using the base URL `https://platform-api.opentargets.io/v3/platform`. Please make sure you use `https` instead of the unencrypted `http` calls, which we do not accept.  We list below the methods available to query our data directly from the API, followed by an interactive interface that you can use to try out the parameters and execute the REST-API calls.  For every request you create, the interactive interface will display both a [curl](https://curl.haxx.se/) command and a request URL that you can use to ensure you get the expected response before using your application or workflow.   Check our documentation for some [API tutorials](https://docs.targetvalidation.org/tutorials/api-tutorials) and [get in touch](mailto:support@targetvalidation.org) if you have any questions.  ### Available Methods  The available methods can be grouped in three types:  * __public__ - Methods that serve the core set of our data. These are stable and we fully supported them. * __private__ - Methods used by the web app to serve additional data not specific to our platform. These methods may change without notice and should be used with caution. * __utils__ - Methods to get statistics and technical data about our API.  ### Supported formats  The methods above are all available via a `GET` request, and will serve outputs as `JSON`.  Alternative output formats, such `xml`, `csv` and `tab`, are also available for some of the methods. However alternative output formats are not supported in interactive interface below where the response will be always in `JSON.  If you have complex queries with large number of parameters, you should use a `POST` request instead of  `GET`.  `POST` methods require a body encoded as `json`. When querying for a specific disease using the latest version of the API, your call would look like the example below:  ```sh curl -X POST -d '{\"disease\":[\"EFO_0000253\"]}' --header 'Content-Type: application/json' https://platform-api.opentargets.io/v3/platform/public/evidence/filter ``` ### How to interpret a response  Each HTTPS response will serve data in headers and body. The headers will give you details about your query, such as how long it took to run.  In the body of the response, you will find the data you have requested for in `JSON` format. The [jq](https://stedolan.github.io/jq/) program is a useful tool to parse the json response while on the command line.  ```sh curl https://platform-api.opentargets.io/v3/platform/public/association/filter\\?target\\=ENSG00000157764 | jq ```  We do not analyse the nature of any specific API queries except for the purposes of improving the performance of our API. Read more in our [privacy section](https://www.targetvalidation.org/terms_of_use#privacy).  How can we make the Open Targets Platform API more useful to you? Would you like additional methods to be implemented? Please [get in touch](mailto:support@targetvalidation.org) and send your suggestions. 

    The version of the OpenAPI document: 19.02.1
    Contact: support@targetvalidation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Optional, Union
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class FilterApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_association_filter_0(
        self,
        target: Annotated[Optional[StrictStr], Field(description="A target identifier listed as target.id.")] = None,
        disease: Annotated[Optional[StrictStr], Field(description="An EFO code listed as disease.id.")] = None,
        therapeutic_area: Annotated[Optional[StrictStr], Field(description="An EFO code of a therapeutic area.")] = None,
        datasource: Annotated[Optional[StrictStr], Field(description="Data source to consider.")] = None,
        datatype: Annotated[Optional[StrictStr], Field(description="Data type to consider.")] = None,
        pathway: Annotated[Optional[StrictStr], Field(description="A Reactome pathway identifier (returning only those targets linked to the specified pathway).")] = None,
        target_class: Annotated[Optional[StrictStr], Field(description="A ChEMBL target class identifier (returning only those targets belonging to the specified class).")] = None,
        uniprotkw: Annotated[Optional[StrictStr], Field(description="A UniProt keyword (meaning all the targets linked to that keyword).")] = None,
        direct: Annotated[Optional[StrictBool], Field(description="If `true`, it returns associations that have at least one direct evidence connecting the target and the disease. If `false` it only returns associations for which there is no direct evidence connecting the target and the disease, but only evidence connecting the target to a children of the disease in the EFO ontology.")] = None,
        datastructure: Annotated[Optional[StrictStr], Field(description="Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Fields you want to retrieve. This will get priority over the data structure requested.")] = None,
        facets: Annotated[Optional[StrictBool], Field(description="Returns facets")] = None,
        scorevalue_min: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points.")] = None,
        scorevalue_max: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by maximum score value.")] = None,
        scorevalue_types: Annotated[Optional[StrictStr], Field(description="Score types to apply the score value min and max filters. The default is `overall`.")] = None,
        size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Maximum amount of results to return. Defaults to 10, max is 10000.")] = None,
        var_from: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="How many initial results should be skipped. Defaults to 0.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Format to get the data back. Can be 'json', 'xml', 'tab' or 'csv'. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort by the given score type. Defaults to 'overall' and descending order. Use '~' prefix to do ascending order e.g. '~overall'. You will call a data type score like: 'datatypes.literature', and a data source as 'datasources.gwas'. Supports multiple entries. ")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Restrict the filtered results to those matching the passed string. The matching is done with a phrase match prefix. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Filter available associations

        More complex queries for associations scores and objects can be done using this method, which allows to sort in different order, restrict to a specific class of diseases or targets, as well as filtering results by score and associated pathways. 

        :param target: A target identifier listed as target.id.
        :type target: str
        :param disease: An EFO code listed as disease.id.
        :type disease: str
        :param therapeutic_area: An EFO code of a therapeutic area.
        :type therapeutic_area: str
        :param datasource: Data source to consider.
        :type datasource: str
        :param datatype: Data type to consider.
        :type datatype: str
        :param pathway: A Reactome pathway identifier (returning only those targets linked to the specified pathway).
        :type pathway: str
        :param target_class: A ChEMBL target class identifier (returning only those targets belonging to the specified class).
        :type target_class: str
        :param uniprotkw: A UniProt keyword (meaning all the targets linked to that keyword).
        :type uniprotkw: str
        :param direct: If `true`, it returns associations that have at least one direct evidence connecting the target and the disease. If `false` it only returns associations for which there is no direct evidence connecting the target and the disease, but only evidence connecting the target to a children of the disease in the EFO ontology.
        :type direct: bool
        :param datastructure: Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'.
        :type datastructure: str
        :param fields: Fields you want to retrieve. This will get priority over the data structure requested.
        :type fields: str
        :param facets: Returns facets
        :type facets: bool
        :param scorevalue_min: Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points.
        :type scorevalue_min: float
        :param scorevalue_max: Filter by maximum score value.
        :type scorevalue_max: float
        :param scorevalue_types: Score types to apply the score value min and max filters. The default is `overall`.
        :type scorevalue_types: str
        :param size: Maximum amount of results to return. Defaults to 10, max is 10000.
        :type size: float
        :param var_from: How many initial results should be skipped. Defaults to 0.
        :type var_from: float
        :param format: Format to get the data back. Can be 'json', 'xml', 'tab' or 'csv'. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON.
        :type format: str
        :param sort: Sort by the given score type. Defaults to 'overall' and descending order. Use '~' prefix to do ascending order e.g. '~overall'. You will call a data type score like: 'datatypes.literature', and a data source as 'datasources.gwas'. Supports multiple entries. 
        :type sort: str
        :param search: Restrict the filtered results to those matching the passed string. The matching is done with a phrase match prefix. 
        :type search: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_association_filter_0_serialize(
            target=target,
            disease=disease,
            therapeutic_area=therapeutic_area,
            datasource=datasource,
            datatype=datatype,
            pathway=pathway,
            target_class=target_class,
            uniprotkw=uniprotkw,
            direct=direct,
            datastructure=datastructure,
            fields=fields,
            facets=facets,
            scorevalue_min=scorevalue_min,
            scorevalue_max=scorevalue_max,
            scorevalue_types=scorevalue_types,
            size=size,
            var_from=var_from,
            format=format,
            sort=sort,
            search=search,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_association_filter_0_with_http_info(
        self,
        target: Annotated[Optional[StrictStr], Field(description="A target identifier listed as target.id.")] = None,
        disease: Annotated[Optional[StrictStr], Field(description="An EFO code listed as disease.id.")] = None,
        therapeutic_area: Annotated[Optional[StrictStr], Field(description="An EFO code of a therapeutic area.")] = None,
        datasource: Annotated[Optional[StrictStr], Field(description="Data source to consider.")] = None,
        datatype: Annotated[Optional[StrictStr], Field(description="Data type to consider.")] = None,
        pathway: Annotated[Optional[StrictStr], Field(description="A Reactome pathway identifier (returning only those targets linked to the specified pathway).")] = None,
        target_class: Annotated[Optional[StrictStr], Field(description="A ChEMBL target class identifier (returning only those targets belonging to the specified class).")] = None,
        uniprotkw: Annotated[Optional[StrictStr], Field(description="A UniProt keyword (meaning all the targets linked to that keyword).")] = None,
        direct: Annotated[Optional[StrictBool], Field(description="If `true`, it returns associations that have at least one direct evidence connecting the target and the disease. If `false` it only returns associations for which there is no direct evidence connecting the target and the disease, but only evidence connecting the target to a children of the disease in the EFO ontology.")] = None,
        datastructure: Annotated[Optional[StrictStr], Field(description="Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Fields you want to retrieve. This will get priority over the data structure requested.")] = None,
        facets: Annotated[Optional[StrictBool], Field(description="Returns facets")] = None,
        scorevalue_min: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points.")] = None,
        scorevalue_max: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by maximum score value.")] = None,
        scorevalue_types: Annotated[Optional[StrictStr], Field(description="Score types to apply the score value min and max filters. The default is `overall`.")] = None,
        size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Maximum amount of results to return. Defaults to 10, max is 10000.")] = None,
        var_from: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="How many initial results should be skipped. Defaults to 0.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Format to get the data back. Can be 'json', 'xml', 'tab' or 'csv'. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort by the given score type. Defaults to 'overall' and descending order. Use '~' prefix to do ascending order e.g. '~overall'. You will call a data type score like: 'datatypes.literature', and a data source as 'datasources.gwas'. Supports multiple entries. ")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Restrict the filtered results to those matching the passed string. The matching is done with a phrase match prefix. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Filter available associations

        More complex queries for associations scores and objects can be done using this method, which allows to sort in different order, restrict to a specific class of diseases or targets, as well as filtering results by score and associated pathways. 

        :param target: A target identifier listed as target.id.
        :type target: str
        :param disease: An EFO code listed as disease.id.
        :type disease: str
        :param therapeutic_area: An EFO code of a therapeutic area.
        :type therapeutic_area: str
        :param datasource: Data source to consider.
        :type datasource: str
        :param datatype: Data type to consider.
        :type datatype: str
        :param pathway: A Reactome pathway identifier (returning only those targets linked to the specified pathway).
        :type pathway: str
        :param target_class: A ChEMBL target class identifier (returning only those targets belonging to the specified class).
        :type target_class: str
        :param uniprotkw: A UniProt keyword (meaning all the targets linked to that keyword).
        :type uniprotkw: str
        :param direct: If `true`, it returns associations that have at least one direct evidence connecting the target and the disease. If `false` it only returns associations for which there is no direct evidence connecting the target and the disease, but only evidence connecting the target to a children of the disease in the EFO ontology.
        :type direct: bool
        :param datastructure: Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'.
        :type datastructure: str
        :param fields: Fields you want to retrieve. This will get priority over the data structure requested.
        :type fields: str
        :param facets: Returns facets
        :type facets: bool
        :param scorevalue_min: Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points.
        :type scorevalue_min: float
        :param scorevalue_max: Filter by maximum score value.
        :type scorevalue_max: float
        :param scorevalue_types: Score types to apply the score value min and max filters. The default is `overall`.
        :type scorevalue_types: str
        :param size: Maximum amount of results to return. Defaults to 10, max is 10000.
        :type size: float
        :param var_from: How many initial results should be skipped. Defaults to 0.
        :type var_from: float
        :param format: Format to get the data back. Can be 'json', 'xml', 'tab' or 'csv'. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON.
        :type format: str
        :param sort: Sort by the given score type. Defaults to 'overall' and descending order. Use '~' prefix to do ascending order e.g. '~overall'. You will call a data type score like: 'datatypes.literature', and a data source as 'datasources.gwas'. Supports multiple entries. 
        :type sort: str
        :param search: Restrict the filtered results to those matching the passed string. The matching is done with a phrase match prefix. 
        :type search: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_association_filter_0_serialize(
            target=target,
            disease=disease,
            therapeutic_area=therapeutic_area,
            datasource=datasource,
            datatype=datatype,
            pathway=pathway,
            target_class=target_class,
            uniprotkw=uniprotkw,
            direct=direct,
            datastructure=datastructure,
            fields=fields,
            facets=facets,
            scorevalue_min=scorevalue_min,
            scorevalue_max=scorevalue_max,
            scorevalue_types=scorevalue_types,
            size=size,
            var_from=var_from,
            format=format,
            sort=sort,
            search=search,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_association_filter_0_without_preload_content(
        self,
        target: Annotated[Optional[StrictStr], Field(description="A target identifier listed as target.id.")] = None,
        disease: Annotated[Optional[StrictStr], Field(description="An EFO code listed as disease.id.")] = None,
        therapeutic_area: Annotated[Optional[StrictStr], Field(description="An EFO code of a therapeutic area.")] = None,
        datasource: Annotated[Optional[StrictStr], Field(description="Data source to consider.")] = None,
        datatype: Annotated[Optional[StrictStr], Field(description="Data type to consider.")] = None,
        pathway: Annotated[Optional[StrictStr], Field(description="A Reactome pathway identifier (returning only those targets linked to the specified pathway).")] = None,
        target_class: Annotated[Optional[StrictStr], Field(description="A ChEMBL target class identifier (returning only those targets belonging to the specified class).")] = None,
        uniprotkw: Annotated[Optional[StrictStr], Field(description="A UniProt keyword (meaning all the targets linked to that keyword).")] = None,
        direct: Annotated[Optional[StrictBool], Field(description="If `true`, it returns associations that have at least one direct evidence connecting the target and the disease. If `false` it only returns associations for which there is no direct evidence connecting the target and the disease, but only evidence connecting the target to a children of the disease in the EFO ontology.")] = None,
        datastructure: Annotated[Optional[StrictStr], Field(description="Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Fields you want to retrieve. This will get priority over the data structure requested.")] = None,
        facets: Annotated[Optional[StrictBool], Field(description="Returns facets")] = None,
        scorevalue_min: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points.")] = None,
        scorevalue_max: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by maximum score value.")] = None,
        scorevalue_types: Annotated[Optional[StrictStr], Field(description="Score types to apply the score value min and max filters. The default is `overall`.")] = None,
        size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Maximum amount of results to return. Defaults to 10, max is 10000.")] = None,
        var_from: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="How many initial results should be skipped. Defaults to 0.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Format to get the data back. Can be 'json', 'xml', 'tab' or 'csv'. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort by the given score type. Defaults to 'overall' and descending order. Use '~' prefix to do ascending order e.g. '~overall'. You will call a data type score like: 'datatypes.literature', and a data source as 'datasources.gwas'. Supports multiple entries. ")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Restrict the filtered results to those matching the passed string. The matching is done with a phrase match prefix. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Filter available associations

        More complex queries for associations scores and objects can be done using this method, which allows to sort in different order, restrict to a specific class of diseases or targets, as well as filtering results by score and associated pathways. 

        :param target: A target identifier listed as target.id.
        :type target: str
        :param disease: An EFO code listed as disease.id.
        :type disease: str
        :param therapeutic_area: An EFO code of a therapeutic area.
        :type therapeutic_area: str
        :param datasource: Data source to consider.
        :type datasource: str
        :param datatype: Data type to consider.
        :type datatype: str
        :param pathway: A Reactome pathway identifier (returning only those targets linked to the specified pathway).
        :type pathway: str
        :param target_class: A ChEMBL target class identifier (returning only those targets belonging to the specified class).
        :type target_class: str
        :param uniprotkw: A UniProt keyword (meaning all the targets linked to that keyword).
        :type uniprotkw: str
        :param direct: If `true`, it returns associations that have at least one direct evidence connecting the target and the disease. If `false` it only returns associations for which there is no direct evidence connecting the target and the disease, but only evidence connecting the target to a children of the disease in the EFO ontology.
        :type direct: bool
        :param datastructure: Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'.
        :type datastructure: str
        :param fields: Fields you want to retrieve. This will get priority over the data structure requested.
        :type fields: str
        :param facets: Returns facets
        :type facets: bool
        :param scorevalue_min: Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points.
        :type scorevalue_min: float
        :param scorevalue_max: Filter by maximum score value.
        :type scorevalue_max: float
        :param scorevalue_types: Score types to apply the score value min and max filters. The default is `overall`.
        :type scorevalue_types: str
        :param size: Maximum amount of results to return. Defaults to 10, max is 10000.
        :type size: float
        :param var_from: How many initial results should be skipped. Defaults to 0.
        :type var_from: float
        :param format: Format to get the data back. Can be 'json', 'xml', 'tab' or 'csv'. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON.
        :type format: str
        :param sort: Sort by the given score type. Defaults to 'overall' and descending order. Use '~' prefix to do ascending order e.g. '~overall'. You will call a data type score like: 'datatypes.literature', and a data source as 'datasources.gwas'. Supports multiple entries. 
        :type sort: str
        :param search: Restrict the filtered results to those matching the passed string. The matching is done with a phrase match prefix. 
        :type search: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_association_filter_0_serialize(
            target=target,
            disease=disease,
            therapeutic_area=therapeutic_area,
            datasource=datasource,
            datatype=datatype,
            pathway=pathway,
            target_class=target_class,
            uniprotkw=uniprotkw,
            direct=direct,
            datastructure=datastructure,
            fields=fields,
            facets=facets,
            scorevalue_min=scorevalue_min,
            scorevalue_max=scorevalue_max,
            scorevalue_types=scorevalue_types,
            size=size,
            var_from=var_from,
            format=format,
            sort=sort,
            search=search,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_association_filter_0_serialize(
        self,
        target,
        disease,
        therapeutic_area,
        datasource,
        datatype,
        pathway,
        target_class,
        uniprotkw,
        direct,
        datastructure,
        fields,
        facets,
        scorevalue_min,
        scorevalue_max,
        scorevalue_types,
        size,
        var_from,
        format,
        sort,
        search,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if target is not None:
            
            _query_params.append(('target', target))
            
        if disease is not None:
            
            _query_params.append(('disease', disease))
            
        if therapeutic_area is not None:
            
            _query_params.append(('therapeutic_area', therapeutic_area))
            
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if datatype is not None:
            
            _query_params.append(('datatype', datatype))
            
        if pathway is not None:
            
            _query_params.append(('pathway', pathway))
            
        if target_class is not None:
            
            _query_params.append(('target_class', target_class))
            
        if uniprotkw is not None:
            
            _query_params.append(('uniprotkw', uniprotkw))
            
        if direct is not None:
            
            _query_params.append(('direct', direct))
            
        if datastructure is not None:
            
            _query_params.append(('datastructure', datastructure))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if facets is not None:
            
            _query_params.append(('facets', facets))
            
        if scorevalue_min is not None:
            
            _query_params.append(('scorevalue_min', scorevalue_min))
            
        if scorevalue_max is not None:
            
            _query_params.append(('scorevalue_max', scorevalue_max))
            
        if scorevalue_types is not None:
            
            _query_params.append(('scorevalue_types', scorevalue_types))
            
        if size is not None:
            
            _query_params.append(('size', size))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if search is not None:
            
            _query_params.append(('search', search))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/platform/public/association/filter',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_evidence_filter_0(
        self,
        target: Annotated[Optional[StrictStr], Field(description="A target identifier listed as target.id.")] = None,
        disease: Annotated[Optional[StrictStr], Field(description="An EFO code listed as disease.id.")] = None,
        data_source: Annotated[Optional[StrictStr], Field(description="Data source to consider.")] = None,
        datatype: Annotated[Optional[StrictStr], Field(description="Data type to consider.")] = None,
        pathway: Annotated[Optional[StrictStr], Field(description="A pathway identifier (meaning all the targets linked to that pathway).")] = None,
        uniprotkw: Annotated[Optional[StrictStr], Field(description="A UniProt keyword (meaning all the targets linked to that keyword).")] = None,
        datastructure: Annotated[Optional[StrictStr], Field(description="Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields you want to retrieve. This will get priority over the data structure requested.")] = None,
        scorevalue_min: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points.")] = None,
        scorevalue_max: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by maximum score value.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort by the given field. The default is 'scores.association_score' in descending order. Use '~' prefix to do ascending order e.g. '~scores.association_score'. It supports multiple entries. ")] = None,
        size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Maximum amount of results to return. Defaults to 10, max is 10000.")] = None,
        var_from: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="How many initial results should be skipped. Defaults to 0.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Format to get the data back. Can be 'json', 'xml', 'tab' or 'csv'. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Filter available evidence

        The filter method allows to retrieve the specific data that supports a connection between targets and diseases. Filters can be used to restrict the results by source and type of data, or limit results to targets which are part of a particular pathway. Minimum and maximum scores can be specified as well as the type of evidence linking target and disease. **Note** that multiple genes and diseases can be specified in the same request. 

        :param target: A target identifier listed as target.id.
        :type target: str
        :param disease: An EFO code listed as disease.id.
        :type disease: str
        :param data_source: Data source to consider.
        :type data_source: str
        :param datatype: Data type to consider.
        :type datatype: str
        :param pathway: A pathway identifier (meaning all the targets linked to that pathway).
        :type pathway: str
        :param uniprotkw: A UniProt keyword (meaning all the targets linked to that keyword).
        :type uniprotkw: str
        :param datastructure: Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'.
        :type datastructure: str
        :param fields: The fields you want to retrieve. This will get priority over the data structure requested.
        :type fields: str
        :param scorevalue_min: Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points.
        :type scorevalue_min: float
        :param scorevalue_max: Filter by maximum score value.
        :type scorevalue_max: float
        :param sort: Sort by the given field. The default is 'scores.association_score' in descending order. Use '~' prefix to do ascending order e.g. '~scores.association_score'. It supports multiple entries. 
        :type sort: str
        :param size: Maximum amount of results to return. Defaults to 10, max is 10000.
        :type size: float
        :param var_from: How many initial results should be skipped. Defaults to 0.
        :type var_from: float
        :param format: Format to get the data back. Can be 'json', 'xml', 'tab' or 'csv'. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_evidence_filter_0_serialize(
            target=target,
            disease=disease,
            data_source=data_source,
            datatype=datatype,
            pathway=pathway,
            uniprotkw=uniprotkw,
            datastructure=datastructure,
            fields=fields,
            scorevalue_min=scorevalue_min,
            scorevalue_max=scorevalue_max,
            sort=sort,
            size=size,
            var_from=var_from,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_evidence_filter_0_with_http_info(
        self,
        target: Annotated[Optional[StrictStr], Field(description="A target identifier listed as target.id.")] = None,
        disease: Annotated[Optional[StrictStr], Field(description="An EFO code listed as disease.id.")] = None,
        data_source: Annotated[Optional[StrictStr], Field(description="Data source to consider.")] = None,
        datatype: Annotated[Optional[StrictStr], Field(description="Data type to consider.")] = None,
        pathway: Annotated[Optional[StrictStr], Field(description="A pathway identifier (meaning all the targets linked to that pathway).")] = None,
        uniprotkw: Annotated[Optional[StrictStr], Field(description="A UniProt keyword (meaning all the targets linked to that keyword).")] = None,
        datastructure: Annotated[Optional[StrictStr], Field(description="Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields you want to retrieve. This will get priority over the data structure requested.")] = None,
        scorevalue_min: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points.")] = None,
        scorevalue_max: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by maximum score value.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort by the given field. The default is 'scores.association_score' in descending order. Use '~' prefix to do ascending order e.g. '~scores.association_score'. It supports multiple entries. ")] = None,
        size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Maximum amount of results to return. Defaults to 10, max is 10000.")] = None,
        var_from: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="How many initial results should be skipped. Defaults to 0.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Format to get the data back. Can be 'json', 'xml', 'tab' or 'csv'. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Filter available evidence

        The filter method allows to retrieve the specific data that supports a connection between targets and diseases. Filters can be used to restrict the results by source and type of data, or limit results to targets which are part of a particular pathway. Minimum and maximum scores can be specified as well as the type of evidence linking target and disease. **Note** that multiple genes and diseases can be specified in the same request. 

        :param target: A target identifier listed as target.id.
        :type target: str
        :param disease: An EFO code listed as disease.id.
        :type disease: str
        :param data_source: Data source to consider.
        :type data_source: str
        :param datatype: Data type to consider.
        :type datatype: str
        :param pathway: A pathway identifier (meaning all the targets linked to that pathway).
        :type pathway: str
        :param uniprotkw: A UniProt keyword (meaning all the targets linked to that keyword).
        :type uniprotkw: str
        :param datastructure: Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'.
        :type datastructure: str
        :param fields: The fields you want to retrieve. This will get priority over the data structure requested.
        :type fields: str
        :param scorevalue_min: Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points.
        :type scorevalue_min: float
        :param scorevalue_max: Filter by maximum score value.
        :type scorevalue_max: float
        :param sort: Sort by the given field. The default is 'scores.association_score' in descending order. Use '~' prefix to do ascending order e.g. '~scores.association_score'. It supports multiple entries. 
        :type sort: str
        :param size: Maximum amount of results to return. Defaults to 10, max is 10000.
        :type size: float
        :param var_from: How many initial results should be skipped. Defaults to 0.
        :type var_from: float
        :param format: Format to get the data back. Can be 'json', 'xml', 'tab' or 'csv'. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_evidence_filter_0_serialize(
            target=target,
            disease=disease,
            data_source=data_source,
            datatype=datatype,
            pathway=pathway,
            uniprotkw=uniprotkw,
            datastructure=datastructure,
            fields=fields,
            scorevalue_min=scorevalue_min,
            scorevalue_max=scorevalue_max,
            sort=sort,
            size=size,
            var_from=var_from,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_evidence_filter_0_without_preload_content(
        self,
        target: Annotated[Optional[StrictStr], Field(description="A target identifier listed as target.id.")] = None,
        disease: Annotated[Optional[StrictStr], Field(description="An EFO code listed as disease.id.")] = None,
        data_source: Annotated[Optional[StrictStr], Field(description="Data source to consider.")] = None,
        datatype: Annotated[Optional[StrictStr], Field(description="Data type to consider.")] = None,
        pathway: Annotated[Optional[StrictStr], Field(description="A pathway identifier (meaning all the targets linked to that pathway).")] = None,
        uniprotkw: Annotated[Optional[StrictStr], Field(description="A UniProt keyword (meaning all the targets linked to that keyword).")] = None,
        datastructure: Annotated[Optional[StrictStr], Field(description="Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields you want to retrieve. This will get priority over the data structure requested.")] = None,
        scorevalue_min: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points.")] = None,
        scorevalue_max: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by maximum score value.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort by the given field. The default is 'scores.association_score' in descending order. Use '~' prefix to do ascending order e.g. '~scores.association_score'. It supports multiple entries. ")] = None,
        size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Maximum amount of results to return. Defaults to 10, max is 10000.")] = None,
        var_from: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="How many initial results should be skipped. Defaults to 0.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Format to get the data back. Can be 'json', 'xml', 'tab' or 'csv'. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Filter available evidence

        The filter method allows to retrieve the specific data that supports a connection between targets and diseases. Filters can be used to restrict the results by source and type of data, or limit results to targets which are part of a particular pathway. Minimum and maximum scores can be specified as well as the type of evidence linking target and disease. **Note** that multiple genes and diseases can be specified in the same request. 

        :param target: A target identifier listed as target.id.
        :type target: str
        :param disease: An EFO code listed as disease.id.
        :type disease: str
        :param data_source: Data source to consider.
        :type data_source: str
        :param datatype: Data type to consider.
        :type datatype: str
        :param pathway: A pathway identifier (meaning all the targets linked to that pathway).
        :type pathway: str
        :param uniprotkw: A UniProt keyword (meaning all the targets linked to that keyword).
        :type uniprotkw: str
        :param datastructure: Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'.
        :type datastructure: str
        :param fields: The fields you want to retrieve. This will get priority over the data structure requested.
        :type fields: str
        :param scorevalue_min: Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points.
        :type scorevalue_min: float
        :param scorevalue_max: Filter by maximum score value.
        :type scorevalue_max: float
        :param sort: Sort by the given field. The default is 'scores.association_score' in descending order. Use '~' prefix to do ascending order e.g. '~scores.association_score'. It supports multiple entries. 
        :type sort: str
        :param size: Maximum amount of results to return. Defaults to 10, max is 10000.
        :type size: float
        :param var_from: How many initial results should be skipped. Defaults to 0.
        :type var_from: float
        :param format: Format to get the data back. Can be 'json', 'xml', 'tab' or 'csv'. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON.
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_evidence_filter_0_serialize(
            target=target,
            disease=disease,
            data_source=data_source,
            datatype=datatype,
            pathway=pathway,
            uniprotkw=uniprotkw,
            datastructure=datastructure,
            fields=fields,
            scorevalue_min=scorevalue_min,
            scorevalue_max=scorevalue_max,
            sort=sort,
            size=size,
            var_from=var_from,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_evidence_filter_0_serialize(
        self,
        target,
        disease,
        data_source,
        datatype,
        pathway,
        uniprotkw,
        datastructure,
        fields,
        scorevalue_min,
        scorevalue_max,
        sort,
        size,
        var_from,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if target is not None:
            
            _query_params.append(('target', target))
            
        if disease is not None:
            
            _query_params.append(('disease', disease))
            
        if data_source is not None:
            
            _query_params.append(('data source', data_source))
            
        if datatype is not None:
            
            _query_params.append(('datatype', datatype))
            
        if pathway is not None:
            
            _query_params.append(('pathway', pathway))
            
        if uniprotkw is not None:
            
            _query_params.append(('uniprotkw', uniprotkw))
            
        if datastructure is not None:
            
            _query_params.append(('datastructure', datastructure))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if scorevalue_min is not None:
            
            _query_params.append(('scorevalue_min', scorevalue_min))
            
        if scorevalue_max is not None:
            
            _query_params.append(('scorevalue_max', scorevalue_max))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if size is not None:
            
            _query_params.append(('size', size))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/platform/public/evidence/filter',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_association_filter_0(
        self,
        body: Annotated[StrictStr, Field(description="Filters to apply when retrieving association objects.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Batch query available associations

        Complex queries and filters for association objects can also be submitted using a JSON object and the equivalent POST method. 

        :param body: Filters to apply when retrieving association objects. (required)
        :type body: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_association_filter_0_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_association_filter_0_with_http_info(
        self,
        body: Annotated[StrictStr, Field(description="Filters to apply when retrieving association objects.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Batch query available associations

        Complex queries and filters for association objects can also be submitted using a JSON object and the equivalent POST method. 

        :param body: Filters to apply when retrieving association objects. (required)
        :type body: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_association_filter_0_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_association_filter_0_without_preload_content(
        self,
        body: Annotated[StrictStr, Field(description="Filters to apply when retrieving association objects.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Batch query available associations

        Complex queries and filters for association objects can also be submitted using a JSON object and the equivalent POST method. 

        :param body: Filters to apply when retrieving association objects. (required)
        :type body: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_association_filter_0_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_association_filter_0_serialize(
        self,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/platform/public/association/filter',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_evidence_filter_0(
        self,
        body: Annotated[StrictStr, Field(description="Filters to apply when retrieving evidence string objects.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Batch filter available evidence

        POST version of [/public/evidence/filter](#!/public/get_public_evidence_filter). Filters can be specified as part of a `json` object in the body, simplifying the submission of queries. 

        :param body: Filters to apply when retrieving evidence string objects. (required)
        :type body: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_evidence_filter_0_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_evidence_filter_0_with_http_info(
        self,
        body: Annotated[StrictStr, Field(description="Filters to apply when retrieving evidence string objects.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Batch filter available evidence

        POST version of [/public/evidence/filter](#!/public/get_public_evidence_filter). Filters can be specified as part of a `json` object in the body, simplifying the submission of queries. 

        :param body: Filters to apply when retrieving evidence string objects. (required)
        :type body: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_evidence_filter_0_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_evidence_filter_0_without_preload_content(
        self,
        body: Annotated[StrictStr, Field(description="Filters to apply when retrieving evidence string objects.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Batch filter available evidence

        POST version of [/public/evidence/filter](#!/public/get_public_evidence_filter). Filters can be specified as part of a `json` object in the body, simplifying the submission of queries. 

        :param body: Filters to apply when retrieving evidence string objects. (required)
        :type body: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_evidence_filter_0_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_evidence_filter_0_serialize(
        self,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/platform/public/evidence/filter',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



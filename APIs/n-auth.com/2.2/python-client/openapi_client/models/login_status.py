# coding: utf-8

"""
    nextAuth API

    API for the nextAuth server

    The version of the OpenAPI document: 2.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LoginStatus(BaseModel):
    """
    LoginStatus
    """ # noqa: E501
    accountid: Optional[StrictInt] = Field(default=None, description="Account id")
    canprovoke: Optional[StrictBool] = Field(default=None, description="True if a login can be pushed from the server, false otherwise")
    hsid: Optional[StrictStr] = Field(default=None, description="Converted session id, used by the websockets")
    loggedin: Optional[StrictBool] = Field(default=None, description="True if the user is loggedin, false otherwise")
    loginqrdata: Optional[StrictStr] = Field(default=None, description="Base64 encoded data that is represented in the login qr code")
    pk: Optional[StrictStr] = Field(default=None, description="Base64 encoded public key of the nextAuth app. This uniquely identifies the account on the nextAuth app, regardless of the username")
    userid: Optional[StrictStr] = Field(default=None, description="User name")
    __properties: ClassVar[List[str]] = ["accountid", "canprovoke", "hsid", "loggedin", "loginqrdata", "pk", "userid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoginStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoginStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountid": obj.get("accountid"),
            "canprovoke": obj.get("canprovoke"),
            "hsid": obj.get("hsid"),
            "loggedin": obj.get("loggedin"),
            "loginqrdata": obj.get("loginqrdata"),
            "pk": obj.get("pk"),
            "userid": obj.get("userid")
        })
        return _obj



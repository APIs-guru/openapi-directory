# coding: utf-8

"""
    nextAuth API

    API for the nextAuth server

    The version of the OpenAPI document: 2.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Server(BaseModel):
    """
    Server
    """ # noqa: E501
    account_count: Optional[StrictInt] = Field(default=None, description="Number of accounts registered with this server", alias="accountCount")
    appandroid: Optional[StrictStr] = Field(default=None, description="URL of the app in Google Play")
    appios: Optional[StrictStr] = Field(default=None, description="URL of the app in the App Store")
    appname: Optional[StrictStr] = Field(default=None, description="name of the app")
    appurl: Optional[StrictStr] = Field(default=None, description="URL (prefix) to launch the app")
    last_login: Optional[StrictInt] = Field(default=None, description="Last login on this server", alias="lastLogin")
    logo: StrictStr = Field(description="Base 64 encoded logo")
    owner: Optional[StrictInt] = Field(default=None, description="Owner id")
    pin_timeout: StrictInt = Field(description="Time (minutes) since the last time the user entered his PIN, that the user is not requested a PIN at login. -1 means that the user is never asked for a PIN before logging in, 0 means that the user is asked every time he wants to login", alias="pinTimeout")
    pin_trans_timeout: StrictInt = Field(description="Time (minutes) since the last time the user entered his PIN, that the user is not requested a PIN at transaction approval. -1 means that the user is never asked for a PIN before approving a transaction, 0 means that the user is asked every time he wants to approve a transaction", alias="pinTransTimeout")
    ping_time: StrictInt = Field(description="Time (seconds) that the nextAuth app has before it needs to reply to a ping request from the nextAuth server (continuous authentication)", alias="pingTime")
    server_flags: List[StrictStr] = Field(description="Server flags", alias="serverFlags")
    server_name: StrictStr = Field(description="Server name", alias="serverName")
    serverid: StrictStr = Field(description="Base64 encoded id of the nextAuth server")
    serverpk: StrictStr = Field(description="Base64 encoded public key of the nextAuth server")
    siteurl: Optional[StrictStr] = Field(default=None, description="URL of the main website")
    wsurl: Optional[StrictStr] = Field(default=None, description="Websocket URL")
    __properties: ClassVar[List[str]] = ["accountCount", "appandroid", "appios", "appname", "appurl", "lastLogin", "logo", "owner", "pinTimeout", "pinTransTimeout", "pingTime", "serverFlags", "serverName", "serverid", "serverpk", "siteurl", "wsurl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Server from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Server from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountCount": obj.get("accountCount"),
            "appandroid": obj.get("appandroid"),
            "appios": obj.get("appios"),
            "appname": obj.get("appname"),
            "appurl": obj.get("appurl"),
            "lastLogin": obj.get("lastLogin"),
            "logo": obj.get("logo"),
            "owner": obj.get("owner"),
            "pinTimeout": obj.get("pinTimeout"),
            "pinTransTimeout": obj.get("pinTransTimeout"),
            "pingTime": obj.get("pingTime"),
            "serverFlags": obj.get("serverFlags"),
            "serverName": obj.get("serverName"),
            "serverid": obj.get("serverid"),
            "serverpk": obj.get("serverpk"),
            "siteurl": obj.get("siteurl"),
            "wsurl": obj.get("wsurl")
        })
        return _obj



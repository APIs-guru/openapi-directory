# coding: utf-8

"""
    nextAuth API

    API for the nextAuth server

    The version of the OpenAPI document: 2.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Account(BaseModel):
    """
    Account
    """ # noqa: E501
    blocked: Optional[StrictBool] = Field(default=None, description="True if the account is blocked, false otherwise")
    client_version: Optional[StrictStr] = Field(default=None, description="Version nextAuth client in the app", alias="clientVersion")
    created: Optional[StrictInt] = Field(default=None, description="Timestamp of creation")
    description: StrictStr = Field(description="Description of the account (e.g. device name)")
    id: StrictInt = Field(description="Account id")
    lastlogin: Optional[StrictInt] = Field(default=None, description="Timestamp of last login")
    lastprovoke: Optional[StrictInt] = Field(default=None, description="Timestamp of last provoke (push message)")
    userid: Optional[StrictStr] = Field(default=None, description="User name")
    __properties: ClassVar[List[str]] = ["blocked", "clientVersion", "created", "description", "id", "lastlogin", "lastprovoke", "userid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Account from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Account from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blocked": obj.get("blocked"),
            "clientVersion": obj.get("clientVersion"),
            "created": obj.get("created"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "lastlogin": obj.get("lastlogin"),
            "lastprovoke": obj.get("lastprovoke"),
            "userid": obj.get("userid")
        })
        return _obj



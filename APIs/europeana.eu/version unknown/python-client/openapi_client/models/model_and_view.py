# coding: utf-8

"""
    Europeana Search & Record API

    This Swagger API console provides an overview of the Europeana Search & Record API. You can build and test anything from the simplest search to a complex query using facetList such as dates, geotags and permissions. For more help and information, head to our comprehensive <a href=\"https://pro.europeana.eu/page/intro\">online documentation</a>.

    The version of the OpenAPI document: version unknown
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.view import View
from typing import Optional, Set
from typing_extensions import Self

class ModelAndView(BaseModel):
    """
    ModelAndView
    """ # noqa: E501
    empty: Optional[StrictBool] = None
    model: Optional[Dict[str, Any]] = None
    model_map: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, alias="modelMap")
    reference: Optional[StrictBool] = None
    status: Optional[StrictStr] = None
    view: Optional[View] = None
    view_name: Optional[StrictStr] = Field(default=None, alias="viewName")
    __properties: ClassVar[List[str]] = ["empty", "model", "modelMap", "reference", "status", "view", "viewName"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['100', '101', '102', '103', '200', '201', '202', '203', '204', '205', '206', '207', '208', '226', '300', '301', '302', '303', '304', '305', '307', '308', '400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '411', '412', '413', '414', '415', '416', '417', '418', '419', '420', '421', '422', '423', '424', '426', '428', '429', '431', '451', '500', '501', '502', '503', '504', '505', '506', '507', '508', '509', '510', '511']):
            raise ValueError("must be one of enum values ('100', '101', '102', '103', '200', '201', '202', '203', '204', '205', '206', '207', '208', '226', '300', '301', '302', '303', '304', '305', '307', '308', '400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '411', '412', '413', '414', '415', '416', '417', '418', '419', '420', '421', '422', '423', '424', '426', '428', '429', '431', '451', '500', '501', '502', '503', '504', '505', '506', '507', '508', '509', '510', '511')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelAndView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of view
        if self.view:
            _dict['view'] = self.view.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelAndView from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "empty": obj.get("empty"),
            "model": obj.get("model"),
            "modelMap": obj.get("modelMap"),
            "reference": obj.get("reference"),
            "status": obj.get("status"),
            "view": View.from_dict(obj["view"]) if obj.get("view") is not None else None,
            "viewName": obj.get("viewName")
        })
        return _obj



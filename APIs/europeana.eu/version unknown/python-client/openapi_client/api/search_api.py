# coding: utf-8

"""
    Europeana Search & Record API

    This Swagger API console provides an overview of the Europeana Search & Record API. You can build and test anything from the simplest search to a complex query using facetList such as dates, geotags and permissions. For more help and information, head to our comprehensive <a href=\"https://pro.europeana.eu/page/intro\">online documentation</a>.

    The version of the OpenAPI document: version unknown
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.model_and_view import ModelAndView
from openapi_client.models.search_request import SearchRequest

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class SearchApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def open_search(
        self,
        search_terms: Annotated[StrictStr, Field(description="searchTerms")],
        count: Annotated[Optional[StrictInt], Field(description="count")] = None,
        start_index: Annotated[Optional[StrictInt], Field(description="startIndex")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ModelAndView:
        """basic search function following the OpenSearch specification


        :param search_terms: searchTerms (required)
        :type search_terms: str
        :param count: count
        :type count: int
        :param start_index: startIndex
        :type start_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._open_search_serialize(
            search_terms=search_terms,
            count=count,
            start_index=start_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def open_search_with_http_info(
        self,
        search_terms: Annotated[StrictStr, Field(description="searchTerms")],
        count: Annotated[Optional[StrictInt], Field(description="count")] = None,
        start_index: Annotated[Optional[StrictInt], Field(description="startIndex")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ModelAndView]:
        """basic search function following the OpenSearch specification


        :param search_terms: searchTerms (required)
        :type search_terms: str
        :param count: count
        :type count: int
        :param start_index: startIndex
        :type start_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._open_search_serialize(
            search_terms=search_terms,
            count=count,
            start_index=start_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def open_search_without_preload_content(
        self,
        search_terms: Annotated[StrictStr, Field(description="searchTerms")],
        count: Annotated[Optional[StrictInt], Field(description="count")] = None,
        start_index: Annotated[Optional[StrictInt], Field(description="startIndex")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """basic search function following the OpenSearch specification


        :param search_terms: searchTerms (required)
        :type search_terms: str
        :param count: count
        :type count: int
        :param start_index: startIndex
        :type start_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._open_search_serialize(
            search_terms=search_terms,
            count=count,
            start_index=start_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _open_search_serialize(
        self,
        search_terms,
        count,
        start_index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if count is not None:
            
            _query_params.append(('count', count))
            
        if search_terms is not None:
            
            _query_params.append(('searchTerms', search_terms))
            
        if start_index is not None:
            
            _query_params.append(('startIndex', start_index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/xml', 
                    'application/rss+xml', 
                    'application/xhtml+xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/record/v2/opensearch.rss',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_records(
        self,
        query: Annotated[StrictStr, Field(description="query")],
        wskey: Annotated[StrictStr, Field(description="wskey")],
        boost: Annotated[Optional[StrictStr], Field(description="boost")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="callback")] = None,
        colourpalette: Annotated[Optional[List[StrictStr]], Field(description="colourpalette")] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="cursor")] = None,
        facet: Annotated[Optional[List[StrictStr]], Field(description="facet")] = None,
        hit_fl: Annotated[Optional[StrictStr], Field(description="hit.fl")] = None,
        hit_selectors: Annotated[Optional[StrictStr], Field(description="hit.selectors")] = None,
        landingpage: Annotated[Optional[StrictBool], Field(description="landingpage")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="lang")] = None,
        media: Annotated[Optional[StrictBool], Field(description="media")] = None,
        profile: Annotated[Optional[StrictStr], Field(description="profile")] = None,
        q_source: Annotated[Optional[StrictStr], Field(description="q.source")] = None,
        q_target: Annotated[Optional[StrictStr], Field(description="q.target")] = None,
        qf: Annotated[Optional[List[StrictStr]], Field(description="qf")] = None,
        reusability: Annotated[Optional[List[StrictStr]], Field(description="reusability")] = None,
        rows: Annotated[Optional[StrictInt], Field(description="rows")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="sort")] = None,
        start: Annotated[Optional[StrictInt], Field(description="start")] = None,
        text_fulltext: Annotated[Optional[StrictBool], Field(description="text_fulltext")] = None,
        theme: Annotated[Optional[StrictStr], Field(description="theme")] = None,
        thumbnail: Annotated[Optional[StrictBool], Field(description="thumbnail")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ModelAndView:
        """search for records


        :param query: query (required)
        :type query: str
        :param wskey: wskey (required)
        :type wskey: str
        :param boost: boost
        :type boost: str
        :param param_callback: callback
        :type param_callback: str
        :param colourpalette: colourpalette
        :type colourpalette: List[str]
        :param cursor: cursor
        :type cursor: str
        :param facet: facet
        :type facet: List[str]
        :param hit_fl: hit.fl
        :type hit_fl: str
        :param hit_selectors: hit.selectors
        :type hit_selectors: str
        :param landingpage: landingpage
        :type landingpage: bool
        :param lang: lang
        :type lang: str
        :param media: media
        :type media: bool
        :param profile: profile
        :type profile: str
        :param q_source: q.source
        :type q_source: str
        :param q_target: q.target
        :type q_target: str
        :param qf: qf
        :type qf: List[str]
        :param reusability: reusability
        :type reusability: List[str]
        :param rows: rows
        :type rows: int
        :param sort: sort
        :type sort: str
        :param start: start
        :type start: int
        :param text_fulltext: text_fulltext
        :type text_fulltext: bool
        :param theme: theme
        :type theme: str
        :param thumbnail: thumbnail
        :type thumbnail: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_records_serialize(
            query=query,
            wskey=wskey,
            boost=boost,
            param_callback=param_callback,
            colourpalette=colourpalette,
            cursor=cursor,
            facet=facet,
            hit_fl=hit_fl,
            hit_selectors=hit_selectors,
            landingpage=landingpage,
            lang=lang,
            media=media,
            profile=profile,
            q_source=q_source,
            q_target=q_target,
            qf=qf,
            reusability=reusability,
            rows=rows,
            sort=sort,
            start=start,
            text_fulltext=text_fulltext,
            theme=theme,
            thumbnail=thumbnail,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_records_with_http_info(
        self,
        query: Annotated[StrictStr, Field(description="query")],
        wskey: Annotated[StrictStr, Field(description="wskey")],
        boost: Annotated[Optional[StrictStr], Field(description="boost")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="callback")] = None,
        colourpalette: Annotated[Optional[List[StrictStr]], Field(description="colourpalette")] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="cursor")] = None,
        facet: Annotated[Optional[List[StrictStr]], Field(description="facet")] = None,
        hit_fl: Annotated[Optional[StrictStr], Field(description="hit.fl")] = None,
        hit_selectors: Annotated[Optional[StrictStr], Field(description="hit.selectors")] = None,
        landingpage: Annotated[Optional[StrictBool], Field(description="landingpage")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="lang")] = None,
        media: Annotated[Optional[StrictBool], Field(description="media")] = None,
        profile: Annotated[Optional[StrictStr], Field(description="profile")] = None,
        q_source: Annotated[Optional[StrictStr], Field(description="q.source")] = None,
        q_target: Annotated[Optional[StrictStr], Field(description="q.target")] = None,
        qf: Annotated[Optional[List[StrictStr]], Field(description="qf")] = None,
        reusability: Annotated[Optional[List[StrictStr]], Field(description="reusability")] = None,
        rows: Annotated[Optional[StrictInt], Field(description="rows")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="sort")] = None,
        start: Annotated[Optional[StrictInt], Field(description="start")] = None,
        text_fulltext: Annotated[Optional[StrictBool], Field(description="text_fulltext")] = None,
        theme: Annotated[Optional[StrictStr], Field(description="theme")] = None,
        thumbnail: Annotated[Optional[StrictBool], Field(description="thumbnail")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ModelAndView]:
        """search for records


        :param query: query (required)
        :type query: str
        :param wskey: wskey (required)
        :type wskey: str
        :param boost: boost
        :type boost: str
        :param param_callback: callback
        :type param_callback: str
        :param colourpalette: colourpalette
        :type colourpalette: List[str]
        :param cursor: cursor
        :type cursor: str
        :param facet: facet
        :type facet: List[str]
        :param hit_fl: hit.fl
        :type hit_fl: str
        :param hit_selectors: hit.selectors
        :type hit_selectors: str
        :param landingpage: landingpage
        :type landingpage: bool
        :param lang: lang
        :type lang: str
        :param media: media
        :type media: bool
        :param profile: profile
        :type profile: str
        :param q_source: q.source
        :type q_source: str
        :param q_target: q.target
        :type q_target: str
        :param qf: qf
        :type qf: List[str]
        :param reusability: reusability
        :type reusability: List[str]
        :param rows: rows
        :type rows: int
        :param sort: sort
        :type sort: str
        :param start: start
        :type start: int
        :param text_fulltext: text_fulltext
        :type text_fulltext: bool
        :param theme: theme
        :type theme: str
        :param thumbnail: thumbnail
        :type thumbnail: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_records_serialize(
            query=query,
            wskey=wskey,
            boost=boost,
            param_callback=param_callback,
            colourpalette=colourpalette,
            cursor=cursor,
            facet=facet,
            hit_fl=hit_fl,
            hit_selectors=hit_selectors,
            landingpage=landingpage,
            lang=lang,
            media=media,
            profile=profile,
            q_source=q_source,
            q_target=q_target,
            qf=qf,
            reusability=reusability,
            rows=rows,
            sort=sort,
            start=start,
            text_fulltext=text_fulltext,
            theme=theme,
            thumbnail=thumbnail,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_records_without_preload_content(
        self,
        query: Annotated[StrictStr, Field(description="query")],
        wskey: Annotated[StrictStr, Field(description="wskey")],
        boost: Annotated[Optional[StrictStr], Field(description="boost")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="callback")] = None,
        colourpalette: Annotated[Optional[List[StrictStr]], Field(description="colourpalette")] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="cursor")] = None,
        facet: Annotated[Optional[List[StrictStr]], Field(description="facet")] = None,
        hit_fl: Annotated[Optional[StrictStr], Field(description="hit.fl")] = None,
        hit_selectors: Annotated[Optional[StrictStr], Field(description="hit.selectors")] = None,
        landingpage: Annotated[Optional[StrictBool], Field(description="landingpage")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="lang")] = None,
        media: Annotated[Optional[StrictBool], Field(description="media")] = None,
        profile: Annotated[Optional[StrictStr], Field(description="profile")] = None,
        q_source: Annotated[Optional[StrictStr], Field(description="q.source")] = None,
        q_target: Annotated[Optional[StrictStr], Field(description="q.target")] = None,
        qf: Annotated[Optional[List[StrictStr]], Field(description="qf")] = None,
        reusability: Annotated[Optional[List[StrictStr]], Field(description="reusability")] = None,
        rows: Annotated[Optional[StrictInt], Field(description="rows")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="sort")] = None,
        start: Annotated[Optional[StrictInt], Field(description="start")] = None,
        text_fulltext: Annotated[Optional[StrictBool], Field(description="text_fulltext")] = None,
        theme: Annotated[Optional[StrictStr], Field(description="theme")] = None,
        thumbnail: Annotated[Optional[StrictBool], Field(description="thumbnail")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """search for records


        :param query: query (required)
        :type query: str
        :param wskey: wskey (required)
        :type wskey: str
        :param boost: boost
        :type boost: str
        :param param_callback: callback
        :type param_callback: str
        :param colourpalette: colourpalette
        :type colourpalette: List[str]
        :param cursor: cursor
        :type cursor: str
        :param facet: facet
        :type facet: List[str]
        :param hit_fl: hit.fl
        :type hit_fl: str
        :param hit_selectors: hit.selectors
        :type hit_selectors: str
        :param landingpage: landingpage
        :type landingpage: bool
        :param lang: lang
        :type lang: str
        :param media: media
        :type media: bool
        :param profile: profile
        :type profile: str
        :param q_source: q.source
        :type q_source: str
        :param q_target: q.target
        :type q_target: str
        :param qf: qf
        :type qf: List[str]
        :param reusability: reusability
        :type reusability: List[str]
        :param rows: rows
        :type rows: int
        :param sort: sort
        :type sort: str
        :param start: start
        :type start: int
        :param text_fulltext: text_fulltext
        :type text_fulltext: bool
        :param theme: theme
        :type theme: str
        :param thumbnail: thumbnail
        :type thumbnail: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_records_serialize(
            query=query,
            wskey=wskey,
            boost=boost,
            param_callback=param_callback,
            colourpalette=colourpalette,
            cursor=cursor,
            facet=facet,
            hit_fl=hit_fl,
            hit_selectors=hit_selectors,
            landingpage=landingpage,
            lang=lang,
            media=media,
            profile=profile,
            q_source=q_source,
            q_target=q_target,
            qf=qf,
            reusability=reusability,
            rows=rows,
            sort=sort,
            start=start,
            text_fulltext=text_fulltext,
            theme=theme,
            thumbnail=thumbnail,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_records_serialize(
        self,
        query,
        wskey,
        boost,
        param_callback,
        colourpalette,
        cursor,
        facet,
        hit_fl,
        hit_selectors,
        landingpage,
        lang,
        media,
        profile,
        q_source,
        q_target,
        qf,
        reusability,
        rows,
        sort,
        start,
        text_fulltext,
        theme,
        thumbnail,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'colourpalette': 'multi',
            'facet': 'multi',
            'qf': 'multi',
            'reusability': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if boost is not None:
            
            _query_params.append(('boost', boost))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if colourpalette is not None:
            
            _query_params.append(('colourpalette', colourpalette))
            
        if cursor is not None:
            
            _query_params.append(('cursor', cursor))
            
        if facet is not None:
            
            _query_params.append(('facet', facet))
            
        if hit_fl is not None:
            
            _query_params.append(('hit.fl', hit_fl))
            
        if hit_selectors is not None:
            
            _query_params.append(('hit.selectors', hit_selectors))
            
        if landingpage is not None:
            
            _query_params.append(('landingpage', landingpage))
            
        if lang is not None:
            
            _query_params.append(('lang', lang))
            
        if media is not None:
            
            _query_params.append(('media', media))
            
        if profile is not None:
            
            _query_params.append(('profile', profile))
            
        if q_source is not None:
            
            _query_params.append(('q.source', q_source))
            
        if q_target is not None:
            
            _query_params.append(('q.target', q_target))
            
        if qf is not None:
            
            _query_params.append(('qf', qf))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        if reusability is not None:
            
            _query_params.append(('reusability', reusability))
            
        if rows is not None:
            
            _query_params.append(('rows', rows))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if text_fulltext is not None:
            
            _query_params.append(('text_fulltext', text_fulltext))
            
        if theme is not None:
            
            _query_params.append(('theme', theme))
            
        if thumbnail is not None:
            
            _query_params.append(('thumbnail', thumbnail))
            
        if wskey is not None:
            
            _query_params.append(('wskey', wskey))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/record/v2/search.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_records_post(
        self,
        wskey: Annotated[StrictStr, Field(description="wskey")],
        search_request: Annotated[SearchRequest, Field(description="searchRequest")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ModelAndView:
        """search for records post


        :param wskey: wskey (required)
        :type wskey: str
        :param search_request: searchRequest (required)
        :type search_request: SearchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_records_post_serialize(
            wskey=wskey,
            search_request=search_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '201': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_records_post_with_http_info(
        self,
        wskey: Annotated[StrictStr, Field(description="wskey")],
        search_request: Annotated[SearchRequest, Field(description="searchRequest")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ModelAndView]:
        """search for records post


        :param wskey: wskey (required)
        :type wskey: str
        :param search_request: searchRequest (required)
        :type search_request: SearchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_records_post_serialize(
            wskey=wskey,
            search_request=search_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '201': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_records_post_without_preload_content(
        self,
        wskey: Annotated[StrictStr, Field(description="wskey")],
        search_request: Annotated[SearchRequest, Field(description="searchRequest")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """search for records post


        :param wskey: wskey (required)
        :type wskey: str
        :param search_request: searchRequest (required)
        :type search_request: SearchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_records_post_serialize(
            wskey=wskey,
            search_request=search_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '201': None,
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_records_post_serialize(
        self,
        wskey,
        search_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if wskey is not None:
            
            _query_params.append(('wskey', wskey))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if search_request is not None:
            _body_params = search_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/record/v2/search.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def translate_query_using_get(
        self,
        language_codes: Annotated[List[StrictStr], Field(description="languageCodes")],
        term: Annotated[StrictStr, Field(description="term")],
        wskey: Annotated[StrictStr, Field(description="wskey")],
        param_callback: Annotated[Optional[StrictStr], Field(description="callback")] = None,
        profile: Annotated[Optional[StrictStr], Field(description="profile")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ModelAndView:
        """translate a term to different languages


        :param language_codes: languageCodes (required)
        :type language_codes: List[str]
        :param term: term (required)
        :type term: str
        :param wskey: wskey (required)
        :type wskey: str
        :param param_callback: callback
        :type param_callback: str
        :param profile: profile
        :type profile: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._translate_query_using_get_serialize(
            language_codes=language_codes,
            term=term,
            wskey=wskey,
            param_callback=param_callback,
            profile=profile,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def translate_query_using_get_with_http_info(
        self,
        language_codes: Annotated[List[StrictStr], Field(description="languageCodes")],
        term: Annotated[StrictStr, Field(description="term")],
        wskey: Annotated[StrictStr, Field(description="wskey")],
        param_callback: Annotated[Optional[StrictStr], Field(description="callback")] = None,
        profile: Annotated[Optional[StrictStr], Field(description="profile")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ModelAndView]:
        """translate a term to different languages


        :param language_codes: languageCodes (required)
        :type language_codes: List[str]
        :param term: term (required)
        :type term: str
        :param wskey: wskey (required)
        :type wskey: str
        :param param_callback: callback
        :type param_callback: str
        :param profile: profile
        :type profile: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._translate_query_using_get_serialize(
            language_codes=language_codes,
            term=term,
            wskey=wskey,
            param_callback=param_callback,
            profile=profile,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def translate_query_using_get_without_preload_content(
        self,
        language_codes: Annotated[List[StrictStr], Field(description="languageCodes")],
        term: Annotated[StrictStr, Field(description="term")],
        wskey: Annotated[StrictStr, Field(description="wskey")],
        param_callback: Annotated[Optional[StrictStr], Field(description="callback")] = None,
        profile: Annotated[Optional[StrictStr], Field(description="profile")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """translate a term to different languages


        :param language_codes: languageCodes (required)
        :type language_codes: List[str]
        :param term: term (required)
        :type term: str
        :param wskey: wskey (required)
        :type wskey: str
        :param param_callback: callback
        :type param_callback: str
        :param profile: profile
        :type profile: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._translate_query_using_get_serialize(
            language_codes=language_codes,
            term=term,
            wskey=wskey,
            param_callback=param_callback,
            profile=profile,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _translate_query_using_get_serialize(
        self,
        language_codes,
        term,
        wskey,
        param_callback,
        profile,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'languageCodes': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if language_codes is not None:
            
            _query_params.append(('languageCodes', language_codes))
            
        if profile is not None:
            
            _query_params.append(('profile', profile))
            
        if term is not None:
            
            _query_params.append(('term', term))
            
        if wskey is not None:
            
            _query_params.append(('wskey', wskey))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/record/v2/translateQuery.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



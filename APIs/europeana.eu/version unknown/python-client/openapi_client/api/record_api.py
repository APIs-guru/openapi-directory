# coding: utf-8

"""
    Europeana Search & Record API

    This Swagger API console provides an overview of the Europeana Search & Record API. You can build and test anything from the simplest search to a complex query using facetList such as dates, geotags and permissions. For more help and information, head to our comprehensive <a href=\"https://pro.europeana.eu/page/intro\">online documentation</a>.

    The version of the OpenAPI document: version unknown
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.model_and_view import ModelAndView

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class RecordApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_single_record_json(
        self,
        collection_id: Annotated[StrictStr, Field(description="collectionId")],
        record_id: Annotated[StrictStr, Field(description="recordId")],
        wskey: Annotated[StrictStr, Field(description="wskey")],
        param_callback: Annotated[Optional[StrictStr], Field(description="callback")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="lang")] = None,
        profile: Annotated[Optional[StrictStr], Field(description="profile")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ModelAndView:
        """get a single record in JSON format


        :param collection_id: collectionId (required)
        :type collection_id: str
        :param record_id: recordId (required)
        :type record_id: str
        :param wskey: wskey (required)
        :type wskey: str
        :param param_callback: callback
        :type param_callback: str
        :param lang: lang
        :type lang: str
        :param profile: profile
        :type profile: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_single_record_json_serialize(
            collection_id=collection_id,
            record_id=record_id,
            wskey=wskey,
            param_callback=param_callback,
            lang=lang,
            profile=profile,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_single_record_json_with_http_info(
        self,
        collection_id: Annotated[StrictStr, Field(description="collectionId")],
        record_id: Annotated[StrictStr, Field(description="recordId")],
        wskey: Annotated[StrictStr, Field(description="wskey")],
        param_callback: Annotated[Optional[StrictStr], Field(description="callback")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="lang")] = None,
        profile: Annotated[Optional[StrictStr], Field(description="profile")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ModelAndView]:
        """get a single record in JSON format


        :param collection_id: collectionId (required)
        :type collection_id: str
        :param record_id: recordId (required)
        :type record_id: str
        :param wskey: wskey (required)
        :type wskey: str
        :param param_callback: callback
        :type param_callback: str
        :param lang: lang
        :type lang: str
        :param profile: profile
        :type profile: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_single_record_json_serialize(
            collection_id=collection_id,
            record_id=record_id,
            wskey=wskey,
            param_callback=param_callback,
            lang=lang,
            profile=profile,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_single_record_json_without_preload_content(
        self,
        collection_id: Annotated[StrictStr, Field(description="collectionId")],
        record_id: Annotated[StrictStr, Field(description="recordId")],
        wskey: Annotated[StrictStr, Field(description="wskey")],
        param_callback: Annotated[Optional[StrictStr], Field(description="callback")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="lang")] = None,
        profile: Annotated[Optional[StrictStr], Field(description="profile")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get a single record in JSON format


        :param collection_id: collectionId (required)
        :type collection_id: str
        :param record_id: recordId (required)
        :type record_id: str
        :param wskey: wskey (required)
        :type wskey: str
        :param param_callback: callback
        :type param_callback: str
        :param lang: lang
        :type lang: str
        :param profile: profile
        :type profile: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_single_record_json_serialize(
            collection_id=collection_id,
            record_id=record_id,
            wskey=wskey,
            param_callback=param_callback,
            lang=lang,
            profile=profile,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_single_record_json_serialize(
        self,
        collection_id,
        record_id,
        wskey,
        param_callback,
        lang,
        profile,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if collection_id is not None:
            _path_params['collectionId'] = collection_id
        if record_id is not None:
            _path_params['recordId'] = record_id
        # process the query parameters
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if lang is not None:
            
            _query_params.append(('lang', lang))
            
        if profile is not None:
            
            _query_params.append(('profile', profile))
            
        if wskey is not None:
            
            _query_params.append(('wskey', wskey))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json;charset=UTF-8'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/record/v2/{collectionId}/{recordId}.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_single_record_json_ld(
        self,
        collection_id: Annotated[StrictStr, Field(description="collectionId")],
        record_id: Annotated[StrictStr, Field(description="recordId")],
        wskey: Annotated[StrictStr, Field(description="wskey")],
        param_callback: Annotated[Optional[StrictStr], Field(description="callback")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="lang")] = None,
        profile: Annotated[Optional[StrictStr], Field(description="profile")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ModelAndView:
        """get single record in JSON LD format


        :param collection_id: collectionId (required)
        :type collection_id: str
        :param record_id: recordId (required)
        :type record_id: str
        :param wskey: wskey (required)
        :type wskey: str
        :param param_callback: callback
        :type param_callback: str
        :param lang: lang
        :type lang: str
        :param profile: profile
        :type profile: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_single_record_json_ld_serialize(
            collection_id=collection_id,
            record_id=record_id,
            wskey=wskey,
            param_callback=param_callback,
            lang=lang,
            profile=profile,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_single_record_json_ld_with_http_info(
        self,
        collection_id: Annotated[StrictStr, Field(description="collectionId")],
        record_id: Annotated[StrictStr, Field(description="recordId")],
        wskey: Annotated[StrictStr, Field(description="wskey")],
        param_callback: Annotated[Optional[StrictStr], Field(description="callback")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="lang")] = None,
        profile: Annotated[Optional[StrictStr], Field(description="profile")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ModelAndView]:
        """get single record in JSON LD format


        :param collection_id: collectionId (required)
        :type collection_id: str
        :param record_id: recordId (required)
        :type record_id: str
        :param wskey: wskey (required)
        :type wskey: str
        :param param_callback: callback
        :type param_callback: str
        :param lang: lang
        :type lang: str
        :param profile: profile
        :type profile: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_single_record_json_ld_serialize(
            collection_id=collection_id,
            record_id=record_id,
            wskey=wskey,
            param_callback=param_callback,
            lang=lang,
            profile=profile,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_single_record_json_ld_without_preload_content(
        self,
        collection_id: Annotated[StrictStr, Field(description="collectionId")],
        record_id: Annotated[StrictStr, Field(description="recordId")],
        wskey: Annotated[StrictStr, Field(description="wskey")],
        param_callback: Annotated[Optional[StrictStr], Field(description="callback")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="lang")] = None,
        profile: Annotated[Optional[StrictStr], Field(description="profile")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get single record in JSON LD format


        :param collection_id: collectionId (required)
        :type collection_id: str
        :param record_id: recordId (required)
        :type record_id: str
        :param wskey: wskey (required)
        :type wskey: str
        :param param_callback: callback
        :type param_callback: str
        :param lang: lang
        :type lang: str
        :param profile: profile
        :type profile: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_single_record_json_ld_serialize(
            collection_id=collection_id,
            record_id=record_id,
            wskey=wskey,
            param_callback=param_callback,
            lang=lang,
            profile=profile,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_single_record_json_ld_serialize(
        self,
        collection_id,
        record_id,
        wskey,
        param_callback,
        lang,
        profile,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if collection_id is not None:
            _path_params['collectionId'] = collection_id
        if record_id is not None:
            _path_params['recordId'] = record_id
        # process the query parameters
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if lang is not None:
            
            _query_params.append(('lang', lang))
            
        if profile is not None:
            
            _query_params.append(('profile', profile))
            
        if wskey is not None:
            
            _query_params.append(('wskey', wskey))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json;charset=UTF-8', 
                    'application/ld+json;charset=UTF-8'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/record/v2/{collectionId}/{recordId}.jsonld',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_single_record_rdf(
        self,
        collection_id: Annotated[StrictStr, Field(description="collectionId")],
        record_id: Annotated[StrictStr, Field(description="recordId")],
        wskey: Annotated[StrictStr, Field(description="wskey")],
        lang: Annotated[Optional[StrictStr], Field(description="lang")] = None,
        profile: Annotated[Optional[StrictStr], Field(description="profile")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ModelAndView:
        """get single record in RDF format)


        :param collection_id: collectionId (required)
        :type collection_id: str
        :param record_id: recordId (required)
        :type record_id: str
        :param wskey: wskey (required)
        :type wskey: str
        :param lang: lang
        :type lang: str
        :param profile: profile
        :type profile: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_single_record_rdf_serialize(
            collection_id=collection_id,
            record_id=record_id,
            wskey=wskey,
            lang=lang,
            profile=profile,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_single_record_rdf_with_http_info(
        self,
        collection_id: Annotated[StrictStr, Field(description="collectionId")],
        record_id: Annotated[StrictStr, Field(description="recordId")],
        wskey: Annotated[StrictStr, Field(description="wskey")],
        lang: Annotated[Optional[StrictStr], Field(description="lang")] = None,
        profile: Annotated[Optional[StrictStr], Field(description="profile")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ModelAndView]:
        """get single record in RDF format)


        :param collection_id: collectionId (required)
        :type collection_id: str
        :param record_id: recordId (required)
        :type record_id: str
        :param wskey: wskey (required)
        :type wskey: str
        :param lang: lang
        :type lang: str
        :param profile: profile
        :type profile: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_single_record_rdf_serialize(
            collection_id=collection_id,
            record_id=record_id,
            wskey=wskey,
            lang=lang,
            profile=profile,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_single_record_rdf_without_preload_content(
        self,
        collection_id: Annotated[StrictStr, Field(description="collectionId")],
        record_id: Annotated[StrictStr, Field(description="recordId")],
        wskey: Annotated[StrictStr, Field(description="wskey")],
        lang: Annotated[Optional[StrictStr], Field(description="lang")] = None,
        profile: Annotated[Optional[StrictStr], Field(description="profile")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get single record in RDF format)


        :param collection_id: collectionId (required)
        :type collection_id: str
        :param record_id: recordId (required)
        :type record_id: str
        :param wskey: wskey (required)
        :type wskey: str
        :param lang: lang
        :type lang: str
        :param profile: profile
        :type profile: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_single_record_rdf_serialize(
            collection_id=collection_id,
            record_id=record_id,
            wskey=wskey,
            lang=lang,
            profile=profile,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_single_record_rdf_serialize(
        self,
        collection_id,
        record_id,
        wskey,
        lang,
        profile,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if collection_id is not None:
            _path_params['collectionId'] = collection_id
        if record_id is not None:
            _path_params['recordId'] = record_id
        # process the query parameters
        if lang is not None:
            
            _query_params.append(('lang', lang))
            
        if profile is not None:
            
            _query_params.append(('profile', profile))
            
        if wskey is not None:
            
            _query_params.append(('wskey', wskey))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/rdf+xml;charset=UTF-8'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/record/v2/{collectionId}/{recordId}.rdf',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_single_record_schema_org(
        self,
        collection_id: Annotated[StrictStr, Field(description="collectionId")],
        record_id: Annotated[StrictStr, Field(description="recordId")],
        wskey: Annotated[StrictStr, Field(description="wskey")],
        param_callback: Annotated[Optional[StrictStr], Field(description="callback")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="lang")] = None,
        profile: Annotated[Optional[StrictStr], Field(description="profile")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ModelAndView:
        """get single record in Schema.org JSON LD format


        :param collection_id: collectionId (required)
        :type collection_id: str
        :param record_id: recordId (required)
        :type record_id: str
        :param wskey: wskey (required)
        :type wskey: str
        :param param_callback: callback
        :type param_callback: str
        :param lang: lang
        :type lang: str
        :param profile: profile
        :type profile: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_single_record_schema_org_serialize(
            collection_id=collection_id,
            record_id=record_id,
            wskey=wskey,
            param_callback=param_callback,
            lang=lang,
            profile=profile,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_single_record_schema_org_with_http_info(
        self,
        collection_id: Annotated[StrictStr, Field(description="collectionId")],
        record_id: Annotated[StrictStr, Field(description="recordId")],
        wskey: Annotated[StrictStr, Field(description="wskey")],
        param_callback: Annotated[Optional[StrictStr], Field(description="callback")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="lang")] = None,
        profile: Annotated[Optional[StrictStr], Field(description="profile")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ModelAndView]:
        """get single record in Schema.org JSON LD format


        :param collection_id: collectionId (required)
        :type collection_id: str
        :param record_id: recordId (required)
        :type record_id: str
        :param wskey: wskey (required)
        :type wskey: str
        :param param_callback: callback
        :type param_callback: str
        :param lang: lang
        :type lang: str
        :param profile: profile
        :type profile: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_single_record_schema_org_serialize(
            collection_id=collection_id,
            record_id=record_id,
            wskey=wskey,
            param_callback=param_callback,
            lang=lang,
            profile=profile,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_single_record_schema_org_without_preload_content(
        self,
        collection_id: Annotated[StrictStr, Field(description="collectionId")],
        record_id: Annotated[StrictStr, Field(description="recordId")],
        wskey: Annotated[StrictStr, Field(description="wskey")],
        param_callback: Annotated[Optional[StrictStr], Field(description="callback")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="lang")] = None,
        profile: Annotated[Optional[StrictStr], Field(description="profile")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get single record in Schema.org JSON LD format


        :param collection_id: collectionId (required)
        :type collection_id: str
        :param record_id: recordId (required)
        :type record_id: str
        :param wskey: wskey (required)
        :type wskey: str
        :param param_callback: callback
        :type param_callback: str
        :param lang: lang
        :type lang: str
        :param profile: profile
        :type profile: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_single_record_schema_org_serialize(
            collection_id=collection_id,
            record_id=record_id,
            wskey=wskey,
            param_callback=param_callback,
            lang=lang,
            profile=profile,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_single_record_schema_org_serialize(
        self,
        collection_id,
        record_id,
        wskey,
        param_callback,
        lang,
        profile,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if collection_id is not None:
            _path_params['collectionId'] = collection_id
        if record_id is not None:
            _path_params['recordId'] = record_id
        # process the query parameters
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if lang is not None:
            
            _query_params.append(('lang', lang))
            
        if profile is not None:
            
            _query_params.append(('profile', profile))
            
        if wskey is not None:
            
            _query_params.append(('wskey', wskey))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json;charset=UTF-8', 
                    'application/ld+json;charset=UTF-8'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/record/v2/{collectionId}/{recordId}.schema.jsonld',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_single_record_turtle(
        self,
        collection_id: Annotated[StrictStr, Field(description="collectionId")],
        record_id: Annotated[StrictStr, Field(description="recordId")],
        wskey: Annotated[StrictStr, Field(description="wskey")],
        lang: Annotated[Optional[StrictStr], Field(description="lang")] = None,
        profile: Annotated[Optional[StrictStr], Field(description="profile")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ModelAndView:
        """get single record in turtle format)


        :param collection_id: collectionId (required)
        :type collection_id: str
        :param record_id: recordId (required)
        :type record_id: str
        :param wskey: wskey (required)
        :type wskey: str
        :param lang: lang
        :type lang: str
        :param profile: profile
        :type profile: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_single_record_turtle_serialize(
            collection_id=collection_id,
            record_id=record_id,
            wskey=wskey,
            lang=lang,
            profile=profile,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_single_record_turtle_with_http_info(
        self,
        collection_id: Annotated[StrictStr, Field(description="collectionId")],
        record_id: Annotated[StrictStr, Field(description="recordId")],
        wskey: Annotated[StrictStr, Field(description="wskey")],
        lang: Annotated[Optional[StrictStr], Field(description="lang")] = None,
        profile: Annotated[Optional[StrictStr], Field(description="profile")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ModelAndView]:
        """get single record in turtle format)


        :param collection_id: collectionId (required)
        :type collection_id: str
        :param record_id: recordId (required)
        :type record_id: str
        :param wskey: wskey (required)
        :type wskey: str
        :param lang: lang
        :type lang: str
        :param profile: profile
        :type profile: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_single_record_turtle_serialize(
            collection_id=collection_id,
            record_id=record_id,
            wskey=wskey,
            lang=lang,
            profile=profile,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_single_record_turtle_without_preload_content(
        self,
        collection_id: Annotated[StrictStr, Field(description="collectionId")],
        record_id: Annotated[StrictStr, Field(description="recordId")],
        wskey: Annotated[StrictStr, Field(description="wskey")],
        lang: Annotated[Optional[StrictStr], Field(description="lang")] = None,
        profile: Annotated[Optional[StrictStr], Field(description="profile")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get single record in turtle format)


        :param collection_id: collectionId (required)
        :type collection_id: str
        :param record_id: recordId (required)
        :type record_id: str
        :param wskey: wskey (required)
        :type wskey: str
        :param lang: lang
        :type lang: str
        :param profile: profile
        :type profile: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_single_record_turtle_serialize(
            collection_id=collection_id,
            record_id=record_id,
            wskey=wskey,
            lang=lang,
            profile=profile,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelAndView",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_single_record_turtle_serialize(
        self,
        collection_id,
        record_id,
        wskey,
        lang,
        profile,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if collection_id is not None:
            _path_params['collectionId'] = collection_id
        if record_id is not None:
            _path_params['recordId'] = record_id
        # process the query parameters
        if lang is not None:
            
            _query_params.append(('lang', lang))
            
        if profile is not None:
            
            _query_params.append(('profile', profile))
            
        if wskey is not None:
            
            _query_params.append(('wskey', wskey))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/x-turtle', 
                    'text/turtle', 
                    'application/turtle'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/record/v2/{collectionId}/{recordId}.ttl',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



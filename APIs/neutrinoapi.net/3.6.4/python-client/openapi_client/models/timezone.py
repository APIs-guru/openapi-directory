# coding: utf-8

"""
    Neutrino API

    The general-purpose API

    The version of the OpenAPI document: 3.6.4
    Contact: ops@neutrinoapi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class Timezone(BaseModel):
    """
    Map containing timezone details
    """ # noqa: E501
    abbr: StrictStr = Field(description="The time zone abbreviation")
    var_date: StrictStr = Field(description="The current date at the time zone (ISO 8601 format 'YYYY-MM-DD')", alias="date")
    id: StrictStr = Field(description="The time zone ID as per the IANA time zone database (tzdata)")
    name: StrictStr = Field(description="The full time zone name")
    offset: StrictStr = Field(description="The UTC offset for the time zone (ISO 8601 format 'Â±hh:mm')")
    time: StrictStr = Field(description="The current time at the time zone (ISO 8601 format 'hh:mm:ss.sss')")
    __properties: ClassVar[List[str]] = ["abbr", "date", "id", "name", "offset", "time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Timezone from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Timezone from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "abbr": obj.get("abbr"),
            "date": obj.get("date"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "offset": obj.get("offset"),
            "time": obj.get("time")
        })
        return _obj



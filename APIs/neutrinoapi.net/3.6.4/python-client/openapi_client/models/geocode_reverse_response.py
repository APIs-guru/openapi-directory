# coding: utf-8

"""
    Neutrino API

    The general-purpose API

    The version of the OpenAPI document: 3.6.4
    Contact: ops@neutrinoapi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from openapi_client.models.timezone import Timezone
from typing import Optional, Set
from typing_extensions import Self

class GeocodeReverseResponse(BaseModel):
    """
    GeocodeReverseResponse
    """ # noqa: E501
    address: StrictStr = Field(description="The complete address using comma-separated values")
    address_components: Dict[str, StrictStr] = Field(description="The components which make up the address such as road, city, state, etc", alias="address-components")
    city: StrictStr = Field(description="The city of the location")
    country: StrictStr = Field(description="The country of the location")
    country_code: StrictStr = Field(description="The ISO 2-letter country code of the location", alias="country-code")
    country_code3: StrictStr = Field(description="The ISO 3-letter country code of the location", alias="country-code3")
    currency_code: StrictStr = Field(description="ISO 4217 currency code associated with the country", alias="currency-code")
    found: StrictBool = Field(description="True if these coordinates map to a real location")
    latitude: Union[StrictFloat, StrictInt] = Field(description="The location latitude")
    location_tags: List[StrictStr] = Field(description="Array of strings containing any location tags associated with the address. Tags are additional pieces of metadata about a specific location, there are thousands of different tags. Some examples of tags: shop, office, cafe, bank, pub", alias="location-tags")
    location_type: StrictStr = Field(description="The detected location type ordered roughly from most to least precise, possible values are: <br> <ul> <li>address - indicates a precise street address</li> <li>street - accurate to the street level but may not point to the exact location of the house/building number</li> <li>city - accurate to the city level, this includes villages, towns, suburbs, etc</li> <li>postal-code - indicates a postal code area (no house or street information present)</li> <li>railway - location is part of a rail network such as a station or railway track</li> <li>natural - indicates a natural feature, for example a mountain peak or a waterway</li> <li>island - location is an island or archipelago</li> <li>administrative - indicates an administrative boundary such as a country, state or province</li> </ul>", alias="location-type")
    longitude: Union[StrictFloat, StrictInt] = Field(description="The location longitude")
    postal_address: StrictStr = Field(description="The formatted address using local standards suitable for printing on an envelope", alias="postal-address")
    postal_code: StrictStr = Field(description="The postal code for the location", alias="postal-code")
    region_code: StrictStr = Field(description="The ISO 3166-2 region code for the location", alias="region-code")
    state: StrictStr = Field(description="The state of the location")
    timezone: Dict[str, Timezone] = Field(description="Map containing timezone details for the location")
    __properties: ClassVar[List[str]] = ["address", "address-components", "city", "country", "country-code", "country-code3", "currency-code", "found", "latitude", "location-tags", "location-type", "longitude", "postal-address", "postal-code", "region-code", "state", "timezone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GeocodeReverseResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in timezone (dict)
        _field_dict = {}
        if self.timezone:
            for _key_timezone in self.timezone:
                if self.timezone[_key_timezone]:
                    _field_dict[_key_timezone] = self.timezone[_key_timezone].to_dict()
            _dict['timezone'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GeocodeReverseResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "address-components": obj.get("address-components"),
            "city": obj.get("city"),
            "country": obj.get("country"),
            "country-code": obj.get("country-code"),
            "country-code3": obj.get("country-code3"),
            "currency-code": obj.get("currency-code"),
            "found": obj.get("found"),
            "latitude": obj.get("latitude"),
            "location-tags": obj.get("location-tags"),
            "location-type": obj.get("location-type"),
            "longitude": obj.get("longitude"),
            "postal-address": obj.get("postal-address"),
            "postal-code": obj.get("postal-code"),
            "region-code": obj.get("region-code"),
            "state": obj.get("state"),
            "timezone": dict(
                (_k, Timezone.from_dict(_v))
                for _k, _v in obj["timezone"].items()
            )
            if obj.get("timezone") is not None
            else None
        })
        return _obj



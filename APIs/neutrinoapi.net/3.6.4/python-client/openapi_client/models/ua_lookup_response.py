# coding: utf-8

"""
    Neutrino API

    The general-purpose API

    The version of the OpenAPI document: 3.6.4
    Contact: ops@neutrinoapi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class UALookupResponse(BaseModel):
    """
    UALookupResponse
    """ # noqa: E501
    browser_engine: StrictStr = Field(description="If the client is a web browser which underlying browser engine does it use", alias="browser-engine")
    browser_release: StrictStr = Field(description="If the client is a web browser which year was this browser version released", alias="browser-release")
    device_brand: StrictStr = Field(description="The device brand / manufacturer", alias="device-brand")
    device_height_px: Union[StrictFloat, StrictInt] = Field(description="The device display height in CSS 'px'", alias="device-height-px")
    device_model: StrictStr = Field(description="The device model", alias="device-model")
    device_model_code: StrictStr = Field(description="The device model code", alias="device-model-code")
    device_pixel_ratio: Union[StrictFloat, StrictInt] = Field(description="The device display pixel ratio (the ratio of the resolution in physical pixels to the resolution in CSS pixels)", alias="device-pixel-ratio")
    device_ppi: Union[StrictFloat, StrictInt] = Field(description="The device display PPI (pixels per inch)", alias="device-ppi")
    device_price: Union[StrictFloat, StrictInt] = Field(description="The average device price on release in USD", alias="device-price")
    device_release: StrictStr = Field(description="The year when this device model was released", alias="device-release")
    device_resolution: StrictStr = Field(description="The device display resolution in physical pixels (e.g. 720x1280)", alias="device-resolution")
    device_width_px: Union[StrictFloat, StrictInt] = Field(description="The device display width in CSS 'px'", alias="device-width-px")
    is_mobile: StrictBool = Field(description="Is this a mobile device (e.g. a phone or tablet)", alias="is-mobile")
    is_webview: StrictBool = Field(description="Is this a WebView / embedded software client", alias="is-webview")
    name: StrictStr = Field(description="The client software name")
    os: StrictStr = Field(description="The full operating system name")
    os_family: StrictStr = Field(description="The operating system family. The major OS families are: Android, Windows, macOS, iOS, Linux", alias="os-family")
    os_version: StrictStr = Field(description="The operating system full version", alias="os-version")
    os_version_major: StrictStr = Field(description="The operating system major version", alias="os-version-major")
    type: StrictStr = Field(description="The user agent type, possible values are: <br> <ul> <li>desktop</li> <li>phone</li> <li>tablet</li> <li>wearable</li> <li>tv</li> <li>console</li> <li>email</li> <li>library</li> <li>robot</li> <li>unknown</li> </ul>")
    ua: StrictStr = Field(description="The user agent string")
    version: StrictStr = Field(description="The client software full version")
    version_major: StrictStr = Field(description="The client software major version", alias="version-major")
    __properties: ClassVar[List[str]] = ["browser-engine", "browser-release", "device-brand", "device-height-px", "device-model", "device-model-code", "device-pixel-ratio", "device-ppi", "device-price", "device-release", "device-resolution", "device-width-px", "is-mobile", "is-webview", "name", "os", "os-family", "os-version", "os-version-major", "type", "ua", "version", "version-major"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UALookupResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UALookupResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "browser-engine": obj.get("browser-engine"),
            "browser-release": obj.get("browser-release"),
            "device-brand": obj.get("device-brand"),
            "device-height-px": obj.get("device-height-px"),
            "device-model": obj.get("device-model"),
            "device-model-code": obj.get("device-model-code"),
            "device-pixel-ratio": obj.get("device-pixel-ratio"),
            "device-ppi": obj.get("device-ppi"),
            "device-price": obj.get("device-price"),
            "device-release": obj.get("device-release"),
            "device-resolution": obj.get("device-resolution"),
            "device-width-px": obj.get("device-width-px"),
            "is-mobile": obj.get("is-mobile"),
            "is-webview": obj.get("is-webview"),
            "name": obj.get("name"),
            "os": obj.get("os"),
            "os-family": obj.get("os-family"),
            "os-version": obj.get("os-version"),
            "os-version-major": obj.get("os-version-major"),
            "type": obj.get("type"),
            "ua": obj.get("ua"),
            "version": obj.get("version"),
            "version-major": obj.get("version-major")
        })
        return _obj



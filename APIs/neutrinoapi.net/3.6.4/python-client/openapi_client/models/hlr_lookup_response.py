# coding: utf-8

"""
    Neutrino API

    The general-purpose API

    The version of the OpenAPI document: 3.6.4
    Contact: ops@neutrinoapi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class HLRLookupResponse(BaseModel):
    """
    HLRLookupResponse
    """ # noqa: E501
    country: StrictStr = Field(description="The phone number country")
    country_code: StrictStr = Field(description="The number location as an ISO 2-letter country code", alias="country-code")
    country_code3: StrictStr = Field(description="The number location as an ISO 3-letter country code", alias="country-code3")
    currency_code: StrictStr = Field(description="ISO 4217 currency code associated with the country", alias="currency-code")
    current_network: StrictStr = Field(description="The currently used network/carrier name", alias="current-network")
    hlr_status: StrictStr = Field(description="The HLR lookup status, possible values are: <br> <ul> <li>ok - the HLR lookup was successful and the device is connected</li> <li>absent - the number was once registered but the device has been switched off or out of network range for some time</li> <li>unknown - the number is not known by the mobile network</li> <li>invalid - the number is not a valid mobile MSISDN number</li> <li>fixed-line - the number is a registered fixed-line not mobile</li> <li>voip - the number has been detected as a VOIP line</li> <li>failed - the HLR lookup has failed, we could not determine the real status of this number</li> </ul>", alias="hlr-status")
    hlr_valid: StrictBool = Field(description="Was the HLR lookup successful. If true then this is a working and registered cell-phone or mobile device (SMS and phone calls will be delivered)", alias="hlr-valid")
    imsi: StrictStr = Field(description="The mobile IMSI number (International Mobile Subscriber Identity)")
    international_calling_code: StrictStr = Field(description="The international calling code", alias="international-calling-code")
    international_number: StrictStr = Field(description="The number represented in full international format", alias="international-number")
    is_mobile: StrictBool = Field(description="True if this is a mobile number (only true with 100% certainty, if the number type is unknown this value will be false)", alias="is-mobile")
    is_ported: StrictBool = Field(description="Has this number been ported to another network", alias="is-ported")
    is_roaming: StrictBool = Field(description="Is this number currently roaming from its origin country", alias="is-roaming")
    local_number: StrictStr = Field(description="The number represented in local dialing format", alias="local-number")
    location: StrictStr = Field(description="The number location. Could be a city, region or country depending on the type of number")
    mcc: StrictStr = Field(description="The mobile MCC number (Mobile Country Code)")
    mnc: StrictStr = Field(description="The mobile MNC number (Mobile Network Code)")
    msc: StrictStr = Field(description="The mobile MSC number (Mobile Switching Center)")
    msin: StrictStr = Field(description="The mobile MSIN number (Mobile Subscription Identification Number)")
    number_type: StrictStr = Field(description="The number type, possible values are: <br> <ul> <li>mobile</li> <li>fixed-line</li> <li>premium-rate</li> <li>toll-free</li> <li>voip</li> <li>unknown</li> </ul>", alias="number-type")
    number_valid: StrictBool = Field(description="True if this a valid phone number", alias="number-valid")
    origin_network: StrictStr = Field(description="The origin network/carrier name", alias="origin-network")
    ported_network: StrictStr = Field(description="The ported to network/carrier name (only set if the number has been ported)", alias="ported-network")
    roaming_country_code: StrictStr = Field(description="If the number is currently roaming, the ISO 2-letter country code of the roaming in country", alias="roaming-country-code")
    __properties: ClassVar[List[str]] = ["country", "country-code", "country-code3", "currency-code", "current-network", "hlr-status", "hlr-valid", "imsi", "international-calling-code", "international-number", "is-mobile", "is-ported", "is-roaming", "local-number", "location", "mcc", "mnc", "msc", "msin", "number-type", "number-valid", "origin-network", "ported-network", "roaming-country-code"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HLRLookupResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HLRLookupResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country": obj.get("country"),
            "country-code": obj.get("country-code"),
            "country-code3": obj.get("country-code3"),
            "currency-code": obj.get("currency-code"),
            "current-network": obj.get("current-network"),
            "hlr-status": obj.get("hlr-status"),
            "hlr-valid": obj.get("hlr-valid"),
            "imsi": obj.get("imsi"),
            "international-calling-code": obj.get("international-calling-code"),
            "international-number": obj.get("international-number"),
            "is-mobile": obj.get("is-mobile"),
            "is-ported": obj.get("is-ported"),
            "is-roaming": obj.get("is-roaming"),
            "local-number": obj.get("local-number"),
            "location": obj.get("location"),
            "mcc": obj.get("mcc"),
            "mnc": obj.get("mnc"),
            "msc": obj.get("msc"),
            "msin": obj.get("msin"),
            "number-type": obj.get("number-type"),
            "number-valid": obj.get("number-valid"),
            "origin-network": obj.get("origin-network"),
            "ported-network": obj.get("ported-network"),
            "roaming-country-code": obj.get("roaming-country-code")
        })
        return _obj



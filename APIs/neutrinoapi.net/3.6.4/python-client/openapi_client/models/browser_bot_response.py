# coding: utf-8

"""
    Neutrino API

    The general-purpose API

    The version of the OpenAPI document: 3.6.4
    Contact: ops@neutrinoapi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class BrowserBotResponse(BaseModel):
    """
    BrowserBotResponse
    """ # noqa: E501
    content: StrictStr = Field(description="The complete raw, decompressed and decoded page content. Usually will be either HTML, JSON or XML")
    elements: List[StrictStr] = Field(description="Array containing all the elements matching the supplied selector. <br>Each element object will contain the text content, HTML content and all current element attributes")
    error_message: StrictStr = Field(description="Contains the error message if an error has occurred ('is-error' will be true)", alias="error-message")
    exec_results: List[StrictStr] = Field(description="If you executed any JavaScript this array holds the results as objects", alias="exec-results")
    http_redirect_url: StrictStr = Field(description="The redirected URL if the URL responded with an HTTP redirect", alias="http-redirect-url")
    http_status_code: StrictInt = Field(description="The HTTP status code the URL returned", alias="http-status-code")
    http_status_message: StrictStr = Field(description="The HTTP status message the URL returned", alias="http-status-message")
    is_error: StrictBool = Field(description="True if an error has occurred loading the page. Check the 'error-message' field for details", alias="is-error")
    is_http_ok: StrictBool = Field(description="True if the HTTP status is OK (200)", alias="is-http-ok")
    is_http_redirect: StrictBool = Field(description="True if the URL responded with an HTTP redirect", alias="is-http-redirect")
    is_secure: StrictBool = Field(description="True if the page is secured using TLS/SSL", alias="is-secure")
    is_timeout: StrictBool = Field(description="True if a timeout occurred while loading the page. You can set the timeout with the request parameter 'timeout'", alias="is-timeout")
    language_code: StrictStr = Field(description="The ISO 2-letter language code of the page. Extracted from either the HTML document or via HTTP headers", alias="language-code")
    load_time: Union[StrictFloat, StrictInt] = Field(description="The number of seconds taken to load the page (from initial request until DOM ready)", alias="load-time")
    mime_type: StrictStr = Field(description="The document MIME type", alias="mime-type")
    response_headers: Dict[str, StrictStr] = Field(description="Map containing all the HTTP response headers the URL responded with", alias="response-headers")
    security_details: Dict[str, StrictStr] = Field(description="Map containing details of the TLS/SSL setup", alias="security-details")
    server_ip: StrictStr = Field(description="The HTTP servers IP address", alias="server-ip")
    title: StrictStr = Field(description="The document title")
    url: StrictStr = Field(description="The page URL")
    __properties: ClassVar[List[str]] = ["content", "elements", "error-message", "exec-results", "http-redirect-url", "http-status-code", "http-status-message", "is-error", "is-http-ok", "is-http-redirect", "is-secure", "is-timeout", "language-code", "load-time", "mime-type", "response-headers", "security-details", "server-ip", "title", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BrowserBotResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BrowserBotResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": obj.get("content"),
            "elements": obj.get("elements"),
            "error-message": obj.get("error-message"),
            "exec-results": obj.get("exec-results"),
            "http-redirect-url": obj.get("http-redirect-url"),
            "http-status-code": obj.get("http-status-code"),
            "http-status-message": obj.get("http-status-message"),
            "is-error": obj.get("is-error"),
            "is-http-ok": obj.get("is-http-ok"),
            "is-http-redirect": obj.get("is-http-redirect"),
            "is-secure": obj.get("is-secure"),
            "is-timeout": obj.get("is-timeout"),
            "language-code": obj.get("language-code"),
            "load-time": obj.get("load-time"),
            "mime-type": obj.get("mime-type"),
            "response-headers": obj.get("response-headers"),
            "security-details": obj.get("security-details"),
            "server-ip": obj.get("server-ip"),
            "title": obj.get("title"),
            "url": obj.get("url")
        })
        return _obj



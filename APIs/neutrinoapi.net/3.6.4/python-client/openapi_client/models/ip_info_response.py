# coding: utf-8

"""
    Neutrino API

    The general-purpose API

    The version of the OpenAPI document: 3.6.4
    Contact: ops@neutrinoapi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from openapi_client.models.timezone import Timezone
from typing import Optional, Set
from typing_extensions import Self

class IPInfoResponse(BaseModel):
    """
    IPInfoResponse
    """ # noqa: E501
    city: StrictStr = Field(description="Name of the city (if detectable)")
    continent_code: StrictStr = Field(description="ISO 2-letter continent code", alias="continent-code")
    country: StrictStr = Field(description="Full country name")
    country_code: StrictStr = Field(description="ISO 2-letter country code", alias="country-code")
    country_code3: StrictStr = Field(description="ISO 3-letter country code", alias="country-code3")
    currency_code: StrictStr = Field(description="ISO 4217 currency code associated with the country", alias="currency-code")
    host_domain: StrictStr = Field(description="The IPs host domain (only set if reverse-lookup has been used)", alias="host-domain")
    hostname: StrictStr = Field(description="The IPs full hostname (only set if reverse-lookup has been used)")
    ip: StrictStr = Field(description="The IP address")
    is_bogon: StrictBool = Field(description="True if this is a bogon IP address such as a private network, local network or reserved address", alias="is-bogon")
    is_v4_mapped: StrictBool = Field(description="True if this is a <a href=\"https://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses\">IPv4 mapped IPv6 address</a>", alias="is-v4-mapped")
    is_v6: StrictBool = Field(description="True if this is a IPv6 address. False if IPv4", alias="is-v6")
    latitude: Union[StrictFloat, StrictInt] = Field(description="Location latitude")
    longitude: Union[StrictFloat, StrictInt] = Field(description="Location longitude")
    region: StrictStr = Field(description="Name of the region (if detectable)")
    region_code: StrictStr = Field(description="ISO 3166-2 region code (if detectable)", alias="region-code")
    timezone: Timezone
    valid: StrictBool = Field(description="True if this is a valid IPv4 or IPv6 address")
    __properties: ClassVar[List[str]] = ["city", "continent-code", "country", "country-code", "country-code3", "currency-code", "host-domain", "hostname", "ip", "is-bogon", "is-v4-mapped", "is-v6", "latitude", "longitude", "region", "region-code", "timezone", "valid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IPInfoResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of timezone
        if self.timezone:
            _dict['timezone'] = self.timezone.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IPInfoResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "city": obj.get("city"),
            "continent-code": obj.get("continent-code"),
            "country": obj.get("country"),
            "country-code": obj.get("country-code"),
            "country-code3": obj.get("country-code3"),
            "currency-code": obj.get("currency-code"),
            "host-domain": obj.get("host-domain"),
            "hostname": obj.get("hostname"),
            "ip": obj.get("ip"),
            "is-bogon": obj.get("is-bogon"),
            "is-v4-mapped": obj.get("is-v4-mapped"),
            "is-v6": obj.get("is-v6"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "region": obj.get("region"),
            "region-code": obj.get("region-code"),
            "timezone": Timezone.from_dict(obj["timezone"]) if obj.get("timezone") is not None else None,
            "valid": obj.get("valid")
        })
        return _obj



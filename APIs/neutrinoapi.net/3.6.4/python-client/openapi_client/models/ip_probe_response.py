# coding: utf-8

"""
    Neutrino API

    The general-purpose API

    The version of the OpenAPI document: 3.6.4
    Contact: ops@neutrinoapi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class IPProbeResponse(BaseModel):
    """
    IPProbeResponse
    """ # noqa: E501
    as_age: StrictInt = Field(description="The age of the autonomous system (AS) in number of years since registration", alias="as-age")
    as_cidr: StrictStr = Field(description="The autonomous system (AS) CIDR range", alias="as-cidr")
    as_country_code: StrictStr = Field(description="The autonomous system (AS) ISO 2-letter country code", alias="as-country-code")
    as_country_code3: StrictStr = Field(description="The autonomous system (AS) ISO 3-letter country code", alias="as-country-code3")
    as_description: StrictStr = Field(description="The autonomous system (AS) description / company name", alias="as-description")
    as_domains: List[StrictStr] = Field(description="Array of all the domains associated with the autonomous system (AS)", alias="as-domains")
    asn: StrictStr = Field(description="The autonomous system (AS) number")
    city: StrictStr = Field(description="Full city name (if detectable)")
    continent_code: StrictStr = Field(description="ISO 2-letter continent code", alias="continent-code")
    country: StrictStr = Field(description="Full country name")
    country_code: StrictStr = Field(description="ISO 2-letter country code", alias="country-code")
    country_code3: StrictStr = Field(description="ISO 3-letter country code", alias="country-code3")
    currency_code: StrictStr = Field(description="ISO 4217 currency code associated with the country", alias="currency-code")
    host_domain: StrictStr = Field(description="The IPs host domain", alias="host-domain")
    hostname: StrictStr = Field(description="The IPs full hostname (PTR)")
    ip: StrictStr = Field(description="The IP address")
    is_bogon: StrictBool = Field(description="True if this is a bogon IP address such as a private network, local network or reserved address", alias="is-bogon")
    is_hosting: StrictBool = Field(description="True if this IP belongs to a hosting company. Note that this can still be true even if the provider type is VPN/proxy, this occurs in the case that the IP is detected as both types", alias="is-hosting")
    is_isp: StrictBool = Field(description="True if this IP belongs to an internet service provider. Note that this can still be true even if the provider type is VPN/proxy, this occurs in the case that the IP is detected as both types", alias="is-isp")
    is_proxy: StrictBool = Field(description="True if this IP ia a proxy", alias="is-proxy")
    is_v4_mapped: StrictBool = Field(description="True if this is a <a href=\"https://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses\">IPv4 mapped IPv6 address</a>", alias="is-v4-mapped")
    is_v6: StrictBool = Field(description="True if this is a IPv6 address. False if IPv4", alias="is-v6")
    is_vpn: StrictBool = Field(description="True if this IP ia a VPN", alias="is-vpn")
    provider_description: StrictStr = Field(description="A description of the provider (usually extracted from the providers website)", alias="provider-description")
    provider_domain: StrictStr = Field(description="The domain name of the provider", alias="provider-domain")
    provider_type: StrictStr = Field(description="The detected provider type, possible values are: <br> <ul> <li>isp - IP belongs to an internet service provider. This includes both mobile, home and business internet providers</li> <li>hosting - IP belongs to a hosting company. This includes website hosting, cloud computing platforms and colocation facilities</li> <li>vpn - IP belongs to a VPN provider</li> <li>proxy - IP belongs to a proxy service. This includes HTTP/SOCKS proxies and browser based proxies</li> <li>university - IP belongs to a university/college/campus</li> <li>government - IP belongs to a government department. This includes military facilities</li> <li>commercial - IP belongs to a commercial entity such as a corporate headquarters or company office</li> <li>unknown - could not identify the provider type</li> </ul>", alias="provider-type")
    provider_website: StrictStr = Field(description="The website URL for the provider", alias="provider-website")
    region: StrictStr = Field(description="Full region name (if detectable)")
    region_code: StrictStr = Field(description="ISO 3166-2 region code (if detectable)", alias="region-code")
    valid: StrictBool = Field(description="True if this is a valid IPv4 or IPv6 address")
    vpn_domain: StrictStr = Field(description="The domain of the VPN provider (may be empty if the VPN domain is not detectable)", alias="vpn-domain")
    __properties: ClassVar[List[str]] = ["as-age", "as-cidr", "as-country-code", "as-country-code3", "as-description", "as-domains", "asn", "city", "continent-code", "country", "country-code", "country-code3", "currency-code", "host-domain", "hostname", "ip", "is-bogon", "is-hosting", "is-isp", "is-proxy", "is-v4-mapped", "is-v6", "is-vpn", "provider-description", "provider-domain", "provider-type", "provider-website", "region", "region-code", "valid", "vpn-domain"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IPProbeResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IPProbeResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "as-age": obj.get("as-age"),
            "as-cidr": obj.get("as-cidr"),
            "as-country-code": obj.get("as-country-code"),
            "as-country-code3": obj.get("as-country-code3"),
            "as-description": obj.get("as-description"),
            "as-domains": obj.get("as-domains"),
            "asn": obj.get("asn"),
            "city": obj.get("city"),
            "continent-code": obj.get("continent-code"),
            "country": obj.get("country"),
            "country-code": obj.get("country-code"),
            "country-code3": obj.get("country-code3"),
            "currency-code": obj.get("currency-code"),
            "host-domain": obj.get("host-domain"),
            "hostname": obj.get("hostname"),
            "ip": obj.get("ip"),
            "is-bogon": obj.get("is-bogon"),
            "is-hosting": obj.get("is-hosting"),
            "is-isp": obj.get("is-isp"),
            "is-proxy": obj.get("is-proxy"),
            "is-v4-mapped": obj.get("is-v4-mapped"),
            "is-v6": obj.get("is-v6"),
            "is-vpn": obj.get("is-vpn"),
            "provider-description": obj.get("provider-description"),
            "provider-domain": obj.get("provider-domain"),
            "provider-type": obj.get("provider-type"),
            "provider-website": obj.get("provider-website"),
            "region": obj.get("region"),
            "region-code": obj.get("region-code"),
            "valid": obj.get("valid"),
            "vpn-domain": obj.get("vpn-domain")
        })
        return _obj



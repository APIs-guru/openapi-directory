# coding: utf-8

"""
    Neutrino API

    The general-purpose API

    The version of the OpenAPI document: 3.6.4
    Contact: ops@neutrinoapi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class EmailValidateResponse(BaseModel):
    """
    EmailValidateResponse
    """ # noqa: E501
    domain: StrictStr = Field(description="The email domain")
    domain_error: StrictBool = Field(description="True if this address has a domain error (e.g. no valid mail server records)", alias="domain-error")
    email: StrictStr = Field(description="The email address. If you have used the fix-typos option then this will be the fixed address")
    is_disposable: StrictBool = Field(description="True if this address is a disposable, temporary or darknet related email address", alias="is-disposable")
    is_freemail: StrictBool = Field(description="True if this address is a free-mail address", alias="is-freemail")
    is_personal: StrictBool = Field(description="True if this address belongs to a person. False if this is a role based address, e.g. admin@, help@, office@, etc.", alias="is-personal")
    provider: StrictStr = Field(description="The email service provider domain")
    syntax_error: StrictBool = Field(description="True if this address has a syntax error", alias="syntax-error")
    typos_fixed: StrictBool = Field(description="True if typos have been fixed", alias="typos-fixed")
    valid: StrictBool = Field(description="Is this a valid email")
    __properties: ClassVar[List[str]] = ["domain", "domain-error", "email", "is-disposable", "is-freemail", "is-personal", "provider", "syntax-error", "typos-fixed", "valid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EmailValidateResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EmailValidateResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "domain": obj.get("domain"),
            "domain-error": obj.get("domain-error"),
            "email": obj.get("email"),
            "is-disposable": obj.get("is-disposable"),
            "is-freemail": obj.get("is-freemail"),
            "is-personal": obj.get("is-personal"),
            "provider": obj.get("provider"),
            "syntax-error": obj.get("syntax-error"),
            "typos-fixed": obj.get("typos-fixed"),
            "valid": obj.get("valid")
        })
        return _obj



# coding: utf-8

"""
    Neutrino API

    The general-purpose API

    The version of the OpenAPI document: 3.6.4
    Contact: ops@neutrinoapi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class BINLookupResponse(BaseModel):
    """
    BINLookupResponse
    """ # noqa: E501
    bin_number: StrictStr = Field(description="The BIN or IIN number", alias="bin-number")
    card_brand: StrictStr = Field(description="The card brand (e.g. Visa or Mastercard)", alias="card-brand")
    card_category: StrictStr = Field(description="The card category. There are many different card categories the most common card categories are: CLASSIC, BUSINESS, CORPORATE, PLATINUM, PREPAID", alias="card-category")
    card_type: StrictStr = Field(description="The card type, will always be one of: DEBIT, CREDIT, CHARGE CARD", alias="card-type")
    country: StrictStr = Field(description="The full country name of the issuer")
    country_code: StrictStr = Field(description="The ISO 2-letter country code of the issuer", alias="country-code")
    country_code3: StrictStr = Field(description="The ISO 3-letter country code of the issuer", alias="country-code3")
    currency_code: StrictStr = Field(description="ISO 4217 currency code associated with the country of the issuer", alias="currency-code")
    ip_blocklisted: StrictBool = Field(description="True if the customers IP is listed on one of our blocklists, see the <a href=\"http://www.neutrinoapi.com/api/ip-blocklist/\">IP Blocklist API</a>", alias="ip-blocklisted")
    ip_blocklists: List[StrictStr] = Field(description="An array of strings indicating which blocklists this IP is listed on", alias="ip-blocklists")
    ip_city: StrictStr = Field(description="The city of the customers IP (if detectable)", alias="ip-city")
    ip_country: StrictStr = Field(description="The country of the customers IP", alias="ip-country")
    ip_country_code: StrictStr = Field(description="The ISO 2-letter country code of the customers IP", alias="ip-country-code")
    ip_country_code3: StrictStr = Field(description="The ISO 3-letter country code of the customers IP", alias="ip-country-code3")
    ip_matches_bin: StrictBool = Field(description="True if the customers IP country matches the BIN country", alias="ip-matches-bin")
    ip_region: StrictStr = Field(description="The region of the customers IP (if detectable)", alias="ip-region")
    is_commercial: StrictBool = Field(description="Is this a commercial/business use card", alias="is-commercial")
    is_prepaid: StrictBool = Field(description="Is this a prepaid or prepaid reloadable card", alias="is-prepaid")
    issuer: StrictStr = Field(description="The card issuer")
    issuer_phone: StrictStr = Field(description="The card issuers phone number", alias="issuer-phone")
    issuer_website: StrictStr = Field(description="The card issuers website", alias="issuer-website")
    valid: StrictBool = Field(description="Is this a valid BIN or IIN number")
    __properties: ClassVar[List[str]] = ["bin-number", "card-brand", "card-category", "card-type", "country", "country-code", "country-code3", "currency-code", "ip-blocklisted", "ip-blocklists", "ip-city", "ip-country", "ip-country-code", "ip-country-code3", "ip-matches-bin", "ip-region", "is-commercial", "is-prepaid", "issuer", "issuer-phone", "issuer-website", "valid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BINLookupResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BINLookupResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bin-number": obj.get("bin-number"),
            "card-brand": obj.get("card-brand"),
            "card-category": obj.get("card-category"),
            "card-type": obj.get("card-type"),
            "country": obj.get("country"),
            "country-code": obj.get("country-code"),
            "country-code3": obj.get("country-code3"),
            "currency-code": obj.get("currency-code"),
            "ip-blocklisted": obj.get("ip-blocklisted"),
            "ip-blocklists": obj.get("ip-blocklists"),
            "ip-city": obj.get("ip-city"),
            "ip-country": obj.get("ip-country"),
            "ip-country-code": obj.get("ip-country-code"),
            "ip-country-code3": obj.get("ip-country-code3"),
            "ip-matches-bin": obj.get("ip-matches-bin"),
            "ip-region": obj.get("ip-region"),
            "is-commercial": obj.get("is-commercial"),
            "is-prepaid": obj.get("is-prepaid"),
            "issuer": obj.get("issuer"),
            "issuer-phone": obj.get("issuer-phone"),
            "issuer-website": obj.get("issuer-website"),
            "valid": obj.get("valid")
        })
        return _obj



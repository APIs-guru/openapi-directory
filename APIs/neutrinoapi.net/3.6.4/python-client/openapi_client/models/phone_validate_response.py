# coding: utf-8

"""
    Neutrino API

    The general-purpose API

    The version of the OpenAPI document: 3.6.4
    Contact: ops@neutrinoapi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class PhoneValidateResponse(BaseModel):
    """
    PhoneValidateResponse
    """ # noqa: E501
    country: StrictStr = Field(description="The phone number country")
    country_code: StrictStr = Field(description="The phone number country as an ISO 2-letter country code", alias="country-code")
    country_code3: StrictStr = Field(description="The phone number country as an ISO 3-letter country code", alias="country-code3")
    currency_code: StrictStr = Field(description="ISO 4217 currency code associated with the country", alias="currency-code")
    international_calling_code: StrictStr = Field(description="The international calling code", alias="international-calling-code")
    international_number: StrictStr = Field(description="The number represented in full international format (E.164)", alias="international-number")
    is_mobile: StrictBool = Field(description="True if this is a mobile number. If the number type is unknown this value will be false", alias="is-mobile")
    local_number: StrictStr = Field(description="The number represented in local dialing format", alias="local-number")
    location: StrictStr = Field(description="The phone number location. Could be the city, region or country depending on the type of number")
    prefix_network: StrictStr = Field(description="The network/carrier who owns the prefix (this only works for some countries, use HLR lookup for global network detection)", alias="prefix-network")
    type: StrictStr = Field(description="The number type based on the number prefix. <br>Possible values are: <br> <ul> <li>mobile</li> <li>fixed-line</li> <li>premium-rate</li> <li>toll-free</li> <li>voip</li> <li>unknown (use HLR lookup)</li> </ul>")
    valid: StrictBool = Field(description="Is this a valid phone number")
    __properties: ClassVar[List[str]] = ["country", "country-code", "country-code3", "currency-code", "international-calling-code", "international-number", "is-mobile", "local-number", "location", "prefix-network", "type", "valid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PhoneValidateResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PhoneValidateResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country": obj.get("country"),
            "country-code": obj.get("country-code"),
            "country-code3": obj.get("country-code3"),
            "currency-code": obj.get("currency-code"),
            "international-calling-code": obj.get("international-calling-code"),
            "international-number": obj.get("international-number"),
            "is-mobile": obj.get("is-mobile"),
            "local-number": obj.get("local-number"),
            "location": obj.get("location"),
            "prefix-network": obj.get("prefix-network"),
            "type": obj.get("type"),
            "valid": obj.get("valid")
        })
        return _obj



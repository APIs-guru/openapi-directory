# coding: utf-8

"""
    Neutrino API

    The general-purpose API

    The version of the OpenAPI document: 3.6.4
    Contact: ops@neutrinoapi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class URLInfoResponse(BaseModel):
    """
    URLInfoResponse
    """ # noqa: E501
    content: StrictStr = Field(description="The actual content this URL responded with. Only set if the 'fetch-content' option was used")
    content_encoding: StrictStr = Field(description="The encoding format the URL uses", alias="content-encoding")
    content_size: StrictInt = Field(description="The size of the URL content in bytes", alias="content-size")
    content_type: StrictStr = Field(description="The content-type this URL serves", alias="content-type")
    http_ok: StrictBool = Field(description="True if this URL responded with an HTTP OK (200) status", alias="http-ok")
    http_redirect: StrictBool = Field(description="True if this URL responded with an HTTP redirect", alias="http-redirect")
    http_status: StrictInt = Field(description="The HTTP status code this URL responded with. An HTTP status of 0 indicates a network level issue", alias="http-status")
    http_status_message: StrictInt = Field(description="The HTTP status message assoicated with the status code", alias="http-status-message")
    is_error: StrictBool = Field(description="True if an error occurred while loading the URL. This includes network errors, TLS errors and timeouts", alias="is-error")
    is_timeout: StrictBool = Field(description="True if a timeout occurred while loading the URL. You can set the timeout with the request parameter 'timeout'", alias="is-timeout")
    language_code: StrictStr = Field(description="The ISO 2-letter language code of the page. Extracted from either the HTML document or via HTTP headers", alias="language-code")
    load_time: Union[StrictFloat, StrictInt] = Field(description="The time taken to load the URL content in seconds", alias="load-time")
    query: Dict[str, StrictStr] = Field(description="A key-value map of the URL query paramaters")
    real: StrictBool = Field(description="Is this URL actually serving real content")
    server_city: StrictStr = Field(description="The servers IP geo-location: full city name (if detectable)", alias="server-city")
    server_country: StrictStr = Field(description="The servers IP geo-location: full country name", alias="server-country")
    server_country_code: StrictStr = Field(description="The servers IP geo-location: ISO 2-letter country code", alias="server-country-code")
    server_hostname: StrictStr = Field(description="The servers hostname (PTR record)", alias="server-hostname")
    server_ip: StrictStr = Field(description="The IP address of the server hosting this URL", alias="server-ip")
    server_name: StrictStr = Field(description="The name of the server software hosting this URL", alias="server-name")
    server_region: StrictStr = Field(description="The servers IP geo-location: full region name (if detectable)", alias="server-region")
    title: StrictStr = Field(description="The document title")
    url: StrictStr = Field(description="The fully qualified URL. This may be different to the URL requested if http-redirect is true")
    url_path: StrictStr = Field(description="The URL path", alias="url-path")
    url_port: StrictInt = Field(description="The URL port", alias="url-port")
    url_protocol: StrictStr = Field(description="The URL protocol, usually http or https", alias="url-protocol")
    valid: StrictBool = Field(description="Is this a valid well-formed URL")
    __properties: ClassVar[List[str]] = ["content", "content-encoding", "content-size", "content-type", "http-ok", "http-redirect", "http-status", "http-status-message", "is-error", "is-timeout", "language-code", "load-time", "query", "real", "server-city", "server-country", "server-country-code", "server-hostname", "server-ip", "server-name", "server-region", "title", "url", "url-path", "url-port", "url-protocol", "valid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of URLInfoResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of URLInfoResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": obj.get("content"),
            "content-encoding": obj.get("content-encoding"),
            "content-size": obj.get("content-size"),
            "content-type": obj.get("content-type"),
            "http-ok": obj.get("http-ok"),
            "http-redirect": obj.get("http-redirect"),
            "http-status": obj.get("http-status"),
            "http-status-message": obj.get("http-status-message"),
            "is-error": obj.get("is-error"),
            "is-timeout": obj.get("is-timeout"),
            "language-code": obj.get("language-code"),
            "load-time": obj.get("load-time"),
            "query": obj.get("query"),
            "real": obj.get("real"),
            "server-city": obj.get("server-city"),
            "server-country": obj.get("server-country"),
            "server-country-code": obj.get("server-country-code"),
            "server-hostname": obj.get("server-hostname"),
            "server-ip": obj.get("server-ip"),
            "server-name": obj.get("server-name"),
            "server-region": obj.get("server-region"),
            "title": obj.get("title"),
            "url": obj.get("url"),
            "url-path": obj.get("url-path"),
            "url-port": obj.get("url-port"),
            "url-protocol": obj.get("url-protocol"),
            "valid": obj.get("valid")
        })
        return _obj



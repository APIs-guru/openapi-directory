# coding: utf-8

"""
    Neutrino API

    The general-purpose API

    The version of the OpenAPI document: 3.6.4
    Contact: ops@neutrinoapi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class Blacklist(BaseModel):
    """
    Blacklist
    """ # noqa: E501
    is_listed: StrictBool = Field(description="True if the host is currently black-listed", alias="is-listed")
    list_host: StrictStr = Field(description="The hostname of the DNSBL", alias="list-host")
    list_name: StrictStr = Field(description="The name of the DNSBL", alias="list-name")
    list_rating: StrictInt = Field(description="The list rating [1-3] with 1 being the best rating and 3 the lowest rating", alias="list-rating")
    response_time: StrictInt = Field(description="The DNSBL server response time in milliseconds", alias="response-time")
    return_code: StrictStr = Field(description="The specific return code for this listing (only set if listed)", alias="return-code")
    txt_record: StrictStr = Field(description="The TXT record returned for this listing (only set if listed)", alias="txt-record")
    __properties: ClassVar[List[str]] = ["is-listed", "list-host", "list-name", "list-rating", "response-time", "return-code", "txt-record"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Blacklist from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Blacklist from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "is-listed": obj.get("is-listed"),
            "list-host": obj.get("list-host"),
            "list-name": obj.get("list-name"),
            "list-rating": obj.get("list-rating"),
            "response-time": obj.get("response-time"),
            "return-code": obj.get("return-code"),
            "txt-record": obj.get("txt-record")
        })
        return _obj



# coding: utf-8

"""
    Neutrino API

    The general-purpose API

    The version of the OpenAPI document: 3.6.4
    Contact: ops@neutrinoapi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.geocode_address_response import GeocodeAddressResponse
from openapi_client.models.geocode_reverse_response import GeocodeReverseResponse
from openapi_client.models.ip_info_response import IPInfoResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class GeolocationApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def geocode_address(
        self,
        address: Annotated[Optional[StrictStr], Field(description="The full address, partial address or name of a place to try and locate. Comma separated address components are preferred.")] = None,
        house_number: Annotated[Optional[StrictStr], Field(description="The house/building number to locate")] = None,
        street: Annotated[Optional[StrictStr], Field(description="The street/road name to locate")] = None,
        city: Annotated[Optional[StrictStr], Field(description="The city/town name to locate")] = None,
        county: Annotated[Optional[StrictStr], Field(description="The county/region name to locate")] = None,
        state: Annotated[Optional[StrictStr], Field(description="The state name to locate")] = None,
        postal_code: Annotated[Optional[StrictStr], Field(description="The postal code to locate")] = None,
        country_code: Annotated[Optional[StrictStr], Field(description="Limit result to this country (the default is no country bias)")] = None,
        language_code: Annotated[Optional[StrictStr], Field(description="The language to display results in, available languages are: <ul> <li>de, en, es, fr, it, pt, ru, zh</li> </ul>")] = None,
        fuzzy_search: Annotated[Optional[StrictBool], Field(description="If no matches are found for the given address, start performing a recursive fuzzy search until a geolocation is found. This option is recommended for processing user input or implementing auto-complete. We use a combination of approximate string matching and data cleansing to find possible location matches")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GeocodeAddressResponse:
        """Geocode Address

        Geocode an address, partial address or just the name of a place

        :param address: The full address, partial address or name of a place to try and locate. Comma separated address components are preferred.
        :type address: str
        :param house_number: The house/building number to locate
        :type house_number: str
        :param street: The street/road name to locate
        :type street: str
        :param city: The city/town name to locate
        :type city: str
        :param county: The county/region name to locate
        :type county: str
        :param state: The state name to locate
        :type state: str
        :param postal_code: The postal code to locate
        :type postal_code: str
        :param country_code: Limit result to this country (the default is no country bias)
        :type country_code: str
        :param language_code: The language to display results in, available languages are: <ul> <li>de, en, es, fr, it, pt, ru, zh</li> </ul>
        :type language_code: str
        :param fuzzy_search: If no matches are found for the given address, start performing a recursive fuzzy search until a geolocation is found. This option is recommended for processing user input or implementing auto-complete. We use a combination of approximate string matching and data cleansing to find possible location matches
        :type fuzzy_search: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._geocode_address_serialize(
            address=address,
            house_number=house_number,
            street=street,
            city=city,
            county=county,
            state=state,
            postal_code=postal_code,
            country_code=country_code,
            language_code=language_code,
            fuzzy_search=fuzzy_search,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GeocodeAddressResponse",
            '400': "APIError",
            '403': "APIError",
            '500': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def geocode_address_with_http_info(
        self,
        address: Annotated[Optional[StrictStr], Field(description="The full address, partial address or name of a place to try and locate. Comma separated address components are preferred.")] = None,
        house_number: Annotated[Optional[StrictStr], Field(description="The house/building number to locate")] = None,
        street: Annotated[Optional[StrictStr], Field(description="The street/road name to locate")] = None,
        city: Annotated[Optional[StrictStr], Field(description="The city/town name to locate")] = None,
        county: Annotated[Optional[StrictStr], Field(description="The county/region name to locate")] = None,
        state: Annotated[Optional[StrictStr], Field(description="The state name to locate")] = None,
        postal_code: Annotated[Optional[StrictStr], Field(description="The postal code to locate")] = None,
        country_code: Annotated[Optional[StrictStr], Field(description="Limit result to this country (the default is no country bias)")] = None,
        language_code: Annotated[Optional[StrictStr], Field(description="The language to display results in, available languages are: <ul> <li>de, en, es, fr, it, pt, ru, zh</li> </ul>")] = None,
        fuzzy_search: Annotated[Optional[StrictBool], Field(description="If no matches are found for the given address, start performing a recursive fuzzy search until a geolocation is found. This option is recommended for processing user input or implementing auto-complete. We use a combination of approximate string matching and data cleansing to find possible location matches")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GeocodeAddressResponse]:
        """Geocode Address

        Geocode an address, partial address or just the name of a place

        :param address: The full address, partial address or name of a place to try and locate. Comma separated address components are preferred.
        :type address: str
        :param house_number: The house/building number to locate
        :type house_number: str
        :param street: The street/road name to locate
        :type street: str
        :param city: The city/town name to locate
        :type city: str
        :param county: The county/region name to locate
        :type county: str
        :param state: The state name to locate
        :type state: str
        :param postal_code: The postal code to locate
        :type postal_code: str
        :param country_code: Limit result to this country (the default is no country bias)
        :type country_code: str
        :param language_code: The language to display results in, available languages are: <ul> <li>de, en, es, fr, it, pt, ru, zh</li> </ul>
        :type language_code: str
        :param fuzzy_search: If no matches are found for the given address, start performing a recursive fuzzy search until a geolocation is found. This option is recommended for processing user input or implementing auto-complete. We use a combination of approximate string matching and data cleansing to find possible location matches
        :type fuzzy_search: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._geocode_address_serialize(
            address=address,
            house_number=house_number,
            street=street,
            city=city,
            county=county,
            state=state,
            postal_code=postal_code,
            country_code=country_code,
            language_code=language_code,
            fuzzy_search=fuzzy_search,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GeocodeAddressResponse",
            '400': "APIError",
            '403': "APIError",
            '500': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def geocode_address_without_preload_content(
        self,
        address: Annotated[Optional[StrictStr], Field(description="The full address, partial address or name of a place to try and locate. Comma separated address components are preferred.")] = None,
        house_number: Annotated[Optional[StrictStr], Field(description="The house/building number to locate")] = None,
        street: Annotated[Optional[StrictStr], Field(description="The street/road name to locate")] = None,
        city: Annotated[Optional[StrictStr], Field(description="The city/town name to locate")] = None,
        county: Annotated[Optional[StrictStr], Field(description="The county/region name to locate")] = None,
        state: Annotated[Optional[StrictStr], Field(description="The state name to locate")] = None,
        postal_code: Annotated[Optional[StrictStr], Field(description="The postal code to locate")] = None,
        country_code: Annotated[Optional[StrictStr], Field(description="Limit result to this country (the default is no country bias)")] = None,
        language_code: Annotated[Optional[StrictStr], Field(description="The language to display results in, available languages are: <ul> <li>de, en, es, fr, it, pt, ru, zh</li> </ul>")] = None,
        fuzzy_search: Annotated[Optional[StrictBool], Field(description="If no matches are found for the given address, start performing a recursive fuzzy search until a geolocation is found. This option is recommended for processing user input or implementing auto-complete. We use a combination of approximate string matching and data cleansing to find possible location matches")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Geocode Address

        Geocode an address, partial address or just the name of a place

        :param address: The full address, partial address or name of a place to try and locate. Comma separated address components are preferred.
        :type address: str
        :param house_number: The house/building number to locate
        :type house_number: str
        :param street: The street/road name to locate
        :type street: str
        :param city: The city/town name to locate
        :type city: str
        :param county: The county/region name to locate
        :type county: str
        :param state: The state name to locate
        :type state: str
        :param postal_code: The postal code to locate
        :type postal_code: str
        :param country_code: Limit result to this country (the default is no country bias)
        :type country_code: str
        :param language_code: The language to display results in, available languages are: <ul> <li>de, en, es, fr, it, pt, ru, zh</li> </ul>
        :type language_code: str
        :param fuzzy_search: If no matches are found for the given address, start performing a recursive fuzzy search until a geolocation is found. This option is recommended for processing user input or implementing auto-complete. We use a combination of approximate string matching and data cleansing to find possible location matches
        :type fuzzy_search: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._geocode_address_serialize(
            address=address,
            house_number=house_number,
            street=street,
            city=city,
            county=county,
            state=state,
            postal_code=postal_code,
            country_code=country_code,
            language_code=language_code,
            fuzzy_search=fuzzy_search,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GeocodeAddressResponse",
            '400': "APIError",
            '403': "APIError",
            '500': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _geocode_address_serialize(
        self,
        address,
        house_number,
        street,
        city,
        county,
        state,
        postal_code,
        country_code,
        language_code,
        fuzzy_search,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if address is not None:
            
            _query_params.append(('address', address))
            
        if house_number is not None:
            
            _query_params.append(('house-number', house_number))
            
        if street is not None:
            
            _query_params.append(('street', street))
            
        if city is not None:
            
            _query_params.append(('city', city))
            
        if county is not None:
            
            _query_params.append(('county', county))
            
        if state is not None:
            
            _query_params.append(('state', state))
            
        if postal_code is not None:
            
            _query_params.append(('postal-code', postal_code))
            
        if country_code is not None:
            
            _query_params.append(('country-code', country_code))
            
        if language_code is not None:
            
            _query_params.append(('language-code', language_code))
            
        if fuzzy_search is not None:
            
            _query_params.append(('fuzzy-search', fuzzy_search))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api-key', 
            'user-id'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/geocode-address',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def geocode_reverse(
        self,
        latitude: Annotated[StrictStr, Field(description="The location latitude in decimal degrees format")],
        longitude: Annotated[StrictStr, Field(description="The location longitude in decimal degrees format")],
        language_code: Annotated[Optional[StrictStr], Field(description="The language to display results in, available languages are: <ul> <li>de, en, es, fr, it, pt, ru</li> </ul>")] = None,
        zoom: Annotated[Optional[StrictStr], Field(description="The zoom level to respond with: <br> <ul> <li>address - the most precise address available</li> <li>street - the street level</li> <li>city - the city level</li> <li>state - the state level</li> <li>country - the country level</li> </ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GeocodeReverseResponse:
        """Geocode Reverse

        Convert a geographic coordinate (latitude and longitude) into a real world address

        :param latitude: The location latitude in decimal degrees format (required)
        :type latitude: str
        :param longitude: The location longitude in decimal degrees format (required)
        :type longitude: str
        :param language_code: The language to display results in, available languages are: <ul> <li>de, en, es, fr, it, pt, ru</li> </ul>
        :type language_code: str
        :param zoom: The zoom level to respond with: <br> <ul> <li>address - the most precise address available</li> <li>street - the street level</li> <li>city - the city level</li> <li>state - the state level</li> <li>country - the country level</li> </ul>
        :type zoom: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._geocode_reverse_serialize(
            latitude=latitude,
            longitude=longitude,
            language_code=language_code,
            zoom=zoom,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GeocodeReverseResponse",
            '400': "APIError",
            '403': "APIError",
            '500': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def geocode_reverse_with_http_info(
        self,
        latitude: Annotated[StrictStr, Field(description="The location latitude in decimal degrees format")],
        longitude: Annotated[StrictStr, Field(description="The location longitude in decimal degrees format")],
        language_code: Annotated[Optional[StrictStr], Field(description="The language to display results in, available languages are: <ul> <li>de, en, es, fr, it, pt, ru</li> </ul>")] = None,
        zoom: Annotated[Optional[StrictStr], Field(description="The zoom level to respond with: <br> <ul> <li>address - the most precise address available</li> <li>street - the street level</li> <li>city - the city level</li> <li>state - the state level</li> <li>country - the country level</li> </ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GeocodeReverseResponse]:
        """Geocode Reverse

        Convert a geographic coordinate (latitude and longitude) into a real world address

        :param latitude: The location latitude in decimal degrees format (required)
        :type latitude: str
        :param longitude: The location longitude in decimal degrees format (required)
        :type longitude: str
        :param language_code: The language to display results in, available languages are: <ul> <li>de, en, es, fr, it, pt, ru</li> </ul>
        :type language_code: str
        :param zoom: The zoom level to respond with: <br> <ul> <li>address - the most precise address available</li> <li>street - the street level</li> <li>city - the city level</li> <li>state - the state level</li> <li>country - the country level</li> </ul>
        :type zoom: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._geocode_reverse_serialize(
            latitude=latitude,
            longitude=longitude,
            language_code=language_code,
            zoom=zoom,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GeocodeReverseResponse",
            '400': "APIError",
            '403': "APIError",
            '500': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def geocode_reverse_without_preload_content(
        self,
        latitude: Annotated[StrictStr, Field(description="The location latitude in decimal degrees format")],
        longitude: Annotated[StrictStr, Field(description="The location longitude in decimal degrees format")],
        language_code: Annotated[Optional[StrictStr], Field(description="The language to display results in, available languages are: <ul> <li>de, en, es, fr, it, pt, ru</li> </ul>")] = None,
        zoom: Annotated[Optional[StrictStr], Field(description="The zoom level to respond with: <br> <ul> <li>address - the most precise address available</li> <li>street - the street level</li> <li>city - the city level</li> <li>state - the state level</li> <li>country - the country level</li> </ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Geocode Reverse

        Convert a geographic coordinate (latitude and longitude) into a real world address

        :param latitude: The location latitude in decimal degrees format (required)
        :type latitude: str
        :param longitude: The location longitude in decimal degrees format (required)
        :type longitude: str
        :param language_code: The language to display results in, available languages are: <ul> <li>de, en, es, fr, it, pt, ru</li> </ul>
        :type language_code: str
        :param zoom: The zoom level to respond with: <br> <ul> <li>address - the most precise address available</li> <li>street - the street level</li> <li>city - the city level</li> <li>state - the state level</li> <li>country - the country level</li> </ul>
        :type zoom: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._geocode_reverse_serialize(
            latitude=latitude,
            longitude=longitude,
            language_code=language_code,
            zoom=zoom,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GeocodeReverseResponse",
            '400': "APIError",
            '403': "APIError",
            '500': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _geocode_reverse_serialize(
        self,
        latitude,
        longitude,
        language_code,
        zoom,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if latitude is not None:
            
            _query_params.append(('latitude', latitude))
            
        if longitude is not None:
            
            _query_params.append(('longitude', longitude))
            
        if language_code is not None:
            
            _query_params.append(('language-code', language_code))
            
        if zoom is not None:
            
            _query_params.append(('zoom', zoom))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api-key', 
            'user-id'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/geocode-reverse',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def i_p_info(
        self,
        ip: Annotated[StrictStr, Field(description="IPv4 or IPv6 address")],
        reverse_lookup: Annotated[Optional[StrictBool], Field(description="Do a reverse DNS (PTR) lookup. This option can add extra delay to the request so only use it if you need it")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> IPInfoResponse:
        """IP Info

        Get location information about an IP address and do reverse DNS (PTR) lookups

        :param ip: IPv4 or IPv6 address (required)
        :type ip: str
        :param reverse_lookup: Do a reverse DNS (PTR) lookup. This option can add extra delay to the request so only use it if you need it
        :type reverse_lookup: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._i_p_info_serialize(
            ip=ip,
            reverse_lookup=reverse_lookup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IPInfoResponse",
            '400': "APIError",
            '403': "APIError",
            '500': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def i_p_info_with_http_info(
        self,
        ip: Annotated[StrictStr, Field(description="IPv4 or IPv6 address")],
        reverse_lookup: Annotated[Optional[StrictBool], Field(description="Do a reverse DNS (PTR) lookup. This option can add extra delay to the request so only use it if you need it")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[IPInfoResponse]:
        """IP Info

        Get location information about an IP address and do reverse DNS (PTR) lookups

        :param ip: IPv4 or IPv6 address (required)
        :type ip: str
        :param reverse_lookup: Do a reverse DNS (PTR) lookup. This option can add extra delay to the request so only use it if you need it
        :type reverse_lookup: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._i_p_info_serialize(
            ip=ip,
            reverse_lookup=reverse_lookup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IPInfoResponse",
            '400': "APIError",
            '403': "APIError",
            '500': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def i_p_info_without_preload_content(
        self,
        ip: Annotated[StrictStr, Field(description="IPv4 or IPv6 address")],
        reverse_lookup: Annotated[Optional[StrictBool], Field(description="Do a reverse DNS (PTR) lookup. This option can add extra delay to the request so only use it if you need it")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """IP Info

        Get location information about an IP address and do reverse DNS (PTR) lookups

        :param ip: IPv4 or IPv6 address (required)
        :type ip: str
        :param reverse_lookup: Do a reverse DNS (PTR) lookup. This option can add extra delay to the request so only use it if you need it
        :type reverse_lookup: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._i_p_info_serialize(
            ip=ip,
            reverse_lookup=reverse_lookup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IPInfoResponse",
            '400': "APIError",
            '403': "APIError",
            '500': "APIError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _i_p_info_serialize(
        self,
        ip,
        reverse_lookup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if ip is not None:
            
            _query_params.append(('ip', ip))
            
        if reverse_lookup is not None:
            
            _query_params.append(('reverse-lookup', reverse_lookup))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api-key', 
            'user-id'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/ip-info',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



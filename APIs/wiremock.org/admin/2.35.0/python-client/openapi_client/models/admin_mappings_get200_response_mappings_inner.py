# coding: utf-8

"""
    WireMock

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.35.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.admin_mappings_get200_response_mappings_inner_request import AdminMappingsGet200ResponseMappingsInnerRequest
from openapi_client.models.admin_mappings_get200_response_mappings_inner_response import AdminMappingsGet200ResponseMappingsInnerResponse
from typing import Optional, Set
from typing_extensions import Self

class AdminMappingsGet200ResponseMappingsInner(BaseModel):
    """
    AdminMappingsGet200ResponseMappingsInner
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="This stub mapping's unique identifier")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.")
    name: Optional[StrictStr] = Field(default=None, description="The stub mapping's name")
    new_scenario_state: Optional[StrictStr] = Field(default=None, description="The new state for the scenario to be updated to after this stub is served.", alias="newScenarioState")
    persistent: Optional[StrictBool] = Field(default=None, description="Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.")
    post_serve_actions: Optional[Dict[str, Any]] = Field(default=None, description="A map of the names of post serve action extensions to trigger and their parameters.", alias="postServeActions")
    priority: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="This stub mapping's priority relative to others. 1 is highest.")
    request: Optional[AdminMappingsGet200ResponseMappingsInnerRequest] = None
    required_scenario_state: Optional[StrictStr] = Field(default=None, description="The required state of the scenario in order for this stub to be matched.", alias="requiredScenarioState")
    response: Optional[AdminMappingsGet200ResponseMappingsInnerResponse] = None
    scenario_name: Optional[StrictStr] = Field(default=None, description="The name of the scenario that this stub mapping is part of", alias="scenarioName")
    uuid: Optional[StrictStr] = Field(default=None, description="Alias for the id")
    __properties: ClassVar[List[str]] = ["id", "metadata", "name", "newScenarioState", "persistent", "postServeActions", "priority", "request", "requiredScenarioState", "response", "scenarioName", "uuid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdminMappingsGet200ResponseMappingsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of request
        if self.request:
            _dict['request'] = self.request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of response
        if self.response:
            _dict['response'] = self.response.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdminMappingsGet200ResponseMappingsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "metadata": obj.get("metadata"),
            "name": obj.get("name"),
            "newScenarioState": obj.get("newScenarioState"),
            "persistent": obj.get("persistent"),
            "postServeActions": obj.get("postServeActions"),
            "priority": obj.get("priority"),
            "request": AdminMappingsGet200ResponseMappingsInnerRequest.from_dict(obj["request"]) if obj.get("request") is not None else None,
            "requiredScenarioState": obj.get("requiredScenarioState"),
            "response": AdminMappingsGet200ResponseMappingsInnerResponse.from_dict(obj["response"]) if obj.get("response") is not None else None,
            "scenarioName": obj.get("scenarioName"),
            "uuid": obj.get("uuid")
        })
        return _obj



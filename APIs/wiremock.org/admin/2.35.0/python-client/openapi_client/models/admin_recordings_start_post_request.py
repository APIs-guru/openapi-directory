# coding: utf-8

"""
    WireMock

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.35.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.admin_recordings_snapshot_post_request_all_of_capture_headers_value import AdminRecordingsSnapshotPostRequestAllOfCaptureHeadersValue
from openapi_client.models.admin_recordings_snapshot_post_request_all_of_extract_body_criteria import AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria
from openapi_client.models.admin_recordings_snapshot_post_request_all_of_request_body_pattern import AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern
from openapi_client.models.admin_recordings_start_post_request_all_of_filters import AdminRecordingsStartPostRequestAllOfFilters
from typing import Optional, Set
from typing_extensions import Self

class AdminRecordingsStartPostRequest(BaseModel):
    """
    AdminRecordingsStartPostRequest
    """ # noqa: E501
    capture_headers: Optional[Dict[str, AdminRecordingsSnapshotPostRequestAllOfCaptureHeadersValue]] = Field(default=None, description="Headers from the request to include in the generated stub mappings, mapped to parameter objects. The only parameter available is \"caseInsensitive\", which defaults to false", alias="captureHeaders")
    extract_body_criteria: Optional[AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria] = Field(default=None, alias="extractBodyCriteria")
    persist: Optional[StrictBool] = Field(default=True, description="Whether to save stub mappings to the file system or just return them")
    repeats_as_scenarios: Optional[StrictBool] = Field(default=True, description="When true, duplicate requests will be added to a Scenario. When false, duplicates are discarded", alias="repeatsAsScenarios")
    request_body_pattern: Optional[AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern] = Field(default=None, alias="requestBodyPattern")
    transformer_parameters: Optional[Dict[str, Any]] = Field(default=None, description="List of names of stub mappings transformers to apply to generated stubs", alias="transformerParameters")
    transformers: Optional[List[StrictStr]] = Field(default=None, description="Parameters to pass to stub mapping transformers")
    filters: Optional[AdminRecordingsStartPostRequestAllOfFilters] = None
    target_base_url: Optional[StrictStr] = Field(default=None, description="Target URL when using the record and playback API", alias="targetBaseUrl")
    __properties: ClassVar[List[str]] = ["captureHeaders", "extractBodyCriteria", "persist", "repeatsAsScenarios", "requestBodyPattern", "transformerParameters", "transformers", "filters", "targetBaseUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdminRecordingsStartPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in capture_headers (dict)
        _field_dict = {}
        if self.capture_headers:
            for _key_capture_headers in self.capture_headers:
                if self.capture_headers[_key_capture_headers]:
                    _field_dict[_key_capture_headers] = self.capture_headers[_key_capture_headers].to_dict()
            _dict['captureHeaders'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of extract_body_criteria
        if self.extract_body_criteria:
            _dict['extractBodyCriteria'] = self.extract_body_criteria.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request_body_pattern
        if self.request_body_pattern:
            _dict['requestBodyPattern'] = self.request_body_pattern.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filters
        if self.filters:
            _dict['filters'] = self.filters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdminRecordingsStartPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "captureHeaders": dict(
                (_k, AdminRecordingsSnapshotPostRequestAllOfCaptureHeadersValue.from_dict(_v))
                for _k, _v in obj["captureHeaders"].items()
            )
            if obj.get("captureHeaders") is not None
            else None,
            "extractBodyCriteria": AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria.from_dict(obj["extractBodyCriteria"]) if obj.get("extractBodyCriteria") is not None else None,
            "persist": obj.get("persist") if obj.get("persist") is not None else True,
            "repeatsAsScenarios": obj.get("repeatsAsScenarios") if obj.get("repeatsAsScenarios") is not None else True,
            "requestBodyPattern": AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern.from_dict(obj["requestBodyPattern"]) if obj.get("requestBodyPattern") is not None else None,
            "transformerParameters": obj.get("transformerParameters"),
            "transformers": obj.get("transformers"),
            "filters": AdminRecordingsStartPostRequestAllOfFilters.from_dict(obj["filters"]) if obj.get("filters") is not None else None,
            "targetBaseUrl": obj.get("targetBaseUrl")
        })
        return _obj



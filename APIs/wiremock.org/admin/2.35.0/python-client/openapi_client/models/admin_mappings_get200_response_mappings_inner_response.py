# coding: utf-8

"""
    WireMock

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.35.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.admin_mappings_get200_response_mappings_inner_response_all_of_delay_distribution import AdminMappingsGet200ResponseMappingsInnerResponseAllOfDelayDistribution
from typing import Optional, Set
from typing_extensions import Self

class AdminMappingsGet200ResponseMappingsInnerResponse(BaseModel):
    """
    AdminMappingsGet200ResponseMappingsInnerResponse
    """ # noqa: E501
    additional_proxy_request_headers: Optional[Dict[str, Any]] = Field(default=None, description="Extra request headers to send when proxying to another host.", alias="additionalProxyRequestHeaders")
    base64_body: Optional[StrictStr] = Field(default=None, description="The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.", alias="base64Body")
    body: Optional[StrictStr] = Field(default=None, description="The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.")
    body_file_name: Optional[StrictStr] = Field(default=None, description="The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.", alias="bodyFileName")
    delay_distribution: Optional[AdminMappingsGet200ResponseMappingsInnerResponseAllOfDelayDistribution] = Field(default=None, alias="delayDistribution")
    fault: Optional[StrictStr] = Field(default=None, description="The fault to apply (instead of a full, valid response).")
    fixed_delay_milliseconds: Optional[StrictInt] = Field(default=None, description="Number of milliseconds to delay be before sending the response.", alias="fixedDelayMilliseconds")
    from_configured_stub: Optional[StrictBool] = Field(default=None, description="Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.", alias="fromConfiguredStub")
    headers: Optional[Dict[str, Any]] = Field(default=None, description="Map of response headers to send")
    json_body: Optional[Dict[str, Any]] = Field(default=None, description="The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.", alias="jsonBody")
    proxy_base_url: Optional[StrictStr] = Field(default=None, description="The base URL of the target to proxy matching requests to.", alias="proxyBaseUrl")
    status: Optional[StrictInt] = Field(default=None, description="The HTTP status code to be returned")
    status_message: Optional[StrictStr] = Field(default=None, description="The HTTP status message to be returned", alias="statusMessage")
    transformer_parameters: Optional[Dict[str, Any]] = Field(default=None, description="Parameters to apply to response transformers.", alias="transformerParameters")
    transformers: Optional[List[StrictStr]] = Field(default=None, description="List of names of transformers to apply to this response.")
    __properties: ClassVar[List[str]] = ["additionalProxyRequestHeaders", "base64Body", "body", "bodyFileName", "delayDistribution", "fault", "fixedDelayMilliseconds", "fromConfiguredStub", "headers", "jsonBody", "proxyBaseUrl", "status", "statusMessage", "transformerParameters", "transformers"]

    @field_validator('fault')
    def fault_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONNECTION_RESET_BY_PEER', 'EMPTY_RESPONSE', 'MALFORMED_RESPONSE_CHUNK', 'RANDOM_DATA_THEN_CLOSE']):
            raise ValueError("must be one of enum values ('CONNECTION_RESET_BY_PEER', 'EMPTY_RESPONSE', 'MALFORMED_RESPONSE_CHUNK', 'RANDOM_DATA_THEN_CLOSE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdminMappingsGet200ResponseMappingsInnerResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of delay_distribution
        if self.delay_distribution:
            _dict['delayDistribution'] = self.delay_distribution.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdminMappingsGet200ResponseMappingsInnerResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalProxyRequestHeaders": obj.get("additionalProxyRequestHeaders"),
            "base64Body": obj.get("base64Body"),
            "body": obj.get("body"),
            "bodyFileName": obj.get("bodyFileName"),
            "delayDistribution": AdminMappingsGet200ResponseMappingsInnerResponseAllOfDelayDistribution.from_dict(obj["delayDistribution"]) if obj.get("delayDistribution") is not None else None,
            "fault": obj.get("fault"),
            "fixedDelayMilliseconds": obj.get("fixedDelayMilliseconds"),
            "fromConfiguredStub": obj.get("fromConfiguredStub"),
            "headers": obj.get("headers"),
            "jsonBody": obj.get("jsonBody"),
            "proxyBaseUrl": obj.get("proxyBaseUrl"),
            "status": obj.get("status"),
            "statusMessage": obj.get("statusMessage"),
            "transformerParameters": obj.get("transformerParameters"),
            "transformers": obj.get("transformers")
        })
        return _obj



# coding: utf-8

"""
    MineSkin API

    Client implementations:  Java: https://github.com/InventivetalentDev/MineskinClient NodeJS: https://github.com/InventivetalentDev/mineskin-client  Examples: https://github.com/MineSkin/examples 

    The version of the OpenAPI document: 1.0.0
    Contact: info@mineskin.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.skin_data import SkinData
from typing import Optional, Set
from typing_extensions import Self

class GenerateUploadPost200Response(BaseModel):
    """
    GenerateUploadPost200Response
    """ # noqa: E501
    account: Optional[StrictInt] = None
    account_id: Optional[StrictInt] = Field(default=None, alias="accountId")
    data: SkinData
    duration: Optional[Union[StrictFloat, StrictInt]] = None
    id: StrictInt
    id_str: Optional[StrictStr] = Field(default=None, alias="idStr")
    model: StrictStr
    name: Optional[StrictStr] = None
    private: Optional[StrictBool] = None
    server: Optional[StrictStr] = None
    timestamp: Optional[Union[StrictFloat, StrictInt]] = None
    uuid: Optional[StrictStr] = None
    variant: Optional[StrictStr] = None
    views: Optional[Union[StrictFloat, StrictInt]] = None
    duplicate: Optional[StrictBool] = None
    next_request: Optional[StrictInt] = Field(default=None, alias="nextRequest")
    __properties: ClassVar[List[str]] = ["account", "accountId", "data", "duration", "id", "idStr", "model", "name", "private", "server", "timestamp", "uuid", "variant", "views", "duplicate", "nextRequest"]

    @field_validator('model')
    def model_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['slim', 'steve', 'unknown']):
            raise ValueError("must be one of enum values ('slim', 'steve', 'unknown')")
        return value

    @field_validator('variant')
    def variant_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['classic', 'slim']):
            raise ValueError("must be one of enum values ('classic', 'slim')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenerateUploadPost200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenerateUploadPost200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account": obj.get("account"),
            "accountId": obj.get("accountId"),
            "data": SkinData.from_dict(obj["data"]) if obj.get("data") is not None else None,
            "duration": obj.get("duration"),
            "id": obj.get("id"),
            "idStr": obj.get("idStr"),
            "model": obj.get("model"),
            "name": obj.get("name"),
            "private": obj.get("private"),
            "server": obj.get("server"),
            "timestamp": obj.get("timestamp"),
            "uuid": obj.get("uuid"),
            "variant": obj.get("variant"),
            "views": obj.get("views"),
            "duplicate": obj.get("duplicate"),
            "nextRequest": obj.get("nextRequest")
        })
        return _obj



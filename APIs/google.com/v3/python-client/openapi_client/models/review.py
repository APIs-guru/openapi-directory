# coding: utf-8

"""
    Travel Partner API

    The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.rating import Rating
from typing import Optional, Set
from typing_extensions import Self

class Review(BaseModel):
    """
    A single review in a VR Listing. NEXT ID: 10
    """ # noqa: E501
    author: Optional[StrictStr] = Field(default=None, description="The author of the review.")
    body: Optional[StrictStr] = Field(default=None, description="The body of the review.")
    language_code: Optional[StrictStr] = Field(default=None, description="Language of the review, such as \"en\", \"de\", etc.", alias="languageCode")
    link: Optional[StrictStr] = Field(default=None, description="The url of the review.")
    rating: Optional[List[Rating]] = Field(default=None, description="Any ratings associated with this review. This is repeated because reviews can include ratings on different aspects of a listing, e.g. location, cleanliness, etc.")
    review_time: Optional[StrictStr] = Field(default=None, description="Unix timestamp (in seconds) of the review, in UTC+0.", alias="reviewTime")
    title: Optional[StrictStr] = Field(default=None, description="The title of the review, for example: Great three bedrooms.")
    type: Optional[StrictStr] = Field(default=None, description="The type of the review.")
    visit_time: Optional[StrictStr] = Field(default=None, description="Unix timestamp (in seconds) of when the stay was, in UTC+0.", alias="visitTime")
    __properties: ClassVar[List[str]] = ["author", "body", "languageCode", "link", "rating", "reviewTime", "title", "type", "visitTime"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'EDITORIAL', 'USER']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'EDITORIAL', 'USER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Review from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in rating (list)
        _items = []
        if self.rating:
            for _item_rating in self.rating:
                if _item_rating:
                    _items.append(_item_rating.to_dict())
            _dict['rating'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Review from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "author": obj.get("author"),
            "body": obj.get("body"),
            "languageCode": obj.get("languageCode"),
            "link": obj.get("link"),
            "rating": [Rating.from_dict(_item) for _item in obj["rating"]] if obj.get("rating") is not None else None,
            "reviewTime": obj.get("reviewTime"),
            "title": obj.get("title"),
            "type": obj.get("type"),
            "visitTime": obj.get("visitTime")
        })
        return _obj



# coding: utf-8

"""
    Travel Partner API

    The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NoPriceCountDetails(BaseModel):
    """
    The reasons that contributed to the no price count and the total count for each reason.
    """ # noqa: E501
    live_pricing_config_issue_count: Optional[StrictStr] = Field(default=None, description="The total number of missed participation due to live pricing not being triggered for any of the following reasons: * You didn't have live pricing configured for these searches. * You restricted Google from accessing the hotel itinerary in question.", alias="livePricingConfigIssueCount")
    live_pricing_not_available_count: Optional[StrictStr] = Field(default=None, description="The total number of missed participation due to live pricing being unavailable. Live pricing will not be triggered for certain default itineraries or UIs. In this scenario, partners will need a cached price to participate.", alias="livePricingNotAvailableCount")
    live_pricing_not_triggered_count: Optional[StrictStr] = Field(default=None, description="The total number of missed participation due to live pricing not being triggered for any of the following reasons: * You didn't set a bid. * You didn't have a valid landing page. * There weren't enough prices in the cache.", alias="livePricingNotTriggeredCount")
    live_pricing_other_reason_count: Optional[StrictStr] = Field(default=None, description="The number of missed participations due to other issues with live pricing.", alias="livePricingOtherReasonCount")
    live_pricing_technical_issue_count: Optional[StrictStr] = Field(default=None, description="The total number of missed participation due to technical issues with live pricing for any of the following reasons: * You didnâ€™t respond quickly enough and exceeded the response deadline (around 4000 milliseconds). * You returned an error. * Your response was malformed.", alias="livePricingTechnicalIssueCount")
    __properties: ClassVar[List[str]] = ["livePricingConfigIssueCount", "livePricingNotAvailableCount", "livePricingNotTriggeredCount", "livePricingOtherReasonCount", "livePricingTechnicalIssueCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NoPriceCountDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NoPriceCountDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "livePricingConfigIssueCount": obj.get("livePricingConfigIssueCount"),
            "livePricingNotAvailableCount": obj.get("livePricingNotAvailableCount"),
            "livePricingNotTriggeredCount": obj.get("livePricingNotTriggeredCount"),
            "livePricingOtherReasonCount": obj.get("livePricingOtherReasonCount"),
            "livePricingTechnicalIssueCount": obj.get("livePricingTechnicalIssueCount")
        })
        return _obj



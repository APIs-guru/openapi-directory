# coding: utf-8

"""
    Travel Partner API

    The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.model_date import ModelDate
from openapi_client.models.price_coverage_bucket import PriceCoverageBucket
from typing import Optional, Set
from typing_extensions import Self

class PriceCoverageView(BaseModel):
    """
    A price coverage view. Covers the `price_coverage_stats` Scorecard functionality in pre-v3.0 API versions. For more information, refer to Price Coverage for Push and Hint partners.
    """ # noqa: E501
    calculation_date: Optional[ModelDate] = Field(default=None, alias="calculationDate")
    matched_property_count: Optional[StrictInt] = Field(default=None, description="The total number of properties that have prices for the given itineraries.", alias="matchedPropertyCount")
    price_coverage_binary_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The ratio between the number of hotels which have at least one price for the calculation period and `matched_property_count`.", alias="priceCoverageBinaryPercent")
    price_coverage_buckets: Optional[List[PriceCoverageBucket]] = Field(default=None, description="Price coverage stats for combinations of advance booking window and length of stay ranges.", alias="priceCoverageBuckets")
    price_coverage_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The overall price coverage for an account. This value is the ratio between the number of hotel prices for the calculation booking window and length of stay range divided by the number of all possible prices, which is `matched_property_count` times 330 (for advance book window) times 30 (for length of stay).", alias="priceCoveragePercent")
    __properties: ClassVar[List[str]] = ["calculationDate", "matchedPropertyCount", "priceCoverageBinaryPercent", "priceCoverageBuckets", "priceCoveragePercent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PriceCoverageView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of calculation_date
        if self.calculation_date:
            _dict['calculationDate'] = self.calculation_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in price_coverage_buckets (list)
        _items = []
        if self.price_coverage_buckets:
            for _item_price_coverage_buckets in self.price_coverage_buckets:
                if _item_price_coverage_buckets:
                    _items.append(_item_price_coverage_buckets.to_dict())
            _dict['priceCoverageBuckets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PriceCoverageView from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "calculationDate": ModelDate.from_dict(obj["calculationDate"]) if obj.get("calculationDate") is not None else None,
            "matchedPropertyCount": obj.get("matchedPropertyCount"),
            "priceCoverageBinaryPercent": obj.get("priceCoverageBinaryPercent"),
            "priceCoverageBuckets": [PriceCoverageBucket.from_dict(_item) for _item in obj["priceCoverageBuckets"]] if obj.get("priceCoverageBuckets") is not None else None,
            "priceCoveragePercent": obj.get("priceCoveragePercent")
        })
        return _obj



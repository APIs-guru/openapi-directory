# coding: utf-8

"""
    Travel Partner API

    The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DataIssueDetail(BaseModel):
    """
    Details on a data issue in the listing.
    """ # noqa: E501
    data_issue_severity: Optional[StrictStr] = Field(default=None, description="The severity of the data issue.", alias="dataIssueSeverity")
    data_issue_type: Optional[StrictStr] = Field(default=None, description="The type of the data issue.", alias="dataIssueType")
    is_self_resolving: Optional[StrictBool] = Field(default=None, description="Whether or not the issue is self-resolving. If true, the issue is expected to resolve itself. If false or not set, action is needed to resolve the issue. Refer to documentation on the data issueâ€™s type for further information.", alias="isSelfResolving")
    __properties: ClassVar[List[str]] = ["dataIssueSeverity", "dataIssueType", "isSelfResolving"]

    @field_validator('data_issue_severity')
    def data_issue_severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_ISSUE_SEVERITY_UNSPECIFIED', 'ERROR', 'WARNING', 'INFO']):
            raise ValueError("must be one of enum values ('DATA_ISSUE_SEVERITY_UNSPECIFIED', 'ERROR', 'WARNING', 'INFO')")
        return value

    @field_validator('data_issue_type')
    def data_issue_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FEED_DATA_ISSUE_UNSPECIFIED', 'FEED_DATA_ISSUE_UNKNOWN', 'NO_DATA_ISSUE', 'DUPLICATE_ADDRESS', 'MISSING_PHYSICAL_STREET_ADDRESS', 'MISSING_STREET_NAME', 'MISSING_STREET_NUMBER', 'MISSING_ADDRESS', 'MISSING_COUNTRY', 'INVALID_POSTAL_CODE', 'INVALID_POSTAL_CODE_SUFFIX', 'UNEXPECTED_POSTAL_CODE_SUFFIX', 'UNEXPECTED_POSTAL_CODE', 'INVALID_AMENITIES', 'INVALID_EMAIL_ADDRESS', 'DUPLICATE_LATLONG', 'LATLONG_INCONSISTENT_WITH_ADDRESS', 'MISSING_LATLONG', 'COULD_NOT_GEOCODE', 'MISSING_HOTEL_NAME', 'HOTEL_NAME_EMPTY', 'INVALID_HOTEL_NAME', 'HOTEL_NAME_TOO_LONG', 'PARSE_ERROR_IN_XML', 'UNEXPECTED_ATTRIBUTE_IN_XML', 'DUPLICATE_PHONE_NUMBER', 'MISSING_PHONE_NUMBER', 'MISSING_VOICE_PHONE_NUMBER', 'INVALID_PHONE_NUMBER_FORMAT', 'INVALID_PHONE_NUMBER', 'INVALID_PHONE_NUMBER_COUNTRY_CODE', 'PHONE_NUMBER_TOO_LONG', 'PHONE_NUMBER_TOO_SHORT', 'INVALID_WEBSITE_URL', 'ADWORDS_ATTRIBUTE_TOO_LONG', 'BRAND_NOT_ALLOWED', 'FLAGGED_DUE_TO_SUSPICIOUS_METADATA', 'NOT_ENOUGH_IMAGES_PROVIDED', 'IMAGE_PROCESSING_IN_PROGRESS', 'CANNOT_FETCH_IMAGES', 'INCOMPATIBLE_IMAGE_SIZE_OR_LOW_QUALITY', 'MISSING_LANG_IN_RAW_LISTING', 'IS_HOTEL', 'MISSING_REQ_ATTR', 'MISSING_NAME', 'MISSING_LANG_IN_NAME', 'VR_NAME_TOO_LONG', 'TEST_PROPERTY', 'NON_VR_ACCOMMODATION_TYPE_BASED_ON_LISTING_NAME', 'BRAND_NAME_TOO_LONG', 'MISSING_BRAND_NAME', 'INVALID_REVIEW_RATING', 'INVALID_CHECKIN_FORMAT', 'INVALID_CHECKOUT_FORMAT']):
            raise ValueError("must be one of enum values ('FEED_DATA_ISSUE_UNSPECIFIED', 'FEED_DATA_ISSUE_UNKNOWN', 'NO_DATA_ISSUE', 'DUPLICATE_ADDRESS', 'MISSING_PHYSICAL_STREET_ADDRESS', 'MISSING_STREET_NAME', 'MISSING_STREET_NUMBER', 'MISSING_ADDRESS', 'MISSING_COUNTRY', 'INVALID_POSTAL_CODE', 'INVALID_POSTAL_CODE_SUFFIX', 'UNEXPECTED_POSTAL_CODE_SUFFIX', 'UNEXPECTED_POSTAL_CODE', 'INVALID_AMENITIES', 'INVALID_EMAIL_ADDRESS', 'DUPLICATE_LATLONG', 'LATLONG_INCONSISTENT_WITH_ADDRESS', 'MISSING_LATLONG', 'COULD_NOT_GEOCODE', 'MISSING_HOTEL_NAME', 'HOTEL_NAME_EMPTY', 'INVALID_HOTEL_NAME', 'HOTEL_NAME_TOO_LONG', 'PARSE_ERROR_IN_XML', 'UNEXPECTED_ATTRIBUTE_IN_XML', 'DUPLICATE_PHONE_NUMBER', 'MISSING_PHONE_NUMBER', 'MISSING_VOICE_PHONE_NUMBER', 'INVALID_PHONE_NUMBER_FORMAT', 'INVALID_PHONE_NUMBER', 'INVALID_PHONE_NUMBER_COUNTRY_CODE', 'PHONE_NUMBER_TOO_LONG', 'PHONE_NUMBER_TOO_SHORT', 'INVALID_WEBSITE_URL', 'ADWORDS_ATTRIBUTE_TOO_LONG', 'BRAND_NOT_ALLOWED', 'FLAGGED_DUE_TO_SUSPICIOUS_METADATA', 'NOT_ENOUGH_IMAGES_PROVIDED', 'IMAGE_PROCESSING_IN_PROGRESS', 'CANNOT_FETCH_IMAGES', 'INCOMPATIBLE_IMAGE_SIZE_OR_LOW_QUALITY', 'MISSING_LANG_IN_RAW_LISTING', 'IS_HOTEL', 'MISSING_REQ_ATTR', 'MISSING_NAME', 'MISSING_LANG_IN_NAME', 'VR_NAME_TOO_LONG', 'TEST_PROPERTY', 'NON_VR_ACCOMMODATION_TYPE_BASED_ON_LISTING_NAME', 'BRAND_NAME_TOO_LONG', 'MISSING_BRAND_NAME', 'INVALID_REVIEW_RATING', 'INVALID_CHECKIN_FORMAT', 'INVALID_CHECKOUT_FORMAT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataIssueDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataIssueDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataIssueSeverity": obj.get("dataIssueSeverity"),
            "dataIssueType": obj.get("dataIssueType"),
            "isSelfResolving": obj.get("isSelfResolving")
        })
        return _obj



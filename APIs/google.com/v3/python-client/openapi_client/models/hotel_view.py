# coding: utf-8

"""
    Travel Partner API

    The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_issue_detail import DataIssueDetail
from typing import Optional, Set
from typing_extensions import Self

class HotelView(BaseModel):
    """
    A hotel view.
    """ # noqa: E501
    data_issue_detail: Optional[List[DataIssueDetail]] = Field(default=None, description="The type and severity of each data quality issue in the feed. If your feed contains data issues, update the feed and resubmit it. For more information, refer to this article.", alias="dataIssueDetail")
    data_issues: Optional[List[StrictStr]] = Field(default=None, description="DEPRECATED. Indicates that the hotel has data quality issues. The value of this field indicates the type of error. This has been replaced with the data_issue_detail field. If your feed contains data issues, update the feed and resubmit it. For more information, refer to this article.", alias="dataIssues")
    google_cluster_id: Optional[StrictStr] = Field(default=None, description="The Google Maps identifier for the hotel.", alias="googleClusterId")
    google_hotel_display_name: Optional[StrictStr] = Field(default=None, description="Google's hotel name.", alias="googleHotelDisplayName")
    google_hotel_id: Optional[StrictStr] = Field(default=None, description="Google's canonical ID for the hotel.", alias="googleHotelId")
    live_on_google: Optional[StrictBool] = Field(default=None, description="Optional. Whether the hotel appears in Google's hotel booking links. Declaration & behavior to get detection of presence/absence in JSON conversion.", alias="liveOnGoogle")
    match_status: Optional[StrictStr] = Field(default=None, description="Current matching status of the hotel.", alias="matchStatus")
    overclustered_partner_hotel_ids: Optional[List[StrictStr]] = Field(default=None, description="Other hotels with which the hotel is overclustered. If your feed contains overclustered hotels, update the feed and resubmit it. To do this, you can use the manual match tool.", alias="overclusteredPartnerHotelIds")
    partner_hotel_display_name: Optional[StrictStr] = Field(default=None, description="Partner's hotel name.", alias="partnerHotelDisplayName")
    partner_hotel_id: Optional[StrictStr] = Field(default=None, description="The unique ID of the hotel that the partner provides in their Hotel List Feed.", alias="partnerHotelId")
    primary_overclustered_partner_hotel_id: Optional[StrictStr] = Field(default=None, description="The primary hotel in the overclustered set.", alias="primaryOverclusteredPartnerHotelId")
    property_details: Optional[StrictStr] = Field(default=None, description="Optional. A URL to the property on Google. Only available for properties that are listed.", alias="propertyDetails")
    __properties: ClassVar[List[str]] = ["dataIssueDetail", "dataIssues", "googleClusterId", "googleHotelDisplayName", "googleHotelId", "liveOnGoogle", "matchStatus", "overclusteredPartnerHotelIds", "partnerHotelDisplayName", "partnerHotelId", "primaryOverclusteredPartnerHotelId", "propertyDetails"]

    @field_validator('data_issues')
    def data_issues_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['FEED_DATA_ISSUE_UNSPECIFIED', 'FEED_DATA_ISSUE_UNKNOWN', 'NO_DATA_ISSUE', 'DUPLICATE_ADDRESS', 'MISSING_PHYSICAL_STREET_ADDRESS', 'MISSING_STREET_NAME', 'MISSING_STREET_NUMBER', 'MISSING_ADDRESS', 'MISSING_COUNTRY', 'INVALID_POSTAL_CODE', 'INVALID_POSTAL_CODE_SUFFIX', 'UNEXPECTED_POSTAL_CODE_SUFFIX', 'UNEXPECTED_POSTAL_CODE', 'INVALID_AMENITIES', 'INVALID_EMAIL_ADDRESS', 'DUPLICATE_LATLONG', 'LATLONG_INCONSISTENT_WITH_ADDRESS', 'MISSING_LATLONG', 'COULD_NOT_GEOCODE', 'MISSING_HOTEL_NAME', 'HOTEL_NAME_EMPTY', 'INVALID_HOTEL_NAME', 'HOTEL_NAME_TOO_LONG', 'PARSE_ERROR_IN_XML', 'UNEXPECTED_ATTRIBUTE_IN_XML', 'DUPLICATE_PHONE_NUMBER', 'MISSING_PHONE_NUMBER', 'MISSING_VOICE_PHONE_NUMBER', 'INVALID_PHONE_NUMBER_FORMAT', 'INVALID_PHONE_NUMBER', 'INVALID_PHONE_NUMBER_COUNTRY_CODE', 'PHONE_NUMBER_TOO_LONG', 'PHONE_NUMBER_TOO_SHORT', 'INVALID_WEBSITE_URL', 'ADWORDS_ATTRIBUTE_TOO_LONG', 'BRAND_NOT_ALLOWED', 'FLAGGED_DUE_TO_SUSPICIOUS_METADATA', 'NOT_ENOUGH_IMAGES_PROVIDED', 'IMAGE_PROCESSING_IN_PROGRESS', 'CANNOT_FETCH_IMAGES', 'INCOMPATIBLE_IMAGE_SIZE_OR_LOW_QUALITY', 'MISSING_LANG_IN_RAW_LISTING', 'IS_HOTEL', 'MISSING_REQ_ATTR', 'MISSING_NAME', 'MISSING_LANG_IN_NAME', 'VR_NAME_TOO_LONG', 'TEST_PROPERTY', 'NON_VR_ACCOMMODATION_TYPE_BASED_ON_LISTING_NAME', 'BRAND_NAME_TOO_LONG', 'MISSING_BRAND_NAME', 'INVALID_REVIEW_RATING', 'INVALID_CHECKIN_FORMAT', 'INVALID_CHECKOUT_FORMAT']):
                raise ValueError("each list item must be one of ('FEED_DATA_ISSUE_UNSPECIFIED', 'FEED_DATA_ISSUE_UNKNOWN', 'NO_DATA_ISSUE', 'DUPLICATE_ADDRESS', 'MISSING_PHYSICAL_STREET_ADDRESS', 'MISSING_STREET_NAME', 'MISSING_STREET_NUMBER', 'MISSING_ADDRESS', 'MISSING_COUNTRY', 'INVALID_POSTAL_CODE', 'INVALID_POSTAL_CODE_SUFFIX', 'UNEXPECTED_POSTAL_CODE_SUFFIX', 'UNEXPECTED_POSTAL_CODE', 'INVALID_AMENITIES', 'INVALID_EMAIL_ADDRESS', 'DUPLICATE_LATLONG', 'LATLONG_INCONSISTENT_WITH_ADDRESS', 'MISSING_LATLONG', 'COULD_NOT_GEOCODE', 'MISSING_HOTEL_NAME', 'HOTEL_NAME_EMPTY', 'INVALID_HOTEL_NAME', 'HOTEL_NAME_TOO_LONG', 'PARSE_ERROR_IN_XML', 'UNEXPECTED_ATTRIBUTE_IN_XML', 'DUPLICATE_PHONE_NUMBER', 'MISSING_PHONE_NUMBER', 'MISSING_VOICE_PHONE_NUMBER', 'INVALID_PHONE_NUMBER_FORMAT', 'INVALID_PHONE_NUMBER', 'INVALID_PHONE_NUMBER_COUNTRY_CODE', 'PHONE_NUMBER_TOO_LONG', 'PHONE_NUMBER_TOO_SHORT', 'INVALID_WEBSITE_URL', 'ADWORDS_ATTRIBUTE_TOO_LONG', 'BRAND_NOT_ALLOWED', 'FLAGGED_DUE_TO_SUSPICIOUS_METADATA', 'NOT_ENOUGH_IMAGES_PROVIDED', 'IMAGE_PROCESSING_IN_PROGRESS', 'CANNOT_FETCH_IMAGES', 'INCOMPATIBLE_IMAGE_SIZE_OR_LOW_QUALITY', 'MISSING_LANG_IN_RAW_LISTING', 'IS_HOTEL', 'MISSING_REQ_ATTR', 'MISSING_NAME', 'MISSING_LANG_IN_NAME', 'VR_NAME_TOO_LONG', 'TEST_PROPERTY', 'NON_VR_ACCOMMODATION_TYPE_BASED_ON_LISTING_NAME', 'BRAND_NAME_TOO_LONG', 'MISSING_BRAND_NAME', 'INVALID_REVIEW_RATING', 'INVALID_CHECKIN_FORMAT', 'INVALID_CHECKOUT_FORMAT')")
        return value

    @field_validator('match_status')
    def match_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MATCH_STATUS_UNSPECIFIED', 'MATCH_STATUS_UNKNOWN', 'NOT_MATCHED', 'MATCHED', 'MAP_OVERLAP']):
            raise ValueError("must be one of enum values ('MATCH_STATUS_UNSPECIFIED', 'MATCH_STATUS_UNKNOWN', 'NOT_MATCHED', 'MATCHED', 'MAP_OVERLAP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HotelView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data_issue_detail (list)
        _items = []
        if self.data_issue_detail:
            for _item_data_issue_detail in self.data_issue_detail:
                if _item_data_issue_detail:
                    _items.append(_item_data_issue_detail.to_dict())
            _dict['dataIssueDetail'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HotelView from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataIssueDetail": [DataIssueDetail.from_dict(_item) for _item in obj["dataIssueDetail"]] if obj.get("dataIssueDetail") is not None else None,
            "dataIssues": obj.get("dataIssues"),
            "googleClusterId": obj.get("googleClusterId"),
            "googleHotelDisplayName": obj.get("googleHotelDisplayName"),
            "googleHotelId": obj.get("googleHotelId"),
            "liveOnGoogle": obj.get("liveOnGoogle"),
            "matchStatus": obj.get("matchStatus"),
            "overclusteredPartnerHotelIds": obj.get("overclusteredPartnerHotelIds"),
            "partnerHotelDisplayName": obj.get("partnerHotelDisplayName"),
            "partnerHotelId": obj.get("partnerHotelId"),
            "primaryOverclusteredPartnerHotelId": obj.get("primaryOverclusteredPartnerHotelId"),
            "propertyDetails": obj.get("propertyDetails")
        })
        return _obj



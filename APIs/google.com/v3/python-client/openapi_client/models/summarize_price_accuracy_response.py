# coding: utf-8

"""
    Travel Partner API

    The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SummarizePriceAccuracyResponse(BaseModel):
    """
    Response message for PriceAccuracyViewService.SummarizePriceAccuracy.
    """ # noqa: E501
    current_book_on_google_score: Optional[StrictStr] = Field(default=None, description="The current Book on Google price accuracy score.", alias="currentBookOnGoogleScore")
    current_overall_score: Optional[StrictStr] = Field(default=None, description="The current price accuracy score combining both website and Book on Google scores.", alias="currentOverallScore")
    current_score: Optional[StrictStr] = Field(default=None, description="The current price accuracy score. Contains the same value as `current_website_score`. For clarity, use either `current_website_score` or 'current_overall_score` depending upon which is needed.", alias="currentScore")
    current_website_score: Optional[StrictStr] = Field(default=None, description="The current website price accuracy score.", alias="currentWebsiteScore")
    predicted_book_on_google_score: Optional[StrictStr] = Field(default=None, description="The predicted Book on Google price accuracy score.", alias="predictedBookOnGoogleScore")
    predicted_overall_score: Optional[StrictStr] = Field(default=None, description="The predicted price accuracy score combining both website and Book on Google scores.", alias="predictedOverallScore")
    predicted_score: Optional[StrictStr] = Field(default=None, description="The predicted price accuracy score. Contains the same value as `predicted_website_score`. For clarity, use either `predicted_website_score` or 'predicted_overall_score` depending upon which is needed.", alias="predictedScore")
    predicted_website_score: Optional[StrictStr] = Field(default=None, description="The predicted website price accuracy score.", alias="predictedWebsiteScore")
    update_time: Optional[StrictStr] = Field(default=None, description="The update timestamp for the current score.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["currentBookOnGoogleScore", "currentOverallScore", "currentScore", "currentWebsiteScore", "predictedBookOnGoogleScore", "predictedOverallScore", "predictedScore", "predictedWebsiteScore", "updateTime"]

    @field_validator('current_book_on_google_score')
    def current_book_on_google_score_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRICE_ACCURACY_STATE_UNSPECIFIED', 'PRICE_ACCURACY_STATE_UNKNOWN', 'EXCELLENT', 'GOOD', 'POOR', 'AT_RISK', 'FAILED']):
            raise ValueError("must be one of enum values ('PRICE_ACCURACY_STATE_UNSPECIFIED', 'PRICE_ACCURACY_STATE_UNKNOWN', 'EXCELLENT', 'GOOD', 'POOR', 'AT_RISK', 'FAILED')")
        return value

    @field_validator('current_overall_score')
    def current_overall_score_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRICE_ACCURACY_STATE_UNSPECIFIED', 'PRICE_ACCURACY_STATE_UNKNOWN', 'EXCELLENT', 'GOOD', 'POOR', 'AT_RISK', 'FAILED']):
            raise ValueError("must be one of enum values ('PRICE_ACCURACY_STATE_UNSPECIFIED', 'PRICE_ACCURACY_STATE_UNKNOWN', 'EXCELLENT', 'GOOD', 'POOR', 'AT_RISK', 'FAILED')")
        return value

    @field_validator('current_score')
    def current_score_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRICE_ACCURACY_STATE_UNSPECIFIED', 'PRICE_ACCURACY_STATE_UNKNOWN', 'EXCELLENT', 'GOOD', 'POOR', 'AT_RISK', 'FAILED']):
            raise ValueError("must be one of enum values ('PRICE_ACCURACY_STATE_UNSPECIFIED', 'PRICE_ACCURACY_STATE_UNKNOWN', 'EXCELLENT', 'GOOD', 'POOR', 'AT_RISK', 'FAILED')")
        return value

    @field_validator('current_website_score')
    def current_website_score_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRICE_ACCURACY_STATE_UNSPECIFIED', 'PRICE_ACCURACY_STATE_UNKNOWN', 'EXCELLENT', 'GOOD', 'POOR', 'AT_RISK', 'FAILED']):
            raise ValueError("must be one of enum values ('PRICE_ACCURACY_STATE_UNSPECIFIED', 'PRICE_ACCURACY_STATE_UNKNOWN', 'EXCELLENT', 'GOOD', 'POOR', 'AT_RISK', 'FAILED')")
        return value

    @field_validator('predicted_book_on_google_score')
    def predicted_book_on_google_score_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRICE_ACCURACY_STATE_UNSPECIFIED', 'PRICE_ACCURACY_STATE_UNKNOWN', 'EXCELLENT', 'GOOD', 'POOR', 'AT_RISK', 'FAILED']):
            raise ValueError("must be one of enum values ('PRICE_ACCURACY_STATE_UNSPECIFIED', 'PRICE_ACCURACY_STATE_UNKNOWN', 'EXCELLENT', 'GOOD', 'POOR', 'AT_RISK', 'FAILED')")
        return value

    @field_validator('predicted_overall_score')
    def predicted_overall_score_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRICE_ACCURACY_STATE_UNSPECIFIED', 'PRICE_ACCURACY_STATE_UNKNOWN', 'EXCELLENT', 'GOOD', 'POOR', 'AT_RISK', 'FAILED']):
            raise ValueError("must be one of enum values ('PRICE_ACCURACY_STATE_UNSPECIFIED', 'PRICE_ACCURACY_STATE_UNKNOWN', 'EXCELLENT', 'GOOD', 'POOR', 'AT_RISK', 'FAILED')")
        return value

    @field_validator('predicted_score')
    def predicted_score_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRICE_ACCURACY_STATE_UNSPECIFIED', 'PRICE_ACCURACY_STATE_UNKNOWN', 'EXCELLENT', 'GOOD', 'POOR', 'AT_RISK', 'FAILED']):
            raise ValueError("must be one of enum values ('PRICE_ACCURACY_STATE_UNSPECIFIED', 'PRICE_ACCURACY_STATE_UNKNOWN', 'EXCELLENT', 'GOOD', 'POOR', 'AT_RISK', 'FAILED')")
        return value

    @field_validator('predicted_website_score')
    def predicted_website_score_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRICE_ACCURACY_STATE_UNSPECIFIED', 'PRICE_ACCURACY_STATE_UNKNOWN', 'EXCELLENT', 'GOOD', 'POOR', 'AT_RISK', 'FAILED']):
            raise ValueError("must be one of enum values ('PRICE_ACCURACY_STATE_UNSPECIFIED', 'PRICE_ACCURACY_STATE_UNKNOWN', 'EXCELLENT', 'GOOD', 'POOR', 'AT_RISK', 'FAILED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SummarizePriceAccuracyResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SummarizePriceAccuracyResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentBookOnGoogleScore": obj.get("currentBookOnGoogleScore"),
            "currentOverallScore": obj.get("currentOverallScore"),
            "currentScore": obj.get("currentScore"),
            "currentWebsiteScore": obj.get("currentWebsiteScore"),
            "predictedBookOnGoogleScore": obj.get("predictedBookOnGoogleScore"),
            "predictedOverallScore": obj.get("predictedOverallScore"),
            "predictedScore": obj.get("predictedScore"),
            "predictedWebsiteScore": obj.get("predictedWebsiteScore"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



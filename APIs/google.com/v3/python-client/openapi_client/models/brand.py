# coding: utf-8

"""
    Travel Partner API

    The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.display_name_disapproval_reason import DisplayNameDisapprovalReason
from openapi_client.models.localized_text import LocalizedText
from typing import Optional, Set
from typing_extensions import Self

class Brand(BaseModel):
    """
    Brand-level icon and display name configuration. Once approved, the icon and display name appear in the search results for properties that the partner has assigned to this brand.
    """ # noqa: E501
    active_display_names: Optional[List[LocalizedText]] = Field(default=None, description="Output only. The brand's active display names in all provided languages, only present if the display name is approved for all provided languages.", alias="activeDisplayNames")
    active_icon: Optional[StrictStr] = Field(default=None, description="Output only. The brand's active [accounts.icon](/hotels/hotel-prices/api-reference/rest/v3/accounts.icons#resource:-iconresource). The value refers to the icons's resource name in the format `accounts/{account_id}/icons/{icon_id}`. An active icon is one that has been approved.", alias="activeIcon")
    active_icon_uri: Optional[StrictStr] = Field(default=None, description="Output only. URL of the active icon, only present when the icon has been approved.", alias="activeIconUri")
    display_name_disapproval_reason: Optional[List[DisplayNameDisapprovalReason]] = Field(default=None, description="Output only. Display name's disapproval reason. Only applies to display names with the review state 'REJECTED'.", alias="displayNameDisapprovalReason")
    display_name_state: Optional[StrictStr] = Field(default=None, description="Output only. The brand's display names review state, which applies to all display name language entries. If there are both submitted and active display names, this refers to the submitted display names.", alias="displayNameState")
    display_names: Optional[List[LocalizedText]] = Field(default=None, description="Input only. The name Google displays for the brand's properties. Setting the display names is only necessary if you want to override the landing page display name or account-level display name for the brand. Google reviews the display names for appropriate content. When there are multiple languages, Google will only show the display names once Google approves all the languages.", alias="displayNames")
    icon: Optional[StrictStr] = Field(default=None, description="Input only. The brand's [accounts.icon](/hotels/hotel-prices/api-reference/rest/v3/accounts.icons#resource:-iconresource) identifying the brand's icon. The value refers to the icons's resource name in the format `accounts/{account_id}/icons/{icon_id}`.")
    icon_disapproval_reasons: Optional[List[StrictStr]] = Field(default=None, description="Output only. The icon's disapproval reason(s). Only applies to submitted icons with `REJECTED` state.", alias="iconDisapprovalReasons")
    icon_state: Optional[StrictStr] = Field(default=None, description="Output only. The brand's icon's review state. If there are both submitted and active icons, this refers to the submitted icon.", alias="iconState")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name for the brand in the format `accounts/{account_id}/brands/{brand_id}`. The `brand_id` corresponds to the partner's brand identifier used for landing page matching and the property-level brand identifier. A default brand is applied to properties that do not have a brand. The `brand_id` of the default brand is `NO_BRAND_ID`. It can be fetched and updated like any configured brand.")
    property_count: Optional[StrictStr] = Field(default=None, description="Output only. The number of properties with the corresponding brand ID.", alias="propertyCount")
    submitted_display_names: Optional[List[LocalizedText]] = Field(default=None, description="Output only. The brand's submitted display names in all provided languages, only present if the display name is new or rejected for any language.", alias="submittedDisplayNames")
    submitted_icon: Optional[StrictStr] = Field(default=None, description="Output only. The brand's submitted [accounts.icon](/hotels/hotel-prices/api-reference/rest/v3/accounts.icons#resource:-iconresource). The value refers to the icons's resource name in the format `accounts/{account_id}/icons/{icon_id}`. A submitted icon is one that is new or rejected.", alias="submittedIcon")
    __properties: ClassVar[List[str]] = ["activeDisplayNames", "activeIcon", "activeIconUri", "displayNameDisapprovalReason", "displayNameState", "displayNames", "icon", "iconDisapprovalReasons", "iconState", "name", "propertyCount", "submittedDisplayNames", "submittedIcon"]

    @field_validator('display_name_state')
    def display_name_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REVIEW_STATE_UNSPECIFIED', 'REVIEW_STATE_NEW', 'APPROVED', 'REJECTED']):
            raise ValueError("must be one of enum values ('REVIEW_STATE_UNSPECIFIED', 'REVIEW_STATE_NEW', 'APPROVED', 'REJECTED')")
        return value

    @field_validator('icon_disapproval_reasons')
    def icon_disapproval_reasons_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['IMAGE_DISAPPROVAL_REASON_UNSPECIFIED', 'NOT_LIKE_SITE', 'OFFENSIVE', 'LOW_QUALITY', 'ANIMATED', 'BAD_BACKGROUND', 'TEXT_TOO_SMALL']):
                raise ValueError("each list item must be one of ('IMAGE_DISAPPROVAL_REASON_UNSPECIFIED', 'NOT_LIKE_SITE', 'OFFENSIVE', 'LOW_QUALITY', 'ANIMATED', 'BAD_BACKGROUND', 'TEXT_TOO_SMALL')")
        return value

    @field_validator('icon_state')
    def icon_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REVIEW_STATE_UNSPECIFIED', 'REVIEW_STATE_NEW', 'APPROVED', 'REJECTED']):
            raise ValueError("must be one of enum values ('REVIEW_STATE_UNSPECIFIED', 'REVIEW_STATE_NEW', 'APPROVED', 'REJECTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Brand from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "active_display_names",
            "active_icon",
            "active_icon_uri",
            "display_name_disapproval_reason",
            "display_name_state",
            "icon_disapproval_reasons",
            "icon_state",
            "name",
            "property_count",
            "submitted_display_names",
            "submitted_icon",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in active_display_names (list)
        _items = []
        if self.active_display_names:
            for _item_active_display_names in self.active_display_names:
                if _item_active_display_names:
                    _items.append(_item_active_display_names.to_dict())
            _dict['activeDisplayNames'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in display_name_disapproval_reason (list)
        _items = []
        if self.display_name_disapproval_reason:
            for _item_display_name_disapproval_reason in self.display_name_disapproval_reason:
                if _item_display_name_disapproval_reason:
                    _items.append(_item_display_name_disapproval_reason.to_dict())
            _dict['displayNameDisapprovalReason'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in display_names (list)
        _items = []
        if self.display_names:
            for _item_display_names in self.display_names:
                if _item_display_names:
                    _items.append(_item_display_names.to_dict())
            _dict['displayNames'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in submitted_display_names (list)
        _items = []
        if self.submitted_display_names:
            for _item_submitted_display_names in self.submitted_display_names:
                if _item_submitted_display_names:
                    _items.append(_item_submitted_display_names.to_dict())
            _dict['submittedDisplayNames'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Brand from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeDisplayNames": [LocalizedText.from_dict(_item) for _item in obj["activeDisplayNames"]] if obj.get("activeDisplayNames") is not None else None,
            "activeIcon": obj.get("activeIcon"),
            "activeIconUri": obj.get("activeIconUri"),
            "displayNameDisapprovalReason": [DisplayNameDisapprovalReason.from_dict(_item) for _item in obj["displayNameDisapprovalReason"]] if obj.get("displayNameDisapprovalReason") is not None else None,
            "displayNameState": obj.get("displayNameState"),
            "displayNames": [LocalizedText.from_dict(_item) for _item in obj["displayNames"]] if obj.get("displayNames") is not None else None,
            "icon": obj.get("icon"),
            "iconDisapprovalReasons": obj.get("iconDisapprovalReasons"),
            "iconState": obj.get("iconState"),
            "name": obj.get("name"),
            "propertyCount": obj.get("propertyCount"),
            "submittedDisplayNames": [LocalizedText.from_dict(_item) for _item in obj["submittedDisplayNames"]] if obj.get("submittedDisplayNames") is not None else None,
            "submittedIcon": obj.get("submittedIcon")
        })
        return _obj



# coding: utf-8

"""
    Travel Partner API

    The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account_link_target import AccountLinkTarget
from typing import Optional, Set
from typing_extensions import Self

class AccountLink(BaseModel):
    """
    An account link. Represents the link between a Google Ads customer and a Hotel Ads (Hotel Center) account. An account link defines the set of hotels under the Hotel Center account that is linked to the Google Ads customer.
    """ # noqa: E501
    account_link_target: Optional[AccountLinkTarget] = Field(default=None, alias="accountLinkTarget")
    google_ads_customer_name: Optional[StrictStr] = Field(default=None, description="Required for CREATE requests. The value representing the Google Ads customer ID in the format `customers/{google_ads_customer_id}`. For example: `customers/0123456789`. Note that the `googleAdsCustomerName` field is not returned in responses to GET requests.", alias="googleAdsCustomerName")
    name: Optional[StrictStr] = Field(default=None, description="The resource name for the account link in the format `accounts/{account_id}/accountLinks/{account_link_id}`.")
    status: Optional[StrictStr] = Field(default=None, description="The current status of the account link.")
    __properties: ClassVar[List[str]] = ["accountLinkTarget", "googleAdsCustomerName", "name", "status"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACCOUNT_LINK_STATUS_UNSPECIFIED', 'ACCOUNT_LINK_STATUS_UNKNOWN', 'REQUESTED_FROM_HOTEL_CENTER', 'REQUESTED_FROM_GOOGLE_ADS', 'APPROVED']):
            raise ValueError("must be one of enum values ('ACCOUNT_LINK_STATUS_UNSPECIFIED', 'ACCOUNT_LINK_STATUS_UNKNOWN', 'REQUESTED_FROM_HOTEL_CENTER', 'REQUESTED_FROM_GOOGLE_ADS', 'APPROVED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountLink from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account_link_target
        if self.account_link_target:
            _dict['accountLinkTarget'] = self.account_link_target.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountLink from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountLinkTarget": AccountLinkTarget.from_dict(obj["accountLinkTarget"]) if obj.get("accountLinkTarget") is not None else None,
            "googleAdsCustomerName": obj.get("googleAdsCustomerName"),
            "name": obj.get("name"),
            "status": obj.get("status")
        })
        return _obj



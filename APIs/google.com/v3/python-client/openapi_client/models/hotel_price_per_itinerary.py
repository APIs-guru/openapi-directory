# coding: utf-8

"""
    Travel Partner API

    The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.model_date import ModelDate
from typing import Optional, Set
from typing_extensions import Self

class HotelPricePerItinerary(BaseModel):
    """
    Hotel price for a given itinerary.
    """ # noqa: E501
    checkin_date: Optional[ModelDate] = Field(default=None, alias="checkinDate")
    currency_code: Optional[StrictStr] = Field(default=None, description="Currency for `price`, `taxes`, and `fees`.", alias="currencyCode")
    fees: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Fees for this itinerary.")
    length_of_stay_days: Optional[StrictInt] = Field(default=None, description="Number of nights for the itinerary.", alias="lengthOfStayDays")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Hotel price for this itinerary.")
    taxes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Taxes for this itinerary.")
    update_time: Optional[StrictStr] = Field(default=None, description="Update timestamp for this hotel price.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["checkinDate", "currencyCode", "fees", "lengthOfStayDays", "price", "taxes", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HotelPricePerItinerary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of checkin_date
        if self.checkin_date:
            _dict['checkinDate'] = self.checkin_date.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HotelPricePerItinerary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "checkinDate": ModelDate.from_dict(obj["checkinDate"]) if obj.get("checkinDate") is not None else None,
            "currencyCode": obj.get("currencyCode"),
            "fees": obj.get("fees"),
            "lengthOfStayDays": obj.get("lengthOfStayDays"),
            "price": obj.get("price"),
            "taxes": obj.get("taxes"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



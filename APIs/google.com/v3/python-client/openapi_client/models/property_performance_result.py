# coding: utf-8

"""
    Travel Partner API

    The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.model_date import ModelDate
from typing import Optional, Set
from typing_extensions import Self

class PropertyPerformanceResult(BaseModel):
    """
    Represents a result from querying for the property performance report for an account.
    """ # noqa: E501
    ads_click_count: Optional[StrictStr] = Field(default=None, description="The total number of ad clicks that were recorded for this result.", alias="adsClickCount")
    ads_clickthrough_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Equal to `ads_click_count` divided by `ads_impression_count`.", alias="adsClickthroughRate")
    ads_impression_count: Optional[StrictStr] = Field(default=None, description="The total number of ad impressions that were recorded for this result.", alias="adsImpressionCount")
    advance_booking_window: Optional[StrictStr] = Field(default=None, description="Difference in days between query date and check-in date in property's local timezone. Only present if `advanceBookingWindow` is specified in `aggregateBy` in the request.", alias="advanceBookingWindow")
    brand: Optional[StrictStr] = Field(default=None, description="Partner-specified brand for the property. Only present if `brand` is specified in `aggregateBy` in the request.")
    click_count: Optional[StrictStr] = Field(default=None, description="The total number of free booking link clicks that were recorded for this result.", alias="clickCount")
    clickthrough_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Equal to `click_count` divided by `impression_count`.", alias="clickthroughRate")
    var_date: Optional[ModelDate] = Field(default=None, alias="date")
    device_type: Optional[StrictStr] = Field(default=None, description="The user’s device type. Only present if `deviceType` is specified in `aggregateBy` in the request.", alias="deviceType")
    high_intent_users: Optional[StrictBool] = Field(default=None, description="Whether the user’s query indicated a strong interest in booking. Only present if `highIntentUsers` is specified in `aggregateBy` in the request.", alias="highIntentUsers")
    impression_count: Optional[StrictStr] = Field(default=None, description="The total number of free booking link impressions that were recorded for this result. This value is rounded to preserve user privacy.", alias="impressionCount")
    length_of_stay: Optional[StrictStr] = Field(default=None, description="Number of nights between check-in and check-out dates specified by user. Only present if `lengthOfStay` is specified in `aggregateBy` in the request.", alias="lengthOfStay")
    occupancy: Optional[StrictStr] = Field(default=None, description="Requested number of people staying at the property. Only present if `partnerPropertyId` is specified in `aggregateBy` in the request.")
    partner_property_display_name: Optional[StrictStr] = Field(default=None, description="Partner's property name. Only present if `partnerPropertyDisplayName` is specified in `aggregateBy` in the request.", alias="partnerPropertyDisplayName")
    partner_property_id: Optional[StrictStr] = Field(default=None, description="Partner's property ID. Only present if `partnerPropertyId` is specified in `aggregateBy` in the request.", alias="partnerPropertyId")
    property_region_code: Optional[StrictStr] = Field(default=None, description="ISO 3116 region code of the country/region of the property. Only present if `propertyRegionCode` is specified in `aggregateBy` in the request", alias="propertyRegionCode")
    user_region_code: Optional[StrictStr] = Field(default=None, description="ISO 3116 region code of the country/region of the user. Only present if `userRegionCode` is specified in `aggregateBy` in the request", alias="userRegionCode")
    vr_website_button_clicks: Optional[StrictStr] = Field(default=None, description="The total number of clicks on the \"Website\" button on Google for vacation rentals.", alias="vrWebsiteButtonClicks")
    __properties: ClassVar[List[str]] = ["adsClickCount", "adsClickthroughRate", "adsImpressionCount", "advanceBookingWindow", "brand", "clickCount", "clickthroughRate", "date", "deviceType", "highIntentUsers", "impressionCount", "lengthOfStay", "occupancy", "partnerPropertyDisplayName", "partnerPropertyId", "propertyRegionCode", "userRegionCode", "vrWebsiteButtonClicks"]

    @field_validator('advance_booking_window')
    def advance_booking_window_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ADVANCE_BOOKING_WINDOW_UNSPECIFIED', 'ADVANCE_BOOKING_WINDOW_SAME_DAY', 'ADVANCE_BOOKING_WINDOW_NEXT_DAY', 'ADVANCE_BOOKING_WINDOW_DAYS_2_TO_7', 'ADVANCE_BOOKING_WINDOW_DAYS_8_TO_14', 'ADVANCE_BOOKING_WINDOW_DAYS_15_TO_30', 'ADVANCE_BOOKING_WINDOW_DAYS_31_TO_60', 'ADVANCE_BOOKING_WINDOW_DAYS_61_TO_90', 'ADVANCE_BOOKING_WINDOW_DAYS_91_TO_120', 'ADVANCE_BOOKING_WINDOW_DAYS_121_TO_150', 'ADVANCE_BOOKING_WINDOW_DAYS_151_TO_180', 'ADVANCE_BOOKING_WINDOW_DAYS_OVER_180']):
            raise ValueError("must be one of enum values ('ADVANCE_BOOKING_WINDOW_UNSPECIFIED', 'ADVANCE_BOOKING_WINDOW_SAME_DAY', 'ADVANCE_BOOKING_WINDOW_NEXT_DAY', 'ADVANCE_BOOKING_WINDOW_DAYS_2_TO_7', 'ADVANCE_BOOKING_WINDOW_DAYS_8_TO_14', 'ADVANCE_BOOKING_WINDOW_DAYS_15_TO_30', 'ADVANCE_BOOKING_WINDOW_DAYS_31_TO_60', 'ADVANCE_BOOKING_WINDOW_DAYS_61_TO_90', 'ADVANCE_BOOKING_WINDOW_DAYS_91_TO_120', 'ADVANCE_BOOKING_WINDOW_DAYS_121_TO_150', 'ADVANCE_BOOKING_WINDOW_DAYS_151_TO_180', 'ADVANCE_BOOKING_WINDOW_DAYS_OVER_180')")
        return value

    @field_validator('device_type')
    def device_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEVICE_UNSPECIFIED', 'DEVICE_UNKNOWN', 'DESKTOP', 'MOBILE', 'TABLET']):
            raise ValueError("must be one of enum values ('DEVICE_UNSPECIFIED', 'DEVICE_UNKNOWN', 'DESKTOP', 'MOBILE', 'TABLET')")
        return value

    @field_validator('length_of_stay')
    def length_of_stay_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LENGTH_OF_STAY_UNSPECIFIED', 'LENGTH_OF_STAY_NIGHTS_1', 'LENGTH_OF_STAY_NIGHTS_2', 'LENGTH_OF_STAY_NIGHTS_3', 'LENGTH_OF_STAY_NIGHTS_4_TO_7', 'LENGTH_OF_STAY_NIGHTS_8_TO_14', 'LENGTH_OF_STAY_NIGHTS_15_TO_21', 'LENGTH_OF_STAY_NIGHTS_22_TO_30', 'LENGTH_OF_STAY_NIGHTS_OVER_30']):
            raise ValueError("must be one of enum values ('LENGTH_OF_STAY_UNSPECIFIED', 'LENGTH_OF_STAY_NIGHTS_1', 'LENGTH_OF_STAY_NIGHTS_2', 'LENGTH_OF_STAY_NIGHTS_3', 'LENGTH_OF_STAY_NIGHTS_4_TO_7', 'LENGTH_OF_STAY_NIGHTS_8_TO_14', 'LENGTH_OF_STAY_NIGHTS_15_TO_21', 'LENGTH_OF_STAY_NIGHTS_22_TO_30', 'LENGTH_OF_STAY_NIGHTS_OVER_30')")
        return value

    @field_validator('occupancy')
    def occupancy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OCCUPANCY_UNSPECIFIED', 'OCCUPANCY_1', 'OCCUPANCY_2', 'OCCUPANCY_3', 'OCCUPANCY_4', 'OCCUPANCY_OVER_4']):
            raise ValueError("must be one of enum values ('OCCUPANCY_UNSPECIFIED', 'OCCUPANCY_1', 'OCCUPANCY_2', 'OCCUPANCY_3', 'OCCUPANCY_4', 'OCCUPANCY_OVER_4')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PropertyPerformanceResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_date
        if self.var_date:
            _dict['date'] = self.var_date.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PropertyPerformanceResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adsClickCount": obj.get("adsClickCount"),
            "adsClickthroughRate": obj.get("adsClickthroughRate"),
            "adsImpressionCount": obj.get("adsImpressionCount"),
            "advanceBookingWindow": obj.get("advanceBookingWindow"),
            "brand": obj.get("brand"),
            "clickCount": obj.get("clickCount"),
            "clickthroughRate": obj.get("clickthroughRate"),
            "date": ModelDate.from_dict(obj["date"]) if obj.get("date") is not None else None,
            "deviceType": obj.get("deviceType"),
            "highIntentUsers": obj.get("highIntentUsers"),
            "impressionCount": obj.get("impressionCount"),
            "lengthOfStay": obj.get("lengthOfStay"),
            "occupancy": obj.get("occupancy"),
            "partnerPropertyDisplayName": obj.get("partnerPropertyDisplayName"),
            "partnerPropertyId": obj.get("partnerPropertyId"),
            "propertyRegionCode": obj.get("propertyRegionCode"),
            "userRegionCode": obj.get("userRegionCode"),
            "vrWebsiteButtonClicks": obj.get("vrWebsiteButtonClicks")
        })
        return _obj



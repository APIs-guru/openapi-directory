# coding: utf-8

"""
    Travel Partner API

    The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PriceMissingCountDetails(BaseModel):
    """
    The reasons that contributed to the price missing count and the total count for each reason.
    """ # noqa: E501
    bandwidth_depleted_count: Optional[StrictStr] = Field(default=None, description="No price was cached for this itinerary, and there was no live query quota remaining.", alias="bandwidthDepletedCount")
    cache_rate_missing_count: Optional[StrictStr] = Field(default=None, description="No price exists in the cache for this itinerary. A live query was not done due to page constraints.", alias="cacheRateMissingCount")
    itinerary_blocked_count: Optional[StrictStr] = Field(default=None, description="The itinerary was outside of your basic parameters, so no price was pulled for the itinerary from either live query or cache fill.", alias="itineraryBlockedCount")
    live_pricing_error_count: Optional[StrictStr] = Field(default=None, description="No price was cached for this itinerary. A live query did not time out, but your system returned an error.", alias="livePricingErrorCount")
    live_pricing_not_setup_count: Optional[StrictStr] = Field(default=None, description="No price was cached for this itinerary, and live query was not configured for this account.", alias="livePricingNotSetupCount")
    live_pricing_timeout_count: Optional[StrictStr] = Field(default=None, description="No price was cached for this itinerary, and a live query sent to your system timed out.", alias="livePricingTimeoutCount")
    __properties: ClassVar[List[str]] = ["bandwidthDepletedCount", "cacheRateMissingCount", "itineraryBlockedCount", "livePricingErrorCount", "livePricingNotSetupCount", "livePricingTimeoutCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PriceMissingCountDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PriceMissingCountDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bandwidthDepletedCount": obj.get("bandwidthDepletedCount"),
            "cacheRateMissingCount": obj.get("cacheRateMissingCount"),
            "itineraryBlockedCount": obj.get("itineraryBlockedCount"),
            "livePricingErrorCount": obj.get("livePricingErrorCount"),
            "livePricingNotSetupCount": obj.get("livePricingNotSetupCount"),
            "livePricingTimeoutCount": obj.get("livePricingTimeoutCount")
        })
        return _obj



# coding: utf-8

"""
    Travel Partner API

    The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.key import Key
from openapi_client.models.missed_participation_count_details import MissedParticipationCountDetails
from typing import Optional, Set
from typing_extensions import Self

class ParticipationResult(BaseModel):
    """
    Represents a result from querying for participation stats for an account.
    """ # noqa: E501
    key: Optional[Key] = None
    missed_participation_count: Optional[StrictStr] = Field(default=None, description="The total number of opportunities **not** eligible for the Google Ads auction process. Comprised of the following: * Landing page missing * Price missing * Price problem * Price unavailable * Other", alias="missedParticipationCount")
    missed_participation_count_details: Optional[MissedParticipationCountDetails] = Field(default=None, alias="missedParticipationCountDetails")
    opportunity_count: Optional[StrictStr] = Field(default=None, description="For a specific hotel, the total number of opportunities that were available. Opportunities are the total number of instances when a hotel ad could have been displayed to a user.", alias="opportunityCount")
    participation_count: Optional[StrictStr] = Field(default=None, description="The total number of opportunities for which you were eligible to enter in the Google Ads auction process.", alias="participationCount")
    participation_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The percentage rate of participation where the number of successfully participated opportunities is divided by the total number of opportunities. For example, if a property was eligible to enter the Google Ads auction 90 times out of 100 opportunities, the participation rate is 90%.", alias="participationPercent")
    partner_hotel_display_name: Optional[StrictStr] = Field(default=None, description="Partner's hotel display name. This field is only populated when the result is aggregated by `partnerHotelId`.", alias="partnerHotelDisplayName")
    __properties: ClassVar[List[str]] = ["key", "missedParticipationCount", "missedParticipationCountDetails", "opportunityCount", "participationCount", "participationPercent", "partnerHotelDisplayName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ParticipationResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of key
        if self.key:
            _dict['key'] = self.key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of missed_participation_count_details
        if self.missed_participation_count_details:
            _dict['missedParticipationCountDetails'] = self.missed_participation_count_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ParticipationResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "key": Key.from_dict(obj["key"]) if obj.get("key") is not None else None,
            "missedParticipationCount": obj.get("missedParticipationCount"),
            "missedParticipationCountDetails": MissedParticipationCountDetails.from_dict(obj["missedParticipationCountDetails"]) if obj.get("missedParticipationCountDetails") is not None else None,
            "opportunityCount": obj.get("opportunityCount"),
            "participationCount": obj.get("participationCount"),
            "participationPercent": obj.get("participationPercent"),
            "partnerHotelDisplayName": obj.get("partnerHotelDisplayName")
        })
        return _obj



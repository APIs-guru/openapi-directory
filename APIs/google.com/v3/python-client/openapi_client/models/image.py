# coding: utf-8

"""
    Travel Partner API

    The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.localized_text import LocalizedText
from typing import Optional, Set
from typing_extensions import Self

class Image(BaseModel):
    """
    A single image in a VR Listing. Title and gallery URL are stored per locale. NEXT ID: 4
    """ # noqa: E501
    gallery_uri: Optional[List[LocalizedText]] = Field(default=None, description="URL that is deeplink to the image in a gallery (or a webpage).", alias="galleryUri")
    title: Optional[List[LocalizedText]] = Field(default=None, description="Title of the image.")
    uri: Optional[StrictStr] = Field(default=None, description="URL that points to the binary image content directly.")
    __properties: ClassVar[List[str]] = ["galleryUri", "title", "uri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Image from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in gallery_uri (list)
        _items = []
        if self.gallery_uri:
            for _item_gallery_uri in self.gallery_uri:
                if _item_gallery_uri:
                    _items.append(_item_gallery_uri.to_dict())
            _dict['galleryUri'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in title (list)
        _items = []
        if self.title:
            for _item_title in self.title:
                if _item_title:
                    _items.append(_item_title.to_dict())
            _dict['title'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Image from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "galleryUri": [LocalizedText.from_dict(_item) for _item in obj["galleryUri"]] if obj.get("galleryUri") is not None else None,
            "title": [LocalizedText.from_dict(_item) for _item in obj["title"]] if obj.get("title") is not None else None,
            "uri": obj.get("uri")
        })
        return _obj



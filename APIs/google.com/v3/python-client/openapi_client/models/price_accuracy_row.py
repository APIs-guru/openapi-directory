# coding: utf-8

"""
    Travel Partner API

    The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.model_date import ModelDate
from openapi_client.models.price_record import PriceRecord
from typing import Optional, Set
from typing_extensions import Self

class PriceAccuracyRow(BaseModel):
    """
    A price accuracy row.
    """ # noqa: E501
    adult_occupancy: Optional[StrictInt] = Field(default=None, description="The number of adults in the occupancy details of the validation query.", alias="adultOccupancy")
    affects_score: Optional[StrictBool] = Field(default=None, description="True if this row affects the placement of a price. This field has been renamed to “Affects placement” in Hotel Center.", alias="affectsScore")
    cached_price_record: Optional[PriceRecord] = Field(default=None, alias="cachedPriceRecord")
    checkin_date: Optional[ModelDate] = Field(default=None, alias="checkinDate")
    child_occupancy: Optional[StrictInt] = Field(default=None, description="The number of children in the occupancy details of the validation query.", alias="childOccupancy")
    correction_time: Optional[StrictStr] = Field(default=None, description="Time at which an incorrect price is updated to a correct price.", alias="correctionTime")
    device_type: Optional[StrictStr] = Field(default=None, description="The user's device type.", alias="deviceType")
    fetched_price_record: Optional[PriceRecord] = Field(default=None, alias="fetchedPriceRecord")
    final_domain: Optional[StrictStr] = Field(default=None, description="The domain of the final page from which prices are read.", alias="finalDomain")
    hotel: Optional[StrictStr] = Field(default=None, description="Partner-defined hotel ID.")
    hotel_country_code: Optional[StrictStr] = Field(default=None, description="The country of the hotel (based on address).", alias="hotelCountryCode")
    length_of_stay_days: Optional[StrictInt] = Field(default=None, description="Length of stay.", alias="lengthOfStayDays")
    mismatch_reason: Optional[StrictStr] = Field(default=None, description="The reason why the fetched price didn't match the cached price.", alias="mismatchReason")
    rate_rule_id: Optional[StrictStr] = Field(default=None, description="The rate rule of the advertised price for non-public rates.", alias="rateRuleId")
    signal_source: Optional[StrictStr] = Field(default=None, description="Source of the price accuracy signal.", alias="signalSource")
    url: Optional[StrictStr] = Field(default=None, description="Initial URL visited on the partner website.")
    user_region_code: Optional[StrictStr] = Field(default=None, description="The user's region.", alias="userRegionCode")
    __properties: ClassVar[List[str]] = ["adultOccupancy", "affectsScore", "cachedPriceRecord", "checkinDate", "childOccupancy", "correctionTime", "deviceType", "fetchedPriceRecord", "finalDomain", "hotel", "hotelCountryCode", "lengthOfStayDays", "mismatchReason", "rateRuleId", "signalSource", "url", "userRegionCode"]

    @field_validator('device_type')
    def device_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEVICE_UNSPECIFIED', 'DEVICE_UNKNOWN', 'DESKTOP', 'MOBILE', 'TABLET']):
            raise ValueError("must be one of enum values ('DEVICE_UNSPECIFIED', 'DEVICE_UNKNOWN', 'DESKTOP', 'MOBILE', 'TABLET')")
        return value

    @field_validator('mismatch_reason')
    def mismatch_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MISMATCH_REASON_UNSPECIFIED', 'MISMATCH_REASON_UNKNOWN', 'TAX_MISMATCH', 'ROOM_UNAVAILABLE', 'SITE_ERROR', 'PRICE_FEED_DELAYED', 'DISCOUNT_MISSING', 'INCORRECT_DISCOUNT_VALUE', 'WRONG_ITINERARY']):
            raise ValueError("must be one of enum values ('MISMATCH_REASON_UNSPECIFIED', 'MISMATCH_REASON_UNKNOWN', 'TAX_MISMATCH', 'ROOM_UNAVAILABLE', 'SITE_ERROR', 'PRICE_FEED_DELAYED', 'DISCOUNT_MISSING', 'INCORRECT_DISCOUNT_VALUE', 'WRONG_ITINERARY')")
        return value

    @field_validator('signal_source')
    def signal_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SIGNAL_SOURCE_UNSPECIFIED', 'SIGNAL_SOURCE_UNKNOWN', 'FETCHED', 'PIXEL']):
            raise ValueError("must be one of enum values ('SIGNAL_SOURCE_UNSPECIFIED', 'SIGNAL_SOURCE_UNKNOWN', 'FETCHED', 'PIXEL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PriceAccuracyRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cached_price_record
        if self.cached_price_record:
            _dict['cachedPriceRecord'] = self.cached_price_record.to_dict()
        # override the default output from pydantic by calling `to_dict()` of checkin_date
        if self.checkin_date:
            _dict['checkinDate'] = self.checkin_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fetched_price_record
        if self.fetched_price_record:
            _dict['fetchedPriceRecord'] = self.fetched_price_record.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PriceAccuracyRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adultOccupancy": obj.get("adultOccupancy"),
            "affectsScore": obj.get("affectsScore"),
            "cachedPriceRecord": PriceRecord.from_dict(obj["cachedPriceRecord"]) if obj.get("cachedPriceRecord") is not None else None,
            "checkinDate": ModelDate.from_dict(obj["checkinDate"]) if obj.get("checkinDate") is not None else None,
            "childOccupancy": obj.get("childOccupancy"),
            "correctionTime": obj.get("correctionTime"),
            "deviceType": obj.get("deviceType"),
            "fetchedPriceRecord": PriceRecord.from_dict(obj["fetchedPriceRecord"]) if obj.get("fetchedPriceRecord") is not None else None,
            "finalDomain": obj.get("finalDomain"),
            "hotel": obj.get("hotel"),
            "hotelCountryCode": obj.get("hotelCountryCode"),
            "lengthOfStayDays": obj.get("lengthOfStayDays"),
            "mismatchReason": obj.get("mismatchReason"),
            "rateRuleId": obj.get("rateRuleId"),
            "signalSource": obj.get("signalSource"),
            "url": obj.get("url"),
            "userRegionCode": obj.get("userRegionCode")
        })
        return _obj



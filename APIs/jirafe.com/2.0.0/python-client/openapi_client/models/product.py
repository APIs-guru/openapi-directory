# coding: utf-8

"""
    Jirafe Events

    API endpoins for sending Jirafe events

    The version of the OpenAPI document: 2.0.0
    Contact: support@jirafe.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.attribute import Attribute
from openapi_client.models.base_product import BaseProduct
from openapi_client.models.catalog import Catalog
from openapi_client.models.category import Category
from openapi_client.models.url import Url
from openapi_client.models.vendor import Vendor
from typing import Optional, Set
from typing_extensions import Self

class Product(BaseModel):
    """
    Product
    """ # noqa: E501
    ancestors: Optional[List[StrictStr]] = None
    attributes: Optional[List[Attribute]] = None
    base_product: Optional[BaseProduct] = None
    brand: Optional[StrictStr] = None
    catalog: Optional[Catalog] = None
    categories: Optional[List[Category]] = None
    change_date: datetime
    code: StrictStr
    create_date: datetime
    id: StrictStr
    images: Optional[List[Dict[str, Any]]] = None
    is_order: StrictBool
    is_sku: StrictBool
    name: Optional[StrictStr] = None
    rating: Optional[Union[StrictFloat, StrictInt]] = None
    urls: Optional[Url] = None
    vendors: Optional[List[Vendor]] = None
    __properties: ClassVar[List[str]] = ["ancestors", "attributes", "base_product", "brand", "catalog", "categories", "change_date", "code", "create_date", "id", "images", "is_order", "is_sku", "name", "rating", "urls", "vendors"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Product from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of base_product
        if self.base_product:
            _dict['base_product'] = self.base_product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of catalog
        if self.catalog:
            _dict['catalog'] = self.catalog.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in categories (list)
        _items = []
        if self.categories:
            for _item_categories in self.categories:
                if _item_categories:
                    _items.append(_item_categories.to_dict())
            _dict['categories'] = _items
        # override the default output from pydantic by calling `to_dict()` of urls
        if self.urls:
            _dict['urls'] = self.urls.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in vendors (list)
        _items = []
        if self.vendors:
            for _item_vendors in self.vendors:
                if _item_vendors:
                    _items.append(_item_vendors.to_dict())
            _dict['vendors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Product from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ancestors": obj.get("ancestors"),
            "attributes": [Attribute.from_dict(_item) for _item in obj["attributes"]] if obj.get("attributes") is not None else None,
            "base_product": BaseProduct.from_dict(obj["base_product"]) if obj.get("base_product") is not None else None,
            "brand": obj.get("brand"),
            "catalog": Catalog.from_dict(obj["catalog"]) if obj.get("catalog") is not None else None,
            "categories": [Category.from_dict(_item) for _item in obj["categories"]] if obj.get("categories") is not None else None,
            "change_date": obj.get("change_date"),
            "code": obj.get("code"),
            "create_date": obj.get("create_date"),
            "id": obj.get("id"),
            "images": obj.get("images"),
            "is_order": obj.get("is_order"),
            "is_sku": obj.get("is_sku"),
            "name": obj.get("name"),
            "rating": obj.get("rating"),
            "urls": Url.from_dict(obj["urls"]) if obj.get("urls") is not None else None,
            "vendors": [Vendor.from_dict(_item) for _item in obj["vendors"]] if obj.get("vendors") is not None else None
        })
        return _obj



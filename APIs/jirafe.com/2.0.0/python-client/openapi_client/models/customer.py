# coding: utf-8

"""
    Jirafe Events

    API endpoins for sending Jirafe events

    The version of the OpenAPI document: 2.0.0
    Contact: support@jirafe.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Customer(BaseModel):
    """
    Customer
    """ # noqa: E501
    active_flag: Optional[StrictBool] = True
    change_date: datetime
    company: Optional[StrictStr] = None
    cookies: Optional[Dict[str, Any]] = None
    create_date: datetime
    department: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    first_name: Optional[StrictStr] = None
    id: StrictStr
    last_name: Optional[StrictStr] = None
    marketing_opt_in: Optional[StrictBool] = None
    name: Optional[StrictStr] = None
    phone: Optional[StrictStr] = None
    position: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["active_flag", "change_date", "company", "cookies", "create_date", "department", "email", "first_name", "id", "last_name", "marketing_opt_in", "name", "phone", "position"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Customer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Customer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active_flag": obj.get("active_flag") if obj.get("active_flag") is not None else True,
            "change_date": obj.get("change_date"),
            "company": obj.get("company"),
            "cookies": obj.get("cookies"),
            "create_date": obj.get("create_date"),
            "department": obj.get("department"),
            "email": obj.get("email"),
            "first_name": obj.get("first_name"),
            "id": obj.get("id"),
            "last_name": obj.get("last_name"),
            "marketing_opt_in": obj.get("marketing_opt_in"),
            "name": obj.get("name"),
            "phone": obj.get("phone"),
            "position": obj.get("position")
        })
        return _obj



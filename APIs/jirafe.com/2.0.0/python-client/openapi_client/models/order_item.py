# coding: utf-8

"""
    Jirafe Events

    API endpoins for sending Jirafe events

    The version of the OpenAPI document: 2.0.0
    Contact: support@jirafe.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Union
from typing_extensions import Annotated
from openapi_client.models.product import Product
from typing import Optional, Set
from typing_extensions import Self

class OrderItem(BaseModel):
    """
    OrderItem
    """ # noqa: E501
    change_date: datetime
    create_date: datetime
    discount_price: Union[Annotated[float, Field(le=9007199254740992, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]
    id: StrictStr
    order_item_number: StrictStr
    price: Union[Annotated[float, Field(le=9007199254740992, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]
    product: Product
    quantity: Annotated[int, Field(le=9007199254740992, strict=True, ge=-9007199254740992)]
    status: StrictStr
    __properties: ClassVar[List[str]] = ["change_date", "create_date", "discount_price", "id", "order_item_number", "price", "product", "quantity", "status"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['accepted', 'cancelled']):
            raise ValueError("must be one of enum values ('accepted', 'cancelled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['product'] = self.product.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "change_date": obj.get("change_date"),
            "create_date": obj.get("create_date"),
            "discount_price": obj.get("discount_price"),
            "id": obj.get("id"),
            "order_item_number": obj.get("order_item_number"),
            "price": obj.get("price"),
            "product": Product.from_dict(obj["product"]) if obj.get("product") is not None else None,
            "quantity": obj.get("quantity"),
            "status": obj.get("status")
        })
        return _obj



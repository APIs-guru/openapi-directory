# coding: utf-8

"""
    Jirafe Events

    API endpoins for sending Jirafe events

    The version of the OpenAPI document: 2.0.0
    Contact: support@jirafe.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cart import Cart
from openapi_client.models.category import Category
from openapi_client.models.customer import Customer
from openapi_client.models.order import Order
from openapi_client.models.product import Product
from typing import Optional, Set
from typing_extensions import Self

class Batch(BaseModel):
    """
    Batch
    """ # noqa: E501
    cart: Optional[List[Cart]] = None
    category: Optional[List[Category]] = None
    customer: Optional[List[Customer]] = None
    employee: Optional[List[Dict[str, Any]]] = None
    order: Optional[List[Order]] = None
    product: Optional[List[Product]] = None
    __properties: ClassVar[List[str]] = ["cart", "category", "customer", "employee", "order", "product"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Batch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cart (list)
        _items = []
        if self.cart:
            for _item_cart in self.cart:
                if _item_cart:
                    _items.append(_item_cart.to_dict())
            _dict['cart'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in category (list)
        _items = []
        if self.category:
            for _item_category in self.category:
                if _item_category:
                    _items.append(_item_category.to_dict())
            _dict['category'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in customer (list)
        _items = []
        if self.customer:
            for _item_customer in self.customer:
                if _item_customer:
                    _items.append(_item_customer.to_dict())
            _dict['customer'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in order (list)
        _items = []
        if self.order:
            for _item_order in self.order:
                if _item_order:
                    _items.append(_item_order.to_dict())
            _dict['order'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in product (list)
        _items = []
        if self.product:
            for _item_product in self.product:
                if _item_product:
                    _items.append(_item_product.to_dict())
            _dict['product'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Batch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cart": [Cart.from_dict(_item) for _item in obj["cart"]] if obj.get("cart") is not None else None,
            "category": [Category.from_dict(_item) for _item in obj["category"]] if obj.get("category") is not None else None,
            "customer": [Customer.from_dict(_item) for _item in obj["customer"]] if obj.get("customer") is not None else None,
            "employee": obj.get("employee"),
            "order": [Order.from_dict(_item) for _item in obj["order"]] if obj.get("order") is not None else None,
            "product": [Product.from_dict(_item) for _item in obj["product"]] if obj.get("product") is not None else None
        })
        return _obj



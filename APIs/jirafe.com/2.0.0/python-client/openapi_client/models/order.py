# coding: utf-8

"""
    Jirafe Events

    API endpoins for sending Jirafe events

    The version of the OpenAPI document: 2.0.0
    Contact: support@jirafe.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.customer import Customer
from openapi_client.models.order_item import OrderItem
from typing import Optional, Set
from typing_extensions import Self

class Order(BaseModel):
    """
    Order
    """ # noqa: E501
    cart_id: Optional[StrictStr] = None
    change_date: datetime
    create_date: datetime
    currency: StrictStr
    customer: Customer
    items: List[OrderItem]
    order_date: datetime
    order_number: StrictStr
    previous_items: Optional[List[OrderItem]] = None
    status: StrictStr
    subtotal: Union[StrictFloat, StrictInt]
    total: Union[StrictFloat, StrictInt]
    total_discounts: Union[StrictFloat, StrictInt]
    total_payment_cost: Union[StrictFloat, StrictInt]
    total_shipping: Union[StrictFloat, StrictInt]
    total_tax: Union[StrictFloat, StrictInt]
    __properties: ClassVar[List[str]] = ["cart_id", "change_date", "create_date", "currency", "customer", "items", "order_date", "order_number", "previous_items", "status", "subtotal", "total", "total_discounts", "total_payment_cost", "total_shipping", "total_tax"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['accepted']):
            raise ValueError("must be one of enum values ('accepted')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Order from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in previous_items (list)
        _items = []
        if self.previous_items:
            for _item_previous_items in self.previous_items:
                if _item_previous_items:
                    _items.append(_item_previous_items.to_dict())
            _dict['previous_items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Order from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cart_id": obj.get("cart_id"),
            "change_date": obj.get("change_date"),
            "create_date": obj.get("create_date"),
            "currency": obj.get("currency"),
            "customer": Customer.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "items": [OrderItem.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "order_date": obj.get("order_date"),
            "order_number": obj.get("order_number"),
            "previous_items": [OrderItem.from_dict(_item) for _item in obj["previous_items"]] if obj.get("previous_items") is not None else None,
            "status": obj.get("status") if obj.get("status") is not None else 'accepted',
            "subtotal": obj.get("subtotal"),
            "total": obj.get("total"),
            "total_discounts": obj.get("total_discounts"),
            "total_payment_cost": obj.get("total_payment_cost"),
            "total_shipping": obj.get("total_shipping"),
            "total_tax": obj.get("total_tax")
        })
        return _obj



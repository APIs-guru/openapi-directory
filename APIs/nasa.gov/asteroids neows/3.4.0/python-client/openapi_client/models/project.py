# coding: utf-8

"""
    TechPort

    TechPort RESTful API

    The version of the OpenAPI document: 3.4.0
    Contact: hq-techport@mail.nasa.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.library_item import LibraryItem
from openapi_client.models.organization import Organization
from openapi_client.models.technology_area import TechnologyArea
from typing import Optional, Set
from typing_extensions import Self

class Project(BaseModel):
    """
    Top-level TechPort object representing a NASA technology project and its associated data.
    """ # noqa: E501
    acronym: Optional[StrictStr] = Field(default=None, description="Abbreviated name of the project.")
    additional_tas: Optional[List[TechnologyArea]] = Field(default=None, description="List of additional and cross-cutting technology areas associated with the project.", alias="additionalTas")
    benefits: Optional[StrictStr] = Field(default=None, description="Describes the benefits offered to NASA funded and planned missions, unfunded or planned missions, commercial space industry, and to the nation.")
    closeout_documents: Optional[List[StrictStr]] = Field(default=None, description="List of document files or links to the project final report closeout documentation.", alias="closeoutDocuments")
    closeout_summary: Optional[StrictStr] = Field(default=None, description="The project closeout summary excerpt.", alias="closeoutSummary")
    co_funding_partners: Optional[List[Organization]] = Field(default=None, description="Other government agencies, NASA Mission Directoratres, universities, or commercial entities performing contributing resources to this project.", alias="coFundingPartners")
    co_investigators: Optional[List[StrictStr]] = Field(default=None, description="Names of the additional investigators who are scientists or engineers for this project.", alias="coInvestigators")
    description: Optional[StrictStr] = Field(default=None, description="A detailed description of the project.")
    destinations: Optional[List[StrictStr]] = Field(default=None, description="List of the NASA destinations the technology on this project helps achieve.")
    end_date: Optional[StrictStr] = Field(default=None, description="The month and year the project is expected to complete its work.", alias="endDate")
    id: Optional[StrictInt] = Field(default=None, description="Unique identifier for the project.")
    last_updated: Optional[date] = Field(default=None, description="ISO 8601 full-date in the format YYYY-MM-DD describing the last time this project was updated.", alias="lastUpdated")
    lead_organization: Optional[Organization] = Field(default=None, alias="leadOrganization")
    library_items: Optional[List[LibraryItem]] = Field(default=None, description="List of library items in the project library.", alias="libraryItems")
    primary_tas: Optional[List[TechnologyArea]] = Field(default=None, description="List of primary technolgy areas (from the NASA Technology Roadmap) associated with the project.", alias="primaryTas")
    principal_investigators: Optional[List[StrictStr]] = Field(default=None, description="Names of the Principal Investigators who are the lead scientists or engineers for this project.", alias="principalInvestigators")
    program_directors: Optional[List[StrictStr]] = Field(default=None, description="Names of the Program Directors responsible for the management of this project.", alias="programDirectors")
    program_managers: Optional[List[StrictStr]] = Field(default=None, description="Names of the Program Managers responsible for the management of this project.", alias="programManagers")
    project_managers: Optional[List[StrictStr]] = Field(default=None, description="Names of the Project Managers responsible for the management of this project.", alias="projectManagers")
    responsible_mission_directorate_or_office: Optional[StrictStr] = Field(default=None, description="The NASA Mission Directorate or Office that is the primary funding source for this project.", alias="responsibleMissionDirectorateOrOffice")
    responsible_program: Optional[StrictStr] = Field(default=None, description="The NASA program that is the primary funding source for this project.", alias="responsibleProgram")
    start_date: Optional[StrictStr] = Field(default=None, description="The month and year the project was authorized to proceed.", alias="startDate")
    status: Optional[StrictStr] = Field(default=None, description="Indicates whether the project is currently active, completed, or canceled.")
    supported_mission_type: Optional[StrictStr] = Field(default=None, description="The supported mission type (Projected Mission, Planned Mission, or Pull).", alias="supportedMissionType")
    supporting_organizations: Optional[List[Organization]] = Field(default=None, description="The supporting organizations for this project that are conducting work on the project.", alias="supportingOrganizations")
    technology_maturity_current: Optional[StrictStr] = Field(default=None, description="The current technology maturity (technology readiness level) of the project.", alias="technologyMaturityCurrent")
    technology_maturity_end: Optional[StrictStr] = Field(default=None, description="The estimated technology maturity (technology readiness level) of the project at its end.", alias="technologyMaturityEnd")
    technology_maturity_start: Optional[StrictStr] = Field(default=None, description="The technology maturity (technology readiness level) of the project at its beginning.", alias="technologyMaturityStart")
    title: Optional[StrictStr] = Field(default=None, description="Title of the project.")
    website: Optional[StrictStr] = Field(default=None, description="The URL for the associated website.")
    work_locations: Optional[List[StrictStr]] = Field(default=None, description="States and territories with people performing work on this project.", alias="workLocations")
    __properties: ClassVar[List[str]] = ["acronym", "additionalTas", "benefits", "closeoutDocuments", "closeoutSummary", "coFundingPartners", "coInvestigators", "description", "destinations", "endDate", "id", "lastUpdated", "leadOrganization", "libraryItems", "primaryTas", "principalInvestigators", "programDirectors", "programManagers", "projectManagers", "responsibleMissionDirectorateOrOffice", "responsibleProgram", "startDate", "status", "supportedMissionType", "supportingOrganizations", "technologyMaturityCurrent", "technologyMaturityEnd", "technologyMaturityStart", "title", "website", "workLocations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Project from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_tas (list)
        _items = []
        if self.additional_tas:
            for _item_additional_tas in self.additional_tas:
                if _item_additional_tas:
                    _items.append(_item_additional_tas.to_dict())
            _dict['additionalTas'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in co_funding_partners (list)
        _items = []
        if self.co_funding_partners:
            for _item_co_funding_partners in self.co_funding_partners:
                if _item_co_funding_partners:
                    _items.append(_item_co_funding_partners.to_dict())
            _dict['coFundingPartners'] = _items
        # override the default output from pydantic by calling `to_dict()` of lead_organization
        if self.lead_organization:
            _dict['leadOrganization'] = self.lead_organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in library_items (list)
        _items = []
        if self.library_items:
            for _item_library_items in self.library_items:
                if _item_library_items:
                    _items.append(_item_library_items.to_dict())
            _dict['libraryItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in primary_tas (list)
        _items = []
        if self.primary_tas:
            for _item_primary_tas in self.primary_tas:
                if _item_primary_tas:
                    _items.append(_item_primary_tas.to_dict())
            _dict['primaryTas'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in supporting_organizations (list)
        _items = []
        if self.supporting_organizations:
            for _item_supporting_organizations in self.supporting_organizations:
                if _item_supporting_organizations:
                    _items.append(_item_supporting_organizations.to_dict())
            _dict['supportingOrganizations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Project from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acronym": obj.get("acronym"),
            "additionalTas": [TechnologyArea.from_dict(_item) for _item in obj["additionalTas"]] if obj.get("additionalTas") is not None else None,
            "benefits": obj.get("benefits"),
            "closeoutDocuments": obj.get("closeoutDocuments"),
            "closeoutSummary": obj.get("closeoutSummary"),
            "coFundingPartners": [Organization.from_dict(_item) for _item in obj["coFundingPartners"]] if obj.get("coFundingPartners") is not None else None,
            "coInvestigators": obj.get("coInvestigators"),
            "description": obj.get("description"),
            "destinations": obj.get("destinations"),
            "endDate": obj.get("endDate"),
            "id": obj.get("id"),
            "lastUpdated": obj.get("lastUpdated"),
            "leadOrganization": Organization.from_dict(obj["leadOrganization"]) if obj.get("leadOrganization") is not None else None,
            "libraryItems": [LibraryItem.from_dict(_item) for _item in obj["libraryItems"]] if obj.get("libraryItems") is not None else None,
            "primaryTas": [TechnologyArea.from_dict(_item) for _item in obj["primaryTas"]] if obj.get("primaryTas") is not None else None,
            "principalInvestigators": obj.get("principalInvestigators"),
            "programDirectors": obj.get("programDirectors"),
            "programManagers": obj.get("programManagers"),
            "projectManagers": obj.get("projectManagers"),
            "responsibleMissionDirectorateOrOffice": obj.get("responsibleMissionDirectorateOrOffice"),
            "responsibleProgram": obj.get("responsibleProgram"),
            "startDate": obj.get("startDate"),
            "status": obj.get("status"),
            "supportedMissionType": obj.get("supportedMissionType"),
            "supportingOrganizations": [Organization.from_dict(_item) for _item in obj["supportingOrganizations"]] if obj.get("supportingOrganizations") is not None else None,
            "technologyMaturityCurrent": obj.get("technologyMaturityCurrent"),
            "technologyMaturityEnd": obj.get("technologyMaturityEnd"),
            "technologyMaturityStart": obj.get("technologyMaturityStart"),
            "title": obj.get("title"),
            "website": obj.get("website"),
            "workLocations": obj.get("workLocations")
        })
        return _obj



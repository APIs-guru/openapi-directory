# coding: utf-8

"""
    TechPort

    TechPort RESTful API

    The version of the OpenAPI document: 3.4.0
    Contact: hq-techport@mail.nasa.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.project import Project

class TestProject(unittest.TestCase):
    """Project unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Project:
        """Test Project
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Project`
        """
        model = Project()
        if include_optional:
            return Project(
                acronym = '',
                additional_tas = [
                    openapi_client.models.technology_area.technologyArea(
                        code = '', 
                        id = 56, 
                        name = '', )
                    ],
                benefits = '',
                closeout_documents = [
                    ''
                    ],
                closeout_summary = '',
                co_funding_partners = [
                    openapi_client.models.organization.organization(
                        acronym = '', 
                        city = '', 
                        name = '', 
                        state = '', )
                    ],
                co_investigators = [
                    ''
                    ],
                description = '',
                destinations = [
                    ''
                    ],
                end_date = '',
                id = 56,
                last_updated = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                lead_organization = openapi_client.models.organization.organization(
                    acronym = '', 
                    city = '', 
                    name = '', 
                    state = '', ),
                library_items = [
                    openapi_client.models.library_item.libraryItem(
                        completion_date = '', 
                        description = '', 
                        external_url = '', 
                        files = [
                            openapi_client.models.file.file(
                                id = 56, 
                                size = '', 
                                url = '', )
                            ], 
                        id = 56, 
                        published_by = '', 
                        published_date = '', 
                        title = '', 
                        type = '', )
                    ],
                primary_tas = [
                    openapi_client.models.technology_area.technologyArea(
                        code = '', 
                        id = 56, 
                        name = '', )
                    ],
                principal_investigators = [
                    ''
                    ],
                program_directors = [
                    ''
                    ],
                program_managers = [
                    ''
                    ],
                project_managers = [
                    ''
                    ],
                responsible_mission_directorate_or_office = '',
                responsible_program = '',
                start_date = '',
                status = '',
                supported_mission_type = '',
                supporting_organizations = [
                    openapi_client.models.organization.organization(
                        acronym = '', 
                        city = '', 
                        name = '', 
                        state = '', )
                    ],
                technology_maturity_current = '',
                technology_maturity_end = '',
                technology_maturity_start = '',
                title = '',
                website = '',
                work_locations = [
                    ''
                    ]
            )
        else:
            return Project(
        )
        """

    def testProject(self):
        """Test Project"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

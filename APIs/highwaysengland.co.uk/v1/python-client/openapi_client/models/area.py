# coding: utf-8

"""
    Highways England API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Area(BaseModel):
    """
    Area
    """ # noqa: E501
    description: StrictStr = Field(alias="Description")
    id: Optional[StrictStr] = Field(default=None, alias="Id")
    name: StrictStr = Field(alias="Name")
    x_latitude: Annotated[str, Field(strict=True)] = Field(alias="XLatitude")
    x_longitude: Annotated[str, Field(strict=True)] = Field(alias="XLongitude")
    y_latitude: Annotated[str, Field(strict=True)] = Field(alias="YLatitude")
    y_longitude: Annotated[str, Field(strict=True)] = Field(alias="YLongitude")
    __properties: ClassVar[List[str]] = ["Description", "Id", "Name", "XLatitude", "XLongitude", "YLatitude", "YLongitude"]

    @field_validator('x_latitude')
    def x_latitude_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(\+|-)?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\.[0-9]{1,15})?))$", value):
            raise ValueError(r"must validate the regular expression /^(\+|-)?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\.[0-9]{1,15})?))$/")
        return value

    @field_validator('x_longitude')
    def x_longitude_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(\+|-)?(?:90(?:(?:\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\.[0-9]{1,15})?))$", value):
            raise ValueError(r"must validate the regular expression /^(\+|-)?(?:90(?:(?:\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\.[0-9]{1,15})?))$/")
        return value

    @field_validator('y_latitude')
    def y_latitude_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(\+|-)?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\.[0-9]{1,15})?))$", value):
            raise ValueError(r"must validate the regular expression /^(\+|-)?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\.[0-9]{1,15})?))$/")
        return value

    @field_validator('y_longitude')
    def y_longitude_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(\+|-)?(?:90(?:(?:\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\.[0-9]{1,15})?))$", value):
            raise ValueError(r"must validate the regular expression /^(\+|-)?(?:90(?:(?:\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\.[0-9]{1,15})?))$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Area from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Area from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Description": obj.get("Description"),
            "Id": obj.get("Id"),
            "Name": obj.get("Name"),
            "XLatitude": obj.get("XLatitude"),
            "XLongitude": obj.get("XLongitude"),
            "YLatitude": obj.get("YLatitude"),
            "YLongitude": obj.get("YLongitude")
        })
        return _obj



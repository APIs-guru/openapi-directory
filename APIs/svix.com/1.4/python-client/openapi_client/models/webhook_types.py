# coding: utf-8

"""
    Svix API

    Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 

    The version of the OpenAPI document: 1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List
from openapi_client.models.background_task_finished_event import BackgroundTaskFinishedEvent
from openapi_client.models.endpoint_created_event import EndpointCreatedEvent
from openapi_client.models.endpoint_deleted_event import EndpointDeletedEvent
from openapi_client.models.endpoint_disabled_event import EndpointDisabledEvent
from openapi_client.models.endpoint_updated_event import EndpointUpdatedEvent
from openapi_client.models.message_attempt_exhausted_event import MessageAttemptExhaustedEvent
from openapi_client.models.message_attempt_failing_event import MessageAttemptFailingEvent
from typing import Optional, Set
from typing_extensions import Self

class WebhookTypes(BaseModel):
    """
    All of the webhook types that we support
    """ # noqa: E501
    a: EndpointDisabledEvent
    a1: MessageAttemptFailingEvent
    a2: BackgroundTaskFinishedEvent
    b: EndpointCreatedEvent
    c: EndpointUpdatedEvent
    d: EndpointDeletedEvent
    e: MessageAttemptExhaustedEvent
    __properties: ClassVar[List[str]] = ["a", "a1", "a2", "b", "c", "d", "e"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebhookTypes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of a
        if self.a:
            _dict['a'] = self.a.to_dict()
        # override the default output from pydantic by calling `to_dict()` of a1
        if self.a1:
            _dict['a1'] = self.a1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of a2
        if self.a2:
            _dict['a2'] = self.a2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of b
        if self.b:
            _dict['b'] = self.b.to_dict()
        # override the default output from pydantic by calling `to_dict()` of c
        if self.c:
            _dict['c'] = self.c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of d
        if self.d:
            _dict['d'] = self.d.to_dict()
        # override the default output from pydantic by calling `to_dict()` of e
        if self.e:
            _dict['e'] = self.e.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebhookTypes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "a": EndpointDisabledEvent.from_dict(obj["a"]) if obj.get("a") is not None else None,
            "a1": MessageAttemptFailingEvent.from_dict(obj["a1"]) if obj.get("a1") is not None else None,
            "a2": BackgroundTaskFinishedEvent.from_dict(obj["a2"]) if obj.get("a2") is not None else None,
            "b": EndpointCreatedEvent.from_dict(obj["b"]) if obj.get("b") is not None else None,
            "c": EndpointUpdatedEvent.from_dict(obj["c"]) if obj.get("c") is not None else None,
            "d": EndpointDeletedEvent.from_dict(obj["d"]) if obj.get("d") is not None else None,
            "e": MessageAttemptExhaustedEvent.from_dict(obj["e"]) if obj.get("e") is not None else None
        })
        return _obj



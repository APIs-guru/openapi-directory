# coding: utf-8

"""
    Svix API

    Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 

    The version of the OpenAPI document: 1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.endpoint_api import EndpointApi


class TestEndpointApi(unittest.TestCase):
    """EndpointApi unit test stubs"""

    def setUp(self) -> None:
        self.api = EndpointApi()

    def tearDown(self) -> None:
        pass

    def test_create_endpoint_api_v1_app_app_id_endpoint_post(self) -> None:
        """Test case for create_endpoint_api_v1_app_app_id_endpoint_post

        Create Endpoint
        """
        pass

    def test_delete_endpoint_api_v1_app_app_id_endpoint_endpoint_id_delete(self) -> None:
        """Test case for delete_endpoint_api_v1_app_app_id_endpoint_endpoint_id_delete

        Delete Endpoint
        """
        pass

    def test_get_endpoint_api_v1_app_app_id_endpoint_endpoint_id_get(self) -> None:
        """Test case for get_endpoint_api_v1_app_app_id_endpoint_endpoint_id_get

        Get Endpoint
        """
        pass

    def test_get_endpoint_headers_api_v1_app_app_id_endpoint_endpoint_id_headers_get(self) -> None:
        """Test case for get_endpoint_headers_api_v1_app_app_id_endpoint_endpoint_id_headers_get

        Get Endpoint Headers
        """
        pass

    def test_get_endpoint_secret_api_v1_app_app_id_endpoint_endpoint_id_secret_get(self) -> None:
        """Test case for get_endpoint_secret_api_v1_app_app_id_endpoint_endpoint_id_secret_get

        Get Endpoint Secret
        """
        pass

    def test_get_endpoint_stats_api_v1_app_app_id_endpoint_endpoint_id_stats_get(self) -> None:
        """Test case for get_endpoint_stats_api_v1_app_app_id_endpoint_endpoint_id_stats_get

        Get Endpoint Stats
        """
        pass

    def test_get_endpoint_transformation_api_v1_app_app_id_endpoint_endpoint_id_transformation_get(self) -> None:
        """Test case for get_endpoint_transformation_api_v1_app_app_id_endpoint_endpoint_id_transformation_get

        Get Endpoint Transformation
        """
        pass

    def test_list_endpoints_api_v1_app_app_id_endpoint_get(self) -> None:
        """Test case for list_endpoints_api_v1_app_app_id_endpoint_get

        List Endpoints
        """
        pass

    def test_patch_endpoint_headers_api_v1_app_app_id_endpoint_endpoint_id_headers_patch(self) -> None:
        """Test case for patch_endpoint_headers_api_v1_app_app_id_endpoint_endpoint_id_headers_patch

        Patch Endpoint Headers
        """
        pass

    def test_recover_failed_webhooks_api_v1_app_app_id_endpoint_endpoint_id_recover_post(self) -> None:
        """Test case for recover_failed_webhooks_api_v1_app_app_id_endpoint_endpoint_id_recover_post

        Recover Failed Webhooks
        """
        pass

    def test_replay_missing_webhooks_api_v1_app_app_id_endpoint_endpoint_id_replay_missing_post(self) -> None:
        """Test case for replay_missing_webhooks_api_v1_app_app_id_endpoint_endpoint_id_replay_missing_post

        Replay Missing Webhooks
        """
        pass

    def test_rotate_endpoint_secret_api_v1_app_app_id_endpoint_endpoint_id_secret_rotate_post(self) -> None:
        """Test case for rotate_endpoint_secret_api_v1_app_app_id_endpoint_endpoint_id_secret_rotate_post

        Rotate Endpoint Secret
        """
        pass

    def test_send_event_type_example_message_api_v1_app_app_id_endpoint_endpoint_id_send_example_post(self) -> None:
        """Test case for send_event_type_example_message_api_v1_app_app_id_endpoint_endpoint_id_send_example_post

        Send Event Type Example Message
        """
        pass

    def test_set_endpoint_transformation_api_v1_app_app_id_endpoint_endpoint_id_transformation_patch(self) -> None:
        """Test case for set_endpoint_transformation_api_v1_app_app_id_endpoint_endpoint_id_transformation_patch

        Set Endpoint Transformation
        """
        pass

    def test_update_endpoint_api_v1_app_app_id_endpoint_endpoint_id_put(self) -> None:
        """Test case for update_endpoint_api_v1_app_app_id_endpoint_endpoint_id_put

        Update Endpoint
        """
        pass

    def test_update_endpoint_headers_api_v1_app_app_id_endpoint_endpoint_id_headers_put(self) -> None:
        """Test case for update_endpoint_headers_api_v1_app_app_id_endpoint_endpoint_id_headers_put

        Update Endpoint Headers
        """
        pass


if __name__ == '__main__':
    unittest.main()

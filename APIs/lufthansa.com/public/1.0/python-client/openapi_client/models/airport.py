# coding: utf-8

"""
    LH Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.airport_names import AirportNames
from openapi_client.models.airport_position import AirportPosition
from typing import Optional, Set
from typing_extensions import Self

class Airport(BaseModel):
    """
    Array of all available airports or one airport matching the request.
    """ # noqa: E501
    airport_code: Optional[StrictStr] = Field(default=None, description="3-letter IATA airport code, e.g. “TXL”.", alias="AirportCode")
    city_code: Optional[StrictStr] = Field(default=None, description="3-letter IATA city code, e.g. “BER”.", alias="CityCode")
    country_code: Optional[StrictStr] = Field(default=None, description="2-letter ISO 3166-1 country code, e.g. “DE”.", alias="CountryCode")
    location_type: Optional[StrictStr] = Field(default=None, description=" “Airport”, “RailwayStation” or “BusStation”.", alias="LocationType")
    names: Optional[AirportNames] = Field(default=None, alias="Names")
    position: Optional[AirportPosition] = Field(default=None, alias="Position")
    time_zone_id: Optional[StrictStr] = Field(default=None, description="Time zone name airport is in", alias="TimeZoneId")
    utc_offset: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Hour offset of airport to UTC time zone", alias="UtcOffset")
    __properties: ClassVar[List[str]] = ["AirportCode", "CityCode", "CountryCode", "LocationType", "Names", "Position", "TimeZoneId", "UtcOffset"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Airport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of names
        if self.names:
            _dict['Names'] = self.names.to_dict()
        # override the default output from pydantic by calling `to_dict()` of position
        if self.position:
            _dict['Position'] = self.position.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Airport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AirportCode": obj.get("AirportCode"),
            "CityCode": obj.get("CityCode"),
            "CountryCode": obj.get("CountryCode"),
            "LocationType": obj.get("LocationType"),
            "Names": AirportNames.from_dict(obj["Names"]) if obj.get("Names") is not None else None,
            "Position": AirportPosition.from_dict(obj["Position"]) if obj.get("Position") is not None else None,
            "TimeZoneId": obj.get("TimeZoneId"),
            "UtcOffset": obj.get("UtcOffset")
        })
        return _obj



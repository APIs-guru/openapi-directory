# coding: utf-8

"""
    LH Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Any, Dict, Optional
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class OffersApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def offers_lounges_by_location_get(
        self,
        location: Annotated[StrictStr, Field(description="3-leter IATA airport or city code (e.g. 'ZRH')")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        cabin_class: Annotated[Optional[StrictStr], Field(description="Cabin class: 'M', 'E', 'C', 'F' (Acceptable values are: \"\", \"M\", \"E\", \"C\", \"F\")")] = None,
        tier_code: Annotated[Optional[StrictStr], Field(description="Frequent flyer level ('FTL', 'SGC', 'SEN', 'HON') (Acceptable values are: \"\", \"FTL\", \"SGC\", \"SEN\", \"HON\")")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="Language code.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Lounges

        Lounge information

        :param location: 3-leter IATA airport or city code (e.g. 'ZRH') (required)
        :type location: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param cabin_class: Cabin class: 'M', 'E', 'C', 'F' (Acceptable values are: \"\", \"M\", \"E\", \"C\", \"F\")
        :type cabin_class: str
        :param tier_code: Frequent flyer level ('FTL', 'SGC', 'SEN', 'HON') (Acceptable values are: \"\", \"FTL\", \"SGC\", \"SEN\", \"HON\")
        :type tier_code: str
        :param lang: Language code.
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._offers_lounges_by_location_get_serialize(
            location=location,
            accept=accept,
            cabin_class=cabin_class,
            tier_code=tier_code,
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def offers_lounges_by_location_get_with_http_info(
        self,
        location: Annotated[StrictStr, Field(description="3-leter IATA airport or city code (e.g. 'ZRH')")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        cabin_class: Annotated[Optional[StrictStr], Field(description="Cabin class: 'M', 'E', 'C', 'F' (Acceptable values are: \"\", \"M\", \"E\", \"C\", \"F\")")] = None,
        tier_code: Annotated[Optional[StrictStr], Field(description="Frequent flyer level ('FTL', 'SGC', 'SEN', 'HON') (Acceptable values are: \"\", \"FTL\", \"SGC\", \"SEN\", \"HON\")")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="Language code.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Lounges

        Lounge information

        :param location: 3-leter IATA airport or city code (e.g. 'ZRH') (required)
        :type location: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param cabin_class: Cabin class: 'M', 'E', 'C', 'F' (Acceptable values are: \"\", \"M\", \"E\", \"C\", \"F\")
        :type cabin_class: str
        :param tier_code: Frequent flyer level ('FTL', 'SGC', 'SEN', 'HON') (Acceptable values are: \"\", \"FTL\", \"SGC\", \"SEN\", \"HON\")
        :type tier_code: str
        :param lang: Language code.
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._offers_lounges_by_location_get_serialize(
            location=location,
            accept=accept,
            cabin_class=cabin_class,
            tier_code=tier_code,
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def offers_lounges_by_location_get_without_preload_content(
        self,
        location: Annotated[StrictStr, Field(description="3-leter IATA airport or city code (e.g. 'ZRH')")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        cabin_class: Annotated[Optional[StrictStr], Field(description="Cabin class: 'M', 'E', 'C', 'F' (Acceptable values are: \"\", \"M\", \"E\", \"C\", \"F\")")] = None,
        tier_code: Annotated[Optional[StrictStr], Field(description="Frequent flyer level ('FTL', 'SGC', 'SEN', 'HON') (Acceptable values are: \"\", \"FTL\", \"SGC\", \"SEN\", \"HON\")")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="Language code.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Lounges

        Lounge information

        :param location: 3-leter IATA airport or city code (e.g. 'ZRH') (required)
        :type location: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param cabin_class: Cabin class: 'M', 'E', 'C', 'F' (Acceptable values are: \"\", \"M\", \"E\", \"C\", \"F\")
        :type cabin_class: str
        :param tier_code: Frequent flyer level ('FTL', 'SGC', 'SEN', 'HON') (Acceptable values are: \"\", \"FTL\", \"SGC\", \"SEN\", \"HON\")
        :type tier_code: str
        :param lang: Language code.
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._offers_lounges_by_location_get_serialize(
            location=location,
            accept=accept,
            cabin_class=cabin_class,
            tier_code=tier_code,
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _offers_lounges_by_location_get_serialize(
        self,
        location,
        accept,
        cabin_class,
        tier_code,
        lang,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if location is not None:
            _path_params['location'] = location
        # process the query parameters
        if cabin_class is not None:
            
            _query_params.append(('cabinClass', cabin_class))
            
        if tier_code is not None:
            
            _query_params.append(('tierCode', tier_code))
            
        if lang is not None:
            
            _query_params.append(('lang', lang))
            
        # process the header parameters
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/offers/lounges/{location}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def offers_seatmaps_destination_date_cabin_class_by_flight_number_and_origin_get(
        self,
        flight_number: Annotated[StrictStr, Field(description="Flight number including carrier code and any suffix (e.g. 'LH2037')")],
        origin: Annotated[StrictStr, Field(description="Departure airport. 3-letter IATA airport code (e.g. 'TXL')")],
        destination: Annotated[StrictStr, Field(description="Destination airport. 3-letter IATA airport code (e.g. 'MUC')")],
        var_date: Annotated[StrictStr, Field(description="Departure date (YYYY-MM-DD)")],
        cabin_class: Annotated[StrictStr, Field(description="Cabin class: 'M', 'E', 'C', 'F'. Some flights have fewer classes (Acceptable values are: \"M\", \"E\", \"C\", \"F\")")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Seat Maps

        Cabin layout and seat characteristics.

        :param flight_number: Flight number including carrier code and any suffix (e.g. 'LH2037') (required)
        :type flight_number: str
        :param origin: Departure airport. 3-letter IATA airport code (e.g. 'TXL') (required)
        :type origin: str
        :param destination: Destination airport. 3-letter IATA airport code (e.g. 'MUC') (required)
        :type destination: str
        :param var_date: Departure date (YYYY-MM-DD) (required)
        :type var_date: str
        :param cabin_class: Cabin class: 'M', 'E', 'C', 'F'. Some flights have fewer classes (Acceptable values are: \"M\", \"E\", \"C\", \"F\") (required)
        :type cabin_class: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._offers_seatmaps_destination_date_cabin_class_by_flight_number_and_origin_get_serialize(
            flight_number=flight_number,
            origin=origin,
            destination=destination,
            var_date=var_date,
            cabin_class=cabin_class,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def offers_seatmaps_destination_date_cabin_class_by_flight_number_and_origin_get_with_http_info(
        self,
        flight_number: Annotated[StrictStr, Field(description="Flight number including carrier code and any suffix (e.g. 'LH2037')")],
        origin: Annotated[StrictStr, Field(description="Departure airport. 3-letter IATA airport code (e.g. 'TXL')")],
        destination: Annotated[StrictStr, Field(description="Destination airport. 3-letter IATA airport code (e.g. 'MUC')")],
        var_date: Annotated[StrictStr, Field(description="Departure date (YYYY-MM-DD)")],
        cabin_class: Annotated[StrictStr, Field(description="Cabin class: 'M', 'E', 'C', 'F'. Some flights have fewer classes (Acceptable values are: \"M\", \"E\", \"C\", \"F\")")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Seat Maps

        Cabin layout and seat characteristics.

        :param flight_number: Flight number including carrier code and any suffix (e.g. 'LH2037') (required)
        :type flight_number: str
        :param origin: Departure airport. 3-letter IATA airport code (e.g. 'TXL') (required)
        :type origin: str
        :param destination: Destination airport. 3-letter IATA airport code (e.g. 'MUC') (required)
        :type destination: str
        :param var_date: Departure date (YYYY-MM-DD) (required)
        :type var_date: str
        :param cabin_class: Cabin class: 'M', 'E', 'C', 'F'. Some flights have fewer classes (Acceptable values are: \"M\", \"E\", \"C\", \"F\") (required)
        :type cabin_class: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._offers_seatmaps_destination_date_cabin_class_by_flight_number_and_origin_get_serialize(
            flight_number=flight_number,
            origin=origin,
            destination=destination,
            var_date=var_date,
            cabin_class=cabin_class,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def offers_seatmaps_destination_date_cabin_class_by_flight_number_and_origin_get_without_preload_content(
        self,
        flight_number: Annotated[StrictStr, Field(description="Flight number including carrier code and any suffix (e.g. 'LH2037')")],
        origin: Annotated[StrictStr, Field(description="Departure airport. 3-letter IATA airport code (e.g. 'TXL')")],
        destination: Annotated[StrictStr, Field(description="Destination airport. 3-letter IATA airport code (e.g. 'MUC')")],
        var_date: Annotated[StrictStr, Field(description="Departure date (YYYY-MM-DD)")],
        cabin_class: Annotated[StrictStr, Field(description="Cabin class: 'M', 'E', 'C', 'F'. Some flights have fewer classes (Acceptable values are: \"M\", \"E\", \"C\", \"F\")")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Seat Maps

        Cabin layout and seat characteristics.

        :param flight_number: Flight number including carrier code and any suffix (e.g. 'LH2037') (required)
        :type flight_number: str
        :param origin: Departure airport. 3-letter IATA airport code (e.g. 'TXL') (required)
        :type origin: str
        :param destination: Destination airport. 3-letter IATA airport code (e.g. 'MUC') (required)
        :type destination: str
        :param var_date: Departure date (YYYY-MM-DD) (required)
        :type var_date: str
        :param cabin_class: Cabin class: 'M', 'E', 'C', 'F'. Some flights have fewer classes (Acceptable values are: \"M\", \"E\", \"C\", \"F\") (required)
        :type cabin_class: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._offers_seatmaps_destination_date_cabin_class_by_flight_number_and_origin_get_serialize(
            flight_number=flight_number,
            origin=origin,
            destination=destination,
            var_date=var_date,
            cabin_class=cabin_class,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _offers_seatmaps_destination_date_cabin_class_by_flight_number_and_origin_get_serialize(
        self,
        flight_number,
        origin,
        destination,
        var_date,
        cabin_class,
        accept,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if flight_number is not None:
            _path_params['flightNumber'] = flight_number
        if origin is not None:
            _path_params['origin'] = origin
        if destination is not None:
            _path_params['destination'] = destination
        if var_date is not None:
            _path_params['date'] = var_date
        if cabin_class is not None:
            _path_params['cabinClass'] = cabin_class
        # process the query parameters
        # process the header parameters
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/offers/seatmaps/{flightNumber}/{origin}/{destination}/{date}/{cabinClass}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



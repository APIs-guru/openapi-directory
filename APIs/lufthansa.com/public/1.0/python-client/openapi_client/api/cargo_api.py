# coding: utf-8

"""
    LH Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Any, Dict
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class CargoApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def cargo_get_route_from_date_product_code_by_origin_and_destination_get(
        self,
        origin: Annotated[StrictStr, Field(description="Departure Airport : 3-letter IATA airport code, e.g. FRA.")],
        destination: Annotated[StrictStr, Field(description="Arrival airport : 3-letter IATA airport code, e.g. HKG.")],
        from_date: Annotated[StrictStr, Field(description="Departure date in the local time of the departure airport. Based on LAT (Latest Acceptance Time). format : yyyy-MM-dd eg : 2017-07-15")],
        product_code: Annotated[StrictStr, Field(description="Product code for requested service and specials : 3-letter eg: YNZ")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Retrieve all flights

        Retrieve a list of all possible flights (both direct and connecting) between two airports on a given date. Routes are available for today and up to days in the future.

        :param origin: Departure Airport : 3-letter IATA airport code, e.g. FRA. (required)
        :type origin: str
        :param destination: Arrival airport : 3-letter IATA airport code, e.g. HKG. (required)
        :type destination: str
        :param from_date: Departure date in the local time of the departure airport. Based on LAT (Latest Acceptance Time). format : yyyy-MM-dd eg : 2017-07-15 (required)
        :type from_date: str
        :param product_code: Product code for requested service and specials : 3-letter eg: YNZ (required)
        :type product_code: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cargo_get_route_from_date_product_code_by_origin_and_destination_get_serialize(
            origin=origin,
            destination=destination,
            from_date=from_date,
            product_code=product_code,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def cargo_get_route_from_date_product_code_by_origin_and_destination_get_with_http_info(
        self,
        origin: Annotated[StrictStr, Field(description="Departure Airport : 3-letter IATA airport code, e.g. FRA.")],
        destination: Annotated[StrictStr, Field(description="Arrival airport : 3-letter IATA airport code, e.g. HKG.")],
        from_date: Annotated[StrictStr, Field(description="Departure date in the local time of the departure airport. Based on LAT (Latest Acceptance Time). format : yyyy-MM-dd eg : 2017-07-15")],
        product_code: Annotated[StrictStr, Field(description="Product code for requested service and specials : 3-letter eg: YNZ")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Retrieve all flights

        Retrieve a list of all possible flights (both direct and connecting) between two airports on a given date. Routes are available for today and up to days in the future.

        :param origin: Departure Airport : 3-letter IATA airport code, e.g. FRA. (required)
        :type origin: str
        :param destination: Arrival airport : 3-letter IATA airport code, e.g. HKG. (required)
        :type destination: str
        :param from_date: Departure date in the local time of the departure airport. Based on LAT (Latest Acceptance Time). format : yyyy-MM-dd eg : 2017-07-15 (required)
        :type from_date: str
        :param product_code: Product code for requested service and specials : 3-letter eg: YNZ (required)
        :type product_code: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cargo_get_route_from_date_product_code_by_origin_and_destination_get_serialize(
            origin=origin,
            destination=destination,
            from_date=from_date,
            product_code=product_code,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def cargo_get_route_from_date_product_code_by_origin_and_destination_get_without_preload_content(
        self,
        origin: Annotated[StrictStr, Field(description="Departure Airport : 3-letter IATA airport code, e.g. FRA.")],
        destination: Annotated[StrictStr, Field(description="Arrival airport : 3-letter IATA airport code, e.g. HKG.")],
        from_date: Annotated[StrictStr, Field(description="Departure date in the local time of the departure airport. Based on LAT (Latest Acceptance Time). format : yyyy-MM-dd eg : 2017-07-15")],
        product_code: Annotated[StrictStr, Field(description="Product code for requested service and specials : 3-letter eg: YNZ")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve all flights

        Retrieve a list of all possible flights (both direct and connecting) between two airports on a given date. Routes are available for today and up to days in the future.

        :param origin: Departure Airport : 3-letter IATA airport code, e.g. FRA. (required)
        :type origin: str
        :param destination: Arrival airport : 3-letter IATA airport code, e.g. HKG. (required)
        :type destination: str
        :param from_date: Departure date in the local time of the departure airport. Based on LAT (Latest Acceptance Time). format : yyyy-MM-dd eg : 2017-07-15 (required)
        :type from_date: str
        :param product_code: Product code for requested service and specials : 3-letter eg: YNZ (required)
        :type product_code: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cargo_get_route_from_date_product_code_by_origin_and_destination_get_serialize(
            origin=origin,
            destination=destination,
            from_date=from_date,
            product_code=product_code,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _cargo_get_route_from_date_product_code_by_origin_and_destination_get_serialize(
        self,
        origin,
        destination,
        from_date,
        product_code,
        accept,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if origin is not None:
            _path_params['origin'] = origin
        if destination is not None:
            _path_params['destination'] = destination
        if from_date is not None:
            _path_params['fromDate'] = from_date
        if product_code is not None:
            _path_params['productCode'] = product_code
        # process the query parameters
        # process the header parameters
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/cargo/getRoute/{origin}-{destination}/{fromDate}/{productCode}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def cargo_shipment_tracking_by_awb_prefix_and_awb_number_get(
        self,
        a_wb_prefix: Annotated[StrictStr, Field(description="aWBPrefix : Represents the airline that is the owner of this AWB, i.e. \"020\" = Lufthansa Cargo, format : [0-9]{3} e.g. 020")],
        a_wb_number: Annotated[StrictStr, Field(description="aWBNumber : The Air Waybill Number , format : [0-9]{8} e.g. 08002050")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Shipment Tracking

        With this tracking service you can easily retrieve your shipment or flight status information.

        :param a_wb_prefix: aWBPrefix : Represents the airline that is the owner of this AWB, i.e. \"020\" = Lufthansa Cargo, format : [0-9]{3} e.g. 020 (required)
        :type a_wb_prefix: str
        :param a_wb_number: aWBNumber : The Air Waybill Number , format : [0-9]{8} e.g. 08002050 (required)
        :type a_wb_number: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cargo_shipment_tracking_by_awb_prefix_and_awb_number_get_serialize(
            a_wb_prefix=a_wb_prefix,
            a_wb_number=a_wb_number,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def cargo_shipment_tracking_by_awb_prefix_and_awb_number_get_with_http_info(
        self,
        a_wb_prefix: Annotated[StrictStr, Field(description="aWBPrefix : Represents the airline that is the owner of this AWB, i.e. \"020\" = Lufthansa Cargo, format : [0-9]{3} e.g. 020")],
        a_wb_number: Annotated[StrictStr, Field(description="aWBNumber : The Air Waybill Number , format : [0-9]{8} e.g. 08002050")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Shipment Tracking

        With this tracking service you can easily retrieve your shipment or flight status information.

        :param a_wb_prefix: aWBPrefix : Represents the airline that is the owner of this AWB, i.e. \"020\" = Lufthansa Cargo, format : [0-9]{3} e.g. 020 (required)
        :type a_wb_prefix: str
        :param a_wb_number: aWBNumber : The Air Waybill Number , format : [0-9]{8} e.g. 08002050 (required)
        :type a_wb_number: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cargo_shipment_tracking_by_awb_prefix_and_awb_number_get_serialize(
            a_wb_prefix=a_wb_prefix,
            a_wb_number=a_wb_number,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def cargo_shipment_tracking_by_awb_prefix_and_awb_number_get_without_preload_content(
        self,
        a_wb_prefix: Annotated[StrictStr, Field(description="aWBPrefix : Represents the airline that is the owner of this AWB, i.e. \"020\" = Lufthansa Cargo, format : [0-9]{3} e.g. 020")],
        a_wb_number: Annotated[StrictStr, Field(description="aWBNumber : The Air Waybill Number , format : [0-9]{8} e.g. 08002050")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Shipment Tracking

        With this tracking service you can easily retrieve your shipment or flight status information.

        :param a_wb_prefix: aWBPrefix : Represents the airline that is the owner of this AWB, i.e. \"020\" = Lufthansa Cargo, format : [0-9]{3} e.g. 020 (required)
        :type a_wb_prefix: str
        :param a_wb_number: aWBNumber : The Air Waybill Number , format : [0-9]{8} e.g. 08002050 (required)
        :type a_wb_number: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cargo_shipment_tracking_by_awb_prefix_and_awb_number_get_serialize(
            a_wb_prefix=a_wb_prefix,
            a_wb_number=a_wb_number,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _cargo_shipment_tracking_by_awb_prefix_and_awb_number_get_serialize(
        self,
        a_wb_prefix,
        a_wb_number,
        accept,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if a_wb_prefix is not None:
            _path_params['aWBPrefix'] = a_wb_prefix
        if a_wb_number is not None:
            _path_params['aWBNumber'] = a_wb_number
        # process the query parameters
        # process the header parameters
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/cargo/shipmentTracking/{aWBPrefix}-{aWBNumber}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



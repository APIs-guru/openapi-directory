# coding: utf-8

"""
    LH Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr
from typing import Any, Dict, Optional
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class OperationsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def operations_flightstatus_arrivals_by_airport_code_and_from_date_time_get(
        self,
        airport_code: Annotated[StrictStr, Field(description="3-letter IATA aiport code (e.g. 'ZRH')")],
        from_date_time: Annotated[StrictStr, Field(description="Start of time range in local time of arrival airport (YYYY-MM-DDTHH:mm)")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Flight Status at Arrival Airport

        Status of all arrivals at a given airport up to 4 hours from the provided date time.

        :param airport_code: 3-letter IATA aiport code (e.g. 'ZRH') (required)
        :type airport_code: str
        :param from_date_time: Start of time range in local time of arrival airport (YYYY-MM-DDTHH:mm) (required)
        :type from_date_time: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_flightstatus_arrivals_by_airport_code_and_from_date_time_get_serialize(
            airport_code=airport_code,
            from_date_time=from_date_time,
            accept=accept,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def operations_flightstatus_arrivals_by_airport_code_and_from_date_time_get_with_http_info(
        self,
        airport_code: Annotated[StrictStr, Field(description="3-letter IATA aiport code (e.g. 'ZRH')")],
        from_date_time: Annotated[StrictStr, Field(description="Start of time range in local time of arrival airport (YYYY-MM-DDTHH:mm)")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Flight Status at Arrival Airport

        Status of all arrivals at a given airport up to 4 hours from the provided date time.

        :param airport_code: 3-letter IATA aiport code (e.g. 'ZRH') (required)
        :type airport_code: str
        :param from_date_time: Start of time range in local time of arrival airport (YYYY-MM-DDTHH:mm) (required)
        :type from_date_time: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_flightstatus_arrivals_by_airport_code_and_from_date_time_get_serialize(
            airport_code=airport_code,
            from_date_time=from_date_time,
            accept=accept,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def operations_flightstatus_arrivals_by_airport_code_and_from_date_time_get_without_preload_content(
        self,
        airport_code: Annotated[StrictStr, Field(description="3-letter IATA aiport code (e.g. 'ZRH')")],
        from_date_time: Annotated[StrictStr, Field(description="Start of time range in local time of arrival airport (YYYY-MM-DDTHH:mm)")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Flight Status at Arrival Airport

        Status of all arrivals at a given airport up to 4 hours from the provided date time.

        :param airport_code: 3-letter IATA aiport code (e.g. 'ZRH') (required)
        :type airport_code: str
        :param from_date_time: Start of time range in local time of arrival airport (YYYY-MM-DDTHH:mm) (required)
        :type from_date_time: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_flightstatus_arrivals_by_airport_code_and_from_date_time_get_serialize(
            airport_code=airport_code,
            from_date_time=from_date_time,
            accept=accept,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _operations_flightstatus_arrivals_by_airport_code_and_from_date_time_get_serialize(
        self,
        airport_code,
        from_date_time,
        accept,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if airport_code is not None:
            _path_params['airportCode'] = airport_code
        if from_date_time is not None:
            _path_params['fromDateTime'] = from_date_time
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/operations/flightstatus/arrivals/{airportCode}/{fromDateTime}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def operations_flightstatus_by_flight_number_and_date_get(
        self,
        flight_number: Annotated[StrictStr, Field(description="Flight number including carrier code and any suffix (e.g. 'LH400')")],
        var_date: Annotated[StrictStr, Field(description="The departure date (YYYY-MM-DD) in the local time of the departure airport")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Flight Status

        Status of a particular flight (boarding, delayed, etc.).

        :param flight_number: Flight number including carrier code and any suffix (e.g. 'LH400') (required)
        :type flight_number: str
        :param var_date: The departure date (YYYY-MM-DD) in the local time of the departure airport (required)
        :type var_date: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_flightstatus_by_flight_number_and_date_get_serialize(
            flight_number=flight_number,
            var_date=var_date,
            accept=accept,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def operations_flightstatus_by_flight_number_and_date_get_with_http_info(
        self,
        flight_number: Annotated[StrictStr, Field(description="Flight number including carrier code and any suffix (e.g. 'LH400')")],
        var_date: Annotated[StrictStr, Field(description="The departure date (YYYY-MM-DD) in the local time of the departure airport")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Flight Status

        Status of a particular flight (boarding, delayed, etc.).

        :param flight_number: Flight number including carrier code and any suffix (e.g. 'LH400') (required)
        :type flight_number: str
        :param var_date: The departure date (YYYY-MM-DD) in the local time of the departure airport (required)
        :type var_date: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_flightstatus_by_flight_number_and_date_get_serialize(
            flight_number=flight_number,
            var_date=var_date,
            accept=accept,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def operations_flightstatus_by_flight_number_and_date_get_without_preload_content(
        self,
        flight_number: Annotated[StrictStr, Field(description="Flight number including carrier code and any suffix (e.g. 'LH400')")],
        var_date: Annotated[StrictStr, Field(description="The departure date (YYYY-MM-DD) in the local time of the departure airport")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Flight Status

        Status of a particular flight (boarding, delayed, etc.).

        :param flight_number: Flight number including carrier code and any suffix (e.g. 'LH400') (required)
        :type flight_number: str
        :param var_date: The departure date (YYYY-MM-DD) in the local time of the departure airport (required)
        :type var_date: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_flightstatus_by_flight_number_and_date_get_serialize(
            flight_number=flight_number,
            var_date=var_date,
            accept=accept,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _operations_flightstatus_by_flight_number_and_date_get_serialize(
        self,
        flight_number,
        var_date,
        accept,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if flight_number is not None:
            _path_params['flightNumber'] = flight_number
        if var_date is not None:
            _path_params['date'] = var_date
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/operations/flightstatus/{flightNumber}/{date}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def operations_flightstatus_departures_by_airport_code_and_from_date_time_get(
        self,
        airport_code: Annotated[StrictStr, Field(description="Departure airport. 3-letter IATA airport code (e.g. 'HAM')")],
        from_date_time: Annotated[StrictStr, Field(description="Start of time range in local time of departure airport (YYYY-MM-DDTHH:mm)")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Flight Status at Departure Airport

        Status of all departures from a given airport up to 4 hours from the provided date time.

        :param airport_code: Departure airport. 3-letter IATA airport code (e.g. 'HAM') (required)
        :type airport_code: str
        :param from_date_time: Start of time range in local time of departure airport (YYYY-MM-DDTHH:mm) (required)
        :type from_date_time: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_flightstatus_departures_by_airport_code_and_from_date_time_get_serialize(
            airport_code=airport_code,
            from_date_time=from_date_time,
            accept=accept,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def operations_flightstatus_departures_by_airport_code_and_from_date_time_get_with_http_info(
        self,
        airport_code: Annotated[StrictStr, Field(description="Departure airport. 3-letter IATA airport code (e.g. 'HAM')")],
        from_date_time: Annotated[StrictStr, Field(description="Start of time range in local time of departure airport (YYYY-MM-DDTHH:mm)")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Flight Status at Departure Airport

        Status of all departures from a given airport up to 4 hours from the provided date time.

        :param airport_code: Departure airport. 3-letter IATA airport code (e.g. 'HAM') (required)
        :type airport_code: str
        :param from_date_time: Start of time range in local time of departure airport (YYYY-MM-DDTHH:mm) (required)
        :type from_date_time: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_flightstatus_departures_by_airport_code_and_from_date_time_get_serialize(
            airport_code=airport_code,
            from_date_time=from_date_time,
            accept=accept,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def operations_flightstatus_departures_by_airport_code_and_from_date_time_get_without_preload_content(
        self,
        airport_code: Annotated[StrictStr, Field(description="Departure airport. 3-letter IATA airport code (e.g. 'HAM')")],
        from_date_time: Annotated[StrictStr, Field(description="Start of time range in local time of departure airport (YYYY-MM-DDTHH:mm)")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Flight Status at Departure Airport

        Status of all departures from a given airport up to 4 hours from the provided date time.

        :param airport_code: Departure airport. 3-letter IATA airport code (e.g. 'HAM') (required)
        :type airport_code: str
        :param from_date_time: Start of time range in local time of departure airport (YYYY-MM-DDTHH:mm) (required)
        :type from_date_time: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_flightstatus_departures_by_airport_code_and_from_date_time_get_serialize(
            airport_code=airport_code,
            from_date_time=from_date_time,
            accept=accept,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _operations_flightstatus_departures_by_airport_code_and_from_date_time_get_serialize(
        self,
        airport_code,
        from_date_time,
        accept,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if airport_code is not None:
            _path_params['airportCode'] = airport_code
        if from_date_time is not None:
            _path_params['fromDateTime'] = from_date_time
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/operations/flightstatus/departures/{airportCode}/{fromDateTime}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def operations_flightstatus_route_date_by_origin_and_destination_get(
        self,
        origin: Annotated[StrictStr, Field(description="3-letter IATA airport (e.g. 'FRA')")],
        destination: Annotated[StrictStr, Field(description="3-letter IATA airport code (e.g. 'JFK')")],
        var_date: Annotated[StrictStr, Field(description="Departure date (YYYY-MM-DD) in local time of departure airport")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Flight Status by Route

        Status of flights between a given origin and destination on a given date.

        :param origin: 3-letter IATA airport (e.g. 'FRA') (required)
        :type origin: str
        :param destination: 3-letter IATA airport code (e.g. 'JFK') (required)
        :type destination: str
        :param var_date: Departure date (YYYY-MM-DD) in local time of departure airport (required)
        :type var_date: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_flightstatus_route_date_by_origin_and_destination_get_serialize(
            origin=origin,
            destination=destination,
            var_date=var_date,
            accept=accept,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def operations_flightstatus_route_date_by_origin_and_destination_get_with_http_info(
        self,
        origin: Annotated[StrictStr, Field(description="3-letter IATA airport (e.g. 'FRA')")],
        destination: Annotated[StrictStr, Field(description="3-letter IATA airport code (e.g. 'JFK')")],
        var_date: Annotated[StrictStr, Field(description="Departure date (YYYY-MM-DD) in local time of departure airport")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Flight Status by Route

        Status of flights between a given origin and destination on a given date.

        :param origin: 3-letter IATA airport (e.g. 'FRA') (required)
        :type origin: str
        :param destination: 3-letter IATA airport code (e.g. 'JFK') (required)
        :type destination: str
        :param var_date: Departure date (YYYY-MM-DD) in local time of departure airport (required)
        :type var_date: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_flightstatus_route_date_by_origin_and_destination_get_serialize(
            origin=origin,
            destination=destination,
            var_date=var_date,
            accept=accept,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def operations_flightstatus_route_date_by_origin_and_destination_get_without_preload_content(
        self,
        origin: Annotated[StrictStr, Field(description="3-letter IATA airport (e.g. 'FRA')")],
        destination: Annotated[StrictStr, Field(description="3-letter IATA airport code (e.g. 'JFK')")],
        var_date: Annotated[StrictStr, Field(description="Departure date (YYYY-MM-DD) in local time of departure airport")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Flight Status by Route

        Status of flights between a given origin and destination on a given date.

        :param origin: 3-letter IATA airport (e.g. 'FRA') (required)
        :type origin: str
        :param destination: 3-letter IATA airport code (e.g. 'JFK') (required)
        :type destination: str
        :param var_date: Departure date (YYYY-MM-DD) in local time of departure airport (required)
        :type var_date: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_flightstatus_route_date_by_origin_and_destination_get_serialize(
            origin=origin,
            destination=destination,
            var_date=var_date,
            accept=accept,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _operations_flightstatus_route_date_by_origin_and_destination_get_serialize(
        self,
        origin,
        destination,
        var_date,
        accept,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if origin is not None:
            _path_params['origin'] = origin
        if destination is not None:
            _path_params['destination'] = destination
        if var_date is not None:
            _path_params['date'] = var_date
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/operations/flightstatus/route/{origin}/{destination}/{date}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def operations_schedules_from_date_time_by_origin_and_destination_get(
        self,
        origin: Annotated[StrictStr, Field(description="Departure airport. 3-letter IATA airport code (e.g. 'ZRH')")],
        destination: Annotated[StrictStr, Field(description="Destination airport. 3-letter IATA airport code (e.g. 'FRA')")],
        from_date_time: Annotated[StrictStr, Field(description="Local departure date and optionally departure time (YYYY-MM-DD or YYYY-MM-DDTHH:mm). When not provided, time is assumed to be 00:01")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        direct_flights: Annotated[Optional[StrictBool], Field(description="Show only direct flights (false=0, true=1). Default is false")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Flight Schedules

        Scheduled flights between given airports on a given date.

        :param origin: Departure airport. 3-letter IATA airport code (e.g. 'ZRH') (required)
        :type origin: str
        :param destination: Destination airport. 3-letter IATA airport code (e.g. 'FRA') (required)
        :type destination: str
        :param from_date_time: Local departure date and optionally departure time (YYYY-MM-DD or YYYY-MM-DDTHH:mm). When not provided, time is assumed to be 00:01 (required)
        :type from_date_time: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param direct_flights: Show only direct flights (false=0, true=1). Default is false
        :type direct_flights: bool
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_schedules_from_date_time_by_origin_and_destination_get_serialize(
            origin=origin,
            destination=destination,
            from_date_time=from_date_time,
            accept=accept,
            direct_flights=direct_flights,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def operations_schedules_from_date_time_by_origin_and_destination_get_with_http_info(
        self,
        origin: Annotated[StrictStr, Field(description="Departure airport. 3-letter IATA airport code (e.g. 'ZRH')")],
        destination: Annotated[StrictStr, Field(description="Destination airport. 3-letter IATA airport code (e.g. 'FRA')")],
        from_date_time: Annotated[StrictStr, Field(description="Local departure date and optionally departure time (YYYY-MM-DD or YYYY-MM-DDTHH:mm). When not provided, time is assumed to be 00:01")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        direct_flights: Annotated[Optional[StrictBool], Field(description="Show only direct flights (false=0, true=1). Default is false")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Flight Schedules

        Scheduled flights between given airports on a given date.

        :param origin: Departure airport. 3-letter IATA airport code (e.g. 'ZRH') (required)
        :type origin: str
        :param destination: Destination airport. 3-letter IATA airport code (e.g. 'FRA') (required)
        :type destination: str
        :param from_date_time: Local departure date and optionally departure time (YYYY-MM-DD or YYYY-MM-DDTHH:mm). When not provided, time is assumed to be 00:01 (required)
        :type from_date_time: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param direct_flights: Show only direct flights (false=0, true=1). Default is false
        :type direct_flights: bool
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_schedules_from_date_time_by_origin_and_destination_get_serialize(
            origin=origin,
            destination=destination,
            from_date_time=from_date_time,
            accept=accept,
            direct_flights=direct_flights,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def operations_schedules_from_date_time_by_origin_and_destination_get_without_preload_content(
        self,
        origin: Annotated[StrictStr, Field(description="Departure airport. 3-letter IATA airport code (e.g. 'ZRH')")],
        destination: Annotated[StrictStr, Field(description="Destination airport. 3-letter IATA airport code (e.g. 'FRA')")],
        from_date_time: Annotated[StrictStr, Field(description="Local departure date and optionally departure time (YYYY-MM-DD or YYYY-MM-DDTHH:mm). When not provided, time is assumed to be 00:01")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        direct_flights: Annotated[Optional[StrictBool], Field(description="Show only direct flights (false=0, true=1). Default is false")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Flight Schedules

        Scheduled flights between given airports on a given date.

        :param origin: Departure airport. 3-letter IATA airport code (e.g. 'ZRH') (required)
        :type origin: str
        :param destination: Destination airport. 3-letter IATA airport code (e.g. 'FRA') (required)
        :type destination: str
        :param from_date_time: Local departure date and optionally departure time (YYYY-MM-DD or YYYY-MM-DDTHH:mm). When not provided, time is assumed to be 00:01 (required)
        :type from_date_time: str
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param direct_flights: Show only direct flights (false=0, true=1). Default is false
        :type direct_flights: bool
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._operations_schedules_from_date_time_by_origin_and_destination_get_serialize(
            origin=origin,
            destination=destination,
            from_date_time=from_date_time,
            accept=accept,
            direct_flights=direct_flights,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _operations_schedules_from_date_time_by_origin_and_destination_get_serialize(
        self,
        origin,
        destination,
        from_date_time,
        accept,
        direct_flights,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if origin is not None:
            _path_params['origin'] = origin
        if destination is not None:
            _path_params['destination'] = destination
        if from_date_time is not None:
            _path_params['fromDateTime'] = from_date_time
        # process the query parameters
        if direct_flights is not None:
            
            _query_params.append(('directFlights', direct_flights))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/operations/schedules/{origin}/{destination}/{fromDateTime}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    LH Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import Any, Dict, Optional
from typing_extensions import Annotated
from openapi_client.models.airport_response import AirportResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ReferenceDataApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def references_aircraft_by_aircraft_code_get(
        self,
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        aircraft_code: Annotated[StrictStr, Field(description="3-character IATA aircraft code")],
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Aircraft

        List all aircraft types or one specific aircraft type.

        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param aircraft_code: 3-character IATA aircraft code (required)
        :type aircraft_code: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._references_aircraft_by_aircraft_code_get_serialize(
            accept=accept,
            aircraft_code=aircraft_code,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def references_aircraft_by_aircraft_code_get_with_http_info(
        self,
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        aircraft_code: Annotated[StrictStr, Field(description="3-character IATA aircraft code")],
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Aircraft

        List all aircraft types or one specific aircraft type.

        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param aircraft_code: 3-character IATA aircraft code (required)
        :type aircraft_code: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._references_aircraft_by_aircraft_code_get_serialize(
            accept=accept,
            aircraft_code=aircraft_code,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def references_aircraft_by_aircraft_code_get_without_preload_content(
        self,
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        aircraft_code: Annotated[StrictStr, Field(description="3-character IATA aircraft code")],
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Aircraft

        List all aircraft types or one specific aircraft type.

        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param aircraft_code: 3-character IATA aircraft code (required)
        :type aircraft_code: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._references_aircraft_by_aircraft_code_get_serialize(
            accept=accept,
            aircraft_code=aircraft_code,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _references_aircraft_by_aircraft_code_get_serialize(
        self,
        accept,
        aircraft_code,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if aircraft_code is not None:
            _path_params['aircraftCode'] = aircraft_code
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/references/aircraft/{aircraftCode}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def references_airlines_by_airline_code_get(
        self,
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        airline_code: Annotated[StrictStr, Field(description="2-character IATA airline/carrier code")],
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Airlines

        List all airlines or one specific airline.

        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param airline_code: 2-character IATA airline/carrier code (required)
        :type airline_code: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._references_airlines_by_airline_code_get_serialize(
            accept=accept,
            airline_code=airline_code,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def references_airlines_by_airline_code_get_with_http_info(
        self,
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        airline_code: Annotated[StrictStr, Field(description="2-character IATA airline/carrier code")],
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Airlines

        List all airlines or one specific airline.

        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param airline_code: 2-character IATA airline/carrier code (required)
        :type airline_code: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._references_airlines_by_airline_code_get_serialize(
            accept=accept,
            airline_code=airline_code,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def references_airlines_by_airline_code_get_without_preload_content(
        self,
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        airline_code: Annotated[StrictStr, Field(description="2-character IATA airline/carrier code")],
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Airlines

        List all airlines or one specific airline.

        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param airline_code: 2-character IATA airline/carrier code (required)
        :type airline_code: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._references_airlines_by_airline_code_get_serialize(
            accept=accept,
            airline_code=airline_code,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _references_airlines_by_airline_code_get_serialize(
        self,
        accept,
        airline_code,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if airline_code is not None:
            _path_params['airlineCode'] = airline_code
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/references/airlines/{airlineCode}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def references_airports_by_airport_code_get(
        self,
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        airport_code: Annotated[StrictStr, Field(description="3-letter IATA airport code")],
        lang: Annotated[Optional[StrictStr], Field(description="2-letter ISO 3166-1 language code")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        l_hoperated: Annotated[Optional[StrictBool], Field(description="Restrict the results to locations with flights operated by LH (false=0, true=1)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AirportResponse:
        """Airports

        List all airports or one specific airport. All airports response is very large. It is possible to request the response in a specific language.

        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param airport_code: 3-letter IATA airport code (required)
        :type airport_code: str
        :param lang: 2-letter ISO 3166-1 language code
        :type lang: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param l_hoperated: Restrict the results to locations with flights operated by LH (false=0, true=1)
        :type l_hoperated: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._references_airports_by_airport_code_get_serialize(
            accept=accept,
            airport_code=airport_code,
            lang=lang,
            limit=limit,
            offset=offset,
            l_hoperated=l_hoperated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AirportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def references_airports_by_airport_code_get_with_http_info(
        self,
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        airport_code: Annotated[StrictStr, Field(description="3-letter IATA airport code")],
        lang: Annotated[Optional[StrictStr], Field(description="2-letter ISO 3166-1 language code")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        l_hoperated: Annotated[Optional[StrictBool], Field(description="Restrict the results to locations with flights operated by LH (false=0, true=1)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AirportResponse]:
        """Airports

        List all airports or one specific airport. All airports response is very large. It is possible to request the response in a specific language.

        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param airport_code: 3-letter IATA airport code (required)
        :type airport_code: str
        :param lang: 2-letter ISO 3166-1 language code
        :type lang: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param l_hoperated: Restrict the results to locations with flights operated by LH (false=0, true=1)
        :type l_hoperated: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._references_airports_by_airport_code_get_serialize(
            accept=accept,
            airport_code=airport_code,
            lang=lang,
            limit=limit,
            offset=offset,
            l_hoperated=l_hoperated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AirportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def references_airports_by_airport_code_get_without_preload_content(
        self,
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        airport_code: Annotated[StrictStr, Field(description="3-letter IATA airport code")],
        lang: Annotated[Optional[StrictStr], Field(description="2-letter ISO 3166-1 language code")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        l_hoperated: Annotated[Optional[StrictBool], Field(description="Restrict the results to locations with flights operated by LH (false=0, true=1)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Airports

        List all airports or one specific airport. All airports response is very large. It is possible to request the response in a specific language.

        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param airport_code: 3-letter IATA airport code (required)
        :type airport_code: str
        :param lang: 2-letter ISO 3166-1 language code
        :type lang: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param l_hoperated: Restrict the results to locations with flights operated by LH (false=0, true=1)
        :type l_hoperated: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._references_airports_by_airport_code_get_serialize(
            accept=accept,
            airport_code=airport_code,
            lang=lang,
            limit=limit,
            offset=offset,
            l_hoperated=l_hoperated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AirportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _references_airports_by_airport_code_get_serialize(
        self,
        accept,
        airport_code,
        lang,
        limit,
        offset,
        l_hoperated,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if airport_code is not None:
            _path_params['airportCode'] = airport_code
        # process the query parameters
        if lang is not None:
            
            _query_params.append(('lang', lang))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if l_hoperated is not None:
            
            _query_params.append(('LHoperated', l_hoperated))
            
        # process the header parameters
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/references/airports/{airportCode}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def references_airports_nearest_by_latitude_and_longitude_get(
        self,
        latitude: Annotated[StrictInt, Field(description="Latitude in decimal format to at most 3 decimal places")],
        longitude: Annotated[StrictInt, Field(description="Longitude in decimal format to at most 3 decimal places")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        lang: Annotated[Optional[StrictStr], Field(description="2 letter ISO 3166-1 language code")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Nearest Airports

        List the 5 closest airports to the given latitude and longitude, irrespective of the radius of the reference point.

        :param latitude: Latitude in decimal format to at most 3 decimal places (required)
        :type latitude: int
        :param longitude: Longitude in decimal format to at most 3 decimal places (required)
        :type longitude: int
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param lang: 2 letter ISO 3166-1 language code
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._references_airports_nearest_by_latitude_and_longitude_get_serialize(
            latitude=latitude,
            longitude=longitude,
            accept=accept,
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def references_airports_nearest_by_latitude_and_longitude_get_with_http_info(
        self,
        latitude: Annotated[StrictInt, Field(description="Latitude in decimal format to at most 3 decimal places")],
        longitude: Annotated[StrictInt, Field(description="Longitude in decimal format to at most 3 decimal places")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        lang: Annotated[Optional[StrictStr], Field(description="2 letter ISO 3166-1 language code")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Nearest Airports

        List the 5 closest airports to the given latitude and longitude, irrespective of the radius of the reference point.

        :param latitude: Latitude in decimal format to at most 3 decimal places (required)
        :type latitude: int
        :param longitude: Longitude in decimal format to at most 3 decimal places (required)
        :type longitude: int
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param lang: 2 letter ISO 3166-1 language code
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._references_airports_nearest_by_latitude_and_longitude_get_serialize(
            latitude=latitude,
            longitude=longitude,
            accept=accept,
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def references_airports_nearest_by_latitude_and_longitude_get_without_preload_content(
        self,
        latitude: Annotated[StrictInt, Field(description="Latitude in decimal format to at most 3 decimal places")],
        longitude: Annotated[StrictInt, Field(description="Longitude in decimal format to at most 3 decimal places")],
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        lang: Annotated[Optional[StrictStr], Field(description="2 letter ISO 3166-1 language code")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Nearest Airports

        List the 5 closest airports to the given latitude and longitude, irrespective of the radius of the reference point.

        :param latitude: Latitude in decimal format to at most 3 decimal places (required)
        :type latitude: int
        :param longitude: Longitude in decimal format to at most 3 decimal places (required)
        :type longitude: int
        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param lang: 2 letter ISO 3166-1 language code
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._references_airports_nearest_by_latitude_and_longitude_get_serialize(
            latitude=latitude,
            longitude=longitude,
            accept=accept,
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _references_airports_nearest_by_latitude_and_longitude_get_serialize(
        self,
        latitude,
        longitude,
        accept,
        lang,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if latitude is not None:
            _path_params['latitude'] = latitude
        if longitude is not None:
            _path_params['longitude'] = longitude
        # process the query parameters
        if lang is not None:
            
            _query_params.append(('lang', lang))
            
        # process the header parameters
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/references/airports/nearest/{latitude},{longitude}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def references_cities_by_city_code_get(
        self,
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        city_code: Annotated[StrictStr, Field(description="3-letter IATA city code")],
        lang: Annotated[Optional[StrictStr], Field(description="2 letter ISO 3166-1 language code")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Cities

        List all cities or one specific city. It is possible to request the response in a specific language.

        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param city_code: 3-letter IATA city code (required)
        :type city_code: str
        :param lang: 2 letter ISO 3166-1 language code
        :type lang: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._references_cities_by_city_code_get_serialize(
            accept=accept,
            city_code=city_code,
            lang=lang,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def references_cities_by_city_code_get_with_http_info(
        self,
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        city_code: Annotated[StrictStr, Field(description="3-letter IATA city code")],
        lang: Annotated[Optional[StrictStr], Field(description="2 letter ISO 3166-1 language code")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Cities

        List all cities or one specific city. It is possible to request the response in a specific language.

        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param city_code: 3-letter IATA city code (required)
        :type city_code: str
        :param lang: 2 letter ISO 3166-1 language code
        :type lang: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._references_cities_by_city_code_get_serialize(
            accept=accept,
            city_code=city_code,
            lang=lang,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def references_cities_by_city_code_get_without_preload_content(
        self,
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        city_code: Annotated[StrictStr, Field(description="3-letter IATA city code")],
        lang: Annotated[Optional[StrictStr], Field(description="2 letter ISO 3166-1 language code")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Cities

        List all cities or one specific city. It is possible to request the response in a specific language.

        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param city_code: 3-letter IATA city code (required)
        :type city_code: str
        :param lang: 2 letter ISO 3166-1 language code
        :type lang: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._references_cities_by_city_code_get_serialize(
            accept=accept,
            city_code=city_code,
            lang=lang,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _references_cities_by_city_code_get_serialize(
        self,
        accept,
        city_code,
        lang,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if city_code is not None:
            _path_params['cityCode'] = city_code
        # process the query parameters
        if lang is not None:
            
            _query_params.append(('lang', lang))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/references/cities/{cityCode}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def references_countries_by_country_code_get(
        self,
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        country_code: Annotated[StrictStr, Field(description="2-letter ISO 3166-1 country code")],
        lang: Annotated[Optional[StrictStr], Field(description="2 letter ISO 3166-1 language code")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Countries

        List all countries or one specific country. It is possible to request the response in a specific language.

        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param country_code: 2-letter ISO 3166-1 country code (required)
        :type country_code: str
        :param lang: 2 letter ISO 3166-1 language code
        :type lang: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._references_countries_by_country_code_get_serialize(
            accept=accept,
            country_code=country_code,
            lang=lang,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def references_countries_by_country_code_get_with_http_info(
        self,
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        country_code: Annotated[StrictStr, Field(description="2-letter ISO 3166-1 country code")],
        lang: Annotated[Optional[StrictStr], Field(description="2 letter ISO 3166-1 language code")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Countries

        List all countries or one specific country. It is possible to request the response in a specific language.

        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param country_code: 2-letter ISO 3166-1 country code (required)
        :type country_code: str
        :param lang: 2 letter ISO 3166-1 language code
        :type lang: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._references_countries_by_country_code_get_serialize(
            accept=accept,
            country_code=country_code,
            lang=lang,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def references_countries_by_country_code_get_without_preload_content(
        self,
        accept: Annotated[StrictStr, Field(description="http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\")")],
        country_code: Annotated[StrictStr, Field(description="2-letter ISO 3166-1 country code")],
        lang: Annotated[Optional[StrictStr], Field(description="2 letter ISO 3166-1 language code")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Number of records skipped. Defaults to 0")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Countries

        List all countries or one specific country. It is possible to request the response in a specific language.

        :param accept: http header: application/json or application/xml (Acceptable values are: \"application/json\", \"application/xml\") (required)
        :type accept: str
        :param country_code: 2-letter ISO 3166-1 country code (required)
        :type country_code: str
        :param lang: 2 letter ISO 3166-1 language code
        :type lang: str
        :param limit: Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)
        :type limit: str
        :param offset: Number of records skipped. Defaults to 0
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._references_countries_by_country_code_get_serialize(
            accept=accept,
            country_code=country_code,
            lang=lang,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _references_countries_by_country_code_get_serialize(
        self,
        accept,
        country_code,
        lang,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if country_code is not None:
            _path_params['countryCode'] = country_code
        # process the query parameters
        if lang is not None:
            
            _query_params.append(('lang', lang))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/references/countries/{countryCode}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



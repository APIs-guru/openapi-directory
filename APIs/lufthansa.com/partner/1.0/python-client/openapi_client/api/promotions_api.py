# coding: utf-8

"""
    LH Partner API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class PromotionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def price_offers(
        self,
        origin: Annotated[StrictStr, Field(description="Departure city. 3-letter IATA city code")],
        destination: Annotated[StrictStr, Field(description="Destination city. 3-letter IATA city code")],
        departure_date: Annotated[StrictStr, Field(description="Departure date in local time (YYYY-MM-DD)")],
        return_date: Annotated[StrictStr, Field(description="Return date in local time (YYYY-MM-DD)")],
        service: Annotated[Optional[StrictStr], Field(description="Optional parameter.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Price Offers

        Retrieve a best price offer given an origin and destination.

        :param origin: Departure city. 3-letter IATA city code (required)
        :type origin: str
        :param destination: Destination city. 3-letter IATA city code (required)
        :type destination: str
        :param departure_date: Departure date in local time (YYYY-MM-DD) (required)
        :type departure_date: str
        :param return_date: Return date in local time (YYYY-MM-DD) (required)
        :type return_date: str
        :param service: Optional parameter.
        :type service: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._price_offers_serialize(
            origin=origin,
            destination=destination,
            departure_date=departure_date,
            return_date=return_date,
            service=service,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def price_offers_with_http_info(
        self,
        origin: Annotated[StrictStr, Field(description="Departure city. 3-letter IATA city code")],
        destination: Annotated[StrictStr, Field(description="Destination city. 3-letter IATA city code")],
        departure_date: Annotated[StrictStr, Field(description="Departure date in local time (YYYY-MM-DD)")],
        return_date: Annotated[StrictStr, Field(description="Return date in local time (YYYY-MM-DD)")],
        service: Annotated[Optional[StrictStr], Field(description="Optional parameter.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Price Offers

        Retrieve a best price offer given an origin and destination.

        :param origin: Departure city. 3-letter IATA city code (required)
        :type origin: str
        :param destination: Destination city. 3-letter IATA city code (required)
        :type destination: str
        :param departure_date: Departure date in local time (YYYY-MM-DD) (required)
        :type departure_date: str
        :param return_date: Return date in local time (YYYY-MM-DD) (required)
        :type return_date: str
        :param service: Optional parameter.
        :type service: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._price_offers_serialize(
            origin=origin,
            destination=destination,
            departure_date=departure_date,
            return_date=return_date,
            service=service,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def price_offers_without_preload_content(
        self,
        origin: Annotated[StrictStr, Field(description="Departure city. 3-letter IATA city code")],
        destination: Annotated[StrictStr, Field(description="Destination city. 3-letter IATA city code")],
        departure_date: Annotated[StrictStr, Field(description="Departure date in local time (YYYY-MM-DD)")],
        return_date: Annotated[StrictStr, Field(description="Return date in local time (YYYY-MM-DD)")],
        service: Annotated[Optional[StrictStr], Field(description="Optional parameter.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Price Offers

        Retrieve a best price offer given an origin and destination.

        :param origin: Departure city. 3-letter IATA city code (required)
        :type origin: str
        :param destination: Destination city. 3-letter IATA city code (required)
        :type destination: str
        :param departure_date: Departure date in local time (YYYY-MM-DD) (required)
        :type departure_date: str
        :param return_date: Return date in local time (YYYY-MM-DD) (required)
        :type return_date: str
        :param service: Optional parameter.
        :type service: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._price_offers_serialize(
            origin=origin,
            destination=destination,
            departure_date=departure_date,
            return_date=return_date,
            service=service,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _price_offers_serialize(
        self,
        origin,
        destination,
        departure_date,
        return_date,
        service,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if origin is not None:
            _path_params['origin'] = origin
        if destination is not None:
            _path_params['destination'] = destination
        # process the query parameters
        if departure_date is not None:
            
            _query_params.append(('departureDate', departure_date))
            
        if return_date is not None:
            
            _query_params.append(('returnDate', return_date))
            
        if service is not None:
            
            _query_params.append(('service', service))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/promotions/priceoffers/flights/ond/{origin}/{destination}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



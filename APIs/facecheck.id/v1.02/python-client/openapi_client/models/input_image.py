# coding: utf-8

"""
    Facial Recognition Reverse Image Face Search API

    Let your users search the Internet by face! Integrate FaceCheck facial search seamlessly with your app, website or software platform.   FaceCheck's REST API is hassle-free and easy to use. For code examples visit <a href='https://facecheck.id/Face-Search/API'>https://facecheck.id/Face-Search/API</a>

    The version of the OpenAPI document: v1.02
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class InputImage(BaseModel):
    """
    InputImage
    """ # noqa: E501
    var_base64: Optional[StrictStr] = Field(default=None, alias="base64")
    id_pic: Optional[StrictStr] = None
    svg_anim: Optional[StrictStr] = None
    url_source: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["base64", "id_pic", "svg_anim", "url_source"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InputImage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if var_base64 (nullable) is None
        # and model_fields_set contains the field
        if self.var_base64 is None and "var_base64" in self.model_fields_set:
            _dict['base64'] = None

        # set to None if id_pic (nullable) is None
        # and model_fields_set contains the field
        if self.id_pic is None and "id_pic" in self.model_fields_set:
            _dict['id_pic'] = None

        # set to None if svg_anim (nullable) is None
        # and model_fields_set contains the field
        if self.svg_anim is None and "svg_anim" in self.model_fields_set:
            _dict['svg_anim'] = None

        # set to None if url_source (nullable) is None
        # and model_fields_set contains the field
        if self.url_source is None and "url_source" in self.model_fields_set:
            _dict['url_source'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InputImage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "base64": obj.get("base64"),
            "id_pic": obj.get("id_pic"),
            "svg_anim": obj.get("svg_anim"),
            "url_source": obj.get("url_source")
        })
        return _obj



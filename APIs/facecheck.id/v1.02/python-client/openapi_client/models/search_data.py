# coding: utf-8

"""
    Facial Recognition Reverse Image Face Search API

    Let your users search the Internet by face! Integrate FaceCheck facial search seamlessly with your app, website or software platform.   FaceCheck's REST API is hassle-free and easy to use. For code examples visit <a href='https://facecheck.id/Face-Search/API'>https://facecheck.id/Face-Search/API</a>

    The version of the OpenAPI document: v1.02
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SearchData(BaseModel):
    """
    SearchData
    """ # noqa: E501
    demo: Optional[StrictBool] = Field(default=None, description="true = searches only the first 100,000 faces, good for testing/debugging")
    id_captcha: Optional[StrictStr] = Field(default=None, description="captcha is not used")
    id_search: Optional[StrictStr] = None
    status_only: Optional[StrictBool] = Field(default=None, description="true = don't submit a new search")
    with_progress: Optional[StrictBool] = Field(default=None, description="true = return imediately with a progress. False waits until search is finished.")
    __properties: ClassVar[List[str]] = ["demo", "id_captcha", "id_search", "status_only", "with_progress"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if demo (nullable) is None
        # and model_fields_set contains the field
        if self.demo is None and "demo" in self.model_fields_set:
            _dict['demo'] = None

        # set to None if id_captcha (nullable) is None
        # and model_fields_set contains the field
        if self.id_captcha is None and "id_captcha" in self.model_fields_set:
            _dict['id_captcha'] = None

        # set to None if id_search (nullable) is None
        # and model_fields_set contains the field
        if self.id_search is None and "id_search" in self.model_fields_set:
            _dict['id_search'] = None

        # set to None if status_only (nullable) is None
        # and model_fields_set contains the field
        if self.status_only is None and "status_only" in self.model_fields_set:
            _dict['status_only'] = None

        # set to None if with_progress (nullable) is None
        # and model_fields_set contains the field
        if self.with_progress is None and "with_progress" in self.model_fields_set:
            _dict['with_progress'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "demo": obj.get("demo"),
            "id_captcha": obj.get("id_captcha"),
            "id_search": obj.get("id_search"),
            "status_only": obj.get("status_only"),
            "with_progress": obj.get("with_progress")
        })
        return _obj



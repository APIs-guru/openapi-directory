# coding: utf-8

"""
    Facial Recognition Reverse Image Face Search API

    Let your users search the Internet by face! Integrate FaceCheck facial search seamlessly with your app, website or software platform.   FaceCheck's REST API is hassle-free and easy to use. For code examples visit <a href='https://facecheck.id/Face-Search/API'>https://facecheck.id/Face-Search/API</a>

    The version of the OpenAPI document: v1.02
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.input_image import InputImage
from openapi_client.models.search_results import SearchResults
from typing import Optional, Set
from typing_extensions import Self

class BrowserJsonResponse(BaseModel):
    """
    BrowserJsonResponse
    """ # noqa: E501
    code: Optional[StrictStr] = None
    error: Optional[StrictStr] = None
    has_empty_images: Optional[StrictBool] = Field(default=None, alias="hasEmptyImages")
    id_search: Optional[StrictStr] = None
    input: Optional[List[InputImage]] = None
    message: Optional[StrictStr] = None
    output: Optional[SearchResults] = None
    progress: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["code", "error", "hasEmptyImages", "id_search", "input", "message", "output", "progress"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BrowserJsonResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "has_empty_images",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in input (list)
        _items = []
        if self.input:
            for _item_input in self.input:
                if _item_input:
                    _items.append(_item_input.to_dict())
            _dict['input'] = _items
        # override the default output from pydantic by calling `to_dict()` of output
        if self.output:
            _dict['output'] = self.output.to_dict()
        # set to None if code (nullable) is None
        # and model_fields_set contains the field
        if self.code is None and "code" in self.model_fields_set:
            _dict['code'] = None

        # set to None if error (nullable) is None
        # and model_fields_set contains the field
        if self.error is None and "error" in self.model_fields_set:
            _dict['error'] = None

        # set to None if id_search (nullable) is None
        # and model_fields_set contains the field
        if self.id_search is None and "id_search" in self.model_fields_set:
            _dict['id_search'] = None

        # set to None if input (nullable) is None
        # and model_fields_set contains the field
        if self.input is None and "input" in self.model_fields_set:
            _dict['input'] = None

        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        # set to None if progress (nullable) is None
        # and model_fields_set contains the field
        if self.progress is None and "progress" in self.model_fields_set:
            _dict['progress'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BrowserJsonResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "error": obj.get("error"),
            "hasEmptyImages": obj.get("hasEmptyImages"),
            "id_search": obj.get("id_search"),
            "input": [InputImage.from_dict(_item) for _item in obj["input"]] if obj.get("input") is not None else None,
            "message": obj.get("message"),
            "output": SearchResults.from_dict(obj["output"]) if obj.get("output") is not None else None,
            "progress": obj.get("progress")
        })
        return _obj



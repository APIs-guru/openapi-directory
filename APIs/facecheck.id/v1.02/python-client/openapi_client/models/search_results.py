# coding: utf-8

"""
    Facial Recognition Reverse Image Face Search API

    Let your users search the Internet by face! Integrate FaceCheck facial search seamlessly with your app, website or software platform.   FaceCheck's REST API is hassle-free and easy to use. For code examples visit <a href='https://facecheck.id/Face-Search/API'>https://facecheck.id/Face-Search/API</a>

    The version of the OpenAPI document: v1.02
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.search_item import SearchItem
from typing import Optional, Set
from typing_extensions import Self

class SearchResults(BaseModel):
    """
    SearchResults
    """ # noqa: E501
    demo: Optional[StrictBool] = None
    face_per_sec: Optional[StrictInt] = None
    free_ram: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="freeRam")
    images_in_bundle: Optional[StrictInt] = None
    items: Optional[List[SearchItem]] = None
    max_score: Optional[StrictInt] = None
    performance: Optional[StrictStr] = None
    scaned_till_index: Optional[StrictInt] = None
    searched_faces: Optional[StrictInt] = Field(default=None, alias="searchedFaces")
    took_seconds: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="tookSeconds")
    took_seconds_download: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="tookSecondsDownload")
    took_seconds_queue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="tookSecondsQueue")
    __properties: ClassVar[List[str]] = ["demo", "face_per_sec", "freeRam", "images_in_bundle", "items", "max_score", "performance", "scaned_till_index", "searchedFaces", "tookSeconds", "tookSecondsDownload", "tookSecondsQueue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchResults from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "face_per_sec",
            "max_score",
            "performance",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # set to None if demo (nullable) is None
        # and model_fields_set contains the field
        if self.demo is None and "demo" in self.model_fields_set:
            _dict['demo'] = None

        # set to None if face_per_sec (nullable) is None
        # and model_fields_set contains the field
        if self.face_per_sec is None and "face_per_sec" in self.model_fields_set:
            _dict['face_per_sec'] = None

        # set to None if free_ram (nullable) is None
        # and model_fields_set contains the field
        if self.free_ram is None and "free_ram" in self.model_fields_set:
            _dict['freeRam'] = None

        # set to None if items (nullable) is None
        # and model_fields_set contains the field
        if self.items is None and "items" in self.model_fields_set:
            _dict['items'] = None

        # set to None if performance (nullable) is None
        # and model_fields_set contains the field
        if self.performance is None and "performance" in self.model_fields_set:
            _dict['performance'] = None

        # set to None if searched_faces (nullable) is None
        # and model_fields_set contains the field
        if self.searched_faces is None and "searched_faces" in self.model_fields_set:
            _dict['searchedFaces'] = None

        # set to None if took_seconds (nullable) is None
        # and model_fields_set contains the field
        if self.took_seconds is None and "took_seconds" in self.model_fields_set:
            _dict['tookSeconds'] = None

        # set to None if took_seconds_download (nullable) is None
        # and model_fields_set contains the field
        if self.took_seconds_download is None and "took_seconds_download" in self.model_fields_set:
            _dict['tookSecondsDownload'] = None

        # set to None if took_seconds_queue (nullable) is None
        # and model_fields_set contains the field
        if self.took_seconds_queue is None and "took_seconds_queue" in self.model_fields_set:
            _dict['tookSecondsQueue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchResults from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "demo": obj.get("demo"),
            "face_per_sec": obj.get("face_per_sec"),
            "freeRam": obj.get("freeRam"),
            "images_in_bundle": obj.get("images_in_bundle"),
            "items": [SearchItem.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "max_score": obj.get("max_score"),
            "performance": obj.get("performance"),
            "scaned_till_index": obj.get("scaned_till_index"),
            "searchedFaces": obj.get("searchedFaces"),
            "tookSeconds": obj.get("tookSeconds"),
            "tookSecondsDownload": obj.get("tookSecondsDownload"),
            "tookSecondsQueue": obj.get("tookSecondsQueue")
        })
        return _obj



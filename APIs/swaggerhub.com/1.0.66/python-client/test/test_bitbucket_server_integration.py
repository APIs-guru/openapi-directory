# coding: utf-8

"""
    SwaggerHub Registry API

    # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 

    The version of the OpenAPI document: 1.0.66
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.bitbucket_server_integration import BitbucketServerIntegration

class TestBitbucketServerIntegration(unittest.TestCase):
    """BitbucketServerIntegration unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BitbucketServerIntegration:
        """Test BitbucketServerIntegration
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BitbucketServerIntegration`
        """
        model = BitbucketServerIntegration()
        if include_optional:
            return BitbucketServerIntegration(
                enabled = True,
                id = '',
                name = 'Java client',
                branch = 'develop',
                ignored_paths = [],
                managed_paths = [],
                output_file = 'openapi.yaml',
                output_folder = 'sdk/java',
                provided_paths = [*],
                repository = 'petstore',
                sync_method = 'Basic Sync',
                target = 'java',
                config_type = 'BITBUCKET_SERVER',
                host = 'https://bitbucket.example.com',
                owner = 'myOrg',
                password = '',
                username = 'service_user'
            )
        else:
            return BitbucketServerIntegration(
                name = 'Java client',
                branch = 'develop',
                output_folder = 'sdk/java',
                repository = 'petstore',
                sync_method = 'Basic Sync',
                target = 'java',
                config_type = 'BITBUCKET_SERVER',
                host = 'https://bitbucket.example.com',
                owner = 'myOrg',
                username = 'service_user',
        )
        """

    def testBitbucketServerIntegration(self):
        """Test BitbucketServerIntegration"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    SwaggerHub Registry API

    # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 

    The version of the OpenAPI document: 1.0.66
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.collaboration_membership import CollaborationMembership
from openapi_client.models.collaboration_team_membership import CollaborationTeamMembership
from openapi_client.models.organization_owner import OrganizationOwner
from typing import Optional, Set
from typing_extensions import Self

class Collaboration(BaseModel):
    """
    Collaboration
    """ # noqa: E501
    members: Optional[List[CollaborationMembership]] = Field(default=None, description="A list of users who are existing collaborators on this API")
    owner: Optional[StrictStr] = Field(default=None, description="Internal ID of the API owner (organization or user)")
    owner_name: Optional[StrictStr] = Field(default=None, description="The name of the API owner (organization or user)", alias="ownerName")
    owners: Optional[List[OrganizationOwner]] = Field(default=None, description="If the API owner is an organization, this list contains the IDs of the organization owners. If the API owner is a user, an empty array is returned. ")
    pending_members: Optional[List[CollaborationMembership]] = Field(default=None, description="A list of pending collaborators - users who were invited to collaborate on this API but have not accepted the invitation yet", alias="pendingMembers")
    teams: Optional[List[CollaborationTeamMembership]] = Field(default=None, description="A list of teams that collaborate on this API")
    __properties: ClassVar[List[str]] = ["members", "owner", "ownerName", "owners", "pendingMembers", "teams"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Collaboration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "owner",
            "owner_name",
            "owners",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in members (list)
        _items = []
        if self.members:
            for _item_members in self.members:
                if _item_members:
                    _items.append(_item_members.to_dict())
            _dict['members'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in owners (list)
        _items = []
        if self.owners:
            for _item_owners in self.owners:
                if _item_owners:
                    _items.append(_item_owners.to_dict())
            _dict['owners'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pending_members (list)
        _items = []
        if self.pending_members:
            for _item_pending_members in self.pending_members:
                if _item_pending_members:
                    _items.append(_item_pending_members.to_dict())
            _dict['pendingMembers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in teams (list)
        _items = []
        if self.teams:
            for _item_teams in self.teams:
                if _item_teams:
                    _items.append(_item_teams.to_dict())
            _dict['teams'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Collaboration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "members": [CollaborationMembership.from_dict(_item) for _item in obj["members"]] if obj.get("members") is not None else None,
            "owner": obj.get("owner"),
            "ownerName": obj.get("ownerName"),
            "owners": [OrganizationOwner.from_dict(_item) for _item in obj["owners"]] if obj.get("owners") is not None else None,
            "pendingMembers": [CollaborationMembership.from_dict(_item) for _item in obj["pendingMembers"]] if obj.get("pendingMembers") is not None else None,
            "teams": [CollaborationTeamMembership.from_dict(_item) for _item in obj["teams"]] if obj.get("teams") is not None else None
        })
        return _obj



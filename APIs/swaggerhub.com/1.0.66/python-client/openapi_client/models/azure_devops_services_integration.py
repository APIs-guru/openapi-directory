# coding: utf-8

"""
    SwaggerHub Registry API

    # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 

    The version of the OpenAPI document: 1.0.66
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, SecretStr, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AzureDevopsServicesIntegration(BaseModel):
    """
    Configuration details for the Azure DevOps Services integration
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=True, description="Whether the integration is enabled or disabled")
    id: Optional[StrictStr] = Field(default=None, description="ID of the integration")
    name: StrictStr = Field(description="The display name of the integration. Must be unique among all integrations configured for the given API version.")
    branch: StrictStr = Field(description="The branch to synchronize to. If it does not exist in the repository, it will be created based on the default branch. Branch name must not contain whitespace characters. ")
    ignored_paths: Optional[List[StrictStr]] = Field(default=None, description="Ignored Paths: These files and folders (if exist) will remain as is and will not be changed in any way. Paths are relative to the `outputFolder`. Use forward slashes `/` as folder separators, but do not add `/` at the beginning of the paths. ", alias="ignoredPaths")
    managed_paths: Optional[List[StrictStr]] = Field(default=None, description="Fully Managed Paths: These files and folders will be completely managed by the integration. New files will be added, the existing files will be overwritten, and the files that are no longer used will be deleted.  Paths are relative to the `outputFolder`. Use forward slashes `/` as folder separators, but do not add `/` at the beginning of the paths. `*` means all files in the `outputFolder`. ", alias="managedPaths")
    output_file: Optional[StrictStr] = Field(default=None, description="Required if `target` is \"YAML (Resolved)\", \"YAML (Unresolved)\", \"JSON (Resolved)\", or \"JSON (Unresolved)\". Specifies the file name for the generated definition.", alias="outputFile")
    output_folder: StrictStr = Field(description="The output folder for the generated code or definition, relative to the repository root. If this folder does not exist, it will be created. If the output folder is not specified, SwaggerHub will create files and folders in the repository root. Use forward slashes `/` as path separators, but do not add `/` at the beginning. ", alias="outputFolder")
    provided_paths: Optional[List[StrictStr]] = Field(default=None, description="Partially Managed Paths: These files and folders will be created only if they do not exist. Existing files will not be modified. Paths are relative to the `outputFolder`. Use forward slashes `/` as folder separators, but do not add `/` at the beginning of the paths. `*` means all files in the `outputFolder`. ", alias="providedPaths")
    repository: StrictStr = Field(description="The repository to synchronize with")
    sync_method: StrictStr = Field(description="\"Basic Sync\" or \"Advanced Sync\". Basic Sync will manage all files and folders in the branch. Advanced Sync allows you to define which files and folders will be managed by SwaggerHub. Note: If \"Advanced Sync\" is used, you must specify either `providedPaths` or `managedPaths`. ", alias="syncMethod")
    target: StrictStr = Field(description="The type of code to generate and push to the repository. For the possible values, start creating any source control integration manually and check the \"Generated API Code\" values. Note that the available codegens for OAS2 and OAS3 vary. ")
    config_type: StrictStr = Field(description="Integration type", alias="configType")
    organization: StrictStr = Field(description="The Azure DevOps organization that contains the target repository")
    personal_access_token: Optional[SecretStr] = Field(default=None, description="A [personal access token](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops&tabs=preview-page#create-a-pat) for accessing the target repository. The token must have the _Code > Read & write_ scope. Write-only property. Required to create and update the integration. ", alias="personalAccessToken")
    project: StrictStr = Field(description="Team Project which contains the target repository")
    __properties: ClassVar[List[str]] = ["enabled", "id", "name", "branch", "ignoredPaths", "managedPaths", "outputFile", "outputFolder", "providedPaths", "repository", "syncMethod", "target", "configType", "organization", "personalAccessToken", "project"]

    @field_validator('sync_method')
    def sync_method_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Basic Sync', 'Advanced Sync']):
            raise ValueError("must be one of enum values ('Basic Sync', 'Advanced Sync')")
        return value

    @field_validator('config_type')
    def config_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['AZURE_DEVOPS_SERVICES']):
            raise ValueError("must be one of enum values ('AZURE_DEVOPS_SERVICES')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AzureDevopsServicesIntegration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AzureDevopsServicesIntegration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else True,
            "id": obj.get("id"),
            "name": obj.get("name"),
            "branch": obj.get("branch"),
            "ignoredPaths": obj.get("ignoredPaths"),
            "managedPaths": obj.get("managedPaths"),
            "outputFile": obj.get("outputFile"),
            "outputFolder": obj.get("outputFolder"),
            "providedPaths": obj.get("providedPaths"),
            "repository": obj.get("repository"),
            "syncMethod": obj.get("syncMethod"),
            "target": obj.get("target"),
            "configType": obj.get("configType"),
            "organization": obj.get("organization"),
            "personalAccessToken": obj.get("personalAccessToken"),
            "project": obj.get("project")
        })
        return _obj



# coding: utf-8

"""
    SwaggerHub Registry API

    # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 

    The version of the OpenAPI document: 1.0.66
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WebhookIntegration(BaseModel):
    """
    Configuration details for [webhooks](https://support.smartbear.com/swaggerhub/docs/integrations/webhook.html)
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=True, description="Whether the integration is enabled or disabled")
    id: Optional[StrictStr] = Field(default=None, description="ID of the integration")
    name: StrictStr = Field(description="The display name of the integration. Must be unique among all integrations configured for the given API version.")
    additional_headers: Optional[List[StrictStr]] = Field(default=None, description="Custom HTTP headers to be sent with the webhook. Use the \"name: value\" format for each header.", alias="additionalHeaders")
    config_type: StrictStr = Field(description="Integration type", alias="configType")
    content_type: StrictStr = Field(description="Webhook content type", alias="contentType")
    life_cycle_events: Optional[List[StrictStr]] = Field(default=None, description="Events that will trigger the webhook", alias="lifeCycleEvents")
    url: StrictStr = Field(description="The URL to send the webhook to")
    __properties: ClassVar[List[str]] = ["enabled", "id", "name", "additionalHeaders", "configType", "contentType", "lifeCycleEvents", "url"]

    @field_validator('config_type')
    def config_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['WEBHOOK']):
            raise ValueError("must be one of enum values ('WEBHOOK')")
        return value

    @field_validator('content_type')
    def content_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['application/json', 'application/x-www-form-urlencoded']):
            raise ValueError("must be one of enum values ('application/json', 'application/x-www-form-urlencoded')")
        return value

    @field_validator('life_cycle_events')
    def life_cycle_events_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['API_SAVED', 'API_PUBLISHED']):
                raise ValueError("each list item must be one of ('API_SAVED', 'API_PUBLISHED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebhookIntegration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebhookIntegration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else True,
            "id": obj.get("id"),
            "name": obj.get("name"),
            "additionalHeaders": obj.get("additionalHeaders"),
            "configType": obj.get("configType"),
            "contentType": obj.get("contentType"),
            "lifeCycleEvents": obj.get("lifeCycleEvents"),
            "url": obj.get("url")
        })
        return _obj



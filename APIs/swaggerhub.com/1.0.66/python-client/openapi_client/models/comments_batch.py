# coding: utf-8

"""
    SwaggerHub Registry API

    # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 

    The version of the OpenAPI document: 1.0.66
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.closable_comment_patch import ClosableCommentPatch
from openapi_client.models.comment_patch import CommentPatch
from openapi_client.models.new_comment import NewComment
from openapi_client.models.new_reply import NewReply
from typing import Optional, Set
from typing_extensions import Self

class CommentsBatch(BaseModel):
    """
    CommentsBatch
    """ # noqa: E501
    add_comment: Optional[List[NewComment]] = Field(default=None, alias="addComment")
    add_reply: Optional[Dict[str, List[NewReply]]] = Field(default=None, alias="addReply")
    delete_comment: Optional[List[StrictStr]] = Field(default=None, alias="deleteComment")
    delete_reply: Optional[Dict[str, List[StrictStr]]] = Field(default=None, alias="deleteReply")
    update_comment: Optional[Dict[str, ClosableCommentPatch]] = Field(default=None, alias="updateComment")
    update_reply: Optional[Dict[str, Dict[str, CommentPatch]]] = Field(default=None, alias="updateReply")
    update_status: Optional[Dict[str, StrictStr]] = Field(default=None, alias="updateStatus")
    __properties: ClassVar[List[str]] = ["addComment", "addReply", "deleteComment", "deleteReply", "updateComment", "updateReply", "updateStatus"]

    @field_validator('update_status')
    def update_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OPEN', 'RESOLVED']):
            raise ValueError("must be one of enum values ('OPEN', 'RESOLVED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommentsBatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in add_comment (list)
        _items = []
        if self.add_comment:
            for _item_add_comment in self.add_comment:
                if _item_add_comment:
                    _items.append(_item_add_comment.to_dict())
            _dict['addComment'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in add_reply (dict of array)
        _field_dict_of_array = {}
        if self.add_reply:
            for _key_add_reply in self.add_reply:
                if self.add_reply[_key_add_reply] is not None:
                    _field_dict_of_array[_key_add_reply] = [
                        _item.to_dict() for _item in self.add_reply[_key_add_reply]
                    ]
            _dict['addReply'] = _field_dict_of_array
        # override the default output from pydantic by calling `to_dict()` of each value in update_comment (dict)
        _field_dict = {}
        if self.update_comment:
            for _key_update_comment in self.update_comment:
                if self.update_comment[_key_update_comment]:
                    _field_dict[_key_update_comment] = self.update_comment[_key_update_comment].to_dict()
            _dict['updateComment'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in update_reply (dict)
        _field_dict = {}
        if self.update_reply:
            for _key_update_reply in self.update_reply:
                if self.update_reply[_key_update_reply]:
                    _field_dict[_key_update_reply] = self.update_reply[_key_update_reply].to_dict()
            _dict['updateReply'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommentsBatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addComment": [NewComment.from_dict(_item) for _item in obj["addComment"]] if obj.get("addComment") is not None else None,
            "addReply": dict(
                (_k,
                        [NewReply.from_dict(_item) for _item in _v]
                        if _v is not None
                        else None
                )
                for _k, _v in obj.get("addReply", {}).items()
            ),
            "deleteComment": obj.get("deleteComment"),
            "deleteReply": obj.get("deleteReply"),
            "updateComment": dict(
                (_k, ClosableCommentPatch.from_dict(_v))
                for _k, _v in obj["updateComment"].items()
            )
            if obj.get("updateComment") is not None
            else None,
            "updateReply": dict(
                (_k, dict(
                    (_ik, CommentPatch.from_dict(_iv))
                        for _ik, _iv in _v.items()
                    )
                    if _v is not None
                    else None
                )
                for _k, _v in obj.get("updateReply").items()
            )
            if obj.get("updateReply") is not None
            else None,
            "updateStatus": obj.get("updateStatus")
        })
        return _obj



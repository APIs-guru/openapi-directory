# coding: utf-8

"""
    SwaggerHub Registry API

    # Overview Use SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:   * APIs   * Domains   * Integrations   * Projects   * Templates   SwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.  # Base URL Use the following base URL for SwaggerHub SaaS:          http(s)://api.swaggerhub.com  **Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.  Version 1.29.0 or later:      http(s)://SERVER/v1/openapi.yaml - YAML version     http(s)://SERVER/v1/openapi.json - JSON version  Earlier versions:      http(s)://SERVER/v1/swagger.yaml - YAML version     http(s)://SERVER/v1/swagger.json - JSON version  # Authentication Operations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:      Authorization: YOUR_API_KEY  To test API calls from this documentation page, click the **Authorize** button below and paste your API key there.  **Important:** Keep the API key secure and do not store it directly in your code. # Tools In addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:   * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli)   * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)  * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin) 

    The version of the OpenAPI document: 1.0.66
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, SecretStr, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AmazonApiGatewayLambdaIntegration(BaseModel):
    """
    Configuration details for the [Amazon API Gateway Lambda Sync](https://support.smartbear.com/swaggerhub/docs/integrations/amazon-api-gateway-lambda-sync.html) integration
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=True, description="Whether the integration is enabled or disabled")
    id: Optional[StrictStr] = Field(default=None, description="ID of the integration")
    name: StrictStr = Field(description="The display name of the integration. Must be unique among all integrations configured for the given API version.")
    access_key: Optional[SecretStr] = Field(default=None, description="AWS access key. Write-only property. Required to create and update the integration.", alias="accessKey")
    api_id: Optional[StrictStr] = Field(default=None, description="AWS ID of the API to update. Empty value will create a new API in AWS.", alias="apiId")
    base_path_mode: Optional[StrictStr] = Field(default='ignore', description="How to handle the API's `basePath` value. Refer to [AWS documentation](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-import-api-basePath.html) for details.", alias="basePathMode")
    deployment_mode: Optional[StrictStr] = Field(default='on save', description="Should be \"on save\". The value \"never\" means the integration is disabled.", alias="deploymentMode")
    publish_mode: Optional[StrictStr] = Field(default='merge', description="How to update an existing API in AWS", alias="publishMode")
    region: StrictStr = Field(description="AWS region where the API will be published")
    secret_key: Optional[SecretStr] = Field(default=None, description="AWS secret key. Write-only property. Required to create and update the integration.", alias="secretKey")
    update_definition: Optional[StrictBool] = Field(default=False, description="Whether to update the API definition with Amazon-specific extensions and compatibility modifications", alias="updateDefinition")
    config_type: StrictStr = Field(description="Integration type", alias="configType")
    lambda_role: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The default execution role that will be assigned to newly Lambda functions created by SwaggerHub. Must be in the `arn:aws:iam::{ID}:role/{NAME}` format. Can be omitted if all Lambda functions already exist and you are not going to recreate them.", alias="lambdaRole")
    runtime_language: Optional[StrictStr] = Field(default='nodejs12.x', description="The target runtime language for the generated Lambda functions", alias="runtimeLanguage")
    __properties: ClassVar[List[str]] = ["enabled", "id", "name", "accessKey", "apiId", "basePathMode", "deploymentMode", "publishMode", "region", "secretKey", "updateDefinition", "configType", "lambdaRole", "runtimeLanguage"]

    @field_validator('base_path_mode')
    def base_path_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ignore', 'prepend', 'split']):
            raise ValueError("must be one of enum values ('ignore', 'prepend', 'split')")
        return value

    @field_validator('deployment_mode')
    def deployment_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['on save', 'never']):
            raise ValueError("must be one of enum values ('on save', 'never')")
        return value

    @field_validator('publish_mode')
    def publish_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['merge', 'overwrite']):
            raise ValueError("must be one of enum values ('merge', 'overwrite')")
        return value

    @field_validator('region')
    def region_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['us-east-1', 'us-east-2', 'us-west-1', 'us-west-2', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'eu-central-1', 'eu-north-1', 'eu-south-1', 'ap-east-1', 'ap-south-1', 'ap-southeast-1', 'ap-southeast-2', 'ap-northeast-1', 'ap-northeast-2', 'sa-east-1', 'cn-north-1', 'cn-northwest-1', 'ca-central-1', 'me-south-1', 'af-south-1']):
            raise ValueError("must be one of enum values ('us-east-1', 'us-east-2', 'us-west-1', 'us-west-2', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'eu-central-1', 'eu-north-1', 'eu-south-1', 'ap-east-1', 'ap-south-1', 'ap-southeast-1', 'ap-southeast-2', 'ap-northeast-1', 'ap-northeast-2', 'sa-east-1', 'cn-north-1', 'cn-northwest-1', 'ca-central-1', 'me-south-1', 'af-south-1')")
        return value

    @field_validator('config_type')
    def config_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['AMAZON_API_GATEWAY_LAMBDA']):
            raise ValueError("must be one of enum values ('AMAZON_API_GATEWAY_LAMBDA')")
        return value

    @field_validator('lambda_role')
    def lambda_role_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^arn:aws", value):
            raise ValueError(r"must validate the regular expression /^arn:aws/")
        return value

    @field_validator('runtime_language')
    def runtime_language_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['python3.8', 'python3.7', 'python3.6', 'python2.7', 'nodejs12.x', 'nodejs10.x']):
            raise ValueError("must be one of enum values ('python3.8', 'python3.7', 'python3.6', 'python2.7', 'nodejs12.x', 'nodejs10.x')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AmazonApiGatewayLambdaIntegration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AmazonApiGatewayLambdaIntegration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else True,
            "id": obj.get("id"),
            "name": obj.get("name"),
            "accessKey": obj.get("accessKey"),
            "apiId": obj.get("apiId"),
            "basePathMode": obj.get("basePathMode") if obj.get("basePathMode") is not None else 'ignore',
            "deploymentMode": obj.get("deploymentMode") if obj.get("deploymentMode") is not None else 'on save',
            "publishMode": obj.get("publishMode") if obj.get("publishMode") is not None else 'merge',
            "region": obj.get("region"),
            "secretKey": obj.get("secretKey"),
            "updateDefinition": obj.get("updateDefinition") if obj.get("updateDefinition") is not None else False,
            "configType": obj.get("configType"),
            "lambdaRole": obj.get("lambdaRole"),
            "runtimeLanguage": obj.get("runtimeLanguage") if obj.get("runtimeLanguage") is not None else 'nodejs12.x'
        })
        return _obj



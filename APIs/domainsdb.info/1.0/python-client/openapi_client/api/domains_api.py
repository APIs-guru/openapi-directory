# coding: utf-8

"""
    Domains-Index API

    Domains-Index database powered API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.search_results import SearchResults
from openapi_client.models.update_model import UpdateModel

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DomainsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def domains_tld_zone_id_download_get(
        self,
        zone_id: StrictStr,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Request date")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Download Whole Dataset for TLD


        :param zone_id: (required)
        :type zone_id: str
        :param api_key: API key
        :type api_key: str
        :param var_date: Request date
        :type var_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domains_tld_zone_id_download_get_serialize(
            zone_id=zone_id,
            api_key=api_key,
            var_date=var_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def domains_tld_zone_id_download_get_with_http_info(
        self,
        zone_id: StrictStr,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Request date")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Download Whole Dataset for TLD


        :param zone_id: (required)
        :type zone_id: str
        :param api_key: API key
        :type api_key: str
        :param var_date: Request date
        :type var_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domains_tld_zone_id_download_get_serialize(
            zone_id=zone_id,
            api_key=api_key,
            var_date=var_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def domains_tld_zone_id_download_get_without_preload_content(
        self,
        zone_id: StrictStr,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Request date")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Download Whole Dataset for TLD


        :param zone_id: (required)
        :type zone_id: str
        :param api_key: API key
        :type api_key: str
        :param var_date: Request date
        :type var_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domains_tld_zone_id_download_get_serialize(
            zone_id=zone_id,
            api_key=api_key,
            var_date=var_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _domains_tld_zone_id_download_get_serialize(
        self,
        zone_id,
        api_key,
        var_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if zone_id is not None:
            _path_params['zone_id'] = zone_id
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if var_date is not None:
            
            _query_params.append(('date', var_date))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/domains/tld/{zone_id}/download',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def domains_tld_zone_id_search_get(
        self,
        zone_id: StrictStr,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Request date")] = None,
        page: Annotated[Optional[StrictStr], Field(description="Search page to request")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Results per page")] = None,
        domain: Annotated[Optional[StrictStr], Field(description="Domain includes")] = None,
        country: Annotated[Optional[StrictStr], Field(description="Hosting Country")] = None,
        is_dead: Annotated[Optional[StrictBool], Field(description="Dead or Not, default not")] = None,
        a: Annotated[Optional[StrictStr], Field(description="A record includes")] = None,
        ns: Annotated[Optional[StrictStr], Field(description="NS record includes")] = None,
        cname: Annotated[Optional[StrictStr], Field(description="CNAME record includes")] = None,
        mx: Annotated[Optional[StrictStr], Field(description="MX record includes")] = None,
        txt: Annotated[Optional[StrictStr], Field(description="TXT record includes")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchResults:
        """Domains Search for TLD


        :param zone_id: (required)
        :type zone_id: str
        :param api_key: API key
        :type api_key: str
        :param var_date: Request date
        :type var_date: str
        :param page: Search page to request
        :type page: str
        :param limit: Results per page
        :type limit: int
        :param domain: Domain includes
        :type domain: str
        :param country: Hosting Country
        :type country: str
        :param is_dead: Dead or Not, default not
        :type is_dead: bool
        :param a: A record includes
        :type a: str
        :param ns: NS record includes
        :type ns: str
        :param cname: CNAME record includes
        :type cname: str
        :param mx: MX record includes
        :type mx: str
        :param txt: TXT record includes
        :type txt: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domains_tld_zone_id_search_get_serialize(
            zone_id=zone_id,
            api_key=api_key,
            var_date=var_date,
            page=page,
            limit=limit,
            domain=domain,
            country=country,
            is_dead=is_dead,
            a=a,
            ns=ns,
            cname=cname,
            mx=mx,
            txt=txt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResults",
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def domains_tld_zone_id_search_get_with_http_info(
        self,
        zone_id: StrictStr,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Request date")] = None,
        page: Annotated[Optional[StrictStr], Field(description="Search page to request")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Results per page")] = None,
        domain: Annotated[Optional[StrictStr], Field(description="Domain includes")] = None,
        country: Annotated[Optional[StrictStr], Field(description="Hosting Country")] = None,
        is_dead: Annotated[Optional[StrictBool], Field(description="Dead or Not, default not")] = None,
        a: Annotated[Optional[StrictStr], Field(description="A record includes")] = None,
        ns: Annotated[Optional[StrictStr], Field(description="NS record includes")] = None,
        cname: Annotated[Optional[StrictStr], Field(description="CNAME record includes")] = None,
        mx: Annotated[Optional[StrictStr], Field(description="MX record includes")] = None,
        txt: Annotated[Optional[StrictStr], Field(description="TXT record includes")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchResults]:
        """Domains Search for TLD


        :param zone_id: (required)
        :type zone_id: str
        :param api_key: API key
        :type api_key: str
        :param var_date: Request date
        :type var_date: str
        :param page: Search page to request
        :type page: str
        :param limit: Results per page
        :type limit: int
        :param domain: Domain includes
        :type domain: str
        :param country: Hosting Country
        :type country: str
        :param is_dead: Dead or Not, default not
        :type is_dead: bool
        :param a: A record includes
        :type a: str
        :param ns: NS record includes
        :type ns: str
        :param cname: CNAME record includes
        :type cname: str
        :param mx: MX record includes
        :type mx: str
        :param txt: TXT record includes
        :type txt: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domains_tld_zone_id_search_get_serialize(
            zone_id=zone_id,
            api_key=api_key,
            var_date=var_date,
            page=page,
            limit=limit,
            domain=domain,
            country=country,
            is_dead=is_dead,
            a=a,
            ns=ns,
            cname=cname,
            mx=mx,
            txt=txt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResults",
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def domains_tld_zone_id_search_get_without_preload_content(
        self,
        zone_id: StrictStr,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Request date")] = None,
        page: Annotated[Optional[StrictStr], Field(description="Search page to request")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Results per page")] = None,
        domain: Annotated[Optional[StrictStr], Field(description="Domain includes")] = None,
        country: Annotated[Optional[StrictStr], Field(description="Hosting Country")] = None,
        is_dead: Annotated[Optional[StrictBool], Field(description="Dead or Not, default not")] = None,
        a: Annotated[Optional[StrictStr], Field(description="A record includes")] = None,
        ns: Annotated[Optional[StrictStr], Field(description="NS record includes")] = None,
        cname: Annotated[Optional[StrictStr], Field(description="CNAME record includes")] = None,
        mx: Annotated[Optional[StrictStr], Field(description="MX record includes")] = None,
        txt: Annotated[Optional[StrictStr], Field(description="TXT record includes")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Domains Search for TLD


        :param zone_id: (required)
        :type zone_id: str
        :param api_key: API key
        :type api_key: str
        :param var_date: Request date
        :type var_date: str
        :param page: Search page to request
        :type page: str
        :param limit: Results per page
        :type limit: int
        :param domain: Domain includes
        :type domain: str
        :param country: Hosting Country
        :type country: str
        :param is_dead: Dead or Not, default not
        :type is_dead: bool
        :param a: A record includes
        :type a: str
        :param ns: NS record includes
        :type ns: str
        :param cname: CNAME record includes
        :type cname: str
        :param mx: MX record includes
        :type mx: str
        :param txt: TXT record includes
        :type txt: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domains_tld_zone_id_search_get_serialize(
            zone_id=zone_id,
            api_key=api_key,
            var_date=var_date,
            page=page,
            limit=limit,
            domain=domain,
            country=country,
            is_dead=is_dead,
            a=a,
            ns=ns,
            cname=cname,
            mx=mx,
            txt=txt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResults",
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _domains_tld_zone_id_search_get_serialize(
        self,
        zone_id,
        api_key,
        var_date,
        page,
        limit,
        domain,
        country,
        is_dead,
        a,
        ns,
        cname,
        mx,
        txt,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if zone_id is not None:
            _path_params['zone_id'] = zone_id
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if var_date is not None:
            
            _query_params.append(('date', var_date))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if domain is not None:
            
            _query_params.append(('domain', domain))
            
        if country is not None:
            
            _query_params.append(('country', country))
            
        if is_dead is not None:
            
            _query_params.append(('isDead', is_dead))
            
        if a is not None:
            
            _query_params.append(('A', a))
            
        if ns is not None:
            
            _query_params.append(('NS', ns))
            
        if cname is not None:
            
            _query_params.append(('CNAME', cname))
            
        if mx is not None:
            
            _query_params.append(('MX', mx))
            
        if txt is not None:
            
            _query_params.append(('TXT', txt))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/domains/tld/{zone_id}/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def domains_updates_added_download_get(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Request date")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Download added domains, latest if date not specified


        :param api_key: API key
        :type api_key: str
        :param var_date: Request date
        :type var_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domains_updates_added_download_get_serialize(
            api_key=api_key,
            var_date=var_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def domains_updates_added_download_get_with_http_info(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Request date")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Download added domains, latest if date not specified


        :param api_key: API key
        :type api_key: str
        :param var_date: Request date
        :type var_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domains_updates_added_download_get_serialize(
            api_key=api_key,
            var_date=var_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def domains_updates_added_download_get_without_preload_content(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Request date")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Download added domains, latest if date not specified


        :param api_key: API key
        :type api_key: str
        :param var_date: Request date
        :type var_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domains_updates_added_download_get_serialize(
            api_key=api_key,
            var_date=var_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _domains_updates_added_download_get_serialize(
        self,
        api_key,
        var_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if var_date is not None:
            
            _query_params.append(('date', var_date))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/domains/updates/added/download',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def domains_updates_added_get(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Request date")] = None,
        page: Annotated[Optional[StrictStr], Field(description="Search page to request")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Results per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchResults:
        """Get added domains, latest if date not specified


        :param api_key: API key
        :type api_key: str
        :param var_date: Request date
        :type var_date: str
        :param page: Search page to request
        :type page: str
        :param limit: Results per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domains_updates_added_get_serialize(
            api_key=api_key,
            var_date=var_date,
            page=page,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResults",
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def domains_updates_added_get_with_http_info(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Request date")] = None,
        page: Annotated[Optional[StrictStr], Field(description="Search page to request")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Results per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchResults]:
        """Get added domains, latest if date not specified


        :param api_key: API key
        :type api_key: str
        :param var_date: Request date
        :type var_date: str
        :param page: Search page to request
        :type page: str
        :param limit: Results per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domains_updates_added_get_serialize(
            api_key=api_key,
            var_date=var_date,
            page=page,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResults",
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def domains_updates_added_get_without_preload_content(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Request date")] = None,
        page: Annotated[Optional[StrictStr], Field(description="Search page to request")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Results per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get added domains, latest if date not specified


        :param api_key: API key
        :type api_key: str
        :param var_date: Request date
        :type var_date: str
        :param page: Search page to request
        :type page: str
        :param limit: Results per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domains_updates_added_get_serialize(
            api_key=api_key,
            var_date=var_date,
            page=page,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResults",
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _domains_updates_added_get_serialize(
        self,
        api_key,
        var_date,
        page,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if var_date is not None:
            
            _query_params.append(('date', var_date))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/domains/updates/added',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def domains_updates_deleted_download_get(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Request date")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Download deleted domains, latest if date not specified


        :param api_key: API key
        :type api_key: str
        :param var_date: Request date
        :type var_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domains_updates_deleted_download_get_serialize(
            api_key=api_key,
            var_date=var_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def domains_updates_deleted_download_get_with_http_info(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Request date")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Download deleted domains, latest if date not specified


        :param api_key: API key
        :type api_key: str
        :param var_date: Request date
        :type var_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domains_updates_deleted_download_get_serialize(
            api_key=api_key,
            var_date=var_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def domains_updates_deleted_download_get_without_preload_content(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Request date")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Download deleted domains, latest if date not specified


        :param api_key: API key
        :type api_key: str
        :param var_date: Request date
        :type var_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domains_updates_deleted_download_get_serialize(
            api_key=api_key,
            var_date=var_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _domains_updates_deleted_download_get_serialize(
        self,
        api_key,
        var_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if var_date is not None:
            
            _query_params.append(('date', var_date))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/domains/updates/deleted/download',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def domains_updates_deleted_get(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Request date")] = None,
        page: Annotated[Optional[StrictStr], Field(description="Search page to request")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Results per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchResults:
        """Get deleted domains, latest if date not specified


        :param api_key: API key
        :type api_key: str
        :param var_date: Request date
        :type var_date: str
        :param page: Search page to request
        :type page: str
        :param limit: Results per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domains_updates_deleted_get_serialize(
            api_key=api_key,
            var_date=var_date,
            page=page,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResults",
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def domains_updates_deleted_get_with_http_info(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Request date")] = None,
        page: Annotated[Optional[StrictStr], Field(description="Search page to request")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Results per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchResults]:
        """Get deleted domains, latest if date not specified


        :param api_key: API key
        :type api_key: str
        :param var_date: Request date
        :type var_date: str
        :param page: Search page to request
        :type page: str
        :param limit: Results per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domains_updates_deleted_get_serialize(
            api_key=api_key,
            var_date=var_date,
            page=page,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResults",
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def domains_updates_deleted_get_without_preload_content(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Request date")] = None,
        page: Annotated[Optional[StrictStr], Field(description="Search page to request")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Results per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get deleted domains, latest if date not specified


        :param api_key: API key
        :type api_key: str
        :param var_date: Request date
        :type var_date: str
        :param page: Search page to request
        :type page: str
        :param limit: Results per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domains_updates_deleted_get_serialize(
            api_key=api_key,
            var_date=var_date,
            page=page,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResults",
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _domains_updates_deleted_get_serialize(
        self,
        api_key,
        var_date,
        page,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if var_date is not None:
            
            _query_params.append(('date', var_date))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/domains/updates/deleted',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def domains_updates_list_get(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateModel:
        """List of updates


        :param api_key: API key
        :type api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domains_updates_list_get_serialize(
            api_key=api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateModel",
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def domains_updates_list_get_with_http_info(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateModel]:
        """List of updates


        :param api_key: API key
        :type api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domains_updates_list_get_serialize(
            api_key=api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateModel",
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def domains_updates_list_get_without_preload_content(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List of updates


        :param api_key: API key
        :type api_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domains_updates_list_get_serialize(
            api_key=api_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateModel",
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _domains_updates_list_get_serialize(
        self,
        api_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/domains/updates/list',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_search_domain_item(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Request date")] = None,
        page: Annotated[Optional[StrictStr], Field(description="Search page to request")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Results per page")] = None,
        domain: Annotated[Optional[StrictStr], Field(description="Domain includes")] = None,
        zone: Annotated[Optional[StrictStr], Field(description="In Zone")] = None,
        country: Annotated[Optional[StrictStr], Field(description="Hosting Country")] = None,
        is_dead: Annotated[Optional[StrictBool], Field(description="Dead or Not, default not")] = None,
        a: Annotated[Optional[StrictStr], Field(description="A record includes")] = None,
        ns: Annotated[Optional[StrictStr], Field(description="NS record includes")] = None,
        cname: Annotated[Optional[StrictStr], Field(description="CNAME record includes")] = None,
        mx: Annotated[Optional[StrictStr], Field(description="MX record includes")] = None,
        txt: Annotated[Optional[StrictStr], Field(description="TXT record includes")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchResults:
        """Domains Database Search


        :param api_key: API key
        :type api_key: str
        :param var_date: Request date
        :type var_date: str
        :param page: Search page to request
        :type page: str
        :param limit: Results per page
        :type limit: int
        :param domain: Domain includes
        :type domain: str
        :param zone: In Zone
        :type zone: str
        :param country: Hosting Country
        :type country: str
        :param is_dead: Dead or Not, default not
        :type is_dead: bool
        :param a: A record includes
        :type a: str
        :param ns: NS record includes
        :type ns: str
        :param cname: CNAME record includes
        :type cname: str
        :param mx: MX record includes
        :type mx: str
        :param txt: TXT record includes
        :type txt: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_search_domain_item_serialize(
            api_key=api_key,
            var_date=var_date,
            page=page,
            limit=limit,
            domain=domain,
            zone=zone,
            country=country,
            is_dead=is_dead,
            a=a,
            ns=ns,
            cname=cname,
            mx=mx,
            txt=txt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResults",
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_search_domain_item_with_http_info(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Request date")] = None,
        page: Annotated[Optional[StrictStr], Field(description="Search page to request")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Results per page")] = None,
        domain: Annotated[Optional[StrictStr], Field(description="Domain includes")] = None,
        zone: Annotated[Optional[StrictStr], Field(description="In Zone")] = None,
        country: Annotated[Optional[StrictStr], Field(description="Hosting Country")] = None,
        is_dead: Annotated[Optional[StrictBool], Field(description="Dead or Not, default not")] = None,
        a: Annotated[Optional[StrictStr], Field(description="A record includes")] = None,
        ns: Annotated[Optional[StrictStr], Field(description="NS record includes")] = None,
        cname: Annotated[Optional[StrictStr], Field(description="CNAME record includes")] = None,
        mx: Annotated[Optional[StrictStr], Field(description="MX record includes")] = None,
        txt: Annotated[Optional[StrictStr], Field(description="TXT record includes")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchResults]:
        """Domains Database Search


        :param api_key: API key
        :type api_key: str
        :param var_date: Request date
        :type var_date: str
        :param page: Search page to request
        :type page: str
        :param limit: Results per page
        :type limit: int
        :param domain: Domain includes
        :type domain: str
        :param zone: In Zone
        :type zone: str
        :param country: Hosting Country
        :type country: str
        :param is_dead: Dead or Not, default not
        :type is_dead: bool
        :param a: A record includes
        :type a: str
        :param ns: NS record includes
        :type ns: str
        :param cname: CNAME record includes
        :type cname: str
        :param mx: MX record includes
        :type mx: str
        :param txt: TXT record includes
        :type txt: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_search_domain_item_serialize(
            api_key=api_key,
            var_date=var_date,
            page=page,
            limit=limit,
            domain=domain,
            zone=zone,
            country=country,
            is_dead=is_dead,
            a=a,
            ns=ns,
            cname=cname,
            mx=mx,
            txt=txt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResults",
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_search_domain_item_without_preload_content(
        self,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Request date")] = None,
        page: Annotated[Optional[StrictStr], Field(description="Search page to request")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Results per page")] = None,
        domain: Annotated[Optional[StrictStr], Field(description="Domain includes")] = None,
        zone: Annotated[Optional[StrictStr], Field(description="In Zone")] = None,
        country: Annotated[Optional[StrictStr], Field(description="Hosting Country")] = None,
        is_dead: Annotated[Optional[StrictBool], Field(description="Dead or Not, default not")] = None,
        a: Annotated[Optional[StrictStr], Field(description="A record includes")] = None,
        ns: Annotated[Optional[StrictStr], Field(description="NS record includes")] = None,
        cname: Annotated[Optional[StrictStr], Field(description="CNAME record includes")] = None,
        mx: Annotated[Optional[StrictStr], Field(description="MX record includes")] = None,
        txt: Annotated[Optional[StrictStr], Field(description="TXT record includes")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Domains Database Search


        :param api_key: API key
        :type api_key: str
        :param var_date: Request date
        :type var_date: str
        :param page: Search page to request
        :type page: str
        :param limit: Results per page
        :type limit: int
        :param domain: Domain includes
        :type domain: str
        :param zone: In Zone
        :type zone: str
        :param country: Hosting Country
        :type country: str
        :param is_dead: Dead or Not, default not
        :type is_dead: bool
        :param a: A record includes
        :type a: str
        :param ns: NS record includes
        :type ns: str
        :param cname: CNAME record includes
        :type cname: str
        :param mx: MX record includes
        :type mx: str
        :param txt: TXT record includes
        :type txt: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_search_domain_item_serialize(
            api_key=api_key,
            var_date=var_date,
            page=page,
            limit=limit,
            domain=domain,
            zone=zone,
            country=country,
            is_dead=is_dead,
            a=a,
            ns=ns,
            cname=cname,
            mx=mx,
            txt=txt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResults",
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_search_domain_item_serialize(
        self,
        api_key,
        var_date,
        page,
        limit,
        domain,
        zone,
        country,
        is_dead,
        a,
        ns,
        cname,
        mx,
        txt,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if var_date is not None:
            
            _query_params.append(('date', var_date))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if domain is not None:
            
            _query_params.append(('domain', domain))
            
        if zone is not None:
            
            _query_params.append(('zone', zone))
            
        if country is not None:
            
            _query_params.append(('country', country))
            
        if is_dead is not None:
            
            _query_params.append(('isDead', is_dead))
            
        if a is not None:
            
            _query_params.append(('A', a))
            
        if ns is not None:
            
            _query_params.append(('NS', ns))
            
        if cname is not None:
            
            _query_params.append(('CNAME', cname))
            
        if mx is not None:
            
            _query_params.append(('MX', mx))
            
        if txt is not None:
            
            _query_params.append(('TXT', txt))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/domains/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tld_domain_item(
        self,
        zone_id: StrictStr,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Request date")] = None,
        page: Annotated[Optional[StrictStr], Field(description="Search page to request")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Results per page")] = None,
        domain: Annotated[Optional[StrictStr], Field(description="Domain includes")] = None,
        country: Annotated[Optional[StrictStr], Field(description="Hosting Country")] = None,
        is_dead: Annotated[Optional[StrictBool], Field(description="Dead or Not, default not")] = None,
        a: Annotated[Optional[StrictStr], Field(description="A record includes")] = None,
        ns: Annotated[Optional[StrictStr], Field(description="NS record includes")] = None,
        cname: Annotated[Optional[StrictStr], Field(description="CNAME record includes")] = None,
        mx: Annotated[Optional[StrictStr], Field(description="MX record includes")] = None,
        txt: Annotated[Optional[StrictStr], Field(description="TXT record includes")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchResults:
        """Get TLD records


        :param zone_id: (required)
        :type zone_id: str
        :param api_key: API key
        :type api_key: str
        :param var_date: Request date
        :type var_date: str
        :param page: Search page to request
        :type page: str
        :param limit: Results per page
        :type limit: int
        :param domain: Domain includes
        :type domain: str
        :param country: Hosting Country
        :type country: str
        :param is_dead: Dead or Not, default not
        :type is_dead: bool
        :param a: A record includes
        :type a: str
        :param ns: NS record includes
        :type ns: str
        :param cname: CNAME record includes
        :type cname: str
        :param mx: MX record includes
        :type mx: str
        :param txt: TXT record includes
        :type txt: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tld_domain_item_serialize(
            zone_id=zone_id,
            api_key=api_key,
            var_date=var_date,
            page=page,
            limit=limit,
            domain=domain,
            country=country,
            is_dead=is_dead,
            a=a,
            ns=ns,
            cname=cname,
            mx=mx,
            txt=txt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResults",
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tld_domain_item_with_http_info(
        self,
        zone_id: StrictStr,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Request date")] = None,
        page: Annotated[Optional[StrictStr], Field(description="Search page to request")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Results per page")] = None,
        domain: Annotated[Optional[StrictStr], Field(description="Domain includes")] = None,
        country: Annotated[Optional[StrictStr], Field(description="Hosting Country")] = None,
        is_dead: Annotated[Optional[StrictBool], Field(description="Dead or Not, default not")] = None,
        a: Annotated[Optional[StrictStr], Field(description="A record includes")] = None,
        ns: Annotated[Optional[StrictStr], Field(description="NS record includes")] = None,
        cname: Annotated[Optional[StrictStr], Field(description="CNAME record includes")] = None,
        mx: Annotated[Optional[StrictStr], Field(description="MX record includes")] = None,
        txt: Annotated[Optional[StrictStr], Field(description="TXT record includes")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchResults]:
        """Get TLD records


        :param zone_id: (required)
        :type zone_id: str
        :param api_key: API key
        :type api_key: str
        :param var_date: Request date
        :type var_date: str
        :param page: Search page to request
        :type page: str
        :param limit: Results per page
        :type limit: int
        :param domain: Domain includes
        :type domain: str
        :param country: Hosting Country
        :type country: str
        :param is_dead: Dead or Not, default not
        :type is_dead: bool
        :param a: A record includes
        :type a: str
        :param ns: NS record includes
        :type ns: str
        :param cname: CNAME record includes
        :type cname: str
        :param mx: MX record includes
        :type mx: str
        :param txt: TXT record includes
        :type txt: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tld_domain_item_serialize(
            zone_id=zone_id,
            api_key=api_key,
            var_date=var_date,
            page=page,
            limit=limit,
            domain=domain,
            country=country,
            is_dead=is_dead,
            a=a,
            ns=ns,
            cname=cname,
            mx=mx,
            txt=txt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResults",
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tld_domain_item_without_preload_content(
        self,
        zone_id: StrictStr,
        api_key: Annotated[Optional[StrictStr], Field(description="API key")] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="Request date")] = None,
        page: Annotated[Optional[StrictStr], Field(description="Search page to request")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Results per page")] = None,
        domain: Annotated[Optional[StrictStr], Field(description="Domain includes")] = None,
        country: Annotated[Optional[StrictStr], Field(description="Hosting Country")] = None,
        is_dead: Annotated[Optional[StrictBool], Field(description="Dead or Not, default not")] = None,
        a: Annotated[Optional[StrictStr], Field(description="A record includes")] = None,
        ns: Annotated[Optional[StrictStr], Field(description="NS record includes")] = None,
        cname: Annotated[Optional[StrictStr], Field(description="CNAME record includes")] = None,
        mx: Annotated[Optional[StrictStr], Field(description="MX record includes")] = None,
        txt: Annotated[Optional[StrictStr], Field(description="TXT record includes")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get TLD records


        :param zone_id: (required)
        :type zone_id: str
        :param api_key: API key
        :type api_key: str
        :param var_date: Request date
        :type var_date: str
        :param page: Search page to request
        :type page: str
        :param limit: Results per page
        :type limit: int
        :param domain: Domain includes
        :type domain: str
        :param country: Hosting Country
        :type country: str
        :param is_dead: Dead or Not, default not
        :type is_dead: bool
        :param a: A record includes
        :type a: str
        :param ns: NS record includes
        :type ns: str
        :param cname: CNAME record includes
        :type cname: str
        :param mx: MX record includes
        :type mx: str
        :param txt: TXT record includes
        :type txt: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tld_domain_item_serialize(
            zone_id=zone_id,
            api_key=api_key,
            var_date=var_date,
            page=page,
            limit=limit,
            domain=domain,
            country=country,
            is_dead=is_dead,
            a=a,
            ns=ns,
            cname=cname,
            mx=mx,
            txt=txt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResults",
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tld_domain_item_serialize(
        self,
        zone_id,
        api_key,
        var_date,
        page,
        limit,
        domain,
        country,
        is_dead,
        a,
        ns,
        cname,
        mx,
        txt,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if zone_id is not None:
            _path_params['zone_id'] = zone_id
        # process the query parameters
        if api_key is not None:
            
            _query_params.append(('api_key', api_key))
            
        if var_date is not None:
            
            _query_params.append(('date', var_date))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if domain is not None:
            
            _query_params.append(('domain', domain))
            
        if country is not None:
            
            _query_params.append(('country', country))
            
        if is_dead is not None:
            
            _query_params.append(('isDead', is_dead))
            
        if a is not None:
            
            _query_params.append(('A', a))
            
        if ns is not None:
            
            _query_params.append(('NS', ns))
            
        if cname is not None:
            
            _query_params.append(('CNAME', cname))
            
        if mx is not None:
            
            _query_params.append(('MX', mx))
            
        if txt is not None:
            
            _query_params.append(('TXT', txt))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/domains/tld/{zone_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



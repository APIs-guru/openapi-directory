# coding: utf-8

"""
    DaniWeb Connect API

    User Recommendation Engine and Chat Network

    The version of the OpenAPI document: 4
    Contact: dani@daniwebmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.conversation import Conversation
from openapi_client.models.endpoint_get_users_id_synergies_data_inner_additional import EndpointGetUsersIDSynergiesDataInnerAdditional
from openapi_client.models.endpoint_get_users_id_synergies_data_inner_match import EndpointGetUsersIDSynergiesDataInnerMatch
from openapi_client.models.endpoint_get_users_id_synergies_data_inner_meet import EndpointGetUsersIDSynergiesDataInnerMeet
from openapi_client.models.endpoint_get_users_id_synergies_data_inner_relationship import EndpointGetUsersIDSynergiesDataInnerRelationship
from typing import Optional, Set
from typing_extensions import Self

class EndpointGetUsersIDSynergiesDataInner(BaseModel):
    """
    EndpointGetUsersIDSynergiesDataInner
    """ # noqa: E501
    additional: Optional[EndpointGetUsersIDSynergiesDataInnerAdditional] = None
    conversation: Optional[Conversation] = None
    match: Optional[EndpointGetUsersIDSynergiesDataInnerMatch] = None
    meet: Optional[EndpointGetUsersIDSynergiesDataInnerMeet] = None
    relationship: Optional[EndpointGetUsersIDSynergiesDataInnerRelationship] = None
    __properties: ClassVar[List[str]] = ["additional", "conversation", "match", "meet", "relationship"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EndpointGetUsersIDSynergiesDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of additional
        if self.additional:
            _dict['additional'] = self.additional.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conversation
        if self.conversation:
            _dict['conversation'] = self.conversation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of match
        if self.match:
            _dict['match'] = self.match.to_dict()
        # override the default output from pydantic by calling `to_dict()` of meet
        if self.meet:
            _dict['meet'] = self.meet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of relationship
        if self.relationship:
            _dict['relationship'] = self.relationship.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EndpointGetUsersIDSynergiesDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additional": EndpointGetUsersIDSynergiesDataInnerAdditional.from_dict(obj["additional"]) if obj.get("additional") is not None else None,
            "conversation": Conversation.from_dict(obj["conversation"]) if obj.get("conversation") is not None else None,
            "match": EndpointGetUsersIDSynergiesDataInnerMatch.from_dict(obj["match"]) if obj.get("match") is not None else None,
            "meet": EndpointGetUsersIDSynergiesDataInnerMeet.from_dict(obj["meet"]) if obj.get("meet") is not None else None,
            "relationship": EndpointGetUsersIDSynergiesDataInnerRelationship.from_dict(obj["relationship"]) if obj.get("relationship") is not None else None
        })
        return _obj



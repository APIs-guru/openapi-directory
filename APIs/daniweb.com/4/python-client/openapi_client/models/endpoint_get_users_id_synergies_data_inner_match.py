# coding: utf-8

"""
    DaniWeb Connect API

    User Recommendation Engine and Chat Network

    The version of the OpenAPI document: 4
    Contact: dani@daniwebmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.endpoint_get_users_id_synergies_data_inner_match_distance_away import EndpointGetUsersIDSynergiesDataInnerMatchDistanceAway
from openapi_client.models.endpoint_get_users_id_synergies_data_inner_match_industry import EndpointGetUsersIDSynergiesDataInnerMatchIndustry
from openapi_client.models.endpoint_get_users_id_synergies_data_inner_match_mutual_connections import EndpointGetUsersIDSynergiesDataInnerMatchMutualConnections
from typing import Optional, Set
from typing_extensions import Self

class EndpointGetUsersIDSynergiesDataInnerMatch(BaseModel):
    """
    EndpointGetUsersIDSynergiesDataInnerMatch
    """ # noqa: E501
    algorithmic_match: Optional[StrictBool] = None
    complementary_goals: Optional[List[StrictStr]] = None
    distance_away: Optional[EndpointGetUsersIDSynergiesDataInnerMatchDistanceAway] = None
    industry: Optional[EndpointGetUsersIDSynergiesDataInnerMatchIndustry] = None
    mutual_connections: Optional[EndpointGetUsersIDSynergiesDataInnerMatchMutualConnections] = None
    recommendation_strength: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["algorithmic_match", "complementary_goals", "distance_away", "industry", "mutual_connections", "recommendation_strength"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EndpointGetUsersIDSynergiesDataInnerMatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of distance_away
        if self.distance_away:
            _dict['distance_away'] = self.distance_away.to_dict()
        # override the default output from pydantic by calling `to_dict()` of industry
        if self.industry:
            _dict['industry'] = self.industry.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mutual_connections
        if self.mutual_connections:
            _dict['mutual_connections'] = self.mutual_connections.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EndpointGetUsersIDSynergiesDataInnerMatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "algorithmic_match": obj.get("algorithmic_match"),
            "complementary_goals": obj.get("complementary_goals"),
            "distance_away": EndpointGetUsersIDSynergiesDataInnerMatchDistanceAway.from_dict(obj["distance_away"]) if obj.get("distance_away") is not None else None,
            "industry": EndpointGetUsersIDSynergiesDataInnerMatchIndustry.from_dict(obj["industry"]) if obj.get("industry") is not None else None,
            "mutual_connections": EndpointGetUsersIDSynergiesDataInnerMatchMutualConnections.from_dict(obj["mutual_connections"]) if obj.get("mutual_connections") is not None else None,
            "recommendation_strength": obj.get("recommendation_strength")
        })
        return _obj



# coding: utf-8

"""
    DaniWeb Connect API

    User Recommendation Engine and Chat Network

    The version of the OpenAPI document: 4
    Contact: dani@daniwebmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.app import App
from openapi_client.models.group_message_data_content import GroupMessageDataContent
from openapi_client.models.group_message_data_settings import GroupMessageDataSettings
from openapi_client.models.group_message_data_status import GroupMessageDataStatus
from openapi_client.models.message import Message
from openapi_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class MessageData(BaseModel):
    """
    MessageData
    """ # noqa: E501
    app: Optional[App] = None
    content: Optional[GroupMessageDataContent] = None
    id: Union[StrictFloat, StrictInt]
    message: Optional[Message] = None
    owner: Optional[User] = None
    settings: Optional[GroupMessageDataSettings] = None
    status: Optional[GroupMessageDataStatus] = None
    __properties: ClassVar[List[str]] = ["app", "content", "id", "message", "owner", "settings", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessageData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app
        if self.app:
            _dict['app'] = self.app.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of message
        if self.message:
            _dict['message'] = self.message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict['settings'] = self.settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessageData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app": App.from_dict(obj["app"]) if obj.get("app") is not None else None,
            "content": GroupMessageDataContent.from_dict(obj["content"]) if obj.get("content") is not None else None,
            "id": obj.get("id"),
            "message": Message.from_dict(obj["message"]) if obj.get("message") is not None else None,
            "owner": User.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "settings": GroupMessageDataSettings.from_dict(obj["settings"]) if obj.get("settings") is not None else None,
            "status": GroupMessageDataStatus.from_dict(obj["status"]) if obj.get("status") is not None else None
        })
        return _obj



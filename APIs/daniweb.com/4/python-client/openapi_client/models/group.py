# coding: utf-8

"""
    DaniWeb Connect API

    User Recommendation Engine and Chat Network

    The version of the OpenAPI document: 4
    Contact: dani@daniwebmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.group_first_message import GroupFirstMessage
from openapi_client.models.group_properties import GroupProperties
from openapi_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class Group(BaseModel):
    """
    Group
    """ # noqa: E501
    first_message: Optional[GroupFirstMessage] = None
    id: Union[StrictFloat, StrictInt]
    latest_message: Optional[GroupMessage] = None
    member_count: Optional[Union[StrictFloat, StrictInt]] = None
    owner: Optional[User] = None
    properties: Optional[GroupProperties] = None
    __properties: ClassVar[List[str]] = ["first_message", "id", "latest_message", "member_count", "owner", "properties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Group from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of first_message
        if self.first_message:
            _dict['first_message'] = self.first_message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of latest_message
        if self.latest_message:
            _dict['latest_message'] = self.latest_message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            _dict['properties'] = self.properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Group from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "first_message": GroupFirstMessage.from_dict(obj["first_message"]) if obj.get("first_message") is not None else None,
            "id": obj.get("id"),
            "latest_message": GroupMessage.from_dict(obj["latest_message"]) if obj.get("latest_message") is not None else None,
            "member_count": obj.get("member_count"),
            "owner": User.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "properties": GroupProperties.from_dict(obj["properties"]) if obj.get("properties") is not None else None
        })
        return _obj

from openapi_client.models.group_message import GroupMessage
# TODO: Rewrite to not use raise_errors
Group.model_rebuild(raise_errors=False)


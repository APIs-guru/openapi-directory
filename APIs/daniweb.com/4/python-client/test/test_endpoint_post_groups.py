# coding: utf-8

"""
    DaniWeb Connect API

    User Recommendation Engine and Chat Network

    The version of the OpenAPI document: 4
    Contact: dani@daniwebmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.endpoint_post_groups import EndpointPostGroups

class TestEndpointPostGroups(unittest.TestCase):
    """EndpointPostGroups unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EndpointPostGroups:
        """Test EndpointPostGroups
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EndpointPostGroups`
        """
        model = EndpointPostGroups()
        if include_optional:
            return EndpointPostGroups(
                data = openapi_client.models.group.Group(
                    first_message = openapi_client.models.group_first_message.Group_first_message(
                        timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    id = 1.337, 
                    latest_message = openapi_client.models.group_message.Group_message(
                        author = openapi_client.models.user.User(
                            business_card = openapi_client.models.me_business_card.Me_business_card(
                                company_name = '', 
                                company_size = '', 
                                headline = '', 
                                industry = '', 
                                interest_tags = [
                                    ''
                                    ], 
                                job_position = '', 
                                summary = '', 
                                website = openapi_client.models.me_business_card_website.Me_business_card_website(
                                    thumbshot_uri = '', 
                                    url = '', ), ), 
                            community_persona = openapi_client.models.member.Member(
                                id = 1.337, 
                                identity = openapi_client.models.member_identity.Member_identity(
                                    avatar_uri = '', 
                                    badge = '', 
                                    profile_url = '', 
                                    username = '', ), 
                                location = openapi_client.models.member_location.Member_location(
                                    free_form = '', ), 
                                personal = openapi_client.models.member_personal.Member_personal(
                                    about_me = '', 
                                    birthday = '', 
                                    interests = '', 
                                    pc_specs = '', ), 
                                signature = openapi_client.models.endpoint_post_markdown_data.Endpoint_post_markdown_data(
                                    parsed = '', 
                                    raw = '', ), 
                                stats = openapi_client.models.member_stats.Member_stats(
                                    answered_count = 1.337, 
                                    endorsements_count = 1.337, 
                                    posts_count = 1.337, 
                                    reputation_count = 1.337, ), ), 
                            id = 1.337, 
                            profile = openapi_client.models.user_profile.User_profile(
                                first_name = '', 
                                last_name = '', ), 
                            usage = openapi_client.models.me_usage.Me_usage(
                                available_status = True, 
                                joined_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                last_activity_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                online_status = True, ), ), 
                        group = openapi_client.models.group.Group(
                            id = 1.337, 
                            member_count = 1.337, 
                            owner = openapi_client.models.user.User(
                                id = 1.337, ), 
                            properties = openapi_client.models.group_properties.Group_properties(
                                description = '', 
                                name = '', 
                                privacy = '', 
                                slug = '', ), ), 
                        id = 1.337, 
                        last_seen = openapi_client.models.group_message_last_seen.Group_message_last_seen(
                            timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            user = , ), 
                        moderated = openapi_client.models.group_message_moderated.Group_message_moderated(
                            deleted_status = True, ), 
                        text = openapi_client.models.group_message_text.Group_message_text(
                            parsed = '', ), 
                        timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    member_count = 1.337, 
                    owner = , 
                    properties = openapi_client.models.group_properties.Group_properties(
                        description = '', 
                        name = '', 
                        privacy = '', 
                        slug = '', ), ),
                success = True
            )
        else:
            return EndpointPostGroups(
        )
        """

    def testEndpointPostGroups(self):
        """Test EndpointPostGroups"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

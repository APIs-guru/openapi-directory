# coding: utf-8

"""
    DaniWeb Connect API

    User Recommendation Engine and Chat Network

    The version of the OpenAPI document: 4
    Contact: dani@daniwebmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.endpoint_post_positions import EndpointPostPositions

class TestEndpointPostPositions(unittest.TestCase):
    """EndpointPostPositions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EndpointPostPositions:
        """Test EndpointPostPositions
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EndpointPostPositions`
        """
        model = EndpointPostPositions()
        if include_optional:
            return EndpointPostPositions(
                data = openapi_client.models.position.Position(
                    app = openapi_client.models.app.App(
                        about = openapi_client.models.app_about.App_about(
                            description = '', 
                            name = '', 
                            website = openapi_client.models.app_about_website.App_about_website(
                                thumbshot = '', 
                                url = '', ), ), 
                        id = 1.337, 
                        legal = openapi_client.models.app_legal.App_legal(
                            privacy_url = '', 
                            tos_url = '', ), ), 
                    category = '', 
                    id = 1.337, 
                    organization = openapi_client.models.position_organization.Position_organization(
                        industry = '', 
                        name = '', 
                        size = '', 
                        ticker = '', 
                        type = '', 
                        url = '', ), 
                    role = openapi_client.models.position_role.Position_role(
                        end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        summary = '', 
                        title = '', ), 
                    user = openapi_client.models.user.User(
                        business_card = openapi_client.models.me_business_card.Me_business_card(
                            company_name = '', 
                            company_size = '', 
                            headline = '', 
                            industry = '', 
                            interest_tags = [
                                ''
                                ], 
                            job_position = '', 
                            summary = '', ), 
                        community_persona = openapi_client.models.member.Member(
                            id = 1.337, 
                            identity = openapi_client.models.member_identity.Member_identity(
                                avatar_uri = '', 
                                badge = '', 
                                profile_url = '', 
                                username = '', ), 
                            location = openapi_client.models.member_location.Member_location(
                                free_form = '', ), 
                            personal = openapi_client.models.member_personal.Member_personal(
                                about_me = '', 
                                birthday = '', 
                                interests = '', 
                                pc_specs = '', ), 
                            signature = openapi_client.models.endpoint_post_markdown_data.Endpoint_post_markdown_data(
                                parsed = '', 
                                raw = '', ), 
                            stats = openapi_client.models.member_stats.Member_stats(
                                answered_count = 1.337, 
                                endorsements_count = 1.337, 
                                posts_count = 1.337, 
                                reputation_count = 1.337, ), ), 
                        id = 1.337, 
                        profile = openapi_client.models.user_profile.User_profile(
                            first_name = '', 
                            last_name = '', ), 
                        usage = openapi_client.models.me_usage.Me_usage(
                            available_status = True, 
                            joined_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_activity_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            online_status = True, ), ), ),
                success = True
            )
        else:
            return EndpointPostPositions(
        )
        """

    def testEndpointPostPositions(self):
        """Test EndpointPostPositions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

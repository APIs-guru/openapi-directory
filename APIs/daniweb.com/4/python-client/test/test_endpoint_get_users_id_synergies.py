# coding: utf-8

"""
    DaniWeb Connect API

    User Recommendation Engine and Chat Network

    The version of the OpenAPI document: 4
    Contact: dani@daniwebmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.endpoint_get_users_id_synergies import EndpointGetUsersIDSynergies

class TestEndpointGetUsersIDSynergies(unittest.TestCase):
    """EndpointGetUsersIDSynergies unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EndpointGetUsersIDSynergies:
        """Test EndpointGetUsersIDSynergies
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EndpointGetUsersIDSynergies`
        """
        model = EndpointGetUsersIDSynergies()
        if include_optional:
            return EndpointGetUsersIDSynergies(
                data = [
                    openapi_client.models.endpoint_get_users_id_synergies_data_inner.Endpoint_get_users_ID_synergies_data_inner(
                        additional = openapi_client.models.endpoint_get_users_id_synergies_data_inner_additional.Endpoint_get_users_ID_synergies_data_inner_additional(
                            metadata_count = 1.337, 
                            positions_count = 1.337, ), 
                        conversation = openapi_client.models.conversation.Conversation(
                            first_message = openapi_client.models.conversation_first_message.Conversation_first_message(
                                author = openapi_client.models.user.User(
                                    business_card = openapi_client.models.me_business_card.Me_business_card(
                                        company_name = '', 
                                        company_size = '', 
                                        headline = '', 
                                        industry = '', 
                                        interest_tags = [
                                            ''
                                            ], 
                                        job_position = '', 
                                        summary = '', 
                                        website = openapi_client.models.me_business_card_website.Me_business_card_website(
                                            thumbshot_uri = '', 
                                            url = '', ), ), 
                                    community_persona = openapi_client.models.member.Member(
                                        id = 1.337, 
                                        identity = openapi_client.models.member_identity.Member_identity(
                                            avatar_uri = '', 
                                            badge = '', 
                                            profile_url = '', 
                                            username = '', ), 
                                        location = openapi_client.models.member_location.Member_location(
                                            free_form = '', ), 
                                        personal = openapi_client.models.member_personal.Member_personal(
                                            about_me = '', 
                                            birthday = '', 
                                            interests = '', 
                                            pc_specs = '', ), 
                                        signature = openapi_client.models.endpoint_post_markdown_data.Endpoint_post_markdown_data(
                                            parsed = '', 
                                            raw = '', ), 
                                        stats = openapi_client.models.member_stats.Member_stats(
                                            answered_count = 1.337, 
                                            endorsements_count = 1.337, 
                                            posts_count = 1.337, 
                                            reputation_count = 1.337, ), ), 
                                    id = 1.337, 
                                    profile = openapi_client.models.user_profile.User_profile(
                                        first_name = '', 
                                        last_name = '', ), 
                                    usage = openapi_client.models.me_usage.Me_usage(
                                        available_status = True, 
                                        joined_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        last_activity_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        online_status = True, ), ), 
                                timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            id = 1.337, 
                            latest_message = openapi_client.models.message.Message(
                                id = 1.337, 
                                last_seen = openapi_client.models.group_message_last_seen.Group_message_last_seen(
                                    timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    user = openapi_client.models.user.User(
                                        id = 1.337, ), ), 
                                text = openapi_client.models.group_message_text.Group_message_text(
                                    parsed = '', ), 
                                timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            user_a = , 
                            user_b = , ), 
                        match = openapi_client.models.endpoint_get_users_id_synergies_data_inner_match.Endpoint_get_users_ID_synergies_data_inner_match(
                            algorithmic_match = True, 
                            complementary_goals = [
                                ''
                                ], 
                            distance_away = openapi_client.models.endpoint_get_users_id_synergies_data_inner_match_distance_away.Endpoint_get_users_ID_synergies_data_inner_match_distance_away(
                                miles = 1.337, ), 
                            industry = openapi_client.models.endpoint_get_users_id_synergies_data_inner_match_industry.Endpoint_get_users_ID_synergies_data_inner_match_industry(
                                complementary = True, 
                                mutual_match = True, 
                                similar = True, ), 
                            mutual_connections = openapi_client.models.endpoint_get_users_id_synergies_data_inner_match_mutual_connections.Endpoint_get_users_ID_synergies_data_inner_match_mutual_connections(
                                count = 1.337, ), 
                            recommendation_strength = 1.337, ), 
                        meet = openapi_client.models.endpoint_get_users_id_synergies_data_inner_meet.Endpoint_get_users_ID_synergies_data_inner_meet(
                            payment = openapi_client.models.endpoint_get_users_id_synergies_data_inner_meet_payment.Endpoint_get_users_ID_synergies_data_inner_meet_payment(
                                paypal = openapi_client.models.endpoint_get_users_id_synergies_data_inner_meet_payment_paypal.Endpoint_get_users_ID_synergies_data_inner_meet_payment_paypal(
                                    url = '', ), ), 
                            price_usd = 1.337, ), 
                        relationship = openapi_client.models.endpoint_get_users_id_synergies_data_inner_relationship.Endpoint_get_users_ID_synergies_data_inner_relationship(
                            existing_bubbled_conversation = True, 
                            existing_conversation = True, 
                            muted = True, 
                            skipped = True, ), )
                    ]
            )
        else:
            return EndpointGetUsersIDSynergies(
        )
        """

    def testEndpointGetUsersIDSynergies(self):
        """Test EndpointGetUsersIDSynergies"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    DaniWeb Connect API

    User Recommendation Engine and Chat Network

    The version of the OpenAPI document: 4
    Contact: dani@daniwebmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.endpoint_patch_users import EndpointPatchUsers

class TestEndpointPatchUsers(unittest.TestCase):
    """EndpointPatchUsers unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EndpointPatchUsers:
        """Test EndpointPatchUsers
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EndpointPatchUsers`
        """
        model = EndpointPatchUsers()
        if include_optional:
            return EndpointPatchUsers(
                data = openapi_client.models.me.Me(
                    business_card = openapi_client.models.me_business_card.Me_business_card(
                        company_name = '', 
                        company_size = '', 
                        headline = '', 
                        industry = '', 
                        interest_tags = [
                            ''
                            ], 
                        job_position = '', 
                        summary = '', 
                        website = openapi_client.models.me_business_card_website.Me_business_card_website(
                            thumbshot_uri = '', 
                            url = '', ), ), 
                    community_persona = openapi_client.models.member.Member(
                        id = 1.337, 
                        identity = openapi_client.models.member_identity.Member_identity(
                            avatar_uri = '', 
                            badge = '', 
                            profile_url = '', 
                            username = '', ), 
                        location = openapi_client.models.member_location.Member_location(
                            free_form = '', ), 
                        personal = openapi_client.models.member_personal.Member_personal(
                            about_me = '', 
                            birthday = '', 
                            interests = '', 
                            pc_specs = '', ), 
                        signature = openapi_client.models.endpoint_post_markdown_data.Endpoint_post_markdown_data(
                            parsed = '', 
                            raw = '', ), 
                        stats = openapi_client.models.member_stats.Member_stats(
                            answered_count = 1.337, 
                            endorsements_count = 1.337, 
                            posts_count = 1.337, 
                            reputation_count = 1.337, ), ), 
                    id = 1.337, 
                    location = openapi_client.models.me_location.Me_location(
                        city = '', 
                        country = 1.337, 
                        ip_address = '', 
                        latitude = '', 
                        longitude = '', 
                        region = '', ), 
                    matching = openapi_client.models.me_matching.Me_matching(
                        goals = [
                            ''
                            ], 
                        location_importance = '', 
                        targeted_industry = '', ), 
                    profile = openapi_client.models.me_profile.Me_profile(
                        first_name = '', 
                        introduction = '', 
                        last_name = '', ), 
                    settings = openapi_client.models.me_settings.Me_settings(
                        email = '', 
                        email_verified = True, 
                        notifications = '', 
                        timezone = 1.337, ), 
                    usage = openapi_client.models.me_usage.Me_usage(
                        available_status = True, 
                        joined_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_activity_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        online_status = True, ), ),
                success = True
            )
        else:
            return EndpointPatchUsers(
        )
        """

    def testEndpointPatchUsers(self):
        """Test EndpointPatchUsers"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

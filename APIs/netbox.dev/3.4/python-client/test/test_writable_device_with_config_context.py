# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.writable_device_with_config_context import WritableDeviceWithConfigContext

class TestWritableDeviceWithConfigContext(unittest.TestCase):
    """WritableDeviceWithConfigContext unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WritableDeviceWithConfigContext:
        """Test WritableDeviceWithConfigContext
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WritableDeviceWithConfigContext`
        """
        model = WritableDeviceWithConfigContext()
        if include_optional:
            return WritableDeviceWithConfigContext(
                airflow = 'front-to-rear',
                asset_tag = '',
                cluster = 56,
                comments = '',
                config_context = openapi_client.models.config_context.Config context(),
                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                custom_fields = openapi_client.models.custom_fields.Custom fields(),
                description = '',
                device_role = 56,
                device_type = 56,
                display = '',
                face = 'front',
                id = 56,
                last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                local_context_data = openapi_client.models.local_context_data.Local context data(),
                location = 56,
                name = '',
                parent_device = openapi_client.models.nested_device.NestedDevice(
                    display = '', 
                    id = 56, 
                    name = '', 
                    url = '', ),
                platform = 56,
                position = 0.5,
                primary_ip = '',
                primary_ip4 = 56,
                primary_ip6 = 56,
                rack = 56,
                serial = '',
                site = 56,
                status = 'offline',
                tags = [
                    openapi_client.models.nested_tag.NestedTag(
                        color = 'bf32530', 
                        display = '', 
                        id = 56, 
                        name = '0', 
                        slug = '0', 
                        url = '', )
                    ],
                tenant = 56,
                url = '',
                vc_position = 0,
                vc_priority = 0,
                virtual_chassis = 56
            )
        else:
            return WritableDeviceWithConfigContext(
                device_role = 56,
                device_type = 56,
                site = 56,
        )
        """

    def testWritableDeviceWithConfigContext(self):
        """Test WritableDeviceWithConfigContext"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

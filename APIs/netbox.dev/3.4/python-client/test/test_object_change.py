# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.object_change import ObjectChange

class TestObjectChange(unittest.TestCase):
    """ObjectChange unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ObjectChange:
        """Test ObjectChange
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ObjectChange`
        """
        model = ObjectChange()
        if include_optional:
            return ObjectChange(
                action = openapi_client.models.action.Action(
                    label = 'Created', 
                    value = 'create', ),
                changed_object = openapi_client.models.changed_object.Changed object(),
                changed_object_id = 0,
                changed_object_type = '',
                display = '',
                id = 56,
                postchange_data = openapi_client.models.postchange_data.Postchange data(),
                prechange_data = openapi_client.models.prechange_data.Prechange data(),
                request_id = '',
                time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                url = '',
                user = openapi_client.models.nested_user.NestedUser(
                    display = '', 
                    id = 56, 
                    url = '', 
                    username = 'A0', ),
                user_name = '0'
            )
        else:
            return ObjectChange(
                changed_object_id = 0,
        )
        """

    def testObjectChange(self):
        """Test ObjectChange"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.writable_custom_field import WritableCustomField

class TestWritableCustomField(unittest.TestCase):
    """WritableCustomField unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WritableCustomField:
        """Test WritableCustomField
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WritableCustomField`
        """
        model = WritableCustomField()
        if include_optional:
            return WritableCustomField(
                choices = [
                    '0'
                    ],
                content_types = [
                    ''
                    ],
                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                data_type = '',
                default = openapi_client.models.default.Default(),
                description = '',
                display = '',
                filter_logic = 'disabled',
                group_name = '',
                id = 56,
                label = '',
                last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                name = 'p0',
                object_type = '',
                required = True,
                search_weight = 0,
                type = 'text',
                ui_visibility = 'read-write',
                url = '',
                validation_maximum = -2147483648,
                validation_minimum = -2147483648,
                validation_regex = '',
                weight = 0
            )
        else:
            return WritableCustomField(
                content_types = [
                    ''
                    ],
                name = 'p0',
        )
        """

    def testWritableCustomField(self):
        """Test WritableCustomField"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

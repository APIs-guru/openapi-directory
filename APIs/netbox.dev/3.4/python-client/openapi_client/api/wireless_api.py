# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.wireless_lan import WirelessLAN
from openapi_client.models.wireless_lan_group import WirelessLANGroup
from openapi_client.models.wireless_link import WirelessLink
from openapi_client.models.wireless_wireless_lan_groups_list200_response import WirelessWirelessLanGroupsList200Response
from openapi_client.models.wireless_wireless_lans_list200_response import WirelessWirelessLansList200Response
from openapi_client.models.wireless_wireless_links_list200_response import WirelessWirelessLinksList200Response
from openapi_client.models.writable_wireless_lan import WritableWirelessLAN
from openapi_client.models.writable_wireless_lan_group import WritableWirelessLANGroup
from openapi_client.models.writable_wireless_link import WritableWirelessLink

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class WirelessApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def wireless_wireless_lan_groups_bulk_delete(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """wireless_wireless_lan_groups_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_lan_groups_bulk_delete_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """wireless_wireless_lan_groups_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_lan_groups_bulk_delete_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_lan_groups_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_lan_groups_bulk_delete_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/wireless/wireless-lan-groups/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wireless_wireless_lan_groups_bulk_partial_update(
        self,
        writable_wireless_lan_group: WritableWirelessLANGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WirelessLANGroup:
        """wireless_wireless_lan_groups_bulk_partial_update

        

        :param writable_wireless_lan_group: (required)
        :type writable_wireless_lan_group: WritableWirelessLANGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_bulk_partial_update_serialize(
            writable_wireless_lan_group=writable_wireless_lan_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLANGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_lan_groups_bulk_partial_update_with_http_info(
        self,
        writable_wireless_lan_group: WritableWirelessLANGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WirelessLANGroup]:
        """wireless_wireless_lan_groups_bulk_partial_update

        

        :param writable_wireless_lan_group: (required)
        :type writable_wireless_lan_group: WritableWirelessLANGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_bulk_partial_update_serialize(
            writable_wireless_lan_group=writable_wireless_lan_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLANGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_lan_groups_bulk_partial_update_without_preload_content(
        self,
        writable_wireless_lan_group: WritableWirelessLANGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_lan_groups_bulk_partial_update

        

        :param writable_wireless_lan_group: (required)
        :type writable_wireless_lan_group: WritableWirelessLANGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_bulk_partial_update_serialize(
            writable_wireless_lan_group=writable_wireless_lan_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLANGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_lan_groups_bulk_partial_update_serialize(
        self,
        writable_wireless_lan_group,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_wireless_lan_group is not None:
            _body_params = writable_wireless_lan_group


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/wireless/wireless-lan-groups/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wireless_wireless_lan_groups_bulk_update(
        self,
        writable_wireless_lan_group: WritableWirelessLANGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WirelessLANGroup:
        """wireless_wireless_lan_groups_bulk_update

        

        :param writable_wireless_lan_group: (required)
        :type writable_wireless_lan_group: WritableWirelessLANGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_bulk_update_serialize(
            writable_wireless_lan_group=writable_wireless_lan_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLANGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_lan_groups_bulk_update_with_http_info(
        self,
        writable_wireless_lan_group: WritableWirelessLANGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WirelessLANGroup]:
        """wireless_wireless_lan_groups_bulk_update

        

        :param writable_wireless_lan_group: (required)
        :type writable_wireless_lan_group: WritableWirelessLANGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_bulk_update_serialize(
            writable_wireless_lan_group=writable_wireless_lan_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLANGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_lan_groups_bulk_update_without_preload_content(
        self,
        writable_wireless_lan_group: WritableWirelessLANGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_lan_groups_bulk_update

        

        :param writable_wireless_lan_group: (required)
        :type writable_wireless_lan_group: WritableWirelessLANGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_bulk_update_serialize(
            writable_wireless_lan_group=writable_wireless_lan_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLANGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_lan_groups_bulk_update_serialize(
        self,
        writable_wireless_lan_group,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_wireless_lan_group is not None:
            _body_params = writable_wireless_lan_group


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/wireless/wireless-lan-groups/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wireless_wireless_lan_groups_create(
        self,
        writable_wireless_lan_group: WritableWirelessLANGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WirelessLANGroup:
        """wireless_wireless_lan_groups_create

        

        :param writable_wireless_lan_group: (required)
        :type writable_wireless_lan_group: WritableWirelessLANGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_create_serialize(
            writable_wireless_lan_group=writable_wireless_lan_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "WirelessLANGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_lan_groups_create_with_http_info(
        self,
        writable_wireless_lan_group: WritableWirelessLANGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WirelessLANGroup]:
        """wireless_wireless_lan_groups_create

        

        :param writable_wireless_lan_group: (required)
        :type writable_wireless_lan_group: WritableWirelessLANGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_create_serialize(
            writable_wireless_lan_group=writable_wireless_lan_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "WirelessLANGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_lan_groups_create_without_preload_content(
        self,
        writable_wireless_lan_group: WritableWirelessLANGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_lan_groups_create

        

        :param writable_wireless_lan_group: (required)
        :type writable_wireless_lan_group: WritableWirelessLANGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_create_serialize(
            writable_wireless_lan_group=writable_wireless_lan_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "WirelessLANGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_lan_groups_create_serialize(
        self,
        writable_wireless_lan_group,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_wireless_lan_group is not None:
            _body_params = writable_wireless_lan_group


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/wireless/wireless-lan-groups/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wireless_wireless_lan_groups_delete(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this Wireless LAN Group.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """wireless_wireless_lan_groups_delete

        

        :param id: A unique integer value identifying this Wireless LAN Group. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_lan_groups_delete_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this Wireless LAN Group.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """wireless_wireless_lan_groups_delete

        

        :param id: A unique integer value identifying this Wireless LAN Group. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_lan_groups_delete_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this Wireless LAN Group.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_lan_groups_delete

        

        :param id: A unique integer value identifying this Wireless LAN Group. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_lan_groups_delete_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/wireless/wireless-lan-groups/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wireless_wireless_lan_groups_list(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        slug: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        parent_id: Optional[StrictStr] = None,
        parent: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        slug__n: Optional[StrictStr] = None,
        slug__ic: Optional[StrictStr] = None,
        slug__nic: Optional[StrictStr] = None,
        slug__iew: Optional[StrictStr] = None,
        slug__niew: Optional[StrictStr] = None,
        slug__isw: Optional[StrictStr] = None,
        slug__nisw: Optional[StrictStr] = None,
        slug__ie: Optional[StrictStr] = None,
        slug__nie: Optional[StrictStr] = None,
        slug__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        parent_id__n: Optional[StrictStr] = None,
        parent__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WirelessWirelessLanGroupsList200Response:
        """wireless_wireless_lan_groups_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param slug: 
        :type slug: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param parent_id: 
        :type parent_id: str
        :param parent: 
        :type parent: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param slug__n: 
        :type slug__n: str
        :param slug__ic: 
        :type slug__ic: str
        :param slug__nic: 
        :type slug__nic: str
        :param slug__iew: 
        :type slug__iew: str
        :param slug__niew: 
        :type slug__niew: str
        :param slug__isw: 
        :type slug__isw: str
        :param slug__nisw: 
        :type slug__nisw: str
        :param slug__ie: 
        :type slug__ie: str
        :param slug__nie: 
        :type slug__nie: str
        :param slug__empty: 
        :type slug__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param parent_id__n: 
        :type parent_id__n: str
        :param parent__n: 
        :type parent__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_list_serialize(
            id=id,
            name=name,
            slug=slug,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            parent_id=parent_id,
            parent=parent,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            slug__n=slug__n,
            slug__ic=slug__ic,
            slug__nic=slug__nic,
            slug__iew=slug__iew,
            slug__niew=slug__niew,
            slug__isw=slug__isw,
            slug__nisw=slug__nisw,
            slug__ie=slug__ie,
            slug__nie=slug__nie,
            slug__empty=slug__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            parent_id__n=parent_id__n,
            parent__n=parent__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessWirelessLanGroupsList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_lan_groups_list_with_http_info(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        slug: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        parent_id: Optional[StrictStr] = None,
        parent: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        slug__n: Optional[StrictStr] = None,
        slug__ic: Optional[StrictStr] = None,
        slug__nic: Optional[StrictStr] = None,
        slug__iew: Optional[StrictStr] = None,
        slug__niew: Optional[StrictStr] = None,
        slug__isw: Optional[StrictStr] = None,
        slug__nisw: Optional[StrictStr] = None,
        slug__ie: Optional[StrictStr] = None,
        slug__nie: Optional[StrictStr] = None,
        slug__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        parent_id__n: Optional[StrictStr] = None,
        parent__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WirelessWirelessLanGroupsList200Response]:
        """wireless_wireless_lan_groups_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param slug: 
        :type slug: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param parent_id: 
        :type parent_id: str
        :param parent: 
        :type parent: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param slug__n: 
        :type slug__n: str
        :param slug__ic: 
        :type slug__ic: str
        :param slug__nic: 
        :type slug__nic: str
        :param slug__iew: 
        :type slug__iew: str
        :param slug__niew: 
        :type slug__niew: str
        :param slug__isw: 
        :type slug__isw: str
        :param slug__nisw: 
        :type slug__nisw: str
        :param slug__ie: 
        :type slug__ie: str
        :param slug__nie: 
        :type slug__nie: str
        :param slug__empty: 
        :type slug__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param parent_id__n: 
        :type parent_id__n: str
        :param parent__n: 
        :type parent__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_list_serialize(
            id=id,
            name=name,
            slug=slug,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            parent_id=parent_id,
            parent=parent,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            slug__n=slug__n,
            slug__ic=slug__ic,
            slug__nic=slug__nic,
            slug__iew=slug__iew,
            slug__niew=slug__niew,
            slug__isw=slug__isw,
            slug__nisw=slug__nisw,
            slug__ie=slug__ie,
            slug__nie=slug__nie,
            slug__empty=slug__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            parent_id__n=parent_id__n,
            parent__n=parent__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessWirelessLanGroupsList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_lan_groups_list_without_preload_content(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        slug: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        parent_id: Optional[StrictStr] = None,
        parent: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        slug__n: Optional[StrictStr] = None,
        slug__ic: Optional[StrictStr] = None,
        slug__nic: Optional[StrictStr] = None,
        slug__iew: Optional[StrictStr] = None,
        slug__niew: Optional[StrictStr] = None,
        slug__isw: Optional[StrictStr] = None,
        slug__nisw: Optional[StrictStr] = None,
        slug__ie: Optional[StrictStr] = None,
        slug__nie: Optional[StrictStr] = None,
        slug__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        parent_id__n: Optional[StrictStr] = None,
        parent__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_lan_groups_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param slug: 
        :type slug: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param parent_id: 
        :type parent_id: str
        :param parent: 
        :type parent: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param slug__n: 
        :type slug__n: str
        :param slug__ic: 
        :type slug__ic: str
        :param slug__nic: 
        :type slug__nic: str
        :param slug__iew: 
        :type slug__iew: str
        :param slug__niew: 
        :type slug__niew: str
        :param slug__isw: 
        :type slug__isw: str
        :param slug__nisw: 
        :type slug__nisw: str
        :param slug__ie: 
        :type slug__ie: str
        :param slug__nie: 
        :type slug__nie: str
        :param slug__empty: 
        :type slug__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param parent_id__n: 
        :type parent_id__n: str
        :param parent__n: 
        :type parent__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_list_serialize(
            id=id,
            name=name,
            slug=slug,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            parent_id=parent_id,
            parent=parent,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            slug__n=slug__n,
            slug__ic=slug__ic,
            slug__nic=slug__nic,
            slug__iew=slug__iew,
            slug__niew=slug__niew,
            slug__isw=slug__isw,
            slug__nisw=slug__nisw,
            slug__ie=slug__ie,
            slug__nie=slug__nie,
            slug__empty=slug__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            parent_id__n=parent_id__n,
            parent__n=parent__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessWirelessLanGroupsList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_lan_groups_list_serialize(
        self,
        id,
        name,
        slug,
        description,
        created,
        last_updated,
        q,
        tag,
        parent_id,
        parent,
        id__n,
        id__lte,
        id__lt,
        id__gte,
        id__gt,
        name__n,
        name__ic,
        name__nic,
        name__iew,
        name__niew,
        name__isw,
        name__nisw,
        name__ie,
        name__nie,
        name__empty,
        slug__n,
        slug__ic,
        slug__nic,
        slug__iew,
        slug__niew,
        slug__isw,
        slug__nisw,
        slug__ie,
        slug__nie,
        slug__empty,
        description__n,
        description__ic,
        description__nic,
        description__iew,
        description__niew,
        description__isw,
        description__nisw,
        description__ie,
        description__nie,
        description__empty,
        created__n,
        created__lte,
        created__lt,
        created__gte,
        created__gt,
        last_updated__n,
        last_updated__lte,
        last_updated__lt,
        last_updated__gte,
        last_updated__gt,
        tag__n,
        parent_id__n,
        parent__n,
        ordering,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if slug is not None:
            
            _query_params.append(('slug', slug))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if created is not None:
            
            _query_params.append(('created', created))
            
        if last_updated is not None:
            
            _query_params.append(('last_updated', last_updated))
            
        if q is not None:
            
            _query_params.append(('q', q))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if parent_id is not None:
            
            _query_params.append(('parent_id', parent_id))
            
        if parent is not None:
            
            _query_params.append(('parent', parent))
            
        if id__n is not None:
            
            _query_params.append(('id__n', id__n))
            
        if id__lte is not None:
            
            _query_params.append(('id__lte', id__lte))
            
        if id__lt is not None:
            
            _query_params.append(('id__lt', id__lt))
            
        if id__gte is not None:
            
            _query_params.append(('id__gte', id__gte))
            
        if id__gt is not None:
            
            _query_params.append(('id__gt', id__gt))
            
        if name__n is not None:
            
            _query_params.append(('name__n', name__n))
            
        if name__ic is not None:
            
            _query_params.append(('name__ic', name__ic))
            
        if name__nic is not None:
            
            _query_params.append(('name__nic', name__nic))
            
        if name__iew is not None:
            
            _query_params.append(('name__iew', name__iew))
            
        if name__niew is not None:
            
            _query_params.append(('name__niew', name__niew))
            
        if name__isw is not None:
            
            _query_params.append(('name__isw', name__isw))
            
        if name__nisw is not None:
            
            _query_params.append(('name__nisw', name__nisw))
            
        if name__ie is not None:
            
            _query_params.append(('name__ie', name__ie))
            
        if name__nie is not None:
            
            _query_params.append(('name__nie', name__nie))
            
        if name__empty is not None:
            
            _query_params.append(('name__empty', name__empty))
            
        if slug__n is not None:
            
            _query_params.append(('slug__n', slug__n))
            
        if slug__ic is not None:
            
            _query_params.append(('slug__ic', slug__ic))
            
        if slug__nic is not None:
            
            _query_params.append(('slug__nic', slug__nic))
            
        if slug__iew is not None:
            
            _query_params.append(('slug__iew', slug__iew))
            
        if slug__niew is not None:
            
            _query_params.append(('slug__niew', slug__niew))
            
        if slug__isw is not None:
            
            _query_params.append(('slug__isw', slug__isw))
            
        if slug__nisw is not None:
            
            _query_params.append(('slug__nisw', slug__nisw))
            
        if slug__ie is not None:
            
            _query_params.append(('slug__ie', slug__ie))
            
        if slug__nie is not None:
            
            _query_params.append(('slug__nie', slug__nie))
            
        if slug__empty is not None:
            
            _query_params.append(('slug__empty', slug__empty))
            
        if description__n is not None:
            
            _query_params.append(('description__n', description__n))
            
        if description__ic is not None:
            
            _query_params.append(('description__ic', description__ic))
            
        if description__nic is not None:
            
            _query_params.append(('description__nic', description__nic))
            
        if description__iew is not None:
            
            _query_params.append(('description__iew', description__iew))
            
        if description__niew is not None:
            
            _query_params.append(('description__niew', description__niew))
            
        if description__isw is not None:
            
            _query_params.append(('description__isw', description__isw))
            
        if description__nisw is not None:
            
            _query_params.append(('description__nisw', description__nisw))
            
        if description__ie is not None:
            
            _query_params.append(('description__ie', description__ie))
            
        if description__nie is not None:
            
            _query_params.append(('description__nie', description__nie))
            
        if description__empty is not None:
            
            _query_params.append(('description__empty', description__empty))
            
        if created__n is not None:
            
            _query_params.append(('created__n', created__n))
            
        if created__lte is not None:
            
            _query_params.append(('created__lte', created__lte))
            
        if created__lt is not None:
            
            _query_params.append(('created__lt', created__lt))
            
        if created__gte is not None:
            
            _query_params.append(('created__gte', created__gte))
            
        if created__gt is not None:
            
            _query_params.append(('created__gt', created__gt))
            
        if last_updated__n is not None:
            
            _query_params.append(('last_updated__n', last_updated__n))
            
        if last_updated__lte is not None:
            
            _query_params.append(('last_updated__lte', last_updated__lte))
            
        if last_updated__lt is not None:
            
            _query_params.append(('last_updated__lt', last_updated__lt))
            
        if last_updated__gte is not None:
            
            _query_params.append(('last_updated__gte', last_updated__gte))
            
        if last_updated__gt is not None:
            
            _query_params.append(('last_updated__gt', last_updated__gt))
            
        if tag__n is not None:
            
            _query_params.append(('tag__n', tag__n))
            
        if parent_id__n is not None:
            
            _query_params.append(('parent_id__n', parent_id__n))
            
        if parent__n is not None:
            
            _query_params.append(('parent__n', parent__n))
            
        if ordering is not None:
            
            _query_params.append(('ordering', ordering))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/wireless/wireless-lan-groups/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wireless_wireless_lan_groups_partial_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this Wireless LAN Group.")],
        writable_wireless_lan_group: WritableWirelessLANGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WirelessLANGroup:
        """wireless_wireless_lan_groups_partial_update

        

        :param id: A unique integer value identifying this Wireless LAN Group. (required)
        :type id: int
        :param writable_wireless_lan_group: (required)
        :type writable_wireless_lan_group: WritableWirelessLANGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_partial_update_serialize(
            id=id,
            writable_wireless_lan_group=writable_wireless_lan_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLANGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_lan_groups_partial_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this Wireless LAN Group.")],
        writable_wireless_lan_group: WritableWirelessLANGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WirelessLANGroup]:
        """wireless_wireless_lan_groups_partial_update

        

        :param id: A unique integer value identifying this Wireless LAN Group. (required)
        :type id: int
        :param writable_wireless_lan_group: (required)
        :type writable_wireless_lan_group: WritableWirelessLANGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_partial_update_serialize(
            id=id,
            writable_wireless_lan_group=writable_wireless_lan_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLANGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_lan_groups_partial_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this Wireless LAN Group.")],
        writable_wireless_lan_group: WritableWirelessLANGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_lan_groups_partial_update

        

        :param id: A unique integer value identifying this Wireless LAN Group. (required)
        :type id: int
        :param writable_wireless_lan_group: (required)
        :type writable_wireless_lan_group: WritableWirelessLANGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_partial_update_serialize(
            id=id,
            writable_wireless_lan_group=writable_wireless_lan_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLANGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_lan_groups_partial_update_serialize(
        self,
        id,
        writable_wireless_lan_group,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_wireless_lan_group is not None:
            _body_params = writable_wireless_lan_group


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/wireless/wireless-lan-groups/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wireless_wireless_lan_groups_read(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this Wireless LAN Group.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WirelessLANGroup:
        """wireless_wireless_lan_groups_read

        

        :param id: A unique integer value identifying this Wireless LAN Group. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLANGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_lan_groups_read_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this Wireless LAN Group.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WirelessLANGroup]:
        """wireless_wireless_lan_groups_read

        

        :param id: A unique integer value identifying this Wireless LAN Group. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLANGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_lan_groups_read_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this Wireless LAN Group.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_lan_groups_read

        

        :param id: A unique integer value identifying this Wireless LAN Group. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLANGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_lan_groups_read_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/wireless/wireless-lan-groups/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wireless_wireless_lan_groups_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this Wireless LAN Group.")],
        writable_wireless_lan_group: WritableWirelessLANGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WirelessLANGroup:
        """wireless_wireless_lan_groups_update

        

        :param id: A unique integer value identifying this Wireless LAN Group. (required)
        :type id: int
        :param writable_wireless_lan_group: (required)
        :type writable_wireless_lan_group: WritableWirelessLANGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_update_serialize(
            id=id,
            writable_wireless_lan_group=writable_wireless_lan_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLANGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_lan_groups_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this Wireless LAN Group.")],
        writable_wireless_lan_group: WritableWirelessLANGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WirelessLANGroup]:
        """wireless_wireless_lan_groups_update

        

        :param id: A unique integer value identifying this Wireless LAN Group. (required)
        :type id: int
        :param writable_wireless_lan_group: (required)
        :type writable_wireless_lan_group: WritableWirelessLANGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_update_serialize(
            id=id,
            writable_wireless_lan_group=writable_wireless_lan_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLANGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_lan_groups_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this Wireless LAN Group.")],
        writable_wireless_lan_group: WritableWirelessLANGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_lan_groups_update

        

        :param id: A unique integer value identifying this Wireless LAN Group. (required)
        :type id: int
        :param writable_wireless_lan_group: (required)
        :type writable_wireless_lan_group: WritableWirelessLANGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lan_groups_update_serialize(
            id=id,
            writable_wireless_lan_group=writable_wireless_lan_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLANGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_lan_groups_update_serialize(
        self,
        id,
        writable_wireless_lan_group,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_wireless_lan_group is not None:
            _body_params = writable_wireless_lan_group


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/wireless/wireless-lan-groups/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wireless_wireless_lans_bulk_delete(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """wireless_wireless_lans_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_lans_bulk_delete_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """wireless_wireless_lans_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_lans_bulk_delete_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_lans_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_lans_bulk_delete_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/wireless/wireless-lans/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wireless_wireless_lans_bulk_partial_update(
        self,
        writable_wireless_lan: WritableWirelessLAN,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WirelessLAN:
        """wireless_wireless_lans_bulk_partial_update

        

        :param writable_wireless_lan: (required)
        :type writable_wireless_lan: WritableWirelessLAN
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_bulk_partial_update_serialize(
            writable_wireless_lan=writable_wireless_lan,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLAN",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_lans_bulk_partial_update_with_http_info(
        self,
        writable_wireless_lan: WritableWirelessLAN,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WirelessLAN]:
        """wireless_wireless_lans_bulk_partial_update

        

        :param writable_wireless_lan: (required)
        :type writable_wireless_lan: WritableWirelessLAN
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_bulk_partial_update_serialize(
            writable_wireless_lan=writable_wireless_lan,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLAN",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_lans_bulk_partial_update_without_preload_content(
        self,
        writable_wireless_lan: WritableWirelessLAN,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_lans_bulk_partial_update

        

        :param writable_wireless_lan: (required)
        :type writable_wireless_lan: WritableWirelessLAN
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_bulk_partial_update_serialize(
            writable_wireless_lan=writable_wireless_lan,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLAN",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_lans_bulk_partial_update_serialize(
        self,
        writable_wireless_lan,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_wireless_lan is not None:
            _body_params = writable_wireless_lan


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/wireless/wireless-lans/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wireless_wireless_lans_bulk_update(
        self,
        writable_wireless_lan: WritableWirelessLAN,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WirelessLAN:
        """wireless_wireless_lans_bulk_update

        

        :param writable_wireless_lan: (required)
        :type writable_wireless_lan: WritableWirelessLAN
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_bulk_update_serialize(
            writable_wireless_lan=writable_wireless_lan,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLAN",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_lans_bulk_update_with_http_info(
        self,
        writable_wireless_lan: WritableWirelessLAN,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WirelessLAN]:
        """wireless_wireless_lans_bulk_update

        

        :param writable_wireless_lan: (required)
        :type writable_wireless_lan: WritableWirelessLAN
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_bulk_update_serialize(
            writable_wireless_lan=writable_wireless_lan,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLAN",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_lans_bulk_update_without_preload_content(
        self,
        writable_wireless_lan: WritableWirelessLAN,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_lans_bulk_update

        

        :param writable_wireless_lan: (required)
        :type writable_wireless_lan: WritableWirelessLAN
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_bulk_update_serialize(
            writable_wireless_lan=writable_wireless_lan,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLAN",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_lans_bulk_update_serialize(
        self,
        writable_wireless_lan,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_wireless_lan is not None:
            _body_params = writable_wireless_lan


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/wireless/wireless-lans/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wireless_wireless_lans_create(
        self,
        writable_wireless_lan: WritableWirelessLAN,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WirelessLAN:
        """wireless_wireless_lans_create

        

        :param writable_wireless_lan: (required)
        :type writable_wireless_lan: WritableWirelessLAN
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_create_serialize(
            writable_wireless_lan=writable_wireless_lan,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "WirelessLAN",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_lans_create_with_http_info(
        self,
        writable_wireless_lan: WritableWirelessLAN,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WirelessLAN]:
        """wireless_wireless_lans_create

        

        :param writable_wireless_lan: (required)
        :type writable_wireless_lan: WritableWirelessLAN
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_create_serialize(
            writable_wireless_lan=writable_wireless_lan,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "WirelessLAN",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_lans_create_without_preload_content(
        self,
        writable_wireless_lan: WritableWirelessLAN,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_lans_create

        

        :param writable_wireless_lan: (required)
        :type writable_wireless_lan: WritableWirelessLAN
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_create_serialize(
            writable_wireless_lan=writable_wireless_lan,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "WirelessLAN",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_lans_create_serialize(
        self,
        writable_wireless_lan,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_wireless_lan is not None:
            _body_params = writable_wireless_lan


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/wireless/wireless-lans/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wireless_wireless_lans_delete(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this Wireless LAN.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """wireless_wireless_lans_delete

        

        :param id: A unique integer value identifying this Wireless LAN. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_lans_delete_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this Wireless LAN.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """wireless_wireless_lans_delete

        

        :param id: A unique integer value identifying this Wireless LAN. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_lans_delete_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this Wireless LAN.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_lans_delete

        

        :param id: A unique integer value identifying this Wireless LAN. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_lans_delete_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/wireless/wireless-lans/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wireless_wireless_lans_list(
        self,
        id: Optional[StrictStr] = None,
        ssid: Optional[StrictStr] = None,
        auth_psk: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        tenant_group_id: Optional[StrictStr] = None,
        tenant_group: Optional[StrictStr] = None,
        tenant_id: Optional[StrictStr] = None,
        tenant: Optional[StrictStr] = None,
        group_id: Optional[StrictStr] = None,
        group: Optional[StrictStr] = None,
        status: Optional[StrictStr] = None,
        vlan_id: Optional[StrictStr] = None,
        auth_type: Optional[StrictStr] = None,
        auth_cipher: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        ssid__n: Optional[StrictStr] = None,
        ssid__ic: Optional[StrictStr] = None,
        ssid__nic: Optional[StrictStr] = None,
        ssid__iew: Optional[StrictStr] = None,
        ssid__niew: Optional[StrictStr] = None,
        ssid__isw: Optional[StrictStr] = None,
        ssid__nisw: Optional[StrictStr] = None,
        ssid__ie: Optional[StrictStr] = None,
        ssid__nie: Optional[StrictStr] = None,
        ssid__empty: Optional[StrictStr] = None,
        auth_psk__n: Optional[StrictStr] = None,
        auth_psk__ic: Optional[StrictStr] = None,
        auth_psk__nic: Optional[StrictStr] = None,
        auth_psk__iew: Optional[StrictStr] = None,
        auth_psk__niew: Optional[StrictStr] = None,
        auth_psk__isw: Optional[StrictStr] = None,
        auth_psk__nisw: Optional[StrictStr] = None,
        auth_psk__ie: Optional[StrictStr] = None,
        auth_psk__nie: Optional[StrictStr] = None,
        auth_psk__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        tenant_group_id__n: Optional[StrictStr] = None,
        tenant_group__n: Optional[StrictStr] = None,
        tenant_id__n: Optional[StrictStr] = None,
        tenant__n: Optional[StrictStr] = None,
        group_id__n: Optional[StrictStr] = None,
        group__n: Optional[StrictStr] = None,
        status__n: Optional[StrictStr] = None,
        vlan_id__n: Optional[StrictStr] = None,
        auth_type__n: Optional[StrictStr] = None,
        auth_cipher__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WirelessWirelessLansList200Response:
        """wireless_wireless_lans_list

        

        :param id: 
        :type id: str
        :param ssid: 
        :type ssid: str
        :param auth_psk: 
        :type auth_psk: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param tenant_group_id: 
        :type tenant_group_id: str
        :param tenant_group: 
        :type tenant_group: str
        :param tenant_id: 
        :type tenant_id: str
        :param tenant: 
        :type tenant: str
        :param group_id: 
        :type group_id: str
        :param group: 
        :type group: str
        :param status: 
        :type status: str
        :param vlan_id: 
        :type vlan_id: str
        :param auth_type: 
        :type auth_type: str
        :param auth_cipher: 
        :type auth_cipher: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param ssid__n: 
        :type ssid__n: str
        :param ssid__ic: 
        :type ssid__ic: str
        :param ssid__nic: 
        :type ssid__nic: str
        :param ssid__iew: 
        :type ssid__iew: str
        :param ssid__niew: 
        :type ssid__niew: str
        :param ssid__isw: 
        :type ssid__isw: str
        :param ssid__nisw: 
        :type ssid__nisw: str
        :param ssid__ie: 
        :type ssid__ie: str
        :param ssid__nie: 
        :type ssid__nie: str
        :param ssid__empty: 
        :type ssid__empty: str
        :param auth_psk__n: 
        :type auth_psk__n: str
        :param auth_psk__ic: 
        :type auth_psk__ic: str
        :param auth_psk__nic: 
        :type auth_psk__nic: str
        :param auth_psk__iew: 
        :type auth_psk__iew: str
        :param auth_psk__niew: 
        :type auth_psk__niew: str
        :param auth_psk__isw: 
        :type auth_psk__isw: str
        :param auth_psk__nisw: 
        :type auth_psk__nisw: str
        :param auth_psk__ie: 
        :type auth_psk__ie: str
        :param auth_psk__nie: 
        :type auth_psk__nie: str
        :param auth_psk__empty: 
        :type auth_psk__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param tenant_group_id__n: 
        :type tenant_group_id__n: str
        :param tenant_group__n: 
        :type tenant_group__n: str
        :param tenant_id__n: 
        :type tenant_id__n: str
        :param tenant__n: 
        :type tenant__n: str
        :param group_id__n: 
        :type group_id__n: str
        :param group__n: 
        :type group__n: str
        :param status__n: 
        :type status__n: str
        :param vlan_id__n: 
        :type vlan_id__n: str
        :param auth_type__n: 
        :type auth_type__n: str
        :param auth_cipher__n: 
        :type auth_cipher__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_list_serialize(
            id=id,
            ssid=ssid,
            auth_psk=auth_psk,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            tenant_group_id=tenant_group_id,
            tenant_group=tenant_group,
            tenant_id=tenant_id,
            tenant=tenant,
            group_id=group_id,
            group=group,
            status=status,
            vlan_id=vlan_id,
            auth_type=auth_type,
            auth_cipher=auth_cipher,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            ssid__n=ssid__n,
            ssid__ic=ssid__ic,
            ssid__nic=ssid__nic,
            ssid__iew=ssid__iew,
            ssid__niew=ssid__niew,
            ssid__isw=ssid__isw,
            ssid__nisw=ssid__nisw,
            ssid__ie=ssid__ie,
            ssid__nie=ssid__nie,
            ssid__empty=ssid__empty,
            auth_psk__n=auth_psk__n,
            auth_psk__ic=auth_psk__ic,
            auth_psk__nic=auth_psk__nic,
            auth_psk__iew=auth_psk__iew,
            auth_psk__niew=auth_psk__niew,
            auth_psk__isw=auth_psk__isw,
            auth_psk__nisw=auth_psk__nisw,
            auth_psk__ie=auth_psk__ie,
            auth_psk__nie=auth_psk__nie,
            auth_psk__empty=auth_psk__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            tenant_group_id__n=tenant_group_id__n,
            tenant_group__n=tenant_group__n,
            tenant_id__n=tenant_id__n,
            tenant__n=tenant__n,
            group_id__n=group_id__n,
            group__n=group__n,
            status__n=status__n,
            vlan_id__n=vlan_id__n,
            auth_type__n=auth_type__n,
            auth_cipher__n=auth_cipher__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessWirelessLansList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_lans_list_with_http_info(
        self,
        id: Optional[StrictStr] = None,
        ssid: Optional[StrictStr] = None,
        auth_psk: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        tenant_group_id: Optional[StrictStr] = None,
        tenant_group: Optional[StrictStr] = None,
        tenant_id: Optional[StrictStr] = None,
        tenant: Optional[StrictStr] = None,
        group_id: Optional[StrictStr] = None,
        group: Optional[StrictStr] = None,
        status: Optional[StrictStr] = None,
        vlan_id: Optional[StrictStr] = None,
        auth_type: Optional[StrictStr] = None,
        auth_cipher: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        ssid__n: Optional[StrictStr] = None,
        ssid__ic: Optional[StrictStr] = None,
        ssid__nic: Optional[StrictStr] = None,
        ssid__iew: Optional[StrictStr] = None,
        ssid__niew: Optional[StrictStr] = None,
        ssid__isw: Optional[StrictStr] = None,
        ssid__nisw: Optional[StrictStr] = None,
        ssid__ie: Optional[StrictStr] = None,
        ssid__nie: Optional[StrictStr] = None,
        ssid__empty: Optional[StrictStr] = None,
        auth_psk__n: Optional[StrictStr] = None,
        auth_psk__ic: Optional[StrictStr] = None,
        auth_psk__nic: Optional[StrictStr] = None,
        auth_psk__iew: Optional[StrictStr] = None,
        auth_psk__niew: Optional[StrictStr] = None,
        auth_psk__isw: Optional[StrictStr] = None,
        auth_psk__nisw: Optional[StrictStr] = None,
        auth_psk__ie: Optional[StrictStr] = None,
        auth_psk__nie: Optional[StrictStr] = None,
        auth_psk__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        tenant_group_id__n: Optional[StrictStr] = None,
        tenant_group__n: Optional[StrictStr] = None,
        tenant_id__n: Optional[StrictStr] = None,
        tenant__n: Optional[StrictStr] = None,
        group_id__n: Optional[StrictStr] = None,
        group__n: Optional[StrictStr] = None,
        status__n: Optional[StrictStr] = None,
        vlan_id__n: Optional[StrictStr] = None,
        auth_type__n: Optional[StrictStr] = None,
        auth_cipher__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WirelessWirelessLansList200Response]:
        """wireless_wireless_lans_list

        

        :param id: 
        :type id: str
        :param ssid: 
        :type ssid: str
        :param auth_psk: 
        :type auth_psk: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param tenant_group_id: 
        :type tenant_group_id: str
        :param tenant_group: 
        :type tenant_group: str
        :param tenant_id: 
        :type tenant_id: str
        :param tenant: 
        :type tenant: str
        :param group_id: 
        :type group_id: str
        :param group: 
        :type group: str
        :param status: 
        :type status: str
        :param vlan_id: 
        :type vlan_id: str
        :param auth_type: 
        :type auth_type: str
        :param auth_cipher: 
        :type auth_cipher: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param ssid__n: 
        :type ssid__n: str
        :param ssid__ic: 
        :type ssid__ic: str
        :param ssid__nic: 
        :type ssid__nic: str
        :param ssid__iew: 
        :type ssid__iew: str
        :param ssid__niew: 
        :type ssid__niew: str
        :param ssid__isw: 
        :type ssid__isw: str
        :param ssid__nisw: 
        :type ssid__nisw: str
        :param ssid__ie: 
        :type ssid__ie: str
        :param ssid__nie: 
        :type ssid__nie: str
        :param ssid__empty: 
        :type ssid__empty: str
        :param auth_psk__n: 
        :type auth_psk__n: str
        :param auth_psk__ic: 
        :type auth_psk__ic: str
        :param auth_psk__nic: 
        :type auth_psk__nic: str
        :param auth_psk__iew: 
        :type auth_psk__iew: str
        :param auth_psk__niew: 
        :type auth_psk__niew: str
        :param auth_psk__isw: 
        :type auth_psk__isw: str
        :param auth_psk__nisw: 
        :type auth_psk__nisw: str
        :param auth_psk__ie: 
        :type auth_psk__ie: str
        :param auth_psk__nie: 
        :type auth_psk__nie: str
        :param auth_psk__empty: 
        :type auth_psk__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param tenant_group_id__n: 
        :type tenant_group_id__n: str
        :param tenant_group__n: 
        :type tenant_group__n: str
        :param tenant_id__n: 
        :type tenant_id__n: str
        :param tenant__n: 
        :type tenant__n: str
        :param group_id__n: 
        :type group_id__n: str
        :param group__n: 
        :type group__n: str
        :param status__n: 
        :type status__n: str
        :param vlan_id__n: 
        :type vlan_id__n: str
        :param auth_type__n: 
        :type auth_type__n: str
        :param auth_cipher__n: 
        :type auth_cipher__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_list_serialize(
            id=id,
            ssid=ssid,
            auth_psk=auth_psk,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            tenant_group_id=tenant_group_id,
            tenant_group=tenant_group,
            tenant_id=tenant_id,
            tenant=tenant,
            group_id=group_id,
            group=group,
            status=status,
            vlan_id=vlan_id,
            auth_type=auth_type,
            auth_cipher=auth_cipher,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            ssid__n=ssid__n,
            ssid__ic=ssid__ic,
            ssid__nic=ssid__nic,
            ssid__iew=ssid__iew,
            ssid__niew=ssid__niew,
            ssid__isw=ssid__isw,
            ssid__nisw=ssid__nisw,
            ssid__ie=ssid__ie,
            ssid__nie=ssid__nie,
            ssid__empty=ssid__empty,
            auth_psk__n=auth_psk__n,
            auth_psk__ic=auth_psk__ic,
            auth_psk__nic=auth_psk__nic,
            auth_psk__iew=auth_psk__iew,
            auth_psk__niew=auth_psk__niew,
            auth_psk__isw=auth_psk__isw,
            auth_psk__nisw=auth_psk__nisw,
            auth_psk__ie=auth_psk__ie,
            auth_psk__nie=auth_psk__nie,
            auth_psk__empty=auth_psk__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            tenant_group_id__n=tenant_group_id__n,
            tenant_group__n=tenant_group__n,
            tenant_id__n=tenant_id__n,
            tenant__n=tenant__n,
            group_id__n=group_id__n,
            group__n=group__n,
            status__n=status__n,
            vlan_id__n=vlan_id__n,
            auth_type__n=auth_type__n,
            auth_cipher__n=auth_cipher__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessWirelessLansList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_lans_list_without_preload_content(
        self,
        id: Optional[StrictStr] = None,
        ssid: Optional[StrictStr] = None,
        auth_psk: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        tenant_group_id: Optional[StrictStr] = None,
        tenant_group: Optional[StrictStr] = None,
        tenant_id: Optional[StrictStr] = None,
        tenant: Optional[StrictStr] = None,
        group_id: Optional[StrictStr] = None,
        group: Optional[StrictStr] = None,
        status: Optional[StrictStr] = None,
        vlan_id: Optional[StrictStr] = None,
        auth_type: Optional[StrictStr] = None,
        auth_cipher: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        ssid__n: Optional[StrictStr] = None,
        ssid__ic: Optional[StrictStr] = None,
        ssid__nic: Optional[StrictStr] = None,
        ssid__iew: Optional[StrictStr] = None,
        ssid__niew: Optional[StrictStr] = None,
        ssid__isw: Optional[StrictStr] = None,
        ssid__nisw: Optional[StrictStr] = None,
        ssid__ie: Optional[StrictStr] = None,
        ssid__nie: Optional[StrictStr] = None,
        ssid__empty: Optional[StrictStr] = None,
        auth_psk__n: Optional[StrictStr] = None,
        auth_psk__ic: Optional[StrictStr] = None,
        auth_psk__nic: Optional[StrictStr] = None,
        auth_psk__iew: Optional[StrictStr] = None,
        auth_psk__niew: Optional[StrictStr] = None,
        auth_psk__isw: Optional[StrictStr] = None,
        auth_psk__nisw: Optional[StrictStr] = None,
        auth_psk__ie: Optional[StrictStr] = None,
        auth_psk__nie: Optional[StrictStr] = None,
        auth_psk__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        tenant_group_id__n: Optional[StrictStr] = None,
        tenant_group__n: Optional[StrictStr] = None,
        tenant_id__n: Optional[StrictStr] = None,
        tenant__n: Optional[StrictStr] = None,
        group_id__n: Optional[StrictStr] = None,
        group__n: Optional[StrictStr] = None,
        status__n: Optional[StrictStr] = None,
        vlan_id__n: Optional[StrictStr] = None,
        auth_type__n: Optional[StrictStr] = None,
        auth_cipher__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_lans_list

        

        :param id: 
        :type id: str
        :param ssid: 
        :type ssid: str
        :param auth_psk: 
        :type auth_psk: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param tenant_group_id: 
        :type tenant_group_id: str
        :param tenant_group: 
        :type tenant_group: str
        :param tenant_id: 
        :type tenant_id: str
        :param tenant: 
        :type tenant: str
        :param group_id: 
        :type group_id: str
        :param group: 
        :type group: str
        :param status: 
        :type status: str
        :param vlan_id: 
        :type vlan_id: str
        :param auth_type: 
        :type auth_type: str
        :param auth_cipher: 
        :type auth_cipher: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param ssid__n: 
        :type ssid__n: str
        :param ssid__ic: 
        :type ssid__ic: str
        :param ssid__nic: 
        :type ssid__nic: str
        :param ssid__iew: 
        :type ssid__iew: str
        :param ssid__niew: 
        :type ssid__niew: str
        :param ssid__isw: 
        :type ssid__isw: str
        :param ssid__nisw: 
        :type ssid__nisw: str
        :param ssid__ie: 
        :type ssid__ie: str
        :param ssid__nie: 
        :type ssid__nie: str
        :param ssid__empty: 
        :type ssid__empty: str
        :param auth_psk__n: 
        :type auth_psk__n: str
        :param auth_psk__ic: 
        :type auth_psk__ic: str
        :param auth_psk__nic: 
        :type auth_psk__nic: str
        :param auth_psk__iew: 
        :type auth_psk__iew: str
        :param auth_psk__niew: 
        :type auth_psk__niew: str
        :param auth_psk__isw: 
        :type auth_psk__isw: str
        :param auth_psk__nisw: 
        :type auth_psk__nisw: str
        :param auth_psk__ie: 
        :type auth_psk__ie: str
        :param auth_psk__nie: 
        :type auth_psk__nie: str
        :param auth_psk__empty: 
        :type auth_psk__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param tenant_group_id__n: 
        :type tenant_group_id__n: str
        :param tenant_group__n: 
        :type tenant_group__n: str
        :param tenant_id__n: 
        :type tenant_id__n: str
        :param tenant__n: 
        :type tenant__n: str
        :param group_id__n: 
        :type group_id__n: str
        :param group__n: 
        :type group__n: str
        :param status__n: 
        :type status__n: str
        :param vlan_id__n: 
        :type vlan_id__n: str
        :param auth_type__n: 
        :type auth_type__n: str
        :param auth_cipher__n: 
        :type auth_cipher__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_list_serialize(
            id=id,
            ssid=ssid,
            auth_psk=auth_psk,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            tenant_group_id=tenant_group_id,
            tenant_group=tenant_group,
            tenant_id=tenant_id,
            tenant=tenant,
            group_id=group_id,
            group=group,
            status=status,
            vlan_id=vlan_id,
            auth_type=auth_type,
            auth_cipher=auth_cipher,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            ssid__n=ssid__n,
            ssid__ic=ssid__ic,
            ssid__nic=ssid__nic,
            ssid__iew=ssid__iew,
            ssid__niew=ssid__niew,
            ssid__isw=ssid__isw,
            ssid__nisw=ssid__nisw,
            ssid__ie=ssid__ie,
            ssid__nie=ssid__nie,
            ssid__empty=ssid__empty,
            auth_psk__n=auth_psk__n,
            auth_psk__ic=auth_psk__ic,
            auth_psk__nic=auth_psk__nic,
            auth_psk__iew=auth_psk__iew,
            auth_psk__niew=auth_psk__niew,
            auth_psk__isw=auth_psk__isw,
            auth_psk__nisw=auth_psk__nisw,
            auth_psk__ie=auth_psk__ie,
            auth_psk__nie=auth_psk__nie,
            auth_psk__empty=auth_psk__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            tenant_group_id__n=tenant_group_id__n,
            tenant_group__n=tenant_group__n,
            tenant_id__n=tenant_id__n,
            tenant__n=tenant__n,
            group_id__n=group_id__n,
            group__n=group__n,
            status__n=status__n,
            vlan_id__n=vlan_id__n,
            auth_type__n=auth_type__n,
            auth_cipher__n=auth_cipher__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessWirelessLansList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_lans_list_serialize(
        self,
        id,
        ssid,
        auth_psk,
        description,
        created,
        last_updated,
        q,
        tag,
        tenant_group_id,
        tenant_group,
        tenant_id,
        tenant,
        group_id,
        group,
        status,
        vlan_id,
        auth_type,
        auth_cipher,
        id__n,
        id__lte,
        id__lt,
        id__gte,
        id__gt,
        ssid__n,
        ssid__ic,
        ssid__nic,
        ssid__iew,
        ssid__niew,
        ssid__isw,
        ssid__nisw,
        ssid__ie,
        ssid__nie,
        ssid__empty,
        auth_psk__n,
        auth_psk__ic,
        auth_psk__nic,
        auth_psk__iew,
        auth_psk__niew,
        auth_psk__isw,
        auth_psk__nisw,
        auth_psk__ie,
        auth_psk__nie,
        auth_psk__empty,
        description__n,
        description__ic,
        description__nic,
        description__iew,
        description__niew,
        description__isw,
        description__nisw,
        description__ie,
        description__nie,
        description__empty,
        created__n,
        created__lte,
        created__lt,
        created__gte,
        created__gt,
        last_updated__n,
        last_updated__lte,
        last_updated__lt,
        last_updated__gte,
        last_updated__gt,
        tag__n,
        tenant_group_id__n,
        tenant_group__n,
        tenant_id__n,
        tenant__n,
        group_id__n,
        group__n,
        status__n,
        vlan_id__n,
        auth_type__n,
        auth_cipher__n,
        ordering,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if ssid is not None:
            
            _query_params.append(('ssid', ssid))
            
        if auth_psk is not None:
            
            _query_params.append(('auth_psk', auth_psk))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if created is not None:
            
            _query_params.append(('created', created))
            
        if last_updated is not None:
            
            _query_params.append(('last_updated', last_updated))
            
        if q is not None:
            
            _query_params.append(('q', q))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if tenant_group_id is not None:
            
            _query_params.append(('tenant_group_id', tenant_group_id))
            
        if tenant_group is not None:
            
            _query_params.append(('tenant_group', tenant_group))
            
        if tenant_id is not None:
            
            _query_params.append(('tenant_id', tenant_id))
            
        if tenant is not None:
            
            _query_params.append(('tenant', tenant))
            
        if group_id is not None:
            
            _query_params.append(('group_id', group_id))
            
        if group is not None:
            
            _query_params.append(('group', group))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if vlan_id is not None:
            
            _query_params.append(('vlan_id', vlan_id))
            
        if auth_type is not None:
            
            _query_params.append(('auth_type', auth_type))
            
        if auth_cipher is not None:
            
            _query_params.append(('auth_cipher', auth_cipher))
            
        if id__n is not None:
            
            _query_params.append(('id__n', id__n))
            
        if id__lte is not None:
            
            _query_params.append(('id__lte', id__lte))
            
        if id__lt is not None:
            
            _query_params.append(('id__lt', id__lt))
            
        if id__gte is not None:
            
            _query_params.append(('id__gte', id__gte))
            
        if id__gt is not None:
            
            _query_params.append(('id__gt', id__gt))
            
        if ssid__n is not None:
            
            _query_params.append(('ssid__n', ssid__n))
            
        if ssid__ic is not None:
            
            _query_params.append(('ssid__ic', ssid__ic))
            
        if ssid__nic is not None:
            
            _query_params.append(('ssid__nic', ssid__nic))
            
        if ssid__iew is not None:
            
            _query_params.append(('ssid__iew', ssid__iew))
            
        if ssid__niew is not None:
            
            _query_params.append(('ssid__niew', ssid__niew))
            
        if ssid__isw is not None:
            
            _query_params.append(('ssid__isw', ssid__isw))
            
        if ssid__nisw is not None:
            
            _query_params.append(('ssid__nisw', ssid__nisw))
            
        if ssid__ie is not None:
            
            _query_params.append(('ssid__ie', ssid__ie))
            
        if ssid__nie is not None:
            
            _query_params.append(('ssid__nie', ssid__nie))
            
        if ssid__empty is not None:
            
            _query_params.append(('ssid__empty', ssid__empty))
            
        if auth_psk__n is not None:
            
            _query_params.append(('auth_psk__n', auth_psk__n))
            
        if auth_psk__ic is not None:
            
            _query_params.append(('auth_psk__ic', auth_psk__ic))
            
        if auth_psk__nic is not None:
            
            _query_params.append(('auth_psk__nic', auth_psk__nic))
            
        if auth_psk__iew is not None:
            
            _query_params.append(('auth_psk__iew', auth_psk__iew))
            
        if auth_psk__niew is not None:
            
            _query_params.append(('auth_psk__niew', auth_psk__niew))
            
        if auth_psk__isw is not None:
            
            _query_params.append(('auth_psk__isw', auth_psk__isw))
            
        if auth_psk__nisw is not None:
            
            _query_params.append(('auth_psk__nisw', auth_psk__nisw))
            
        if auth_psk__ie is not None:
            
            _query_params.append(('auth_psk__ie', auth_psk__ie))
            
        if auth_psk__nie is not None:
            
            _query_params.append(('auth_psk__nie', auth_psk__nie))
            
        if auth_psk__empty is not None:
            
            _query_params.append(('auth_psk__empty', auth_psk__empty))
            
        if description__n is not None:
            
            _query_params.append(('description__n', description__n))
            
        if description__ic is not None:
            
            _query_params.append(('description__ic', description__ic))
            
        if description__nic is not None:
            
            _query_params.append(('description__nic', description__nic))
            
        if description__iew is not None:
            
            _query_params.append(('description__iew', description__iew))
            
        if description__niew is not None:
            
            _query_params.append(('description__niew', description__niew))
            
        if description__isw is not None:
            
            _query_params.append(('description__isw', description__isw))
            
        if description__nisw is not None:
            
            _query_params.append(('description__nisw', description__nisw))
            
        if description__ie is not None:
            
            _query_params.append(('description__ie', description__ie))
            
        if description__nie is not None:
            
            _query_params.append(('description__nie', description__nie))
            
        if description__empty is not None:
            
            _query_params.append(('description__empty', description__empty))
            
        if created__n is not None:
            
            _query_params.append(('created__n', created__n))
            
        if created__lte is not None:
            
            _query_params.append(('created__lte', created__lte))
            
        if created__lt is not None:
            
            _query_params.append(('created__lt', created__lt))
            
        if created__gte is not None:
            
            _query_params.append(('created__gte', created__gte))
            
        if created__gt is not None:
            
            _query_params.append(('created__gt', created__gt))
            
        if last_updated__n is not None:
            
            _query_params.append(('last_updated__n', last_updated__n))
            
        if last_updated__lte is not None:
            
            _query_params.append(('last_updated__lte', last_updated__lte))
            
        if last_updated__lt is not None:
            
            _query_params.append(('last_updated__lt', last_updated__lt))
            
        if last_updated__gte is not None:
            
            _query_params.append(('last_updated__gte', last_updated__gte))
            
        if last_updated__gt is not None:
            
            _query_params.append(('last_updated__gt', last_updated__gt))
            
        if tag__n is not None:
            
            _query_params.append(('tag__n', tag__n))
            
        if tenant_group_id__n is not None:
            
            _query_params.append(('tenant_group_id__n', tenant_group_id__n))
            
        if tenant_group__n is not None:
            
            _query_params.append(('tenant_group__n', tenant_group__n))
            
        if tenant_id__n is not None:
            
            _query_params.append(('tenant_id__n', tenant_id__n))
            
        if tenant__n is not None:
            
            _query_params.append(('tenant__n', tenant__n))
            
        if group_id__n is not None:
            
            _query_params.append(('group_id__n', group_id__n))
            
        if group__n is not None:
            
            _query_params.append(('group__n', group__n))
            
        if status__n is not None:
            
            _query_params.append(('status__n', status__n))
            
        if vlan_id__n is not None:
            
            _query_params.append(('vlan_id__n', vlan_id__n))
            
        if auth_type__n is not None:
            
            _query_params.append(('auth_type__n', auth_type__n))
            
        if auth_cipher__n is not None:
            
            _query_params.append(('auth_cipher__n', auth_cipher__n))
            
        if ordering is not None:
            
            _query_params.append(('ordering', ordering))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/wireless/wireless-lans/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wireless_wireless_lans_partial_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this Wireless LAN.")],
        writable_wireless_lan: WritableWirelessLAN,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WirelessLAN:
        """wireless_wireless_lans_partial_update

        

        :param id: A unique integer value identifying this Wireless LAN. (required)
        :type id: int
        :param writable_wireless_lan: (required)
        :type writable_wireless_lan: WritableWirelessLAN
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_partial_update_serialize(
            id=id,
            writable_wireless_lan=writable_wireless_lan,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLAN",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_lans_partial_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this Wireless LAN.")],
        writable_wireless_lan: WritableWirelessLAN,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WirelessLAN]:
        """wireless_wireless_lans_partial_update

        

        :param id: A unique integer value identifying this Wireless LAN. (required)
        :type id: int
        :param writable_wireless_lan: (required)
        :type writable_wireless_lan: WritableWirelessLAN
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_partial_update_serialize(
            id=id,
            writable_wireless_lan=writable_wireless_lan,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLAN",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_lans_partial_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this Wireless LAN.")],
        writable_wireless_lan: WritableWirelessLAN,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_lans_partial_update

        

        :param id: A unique integer value identifying this Wireless LAN. (required)
        :type id: int
        :param writable_wireless_lan: (required)
        :type writable_wireless_lan: WritableWirelessLAN
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_partial_update_serialize(
            id=id,
            writable_wireless_lan=writable_wireless_lan,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLAN",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_lans_partial_update_serialize(
        self,
        id,
        writable_wireless_lan,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_wireless_lan is not None:
            _body_params = writable_wireless_lan


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/wireless/wireless-lans/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wireless_wireless_lans_read(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this Wireless LAN.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WirelessLAN:
        """wireless_wireless_lans_read

        

        :param id: A unique integer value identifying this Wireless LAN. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLAN",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_lans_read_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this Wireless LAN.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WirelessLAN]:
        """wireless_wireless_lans_read

        

        :param id: A unique integer value identifying this Wireless LAN. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLAN",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_lans_read_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this Wireless LAN.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_lans_read

        

        :param id: A unique integer value identifying this Wireless LAN. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLAN",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_lans_read_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/wireless/wireless-lans/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wireless_wireless_lans_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this Wireless LAN.")],
        writable_wireless_lan: WritableWirelessLAN,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WirelessLAN:
        """wireless_wireless_lans_update

        

        :param id: A unique integer value identifying this Wireless LAN. (required)
        :type id: int
        :param writable_wireless_lan: (required)
        :type writable_wireless_lan: WritableWirelessLAN
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_update_serialize(
            id=id,
            writable_wireless_lan=writable_wireless_lan,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLAN",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_lans_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this Wireless LAN.")],
        writable_wireless_lan: WritableWirelessLAN,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WirelessLAN]:
        """wireless_wireless_lans_update

        

        :param id: A unique integer value identifying this Wireless LAN. (required)
        :type id: int
        :param writable_wireless_lan: (required)
        :type writable_wireless_lan: WritableWirelessLAN
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_update_serialize(
            id=id,
            writable_wireless_lan=writable_wireless_lan,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLAN",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_lans_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this Wireless LAN.")],
        writable_wireless_lan: WritableWirelessLAN,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_lans_update

        

        :param id: A unique integer value identifying this Wireless LAN. (required)
        :type id: int
        :param writable_wireless_lan: (required)
        :type writable_wireless_lan: WritableWirelessLAN
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_lans_update_serialize(
            id=id,
            writable_wireless_lan=writable_wireless_lan,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLAN",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_lans_update_serialize(
        self,
        id,
        writable_wireless_lan,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_wireless_lan is not None:
            _body_params = writable_wireless_lan


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/wireless/wireless-lans/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wireless_wireless_links_bulk_delete(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """wireless_wireless_links_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_links_bulk_delete_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """wireless_wireless_links_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_links_bulk_delete_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_links_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_links_bulk_delete_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/wireless/wireless-links/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wireless_wireless_links_bulk_partial_update(
        self,
        writable_wireless_link: WritableWirelessLink,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WirelessLink:
        """wireless_wireless_links_bulk_partial_update

        

        :param writable_wireless_link: (required)
        :type writable_wireless_link: WritableWirelessLink
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_bulk_partial_update_serialize(
            writable_wireless_link=writable_wireless_link,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLink",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_links_bulk_partial_update_with_http_info(
        self,
        writable_wireless_link: WritableWirelessLink,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WirelessLink]:
        """wireless_wireless_links_bulk_partial_update

        

        :param writable_wireless_link: (required)
        :type writable_wireless_link: WritableWirelessLink
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_bulk_partial_update_serialize(
            writable_wireless_link=writable_wireless_link,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLink",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_links_bulk_partial_update_without_preload_content(
        self,
        writable_wireless_link: WritableWirelessLink,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_links_bulk_partial_update

        

        :param writable_wireless_link: (required)
        :type writable_wireless_link: WritableWirelessLink
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_bulk_partial_update_serialize(
            writable_wireless_link=writable_wireless_link,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLink",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_links_bulk_partial_update_serialize(
        self,
        writable_wireless_link,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_wireless_link is not None:
            _body_params = writable_wireless_link


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/wireless/wireless-links/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wireless_wireless_links_bulk_update(
        self,
        writable_wireless_link: WritableWirelessLink,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WirelessLink:
        """wireless_wireless_links_bulk_update

        

        :param writable_wireless_link: (required)
        :type writable_wireless_link: WritableWirelessLink
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_bulk_update_serialize(
            writable_wireless_link=writable_wireless_link,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLink",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_links_bulk_update_with_http_info(
        self,
        writable_wireless_link: WritableWirelessLink,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WirelessLink]:
        """wireless_wireless_links_bulk_update

        

        :param writable_wireless_link: (required)
        :type writable_wireless_link: WritableWirelessLink
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_bulk_update_serialize(
            writable_wireless_link=writable_wireless_link,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLink",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_links_bulk_update_without_preload_content(
        self,
        writable_wireless_link: WritableWirelessLink,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_links_bulk_update

        

        :param writable_wireless_link: (required)
        :type writable_wireless_link: WritableWirelessLink
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_bulk_update_serialize(
            writable_wireless_link=writable_wireless_link,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLink",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_links_bulk_update_serialize(
        self,
        writable_wireless_link,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_wireless_link is not None:
            _body_params = writable_wireless_link


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/wireless/wireless-links/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wireless_wireless_links_create(
        self,
        writable_wireless_link: WritableWirelessLink,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WirelessLink:
        """wireless_wireless_links_create

        

        :param writable_wireless_link: (required)
        :type writable_wireless_link: WritableWirelessLink
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_create_serialize(
            writable_wireless_link=writable_wireless_link,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "WirelessLink",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_links_create_with_http_info(
        self,
        writable_wireless_link: WritableWirelessLink,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WirelessLink]:
        """wireless_wireless_links_create

        

        :param writable_wireless_link: (required)
        :type writable_wireless_link: WritableWirelessLink
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_create_serialize(
            writable_wireless_link=writable_wireless_link,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "WirelessLink",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_links_create_without_preload_content(
        self,
        writable_wireless_link: WritableWirelessLink,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_links_create

        

        :param writable_wireless_link: (required)
        :type writable_wireless_link: WritableWirelessLink
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_create_serialize(
            writable_wireless_link=writable_wireless_link,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "WirelessLink",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_links_create_serialize(
        self,
        writable_wireless_link,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_wireless_link is not None:
            _body_params = writable_wireless_link


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/wireless/wireless-links/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wireless_wireless_links_delete(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this wireless link.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """wireless_wireless_links_delete

        

        :param id: A unique integer value identifying this wireless link. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_links_delete_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this wireless link.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """wireless_wireless_links_delete

        

        :param id: A unique integer value identifying this wireless link. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_links_delete_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this wireless link.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_links_delete

        

        :param id: A unique integer value identifying this wireless link. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_links_delete_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/wireless/wireless-links/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wireless_wireless_links_list(
        self,
        id: Optional[StrictStr] = None,
        ssid: Optional[StrictStr] = None,
        auth_psk: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        tenant_group_id: Optional[StrictStr] = None,
        tenant_group: Optional[StrictStr] = None,
        tenant_id: Optional[StrictStr] = None,
        tenant: Optional[StrictStr] = None,
        interface_a_id: Optional[StrictStr] = None,
        interface_b_id: Optional[StrictStr] = None,
        status: Optional[StrictStr] = None,
        auth_type: Optional[StrictStr] = None,
        auth_cipher: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        ssid__n: Optional[StrictStr] = None,
        ssid__ic: Optional[StrictStr] = None,
        ssid__nic: Optional[StrictStr] = None,
        ssid__iew: Optional[StrictStr] = None,
        ssid__niew: Optional[StrictStr] = None,
        ssid__isw: Optional[StrictStr] = None,
        ssid__nisw: Optional[StrictStr] = None,
        ssid__ie: Optional[StrictStr] = None,
        ssid__nie: Optional[StrictStr] = None,
        ssid__empty: Optional[StrictStr] = None,
        auth_psk__n: Optional[StrictStr] = None,
        auth_psk__ic: Optional[StrictStr] = None,
        auth_psk__nic: Optional[StrictStr] = None,
        auth_psk__iew: Optional[StrictStr] = None,
        auth_psk__niew: Optional[StrictStr] = None,
        auth_psk__isw: Optional[StrictStr] = None,
        auth_psk__nisw: Optional[StrictStr] = None,
        auth_psk__ie: Optional[StrictStr] = None,
        auth_psk__nie: Optional[StrictStr] = None,
        auth_psk__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        tenant_group_id__n: Optional[StrictStr] = None,
        tenant_group__n: Optional[StrictStr] = None,
        tenant_id__n: Optional[StrictStr] = None,
        tenant__n: Optional[StrictStr] = None,
        interface_a_id__n: Optional[StrictStr] = None,
        interface_a_id__lte: Optional[StrictStr] = None,
        interface_a_id__lt: Optional[StrictStr] = None,
        interface_a_id__gte: Optional[StrictStr] = None,
        interface_a_id__gt: Optional[StrictStr] = None,
        interface_b_id__n: Optional[StrictStr] = None,
        interface_b_id__lte: Optional[StrictStr] = None,
        interface_b_id__lt: Optional[StrictStr] = None,
        interface_b_id__gte: Optional[StrictStr] = None,
        interface_b_id__gt: Optional[StrictStr] = None,
        status__n: Optional[StrictStr] = None,
        auth_type__n: Optional[StrictStr] = None,
        auth_cipher__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WirelessWirelessLinksList200Response:
        """wireless_wireless_links_list

        

        :param id: 
        :type id: str
        :param ssid: 
        :type ssid: str
        :param auth_psk: 
        :type auth_psk: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param tenant_group_id: 
        :type tenant_group_id: str
        :param tenant_group: 
        :type tenant_group: str
        :param tenant_id: 
        :type tenant_id: str
        :param tenant: 
        :type tenant: str
        :param interface_a_id: 
        :type interface_a_id: str
        :param interface_b_id: 
        :type interface_b_id: str
        :param status: 
        :type status: str
        :param auth_type: 
        :type auth_type: str
        :param auth_cipher: 
        :type auth_cipher: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param ssid__n: 
        :type ssid__n: str
        :param ssid__ic: 
        :type ssid__ic: str
        :param ssid__nic: 
        :type ssid__nic: str
        :param ssid__iew: 
        :type ssid__iew: str
        :param ssid__niew: 
        :type ssid__niew: str
        :param ssid__isw: 
        :type ssid__isw: str
        :param ssid__nisw: 
        :type ssid__nisw: str
        :param ssid__ie: 
        :type ssid__ie: str
        :param ssid__nie: 
        :type ssid__nie: str
        :param ssid__empty: 
        :type ssid__empty: str
        :param auth_psk__n: 
        :type auth_psk__n: str
        :param auth_psk__ic: 
        :type auth_psk__ic: str
        :param auth_psk__nic: 
        :type auth_psk__nic: str
        :param auth_psk__iew: 
        :type auth_psk__iew: str
        :param auth_psk__niew: 
        :type auth_psk__niew: str
        :param auth_psk__isw: 
        :type auth_psk__isw: str
        :param auth_psk__nisw: 
        :type auth_psk__nisw: str
        :param auth_psk__ie: 
        :type auth_psk__ie: str
        :param auth_psk__nie: 
        :type auth_psk__nie: str
        :param auth_psk__empty: 
        :type auth_psk__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param tenant_group_id__n: 
        :type tenant_group_id__n: str
        :param tenant_group__n: 
        :type tenant_group__n: str
        :param tenant_id__n: 
        :type tenant_id__n: str
        :param tenant__n: 
        :type tenant__n: str
        :param interface_a_id__n: 
        :type interface_a_id__n: str
        :param interface_a_id__lte: 
        :type interface_a_id__lte: str
        :param interface_a_id__lt: 
        :type interface_a_id__lt: str
        :param interface_a_id__gte: 
        :type interface_a_id__gte: str
        :param interface_a_id__gt: 
        :type interface_a_id__gt: str
        :param interface_b_id__n: 
        :type interface_b_id__n: str
        :param interface_b_id__lte: 
        :type interface_b_id__lte: str
        :param interface_b_id__lt: 
        :type interface_b_id__lt: str
        :param interface_b_id__gte: 
        :type interface_b_id__gte: str
        :param interface_b_id__gt: 
        :type interface_b_id__gt: str
        :param status__n: 
        :type status__n: str
        :param auth_type__n: 
        :type auth_type__n: str
        :param auth_cipher__n: 
        :type auth_cipher__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_list_serialize(
            id=id,
            ssid=ssid,
            auth_psk=auth_psk,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            tenant_group_id=tenant_group_id,
            tenant_group=tenant_group,
            tenant_id=tenant_id,
            tenant=tenant,
            interface_a_id=interface_a_id,
            interface_b_id=interface_b_id,
            status=status,
            auth_type=auth_type,
            auth_cipher=auth_cipher,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            ssid__n=ssid__n,
            ssid__ic=ssid__ic,
            ssid__nic=ssid__nic,
            ssid__iew=ssid__iew,
            ssid__niew=ssid__niew,
            ssid__isw=ssid__isw,
            ssid__nisw=ssid__nisw,
            ssid__ie=ssid__ie,
            ssid__nie=ssid__nie,
            ssid__empty=ssid__empty,
            auth_psk__n=auth_psk__n,
            auth_psk__ic=auth_psk__ic,
            auth_psk__nic=auth_psk__nic,
            auth_psk__iew=auth_psk__iew,
            auth_psk__niew=auth_psk__niew,
            auth_psk__isw=auth_psk__isw,
            auth_psk__nisw=auth_psk__nisw,
            auth_psk__ie=auth_psk__ie,
            auth_psk__nie=auth_psk__nie,
            auth_psk__empty=auth_psk__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            tenant_group_id__n=tenant_group_id__n,
            tenant_group__n=tenant_group__n,
            tenant_id__n=tenant_id__n,
            tenant__n=tenant__n,
            interface_a_id__n=interface_a_id__n,
            interface_a_id__lte=interface_a_id__lte,
            interface_a_id__lt=interface_a_id__lt,
            interface_a_id__gte=interface_a_id__gte,
            interface_a_id__gt=interface_a_id__gt,
            interface_b_id__n=interface_b_id__n,
            interface_b_id__lte=interface_b_id__lte,
            interface_b_id__lt=interface_b_id__lt,
            interface_b_id__gte=interface_b_id__gte,
            interface_b_id__gt=interface_b_id__gt,
            status__n=status__n,
            auth_type__n=auth_type__n,
            auth_cipher__n=auth_cipher__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessWirelessLinksList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_links_list_with_http_info(
        self,
        id: Optional[StrictStr] = None,
        ssid: Optional[StrictStr] = None,
        auth_psk: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        tenant_group_id: Optional[StrictStr] = None,
        tenant_group: Optional[StrictStr] = None,
        tenant_id: Optional[StrictStr] = None,
        tenant: Optional[StrictStr] = None,
        interface_a_id: Optional[StrictStr] = None,
        interface_b_id: Optional[StrictStr] = None,
        status: Optional[StrictStr] = None,
        auth_type: Optional[StrictStr] = None,
        auth_cipher: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        ssid__n: Optional[StrictStr] = None,
        ssid__ic: Optional[StrictStr] = None,
        ssid__nic: Optional[StrictStr] = None,
        ssid__iew: Optional[StrictStr] = None,
        ssid__niew: Optional[StrictStr] = None,
        ssid__isw: Optional[StrictStr] = None,
        ssid__nisw: Optional[StrictStr] = None,
        ssid__ie: Optional[StrictStr] = None,
        ssid__nie: Optional[StrictStr] = None,
        ssid__empty: Optional[StrictStr] = None,
        auth_psk__n: Optional[StrictStr] = None,
        auth_psk__ic: Optional[StrictStr] = None,
        auth_psk__nic: Optional[StrictStr] = None,
        auth_psk__iew: Optional[StrictStr] = None,
        auth_psk__niew: Optional[StrictStr] = None,
        auth_psk__isw: Optional[StrictStr] = None,
        auth_psk__nisw: Optional[StrictStr] = None,
        auth_psk__ie: Optional[StrictStr] = None,
        auth_psk__nie: Optional[StrictStr] = None,
        auth_psk__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        tenant_group_id__n: Optional[StrictStr] = None,
        tenant_group__n: Optional[StrictStr] = None,
        tenant_id__n: Optional[StrictStr] = None,
        tenant__n: Optional[StrictStr] = None,
        interface_a_id__n: Optional[StrictStr] = None,
        interface_a_id__lte: Optional[StrictStr] = None,
        interface_a_id__lt: Optional[StrictStr] = None,
        interface_a_id__gte: Optional[StrictStr] = None,
        interface_a_id__gt: Optional[StrictStr] = None,
        interface_b_id__n: Optional[StrictStr] = None,
        interface_b_id__lte: Optional[StrictStr] = None,
        interface_b_id__lt: Optional[StrictStr] = None,
        interface_b_id__gte: Optional[StrictStr] = None,
        interface_b_id__gt: Optional[StrictStr] = None,
        status__n: Optional[StrictStr] = None,
        auth_type__n: Optional[StrictStr] = None,
        auth_cipher__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WirelessWirelessLinksList200Response]:
        """wireless_wireless_links_list

        

        :param id: 
        :type id: str
        :param ssid: 
        :type ssid: str
        :param auth_psk: 
        :type auth_psk: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param tenant_group_id: 
        :type tenant_group_id: str
        :param tenant_group: 
        :type tenant_group: str
        :param tenant_id: 
        :type tenant_id: str
        :param tenant: 
        :type tenant: str
        :param interface_a_id: 
        :type interface_a_id: str
        :param interface_b_id: 
        :type interface_b_id: str
        :param status: 
        :type status: str
        :param auth_type: 
        :type auth_type: str
        :param auth_cipher: 
        :type auth_cipher: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param ssid__n: 
        :type ssid__n: str
        :param ssid__ic: 
        :type ssid__ic: str
        :param ssid__nic: 
        :type ssid__nic: str
        :param ssid__iew: 
        :type ssid__iew: str
        :param ssid__niew: 
        :type ssid__niew: str
        :param ssid__isw: 
        :type ssid__isw: str
        :param ssid__nisw: 
        :type ssid__nisw: str
        :param ssid__ie: 
        :type ssid__ie: str
        :param ssid__nie: 
        :type ssid__nie: str
        :param ssid__empty: 
        :type ssid__empty: str
        :param auth_psk__n: 
        :type auth_psk__n: str
        :param auth_psk__ic: 
        :type auth_psk__ic: str
        :param auth_psk__nic: 
        :type auth_psk__nic: str
        :param auth_psk__iew: 
        :type auth_psk__iew: str
        :param auth_psk__niew: 
        :type auth_psk__niew: str
        :param auth_psk__isw: 
        :type auth_psk__isw: str
        :param auth_psk__nisw: 
        :type auth_psk__nisw: str
        :param auth_psk__ie: 
        :type auth_psk__ie: str
        :param auth_psk__nie: 
        :type auth_psk__nie: str
        :param auth_psk__empty: 
        :type auth_psk__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param tenant_group_id__n: 
        :type tenant_group_id__n: str
        :param tenant_group__n: 
        :type tenant_group__n: str
        :param tenant_id__n: 
        :type tenant_id__n: str
        :param tenant__n: 
        :type tenant__n: str
        :param interface_a_id__n: 
        :type interface_a_id__n: str
        :param interface_a_id__lte: 
        :type interface_a_id__lte: str
        :param interface_a_id__lt: 
        :type interface_a_id__lt: str
        :param interface_a_id__gte: 
        :type interface_a_id__gte: str
        :param interface_a_id__gt: 
        :type interface_a_id__gt: str
        :param interface_b_id__n: 
        :type interface_b_id__n: str
        :param interface_b_id__lte: 
        :type interface_b_id__lte: str
        :param interface_b_id__lt: 
        :type interface_b_id__lt: str
        :param interface_b_id__gte: 
        :type interface_b_id__gte: str
        :param interface_b_id__gt: 
        :type interface_b_id__gt: str
        :param status__n: 
        :type status__n: str
        :param auth_type__n: 
        :type auth_type__n: str
        :param auth_cipher__n: 
        :type auth_cipher__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_list_serialize(
            id=id,
            ssid=ssid,
            auth_psk=auth_psk,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            tenant_group_id=tenant_group_id,
            tenant_group=tenant_group,
            tenant_id=tenant_id,
            tenant=tenant,
            interface_a_id=interface_a_id,
            interface_b_id=interface_b_id,
            status=status,
            auth_type=auth_type,
            auth_cipher=auth_cipher,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            ssid__n=ssid__n,
            ssid__ic=ssid__ic,
            ssid__nic=ssid__nic,
            ssid__iew=ssid__iew,
            ssid__niew=ssid__niew,
            ssid__isw=ssid__isw,
            ssid__nisw=ssid__nisw,
            ssid__ie=ssid__ie,
            ssid__nie=ssid__nie,
            ssid__empty=ssid__empty,
            auth_psk__n=auth_psk__n,
            auth_psk__ic=auth_psk__ic,
            auth_psk__nic=auth_psk__nic,
            auth_psk__iew=auth_psk__iew,
            auth_psk__niew=auth_psk__niew,
            auth_psk__isw=auth_psk__isw,
            auth_psk__nisw=auth_psk__nisw,
            auth_psk__ie=auth_psk__ie,
            auth_psk__nie=auth_psk__nie,
            auth_psk__empty=auth_psk__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            tenant_group_id__n=tenant_group_id__n,
            tenant_group__n=tenant_group__n,
            tenant_id__n=tenant_id__n,
            tenant__n=tenant__n,
            interface_a_id__n=interface_a_id__n,
            interface_a_id__lte=interface_a_id__lte,
            interface_a_id__lt=interface_a_id__lt,
            interface_a_id__gte=interface_a_id__gte,
            interface_a_id__gt=interface_a_id__gt,
            interface_b_id__n=interface_b_id__n,
            interface_b_id__lte=interface_b_id__lte,
            interface_b_id__lt=interface_b_id__lt,
            interface_b_id__gte=interface_b_id__gte,
            interface_b_id__gt=interface_b_id__gt,
            status__n=status__n,
            auth_type__n=auth_type__n,
            auth_cipher__n=auth_cipher__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessWirelessLinksList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_links_list_without_preload_content(
        self,
        id: Optional[StrictStr] = None,
        ssid: Optional[StrictStr] = None,
        auth_psk: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        tenant_group_id: Optional[StrictStr] = None,
        tenant_group: Optional[StrictStr] = None,
        tenant_id: Optional[StrictStr] = None,
        tenant: Optional[StrictStr] = None,
        interface_a_id: Optional[StrictStr] = None,
        interface_b_id: Optional[StrictStr] = None,
        status: Optional[StrictStr] = None,
        auth_type: Optional[StrictStr] = None,
        auth_cipher: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        ssid__n: Optional[StrictStr] = None,
        ssid__ic: Optional[StrictStr] = None,
        ssid__nic: Optional[StrictStr] = None,
        ssid__iew: Optional[StrictStr] = None,
        ssid__niew: Optional[StrictStr] = None,
        ssid__isw: Optional[StrictStr] = None,
        ssid__nisw: Optional[StrictStr] = None,
        ssid__ie: Optional[StrictStr] = None,
        ssid__nie: Optional[StrictStr] = None,
        ssid__empty: Optional[StrictStr] = None,
        auth_psk__n: Optional[StrictStr] = None,
        auth_psk__ic: Optional[StrictStr] = None,
        auth_psk__nic: Optional[StrictStr] = None,
        auth_psk__iew: Optional[StrictStr] = None,
        auth_psk__niew: Optional[StrictStr] = None,
        auth_psk__isw: Optional[StrictStr] = None,
        auth_psk__nisw: Optional[StrictStr] = None,
        auth_psk__ie: Optional[StrictStr] = None,
        auth_psk__nie: Optional[StrictStr] = None,
        auth_psk__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        tenant_group_id__n: Optional[StrictStr] = None,
        tenant_group__n: Optional[StrictStr] = None,
        tenant_id__n: Optional[StrictStr] = None,
        tenant__n: Optional[StrictStr] = None,
        interface_a_id__n: Optional[StrictStr] = None,
        interface_a_id__lte: Optional[StrictStr] = None,
        interface_a_id__lt: Optional[StrictStr] = None,
        interface_a_id__gte: Optional[StrictStr] = None,
        interface_a_id__gt: Optional[StrictStr] = None,
        interface_b_id__n: Optional[StrictStr] = None,
        interface_b_id__lte: Optional[StrictStr] = None,
        interface_b_id__lt: Optional[StrictStr] = None,
        interface_b_id__gte: Optional[StrictStr] = None,
        interface_b_id__gt: Optional[StrictStr] = None,
        status__n: Optional[StrictStr] = None,
        auth_type__n: Optional[StrictStr] = None,
        auth_cipher__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_links_list

        

        :param id: 
        :type id: str
        :param ssid: 
        :type ssid: str
        :param auth_psk: 
        :type auth_psk: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param tenant_group_id: 
        :type tenant_group_id: str
        :param tenant_group: 
        :type tenant_group: str
        :param tenant_id: 
        :type tenant_id: str
        :param tenant: 
        :type tenant: str
        :param interface_a_id: 
        :type interface_a_id: str
        :param interface_b_id: 
        :type interface_b_id: str
        :param status: 
        :type status: str
        :param auth_type: 
        :type auth_type: str
        :param auth_cipher: 
        :type auth_cipher: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param ssid__n: 
        :type ssid__n: str
        :param ssid__ic: 
        :type ssid__ic: str
        :param ssid__nic: 
        :type ssid__nic: str
        :param ssid__iew: 
        :type ssid__iew: str
        :param ssid__niew: 
        :type ssid__niew: str
        :param ssid__isw: 
        :type ssid__isw: str
        :param ssid__nisw: 
        :type ssid__nisw: str
        :param ssid__ie: 
        :type ssid__ie: str
        :param ssid__nie: 
        :type ssid__nie: str
        :param ssid__empty: 
        :type ssid__empty: str
        :param auth_psk__n: 
        :type auth_psk__n: str
        :param auth_psk__ic: 
        :type auth_psk__ic: str
        :param auth_psk__nic: 
        :type auth_psk__nic: str
        :param auth_psk__iew: 
        :type auth_psk__iew: str
        :param auth_psk__niew: 
        :type auth_psk__niew: str
        :param auth_psk__isw: 
        :type auth_psk__isw: str
        :param auth_psk__nisw: 
        :type auth_psk__nisw: str
        :param auth_psk__ie: 
        :type auth_psk__ie: str
        :param auth_psk__nie: 
        :type auth_psk__nie: str
        :param auth_psk__empty: 
        :type auth_psk__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param tenant_group_id__n: 
        :type tenant_group_id__n: str
        :param tenant_group__n: 
        :type tenant_group__n: str
        :param tenant_id__n: 
        :type tenant_id__n: str
        :param tenant__n: 
        :type tenant__n: str
        :param interface_a_id__n: 
        :type interface_a_id__n: str
        :param interface_a_id__lte: 
        :type interface_a_id__lte: str
        :param interface_a_id__lt: 
        :type interface_a_id__lt: str
        :param interface_a_id__gte: 
        :type interface_a_id__gte: str
        :param interface_a_id__gt: 
        :type interface_a_id__gt: str
        :param interface_b_id__n: 
        :type interface_b_id__n: str
        :param interface_b_id__lte: 
        :type interface_b_id__lte: str
        :param interface_b_id__lt: 
        :type interface_b_id__lt: str
        :param interface_b_id__gte: 
        :type interface_b_id__gte: str
        :param interface_b_id__gt: 
        :type interface_b_id__gt: str
        :param status__n: 
        :type status__n: str
        :param auth_type__n: 
        :type auth_type__n: str
        :param auth_cipher__n: 
        :type auth_cipher__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_list_serialize(
            id=id,
            ssid=ssid,
            auth_psk=auth_psk,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            tenant_group_id=tenant_group_id,
            tenant_group=tenant_group,
            tenant_id=tenant_id,
            tenant=tenant,
            interface_a_id=interface_a_id,
            interface_b_id=interface_b_id,
            status=status,
            auth_type=auth_type,
            auth_cipher=auth_cipher,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            ssid__n=ssid__n,
            ssid__ic=ssid__ic,
            ssid__nic=ssid__nic,
            ssid__iew=ssid__iew,
            ssid__niew=ssid__niew,
            ssid__isw=ssid__isw,
            ssid__nisw=ssid__nisw,
            ssid__ie=ssid__ie,
            ssid__nie=ssid__nie,
            ssid__empty=ssid__empty,
            auth_psk__n=auth_psk__n,
            auth_psk__ic=auth_psk__ic,
            auth_psk__nic=auth_psk__nic,
            auth_psk__iew=auth_psk__iew,
            auth_psk__niew=auth_psk__niew,
            auth_psk__isw=auth_psk__isw,
            auth_psk__nisw=auth_psk__nisw,
            auth_psk__ie=auth_psk__ie,
            auth_psk__nie=auth_psk__nie,
            auth_psk__empty=auth_psk__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            tenant_group_id__n=tenant_group_id__n,
            tenant_group__n=tenant_group__n,
            tenant_id__n=tenant_id__n,
            tenant__n=tenant__n,
            interface_a_id__n=interface_a_id__n,
            interface_a_id__lte=interface_a_id__lte,
            interface_a_id__lt=interface_a_id__lt,
            interface_a_id__gte=interface_a_id__gte,
            interface_a_id__gt=interface_a_id__gt,
            interface_b_id__n=interface_b_id__n,
            interface_b_id__lte=interface_b_id__lte,
            interface_b_id__lt=interface_b_id__lt,
            interface_b_id__gte=interface_b_id__gte,
            interface_b_id__gt=interface_b_id__gt,
            status__n=status__n,
            auth_type__n=auth_type__n,
            auth_cipher__n=auth_cipher__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessWirelessLinksList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_links_list_serialize(
        self,
        id,
        ssid,
        auth_psk,
        description,
        created,
        last_updated,
        q,
        tag,
        tenant_group_id,
        tenant_group,
        tenant_id,
        tenant,
        interface_a_id,
        interface_b_id,
        status,
        auth_type,
        auth_cipher,
        id__n,
        id__lte,
        id__lt,
        id__gte,
        id__gt,
        ssid__n,
        ssid__ic,
        ssid__nic,
        ssid__iew,
        ssid__niew,
        ssid__isw,
        ssid__nisw,
        ssid__ie,
        ssid__nie,
        ssid__empty,
        auth_psk__n,
        auth_psk__ic,
        auth_psk__nic,
        auth_psk__iew,
        auth_psk__niew,
        auth_psk__isw,
        auth_psk__nisw,
        auth_psk__ie,
        auth_psk__nie,
        auth_psk__empty,
        description__n,
        description__ic,
        description__nic,
        description__iew,
        description__niew,
        description__isw,
        description__nisw,
        description__ie,
        description__nie,
        description__empty,
        created__n,
        created__lte,
        created__lt,
        created__gte,
        created__gt,
        last_updated__n,
        last_updated__lte,
        last_updated__lt,
        last_updated__gte,
        last_updated__gt,
        tag__n,
        tenant_group_id__n,
        tenant_group__n,
        tenant_id__n,
        tenant__n,
        interface_a_id__n,
        interface_a_id__lte,
        interface_a_id__lt,
        interface_a_id__gte,
        interface_a_id__gt,
        interface_b_id__n,
        interface_b_id__lte,
        interface_b_id__lt,
        interface_b_id__gte,
        interface_b_id__gt,
        status__n,
        auth_type__n,
        auth_cipher__n,
        ordering,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if ssid is not None:
            
            _query_params.append(('ssid', ssid))
            
        if auth_psk is not None:
            
            _query_params.append(('auth_psk', auth_psk))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if created is not None:
            
            _query_params.append(('created', created))
            
        if last_updated is not None:
            
            _query_params.append(('last_updated', last_updated))
            
        if q is not None:
            
            _query_params.append(('q', q))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if tenant_group_id is not None:
            
            _query_params.append(('tenant_group_id', tenant_group_id))
            
        if tenant_group is not None:
            
            _query_params.append(('tenant_group', tenant_group))
            
        if tenant_id is not None:
            
            _query_params.append(('tenant_id', tenant_id))
            
        if tenant is not None:
            
            _query_params.append(('tenant', tenant))
            
        if interface_a_id is not None:
            
            _query_params.append(('interface_a_id', interface_a_id))
            
        if interface_b_id is not None:
            
            _query_params.append(('interface_b_id', interface_b_id))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if auth_type is not None:
            
            _query_params.append(('auth_type', auth_type))
            
        if auth_cipher is not None:
            
            _query_params.append(('auth_cipher', auth_cipher))
            
        if id__n is not None:
            
            _query_params.append(('id__n', id__n))
            
        if id__lte is not None:
            
            _query_params.append(('id__lte', id__lte))
            
        if id__lt is not None:
            
            _query_params.append(('id__lt', id__lt))
            
        if id__gte is not None:
            
            _query_params.append(('id__gte', id__gte))
            
        if id__gt is not None:
            
            _query_params.append(('id__gt', id__gt))
            
        if ssid__n is not None:
            
            _query_params.append(('ssid__n', ssid__n))
            
        if ssid__ic is not None:
            
            _query_params.append(('ssid__ic', ssid__ic))
            
        if ssid__nic is not None:
            
            _query_params.append(('ssid__nic', ssid__nic))
            
        if ssid__iew is not None:
            
            _query_params.append(('ssid__iew', ssid__iew))
            
        if ssid__niew is not None:
            
            _query_params.append(('ssid__niew', ssid__niew))
            
        if ssid__isw is not None:
            
            _query_params.append(('ssid__isw', ssid__isw))
            
        if ssid__nisw is not None:
            
            _query_params.append(('ssid__nisw', ssid__nisw))
            
        if ssid__ie is not None:
            
            _query_params.append(('ssid__ie', ssid__ie))
            
        if ssid__nie is not None:
            
            _query_params.append(('ssid__nie', ssid__nie))
            
        if ssid__empty is not None:
            
            _query_params.append(('ssid__empty', ssid__empty))
            
        if auth_psk__n is not None:
            
            _query_params.append(('auth_psk__n', auth_psk__n))
            
        if auth_psk__ic is not None:
            
            _query_params.append(('auth_psk__ic', auth_psk__ic))
            
        if auth_psk__nic is not None:
            
            _query_params.append(('auth_psk__nic', auth_psk__nic))
            
        if auth_psk__iew is not None:
            
            _query_params.append(('auth_psk__iew', auth_psk__iew))
            
        if auth_psk__niew is not None:
            
            _query_params.append(('auth_psk__niew', auth_psk__niew))
            
        if auth_psk__isw is not None:
            
            _query_params.append(('auth_psk__isw', auth_psk__isw))
            
        if auth_psk__nisw is not None:
            
            _query_params.append(('auth_psk__nisw', auth_psk__nisw))
            
        if auth_psk__ie is not None:
            
            _query_params.append(('auth_psk__ie', auth_psk__ie))
            
        if auth_psk__nie is not None:
            
            _query_params.append(('auth_psk__nie', auth_psk__nie))
            
        if auth_psk__empty is not None:
            
            _query_params.append(('auth_psk__empty', auth_psk__empty))
            
        if description__n is not None:
            
            _query_params.append(('description__n', description__n))
            
        if description__ic is not None:
            
            _query_params.append(('description__ic', description__ic))
            
        if description__nic is not None:
            
            _query_params.append(('description__nic', description__nic))
            
        if description__iew is not None:
            
            _query_params.append(('description__iew', description__iew))
            
        if description__niew is not None:
            
            _query_params.append(('description__niew', description__niew))
            
        if description__isw is not None:
            
            _query_params.append(('description__isw', description__isw))
            
        if description__nisw is not None:
            
            _query_params.append(('description__nisw', description__nisw))
            
        if description__ie is not None:
            
            _query_params.append(('description__ie', description__ie))
            
        if description__nie is not None:
            
            _query_params.append(('description__nie', description__nie))
            
        if description__empty is not None:
            
            _query_params.append(('description__empty', description__empty))
            
        if created__n is not None:
            
            _query_params.append(('created__n', created__n))
            
        if created__lte is not None:
            
            _query_params.append(('created__lte', created__lte))
            
        if created__lt is not None:
            
            _query_params.append(('created__lt', created__lt))
            
        if created__gte is not None:
            
            _query_params.append(('created__gte', created__gte))
            
        if created__gt is not None:
            
            _query_params.append(('created__gt', created__gt))
            
        if last_updated__n is not None:
            
            _query_params.append(('last_updated__n', last_updated__n))
            
        if last_updated__lte is not None:
            
            _query_params.append(('last_updated__lte', last_updated__lte))
            
        if last_updated__lt is not None:
            
            _query_params.append(('last_updated__lt', last_updated__lt))
            
        if last_updated__gte is not None:
            
            _query_params.append(('last_updated__gte', last_updated__gte))
            
        if last_updated__gt is not None:
            
            _query_params.append(('last_updated__gt', last_updated__gt))
            
        if tag__n is not None:
            
            _query_params.append(('tag__n', tag__n))
            
        if tenant_group_id__n is not None:
            
            _query_params.append(('tenant_group_id__n', tenant_group_id__n))
            
        if tenant_group__n is not None:
            
            _query_params.append(('tenant_group__n', tenant_group__n))
            
        if tenant_id__n is not None:
            
            _query_params.append(('tenant_id__n', tenant_id__n))
            
        if tenant__n is not None:
            
            _query_params.append(('tenant__n', tenant__n))
            
        if interface_a_id__n is not None:
            
            _query_params.append(('interface_a_id__n', interface_a_id__n))
            
        if interface_a_id__lte is not None:
            
            _query_params.append(('interface_a_id__lte', interface_a_id__lte))
            
        if interface_a_id__lt is not None:
            
            _query_params.append(('interface_a_id__lt', interface_a_id__lt))
            
        if interface_a_id__gte is not None:
            
            _query_params.append(('interface_a_id__gte', interface_a_id__gte))
            
        if interface_a_id__gt is not None:
            
            _query_params.append(('interface_a_id__gt', interface_a_id__gt))
            
        if interface_b_id__n is not None:
            
            _query_params.append(('interface_b_id__n', interface_b_id__n))
            
        if interface_b_id__lte is not None:
            
            _query_params.append(('interface_b_id__lte', interface_b_id__lte))
            
        if interface_b_id__lt is not None:
            
            _query_params.append(('interface_b_id__lt', interface_b_id__lt))
            
        if interface_b_id__gte is not None:
            
            _query_params.append(('interface_b_id__gte', interface_b_id__gte))
            
        if interface_b_id__gt is not None:
            
            _query_params.append(('interface_b_id__gt', interface_b_id__gt))
            
        if status__n is not None:
            
            _query_params.append(('status__n', status__n))
            
        if auth_type__n is not None:
            
            _query_params.append(('auth_type__n', auth_type__n))
            
        if auth_cipher__n is not None:
            
            _query_params.append(('auth_cipher__n', auth_cipher__n))
            
        if ordering is not None:
            
            _query_params.append(('ordering', ordering))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/wireless/wireless-links/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wireless_wireless_links_partial_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this wireless link.")],
        writable_wireless_link: WritableWirelessLink,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WirelessLink:
        """wireless_wireless_links_partial_update

        

        :param id: A unique integer value identifying this wireless link. (required)
        :type id: int
        :param writable_wireless_link: (required)
        :type writable_wireless_link: WritableWirelessLink
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_partial_update_serialize(
            id=id,
            writable_wireless_link=writable_wireless_link,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLink",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_links_partial_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this wireless link.")],
        writable_wireless_link: WritableWirelessLink,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WirelessLink]:
        """wireless_wireless_links_partial_update

        

        :param id: A unique integer value identifying this wireless link. (required)
        :type id: int
        :param writable_wireless_link: (required)
        :type writable_wireless_link: WritableWirelessLink
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_partial_update_serialize(
            id=id,
            writable_wireless_link=writable_wireless_link,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLink",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_links_partial_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this wireless link.")],
        writable_wireless_link: WritableWirelessLink,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_links_partial_update

        

        :param id: A unique integer value identifying this wireless link. (required)
        :type id: int
        :param writable_wireless_link: (required)
        :type writable_wireless_link: WritableWirelessLink
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_partial_update_serialize(
            id=id,
            writable_wireless_link=writable_wireless_link,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLink",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_links_partial_update_serialize(
        self,
        id,
        writable_wireless_link,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_wireless_link is not None:
            _body_params = writable_wireless_link


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/wireless/wireless-links/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wireless_wireless_links_read(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this wireless link.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WirelessLink:
        """wireless_wireless_links_read

        

        :param id: A unique integer value identifying this wireless link. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLink",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_links_read_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this wireless link.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WirelessLink]:
        """wireless_wireless_links_read

        

        :param id: A unique integer value identifying this wireless link. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLink",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_links_read_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this wireless link.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_links_read

        

        :param id: A unique integer value identifying this wireless link. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLink",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_links_read_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/wireless/wireless-links/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def wireless_wireless_links_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this wireless link.")],
        writable_wireless_link: WritableWirelessLink,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WirelessLink:
        """wireless_wireless_links_update

        

        :param id: A unique integer value identifying this wireless link. (required)
        :type id: int
        :param writable_wireless_link: (required)
        :type writable_wireless_link: WritableWirelessLink
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_update_serialize(
            id=id,
            writable_wireless_link=writable_wireless_link,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLink",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def wireless_wireless_links_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this wireless link.")],
        writable_wireless_link: WritableWirelessLink,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WirelessLink]:
        """wireless_wireless_links_update

        

        :param id: A unique integer value identifying this wireless link. (required)
        :type id: int
        :param writable_wireless_link: (required)
        :type writable_wireless_link: WritableWirelessLink
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_update_serialize(
            id=id,
            writable_wireless_link=writable_wireless_link,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLink",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def wireless_wireless_links_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this wireless link.")],
        writable_wireless_link: WritableWirelessLink,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """wireless_wireless_links_update

        

        :param id: A unique integer value identifying this wireless link. (required)
        :type id: int
        :param writable_wireless_link: (required)
        :type writable_wireless_link: WritableWirelessLink
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._wireless_wireless_links_update_serialize(
            id=id,
            writable_wireless_link=writable_wireless_link,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WirelessLink",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _wireless_wireless_links_update_serialize(
        self,
        id,
        writable_wireless_link,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_wireless_link is not None:
            _body_params = writable_wireless_link


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/wireless/wireless-links/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.contact import Contact
from openapi_client.models.contact_assignment import ContactAssignment
from openapi_client.models.contact_group import ContactGroup
from openapi_client.models.contact_role import ContactRole
from openapi_client.models.tenancy_contact_assignments_list200_response import TenancyContactAssignmentsList200Response
from openapi_client.models.tenancy_contact_groups_list200_response import TenancyContactGroupsList200Response
from openapi_client.models.tenancy_contact_roles_list200_response import TenancyContactRolesList200Response
from openapi_client.models.tenancy_contacts_list200_response import TenancyContactsList200Response
from openapi_client.models.tenancy_tenant_groups_list200_response import TenancyTenantGroupsList200Response
from openapi_client.models.tenancy_tenants_list200_response import TenancyTenantsList200Response
from openapi_client.models.tenant import Tenant
from openapi_client.models.tenant_group import TenantGroup
from openapi_client.models.writable_contact import WritableContact
from openapi_client.models.writable_contact_assignment import WritableContactAssignment
from openapi_client.models.writable_contact_group import WritableContactGroup
from openapi_client.models.writable_tenant import WritableTenant
from openapi_client.models.writable_tenant_group import WritableTenantGroup

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class TenancyApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def tenancy_contact_assignments_bulk_delete(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """tenancy_contact_assignments_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_assignments_bulk_delete_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """tenancy_contact_assignments_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_assignments_bulk_delete_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_assignments_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_assignments_bulk_delete_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/tenancy/contact-assignments/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contact_assignments_bulk_partial_update(
        self,
        writable_contact_assignment: WritableContactAssignment,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ContactAssignment:
        """tenancy_contact_assignments_bulk_partial_update

        

        :param writable_contact_assignment: (required)
        :type writable_contact_assignment: WritableContactAssignment
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_bulk_partial_update_serialize(
            writable_contact_assignment=writable_contact_assignment,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactAssignment",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_assignments_bulk_partial_update_with_http_info(
        self,
        writable_contact_assignment: WritableContactAssignment,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ContactAssignment]:
        """tenancy_contact_assignments_bulk_partial_update

        

        :param writable_contact_assignment: (required)
        :type writable_contact_assignment: WritableContactAssignment
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_bulk_partial_update_serialize(
            writable_contact_assignment=writable_contact_assignment,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactAssignment",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_assignments_bulk_partial_update_without_preload_content(
        self,
        writable_contact_assignment: WritableContactAssignment,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_assignments_bulk_partial_update

        

        :param writable_contact_assignment: (required)
        :type writable_contact_assignment: WritableContactAssignment
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_bulk_partial_update_serialize(
            writable_contact_assignment=writable_contact_assignment,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactAssignment",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_assignments_bulk_partial_update_serialize(
        self,
        writable_contact_assignment,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_contact_assignment is not None:
            _body_params = writable_contact_assignment


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/tenancy/contact-assignments/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contact_assignments_bulk_update(
        self,
        writable_contact_assignment: WritableContactAssignment,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ContactAssignment:
        """tenancy_contact_assignments_bulk_update

        

        :param writable_contact_assignment: (required)
        :type writable_contact_assignment: WritableContactAssignment
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_bulk_update_serialize(
            writable_contact_assignment=writable_contact_assignment,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactAssignment",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_assignments_bulk_update_with_http_info(
        self,
        writable_contact_assignment: WritableContactAssignment,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ContactAssignment]:
        """tenancy_contact_assignments_bulk_update

        

        :param writable_contact_assignment: (required)
        :type writable_contact_assignment: WritableContactAssignment
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_bulk_update_serialize(
            writable_contact_assignment=writable_contact_assignment,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactAssignment",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_assignments_bulk_update_without_preload_content(
        self,
        writable_contact_assignment: WritableContactAssignment,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_assignments_bulk_update

        

        :param writable_contact_assignment: (required)
        :type writable_contact_assignment: WritableContactAssignment
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_bulk_update_serialize(
            writable_contact_assignment=writable_contact_assignment,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactAssignment",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_assignments_bulk_update_serialize(
        self,
        writable_contact_assignment,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_contact_assignment is not None:
            _body_params = writable_contact_assignment


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/tenancy/contact-assignments/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contact_assignments_create(
        self,
        writable_contact_assignment: WritableContactAssignment,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ContactAssignment:
        """tenancy_contact_assignments_create

        

        :param writable_contact_assignment: (required)
        :type writable_contact_assignment: WritableContactAssignment
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_create_serialize(
            writable_contact_assignment=writable_contact_assignment,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ContactAssignment",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_assignments_create_with_http_info(
        self,
        writable_contact_assignment: WritableContactAssignment,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ContactAssignment]:
        """tenancy_contact_assignments_create

        

        :param writable_contact_assignment: (required)
        :type writable_contact_assignment: WritableContactAssignment
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_create_serialize(
            writable_contact_assignment=writable_contact_assignment,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ContactAssignment",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_assignments_create_without_preload_content(
        self,
        writable_contact_assignment: WritableContactAssignment,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_assignments_create

        

        :param writable_contact_assignment: (required)
        :type writable_contact_assignment: WritableContactAssignment
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_create_serialize(
            writable_contact_assignment=writable_contact_assignment,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ContactAssignment",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_assignments_create_serialize(
        self,
        writable_contact_assignment,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_contact_assignment is not None:
            _body_params = writable_contact_assignment


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/tenancy/contact-assignments/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contact_assignments_delete(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact assignment.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """tenancy_contact_assignments_delete

        

        :param id: A unique integer value identifying this contact assignment. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_assignments_delete_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact assignment.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """tenancy_contact_assignments_delete

        

        :param id: A unique integer value identifying this contact assignment. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_assignments_delete_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact assignment.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_assignments_delete

        

        :param id: A unique integer value identifying this contact assignment. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_assignments_delete_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/tenancy/contact-assignments/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contact_assignments_list(
        self,
        id: Optional[StrictStr] = None,
        content_type_id: Optional[StrictStr] = None,
        object_id: Optional[StrictStr] = None,
        priority: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        content_type: Optional[StrictStr] = None,
        contact_id: Optional[StrictStr] = None,
        role_id: Optional[StrictStr] = None,
        role: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        content_type_id__n: Optional[StrictStr] = None,
        object_id__n: Optional[StrictStr] = None,
        object_id__lte: Optional[StrictStr] = None,
        object_id__lt: Optional[StrictStr] = None,
        object_id__gte: Optional[StrictStr] = None,
        object_id__gt: Optional[StrictStr] = None,
        priority__n: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        content_type__n: Optional[StrictStr] = None,
        contact_id__n: Optional[StrictStr] = None,
        role_id__n: Optional[StrictStr] = None,
        role__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TenancyContactAssignmentsList200Response:
        """tenancy_contact_assignments_list

        

        :param id: 
        :type id: str
        :param content_type_id: 
        :type content_type_id: str
        :param object_id: 
        :type object_id: str
        :param priority: 
        :type priority: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param content_type: 
        :type content_type: str
        :param contact_id: 
        :type contact_id: str
        :param role_id: 
        :type role_id: str
        :param role: 
        :type role: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param content_type_id__n: 
        :type content_type_id__n: str
        :param object_id__n: 
        :type object_id__n: str
        :param object_id__lte: 
        :type object_id__lte: str
        :param object_id__lt: 
        :type object_id__lt: str
        :param object_id__gte: 
        :type object_id__gte: str
        :param object_id__gt: 
        :type object_id__gt: str
        :param priority__n: 
        :type priority__n: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param content_type__n: 
        :type content_type__n: str
        :param contact_id__n: 
        :type contact_id__n: str
        :param role_id__n: 
        :type role_id__n: str
        :param role__n: 
        :type role__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_list_serialize(
            id=id,
            content_type_id=content_type_id,
            object_id=object_id,
            priority=priority,
            created=created,
            last_updated=last_updated,
            content_type=content_type,
            contact_id=contact_id,
            role_id=role_id,
            role=role,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            content_type_id__n=content_type_id__n,
            object_id__n=object_id__n,
            object_id__lte=object_id__lte,
            object_id__lt=object_id__lt,
            object_id__gte=object_id__gte,
            object_id__gt=object_id__gt,
            priority__n=priority__n,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            content_type__n=content_type__n,
            contact_id__n=contact_id__n,
            role_id__n=role_id__n,
            role__n=role__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenancyContactAssignmentsList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_assignments_list_with_http_info(
        self,
        id: Optional[StrictStr] = None,
        content_type_id: Optional[StrictStr] = None,
        object_id: Optional[StrictStr] = None,
        priority: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        content_type: Optional[StrictStr] = None,
        contact_id: Optional[StrictStr] = None,
        role_id: Optional[StrictStr] = None,
        role: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        content_type_id__n: Optional[StrictStr] = None,
        object_id__n: Optional[StrictStr] = None,
        object_id__lte: Optional[StrictStr] = None,
        object_id__lt: Optional[StrictStr] = None,
        object_id__gte: Optional[StrictStr] = None,
        object_id__gt: Optional[StrictStr] = None,
        priority__n: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        content_type__n: Optional[StrictStr] = None,
        contact_id__n: Optional[StrictStr] = None,
        role_id__n: Optional[StrictStr] = None,
        role__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TenancyContactAssignmentsList200Response]:
        """tenancy_contact_assignments_list

        

        :param id: 
        :type id: str
        :param content_type_id: 
        :type content_type_id: str
        :param object_id: 
        :type object_id: str
        :param priority: 
        :type priority: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param content_type: 
        :type content_type: str
        :param contact_id: 
        :type contact_id: str
        :param role_id: 
        :type role_id: str
        :param role: 
        :type role: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param content_type_id__n: 
        :type content_type_id__n: str
        :param object_id__n: 
        :type object_id__n: str
        :param object_id__lte: 
        :type object_id__lte: str
        :param object_id__lt: 
        :type object_id__lt: str
        :param object_id__gte: 
        :type object_id__gte: str
        :param object_id__gt: 
        :type object_id__gt: str
        :param priority__n: 
        :type priority__n: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param content_type__n: 
        :type content_type__n: str
        :param contact_id__n: 
        :type contact_id__n: str
        :param role_id__n: 
        :type role_id__n: str
        :param role__n: 
        :type role__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_list_serialize(
            id=id,
            content_type_id=content_type_id,
            object_id=object_id,
            priority=priority,
            created=created,
            last_updated=last_updated,
            content_type=content_type,
            contact_id=contact_id,
            role_id=role_id,
            role=role,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            content_type_id__n=content_type_id__n,
            object_id__n=object_id__n,
            object_id__lte=object_id__lte,
            object_id__lt=object_id__lt,
            object_id__gte=object_id__gte,
            object_id__gt=object_id__gt,
            priority__n=priority__n,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            content_type__n=content_type__n,
            contact_id__n=contact_id__n,
            role_id__n=role_id__n,
            role__n=role__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenancyContactAssignmentsList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_assignments_list_without_preload_content(
        self,
        id: Optional[StrictStr] = None,
        content_type_id: Optional[StrictStr] = None,
        object_id: Optional[StrictStr] = None,
        priority: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        content_type: Optional[StrictStr] = None,
        contact_id: Optional[StrictStr] = None,
        role_id: Optional[StrictStr] = None,
        role: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        content_type_id__n: Optional[StrictStr] = None,
        object_id__n: Optional[StrictStr] = None,
        object_id__lte: Optional[StrictStr] = None,
        object_id__lt: Optional[StrictStr] = None,
        object_id__gte: Optional[StrictStr] = None,
        object_id__gt: Optional[StrictStr] = None,
        priority__n: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        content_type__n: Optional[StrictStr] = None,
        contact_id__n: Optional[StrictStr] = None,
        role_id__n: Optional[StrictStr] = None,
        role__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_assignments_list

        

        :param id: 
        :type id: str
        :param content_type_id: 
        :type content_type_id: str
        :param object_id: 
        :type object_id: str
        :param priority: 
        :type priority: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param content_type: 
        :type content_type: str
        :param contact_id: 
        :type contact_id: str
        :param role_id: 
        :type role_id: str
        :param role: 
        :type role: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param content_type_id__n: 
        :type content_type_id__n: str
        :param object_id__n: 
        :type object_id__n: str
        :param object_id__lte: 
        :type object_id__lte: str
        :param object_id__lt: 
        :type object_id__lt: str
        :param object_id__gte: 
        :type object_id__gte: str
        :param object_id__gt: 
        :type object_id__gt: str
        :param priority__n: 
        :type priority__n: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param content_type__n: 
        :type content_type__n: str
        :param contact_id__n: 
        :type contact_id__n: str
        :param role_id__n: 
        :type role_id__n: str
        :param role__n: 
        :type role__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_list_serialize(
            id=id,
            content_type_id=content_type_id,
            object_id=object_id,
            priority=priority,
            created=created,
            last_updated=last_updated,
            content_type=content_type,
            contact_id=contact_id,
            role_id=role_id,
            role=role,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            content_type_id__n=content_type_id__n,
            object_id__n=object_id__n,
            object_id__lte=object_id__lte,
            object_id__lt=object_id__lt,
            object_id__gte=object_id__gte,
            object_id__gt=object_id__gt,
            priority__n=priority__n,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            content_type__n=content_type__n,
            contact_id__n=contact_id__n,
            role_id__n=role_id__n,
            role__n=role__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenancyContactAssignmentsList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_assignments_list_serialize(
        self,
        id,
        content_type_id,
        object_id,
        priority,
        created,
        last_updated,
        content_type,
        contact_id,
        role_id,
        role,
        id__n,
        id__lte,
        id__lt,
        id__gte,
        id__gt,
        content_type_id__n,
        object_id__n,
        object_id__lte,
        object_id__lt,
        object_id__gte,
        object_id__gt,
        priority__n,
        created__n,
        created__lte,
        created__lt,
        created__gte,
        created__gt,
        last_updated__n,
        last_updated__lte,
        last_updated__lt,
        last_updated__gte,
        last_updated__gt,
        content_type__n,
        contact_id__n,
        role_id__n,
        role__n,
        ordering,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if content_type_id is not None:
            
            _query_params.append(('content_type_id', content_type_id))
            
        if object_id is not None:
            
            _query_params.append(('object_id', object_id))
            
        if priority is not None:
            
            _query_params.append(('priority', priority))
            
        if created is not None:
            
            _query_params.append(('created', created))
            
        if last_updated is not None:
            
            _query_params.append(('last_updated', last_updated))
            
        if content_type is not None:
            
            _query_params.append(('content_type', content_type))
            
        if contact_id is not None:
            
            _query_params.append(('contact_id', contact_id))
            
        if role_id is not None:
            
            _query_params.append(('role_id', role_id))
            
        if role is not None:
            
            _query_params.append(('role', role))
            
        if id__n is not None:
            
            _query_params.append(('id__n', id__n))
            
        if id__lte is not None:
            
            _query_params.append(('id__lte', id__lte))
            
        if id__lt is not None:
            
            _query_params.append(('id__lt', id__lt))
            
        if id__gte is not None:
            
            _query_params.append(('id__gte', id__gte))
            
        if id__gt is not None:
            
            _query_params.append(('id__gt', id__gt))
            
        if content_type_id__n is not None:
            
            _query_params.append(('content_type_id__n', content_type_id__n))
            
        if object_id__n is not None:
            
            _query_params.append(('object_id__n', object_id__n))
            
        if object_id__lte is not None:
            
            _query_params.append(('object_id__lte', object_id__lte))
            
        if object_id__lt is not None:
            
            _query_params.append(('object_id__lt', object_id__lt))
            
        if object_id__gte is not None:
            
            _query_params.append(('object_id__gte', object_id__gte))
            
        if object_id__gt is not None:
            
            _query_params.append(('object_id__gt', object_id__gt))
            
        if priority__n is not None:
            
            _query_params.append(('priority__n', priority__n))
            
        if created__n is not None:
            
            _query_params.append(('created__n', created__n))
            
        if created__lte is not None:
            
            _query_params.append(('created__lte', created__lte))
            
        if created__lt is not None:
            
            _query_params.append(('created__lt', created__lt))
            
        if created__gte is not None:
            
            _query_params.append(('created__gte', created__gte))
            
        if created__gt is not None:
            
            _query_params.append(('created__gt', created__gt))
            
        if last_updated__n is not None:
            
            _query_params.append(('last_updated__n', last_updated__n))
            
        if last_updated__lte is not None:
            
            _query_params.append(('last_updated__lte', last_updated__lte))
            
        if last_updated__lt is not None:
            
            _query_params.append(('last_updated__lt', last_updated__lt))
            
        if last_updated__gte is not None:
            
            _query_params.append(('last_updated__gte', last_updated__gte))
            
        if last_updated__gt is not None:
            
            _query_params.append(('last_updated__gt', last_updated__gt))
            
        if content_type__n is not None:
            
            _query_params.append(('content_type__n', content_type__n))
            
        if contact_id__n is not None:
            
            _query_params.append(('contact_id__n', contact_id__n))
            
        if role_id__n is not None:
            
            _query_params.append(('role_id__n', role_id__n))
            
        if role__n is not None:
            
            _query_params.append(('role__n', role__n))
            
        if ordering is not None:
            
            _query_params.append(('ordering', ordering))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/tenancy/contact-assignments/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contact_assignments_partial_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact assignment.")],
        writable_contact_assignment: WritableContactAssignment,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ContactAssignment:
        """tenancy_contact_assignments_partial_update

        

        :param id: A unique integer value identifying this contact assignment. (required)
        :type id: int
        :param writable_contact_assignment: (required)
        :type writable_contact_assignment: WritableContactAssignment
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_partial_update_serialize(
            id=id,
            writable_contact_assignment=writable_contact_assignment,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactAssignment",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_assignments_partial_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact assignment.")],
        writable_contact_assignment: WritableContactAssignment,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ContactAssignment]:
        """tenancy_contact_assignments_partial_update

        

        :param id: A unique integer value identifying this contact assignment. (required)
        :type id: int
        :param writable_contact_assignment: (required)
        :type writable_contact_assignment: WritableContactAssignment
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_partial_update_serialize(
            id=id,
            writable_contact_assignment=writable_contact_assignment,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactAssignment",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_assignments_partial_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact assignment.")],
        writable_contact_assignment: WritableContactAssignment,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_assignments_partial_update

        

        :param id: A unique integer value identifying this contact assignment. (required)
        :type id: int
        :param writable_contact_assignment: (required)
        :type writable_contact_assignment: WritableContactAssignment
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_partial_update_serialize(
            id=id,
            writable_contact_assignment=writable_contact_assignment,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactAssignment",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_assignments_partial_update_serialize(
        self,
        id,
        writable_contact_assignment,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_contact_assignment is not None:
            _body_params = writable_contact_assignment


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/tenancy/contact-assignments/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contact_assignments_read(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact assignment.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ContactAssignment:
        """tenancy_contact_assignments_read

        

        :param id: A unique integer value identifying this contact assignment. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactAssignment",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_assignments_read_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact assignment.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ContactAssignment]:
        """tenancy_contact_assignments_read

        

        :param id: A unique integer value identifying this contact assignment. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactAssignment",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_assignments_read_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact assignment.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_assignments_read

        

        :param id: A unique integer value identifying this contact assignment. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactAssignment",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_assignments_read_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/tenancy/contact-assignments/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contact_assignments_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact assignment.")],
        writable_contact_assignment: WritableContactAssignment,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ContactAssignment:
        """tenancy_contact_assignments_update

        

        :param id: A unique integer value identifying this contact assignment. (required)
        :type id: int
        :param writable_contact_assignment: (required)
        :type writable_contact_assignment: WritableContactAssignment
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_update_serialize(
            id=id,
            writable_contact_assignment=writable_contact_assignment,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactAssignment",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_assignments_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact assignment.")],
        writable_contact_assignment: WritableContactAssignment,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ContactAssignment]:
        """tenancy_contact_assignments_update

        

        :param id: A unique integer value identifying this contact assignment. (required)
        :type id: int
        :param writable_contact_assignment: (required)
        :type writable_contact_assignment: WritableContactAssignment
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_update_serialize(
            id=id,
            writable_contact_assignment=writable_contact_assignment,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactAssignment",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_assignments_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact assignment.")],
        writable_contact_assignment: WritableContactAssignment,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_assignments_update

        

        :param id: A unique integer value identifying this contact assignment. (required)
        :type id: int
        :param writable_contact_assignment: (required)
        :type writable_contact_assignment: WritableContactAssignment
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_assignments_update_serialize(
            id=id,
            writable_contact_assignment=writable_contact_assignment,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactAssignment",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_assignments_update_serialize(
        self,
        id,
        writable_contact_assignment,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_contact_assignment is not None:
            _body_params = writable_contact_assignment


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/tenancy/contact-assignments/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contact_groups_bulk_delete(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """tenancy_contact_groups_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_groups_bulk_delete_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """tenancy_contact_groups_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_groups_bulk_delete_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_groups_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_groups_bulk_delete_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/tenancy/contact-groups/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contact_groups_bulk_partial_update(
        self,
        writable_contact_group: WritableContactGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ContactGroup:
        """tenancy_contact_groups_bulk_partial_update

        

        :param writable_contact_group: (required)
        :type writable_contact_group: WritableContactGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_bulk_partial_update_serialize(
            writable_contact_group=writable_contact_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_groups_bulk_partial_update_with_http_info(
        self,
        writable_contact_group: WritableContactGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ContactGroup]:
        """tenancy_contact_groups_bulk_partial_update

        

        :param writable_contact_group: (required)
        :type writable_contact_group: WritableContactGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_bulk_partial_update_serialize(
            writable_contact_group=writable_contact_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_groups_bulk_partial_update_without_preload_content(
        self,
        writable_contact_group: WritableContactGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_groups_bulk_partial_update

        

        :param writable_contact_group: (required)
        :type writable_contact_group: WritableContactGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_bulk_partial_update_serialize(
            writable_contact_group=writable_contact_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_groups_bulk_partial_update_serialize(
        self,
        writable_contact_group,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_contact_group is not None:
            _body_params = writable_contact_group


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/tenancy/contact-groups/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contact_groups_bulk_update(
        self,
        writable_contact_group: WritableContactGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ContactGroup:
        """tenancy_contact_groups_bulk_update

        

        :param writable_contact_group: (required)
        :type writable_contact_group: WritableContactGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_bulk_update_serialize(
            writable_contact_group=writable_contact_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_groups_bulk_update_with_http_info(
        self,
        writable_contact_group: WritableContactGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ContactGroup]:
        """tenancy_contact_groups_bulk_update

        

        :param writable_contact_group: (required)
        :type writable_contact_group: WritableContactGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_bulk_update_serialize(
            writable_contact_group=writable_contact_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_groups_bulk_update_without_preload_content(
        self,
        writable_contact_group: WritableContactGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_groups_bulk_update

        

        :param writable_contact_group: (required)
        :type writable_contact_group: WritableContactGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_bulk_update_serialize(
            writable_contact_group=writable_contact_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_groups_bulk_update_serialize(
        self,
        writable_contact_group,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_contact_group is not None:
            _body_params = writable_contact_group


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/tenancy/contact-groups/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contact_groups_create(
        self,
        writable_contact_group: WritableContactGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ContactGroup:
        """tenancy_contact_groups_create

        

        :param writable_contact_group: (required)
        :type writable_contact_group: WritableContactGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_create_serialize(
            writable_contact_group=writable_contact_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ContactGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_groups_create_with_http_info(
        self,
        writable_contact_group: WritableContactGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ContactGroup]:
        """tenancy_contact_groups_create

        

        :param writable_contact_group: (required)
        :type writable_contact_group: WritableContactGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_create_serialize(
            writable_contact_group=writable_contact_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ContactGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_groups_create_without_preload_content(
        self,
        writable_contact_group: WritableContactGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_groups_create

        

        :param writable_contact_group: (required)
        :type writable_contact_group: WritableContactGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_create_serialize(
            writable_contact_group=writable_contact_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ContactGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_groups_create_serialize(
        self,
        writable_contact_group,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_contact_group is not None:
            _body_params = writable_contact_group


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/tenancy/contact-groups/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contact_groups_delete(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact group.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """tenancy_contact_groups_delete

        

        :param id: A unique integer value identifying this contact group. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_groups_delete_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact group.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """tenancy_contact_groups_delete

        

        :param id: A unique integer value identifying this contact group. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_groups_delete_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact group.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_groups_delete

        

        :param id: A unique integer value identifying this contact group. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_groups_delete_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/tenancy/contact-groups/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contact_groups_list(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        slug: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        parent_id: Optional[StrictStr] = None,
        parent: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        slug__n: Optional[StrictStr] = None,
        slug__ic: Optional[StrictStr] = None,
        slug__nic: Optional[StrictStr] = None,
        slug__iew: Optional[StrictStr] = None,
        slug__niew: Optional[StrictStr] = None,
        slug__isw: Optional[StrictStr] = None,
        slug__nisw: Optional[StrictStr] = None,
        slug__ie: Optional[StrictStr] = None,
        slug__nie: Optional[StrictStr] = None,
        slug__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        parent_id__n: Optional[StrictStr] = None,
        parent__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TenancyContactGroupsList200Response:
        """tenancy_contact_groups_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param slug: 
        :type slug: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param parent_id: 
        :type parent_id: str
        :param parent: 
        :type parent: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param slug__n: 
        :type slug__n: str
        :param slug__ic: 
        :type slug__ic: str
        :param slug__nic: 
        :type slug__nic: str
        :param slug__iew: 
        :type slug__iew: str
        :param slug__niew: 
        :type slug__niew: str
        :param slug__isw: 
        :type slug__isw: str
        :param slug__nisw: 
        :type slug__nisw: str
        :param slug__ie: 
        :type slug__ie: str
        :param slug__nie: 
        :type slug__nie: str
        :param slug__empty: 
        :type slug__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param parent_id__n: 
        :type parent_id__n: str
        :param parent__n: 
        :type parent__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_list_serialize(
            id=id,
            name=name,
            slug=slug,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            parent_id=parent_id,
            parent=parent,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            slug__n=slug__n,
            slug__ic=slug__ic,
            slug__nic=slug__nic,
            slug__iew=slug__iew,
            slug__niew=slug__niew,
            slug__isw=slug__isw,
            slug__nisw=slug__nisw,
            slug__ie=slug__ie,
            slug__nie=slug__nie,
            slug__empty=slug__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            parent_id__n=parent_id__n,
            parent__n=parent__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenancyContactGroupsList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_groups_list_with_http_info(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        slug: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        parent_id: Optional[StrictStr] = None,
        parent: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        slug__n: Optional[StrictStr] = None,
        slug__ic: Optional[StrictStr] = None,
        slug__nic: Optional[StrictStr] = None,
        slug__iew: Optional[StrictStr] = None,
        slug__niew: Optional[StrictStr] = None,
        slug__isw: Optional[StrictStr] = None,
        slug__nisw: Optional[StrictStr] = None,
        slug__ie: Optional[StrictStr] = None,
        slug__nie: Optional[StrictStr] = None,
        slug__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        parent_id__n: Optional[StrictStr] = None,
        parent__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TenancyContactGroupsList200Response]:
        """tenancy_contact_groups_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param slug: 
        :type slug: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param parent_id: 
        :type parent_id: str
        :param parent: 
        :type parent: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param slug__n: 
        :type slug__n: str
        :param slug__ic: 
        :type slug__ic: str
        :param slug__nic: 
        :type slug__nic: str
        :param slug__iew: 
        :type slug__iew: str
        :param slug__niew: 
        :type slug__niew: str
        :param slug__isw: 
        :type slug__isw: str
        :param slug__nisw: 
        :type slug__nisw: str
        :param slug__ie: 
        :type slug__ie: str
        :param slug__nie: 
        :type slug__nie: str
        :param slug__empty: 
        :type slug__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param parent_id__n: 
        :type parent_id__n: str
        :param parent__n: 
        :type parent__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_list_serialize(
            id=id,
            name=name,
            slug=slug,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            parent_id=parent_id,
            parent=parent,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            slug__n=slug__n,
            slug__ic=slug__ic,
            slug__nic=slug__nic,
            slug__iew=slug__iew,
            slug__niew=slug__niew,
            slug__isw=slug__isw,
            slug__nisw=slug__nisw,
            slug__ie=slug__ie,
            slug__nie=slug__nie,
            slug__empty=slug__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            parent_id__n=parent_id__n,
            parent__n=parent__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenancyContactGroupsList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_groups_list_without_preload_content(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        slug: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        parent_id: Optional[StrictStr] = None,
        parent: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        slug__n: Optional[StrictStr] = None,
        slug__ic: Optional[StrictStr] = None,
        slug__nic: Optional[StrictStr] = None,
        slug__iew: Optional[StrictStr] = None,
        slug__niew: Optional[StrictStr] = None,
        slug__isw: Optional[StrictStr] = None,
        slug__nisw: Optional[StrictStr] = None,
        slug__ie: Optional[StrictStr] = None,
        slug__nie: Optional[StrictStr] = None,
        slug__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        parent_id__n: Optional[StrictStr] = None,
        parent__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_groups_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param slug: 
        :type slug: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param parent_id: 
        :type parent_id: str
        :param parent: 
        :type parent: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param slug__n: 
        :type slug__n: str
        :param slug__ic: 
        :type slug__ic: str
        :param slug__nic: 
        :type slug__nic: str
        :param slug__iew: 
        :type slug__iew: str
        :param slug__niew: 
        :type slug__niew: str
        :param slug__isw: 
        :type slug__isw: str
        :param slug__nisw: 
        :type slug__nisw: str
        :param slug__ie: 
        :type slug__ie: str
        :param slug__nie: 
        :type slug__nie: str
        :param slug__empty: 
        :type slug__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param parent_id__n: 
        :type parent_id__n: str
        :param parent__n: 
        :type parent__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_list_serialize(
            id=id,
            name=name,
            slug=slug,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            parent_id=parent_id,
            parent=parent,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            slug__n=slug__n,
            slug__ic=slug__ic,
            slug__nic=slug__nic,
            slug__iew=slug__iew,
            slug__niew=slug__niew,
            slug__isw=slug__isw,
            slug__nisw=slug__nisw,
            slug__ie=slug__ie,
            slug__nie=slug__nie,
            slug__empty=slug__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            parent_id__n=parent_id__n,
            parent__n=parent__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenancyContactGroupsList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_groups_list_serialize(
        self,
        id,
        name,
        slug,
        description,
        created,
        last_updated,
        q,
        tag,
        parent_id,
        parent,
        id__n,
        id__lte,
        id__lt,
        id__gte,
        id__gt,
        name__n,
        name__ic,
        name__nic,
        name__iew,
        name__niew,
        name__isw,
        name__nisw,
        name__ie,
        name__nie,
        name__empty,
        slug__n,
        slug__ic,
        slug__nic,
        slug__iew,
        slug__niew,
        slug__isw,
        slug__nisw,
        slug__ie,
        slug__nie,
        slug__empty,
        description__n,
        description__ic,
        description__nic,
        description__iew,
        description__niew,
        description__isw,
        description__nisw,
        description__ie,
        description__nie,
        description__empty,
        created__n,
        created__lte,
        created__lt,
        created__gte,
        created__gt,
        last_updated__n,
        last_updated__lte,
        last_updated__lt,
        last_updated__gte,
        last_updated__gt,
        tag__n,
        parent_id__n,
        parent__n,
        ordering,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if slug is not None:
            
            _query_params.append(('slug', slug))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if created is not None:
            
            _query_params.append(('created', created))
            
        if last_updated is not None:
            
            _query_params.append(('last_updated', last_updated))
            
        if q is not None:
            
            _query_params.append(('q', q))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if parent_id is not None:
            
            _query_params.append(('parent_id', parent_id))
            
        if parent is not None:
            
            _query_params.append(('parent', parent))
            
        if id__n is not None:
            
            _query_params.append(('id__n', id__n))
            
        if id__lte is not None:
            
            _query_params.append(('id__lte', id__lte))
            
        if id__lt is not None:
            
            _query_params.append(('id__lt', id__lt))
            
        if id__gte is not None:
            
            _query_params.append(('id__gte', id__gte))
            
        if id__gt is not None:
            
            _query_params.append(('id__gt', id__gt))
            
        if name__n is not None:
            
            _query_params.append(('name__n', name__n))
            
        if name__ic is not None:
            
            _query_params.append(('name__ic', name__ic))
            
        if name__nic is not None:
            
            _query_params.append(('name__nic', name__nic))
            
        if name__iew is not None:
            
            _query_params.append(('name__iew', name__iew))
            
        if name__niew is not None:
            
            _query_params.append(('name__niew', name__niew))
            
        if name__isw is not None:
            
            _query_params.append(('name__isw', name__isw))
            
        if name__nisw is not None:
            
            _query_params.append(('name__nisw', name__nisw))
            
        if name__ie is not None:
            
            _query_params.append(('name__ie', name__ie))
            
        if name__nie is not None:
            
            _query_params.append(('name__nie', name__nie))
            
        if name__empty is not None:
            
            _query_params.append(('name__empty', name__empty))
            
        if slug__n is not None:
            
            _query_params.append(('slug__n', slug__n))
            
        if slug__ic is not None:
            
            _query_params.append(('slug__ic', slug__ic))
            
        if slug__nic is not None:
            
            _query_params.append(('slug__nic', slug__nic))
            
        if slug__iew is not None:
            
            _query_params.append(('slug__iew', slug__iew))
            
        if slug__niew is not None:
            
            _query_params.append(('slug__niew', slug__niew))
            
        if slug__isw is not None:
            
            _query_params.append(('slug__isw', slug__isw))
            
        if slug__nisw is not None:
            
            _query_params.append(('slug__nisw', slug__nisw))
            
        if slug__ie is not None:
            
            _query_params.append(('slug__ie', slug__ie))
            
        if slug__nie is not None:
            
            _query_params.append(('slug__nie', slug__nie))
            
        if slug__empty is not None:
            
            _query_params.append(('slug__empty', slug__empty))
            
        if description__n is not None:
            
            _query_params.append(('description__n', description__n))
            
        if description__ic is not None:
            
            _query_params.append(('description__ic', description__ic))
            
        if description__nic is not None:
            
            _query_params.append(('description__nic', description__nic))
            
        if description__iew is not None:
            
            _query_params.append(('description__iew', description__iew))
            
        if description__niew is not None:
            
            _query_params.append(('description__niew', description__niew))
            
        if description__isw is not None:
            
            _query_params.append(('description__isw', description__isw))
            
        if description__nisw is not None:
            
            _query_params.append(('description__nisw', description__nisw))
            
        if description__ie is not None:
            
            _query_params.append(('description__ie', description__ie))
            
        if description__nie is not None:
            
            _query_params.append(('description__nie', description__nie))
            
        if description__empty is not None:
            
            _query_params.append(('description__empty', description__empty))
            
        if created__n is not None:
            
            _query_params.append(('created__n', created__n))
            
        if created__lte is not None:
            
            _query_params.append(('created__lte', created__lte))
            
        if created__lt is not None:
            
            _query_params.append(('created__lt', created__lt))
            
        if created__gte is not None:
            
            _query_params.append(('created__gte', created__gte))
            
        if created__gt is not None:
            
            _query_params.append(('created__gt', created__gt))
            
        if last_updated__n is not None:
            
            _query_params.append(('last_updated__n', last_updated__n))
            
        if last_updated__lte is not None:
            
            _query_params.append(('last_updated__lte', last_updated__lte))
            
        if last_updated__lt is not None:
            
            _query_params.append(('last_updated__lt', last_updated__lt))
            
        if last_updated__gte is not None:
            
            _query_params.append(('last_updated__gte', last_updated__gte))
            
        if last_updated__gt is not None:
            
            _query_params.append(('last_updated__gt', last_updated__gt))
            
        if tag__n is not None:
            
            _query_params.append(('tag__n', tag__n))
            
        if parent_id__n is not None:
            
            _query_params.append(('parent_id__n', parent_id__n))
            
        if parent__n is not None:
            
            _query_params.append(('parent__n', parent__n))
            
        if ordering is not None:
            
            _query_params.append(('ordering', ordering))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/tenancy/contact-groups/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contact_groups_partial_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact group.")],
        writable_contact_group: WritableContactGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ContactGroup:
        """tenancy_contact_groups_partial_update

        

        :param id: A unique integer value identifying this contact group. (required)
        :type id: int
        :param writable_contact_group: (required)
        :type writable_contact_group: WritableContactGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_partial_update_serialize(
            id=id,
            writable_contact_group=writable_contact_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_groups_partial_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact group.")],
        writable_contact_group: WritableContactGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ContactGroup]:
        """tenancy_contact_groups_partial_update

        

        :param id: A unique integer value identifying this contact group. (required)
        :type id: int
        :param writable_contact_group: (required)
        :type writable_contact_group: WritableContactGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_partial_update_serialize(
            id=id,
            writable_contact_group=writable_contact_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_groups_partial_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact group.")],
        writable_contact_group: WritableContactGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_groups_partial_update

        

        :param id: A unique integer value identifying this contact group. (required)
        :type id: int
        :param writable_contact_group: (required)
        :type writable_contact_group: WritableContactGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_partial_update_serialize(
            id=id,
            writable_contact_group=writable_contact_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_groups_partial_update_serialize(
        self,
        id,
        writable_contact_group,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_contact_group is not None:
            _body_params = writable_contact_group


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/tenancy/contact-groups/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contact_groups_read(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact group.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ContactGroup:
        """tenancy_contact_groups_read

        

        :param id: A unique integer value identifying this contact group. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_groups_read_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact group.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ContactGroup]:
        """tenancy_contact_groups_read

        

        :param id: A unique integer value identifying this contact group. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_groups_read_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact group.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_groups_read

        

        :param id: A unique integer value identifying this contact group. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_groups_read_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/tenancy/contact-groups/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contact_groups_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact group.")],
        writable_contact_group: WritableContactGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ContactGroup:
        """tenancy_contact_groups_update

        

        :param id: A unique integer value identifying this contact group. (required)
        :type id: int
        :param writable_contact_group: (required)
        :type writable_contact_group: WritableContactGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_update_serialize(
            id=id,
            writable_contact_group=writable_contact_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_groups_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact group.")],
        writable_contact_group: WritableContactGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ContactGroup]:
        """tenancy_contact_groups_update

        

        :param id: A unique integer value identifying this contact group. (required)
        :type id: int
        :param writable_contact_group: (required)
        :type writable_contact_group: WritableContactGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_update_serialize(
            id=id,
            writable_contact_group=writable_contact_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_groups_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact group.")],
        writable_contact_group: WritableContactGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_groups_update

        

        :param id: A unique integer value identifying this contact group. (required)
        :type id: int
        :param writable_contact_group: (required)
        :type writable_contact_group: WritableContactGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_groups_update_serialize(
            id=id,
            writable_contact_group=writable_contact_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_groups_update_serialize(
        self,
        id,
        writable_contact_group,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_contact_group is not None:
            _body_params = writable_contact_group


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/tenancy/contact-groups/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contact_roles_bulk_delete(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """tenancy_contact_roles_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_roles_bulk_delete_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """tenancy_contact_roles_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_roles_bulk_delete_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_roles_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_roles_bulk_delete_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/tenancy/contact-roles/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contact_roles_bulk_partial_update(
        self,
        contact_role: ContactRole,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ContactRole:
        """tenancy_contact_roles_bulk_partial_update

        

        :param contact_role: (required)
        :type contact_role: ContactRole
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_bulk_partial_update_serialize(
            contact_role=contact_role,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactRole",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_roles_bulk_partial_update_with_http_info(
        self,
        contact_role: ContactRole,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ContactRole]:
        """tenancy_contact_roles_bulk_partial_update

        

        :param contact_role: (required)
        :type contact_role: ContactRole
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_bulk_partial_update_serialize(
            contact_role=contact_role,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactRole",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_roles_bulk_partial_update_without_preload_content(
        self,
        contact_role: ContactRole,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_roles_bulk_partial_update

        

        :param contact_role: (required)
        :type contact_role: ContactRole
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_bulk_partial_update_serialize(
            contact_role=contact_role,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactRole",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_roles_bulk_partial_update_serialize(
        self,
        contact_role,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if contact_role is not None:
            _body_params = contact_role


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/tenancy/contact-roles/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contact_roles_bulk_update(
        self,
        contact_role: ContactRole,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ContactRole:
        """tenancy_contact_roles_bulk_update

        

        :param contact_role: (required)
        :type contact_role: ContactRole
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_bulk_update_serialize(
            contact_role=contact_role,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactRole",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_roles_bulk_update_with_http_info(
        self,
        contact_role: ContactRole,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ContactRole]:
        """tenancy_contact_roles_bulk_update

        

        :param contact_role: (required)
        :type contact_role: ContactRole
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_bulk_update_serialize(
            contact_role=contact_role,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactRole",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_roles_bulk_update_without_preload_content(
        self,
        contact_role: ContactRole,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_roles_bulk_update

        

        :param contact_role: (required)
        :type contact_role: ContactRole
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_bulk_update_serialize(
            contact_role=contact_role,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactRole",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_roles_bulk_update_serialize(
        self,
        contact_role,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if contact_role is not None:
            _body_params = contact_role


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/tenancy/contact-roles/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contact_roles_create(
        self,
        contact_role: ContactRole,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ContactRole:
        """tenancy_contact_roles_create

        

        :param contact_role: (required)
        :type contact_role: ContactRole
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_create_serialize(
            contact_role=contact_role,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ContactRole",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_roles_create_with_http_info(
        self,
        contact_role: ContactRole,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ContactRole]:
        """tenancy_contact_roles_create

        

        :param contact_role: (required)
        :type contact_role: ContactRole
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_create_serialize(
            contact_role=contact_role,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ContactRole",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_roles_create_without_preload_content(
        self,
        contact_role: ContactRole,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_roles_create

        

        :param contact_role: (required)
        :type contact_role: ContactRole
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_create_serialize(
            contact_role=contact_role,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ContactRole",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_roles_create_serialize(
        self,
        contact_role,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if contact_role is not None:
            _body_params = contact_role


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/tenancy/contact-roles/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contact_roles_delete(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact role.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """tenancy_contact_roles_delete

        

        :param id: A unique integer value identifying this contact role. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_roles_delete_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact role.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """tenancy_contact_roles_delete

        

        :param id: A unique integer value identifying this contact role. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_roles_delete_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact role.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_roles_delete

        

        :param id: A unique integer value identifying this contact role. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_roles_delete_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/tenancy/contact-roles/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contact_roles_list(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        slug: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        slug__n: Optional[StrictStr] = None,
        slug__ic: Optional[StrictStr] = None,
        slug__nic: Optional[StrictStr] = None,
        slug__iew: Optional[StrictStr] = None,
        slug__niew: Optional[StrictStr] = None,
        slug__isw: Optional[StrictStr] = None,
        slug__nisw: Optional[StrictStr] = None,
        slug__ie: Optional[StrictStr] = None,
        slug__nie: Optional[StrictStr] = None,
        slug__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TenancyContactRolesList200Response:
        """tenancy_contact_roles_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param slug: 
        :type slug: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param slug__n: 
        :type slug__n: str
        :param slug__ic: 
        :type slug__ic: str
        :param slug__nic: 
        :type slug__nic: str
        :param slug__iew: 
        :type slug__iew: str
        :param slug__niew: 
        :type slug__niew: str
        :param slug__isw: 
        :type slug__isw: str
        :param slug__nisw: 
        :type slug__nisw: str
        :param slug__ie: 
        :type slug__ie: str
        :param slug__nie: 
        :type slug__nie: str
        :param slug__empty: 
        :type slug__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_list_serialize(
            id=id,
            name=name,
            slug=slug,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            slug__n=slug__n,
            slug__ic=slug__ic,
            slug__nic=slug__nic,
            slug__iew=slug__iew,
            slug__niew=slug__niew,
            slug__isw=slug__isw,
            slug__nisw=slug__nisw,
            slug__ie=slug__ie,
            slug__nie=slug__nie,
            slug__empty=slug__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenancyContactRolesList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_roles_list_with_http_info(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        slug: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        slug__n: Optional[StrictStr] = None,
        slug__ic: Optional[StrictStr] = None,
        slug__nic: Optional[StrictStr] = None,
        slug__iew: Optional[StrictStr] = None,
        slug__niew: Optional[StrictStr] = None,
        slug__isw: Optional[StrictStr] = None,
        slug__nisw: Optional[StrictStr] = None,
        slug__ie: Optional[StrictStr] = None,
        slug__nie: Optional[StrictStr] = None,
        slug__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TenancyContactRolesList200Response]:
        """tenancy_contact_roles_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param slug: 
        :type slug: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param slug__n: 
        :type slug__n: str
        :param slug__ic: 
        :type slug__ic: str
        :param slug__nic: 
        :type slug__nic: str
        :param slug__iew: 
        :type slug__iew: str
        :param slug__niew: 
        :type slug__niew: str
        :param slug__isw: 
        :type slug__isw: str
        :param slug__nisw: 
        :type slug__nisw: str
        :param slug__ie: 
        :type slug__ie: str
        :param slug__nie: 
        :type slug__nie: str
        :param slug__empty: 
        :type slug__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_list_serialize(
            id=id,
            name=name,
            slug=slug,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            slug__n=slug__n,
            slug__ic=slug__ic,
            slug__nic=slug__nic,
            slug__iew=slug__iew,
            slug__niew=slug__niew,
            slug__isw=slug__isw,
            slug__nisw=slug__nisw,
            slug__ie=slug__ie,
            slug__nie=slug__nie,
            slug__empty=slug__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenancyContactRolesList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_roles_list_without_preload_content(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        slug: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        slug__n: Optional[StrictStr] = None,
        slug__ic: Optional[StrictStr] = None,
        slug__nic: Optional[StrictStr] = None,
        slug__iew: Optional[StrictStr] = None,
        slug__niew: Optional[StrictStr] = None,
        slug__isw: Optional[StrictStr] = None,
        slug__nisw: Optional[StrictStr] = None,
        slug__ie: Optional[StrictStr] = None,
        slug__nie: Optional[StrictStr] = None,
        slug__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_roles_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param slug: 
        :type slug: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param slug__n: 
        :type slug__n: str
        :param slug__ic: 
        :type slug__ic: str
        :param slug__nic: 
        :type slug__nic: str
        :param slug__iew: 
        :type slug__iew: str
        :param slug__niew: 
        :type slug__niew: str
        :param slug__isw: 
        :type slug__isw: str
        :param slug__nisw: 
        :type slug__nisw: str
        :param slug__ie: 
        :type slug__ie: str
        :param slug__nie: 
        :type slug__nie: str
        :param slug__empty: 
        :type slug__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_list_serialize(
            id=id,
            name=name,
            slug=slug,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            slug__n=slug__n,
            slug__ic=slug__ic,
            slug__nic=slug__nic,
            slug__iew=slug__iew,
            slug__niew=slug__niew,
            slug__isw=slug__isw,
            slug__nisw=slug__nisw,
            slug__ie=slug__ie,
            slug__nie=slug__nie,
            slug__empty=slug__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenancyContactRolesList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_roles_list_serialize(
        self,
        id,
        name,
        slug,
        description,
        created,
        last_updated,
        q,
        tag,
        id__n,
        id__lte,
        id__lt,
        id__gte,
        id__gt,
        name__n,
        name__ic,
        name__nic,
        name__iew,
        name__niew,
        name__isw,
        name__nisw,
        name__ie,
        name__nie,
        name__empty,
        slug__n,
        slug__ic,
        slug__nic,
        slug__iew,
        slug__niew,
        slug__isw,
        slug__nisw,
        slug__ie,
        slug__nie,
        slug__empty,
        description__n,
        description__ic,
        description__nic,
        description__iew,
        description__niew,
        description__isw,
        description__nisw,
        description__ie,
        description__nie,
        description__empty,
        created__n,
        created__lte,
        created__lt,
        created__gte,
        created__gt,
        last_updated__n,
        last_updated__lte,
        last_updated__lt,
        last_updated__gte,
        last_updated__gt,
        tag__n,
        ordering,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if slug is not None:
            
            _query_params.append(('slug', slug))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if created is not None:
            
            _query_params.append(('created', created))
            
        if last_updated is not None:
            
            _query_params.append(('last_updated', last_updated))
            
        if q is not None:
            
            _query_params.append(('q', q))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if id__n is not None:
            
            _query_params.append(('id__n', id__n))
            
        if id__lte is not None:
            
            _query_params.append(('id__lte', id__lte))
            
        if id__lt is not None:
            
            _query_params.append(('id__lt', id__lt))
            
        if id__gte is not None:
            
            _query_params.append(('id__gte', id__gte))
            
        if id__gt is not None:
            
            _query_params.append(('id__gt', id__gt))
            
        if name__n is not None:
            
            _query_params.append(('name__n', name__n))
            
        if name__ic is not None:
            
            _query_params.append(('name__ic', name__ic))
            
        if name__nic is not None:
            
            _query_params.append(('name__nic', name__nic))
            
        if name__iew is not None:
            
            _query_params.append(('name__iew', name__iew))
            
        if name__niew is not None:
            
            _query_params.append(('name__niew', name__niew))
            
        if name__isw is not None:
            
            _query_params.append(('name__isw', name__isw))
            
        if name__nisw is not None:
            
            _query_params.append(('name__nisw', name__nisw))
            
        if name__ie is not None:
            
            _query_params.append(('name__ie', name__ie))
            
        if name__nie is not None:
            
            _query_params.append(('name__nie', name__nie))
            
        if name__empty is not None:
            
            _query_params.append(('name__empty', name__empty))
            
        if slug__n is not None:
            
            _query_params.append(('slug__n', slug__n))
            
        if slug__ic is not None:
            
            _query_params.append(('slug__ic', slug__ic))
            
        if slug__nic is not None:
            
            _query_params.append(('slug__nic', slug__nic))
            
        if slug__iew is not None:
            
            _query_params.append(('slug__iew', slug__iew))
            
        if slug__niew is not None:
            
            _query_params.append(('slug__niew', slug__niew))
            
        if slug__isw is not None:
            
            _query_params.append(('slug__isw', slug__isw))
            
        if slug__nisw is not None:
            
            _query_params.append(('slug__nisw', slug__nisw))
            
        if slug__ie is not None:
            
            _query_params.append(('slug__ie', slug__ie))
            
        if slug__nie is not None:
            
            _query_params.append(('slug__nie', slug__nie))
            
        if slug__empty is not None:
            
            _query_params.append(('slug__empty', slug__empty))
            
        if description__n is not None:
            
            _query_params.append(('description__n', description__n))
            
        if description__ic is not None:
            
            _query_params.append(('description__ic', description__ic))
            
        if description__nic is not None:
            
            _query_params.append(('description__nic', description__nic))
            
        if description__iew is not None:
            
            _query_params.append(('description__iew', description__iew))
            
        if description__niew is not None:
            
            _query_params.append(('description__niew', description__niew))
            
        if description__isw is not None:
            
            _query_params.append(('description__isw', description__isw))
            
        if description__nisw is not None:
            
            _query_params.append(('description__nisw', description__nisw))
            
        if description__ie is not None:
            
            _query_params.append(('description__ie', description__ie))
            
        if description__nie is not None:
            
            _query_params.append(('description__nie', description__nie))
            
        if description__empty is not None:
            
            _query_params.append(('description__empty', description__empty))
            
        if created__n is not None:
            
            _query_params.append(('created__n', created__n))
            
        if created__lte is not None:
            
            _query_params.append(('created__lte', created__lte))
            
        if created__lt is not None:
            
            _query_params.append(('created__lt', created__lt))
            
        if created__gte is not None:
            
            _query_params.append(('created__gte', created__gte))
            
        if created__gt is not None:
            
            _query_params.append(('created__gt', created__gt))
            
        if last_updated__n is not None:
            
            _query_params.append(('last_updated__n', last_updated__n))
            
        if last_updated__lte is not None:
            
            _query_params.append(('last_updated__lte', last_updated__lte))
            
        if last_updated__lt is not None:
            
            _query_params.append(('last_updated__lt', last_updated__lt))
            
        if last_updated__gte is not None:
            
            _query_params.append(('last_updated__gte', last_updated__gte))
            
        if last_updated__gt is not None:
            
            _query_params.append(('last_updated__gt', last_updated__gt))
            
        if tag__n is not None:
            
            _query_params.append(('tag__n', tag__n))
            
        if ordering is not None:
            
            _query_params.append(('ordering', ordering))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/tenancy/contact-roles/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contact_roles_partial_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact role.")],
        contact_role: ContactRole,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ContactRole:
        """tenancy_contact_roles_partial_update

        

        :param id: A unique integer value identifying this contact role. (required)
        :type id: int
        :param contact_role: (required)
        :type contact_role: ContactRole
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_partial_update_serialize(
            id=id,
            contact_role=contact_role,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactRole",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_roles_partial_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact role.")],
        contact_role: ContactRole,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ContactRole]:
        """tenancy_contact_roles_partial_update

        

        :param id: A unique integer value identifying this contact role. (required)
        :type id: int
        :param contact_role: (required)
        :type contact_role: ContactRole
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_partial_update_serialize(
            id=id,
            contact_role=contact_role,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactRole",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_roles_partial_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact role.")],
        contact_role: ContactRole,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_roles_partial_update

        

        :param id: A unique integer value identifying this contact role. (required)
        :type id: int
        :param contact_role: (required)
        :type contact_role: ContactRole
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_partial_update_serialize(
            id=id,
            contact_role=contact_role,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactRole",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_roles_partial_update_serialize(
        self,
        id,
        contact_role,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if contact_role is not None:
            _body_params = contact_role


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/tenancy/contact-roles/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contact_roles_read(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact role.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ContactRole:
        """tenancy_contact_roles_read

        

        :param id: A unique integer value identifying this contact role. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactRole",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_roles_read_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact role.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ContactRole]:
        """tenancy_contact_roles_read

        

        :param id: A unique integer value identifying this contact role. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactRole",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_roles_read_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact role.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_roles_read

        

        :param id: A unique integer value identifying this contact role. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactRole",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_roles_read_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/tenancy/contact-roles/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contact_roles_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact role.")],
        contact_role: ContactRole,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ContactRole:
        """tenancy_contact_roles_update

        

        :param id: A unique integer value identifying this contact role. (required)
        :type id: int
        :param contact_role: (required)
        :type contact_role: ContactRole
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_update_serialize(
            id=id,
            contact_role=contact_role,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactRole",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contact_roles_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact role.")],
        contact_role: ContactRole,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ContactRole]:
        """tenancy_contact_roles_update

        

        :param id: A unique integer value identifying this contact role. (required)
        :type id: int
        :param contact_role: (required)
        :type contact_role: ContactRole
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_update_serialize(
            id=id,
            contact_role=contact_role,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactRole",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contact_roles_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact role.")],
        contact_role: ContactRole,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contact_roles_update

        

        :param id: A unique integer value identifying this contact role. (required)
        :type id: int
        :param contact_role: (required)
        :type contact_role: ContactRole
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contact_roles_update_serialize(
            id=id,
            contact_role=contact_role,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContactRole",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contact_roles_update_serialize(
        self,
        id,
        contact_role,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if contact_role is not None:
            _body_params = contact_role


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/tenancy/contact-roles/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contacts_bulk_delete(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """tenancy_contacts_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contacts_bulk_delete_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """tenancy_contacts_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contacts_bulk_delete_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contacts_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contacts_bulk_delete_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/tenancy/contacts/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contacts_bulk_partial_update(
        self,
        writable_contact: WritableContact,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Contact:
        """tenancy_contacts_bulk_partial_update

        

        :param writable_contact: (required)
        :type writable_contact: WritableContact
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_bulk_partial_update_serialize(
            writable_contact=writable_contact,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Contact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contacts_bulk_partial_update_with_http_info(
        self,
        writable_contact: WritableContact,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Contact]:
        """tenancy_contacts_bulk_partial_update

        

        :param writable_contact: (required)
        :type writable_contact: WritableContact
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_bulk_partial_update_serialize(
            writable_contact=writable_contact,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Contact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contacts_bulk_partial_update_without_preload_content(
        self,
        writable_contact: WritableContact,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contacts_bulk_partial_update

        

        :param writable_contact: (required)
        :type writable_contact: WritableContact
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_bulk_partial_update_serialize(
            writable_contact=writable_contact,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Contact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contacts_bulk_partial_update_serialize(
        self,
        writable_contact,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_contact is not None:
            _body_params = writable_contact


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/tenancy/contacts/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contacts_bulk_update(
        self,
        writable_contact: WritableContact,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Contact:
        """tenancy_contacts_bulk_update

        

        :param writable_contact: (required)
        :type writable_contact: WritableContact
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_bulk_update_serialize(
            writable_contact=writable_contact,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Contact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contacts_bulk_update_with_http_info(
        self,
        writable_contact: WritableContact,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Contact]:
        """tenancy_contacts_bulk_update

        

        :param writable_contact: (required)
        :type writable_contact: WritableContact
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_bulk_update_serialize(
            writable_contact=writable_contact,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Contact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contacts_bulk_update_without_preload_content(
        self,
        writable_contact: WritableContact,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contacts_bulk_update

        

        :param writable_contact: (required)
        :type writable_contact: WritableContact
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_bulk_update_serialize(
            writable_contact=writable_contact,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Contact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contacts_bulk_update_serialize(
        self,
        writable_contact,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_contact is not None:
            _body_params = writable_contact


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/tenancy/contacts/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contacts_create(
        self,
        writable_contact: WritableContact,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Contact:
        """tenancy_contacts_create

        

        :param writable_contact: (required)
        :type writable_contact: WritableContact
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_create_serialize(
            writable_contact=writable_contact,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Contact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contacts_create_with_http_info(
        self,
        writable_contact: WritableContact,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Contact]:
        """tenancy_contacts_create

        

        :param writable_contact: (required)
        :type writable_contact: WritableContact
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_create_serialize(
            writable_contact=writable_contact,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Contact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contacts_create_without_preload_content(
        self,
        writable_contact: WritableContact,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contacts_create

        

        :param writable_contact: (required)
        :type writable_contact: WritableContact
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_create_serialize(
            writable_contact=writable_contact,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Contact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contacts_create_serialize(
        self,
        writable_contact,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_contact is not None:
            _body_params = writable_contact


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/tenancy/contacts/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contacts_delete(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """tenancy_contacts_delete

        

        :param id: A unique integer value identifying this contact. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contacts_delete_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """tenancy_contacts_delete

        

        :param id: A unique integer value identifying this contact. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contacts_delete_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contacts_delete

        

        :param id: A unique integer value identifying this contact. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contacts_delete_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/tenancy/contacts/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contacts_list(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        title: Optional[StrictStr] = None,
        phone: Optional[StrictStr] = None,
        email: Optional[StrictStr] = None,
        address: Optional[StrictStr] = None,
        link: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        group_id: Optional[StrictStr] = None,
        group: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        title__n: Optional[StrictStr] = None,
        title__ic: Optional[StrictStr] = None,
        title__nic: Optional[StrictStr] = None,
        title__iew: Optional[StrictStr] = None,
        title__niew: Optional[StrictStr] = None,
        title__isw: Optional[StrictStr] = None,
        title__nisw: Optional[StrictStr] = None,
        title__ie: Optional[StrictStr] = None,
        title__nie: Optional[StrictStr] = None,
        title__empty: Optional[StrictStr] = None,
        phone__n: Optional[StrictStr] = None,
        phone__ic: Optional[StrictStr] = None,
        phone__nic: Optional[StrictStr] = None,
        phone__iew: Optional[StrictStr] = None,
        phone__niew: Optional[StrictStr] = None,
        phone__isw: Optional[StrictStr] = None,
        phone__nisw: Optional[StrictStr] = None,
        phone__ie: Optional[StrictStr] = None,
        phone__nie: Optional[StrictStr] = None,
        phone__empty: Optional[StrictStr] = None,
        email__n: Optional[StrictStr] = None,
        email__ic: Optional[StrictStr] = None,
        email__nic: Optional[StrictStr] = None,
        email__iew: Optional[StrictStr] = None,
        email__niew: Optional[StrictStr] = None,
        email__isw: Optional[StrictStr] = None,
        email__nisw: Optional[StrictStr] = None,
        email__ie: Optional[StrictStr] = None,
        email__nie: Optional[StrictStr] = None,
        email__empty: Optional[StrictStr] = None,
        address__n: Optional[StrictStr] = None,
        address__ic: Optional[StrictStr] = None,
        address__nic: Optional[StrictStr] = None,
        address__iew: Optional[StrictStr] = None,
        address__niew: Optional[StrictStr] = None,
        address__isw: Optional[StrictStr] = None,
        address__nisw: Optional[StrictStr] = None,
        address__ie: Optional[StrictStr] = None,
        address__nie: Optional[StrictStr] = None,
        address__empty: Optional[StrictStr] = None,
        link__n: Optional[StrictStr] = None,
        link__ic: Optional[StrictStr] = None,
        link__nic: Optional[StrictStr] = None,
        link__iew: Optional[StrictStr] = None,
        link__niew: Optional[StrictStr] = None,
        link__isw: Optional[StrictStr] = None,
        link__nisw: Optional[StrictStr] = None,
        link__ie: Optional[StrictStr] = None,
        link__nie: Optional[StrictStr] = None,
        link__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        group_id__n: Optional[StrictStr] = None,
        group__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TenancyContactsList200Response:
        """tenancy_contacts_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param title: 
        :type title: str
        :param phone: 
        :type phone: str
        :param email: 
        :type email: str
        :param address: 
        :type address: str
        :param link: 
        :type link: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param group_id: 
        :type group_id: str
        :param group: 
        :type group: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param title__n: 
        :type title__n: str
        :param title__ic: 
        :type title__ic: str
        :param title__nic: 
        :type title__nic: str
        :param title__iew: 
        :type title__iew: str
        :param title__niew: 
        :type title__niew: str
        :param title__isw: 
        :type title__isw: str
        :param title__nisw: 
        :type title__nisw: str
        :param title__ie: 
        :type title__ie: str
        :param title__nie: 
        :type title__nie: str
        :param title__empty: 
        :type title__empty: str
        :param phone__n: 
        :type phone__n: str
        :param phone__ic: 
        :type phone__ic: str
        :param phone__nic: 
        :type phone__nic: str
        :param phone__iew: 
        :type phone__iew: str
        :param phone__niew: 
        :type phone__niew: str
        :param phone__isw: 
        :type phone__isw: str
        :param phone__nisw: 
        :type phone__nisw: str
        :param phone__ie: 
        :type phone__ie: str
        :param phone__nie: 
        :type phone__nie: str
        :param phone__empty: 
        :type phone__empty: str
        :param email__n: 
        :type email__n: str
        :param email__ic: 
        :type email__ic: str
        :param email__nic: 
        :type email__nic: str
        :param email__iew: 
        :type email__iew: str
        :param email__niew: 
        :type email__niew: str
        :param email__isw: 
        :type email__isw: str
        :param email__nisw: 
        :type email__nisw: str
        :param email__ie: 
        :type email__ie: str
        :param email__nie: 
        :type email__nie: str
        :param email__empty: 
        :type email__empty: str
        :param address__n: 
        :type address__n: str
        :param address__ic: 
        :type address__ic: str
        :param address__nic: 
        :type address__nic: str
        :param address__iew: 
        :type address__iew: str
        :param address__niew: 
        :type address__niew: str
        :param address__isw: 
        :type address__isw: str
        :param address__nisw: 
        :type address__nisw: str
        :param address__ie: 
        :type address__ie: str
        :param address__nie: 
        :type address__nie: str
        :param address__empty: 
        :type address__empty: str
        :param link__n: 
        :type link__n: str
        :param link__ic: 
        :type link__ic: str
        :param link__nic: 
        :type link__nic: str
        :param link__iew: 
        :type link__iew: str
        :param link__niew: 
        :type link__niew: str
        :param link__isw: 
        :type link__isw: str
        :param link__nisw: 
        :type link__nisw: str
        :param link__ie: 
        :type link__ie: str
        :param link__nie: 
        :type link__nie: str
        :param link__empty: 
        :type link__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param group_id__n: 
        :type group_id__n: str
        :param group__n: 
        :type group__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_list_serialize(
            id=id,
            name=name,
            title=title,
            phone=phone,
            email=email,
            address=address,
            link=link,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            group_id=group_id,
            group=group,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            title__n=title__n,
            title__ic=title__ic,
            title__nic=title__nic,
            title__iew=title__iew,
            title__niew=title__niew,
            title__isw=title__isw,
            title__nisw=title__nisw,
            title__ie=title__ie,
            title__nie=title__nie,
            title__empty=title__empty,
            phone__n=phone__n,
            phone__ic=phone__ic,
            phone__nic=phone__nic,
            phone__iew=phone__iew,
            phone__niew=phone__niew,
            phone__isw=phone__isw,
            phone__nisw=phone__nisw,
            phone__ie=phone__ie,
            phone__nie=phone__nie,
            phone__empty=phone__empty,
            email__n=email__n,
            email__ic=email__ic,
            email__nic=email__nic,
            email__iew=email__iew,
            email__niew=email__niew,
            email__isw=email__isw,
            email__nisw=email__nisw,
            email__ie=email__ie,
            email__nie=email__nie,
            email__empty=email__empty,
            address__n=address__n,
            address__ic=address__ic,
            address__nic=address__nic,
            address__iew=address__iew,
            address__niew=address__niew,
            address__isw=address__isw,
            address__nisw=address__nisw,
            address__ie=address__ie,
            address__nie=address__nie,
            address__empty=address__empty,
            link__n=link__n,
            link__ic=link__ic,
            link__nic=link__nic,
            link__iew=link__iew,
            link__niew=link__niew,
            link__isw=link__isw,
            link__nisw=link__nisw,
            link__ie=link__ie,
            link__nie=link__nie,
            link__empty=link__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            group_id__n=group_id__n,
            group__n=group__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenancyContactsList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contacts_list_with_http_info(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        title: Optional[StrictStr] = None,
        phone: Optional[StrictStr] = None,
        email: Optional[StrictStr] = None,
        address: Optional[StrictStr] = None,
        link: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        group_id: Optional[StrictStr] = None,
        group: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        title__n: Optional[StrictStr] = None,
        title__ic: Optional[StrictStr] = None,
        title__nic: Optional[StrictStr] = None,
        title__iew: Optional[StrictStr] = None,
        title__niew: Optional[StrictStr] = None,
        title__isw: Optional[StrictStr] = None,
        title__nisw: Optional[StrictStr] = None,
        title__ie: Optional[StrictStr] = None,
        title__nie: Optional[StrictStr] = None,
        title__empty: Optional[StrictStr] = None,
        phone__n: Optional[StrictStr] = None,
        phone__ic: Optional[StrictStr] = None,
        phone__nic: Optional[StrictStr] = None,
        phone__iew: Optional[StrictStr] = None,
        phone__niew: Optional[StrictStr] = None,
        phone__isw: Optional[StrictStr] = None,
        phone__nisw: Optional[StrictStr] = None,
        phone__ie: Optional[StrictStr] = None,
        phone__nie: Optional[StrictStr] = None,
        phone__empty: Optional[StrictStr] = None,
        email__n: Optional[StrictStr] = None,
        email__ic: Optional[StrictStr] = None,
        email__nic: Optional[StrictStr] = None,
        email__iew: Optional[StrictStr] = None,
        email__niew: Optional[StrictStr] = None,
        email__isw: Optional[StrictStr] = None,
        email__nisw: Optional[StrictStr] = None,
        email__ie: Optional[StrictStr] = None,
        email__nie: Optional[StrictStr] = None,
        email__empty: Optional[StrictStr] = None,
        address__n: Optional[StrictStr] = None,
        address__ic: Optional[StrictStr] = None,
        address__nic: Optional[StrictStr] = None,
        address__iew: Optional[StrictStr] = None,
        address__niew: Optional[StrictStr] = None,
        address__isw: Optional[StrictStr] = None,
        address__nisw: Optional[StrictStr] = None,
        address__ie: Optional[StrictStr] = None,
        address__nie: Optional[StrictStr] = None,
        address__empty: Optional[StrictStr] = None,
        link__n: Optional[StrictStr] = None,
        link__ic: Optional[StrictStr] = None,
        link__nic: Optional[StrictStr] = None,
        link__iew: Optional[StrictStr] = None,
        link__niew: Optional[StrictStr] = None,
        link__isw: Optional[StrictStr] = None,
        link__nisw: Optional[StrictStr] = None,
        link__ie: Optional[StrictStr] = None,
        link__nie: Optional[StrictStr] = None,
        link__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        group_id__n: Optional[StrictStr] = None,
        group__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TenancyContactsList200Response]:
        """tenancy_contacts_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param title: 
        :type title: str
        :param phone: 
        :type phone: str
        :param email: 
        :type email: str
        :param address: 
        :type address: str
        :param link: 
        :type link: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param group_id: 
        :type group_id: str
        :param group: 
        :type group: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param title__n: 
        :type title__n: str
        :param title__ic: 
        :type title__ic: str
        :param title__nic: 
        :type title__nic: str
        :param title__iew: 
        :type title__iew: str
        :param title__niew: 
        :type title__niew: str
        :param title__isw: 
        :type title__isw: str
        :param title__nisw: 
        :type title__nisw: str
        :param title__ie: 
        :type title__ie: str
        :param title__nie: 
        :type title__nie: str
        :param title__empty: 
        :type title__empty: str
        :param phone__n: 
        :type phone__n: str
        :param phone__ic: 
        :type phone__ic: str
        :param phone__nic: 
        :type phone__nic: str
        :param phone__iew: 
        :type phone__iew: str
        :param phone__niew: 
        :type phone__niew: str
        :param phone__isw: 
        :type phone__isw: str
        :param phone__nisw: 
        :type phone__nisw: str
        :param phone__ie: 
        :type phone__ie: str
        :param phone__nie: 
        :type phone__nie: str
        :param phone__empty: 
        :type phone__empty: str
        :param email__n: 
        :type email__n: str
        :param email__ic: 
        :type email__ic: str
        :param email__nic: 
        :type email__nic: str
        :param email__iew: 
        :type email__iew: str
        :param email__niew: 
        :type email__niew: str
        :param email__isw: 
        :type email__isw: str
        :param email__nisw: 
        :type email__nisw: str
        :param email__ie: 
        :type email__ie: str
        :param email__nie: 
        :type email__nie: str
        :param email__empty: 
        :type email__empty: str
        :param address__n: 
        :type address__n: str
        :param address__ic: 
        :type address__ic: str
        :param address__nic: 
        :type address__nic: str
        :param address__iew: 
        :type address__iew: str
        :param address__niew: 
        :type address__niew: str
        :param address__isw: 
        :type address__isw: str
        :param address__nisw: 
        :type address__nisw: str
        :param address__ie: 
        :type address__ie: str
        :param address__nie: 
        :type address__nie: str
        :param address__empty: 
        :type address__empty: str
        :param link__n: 
        :type link__n: str
        :param link__ic: 
        :type link__ic: str
        :param link__nic: 
        :type link__nic: str
        :param link__iew: 
        :type link__iew: str
        :param link__niew: 
        :type link__niew: str
        :param link__isw: 
        :type link__isw: str
        :param link__nisw: 
        :type link__nisw: str
        :param link__ie: 
        :type link__ie: str
        :param link__nie: 
        :type link__nie: str
        :param link__empty: 
        :type link__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param group_id__n: 
        :type group_id__n: str
        :param group__n: 
        :type group__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_list_serialize(
            id=id,
            name=name,
            title=title,
            phone=phone,
            email=email,
            address=address,
            link=link,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            group_id=group_id,
            group=group,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            title__n=title__n,
            title__ic=title__ic,
            title__nic=title__nic,
            title__iew=title__iew,
            title__niew=title__niew,
            title__isw=title__isw,
            title__nisw=title__nisw,
            title__ie=title__ie,
            title__nie=title__nie,
            title__empty=title__empty,
            phone__n=phone__n,
            phone__ic=phone__ic,
            phone__nic=phone__nic,
            phone__iew=phone__iew,
            phone__niew=phone__niew,
            phone__isw=phone__isw,
            phone__nisw=phone__nisw,
            phone__ie=phone__ie,
            phone__nie=phone__nie,
            phone__empty=phone__empty,
            email__n=email__n,
            email__ic=email__ic,
            email__nic=email__nic,
            email__iew=email__iew,
            email__niew=email__niew,
            email__isw=email__isw,
            email__nisw=email__nisw,
            email__ie=email__ie,
            email__nie=email__nie,
            email__empty=email__empty,
            address__n=address__n,
            address__ic=address__ic,
            address__nic=address__nic,
            address__iew=address__iew,
            address__niew=address__niew,
            address__isw=address__isw,
            address__nisw=address__nisw,
            address__ie=address__ie,
            address__nie=address__nie,
            address__empty=address__empty,
            link__n=link__n,
            link__ic=link__ic,
            link__nic=link__nic,
            link__iew=link__iew,
            link__niew=link__niew,
            link__isw=link__isw,
            link__nisw=link__nisw,
            link__ie=link__ie,
            link__nie=link__nie,
            link__empty=link__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            group_id__n=group_id__n,
            group__n=group__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenancyContactsList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contacts_list_without_preload_content(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        title: Optional[StrictStr] = None,
        phone: Optional[StrictStr] = None,
        email: Optional[StrictStr] = None,
        address: Optional[StrictStr] = None,
        link: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        group_id: Optional[StrictStr] = None,
        group: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        title__n: Optional[StrictStr] = None,
        title__ic: Optional[StrictStr] = None,
        title__nic: Optional[StrictStr] = None,
        title__iew: Optional[StrictStr] = None,
        title__niew: Optional[StrictStr] = None,
        title__isw: Optional[StrictStr] = None,
        title__nisw: Optional[StrictStr] = None,
        title__ie: Optional[StrictStr] = None,
        title__nie: Optional[StrictStr] = None,
        title__empty: Optional[StrictStr] = None,
        phone__n: Optional[StrictStr] = None,
        phone__ic: Optional[StrictStr] = None,
        phone__nic: Optional[StrictStr] = None,
        phone__iew: Optional[StrictStr] = None,
        phone__niew: Optional[StrictStr] = None,
        phone__isw: Optional[StrictStr] = None,
        phone__nisw: Optional[StrictStr] = None,
        phone__ie: Optional[StrictStr] = None,
        phone__nie: Optional[StrictStr] = None,
        phone__empty: Optional[StrictStr] = None,
        email__n: Optional[StrictStr] = None,
        email__ic: Optional[StrictStr] = None,
        email__nic: Optional[StrictStr] = None,
        email__iew: Optional[StrictStr] = None,
        email__niew: Optional[StrictStr] = None,
        email__isw: Optional[StrictStr] = None,
        email__nisw: Optional[StrictStr] = None,
        email__ie: Optional[StrictStr] = None,
        email__nie: Optional[StrictStr] = None,
        email__empty: Optional[StrictStr] = None,
        address__n: Optional[StrictStr] = None,
        address__ic: Optional[StrictStr] = None,
        address__nic: Optional[StrictStr] = None,
        address__iew: Optional[StrictStr] = None,
        address__niew: Optional[StrictStr] = None,
        address__isw: Optional[StrictStr] = None,
        address__nisw: Optional[StrictStr] = None,
        address__ie: Optional[StrictStr] = None,
        address__nie: Optional[StrictStr] = None,
        address__empty: Optional[StrictStr] = None,
        link__n: Optional[StrictStr] = None,
        link__ic: Optional[StrictStr] = None,
        link__nic: Optional[StrictStr] = None,
        link__iew: Optional[StrictStr] = None,
        link__niew: Optional[StrictStr] = None,
        link__isw: Optional[StrictStr] = None,
        link__nisw: Optional[StrictStr] = None,
        link__ie: Optional[StrictStr] = None,
        link__nie: Optional[StrictStr] = None,
        link__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        group_id__n: Optional[StrictStr] = None,
        group__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contacts_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param title: 
        :type title: str
        :param phone: 
        :type phone: str
        :param email: 
        :type email: str
        :param address: 
        :type address: str
        :param link: 
        :type link: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param group_id: 
        :type group_id: str
        :param group: 
        :type group: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param title__n: 
        :type title__n: str
        :param title__ic: 
        :type title__ic: str
        :param title__nic: 
        :type title__nic: str
        :param title__iew: 
        :type title__iew: str
        :param title__niew: 
        :type title__niew: str
        :param title__isw: 
        :type title__isw: str
        :param title__nisw: 
        :type title__nisw: str
        :param title__ie: 
        :type title__ie: str
        :param title__nie: 
        :type title__nie: str
        :param title__empty: 
        :type title__empty: str
        :param phone__n: 
        :type phone__n: str
        :param phone__ic: 
        :type phone__ic: str
        :param phone__nic: 
        :type phone__nic: str
        :param phone__iew: 
        :type phone__iew: str
        :param phone__niew: 
        :type phone__niew: str
        :param phone__isw: 
        :type phone__isw: str
        :param phone__nisw: 
        :type phone__nisw: str
        :param phone__ie: 
        :type phone__ie: str
        :param phone__nie: 
        :type phone__nie: str
        :param phone__empty: 
        :type phone__empty: str
        :param email__n: 
        :type email__n: str
        :param email__ic: 
        :type email__ic: str
        :param email__nic: 
        :type email__nic: str
        :param email__iew: 
        :type email__iew: str
        :param email__niew: 
        :type email__niew: str
        :param email__isw: 
        :type email__isw: str
        :param email__nisw: 
        :type email__nisw: str
        :param email__ie: 
        :type email__ie: str
        :param email__nie: 
        :type email__nie: str
        :param email__empty: 
        :type email__empty: str
        :param address__n: 
        :type address__n: str
        :param address__ic: 
        :type address__ic: str
        :param address__nic: 
        :type address__nic: str
        :param address__iew: 
        :type address__iew: str
        :param address__niew: 
        :type address__niew: str
        :param address__isw: 
        :type address__isw: str
        :param address__nisw: 
        :type address__nisw: str
        :param address__ie: 
        :type address__ie: str
        :param address__nie: 
        :type address__nie: str
        :param address__empty: 
        :type address__empty: str
        :param link__n: 
        :type link__n: str
        :param link__ic: 
        :type link__ic: str
        :param link__nic: 
        :type link__nic: str
        :param link__iew: 
        :type link__iew: str
        :param link__niew: 
        :type link__niew: str
        :param link__isw: 
        :type link__isw: str
        :param link__nisw: 
        :type link__nisw: str
        :param link__ie: 
        :type link__ie: str
        :param link__nie: 
        :type link__nie: str
        :param link__empty: 
        :type link__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param group_id__n: 
        :type group_id__n: str
        :param group__n: 
        :type group__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_list_serialize(
            id=id,
            name=name,
            title=title,
            phone=phone,
            email=email,
            address=address,
            link=link,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            group_id=group_id,
            group=group,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            title__n=title__n,
            title__ic=title__ic,
            title__nic=title__nic,
            title__iew=title__iew,
            title__niew=title__niew,
            title__isw=title__isw,
            title__nisw=title__nisw,
            title__ie=title__ie,
            title__nie=title__nie,
            title__empty=title__empty,
            phone__n=phone__n,
            phone__ic=phone__ic,
            phone__nic=phone__nic,
            phone__iew=phone__iew,
            phone__niew=phone__niew,
            phone__isw=phone__isw,
            phone__nisw=phone__nisw,
            phone__ie=phone__ie,
            phone__nie=phone__nie,
            phone__empty=phone__empty,
            email__n=email__n,
            email__ic=email__ic,
            email__nic=email__nic,
            email__iew=email__iew,
            email__niew=email__niew,
            email__isw=email__isw,
            email__nisw=email__nisw,
            email__ie=email__ie,
            email__nie=email__nie,
            email__empty=email__empty,
            address__n=address__n,
            address__ic=address__ic,
            address__nic=address__nic,
            address__iew=address__iew,
            address__niew=address__niew,
            address__isw=address__isw,
            address__nisw=address__nisw,
            address__ie=address__ie,
            address__nie=address__nie,
            address__empty=address__empty,
            link__n=link__n,
            link__ic=link__ic,
            link__nic=link__nic,
            link__iew=link__iew,
            link__niew=link__niew,
            link__isw=link__isw,
            link__nisw=link__nisw,
            link__ie=link__ie,
            link__nie=link__nie,
            link__empty=link__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            group_id__n=group_id__n,
            group__n=group__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenancyContactsList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contacts_list_serialize(
        self,
        id,
        name,
        title,
        phone,
        email,
        address,
        link,
        created,
        last_updated,
        q,
        tag,
        group_id,
        group,
        id__n,
        id__lte,
        id__lt,
        id__gte,
        id__gt,
        name__n,
        name__ic,
        name__nic,
        name__iew,
        name__niew,
        name__isw,
        name__nisw,
        name__ie,
        name__nie,
        name__empty,
        title__n,
        title__ic,
        title__nic,
        title__iew,
        title__niew,
        title__isw,
        title__nisw,
        title__ie,
        title__nie,
        title__empty,
        phone__n,
        phone__ic,
        phone__nic,
        phone__iew,
        phone__niew,
        phone__isw,
        phone__nisw,
        phone__ie,
        phone__nie,
        phone__empty,
        email__n,
        email__ic,
        email__nic,
        email__iew,
        email__niew,
        email__isw,
        email__nisw,
        email__ie,
        email__nie,
        email__empty,
        address__n,
        address__ic,
        address__nic,
        address__iew,
        address__niew,
        address__isw,
        address__nisw,
        address__ie,
        address__nie,
        address__empty,
        link__n,
        link__ic,
        link__nic,
        link__iew,
        link__niew,
        link__isw,
        link__nisw,
        link__ie,
        link__nie,
        link__empty,
        created__n,
        created__lte,
        created__lt,
        created__gte,
        created__gt,
        last_updated__n,
        last_updated__lte,
        last_updated__lt,
        last_updated__gte,
        last_updated__gt,
        tag__n,
        group_id__n,
        group__n,
        ordering,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if title is not None:
            
            _query_params.append(('title', title))
            
        if phone is not None:
            
            _query_params.append(('phone', phone))
            
        if email is not None:
            
            _query_params.append(('email', email))
            
        if address is not None:
            
            _query_params.append(('address', address))
            
        if link is not None:
            
            _query_params.append(('link', link))
            
        if created is not None:
            
            _query_params.append(('created', created))
            
        if last_updated is not None:
            
            _query_params.append(('last_updated', last_updated))
            
        if q is not None:
            
            _query_params.append(('q', q))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if group_id is not None:
            
            _query_params.append(('group_id', group_id))
            
        if group is not None:
            
            _query_params.append(('group', group))
            
        if id__n is not None:
            
            _query_params.append(('id__n', id__n))
            
        if id__lte is not None:
            
            _query_params.append(('id__lte', id__lte))
            
        if id__lt is not None:
            
            _query_params.append(('id__lt', id__lt))
            
        if id__gte is not None:
            
            _query_params.append(('id__gte', id__gte))
            
        if id__gt is not None:
            
            _query_params.append(('id__gt', id__gt))
            
        if name__n is not None:
            
            _query_params.append(('name__n', name__n))
            
        if name__ic is not None:
            
            _query_params.append(('name__ic', name__ic))
            
        if name__nic is not None:
            
            _query_params.append(('name__nic', name__nic))
            
        if name__iew is not None:
            
            _query_params.append(('name__iew', name__iew))
            
        if name__niew is not None:
            
            _query_params.append(('name__niew', name__niew))
            
        if name__isw is not None:
            
            _query_params.append(('name__isw', name__isw))
            
        if name__nisw is not None:
            
            _query_params.append(('name__nisw', name__nisw))
            
        if name__ie is not None:
            
            _query_params.append(('name__ie', name__ie))
            
        if name__nie is not None:
            
            _query_params.append(('name__nie', name__nie))
            
        if name__empty is not None:
            
            _query_params.append(('name__empty', name__empty))
            
        if title__n is not None:
            
            _query_params.append(('title__n', title__n))
            
        if title__ic is not None:
            
            _query_params.append(('title__ic', title__ic))
            
        if title__nic is not None:
            
            _query_params.append(('title__nic', title__nic))
            
        if title__iew is not None:
            
            _query_params.append(('title__iew', title__iew))
            
        if title__niew is not None:
            
            _query_params.append(('title__niew', title__niew))
            
        if title__isw is not None:
            
            _query_params.append(('title__isw', title__isw))
            
        if title__nisw is not None:
            
            _query_params.append(('title__nisw', title__nisw))
            
        if title__ie is not None:
            
            _query_params.append(('title__ie', title__ie))
            
        if title__nie is not None:
            
            _query_params.append(('title__nie', title__nie))
            
        if title__empty is not None:
            
            _query_params.append(('title__empty', title__empty))
            
        if phone__n is not None:
            
            _query_params.append(('phone__n', phone__n))
            
        if phone__ic is not None:
            
            _query_params.append(('phone__ic', phone__ic))
            
        if phone__nic is not None:
            
            _query_params.append(('phone__nic', phone__nic))
            
        if phone__iew is not None:
            
            _query_params.append(('phone__iew', phone__iew))
            
        if phone__niew is not None:
            
            _query_params.append(('phone__niew', phone__niew))
            
        if phone__isw is not None:
            
            _query_params.append(('phone__isw', phone__isw))
            
        if phone__nisw is not None:
            
            _query_params.append(('phone__nisw', phone__nisw))
            
        if phone__ie is not None:
            
            _query_params.append(('phone__ie', phone__ie))
            
        if phone__nie is not None:
            
            _query_params.append(('phone__nie', phone__nie))
            
        if phone__empty is not None:
            
            _query_params.append(('phone__empty', phone__empty))
            
        if email__n is not None:
            
            _query_params.append(('email__n', email__n))
            
        if email__ic is not None:
            
            _query_params.append(('email__ic', email__ic))
            
        if email__nic is not None:
            
            _query_params.append(('email__nic', email__nic))
            
        if email__iew is not None:
            
            _query_params.append(('email__iew', email__iew))
            
        if email__niew is not None:
            
            _query_params.append(('email__niew', email__niew))
            
        if email__isw is not None:
            
            _query_params.append(('email__isw', email__isw))
            
        if email__nisw is not None:
            
            _query_params.append(('email__nisw', email__nisw))
            
        if email__ie is not None:
            
            _query_params.append(('email__ie', email__ie))
            
        if email__nie is not None:
            
            _query_params.append(('email__nie', email__nie))
            
        if email__empty is not None:
            
            _query_params.append(('email__empty', email__empty))
            
        if address__n is not None:
            
            _query_params.append(('address__n', address__n))
            
        if address__ic is not None:
            
            _query_params.append(('address__ic', address__ic))
            
        if address__nic is not None:
            
            _query_params.append(('address__nic', address__nic))
            
        if address__iew is not None:
            
            _query_params.append(('address__iew', address__iew))
            
        if address__niew is not None:
            
            _query_params.append(('address__niew', address__niew))
            
        if address__isw is not None:
            
            _query_params.append(('address__isw', address__isw))
            
        if address__nisw is not None:
            
            _query_params.append(('address__nisw', address__nisw))
            
        if address__ie is not None:
            
            _query_params.append(('address__ie', address__ie))
            
        if address__nie is not None:
            
            _query_params.append(('address__nie', address__nie))
            
        if address__empty is not None:
            
            _query_params.append(('address__empty', address__empty))
            
        if link__n is not None:
            
            _query_params.append(('link__n', link__n))
            
        if link__ic is not None:
            
            _query_params.append(('link__ic', link__ic))
            
        if link__nic is not None:
            
            _query_params.append(('link__nic', link__nic))
            
        if link__iew is not None:
            
            _query_params.append(('link__iew', link__iew))
            
        if link__niew is not None:
            
            _query_params.append(('link__niew', link__niew))
            
        if link__isw is not None:
            
            _query_params.append(('link__isw', link__isw))
            
        if link__nisw is not None:
            
            _query_params.append(('link__nisw', link__nisw))
            
        if link__ie is not None:
            
            _query_params.append(('link__ie', link__ie))
            
        if link__nie is not None:
            
            _query_params.append(('link__nie', link__nie))
            
        if link__empty is not None:
            
            _query_params.append(('link__empty', link__empty))
            
        if created__n is not None:
            
            _query_params.append(('created__n', created__n))
            
        if created__lte is not None:
            
            _query_params.append(('created__lte', created__lte))
            
        if created__lt is not None:
            
            _query_params.append(('created__lt', created__lt))
            
        if created__gte is not None:
            
            _query_params.append(('created__gte', created__gte))
            
        if created__gt is not None:
            
            _query_params.append(('created__gt', created__gt))
            
        if last_updated__n is not None:
            
            _query_params.append(('last_updated__n', last_updated__n))
            
        if last_updated__lte is not None:
            
            _query_params.append(('last_updated__lte', last_updated__lte))
            
        if last_updated__lt is not None:
            
            _query_params.append(('last_updated__lt', last_updated__lt))
            
        if last_updated__gte is not None:
            
            _query_params.append(('last_updated__gte', last_updated__gte))
            
        if last_updated__gt is not None:
            
            _query_params.append(('last_updated__gt', last_updated__gt))
            
        if tag__n is not None:
            
            _query_params.append(('tag__n', tag__n))
            
        if group_id__n is not None:
            
            _query_params.append(('group_id__n', group_id__n))
            
        if group__n is not None:
            
            _query_params.append(('group__n', group__n))
            
        if ordering is not None:
            
            _query_params.append(('ordering', ordering))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/tenancy/contacts/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contacts_partial_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact.")],
        writable_contact: WritableContact,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Contact:
        """tenancy_contacts_partial_update

        

        :param id: A unique integer value identifying this contact. (required)
        :type id: int
        :param writable_contact: (required)
        :type writable_contact: WritableContact
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_partial_update_serialize(
            id=id,
            writable_contact=writable_contact,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Contact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contacts_partial_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact.")],
        writable_contact: WritableContact,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Contact]:
        """tenancy_contacts_partial_update

        

        :param id: A unique integer value identifying this contact. (required)
        :type id: int
        :param writable_contact: (required)
        :type writable_contact: WritableContact
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_partial_update_serialize(
            id=id,
            writable_contact=writable_contact,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Contact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contacts_partial_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact.")],
        writable_contact: WritableContact,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contacts_partial_update

        

        :param id: A unique integer value identifying this contact. (required)
        :type id: int
        :param writable_contact: (required)
        :type writable_contact: WritableContact
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_partial_update_serialize(
            id=id,
            writable_contact=writable_contact,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Contact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contacts_partial_update_serialize(
        self,
        id,
        writable_contact,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_contact is not None:
            _body_params = writable_contact


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/tenancy/contacts/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contacts_read(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Contact:
        """tenancy_contacts_read

        

        :param id: A unique integer value identifying this contact. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Contact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contacts_read_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Contact]:
        """tenancy_contacts_read

        

        :param id: A unique integer value identifying this contact. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Contact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contacts_read_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contacts_read

        

        :param id: A unique integer value identifying this contact. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Contact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contacts_read_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/tenancy/contacts/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_contacts_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact.")],
        writable_contact: WritableContact,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Contact:
        """tenancy_contacts_update

        

        :param id: A unique integer value identifying this contact. (required)
        :type id: int
        :param writable_contact: (required)
        :type writable_contact: WritableContact
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_update_serialize(
            id=id,
            writable_contact=writable_contact,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Contact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_contacts_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact.")],
        writable_contact: WritableContact,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Contact]:
        """tenancy_contacts_update

        

        :param id: A unique integer value identifying this contact. (required)
        :type id: int
        :param writable_contact: (required)
        :type writable_contact: WritableContact
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_update_serialize(
            id=id,
            writable_contact=writable_contact,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Contact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_contacts_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this contact.")],
        writable_contact: WritableContact,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_contacts_update

        

        :param id: A unique integer value identifying this contact. (required)
        :type id: int
        :param writable_contact: (required)
        :type writable_contact: WritableContact
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_contacts_update_serialize(
            id=id,
            writable_contact=writable_contact,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Contact",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_contacts_update_serialize(
        self,
        id,
        writable_contact,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_contact is not None:
            _body_params = writable_contact


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/tenancy/contacts/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_tenant_groups_bulk_delete(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """tenancy_tenant_groups_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_tenant_groups_bulk_delete_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """tenancy_tenant_groups_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_tenant_groups_bulk_delete_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_tenant_groups_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_tenant_groups_bulk_delete_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/tenancy/tenant-groups/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_tenant_groups_bulk_partial_update(
        self,
        writable_tenant_group: WritableTenantGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TenantGroup:
        """tenancy_tenant_groups_bulk_partial_update

        

        :param writable_tenant_group: (required)
        :type writable_tenant_group: WritableTenantGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_bulk_partial_update_serialize(
            writable_tenant_group=writable_tenant_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenantGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_tenant_groups_bulk_partial_update_with_http_info(
        self,
        writable_tenant_group: WritableTenantGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TenantGroup]:
        """tenancy_tenant_groups_bulk_partial_update

        

        :param writable_tenant_group: (required)
        :type writable_tenant_group: WritableTenantGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_bulk_partial_update_serialize(
            writable_tenant_group=writable_tenant_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenantGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_tenant_groups_bulk_partial_update_without_preload_content(
        self,
        writable_tenant_group: WritableTenantGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_tenant_groups_bulk_partial_update

        

        :param writable_tenant_group: (required)
        :type writable_tenant_group: WritableTenantGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_bulk_partial_update_serialize(
            writable_tenant_group=writable_tenant_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenantGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_tenant_groups_bulk_partial_update_serialize(
        self,
        writable_tenant_group,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_tenant_group is not None:
            _body_params = writable_tenant_group


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/tenancy/tenant-groups/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_tenant_groups_bulk_update(
        self,
        writable_tenant_group: WritableTenantGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TenantGroup:
        """tenancy_tenant_groups_bulk_update

        

        :param writable_tenant_group: (required)
        :type writable_tenant_group: WritableTenantGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_bulk_update_serialize(
            writable_tenant_group=writable_tenant_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenantGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_tenant_groups_bulk_update_with_http_info(
        self,
        writable_tenant_group: WritableTenantGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TenantGroup]:
        """tenancy_tenant_groups_bulk_update

        

        :param writable_tenant_group: (required)
        :type writable_tenant_group: WritableTenantGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_bulk_update_serialize(
            writable_tenant_group=writable_tenant_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenantGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_tenant_groups_bulk_update_without_preload_content(
        self,
        writable_tenant_group: WritableTenantGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_tenant_groups_bulk_update

        

        :param writable_tenant_group: (required)
        :type writable_tenant_group: WritableTenantGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_bulk_update_serialize(
            writable_tenant_group=writable_tenant_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenantGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_tenant_groups_bulk_update_serialize(
        self,
        writable_tenant_group,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_tenant_group is not None:
            _body_params = writable_tenant_group


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/tenancy/tenant-groups/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_tenant_groups_create(
        self,
        writable_tenant_group: WritableTenantGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TenantGroup:
        """tenancy_tenant_groups_create

        

        :param writable_tenant_group: (required)
        :type writable_tenant_group: WritableTenantGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_create_serialize(
            writable_tenant_group=writable_tenant_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "TenantGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_tenant_groups_create_with_http_info(
        self,
        writable_tenant_group: WritableTenantGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TenantGroup]:
        """tenancy_tenant_groups_create

        

        :param writable_tenant_group: (required)
        :type writable_tenant_group: WritableTenantGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_create_serialize(
            writable_tenant_group=writable_tenant_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "TenantGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_tenant_groups_create_without_preload_content(
        self,
        writable_tenant_group: WritableTenantGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_tenant_groups_create

        

        :param writable_tenant_group: (required)
        :type writable_tenant_group: WritableTenantGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_create_serialize(
            writable_tenant_group=writable_tenant_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "TenantGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_tenant_groups_create_serialize(
        self,
        writable_tenant_group,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_tenant_group is not None:
            _body_params = writable_tenant_group


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/tenancy/tenant-groups/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_tenant_groups_delete(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this tenant group.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """tenancy_tenant_groups_delete

        

        :param id: A unique integer value identifying this tenant group. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_tenant_groups_delete_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this tenant group.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """tenancy_tenant_groups_delete

        

        :param id: A unique integer value identifying this tenant group. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_tenant_groups_delete_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this tenant group.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_tenant_groups_delete

        

        :param id: A unique integer value identifying this tenant group. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_tenant_groups_delete_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/tenancy/tenant-groups/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_tenant_groups_list(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        slug: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        parent_id: Optional[StrictStr] = None,
        parent: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        slug__n: Optional[StrictStr] = None,
        slug__ic: Optional[StrictStr] = None,
        slug__nic: Optional[StrictStr] = None,
        slug__iew: Optional[StrictStr] = None,
        slug__niew: Optional[StrictStr] = None,
        slug__isw: Optional[StrictStr] = None,
        slug__nisw: Optional[StrictStr] = None,
        slug__ie: Optional[StrictStr] = None,
        slug__nie: Optional[StrictStr] = None,
        slug__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        parent_id__n: Optional[StrictStr] = None,
        parent__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TenancyTenantGroupsList200Response:
        """tenancy_tenant_groups_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param slug: 
        :type slug: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param parent_id: 
        :type parent_id: str
        :param parent: 
        :type parent: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param slug__n: 
        :type slug__n: str
        :param slug__ic: 
        :type slug__ic: str
        :param slug__nic: 
        :type slug__nic: str
        :param slug__iew: 
        :type slug__iew: str
        :param slug__niew: 
        :type slug__niew: str
        :param slug__isw: 
        :type slug__isw: str
        :param slug__nisw: 
        :type slug__nisw: str
        :param slug__ie: 
        :type slug__ie: str
        :param slug__nie: 
        :type slug__nie: str
        :param slug__empty: 
        :type slug__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param parent_id__n: 
        :type parent_id__n: str
        :param parent__n: 
        :type parent__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_list_serialize(
            id=id,
            name=name,
            slug=slug,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            parent_id=parent_id,
            parent=parent,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            slug__n=slug__n,
            slug__ic=slug__ic,
            slug__nic=slug__nic,
            slug__iew=slug__iew,
            slug__niew=slug__niew,
            slug__isw=slug__isw,
            slug__nisw=slug__nisw,
            slug__ie=slug__ie,
            slug__nie=slug__nie,
            slug__empty=slug__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            parent_id__n=parent_id__n,
            parent__n=parent__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenancyTenantGroupsList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_tenant_groups_list_with_http_info(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        slug: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        parent_id: Optional[StrictStr] = None,
        parent: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        slug__n: Optional[StrictStr] = None,
        slug__ic: Optional[StrictStr] = None,
        slug__nic: Optional[StrictStr] = None,
        slug__iew: Optional[StrictStr] = None,
        slug__niew: Optional[StrictStr] = None,
        slug__isw: Optional[StrictStr] = None,
        slug__nisw: Optional[StrictStr] = None,
        slug__ie: Optional[StrictStr] = None,
        slug__nie: Optional[StrictStr] = None,
        slug__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        parent_id__n: Optional[StrictStr] = None,
        parent__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TenancyTenantGroupsList200Response]:
        """tenancy_tenant_groups_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param slug: 
        :type slug: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param parent_id: 
        :type parent_id: str
        :param parent: 
        :type parent: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param slug__n: 
        :type slug__n: str
        :param slug__ic: 
        :type slug__ic: str
        :param slug__nic: 
        :type slug__nic: str
        :param slug__iew: 
        :type slug__iew: str
        :param slug__niew: 
        :type slug__niew: str
        :param slug__isw: 
        :type slug__isw: str
        :param slug__nisw: 
        :type slug__nisw: str
        :param slug__ie: 
        :type slug__ie: str
        :param slug__nie: 
        :type slug__nie: str
        :param slug__empty: 
        :type slug__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param parent_id__n: 
        :type parent_id__n: str
        :param parent__n: 
        :type parent__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_list_serialize(
            id=id,
            name=name,
            slug=slug,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            parent_id=parent_id,
            parent=parent,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            slug__n=slug__n,
            slug__ic=slug__ic,
            slug__nic=slug__nic,
            slug__iew=slug__iew,
            slug__niew=slug__niew,
            slug__isw=slug__isw,
            slug__nisw=slug__nisw,
            slug__ie=slug__ie,
            slug__nie=slug__nie,
            slug__empty=slug__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            parent_id__n=parent_id__n,
            parent__n=parent__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenancyTenantGroupsList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_tenant_groups_list_without_preload_content(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        slug: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        parent_id: Optional[StrictStr] = None,
        parent: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        slug__n: Optional[StrictStr] = None,
        slug__ic: Optional[StrictStr] = None,
        slug__nic: Optional[StrictStr] = None,
        slug__iew: Optional[StrictStr] = None,
        slug__niew: Optional[StrictStr] = None,
        slug__isw: Optional[StrictStr] = None,
        slug__nisw: Optional[StrictStr] = None,
        slug__ie: Optional[StrictStr] = None,
        slug__nie: Optional[StrictStr] = None,
        slug__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        parent_id__n: Optional[StrictStr] = None,
        parent__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_tenant_groups_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param slug: 
        :type slug: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param parent_id: 
        :type parent_id: str
        :param parent: 
        :type parent: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param slug__n: 
        :type slug__n: str
        :param slug__ic: 
        :type slug__ic: str
        :param slug__nic: 
        :type slug__nic: str
        :param slug__iew: 
        :type slug__iew: str
        :param slug__niew: 
        :type slug__niew: str
        :param slug__isw: 
        :type slug__isw: str
        :param slug__nisw: 
        :type slug__nisw: str
        :param slug__ie: 
        :type slug__ie: str
        :param slug__nie: 
        :type slug__nie: str
        :param slug__empty: 
        :type slug__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param parent_id__n: 
        :type parent_id__n: str
        :param parent__n: 
        :type parent__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_list_serialize(
            id=id,
            name=name,
            slug=slug,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            parent_id=parent_id,
            parent=parent,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            slug__n=slug__n,
            slug__ic=slug__ic,
            slug__nic=slug__nic,
            slug__iew=slug__iew,
            slug__niew=slug__niew,
            slug__isw=slug__isw,
            slug__nisw=slug__nisw,
            slug__ie=slug__ie,
            slug__nie=slug__nie,
            slug__empty=slug__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            parent_id__n=parent_id__n,
            parent__n=parent__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenancyTenantGroupsList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_tenant_groups_list_serialize(
        self,
        id,
        name,
        slug,
        description,
        created,
        last_updated,
        q,
        tag,
        parent_id,
        parent,
        id__n,
        id__lte,
        id__lt,
        id__gte,
        id__gt,
        name__n,
        name__ic,
        name__nic,
        name__iew,
        name__niew,
        name__isw,
        name__nisw,
        name__ie,
        name__nie,
        name__empty,
        slug__n,
        slug__ic,
        slug__nic,
        slug__iew,
        slug__niew,
        slug__isw,
        slug__nisw,
        slug__ie,
        slug__nie,
        slug__empty,
        description__n,
        description__ic,
        description__nic,
        description__iew,
        description__niew,
        description__isw,
        description__nisw,
        description__ie,
        description__nie,
        description__empty,
        created__n,
        created__lte,
        created__lt,
        created__gte,
        created__gt,
        last_updated__n,
        last_updated__lte,
        last_updated__lt,
        last_updated__gte,
        last_updated__gt,
        tag__n,
        parent_id__n,
        parent__n,
        ordering,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if slug is not None:
            
            _query_params.append(('slug', slug))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if created is not None:
            
            _query_params.append(('created', created))
            
        if last_updated is not None:
            
            _query_params.append(('last_updated', last_updated))
            
        if q is not None:
            
            _query_params.append(('q', q))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if parent_id is not None:
            
            _query_params.append(('parent_id', parent_id))
            
        if parent is not None:
            
            _query_params.append(('parent', parent))
            
        if id__n is not None:
            
            _query_params.append(('id__n', id__n))
            
        if id__lte is not None:
            
            _query_params.append(('id__lte', id__lte))
            
        if id__lt is not None:
            
            _query_params.append(('id__lt', id__lt))
            
        if id__gte is not None:
            
            _query_params.append(('id__gte', id__gte))
            
        if id__gt is not None:
            
            _query_params.append(('id__gt', id__gt))
            
        if name__n is not None:
            
            _query_params.append(('name__n', name__n))
            
        if name__ic is not None:
            
            _query_params.append(('name__ic', name__ic))
            
        if name__nic is not None:
            
            _query_params.append(('name__nic', name__nic))
            
        if name__iew is not None:
            
            _query_params.append(('name__iew', name__iew))
            
        if name__niew is not None:
            
            _query_params.append(('name__niew', name__niew))
            
        if name__isw is not None:
            
            _query_params.append(('name__isw', name__isw))
            
        if name__nisw is not None:
            
            _query_params.append(('name__nisw', name__nisw))
            
        if name__ie is not None:
            
            _query_params.append(('name__ie', name__ie))
            
        if name__nie is not None:
            
            _query_params.append(('name__nie', name__nie))
            
        if name__empty is not None:
            
            _query_params.append(('name__empty', name__empty))
            
        if slug__n is not None:
            
            _query_params.append(('slug__n', slug__n))
            
        if slug__ic is not None:
            
            _query_params.append(('slug__ic', slug__ic))
            
        if slug__nic is not None:
            
            _query_params.append(('slug__nic', slug__nic))
            
        if slug__iew is not None:
            
            _query_params.append(('slug__iew', slug__iew))
            
        if slug__niew is not None:
            
            _query_params.append(('slug__niew', slug__niew))
            
        if slug__isw is not None:
            
            _query_params.append(('slug__isw', slug__isw))
            
        if slug__nisw is not None:
            
            _query_params.append(('slug__nisw', slug__nisw))
            
        if slug__ie is not None:
            
            _query_params.append(('slug__ie', slug__ie))
            
        if slug__nie is not None:
            
            _query_params.append(('slug__nie', slug__nie))
            
        if slug__empty is not None:
            
            _query_params.append(('slug__empty', slug__empty))
            
        if description__n is not None:
            
            _query_params.append(('description__n', description__n))
            
        if description__ic is not None:
            
            _query_params.append(('description__ic', description__ic))
            
        if description__nic is not None:
            
            _query_params.append(('description__nic', description__nic))
            
        if description__iew is not None:
            
            _query_params.append(('description__iew', description__iew))
            
        if description__niew is not None:
            
            _query_params.append(('description__niew', description__niew))
            
        if description__isw is not None:
            
            _query_params.append(('description__isw', description__isw))
            
        if description__nisw is not None:
            
            _query_params.append(('description__nisw', description__nisw))
            
        if description__ie is not None:
            
            _query_params.append(('description__ie', description__ie))
            
        if description__nie is not None:
            
            _query_params.append(('description__nie', description__nie))
            
        if description__empty is not None:
            
            _query_params.append(('description__empty', description__empty))
            
        if created__n is not None:
            
            _query_params.append(('created__n', created__n))
            
        if created__lte is not None:
            
            _query_params.append(('created__lte', created__lte))
            
        if created__lt is not None:
            
            _query_params.append(('created__lt', created__lt))
            
        if created__gte is not None:
            
            _query_params.append(('created__gte', created__gte))
            
        if created__gt is not None:
            
            _query_params.append(('created__gt', created__gt))
            
        if last_updated__n is not None:
            
            _query_params.append(('last_updated__n', last_updated__n))
            
        if last_updated__lte is not None:
            
            _query_params.append(('last_updated__lte', last_updated__lte))
            
        if last_updated__lt is not None:
            
            _query_params.append(('last_updated__lt', last_updated__lt))
            
        if last_updated__gte is not None:
            
            _query_params.append(('last_updated__gte', last_updated__gte))
            
        if last_updated__gt is not None:
            
            _query_params.append(('last_updated__gt', last_updated__gt))
            
        if tag__n is not None:
            
            _query_params.append(('tag__n', tag__n))
            
        if parent_id__n is not None:
            
            _query_params.append(('parent_id__n', parent_id__n))
            
        if parent__n is not None:
            
            _query_params.append(('parent__n', parent__n))
            
        if ordering is not None:
            
            _query_params.append(('ordering', ordering))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/tenancy/tenant-groups/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_tenant_groups_partial_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this tenant group.")],
        writable_tenant_group: WritableTenantGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TenantGroup:
        """tenancy_tenant_groups_partial_update

        

        :param id: A unique integer value identifying this tenant group. (required)
        :type id: int
        :param writable_tenant_group: (required)
        :type writable_tenant_group: WritableTenantGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_partial_update_serialize(
            id=id,
            writable_tenant_group=writable_tenant_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenantGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_tenant_groups_partial_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this tenant group.")],
        writable_tenant_group: WritableTenantGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TenantGroup]:
        """tenancy_tenant_groups_partial_update

        

        :param id: A unique integer value identifying this tenant group. (required)
        :type id: int
        :param writable_tenant_group: (required)
        :type writable_tenant_group: WritableTenantGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_partial_update_serialize(
            id=id,
            writable_tenant_group=writable_tenant_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenantGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_tenant_groups_partial_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this tenant group.")],
        writable_tenant_group: WritableTenantGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_tenant_groups_partial_update

        

        :param id: A unique integer value identifying this tenant group. (required)
        :type id: int
        :param writable_tenant_group: (required)
        :type writable_tenant_group: WritableTenantGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_partial_update_serialize(
            id=id,
            writable_tenant_group=writable_tenant_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenantGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_tenant_groups_partial_update_serialize(
        self,
        id,
        writable_tenant_group,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_tenant_group is not None:
            _body_params = writable_tenant_group


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/tenancy/tenant-groups/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_tenant_groups_read(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this tenant group.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TenantGroup:
        """tenancy_tenant_groups_read

        

        :param id: A unique integer value identifying this tenant group. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenantGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_tenant_groups_read_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this tenant group.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TenantGroup]:
        """tenancy_tenant_groups_read

        

        :param id: A unique integer value identifying this tenant group. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenantGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_tenant_groups_read_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this tenant group.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_tenant_groups_read

        

        :param id: A unique integer value identifying this tenant group. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenantGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_tenant_groups_read_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/tenancy/tenant-groups/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_tenant_groups_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this tenant group.")],
        writable_tenant_group: WritableTenantGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TenantGroup:
        """tenancy_tenant_groups_update

        

        :param id: A unique integer value identifying this tenant group. (required)
        :type id: int
        :param writable_tenant_group: (required)
        :type writable_tenant_group: WritableTenantGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_update_serialize(
            id=id,
            writable_tenant_group=writable_tenant_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenantGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_tenant_groups_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this tenant group.")],
        writable_tenant_group: WritableTenantGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TenantGroup]:
        """tenancy_tenant_groups_update

        

        :param id: A unique integer value identifying this tenant group. (required)
        :type id: int
        :param writable_tenant_group: (required)
        :type writable_tenant_group: WritableTenantGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_update_serialize(
            id=id,
            writable_tenant_group=writable_tenant_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenantGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_tenant_groups_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this tenant group.")],
        writable_tenant_group: WritableTenantGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_tenant_groups_update

        

        :param id: A unique integer value identifying this tenant group. (required)
        :type id: int
        :param writable_tenant_group: (required)
        :type writable_tenant_group: WritableTenantGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenant_groups_update_serialize(
            id=id,
            writable_tenant_group=writable_tenant_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenantGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_tenant_groups_update_serialize(
        self,
        id,
        writable_tenant_group,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_tenant_group is not None:
            _body_params = writable_tenant_group


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/tenancy/tenant-groups/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_tenants_bulk_delete(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """tenancy_tenants_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_tenants_bulk_delete_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """tenancy_tenants_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_tenants_bulk_delete_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_tenants_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_tenants_bulk_delete_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/tenancy/tenants/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_tenants_bulk_partial_update(
        self,
        writable_tenant: WritableTenant,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tenant:
        """tenancy_tenants_bulk_partial_update

        

        :param writable_tenant: (required)
        :type writable_tenant: WritableTenant
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_bulk_partial_update_serialize(
            writable_tenant=writable_tenant,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tenant",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_tenants_bulk_partial_update_with_http_info(
        self,
        writable_tenant: WritableTenant,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tenant]:
        """tenancy_tenants_bulk_partial_update

        

        :param writable_tenant: (required)
        :type writable_tenant: WritableTenant
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_bulk_partial_update_serialize(
            writable_tenant=writable_tenant,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tenant",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_tenants_bulk_partial_update_without_preload_content(
        self,
        writable_tenant: WritableTenant,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_tenants_bulk_partial_update

        

        :param writable_tenant: (required)
        :type writable_tenant: WritableTenant
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_bulk_partial_update_serialize(
            writable_tenant=writable_tenant,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tenant",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_tenants_bulk_partial_update_serialize(
        self,
        writable_tenant,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_tenant is not None:
            _body_params = writable_tenant


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/tenancy/tenants/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_tenants_bulk_update(
        self,
        writable_tenant: WritableTenant,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tenant:
        """tenancy_tenants_bulk_update

        

        :param writable_tenant: (required)
        :type writable_tenant: WritableTenant
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_bulk_update_serialize(
            writable_tenant=writable_tenant,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tenant",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_tenants_bulk_update_with_http_info(
        self,
        writable_tenant: WritableTenant,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tenant]:
        """tenancy_tenants_bulk_update

        

        :param writable_tenant: (required)
        :type writable_tenant: WritableTenant
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_bulk_update_serialize(
            writable_tenant=writable_tenant,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tenant",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_tenants_bulk_update_without_preload_content(
        self,
        writable_tenant: WritableTenant,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_tenants_bulk_update

        

        :param writable_tenant: (required)
        :type writable_tenant: WritableTenant
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_bulk_update_serialize(
            writable_tenant=writable_tenant,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tenant",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_tenants_bulk_update_serialize(
        self,
        writable_tenant,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_tenant is not None:
            _body_params = writable_tenant


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/tenancy/tenants/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_tenants_create(
        self,
        writable_tenant: WritableTenant,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tenant:
        """tenancy_tenants_create

        

        :param writable_tenant: (required)
        :type writable_tenant: WritableTenant
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_create_serialize(
            writable_tenant=writable_tenant,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Tenant",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_tenants_create_with_http_info(
        self,
        writable_tenant: WritableTenant,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tenant]:
        """tenancy_tenants_create

        

        :param writable_tenant: (required)
        :type writable_tenant: WritableTenant
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_create_serialize(
            writable_tenant=writable_tenant,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Tenant",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_tenants_create_without_preload_content(
        self,
        writable_tenant: WritableTenant,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_tenants_create

        

        :param writable_tenant: (required)
        :type writable_tenant: WritableTenant
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_create_serialize(
            writable_tenant=writable_tenant,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Tenant",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_tenants_create_serialize(
        self,
        writable_tenant,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_tenant is not None:
            _body_params = writable_tenant


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/tenancy/tenants/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_tenants_delete(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this tenant.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """tenancy_tenants_delete

        

        :param id: A unique integer value identifying this tenant. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_tenants_delete_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this tenant.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """tenancy_tenants_delete

        

        :param id: A unique integer value identifying this tenant. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_tenants_delete_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this tenant.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_tenants_delete

        

        :param id: A unique integer value identifying this tenant. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_tenants_delete_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/tenancy/tenants/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_tenants_list(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        slug: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        contact: Optional[StrictStr] = None,
        contact_role: Optional[StrictStr] = None,
        contact_group: Optional[StrictStr] = None,
        group_id: Optional[StrictStr] = None,
        group: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        slug__n: Optional[StrictStr] = None,
        slug__ic: Optional[StrictStr] = None,
        slug__nic: Optional[StrictStr] = None,
        slug__iew: Optional[StrictStr] = None,
        slug__niew: Optional[StrictStr] = None,
        slug__isw: Optional[StrictStr] = None,
        slug__nisw: Optional[StrictStr] = None,
        slug__ie: Optional[StrictStr] = None,
        slug__nie: Optional[StrictStr] = None,
        slug__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        contact__n: Optional[StrictStr] = None,
        contact_role__n: Optional[StrictStr] = None,
        contact_group__n: Optional[StrictStr] = None,
        group_id__n: Optional[StrictStr] = None,
        group__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TenancyTenantsList200Response:
        """tenancy_tenants_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param slug: 
        :type slug: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param contact: 
        :type contact: str
        :param contact_role: 
        :type contact_role: str
        :param contact_group: 
        :type contact_group: str
        :param group_id: 
        :type group_id: str
        :param group: 
        :type group: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param slug__n: 
        :type slug__n: str
        :param slug__ic: 
        :type slug__ic: str
        :param slug__nic: 
        :type slug__nic: str
        :param slug__iew: 
        :type slug__iew: str
        :param slug__niew: 
        :type slug__niew: str
        :param slug__isw: 
        :type slug__isw: str
        :param slug__nisw: 
        :type slug__nisw: str
        :param slug__ie: 
        :type slug__ie: str
        :param slug__nie: 
        :type slug__nie: str
        :param slug__empty: 
        :type slug__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param contact__n: 
        :type contact__n: str
        :param contact_role__n: 
        :type contact_role__n: str
        :param contact_group__n: 
        :type contact_group__n: str
        :param group_id__n: 
        :type group_id__n: str
        :param group__n: 
        :type group__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_list_serialize(
            id=id,
            name=name,
            slug=slug,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            contact=contact,
            contact_role=contact_role,
            contact_group=contact_group,
            group_id=group_id,
            group=group,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            slug__n=slug__n,
            slug__ic=slug__ic,
            slug__nic=slug__nic,
            slug__iew=slug__iew,
            slug__niew=slug__niew,
            slug__isw=slug__isw,
            slug__nisw=slug__nisw,
            slug__ie=slug__ie,
            slug__nie=slug__nie,
            slug__empty=slug__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            contact__n=contact__n,
            contact_role__n=contact_role__n,
            contact_group__n=contact_group__n,
            group_id__n=group_id__n,
            group__n=group__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenancyTenantsList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_tenants_list_with_http_info(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        slug: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        contact: Optional[StrictStr] = None,
        contact_role: Optional[StrictStr] = None,
        contact_group: Optional[StrictStr] = None,
        group_id: Optional[StrictStr] = None,
        group: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        slug__n: Optional[StrictStr] = None,
        slug__ic: Optional[StrictStr] = None,
        slug__nic: Optional[StrictStr] = None,
        slug__iew: Optional[StrictStr] = None,
        slug__niew: Optional[StrictStr] = None,
        slug__isw: Optional[StrictStr] = None,
        slug__nisw: Optional[StrictStr] = None,
        slug__ie: Optional[StrictStr] = None,
        slug__nie: Optional[StrictStr] = None,
        slug__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        contact__n: Optional[StrictStr] = None,
        contact_role__n: Optional[StrictStr] = None,
        contact_group__n: Optional[StrictStr] = None,
        group_id__n: Optional[StrictStr] = None,
        group__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TenancyTenantsList200Response]:
        """tenancy_tenants_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param slug: 
        :type slug: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param contact: 
        :type contact: str
        :param contact_role: 
        :type contact_role: str
        :param contact_group: 
        :type contact_group: str
        :param group_id: 
        :type group_id: str
        :param group: 
        :type group: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param slug__n: 
        :type slug__n: str
        :param slug__ic: 
        :type slug__ic: str
        :param slug__nic: 
        :type slug__nic: str
        :param slug__iew: 
        :type slug__iew: str
        :param slug__niew: 
        :type slug__niew: str
        :param slug__isw: 
        :type slug__isw: str
        :param slug__nisw: 
        :type slug__nisw: str
        :param slug__ie: 
        :type slug__ie: str
        :param slug__nie: 
        :type slug__nie: str
        :param slug__empty: 
        :type slug__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param contact__n: 
        :type contact__n: str
        :param contact_role__n: 
        :type contact_role__n: str
        :param contact_group__n: 
        :type contact_group__n: str
        :param group_id__n: 
        :type group_id__n: str
        :param group__n: 
        :type group__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_list_serialize(
            id=id,
            name=name,
            slug=slug,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            contact=contact,
            contact_role=contact_role,
            contact_group=contact_group,
            group_id=group_id,
            group=group,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            slug__n=slug__n,
            slug__ic=slug__ic,
            slug__nic=slug__nic,
            slug__iew=slug__iew,
            slug__niew=slug__niew,
            slug__isw=slug__isw,
            slug__nisw=slug__nisw,
            slug__ie=slug__ie,
            slug__nie=slug__nie,
            slug__empty=slug__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            contact__n=contact__n,
            contact_role__n=contact_role__n,
            contact_group__n=contact_group__n,
            group_id__n=group_id__n,
            group__n=group__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenancyTenantsList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_tenants_list_without_preload_content(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        slug: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        contact: Optional[StrictStr] = None,
        contact_role: Optional[StrictStr] = None,
        contact_group: Optional[StrictStr] = None,
        group_id: Optional[StrictStr] = None,
        group: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        slug__n: Optional[StrictStr] = None,
        slug__ic: Optional[StrictStr] = None,
        slug__nic: Optional[StrictStr] = None,
        slug__iew: Optional[StrictStr] = None,
        slug__niew: Optional[StrictStr] = None,
        slug__isw: Optional[StrictStr] = None,
        slug__nisw: Optional[StrictStr] = None,
        slug__ie: Optional[StrictStr] = None,
        slug__nie: Optional[StrictStr] = None,
        slug__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        contact__n: Optional[StrictStr] = None,
        contact_role__n: Optional[StrictStr] = None,
        contact_group__n: Optional[StrictStr] = None,
        group_id__n: Optional[StrictStr] = None,
        group__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_tenants_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param slug: 
        :type slug: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param contact: 
        :type contact: str
        :param contact_role: 
        :type contact_role: str
        :param contact_group: 
        :type contact_group: str
        :param group_id: 
        :type group_id: str
        :param group: 
        :type group: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param slug__n: 
        :type slug__n: str
        :param slug__ic: 
        :type slug__ic: str
        :param slug__nic: 
        :type slug__nic: str
        :param slug__iew: 
        :type slug__iew: str
        :param slug__niew: 
        :type slug__niew: str
        :param slug__isw: 
        :type slug__isw: str
        :param slug__nisw: 
        :type slug__nisw: str
        :param slug__ie: 
        :type slug__ie: str
        :param slug__nie: 
        :type slug__nie: str
        :param slug__empty: 
        :type slug__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param contact__n: 
        :type contact__n: str
        :param contact_role__n: 
        :type contact_role__n: str
        :param contact_group__n: 
        :type contact_group__n: str
        :param group_id__n: 
        :type group_id__n: str
        :param group__n: 
        :type group__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_list_serialize(
            id=id,
            name=name,
            slug=slug,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            contact=contact,
            contact_role=contact_role,
            contact_group=contact_group,
            group_id=group_id,
            group=group,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            slug__n=slug__n,
            slug__ic=slug__ic,
            slug__nic=slug__nic,
            slug__iew=slug__iew,
            slug__niew=slug__niew,
            slug__isw=slug__isw,
            slug__nisw=slug__nisw,
            slug__ie=slug__ie,
            slug__nie=slug__nie,
            slug__empty=slug__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            contact__n=contact__n,
            contact_role__n=contact_role__n,
            contact_group__n=contact_group__n,
            group_id__n=group_id__n,
            group__n=group__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TenancyTenantsList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_tenants_list_serialize(
        self,
        id,
        name,
        slug,
        description,
        created,
        last_updated,
        q,
        tag,
        contact,
        contact_role,
        contact_group,
        group_id,
        group,
        id__n,
        id__lte,
        id__lt,
        id__gte,
        id__gt,
        name__n,
        name__ic,
        name__nic,
        name__iew,
        name__niew,
        name__isw,
        name__nisw,
        name__ie,
        name__nie,
        name__empty,
        slug__n,
        slug__ic,
        slug__nic,
        slug__iew,
        slug__niew,
        slug__isw,
        slug__nisw,
        slug__ie,
        slug__nie,
        slug__empty,
        description__n,
        description__ic,
        description__nic,
        description__iew,
        description__niew,
        description__isw,
        description__nisw,
        description__ie,
        description__nie,
        description__empty,
        created__n,
        created__lte,
        created__lt,
        created__gte,
        created__gt,
        last_updated__n,
        last_updated__lte,
        last_updated__lt,
        last_updated__gte,
        last_updated__gt,
        tag__n,
        contact__n,
        contact_role__n,
        contact_group__n,
        group_id__n,
        group__n,
        ordering,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if slug is not None:
            
            _query_params.append(('slug', slug))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if created is not None:
            
            _query_params.append(('created', created))
            
        if last_updated is not None:
            
            _query_params.append(('last_updated', last_updated))
            
        if q is not None:
            
            _query_params.append(('q', q))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if contact is not None:
            
            _query_params.append(('contact', contact))
            
        if contact_role is not None:
            
            _query_params.append(('contact_role', contact_role))
            
        if contact_group is not None:
            
            _query_params.append(('contact_group', contact_group))
            
        if group_id is not None:
            
            _query_params.append(('group_id', group_id))
            
        if group is not None:
            
            _query_params.append(('group', group))
            
        if id__n is not None:
            
            _query_params.append(('id__n', id__n))
            
        if id__lte is not None:
            
            _query_params.append(('id__lte', id__lte))
            
        if id__lt is not None:
            
            _query_params.append(('id__lt', id__lt))
            
        if id__gte is not None:
            
            _query_params.append(('id__gte', id__gte))
            
        if id__gt is not None:
            
            _query_params.append(('id__gt', id__gt))
            
        if name__n is not None:
            
            _query_params.append(('name__n', name__n))
            
        if name__ic is not None:
            
            _query_params.append(('name__ic', name__ic))
            
        if name__nic is not None:
            
            _query_params.append(('name__nic', name__nic))
            
        if name__iew is not None:
            
            _query_params.append(('name__iew', name__iew))
            
        if name__niew is not None:
            
            _query_params.append(('name__niew', name__niew))
            
        if name__isw is not None:
            
            _query_params.append(('name__isw', name__isw))
            
        if name__nisw is not None:
            
            _query_params.append(('name__nisw', name__nisw))
            
        if name__ie is not None:
            
            _query_params.append(('name__ie', name__ie))
            
        if name__nie is not None:
            
            _query_params.append(('name__nie', name__nie))
            
        if name__empty is not None:
            
            _query_params.append(('name__empty', name__empty))
            
        if slug__n is not None:
            
            _query_params.append(('slug__n', slug__n))
            
        if slug__ic is not None:
            
            _query_params.append(('slug__ic', slug__ic))
            
        if slug__nic is not None:
            
            _query_params.append(('slug__nic', slug__nic))
            
        if slug__iew is not None:
            
            _query_params.append(('slug__iew', slug__iew))
            
        if slug__niew is not None:
            
            _query_params.append(('slug__niew', slug__niew))
            
        if slug__isw is not None:
            
            _query_params.append(('slug__isw', slug__isw))
            
        if slug__nisw is not None:
            
            _query_params.append(('slug__nisw', slug__nisw))
            
        if slug__ie is not None:
            
            _query_params.append(('slug__ie', slug__ie))
            
        if slug__nie is not None:
            
            _query_params.append(('slug__nie', slug__nie))
            
        if slug__empty is not None:
            
            _query_params.append(('slug__empty', slug__empty))
            
        if description__n is not None:
            
            _query_params.append(('description__n', description__n))
            
        if description__ic is not None:
            
            _query_params.append(('description__ic', description__ic))
            
        if description__nic is not None:
            
            _query_params.append(('description__nic', description__nic))
            
        if description__iew is not None:
            
            _query_params.append(('description__iew', description__iew))
            
        if description__niew is not None:
            
            _query_params.append(('description__niew', description__niew))
            
        if description__isw is not None:
            
            _query_params.append(('description__isw', description__isw))
            
        if description__nisw is not None:
            
            _query_params.append(('description__nisw', description__nisw))
            
        if description__ie is not None:
            
            _query_params.append(('description__ie', description__ie))
            
        if description__nie is not None:
            
            _query_params.append(('description__nie', description__nie))
            
        if description__empty is not None:
            
            _query_params.append(('description__empty', description__empty))
            
        if created__n is not None:
            
            _query_params.append(('created__n', created__n))
            
        if created__lte is not None:
            
            _query_params.append(('created__lte', created__lte))
            
        if created__lt is not None:
            
            _query_params.append(('created__lt', created__lt))
            
        if created__gte is not None:
            
            _query_params.append(('created__gte', created__gte))
            
        if created__gt is not None:
            
            _query_params.append(('created__gt', created__gt))
            
        if last_updated__n is not None:
            
            _query_params.append(('last_updated__n', last_updated__n))
            
        if last_updated__lte is not None:
            
            _query_params.append(('last_updated__lte', last_updated__lte))
            
        if last_updated__lt is not None:
            
            _query_params.append(('last_updated__lt', last_updated__lt))
            
        if last_updated__gte is not None:
            
            _query_params.append(('last_updated__gte', last_updated__gte))
            
        if last_updated__gt is not None:
            
            _query_params.append(('last_updated__gt', last_updated__gt))
            
        if tag__n is not None:
            
            _query_params.append(('tag__n', tag__n))
            
        if contact__n is not None:
            
            _query_params.append(('contact__n', contact__n))
            
        if contact_role__n is not None:
            
            _query_params.append(('contact_role__n', contact_role__n))
            
        if contact_group__n is not None:
            
            _query_params.append(('contact_group__n', contact_group__n))
            
        if group_id__n is not None:
            
            _query_params.append(('group_id__n', group_id__n))
            
        if group__n is not None:
            
            _query_params.append(('group__n', group__n))
            
        if ordering is not None:
            
            _query_params.append(('ordering', ordering))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/tenancy/tenants/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_tenants_partial_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this tenant.")],
        writable_tenant: WritableTenant,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tenant:
        """tenancy_tenants_partial_update

        

        :param id: A unique integer value identifying this tenant. (required)
        :type id: int
        :param writable_tenant: (required)
        :type writable_tenant: WritableTenant
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_partial_update_serialize(
            id=id,
            writable_tenant=writable_tenant,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tenant",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_tenants_partial_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this tenant.")],
        writable_tenant: WritableTenant,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tenant]:
        """tenancy_tenants_partial_update

        

        :param id: A unique integer value identifying this tenant. (required)
        :type id: int
        :param writable_tenant: (required)
        :type writable_tenant: WritableTenant
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_partial_update_serialize(
            id=id,
            writable_tenant=writable_tenant,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tenant",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_tenants_partial_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this tenant.")],
        writable_tenant: WritableTenant,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_tenants_partial_update

        

        :param id: A unique integer value identifying this tenant. (required)
        :type id: int
        :param writable_tenant: (required)
        :type writable_tenant: WritableTenant
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_partial_update_serialize(
            id=id,
            writable_tenant=writable_tenant,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tenant",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_tenants_partial_update_serialize(
        self,
        id,
        writable_tenant,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_tenant is not None:
            _body_params = writable_tenant


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/tenancy/tenants/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_tenants_read(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this tenant.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tenant:
        """tenancy_tenants_read

        

        :param id: A unique integer value identifying this tenant. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tenant",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_tenants_read_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this tenant.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tenant]:
        """tenancy_tenants_read

        

        :param id: A unique integer value identifying this tenant. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tenant",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_tenants_read_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this tenant.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_tenants_read

        

        :param id: A unique integer value identifying this tenant. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tenant",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_tenants_read_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/tenancy/tenants/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tenancy_tenants_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this tenant.")],
        writable_tenant: WritableTenant,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Tenant:
        """tenancy_tenants_update

        

        :param id: A unique integer value identifying this tenant. (required)
        :type id: int
        :param writable_tenant: (required)
        :type writable_tenant: WritableTenant
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_update_serialize(
            id=id,
            writable_tenant=writable_tenant,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tenant",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tenancy_tenants_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this tenant.")],
        writable_tenant: WritableTenant,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Tenant]:
        """tenancy_tenants_update

        

        :param id: A unique integer value identifying this tenant. (required)
        :type id: int
        :param writable_tenant: (required)
        :type writable_tenant: WritableTenant
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_update_serialize(
            id=id,
            writable_tenant=writable_tenant,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tenant",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tenancy_tenants_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this tenant.")],
        writable_tenant: WritableTenant,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tenancy_tenants_update

        

        :param id: A unique integer value identifying this tenant. (required)
        :type id: int
        :param writable_tenant: (required)
        :type writable_tenant: WritableTenant
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tenancy_tenants_update_serialize(
            id=id,
            writable_tenant=writable_tenant,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Tenant",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tenancy_tenants_update_serialize(
        self,
        id,
        writable_tenant,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_tenant is not None:
            _body_params = writable_tenant


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/tenancy/tenants/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



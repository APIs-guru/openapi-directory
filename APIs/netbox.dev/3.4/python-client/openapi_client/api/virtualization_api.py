# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.cluster import Cluster
from openapi_client.models.cluster_group import ClusterGroup
from openapi_client.models.cluster_type import ClusterType
from openapi_client.models.vm_interface import VMInterface
from openapi_client.models.virtual_machine_with_config_context import VirtualMachineWithConfigContext
from openapi_client.models.virtualization_cluster_groups_list200_response import VirtualizationClusterGroupsList200Response
from openapi_client.models.virtualization_cluster_types_list200_response import VirtualizationClusterTypesList200Response
from openapi_client.models.virtualization_clusters_list200_response import VirtualizationClustersList200Response
from openapi_client.models.virtualization_interfaces_list200_response import VirtualizationInterfacesList200Response
from openapi_client.models.virtualization_virtual_machines_list200_response import VirtualizationVirtualMachinesList200Response
from openapi_client.models.writable_cluster import WritableCluster
from openapi_client.models.writable_vm_interface import WritableVMInterface
from openapi_client.models.writable_virtual_machine_with_config_context import WritableVirtualMachineWithConfigContext

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class VirtualizationApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def virtualization_cluster_groups_bulk_delete(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """virtualization_cluster_groups_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_cluster_groups_bulk_delete_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """virtualization_cluster_groups_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_cluster_groups_bulk_delete_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_cluster_groups_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_cluster_groups_bulk_delete_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/virtualization/cluster-groups/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_cluster_groups_bulk_partial_update(
        self,
        cluster_group: ClusterGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ClusterGroup:
        """virtualization_cluster_groups_bulk_partial_update

        

        :param cluster_group: (required)
        :type cluster_group: ClusterGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_bulk_partial_update_serialize(
            cluster_group=cluster_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_cluster_groups_bulk_partial_update_with_http_info(
        self,
        cluster_group: ClusterGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ClusterGroup]:
        """virtualization_cluster_groups_bulk_partial_update

        

        :param cluster_group: (required)
        :type cluster_group: ClusterGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_bulk_partial_update_serialize(
            cluster_group=cluster_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_cluster_groups_bulk_partial_update_without_preload_content(
        self,
        cluster_group: ClusterGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_cluster_groups_bulk_partial_update

        

        :param cluster_group: (required)
        :type cluster_group: ClusterGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_bulk_partial_update_serialize(
            cluster_group=cluster_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_cluster_groups_bulk_partial_update_serialize(
        self,
        cluster_group,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if cluster_group is not None:
            _body_params = cluster_group


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/virtualization/cluster-groups/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_cluster_groups_bulk_update(
        self,
        cluster_group: ClusterGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ClusterGroup:
        """virtualization_cluster_groups_bulk_update

        

        :param cluster_group: (required)
        :type cluster_group: ClusterGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_bulk_update_serialize(
            cluster_group=cluster_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_cluster_groups_bulk_update_with_http_info(
        self,
        cluster_group: ClusterGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ClusterGroup]:
        """virtualization_cluster_groups_bulk_update

        

        :param cluster_group: (required)
        :type cluster_group: ClusterGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_bulk_update_serialize(
            cluster_group=cluster_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_cluster_groups_bulk_update_without_preload_content(
        self,
        cluster_group: ClusterGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_cluster_groups_bulk_update

        

        :param cluster_group: (required)
        :type cluster_group: ClusterGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_bulk_update_serialize(
            cluster_group=cluster_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_cluster_groups_bulk_update_serialize(
        self,
        cluster_group,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if cluster_group is not None:
            _body_params = cluster_group


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/virtualization/cluster-groups/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_cluster_groups_create(
        self,
        cluster_group: ClusterGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ClusterGroup:
        """virtualization_cluster_groups_create

        

        :param cluster_group: (required)
        :type cluster_group: ClusterGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_create_serialize(
            cluster_group=cluster_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ClusterGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_cluster_groups_create_with_http_info(
        self,
        cluster_group: ClusterGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ClusterGroup]:
        """virtualization_cluster_groups_create

        

        :param cluster_group: (required)
        :type cluster_group: ClusterGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_create_serialize(
            cluster_group=cluster_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ClusterGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_cluster_groups_create_without_preload_content(
        self,
        cluster_group: ClusterGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_cluster_groups_create

        

        :param cluster_group: (required)
        :type cluster_group: ClusterGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_create_serialize(
            cluster_group=cluster_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ClusterGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_cluster_groups_create_serialize(
        self,
        cluster_group,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if cluster_group is not None:
            _body_params = cluster_group


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/virtualization/cluster-groups/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_cluster_groups_delete(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster group.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """virtualization_cluster_groups_delete

        

        :param id: A unique integer value identifying this cluster group. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_cluster_groups_delete_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster group.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """virtualization_cluster_groups_delete

        

        :param id: A unique integer value identifying this cluster group. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_cluster_groups_delete_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster group.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_cluster_groups_delete

        

        :param id: A unique integer value identifying this cluster group. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_cluster_groups_delete_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/virtualization/cluster-groups/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_cluster_groups_list(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        slug: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        contact: Optional[StrictStr] = None,
        contact_role: Optional[StrictStr] = None,
        contact_group: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        slug__n: Optional[StrictStr] = None,
        slug__ic: Optional[StrictStr] = None,
        slug__nic: Optional[StrictStr] = None,
        slug__iew: Optional[StrictStr] = None,
        slug__niew: Optional[StrictStr] = None,
        slug__isw: Optional[StrictStr] = None,
        slug__nisw: Optional[StrictStr] = None,
        slug__ie: Optional[StrictStr] = None,
        slug__nie: Optional[StrictStr] = None,
        slug__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        contact__n: Optional[StrictStr] = None,
        contact_role__n: Optional[StrictStr] = None,
        contact_group__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VirtualizationClusterGroupsList200Response:
        """virtualization_cluster_groups_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param slug: 
        :type slug: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param contact: 
        :type contact: str
        :param contact_role: 
        :type contact_role: str
        :param contact_group: 
        :type contact_group: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param slug__n: 
        :type slug__n: str
        :param slug__ic: 
        :type slug__ic: str
        :param slug__nic: 
        :type slug__nic: str
        :param slug__iew: 
        :type slug__iew: str
        :param slug__niew: 
        :type slug__niew: str
        :param slug__isw: 
        :type slug__isw: str
        :param slug__nisw: 
        :type slug__nisw: str
        :param slug__ie: 
        :type slug__ie: str
        :param slug__nie: 
        :type slug__nie: str
        :param slug__empty: 
        :type slug__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param contact__n: 
        :type contact__n: str
        :param contact_role__n: 
        :type contact_role__n: str
        :param contact_group__n: 
        :type contact_group__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_list_serialize(
            id=id,
            name=name,
            slug=slug,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            contact=contact,
            contact_role=contact_role,
            contact_group=contact_group,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            slug__n=slug__n,
            slug__ic=slug__ic,
            slug__nic=slug__nic,
            slug__iew=slug__iew,
            slug__niew=slug__niew,
            slug__isw=slug__isw,
            slug__nisw=slug__nisw,
            slug__ie=slug__ie,
            slug__nie=slug__nie,
            slug__empty=slug__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            contact__n=contact__n,
            contact_role__n=contact_role__n,
            contact_group__n=contact_group__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualizationClusterGroupsList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_cluster_groups_list_with_http_info(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        slug: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        contact: Optional[StrictStr] = None,
        contact_role: Optional[StrictStr] = None,
        contact_group: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        slug__n: Optional[StrictStr] = None,
        slug__ic: Optional[StrictStr] = None,
        slug__nic: Optional[StrictStr] = None,
        slug__iew: Optional[StrictStr] = None,
        slug__niew: Optional[StrictStr] = None,
        slug__isw: Optional[StrictStr] = None,
        slug__nisw: Optional[StrictStr] = None,
        slug__ie: Optional[StrictStr] = None,
        slug__nie: Optional[StrictStr] = None,
        slug__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        contact__n: Optional[StrictStr] = None,
        contact_role__n: Optional[StrictStr] = None,
        contact_group__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VirtualizationClusterGroupsList200Response]:
        """virtualization_cluster_groups_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param slug: 
        :type slug: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param contact: 
        :type contact: str
        :param contact_role: 
        :type contact_role: str
        :param contact_group: 
        :type contact_group: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param slug__n: 
        :type slug__n: str
        :param slug__ic: 
        :type slug__ic: str
        :param slug__nic: 
        :type slug__nic: str
        :param slug__iew: 
        :type slug__iew: str
        :param slug__niew: 
        :type slug__niew: str
        :param slug__isw: 
        :type slug__isw: str
        :param slug__nisw: 
        :type slug__nisw: str
        :param slug__ie: 
        :type slug__ie: str
        :param slug__nie: 
        :type slug__nie: str
        :param slug__empty: 
        :type slug__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param contact__n: 
        :type contact__n: str
        :param contact_role__n: 
        :type contact_role__n: str
        :param contact_group__n: 
        :type contact_group__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_list_serialize(
            id=id,
            name=name,
            slug=slug,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            contact=contact,
            contact_role=contact_role,
            contact_group=contact_group,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            slug__n=slug__n,
            slug__ic=slug__ic,
            slug__nic=slug__nic,
            slug__iew=slug__iew,
            slug__niew=slug__niew,
            slug__isw=slug__isw,
            slug__nisw=slug__nisw,
            slug__ie=slug__ie,
            slug__nie=slug__nie,
            slug__empty=slug__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            contact__n=contact__n,
            contact_role__n=contact_role__n,
            contact_group__n=contact_group__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualizationClusterGroupsList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_cluster_groups_list_without_preload_content(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        slug: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        contact: Optional[StrictStr] = None,
        contact_role: Optional[StrictStr] = None,
        contact_group: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        slug__n: Optional[StrictStr] = None,
        slug__ic: Optional[StrictStr] = None,
        slug__nic: Optional[StrictStr] = None,
        slug__iew: Optional[StrictStr] = None,
        slug__niew: Optional[StrictStr] = None,
        slug__isw: Optional[StrictStr] = None,
        slug__nisw: Optional[StrictStr] = None,
        slug__ie: Optional[StrictStr] = None,
        slug__nie: Optional[StrictStr] = None,
        slug__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        contact__n: Optional[StrictStr] = None,
        contact_role__n: Optional[StrictStr] = None,
        contact_group__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_cluster_groups_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param slug: 
        :type slug: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param contact: 
        :type contact: str
        :param contact_role: 
        :type contact_role: str
        :param contact_group: 
        :type contact_group: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param slug__n: 
        :type slug__n: str
        :param slug__ic: 
        :type slug__ic: str
        :param slug__nic: 
        :type slug__nic: str
        :param slug__iew: 
        :type slug__iew: str
        :param slug__niew: 
        :type slug__niew: str
        :param slug__isw: 
        :type slug__isw: str
        :param slug__nisw: 
        :type slug__nisw: str
        :param slug__ie: 
        :type slug__ie: str
        :param slug__nie: 
        :type slug__nie: str
        :param slug__empty: 
        :type slug__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param contact__n: 
        :type contact__n: str
        :param contact_role__n: 
        :type contact_role__n: str
        :param contact_group__n: 
        :type contact_group__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_list_serialize(
            id=id,
            name=name,
            slug=slug,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            contact=contact,
            contact_role=contact_role,
            contact_group=contact_group,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            slug__n=slug__n,
            slug__ic=slug__ic,
            slug__nic=slug__nic,
            slug__iew=slug__iew,
            slug__niew=slug__niew,
            slug__isw=slug__isw,
            slug__nisw=slug__nisw,
            slug__ie=slug__ie,
            slug__nie=slug__nie,
            slug__empty=slug__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            contact__n=contact__n,
            contact_role__n=contact_role__n,
            contact_group__n=contact_group__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualizationClusterGroupsList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_cluster_groups_list_serialize(
        self,
        id,
        name,
        slug,
        description,
        created,
        last_updated,
        q,
        tag,
        contact,
        contact_role,
        contact_group,
        id__n,
        id__lte,
        id__lt,
        id__gte,
        id__gt,
        name__n,
        name__ic,
        name__nic,
        name__iew,
        name__niew,
        name__isw,
        name__nisw,
        name__ie,
        name__nie,
        name__empty,
        slug__n,
        slug__ic,
        slug__nic,
        slug__iew,
        slug__niew,
        slug__isw,
        slug__nisw,
        slug__ie,
        slug__nie,
        slug__empty,
        description__n,
        description__ic,
        description__nic,
        description__iew,
        description__niew,
        description__isw,
        description__nisw,
        description__ie,
        description__nie,
        description__empty,
        created__n,
        created__lte,
        created__lt,
        created__gte,
        created__gt,
        last_updated__n,
        last_updated__lte,
        last_updated__lt,
        last_updated__gte,
        last_updated__gt,
        tag__n,
        contact__n,
        contact_role__n,
        contact_group__n,
        ordering,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if slug is not None:
            
            _query_params.append(('slug', slug))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if created is not None:
            
            _query_params.append(('created', created))
            
        if last_updated is not None:
            
            _query_params.append(('last_updated', last_updated))
            
        if q is not None:
            
            _query_params.append(('q', q))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if contact is not None:
            
            _query_params.append(('contact', contact))
            
        if contact_role is not None:
            
            _query_params.append(('contact_role', contact_role))
            
        if contact_group is not None:
            
            _query_params.append(('contact_group', contact_group))
            
        if id__n is not None:
            
            _query_params.append(('id__n', id__n))
            
        if id__lte is not None:
            
            _query_params.append(('id__lte', id__lte))
            
        if id__lt is not None:
            
            _query_params.append(('id__lt', id__lt))
            
        if id__gte is not None:
            
            _query_params.append(('id__gte', id__gte))
            
        if id__gt is not None:
            
            _query_params.append(('id__gt', id__gt))
            
        if name__n is not None:
            
            _query_params.append(('name__n', name__n))
            
        if name__ic is not None:
            
            _query_params.append(('name__ic', name__ic))
            
        if name__nic is not None:
            
            _query_params.append(('name__nic', name__nic))
            
        if name__iew is not None:
            
            _query_params.append(('name__iew', name__iew))
            
        if name__niew is not None:
            
            _query_params.append(('name__niew', name__niew))
            
        if name__isw is not None:
            
            _query_params.append(('name__isw', name__isw))
            
        if name__nisw is not None:
            
            _query_params.append(('name__nisw', name__nisw))
            
        if name__ie is not None:
            
            _query_params.append(('name__ie', name__ie))
            
        if name__nie is not None:
            
            _query_params.append(('name__nie', name__nie))
            
        if name__empty is not None:
            
            _query_params.append(('name__empty', name__empty))
            
        if slug__n is not None:
            
            _query_params.append(('slug__n', slug__n))
            
        if slug__ic is not None:
            
            _query_params.append(('slug__ic', slug__ic))
            
        if slug__nic is not None:
            
            _query_params.append(('slug__nic', slug__nic))
            
        if slug__iew is not None:
            
            _query_params.append(('slug__iew', slug__iew))
            
        if slug__niew is not None:
            
            _query_params.append(('slug__niew', slug__niew))
            
        if slug__isw is not None:
            
            _query_params.append(('slug__isw', slug__isw))
            
        if slug__nisw is not None:
            
            _query_params.append(('slug__nisw', slug__nisw))
            
        if slug__ie is not None:
            
            _query_params.append(('slug__ie', slug__ie))
            
        if slug__nie is not None:
            
            _query_params.append(('slug__nie', slug__nie))
            
        if slug__empty is not None:
            
            _query_params.append(('slug__empty', slug__empty))
            
        if description__n is not None:
            
            _query_params.append(('description__n', description__n))
            
        if description__ic is not None:
            
            _query_params.append(('description__ic', description__ic))
            
        if description__nic is not None:
            
            _query_params.append(('description__nic', description__nic))
            
        if description__iew is not None:
            
            _query_params.append(('description__iew', description__iew))
            
        if description__niew is not None:
            
            _query_params.append(('description__niew', description__niew))
            
        if description__isw is not None:
            
            _query_params.append(('description__isw', description__isw))
            
        if description__nisw is not None:
            
            _query_params.append(('description__nisw', description__nisw))
            
        if description__ie is not None:
            
            _query_params.append(('description__ie', description__ie))
            
        if description__nie is not None:
            
            _query_params.append(('description__nie', description__nie))
            
        if description__empty is not None:
            
            _query_params.append(('description__empty', description__empty))
            
        if created__n is not None:
            
            _query_params.append(('created__n', created__n))
            
        if created__lte is not None:
            
            _query_params.append(('created__lte', created__lte))
            
        if created__lt is not None:
            
            _query_params.append(('created__lt', created__lt))
            
        if created__gte is not None:
            
            _query_params.append(('created__gte', created__gte))
            
        if created__gt is not None:
            
            _query_params.append(('created__gt', created__gt))
            
        if last_updated__n is not None:
            
            _query_params.append(('last_updated__n', last_updated__n))
            
        if last_updated__lte is not None:
            
            _query_params.append(('last_updated__lte', last_updated__lte))
            
        if last_updated__lt is not None:
            
            _query_params.append(('last_updated__lt', last_updated__lt))
            
        if last_updated__gte is not None:
            
            _query_params.append(('last_updated__gte', last_updated__gte))
            
        if last_updated__gt is not None:
            
            _query_params.append(('last_updated__gt', last_updated__gt))
            
        if tag__n is not None:
            
            _query_params.append(('tag__n', tag__n))
            
        if contact__n is not None:
            
            _query_params.append(('contact__n', contact__n))
            
        if contact_role__n is not None:
            
            _query_params.append(('contact_role__n', contact_role__n))
            
        if contact_group__n is not None:
            
            _query_params.append(('contact_group__n', contact_group__n))
            
        if ordering is not None:
            
            _query_params.append(('ordering', ordering))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/virtualization/cluster-groups/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_cluster_groups_partial_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster group.")],
        cluster_group: ClusterGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ClusterGroup:
        """virtualization_cluster_groups_partial_update

        

        :param id: A unique integer value identifying this cluster group. (required)
        :type id: int
        :param cluster_group: (required)
        :type cluster_group: ClusterGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_partial_update_serialize(
            id=id,
            cluster_group=cluster_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_cluster_groups_partial_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster group.")],
        cluster_group: ClusterGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ClusterGroup]:
        """virtualization_cluster_groups_partial_update

        

        :param id: A unique integer value identifying this cluster group. (required)
        :type id: int
        :param cluster_group: (required)
        :type cluster_group: ClusterGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_partial_update_serialize(
            id=id,
            cluster_group=cluster_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_cluster_groups_partial_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster group.")],
        cluster_group: ClusterGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_cluster_groups_partial_update

        

        :param id: A unique integer value identifying this cluster group. (required)
        :type id: int
        :param cluster_group: (required)
        :type cluster_group: ClusterGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_partial_update_serialize(
            id=id,
            cluster_group=cluster_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_cluster_groups_partial_update_serialize(
        self,
        id,
        cluster_group,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if cluster_group is not None:
            _body_params = cluster_group


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/virtualization/cluster-groups/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_cluster_groups_read(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster group.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ClusterGroup:
        """virtualization_cluster_groups_read

        

        :param id: A unique integer value identifying this cluster group. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_cluster_groups_read_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster group.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ClusterGroup]:
        """virtualization_cluster_groups_read

        

        :param id: A unique integer value identifying this cluster group. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_cluster_groups_read_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster group.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_cluster_groups_read

        

        :param id: A unique integer value identifying this cluster group. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_cluster_groups_read_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/virtualization/cluster-groups/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_cluster_groups_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster group.")],
        cluster_group: ClusterGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ClusterGroup:
        """virtualization_cluster_groups_update

        

        :param id: A unique integer value identifying this cluster group. (required)
        :type id: int
        :param cluster_group: (required)
        :type cluster_group: ClusterGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_update_serialize(
            id=id,
            cluster_group=cluster_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_cluster_groups_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster group.")],
        cluster_group: ClusterGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ClusterGroup]:
        """virtualization_cluster_groups_update

        

        :param id: A unique integer value identifying this cluster group. (required)
        :type id: int
        :param cluster_group: (required)
        :type cluster_group: ClusterGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_update_serialize(
            id=id,
            cluster_group=cluster_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_cluster_groups_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster group.")],
        cluster_group: ClusterGroup,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_cluster_groups_update

        

        :param id: A unique integer value identifying this cluster group. (required)
        :type id: int
        :param cluster_group: (required)
        :type cluster_group: ClusterGroup
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_groups_update_serialize(
            id=id,
            cluster_group=cluster_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterGroup",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_cluster_groups_update_serialize(
        self,
        id,
        cluster_group,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if cluster_group is not None:
            _body_params = cluster_group


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/virtualization/cluster-groups/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_cluster_types_bulk_delete(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """virtualization_cluster_types_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_cluster_types_bulk_delete_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """virtualization_cluster_types_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_cluster_types_bulk_delete_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_cluster_types_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_cluster_types_bulk_delete_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/virtualization/cluster-types/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_cluster_types_bulk_partial_update(
        self,
        cluster_type: ClusterType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ClusterType:
        """virtualization_cluster_types_bulk_partial_update

        

        :param cluster_type: (required)
        :type cluster_type: ClusterType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_bulk_partial_update_serialize(
            cluster_type=cluster_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterType",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_cluster_types_bulk_partial_update_with_http_info(
        self,
        cluster_type: ClusterType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ClusterType]:
        """virtualization_cluster_types_bulk_partial_update

        

        :param cluster_type: (required)
        :type cluster_type: ClusterType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_bulk_partial_update_serialize(
            cluster_type=cluster_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterType",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_cluster_types_bulk_partial_update_without_preload_content(
        self,
        cluster_type: ClusterType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_cluster_types_bulk_partial_update

        

        :param cluster_type: (required)
        :type cluster_type: ClusterType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_bulk_partial_update_serialize(
            cluster_type=cluster_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterType",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_cluster_types_bulk_partial_update_serialize(
        self,
        cluster_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if cluster_type is not None:
            _body_params = cluster_type


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/virtualization/cluster-types/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_cluster_types_bulk_update(
        self,
        cluster_type: ClusterType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ClusterType:
        """virtualization_cluster_types_bulk_update

        

        :param cluster_type: (required)
        :type cluster_type: ClusterType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_bulk_update_serialize(
            cluster_type=cluster_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterType",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_cluster_types_bulk_update_with_http_info(
        self,
        cluster_type: ClusterType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ClusterType]:
        """virtualization_cluster_types_bulk_update

        

        :param cluster_type: (required)
        :type cluster_type: ClusterType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_bulk_update_serialize(
            cluster_type=cluster_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterType",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_cluster_types_bulk_update_without_preload_content(
        self,
        cluster_type: ClusterType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_cluster_types_bulk_update

        

        :param cluster_type: (required)
        :type cluster_type: ClusterType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_bulk_update_serialize(
            cluster_type=cluster_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterType",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_cluster_types_bulk_update_serialize(
        self,
        cluster_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if cluster_type is not None:
            _body_params = cluster_type


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/virtualization/cluster-types/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_cluster_types_create(
        self,
        cluster_type: ClusterType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ClusterType:
        """virtualization_cluster_types_create

        

        :param cluster_type: (required)
        :type cluster_type: ClusterType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_create_serialize(
            cluster_type=cluster_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ClusterType",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_cluster_types_create_with_http_info(
        self,
        cluster_type: ClusterType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ClusterType]:
        """virtualization_cluster_types_create

        

        :param cluster_type: (required)
        :type cluster_type: ClusterType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_create_serialize(
            cluster_type=cluster_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ClusterType",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_cluster_types_create_without_preload_content(
        self,
        cluster_type: ClusterType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_cluster_types_create

        

        :param cluster_type: (required)
        :type cluster_type: ClusterType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_create_serialize(
            cluster_type=cluster_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ClusterType",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_cluster_types_create_serialize(
        self,
        cluster_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if cluster_type is not None:
            _body_params = cluster_type


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/virtualization/cluster-types/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_cluster_types_delete(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster type.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """virtualization_cluster_types_delete

        

        :param id: A unique integer value identifying this cluster type. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_cluster_types_delete_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster type.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """virtualization_cluster_types_delete

        

        :param id: A unique integer value identifying this cluster type. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_cluster_types_delete_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster type.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_cluster_types_delete

        

        :param id: A unique integer value identifying this cluster type. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_cluster_types_delete_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/virtualization/cluster-types/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_cluster_types_list(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        slug: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        slug__n: Optional[StrictStr] = None,
        slug__ic: Optional[StrictStr] = None,
        slug__nic: Optional[StrictStr] = None,
        slug__iew: Optional[StrictStr] = None,
        slug__niew: Optional[StrictStr] = None,
        slug__isw: Optional[StrictStr] = None,
        slug__nisw: Optional[StrictStr] = None,
        slug__ie: Optional[StrictStr] = None,
        slug__nie: Optional[StrictStr] = None,
        slug__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VirtualizationClusterTypesList200Response:
        """virtualization_cluster_types_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param slug: 
        :type slug: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param slug__n: 
        :type slug__n: str
        :param slug__ic: 
        :type slug__ic: str
        :param slug__nic: 
        :type slug__nic: str
        :param slug__iew: 
        :type slug__iew: str
        :param slug__niew: 
        :type slug__niew: str
        :param slug__isw: 
        :type slug__isw: str
        :param slug__nisw: 
        :type slug__nisw: str
        :param slug__ie: 
        :type slug__ie: str
        :param slug__nie: 
        :type slug__nie: str
        :param slug__empty: 
        :type slug__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_list_serialize(
            id=id,
            name=name,
            slug=slug,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            slug__n=slug__n,
            slug__ic=slug__ic,
            slug__nic=slug__nic,
            slug__iew=slug__iew,
            slug__niew=slug__niew,
            slug__isw=slug__isw,
            slug__nisw=slug__nisw,
            slug__ie=slug__ie,
            slug__nie=slug__nie,
            slug__empty=slug__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualizationClusterTypesList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_cluster_types_list_with_http_info(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        slug: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        slug__n: Optional[StrictStr] = None,
        slug__ic: Optional[StrictStr] = None,
        slug__nic: Optional[StrictStr] = None,
        slug__iew: Optional[StrictStr] = None,
        slug__niew: Optional[StrictStr] = None,
        slug__isw: Optional[StrictStr] = None,
        slug__nisw: Optional[StrictStr] = None,
        slug__ie: Optional[StrictStr] = None,
        slug__nie: Optional[StrictStr] = None,
        slug__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VirtualizationClusterTypesList200Response]:
        """virtualization_cluster_types_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param slug: 
        :type slug: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param slug__n: 
        :type slug__n: str
        :param slug__ic: 
        :type slug__ic: str
        :param slug__nic: 
        :type slug__nic: str
        :param slug__iew: 
        :type slug__iew: str
        :param slug__niew: 
        :type slug__niew: str
        :param slug__isw: 
        :type slug__isw: str
        :param slug__nisw: 
        :type slug__nisw: str
        :param slug__ie: 
        :type slug__ie: str
        :param slug__nie: 
        :type slug__nie: str
        :param slug__empty: 
        :type slug__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_list_serialize(
            id=id,
            name=name,
            slug=slug,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            slug__n=slug__n,
            slug__ic=slug__ic,
            slug__nic=slug__nic,
            slug__iew=slug__iew,
            slug__niew=slug__niew,
            slug__isw=slug__isw,
            slug__nisw=slug__nisw,
            slug__ie=slug__ie,
            slug__nie=slug__nie,
            slug__empty=slug__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualizationClusterTypesList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_cluster_types_list_without_preload_content(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        slug: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        slug__n: Optional[StrictStr] = None,
        slug__ic: Optional[StrictStr] = None,
        slug__nic: Optional[StrictStr] = None,
        slug__iew: Optional[StrictStr] = None,
        slug__niew: Optional[StrictStr] = None,
        slug__isw: Optional[StrictStr] = None,
        slug__nisw: Optional[StrictStr] = None,
        slug__ie: Optional[StrictStr] = None,
        slug__nie: Optional[StrictStr] = None,
        slug__empty: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_cluster_types_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param slug: 
        :type slug: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param slug__n: 
        :type slug__n: str
        :param slug__ic: 
        :type slug__ic: str
        :param slug__nic: 
        :type slug__nic: str
        :param slug__iew: 
        :type slug__iew: str
        :param slug__niew: 
        :type slug__niew: str
        :param slug__isw: 
        :type slug__isw: str
        :param slug__nisw: 
        :type slug__nisw: str
        :param slug__ie: 
        :type slug__ie: str
        :param slug__nie: 
        :type slug__nie: str
        :param slug__empty: 
        :type slug__empty: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_list_serialize(
            id=id,
            name=name,
            slug=slug,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            slug__n=slug__n,
            slug__ic=slug__ic,
            slug__nic=slug__nic,
            slug__iew=slug__iew,
            slug__niew=slug__niew,
            slug__isw=slug__isw,
            slug__nisw=slug__nisw,
            slug__ie=slug__ie,
            slug__nie=slug__nie,
            slug__empty=slug__empty,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualizationClusterTypesList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_cluster_types_list_serialize(
        self,
        id,
        name,
        slug,
        description,
        created,
        last_updated,
        q,
        tag,
        id__n,
        id__lte,
        id__lt,
        id__gte,
        id__gt,
        name__n,
        name__ic,
        name__nic,
        name__iew,
        name__niew,
        name__isw,
        name__nisw,
        name__ie,
        name__nie,
        name__empty,
        slug__n,
        slug__ic,
        slug__nic,
        slug__iew,
        slug__niew,
        slug__isw,
        slug__nisw,
        slug__ie,
        slug__nie,
        slug__empty,
        description__n,
        description__ic,
        description__nic,
        description__iew,
        description__niew,
        description__isw,
        description__nisw,
        description__ie,
        description__nie,
        description__empty,
        created__n,
        created__lte,
        created__lt,
        created__gte,
        created__gt,
        last_updated__n,
        last_updated__lte,
        last_updated__lt,
        last_updated__gte,
        last_updated__gt,
        tag__n,
        ordering,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if slug is not None:
            
            _query_params.append(('slug', slug))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if created is not None:
            
            _query_params.append(('created', created))
            
        if last_updated is not None:
            
            _query_params.append(('last_updated', last_updated))
            
        if q is not None:
            
            _query_params.append(('q', q))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if id__n is not None:
            
            _query_params.append(('id__n', id__n))
            
        if id__lte is not None:
            
            _query_params.append(('id__lte', id__lte))
            
        if id__lt is not None:
            
            _query_params.append(('id__lt', id__lt))
            
        if id__gte is not None:
            
            _query_params.append(('id__gte', id__gte))
            
        if id__gt is not None:
            
            _query_params.append(('id__gt', id__gt))
            
        if name__n is not None:
            
            _query_params.append(('name__n', name__n))
            
        if name__ic is not None:
            
            _query_params.append(('name__ic', name__ic))
            
        if name__nic is not None:
            
            _query_params.append(('name__nic', name__nic))
            
        if name__iew is not None:
            
            _query_params.append(('name__iew', name__iew))
            
        if name__niew is not None:
            
            _query_params.append(('name__niew', name__niew))
            
        if name__isw is not None:
            
            _query_params.append(('name__isw', name__isw))
            
        if name__nisw is not None:
            
            _query_params.append(('name__nisw', name__nisw))
            
        if name__ie is not None:
            
            _query_params.append(('name__ie', name__ie))
            
        if name__nie is not None:
            
            _query_params.append(('name__nie', name__nie))
            
        if name__empty is not None:
            
            _query_params.append(('name__empty', name__empty))
            
        if slug__n is not None:
            
            _query_params.append(('slug__n', slug__n))
            
        if slug__ic is not None:
            
            _query_params.append(('slug__ic', slug__ic))
            
        if slug__nic is not None:
            
            _query_params.append(('slug__nic', slug__nic))
            
        if slug__iew is not None:
            
            _query_params.append(('slug__iew', slug__iew))
            
        if slug__niew is not None:
            
            _query_params.append(('slug__niew', slug__niew))
            
        if slug__isw is not None:
            
            _query_params.append(('slug__isw', slug__isw))
            
        if slug__nisw is not None:
            
            _query_params.append(('slug__nisw', slug__nisw))
            
        if slug__ie is not None:
            
            _query_params.append(('slug__ie', slug__ie))
            
        if slug__nie is not None:
            
            _query_params.append(('slug__nie', slug__nie))
            
        if slug__empty is not None:
            
            _query_params.append(('slug__empty', slug__empty))
            
        if description__n is not None:
            
            _query_params.append(('description__n', description__n))
            
        if description__ic is not None:
            
            _query_params.append(('description__ic', description__ic))
            
        if description__nic is not None:
            
            _query_params.append(('description__nic', description__nic))
            
        if description__iew is not None:
            
            _query_params.append(('description__iew', description__iew))
            
        if description__niew is not None:
            
            _query_params.append(('description__niew', description__niew))
            
        if description__isw is not None:
            
            _query_params.append(('description__isw', description__isw))
            
        if description__nisw is not None:
            
            _query_params.append(('description__nisw', description__nisw))
            
        if description__ie is not None:
            
            _query_params.append(('description__ie', description__ie))
            
        if description__nie is not None:
            
            _query_params.append(('description__nie', description__nie))
            
        if description__empty is not None:
            
            _query_params.append(('description__empty', description__empty))
            
        if created__n is not None:
            
            _query_params.append(('created__n', created__n))
            
        if created__lte is not None:
            
            _query_params.append(('created__lte', created__lte))
            
        if created__lt is not None:
            
            _query_params.append(('created__lt', created__lt))
            
        if created__gte is not None:
            
            _query_params.append(('created__gte', created__gte))
            
        if created__gt is not None:
            
            _query_params.append(('created__gt', created__gt))
            
        if last_updated__n is not None:
            
            _query_params.append(('last_updated__n', last_updated__n))
            
        if last_updated__lte is not None:
            
            _query_params.append(('last_updated__lte', last_updated__lte))
            
        if last_updated__lt is not None:
            
            _query_params.append(('last_updated__lt', last_updated__lt))
            
        if last_updated__gte is not None:
            
            _query_params.append(('last_updated__gte', last_updated__gte))
            
        if last_updated__gt is not None:
            
            _query_params.append(('last_updated__gt', last_updated__gt))
            
        if tag__n is not None:
            
            _query_params.append(('tag__n', tag__n))
            
        if ordering is not None:
            
            _query_params.append(('ordering', ordering))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/virtualization/cluster-types/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_cluster_types_partial_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster type.")],
        cluster_type: ClusterType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ClusterType:
        """virtualization_cluster_types_partial_update

        

        :param id: A unique integer value identifying this cluster type. (required)
        :type id: int
        :param cluster_type: (required)
        :type cluster_type: ClusterType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_partial_update_serialize(
            id=id,
            cluster_type=cluster_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterType",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_cluster_types_partial_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster type.")],
        cluster_type: ClusterType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ClusterType]:
        """virtualization_cluster_types_partial_update

        

        :param id: A unique integer value identifying this cluster type. (required)
        :type id: int
        :param cluster_type: (required)
        :type cluster_type: ClusterType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_partial_update_serialize(
            id=id,
            cluster_type=cluster_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterType",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_cluster_types_partial_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster type.")],
        cluster_type: ClusterType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_cluster_types_partial_update

        

        :param id: A unique integer value identifying this cluster type. (required)
        :type id: int
        :param cluster_type: (required)
        :type cluster_type: ClusterType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_partial_update_serialize(
            id=id,
            cluster_type=cluster_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterType",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_cluster_types_partial_update_serialize(
        self,
        id,
        cluster_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if cluster_type is not None:
            _body_params = cluster_type


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/virtualization/cluster-types/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_cluster_types_read(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster type.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ClusterType:
        """virtualization_cluster_types_read

        

        :param id: A unique integer value identifying this cluster type. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterType",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_cluster_types_read_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster type.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ClusterType]:
        """virtualization_cluster_types_read

        

        :param id: A unique integer value identifying this cluster type. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterType",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_cluster_types_read_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster type.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_cluster_types_read

        

        :param id: A unique integer value identifying this cluster type. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterType",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_cluster_types_read_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/virtualization/cluster-types/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_cluster_types_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster type.")],
        cluster_type: ClusterType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ClusterType:
        """virtualization_cluster_types_update

        

        :param id: A unique integer value identifying this cluster type. (required)
        :type id: int
        :param cluster_type: (required)
        :type cluster_type: ClusterType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_update_serialize(
            id=id,
            cluster_type=cluster_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterType",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_cluster_types_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster type.")],
        cluster_type: ClusterType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ClusterType]:
        """virtualization_cluster_types_update

        

        :param id: A unique integer value identifying this cluster type. (required)
        :type id: int
        :param cluster_type: (required)
        :type cluster_type: ClusterType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_update_serialize(
            id=id,
            cluster_type=cluster_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterType",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_cluster_types_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster type.")],
        cluster_type: ClusterType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_cluster_types_update

        

        :param id: A unique integer value identifying this cluster type. (required)
        :type id: int
        :param cluster_type: (required)
        :type cluster_type: ClusterType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_cluster_types_update_serialize(
            id=id,
            cluster_type=cluster_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusterType",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_cluster_types_update_serialize(
        self,
        id,
        cluster_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if cluster_type is not None:
            _body_params = cluster_type


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/virtualization/cluster-types/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_clusters_bulk_delete(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """virtualization_clusters_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_clusters_bulk_delete_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """virtualization_clusters_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_clusters_bulk_delete_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_clusters_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_clusters_bulk_delete_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/virtualization/clusters/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_clusters_bulk_partial_update(
        self,
        writable_cluster: WritableCluster,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Cluster:
        """virtualization_clusters_bulk_partial_update

        

        :param writable_cluster: (required)
        :type writable_cluster: WritableCluster
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_bulk_partial_update_serialize(
            writable_cluster=writable_cluster,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Cluster",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_clusters_bulk_partial_update_with_http_info(
        self,
        writable_cluster: WritableCluster,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Cluster]:
        """virtualization_clusters_bulk_partial_update

        

        :param writable_cluster: (required)
        :type writable_cluster: WritableCluster
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_bulk_partial_update_serialize(
            writable_cluster=writable_cluster,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Cluster",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_clusters_bulk_partial_update_without_preload_content(
        self,
        writable_cluster: WritableCluster,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_clusters_bulk_partial_update

        

        :param writable_cluster: (required)
        :type writable_cluster: WritableCluster
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_bulk_partial_update_serialize(
            writable_cluster=writable_cluster,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Cluster",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_clusters_bulk_partial_update_serialize(
        self,
        writable_cluster,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_cluster is not None:
            _body_params = writable_cluster


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/virtualization/clusters/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_clusters_bulk_update(
        self,
        writable_cluster: WritableCluster,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Cluster:
        """virtualization_clusters_bulk_update

        

        :param writable_cluster: (required)
        :type writable_cluster: WritableCluster
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_bulk_update_serialize(
            writable_cluster=writable_cluster,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Cluster",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_clusters_bulk_update_with_http_info(
        self,
        writable_cluster: WritableCluster,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Cluster]:
        """virtualization_clusters_bulk_update

        

        :param writable_cluster: (required)
        :type writable_cluster: WritableCluster
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_bulk_update_serialize(
            writable_cluster=writable_cluster,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Cluster",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_clusters_bulk_update_without_preload_content(
        self,
        writable_cluster: WritableCluster,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_clusters_bulk_update

        

        :param writable_cluster: (required)
        :type writable_cluster: WritableCluster
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_bulk_update_serialize(
            writable_cluster=writable_cluster,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Cluster",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_clusters_bulk_update_serialize(
        self,
        writable_cluster,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_cluster is not None:
            _body_params = writable_cluster


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/virtualization/clusters/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_clusters_create(
        self,
        writable_cluster: WritableCluster,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Cluster:
        """virtualization_clusters_create

        

        :param writable_cluster: (required)
        :type writable_cluster: WritableCluster
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_create_serialize(
            writable_cluster=writable_cluster,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Cluster",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_clusters_create_with_http_info(
        self,
        writable_cluster: WritableCluster,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Cluster]:
        """virtualization_clusters_create

        

        :param writable_cluster: (required)
        :type writable_cluster: WritableCluster
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_create_serialize(
            writable_cluster=writable_cluster,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Cluster",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_clusters_create_without_preload_content(
        self,
        writable_cluster: WritableCluster,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_clusters_create

        

        :param writable_cluster: (required)
        :type writable_cluster: WritableCluster
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_create_serialize(
            writable_cluster=writable_cluster,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Cluster",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_clusters_create_serialize(
        self,
        writable_cluster,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_cluster is not None:
            _body_params = writable_cluster


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/virtualization/clusters/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_clusters_delete(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """virtualization_clusters_delete

        

        :param id: A unique integer value identifying this cluster. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_clusters_delete_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """virtualization_clusters_delete

        

        :param id: A unique integer value identifying this cluster. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_clusters_delete_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_clusters_delete

        

        :param id: A unique integer value identifying this cluster. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_clusters_delete_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/virtualization/clusters/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_clusters_list(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        tenant_group_id: Optional[StrictStr] = None,
        tenant_group: Optional[StrictStr] = None,
        tenant_id: Optional[StrictStr] = None,
        tenant: Optional[StrictStr] = None,
        contact: Optional[StrictStr] = None,
        contact_role: Optional[StrictStr] = None,
        contact_group: Optional[StrictStr] = None,
        region_id: Optional[StrictStr] = None,
        region: Optional[StrictStr] = None,
        site_group_id: Optional[StrictStr] = None,
        site_group: Optional[StrictStr] = None,
        site_id: Optional[StrictStr] = None,
        site: Optional[StrictStr] = None,
        group_id: Optional[StrictStr] = None,
        group: Optional[StrictStr] = None,
        type_id: Optional[StrictStr] = None,
        type: Optional[StrictStr] = None,
        status: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        tenant_group_id__n: Optional[StrictStr] = None,
        tenant_group__n: Optional[StrictStr] = None,
        tenant_id__n: Optional[StrictStr] = None,
        tenant__n: Optional[StrictStr] = None,
        contact__n: Optional[StrictStr] = None,
        contact_role__n: Optional[StrictStr] = None,
        contact_group__n: Optional[StrictStr] = None,
        region_id__n: Optional[StrictStr] = None,
        region__n: Optional[StrictStr] = None,
        site_group_id__n: Optional[StrictStr] = None,
        site_group__n: Optional[StrictStr] = None,
        site_id__n: Optional[StrictStr] = None,
        site__n: Optional[StrictStr] = None,
        group_id__n: Optional[StrictStr] = None,
        group__n: Optional[StrictStr] = None,
        type_id__n: Optional[StrictStr] = None,
        type__n: Optional[StrictStr] = None,
        status__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VirtualizationClustersList200Response:
        """virtualization_clusters_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param tenant_group_id: 
        :type tenant_group_id: str
        :param tenant_group: 
        :type tenant_group: str
        :param tenant_id: 
        :type tenant_id: str
        :param tenant: 
        :type tenant: str
        :param contact: 
        :type contact: str
        :param contact_role: 
        :type contact_role: str
        :param contact_group: 
        :type contact_group: str
        :param region_id: 
        :type region_id: str
        :param region: 
        :type region: str
        :param site_group_id: 
        :type site_group_id: str
        :param site_group: 
        :type site_group: str
        :param site_id: 
        :type site_id: str
        :param site: 
        :type site: str
        :param group_id: 
        :type group_id: str
        :param group: 
        :type group: str
        :param type_id: 
        :type type_id: str
        :param type: 
        :type type: str
        :param status: 
        :type status: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param tenant_group_id__n: 
        :type tenant_group_id__n: str
        :param tenant_group__n: 
        :type tenant_group__n: str
        :param tenant_id__n: 
        :type tenant_id__n: str
        :param tenant__n: 
        :type tenant__n: str
        :param contact__n: 
        :type contact__n: str
        :param contact_role__n: 
        :type contact_role__n: str
        :param contact_group__n: 
        :type contact_group__n: str
        :param region_id__n: 
        :type region_id__n: str
        :param region__n: 
        :type region__n: str
        :param site_group_id__n: 
        :type site_group_id__n: str
        :param site_group__n: 
        :type site_group__n: str
        :param site_id__n: 
        :type site_id__n: str
        :param site__n: 
        :type site__n: str
        :param group_id__n: 
        :type group_id__n: str
        :param group__n: 
        :type group__n: str
        :param type_id__n: 
        :type type_id__n: str
        :param type__n: 
        :type type__n: str
        :param status__n: 
        :type status__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_list_serialize(
            id=id,
            name=name,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            tenant_group_id=tenant_group_id,
            tenant_group=tenant_group,
            tenant_id=tenant_id,
            tenant=tenant,
            contact=contact,
            contact_role=contact_role,
            contact_group=contact_group,
            region_id=region_id,
            region=region,
            site_group_id=site_group_id,
            site_group=site_group,
            site_id=site_id,
            site=site,
            group_id=group_id,
            group=group,
            type_id=type_id,
            type=type,
            status=status,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            tenant_group_id__n=tenant_group_id__n,
            tenant_group__n=tenant_group__n,
            tenant_id__n=tenant_id__n,
            tenant__n=tenant__n,
            contact__n=contact__n,
            contact_role__n=contact_role__n,
            contact_group__n=contact_group__n,
            region_id__n=region_id__n,
            region__n=region__n,
            site_group_id__n=site_group_id__n,
            site_group__n=site_group__n,
            site_id__n=site_id__n,
            site__n=site__n,
            group_id__n=group_id__n,
            group__n=group__n,
            type_id__n=type_id__n,
            type__n=type__n,
            status__n=status__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualizationClustersList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_clusters_list_with_http_info(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        tenant_group_id: Optional[StrictStr] = None,
        tenant_group: Optional[StrictStr] = None,
        tenant_id: Optional[StrictStr] = None,
        tenant: Optional[StrictStr] = None,
        contact: Optional[StrictStr] = None,
        contact_role: Optional[StrictStr] = None,
        contact_group: Optional[StrictStr] = None,
        region_id: Optional[StrictStr] = None,
        region: Optional[StrictStr] = None,
        site_group_id: Optional[StrictStr] = None,
        site_group: Optional[StrictStr] = None,
        site_id: Optional[StrictStr] = None,
        site: Optional[StrictStr] = None,
        group_id: Optional[StrictStr] = None,
        group: Optional[StrictStr] = None,
        type_id: Optional[StrictStr] = None,
        type: Optional[StrictStr] = None,
        status: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        tenant_group_id__n: Optional[StrictStr] = None,
        tenant_group__n: Optional[StrictStr] = None,
        tenant_id__n: Optional[StrictStr] = None,
        tenant__n: Optional[StrictStr] = None,
        contact__n: Optional[StrictStr] = None,
        contact_role__n: Optional[StrictStr] = None,
        contact_group__n: Optional[StrictStr] = None,
        region_id__n: Optional[StrictStr] = None,
        region__n: Optional[StrictStr] = None,
        site_group_id__n: Optional[StrictStr] = None,
        site_group__n: Optional[StrictStr] = None,
        site_id__n: Optional[StrictStr] = None,
        site__n: Optional[StrictStr] = None,
        group_id__n: Optional[StrictStr] = None,
        group__n: Optional[StrictStr] = None,
        type_id__n: Optional[StrictStr] = None,
        type__n: Optional[StrictStr] = None,
        status__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VirtualizationClustersList200Response]:
        """virtualization_clusters_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param tenant_group_id: 
        :type tenant_group_id: str
        :param tenant_group: 
        :type tenant_group: str
        :param tenant_id: 
        :type tenant_id: str
        :param tenant: 
        :type tenant: str
        :param contact: 
        :type contact: str
        :param contact_role: 
        :type contact_role: str
        :param contact_group: 
        :type contact_group: str
        :param region_id: 
        :type region_id: str
        :param region: 
        :type region: str
        :param site_group_id: 
        :type site_group_id: str
        :param site_group: 
        :type site_group: str
        :param site_id: 
        :type site_id: str
        :param site: 
        :type site: str
        :param group_id: 
        :type group_id: str
        :param group: 
        :type group: str
        :param type_id: 
        :type type_id: str
        :param type: 
        :type type: str
        :param status: 
        :type status: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param tenant_group_id__n: 
        :type tenant_group_id__n: str
        :param tenant_group__n: 
        :type tenant_group__n: str
        :param tenant_id__n: 
        :type tenant_id__n: str
        :param tenant__n: 
        :type tenant__n: str
        :param contact__n: 
        :type contact__n: str
        :param contact_role__n: 
        :type contact_role__n: str
        :param contact_group__n: 
        :type contact_group__n: str
        :param region_id__n: 
        :type region_id__n: str
        :param region__n: 
        :type region__n: str
        :param site_group_id__n: 
        :type site_group_id__n: str
        :param site_group__n: 
        :type site_group__n: str
        :param site_id__n: 
        :type site_id__n: str
        :param site__n: 
        :type site__n: str
        :param group_id__n: 
        :type group_id__n: str
        :param group__n: 
        :type group__n: str
        :param type_id__n: 
        :type type_id__n: str
        :param type__n: 
        :type type__n: str
        :param status__n: 
        :type status__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_list_serialize(
            id=id,
            name=name,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            tenant_group_id=tenant_group_id,
            tenant_group=tenant_group,
            tenant_id=tenant_id,
            tenant=tenant,
            contact=contact,
            contact_role=contact_role,
            contact_group=contact_group,
            region_id=region_id,
            region=region,
            site_group_id=site_group_id,
            site_group=site_group,
            site_id=site_id,
            site=site,
            group_id=group_id,
            group=group,
            type_id=type_id,
            type=type,
            status=status,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            tenant_group_id__n=tenant_group_id__n,
            tenant_group__n=tenant_group__n,
            tenant_id__n=tenant_id__n,
            tenant__n=tenant__n,
            contact__n=contact__n,
            contact_role__n=contact_role__n,
            contact_group__n=contact_group__n,
            region_id__n=region_id__n,
            region__n=region__n,
            site_group_id__n=site_group_id__n,
            site_group__n=site_group__n,
            site_id__n=site_id__n,
            site__n=site__n,
            group_id__n=group_id__n,
            group__n=group__n,
            type_id__n=type_id__n,
            type__n=type__n,
            status__n=status__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualizationClustersList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_clusters_list_without_preload_content(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        tenant_group_id: Optional[StrictStr] = None,
        tenant_group: Optional[StrictStr] = None,
        tenant_id: Optional[StrictStr] = None,
        tenant: Optional[StrictStr] = None,
        contact: Optional[StrictStr] = None,
        contact_role: Optional[StrictStr] = None,
        contact_group: Optional[StrictStr] = None,
        region_id: Optional[StrictStr] = None,
        region: Optional[StrictStr] = None,
        site_group_id: Optional[StrictStr] = None,
        site_group: Optional[StrictStr] = None,
        site_id: Optional[StrictStr] = None,
        site: Optional[StrictStr] = None,
        group_id: Optional[StrictStr] = None,
        group: Optional[StrictStr] = None,
        type_id: Optional[StrictStr] = None,
        type: Optional[StrictStr] = None,
        status: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        tenant_group_id__n: Optional[StrictStr] = None,
        tenant_group__n: Optional[StrictStr] = None,
        tenant_id__n: Optional[StrictStr] = None,
        tenant__n: Optional[StrictStr] = None,
        contact__n: Optional[StrictStr] = None,
        contact_role__n: Optional[StrictStr] = None,
        contact_group__n: Optional[StrictStr] = None,
        region_id__n: Optional[StrictStr] = None,
        region__n: Optional[StrictStr] = None,
        site_group_id__n: Optional[StrictStr] = None,
        site_group__n: Optional[StrictStr] = None,
        site_id__n: Optional[StrictStr] = None,
        site__n: Optional[StrictStr] = None,
        group_id__n: Optional[StrictStr] = None,
        group__n: Optional[StrictStr] = None,
        type_id__n: Optional[StrictStr] = None,
        type__n: Optional[StrictStr] = None,
        status__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_clusters_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param tenant_group_id: 
        :type tenant_group_id: str
        :param tenant_group: 
        :type tenant_group: str
        :param tenant_id: 
        :type tenant_id: str
        :param tenant: 
        :type tenant: str
        :param contact: 
        :type contact: str
        :param contact_role: 
        :type contact_role: str
        :param contact_group: 
        :type contact_group: str
        :param region_id: 
        :type region_id: str
        :param region: 
        :type region: str
        :param site_group_id: 
        :type site_group_id: str
        :param site_group: 
        :type site_group: str
        :param site_id: 
        :type site_id: str
        :param site: 
        :type site: str
        :param group_id: 
        :type group_id: str
        :param group: 
        :type group: str
        :param type_id: 
        :type type_id: str
        :param type: 
        :type type: str
        :param status: 
        :type status: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param tenant_group_id__n: 
        :type tenant_group_id__n: str
        :param tenant_group__n: 
        :type tenant_group__n: str
        :param tenant_id__n: 
        :type tenant_id__n: str
        :param tenant__n: 
        :type tenant__n: str
        :param contact__n: 
        :type contact__n: str
        :param contact_role__n: 
        :type contact_role__n: str
        :param contact_group__n: 
        :type contact_group__n: str
        :param region_id__n: 
        :type region_id__n: str
        :param region__n: 
        :type region__n: str
        :param site_group_id__n: 
        :type site_group_id__n: str
        :param site_group__n: 
        :type site_group__n: str
        :param site_id__n: 
        :type site_id__n: str
        :param site__n: 
        :type site__n: str
        :param group_id__n: 
        :type group_id__n: str
        :param group__n: 
        :type group__n: str
        :param type_id__n: 
        :type type_id__n: str
        :param type__n: 
        :type type__n: str
        :param status__n: 
        :type status__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_list_serialize(
            id=id,
            name=name,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            tenant_group_id=tenant_group_id,
            tenant_group=tenant_group,
            tenant_id=tenant_id,
            tenant=tenant,
            contact=contact,
            contact_role=contact_role,
            contact_group=contact_group,
            region_id=region_id,
            region=region,
            site_group_id=site_group_id,
            site_group=site_group,
            site_id=site_id,
            site=site,
            group_id=group_id,
            group=group,
            type_id=type_id,
            type=type,
            status=status,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            tenant_group_id__n=tenant_group_id__n,
            tenant_group__n=tenant_group__n,
            tenant_id__n=tenant_id__n,
            tenant__n=tenant__n,
            contact__n=contact__n,
            contact_role__n=contact_role__n,
            contact_group__n=contact_group__n,
            region_id__n=region_id__n,
            region__n=region__n,
            site_group_id__n=site_group_id__n,
            site_group__n=site_group__n,
            site_id__n=site_id__n,
            site__n=site__n,
            group_id__n=group_id__n,
            group__n=group__n,
            type_id__n=type_id__n,
            type__n=type__n,
            status__n=status__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualizationClustersList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_clusters_list_serialize(
        self,
        id,
        name,
        created,
        last_updated,
        q,
        tag,
        tenant_group_id,
        tenant_group,
        tenant_id,
        tenant,
        contact,
        contact_role,
        contact_group,
        region_id,
        region,
        site_group_id,
        site_group,
        site_id,
        site,
        group_id,
        group,
        type_id,
        type,
        status,
        id__n,
        id__lte,
        id__lt,
        id__gte,
        id__gt,
        name__n,
        name__ic,
        name__nic,
        name__iew,
        name__niew,
        name__isw,
        name__nisw,
        name__ie,
        name__nie,
        name__empty,
        created__n,
        created__lte,
        created__lt,
        created__gte,
        created__gt,
        last_updated__n,
        last_updated__lte,
        last_updated__lt,
        last_updated__gte,
        last_updated__gt,
        tag__n,
        tenant_group_id__n,
        tenant_group__n,
        tenant_id__n,
        tenant__n,
        contact__n,
        contact_role__n,
        contact_group__n,
        region_id__n,
        region__n,
        site_group_id__n,
        site_group__n,
        site_id__n,
        site__n,
        group_id__n,
        group__n,
        type_id__n,
        type__n,
        status__n,
        ordering,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if created is not None:
            
            _query_params.append(('created', created))
            
        if last_updated is not None:
            
            _query_params.append(('last_updated', last_updated))
            
        if q is not None:
            
            _query_params.append(('q', q))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if tenant_group_id is not None:
            
            _query_params.append(('tenant_group_id', tenant_group_id))
            
        if tenant_group is not None:
            
            _query_params.append(('tenant_group', tenant_group))
            
        if tenant_id is not None:
            
            _query_params.append(('tenant_id', tenant_id))
            
        if tenant is not None:
            
            _query_params.append(('tenant', tenant))
            
        if contact is not None:
            
            _query_params.append(('contact', contact))
            
        if contact_role is not None:
            
            _query_params.append(('contact_role', contact_role))
            
        if contact_group is not None:
            
            _query_params.append(('contact_group', contact_group))
            
        if region_id is not None:
            
            _query_params.append(('region_id', region_id))
            
        if region is not None:
            
            _query_params.append(('region', region))
            
        if site_group_id is not None:
            
            _query_params.append(('site_group_id', site_group_id))
            
        if site_group is not None:
            
            _query_params.append(('site_group', site_group))
            
        if site_id is not None:
            
            _query_params.append(('site_id', site_id))
            
        if site is not None:
            
            _query_params.append(('site', site))
            
        if group_id is not None:
            
            _query_params.append(('group_id', group_id))
            
        if group is not None:
            
            _query_params.append(('group', group))
            
        if type_id is not None:
            
            _query_params.append(('type_id', type_id))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if id__n is not None:
            
            _query_params.append(('id__n', id__n))
            
        if id__lte is not None:
            
            _query_params.append(('id__lte', id__lte))
            
        if id__lt is not None:
            
            _query_params.append(('id__lt', id__lt))
            
        if id__gte is not None:
            
            _query_params.append(('id__gte', id__gte))
            
        if id__gt is not None:
            
            _query_params.append(('id__gt', id__gt))
            
        if name__n is not None:
            
            _query_params.append(('name__n', name__n))
            
        if name__ic is not None:
            
            _query_params.append(('name__ic', name__ic))
            
        if name__nic is not None:
            
            _query_params.append(('name__nic', name__nic))
            
        if name__iew is not None:
            
            _query_params.append(('name__iew', name__iew))
            
        if name__niew is not None:
            
            _query_params.append(('name__niew', name__niew))
            
        if name__isw is not None:
            
            _query_params.append(('name__isw', name__isw))
            
        if name__nisw is not None:
            
            _query_params.append(('name__nisw', name__nisw))
            
        if name__ie is not None:
            
            _query_params.append(('name__ie', name__ie))
            
        if name__nie is not None:
            
            _query_params.append(('name__nie', name__nie))
            
        if name__empty is not None:
            
            _query_params.append(('name__empty', name__empty))
            
        if created__n is not None:
            
            _query_params.append(('created__n', created__n))
            
        if created__lte is not None:
            
            _query_params.append(('created__lte', created__lte))
            
        if created__lt is not None:
            
            _query_params.append(('created__lt', created__lt))
            
        if created__gte is not None:
            
            _query_params.append(('created__gte', created__gte))
            
        if created__gt is not None:
            
            _query_params.append(('created__gt', created__gt))
            
        if last_updated__n is not None:
            
            _query_params.append(('last_updated__n', last_updated__n))
            
        if last_updated__lte is not None:
            
            _query_params.append(('last_updated__lte', last_updated__lte))
            
        if last_updated__lt is not None:
            
            _query_params.append(('last_updated__lt', last_updated__lt))
            
        if last_updated__gte is not None:
            
            _query_params.append(('last_updated__gte', last_updated__gte))
            
        if last_updated__gt is not None:
            
            _query_params.append(('last_updated__gt', last_updated__gt))
            
        if tag__n is not None:
            
            _query_params.append(('tag__n', tag__n))
            
        if tenant_group_id__n is not None:
            
            _query_params.append(('tenant_group_id__n', tenant_group_id__n))
            
        if tenant_group__n is not None:
            
            _query_params.append(('tenant_group__n', tenant_group__n))
            
        if tenant_id__n is not None:
            
            _query_params.append(('tenant_id__n', tenant_id__n))
            
        if tenant__n is not None:
            
            _query_params.append(('tenant__n', tenant__n))
            
        if contact__n is not None:
            
            _query_params.append(('contact__n', contact__n))
            
        if contact_role__n is not None:
            
            _query_params.append(('contact_role__n', contact_role__n))
            
        if contact_group__n is not None:
            
            _query_params.append(('contact_group__n', contact_group__n))
            
        if region_id__n is not None:
            
            _query_params.append(('region_id__n', region_id__n))
            
        if region__n is not None:
            
            _query_params.append(('region__n', region__n))
            
        if site_group_id__n is not None:
            
            _query_params.append(('site_group_id__n', site_group_id__n))
            
        if site_group__n is not None:
            
            _query_params.append(('site_group__n', site_group__n))
            
        if site_id__n is not None:
            
            _query_params.append(('site_id__n', site_id__n))
            
        if site__n is not None:
            
            _query_params.append(('site__n', site__n))
            
        if group_id__n is not None:
            
            _query_params.append(('group_id__n', group_id__n))
            
        if group__n is not None:
            
            _query_params.append(('group__n', group__n))
            
        if type_id__n is not None:
            
            _query_params.append(('type_id__n', type_id__n))
            
        if type__n is not None:
            
            _query_params.append(('type__n', type__n))
            
        if status__n is not None:
            
            _query_params.append(('status__n', status__n))
            
        if ordering is not None:
            
            _query_params.append(('ordering', ordering))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/virtualization/clusters/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_clusters_partial_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster.")],
        writable_cluster: WritableCluster,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Cluster:
        """virtualization_clusters_partial_update

        

        :param id: A unique integer value identifying this cluster. (required)
        :type id: int
        :param writable_cluster: (required)
        :type writable_cluster: WritableCluster
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_partial_update_serialize(
            id=id,
            writable_cluster=writable_cluster,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Cluster",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_clusters_partial_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster.")],
        writable_cluster: WritableCluster,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Cluster]:
        """virtualization_clusters_partial_update

        

        :param id: A unique integer value identifying this cluster. (required)
        :type id: int
        :param writable_cluster: (required)
        :type writable_cluster: WritableCluster
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_partial_update_serialize(
            id=id,
            writable_cluster=writable_cluster,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Cluster",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_clusters_partial_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster.")],
        writable_cluster: WritableCluster,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_clusters_partial_update

        

        :param id: A unique integer value identifying this cluster. (required)
        :type id: int
        :param writable_cluster: (required)
        :type writable_cluster: WritableCluster
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_partial_update_serialize(
            id=id,
            writable_cluster=writable_cluster,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Cluster",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_clusters_partial_update_serialize(
        self,
        id,
        writable_cluster,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_cluster is not None:
            _body_params = writable_cluster


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/virtualization/clusters/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_clusters_read(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Cluster:
        """virtualization_clusters_read

        

        :param id: A unique integer value identifying this cluster. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Cluster",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_clusters_read_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Cluster]:
        """virtualization_clusters_read

        

        :param id: A unique integer value identifying this cluster. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Cluster",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_clusters_read_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_clusters_read

        

        :param id: A unique integer value identifying this cluster. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Cluster",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_clusters_read_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/virtualization/clusters/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_clusters_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster.")],
        writable_cluster: WritableCluster,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Cluster:
        """virtualization_clusters_update

        

        :param id: A unique integer value identifying this cluster. (required)
        :type id: int
        :param writable_cluster: (required)
        :type writable_cluster: WritableCluster
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_update_serialize(
            id=id,
            writable_cluster=writable_cluster,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Cluster",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_clusters_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster.")],
        writable_cluster: WritableCluster,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Cluster]:
        """virtualization_clusters_update

        

        :param id: A unique integer value identifying this cluster. (required)
        :type id: int
        :param writable_cluster: (required)
        :type writable_cluster: WritableCluster
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_update_serialize(
            id=id,
            writable_cluster=writable_cluster,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Cluster",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_clusters_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this cluster.")],
        writable_cluster: WritableCluster,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_clusters_update

        

        :param id: A unique integer value identifying this cluster. (required)
        :type id: int
        :param writable_cluster: (required)
        :type writable_cluster: WritableCluster
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_clusters_update_serialize(
            id=id,
            writable_cluster=writable_cluster,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Cluster",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_clusters_update_serialize(
        self,
        id,
        writable_cluster,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_cluster is not None:
            _body_params = writable_cluster


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/virtualization/clusters/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_interfaces_bulk_delete(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """virtualization_interfaces_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_interfaces_bulk_delete_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """virtualization_interfaces_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_interfaces_bulk_delete_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_interfaces_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_interfaces_bulk_delete_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/virtualization/interfaces/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_interfaces_bulk_partial_update(
        self,
        writable_vm_interface: WritableVMInterface,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VMInterface:
        """virtualization_interfaces_bulk_partial_update

        

        :param writable_vm_interface: (required)
        :type writable_vm_interface: WritableVMInterface
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_bulk_partial_update_serialize(
            writable_vm_interface=writable_vm_interface,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VMInterface",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_interfaces_bulk_partial_update_with_http_info(
        self,
        writable_vm_interface: WritableVMInterface,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VMInterface]:
        """virtualization_interfaces_bulk_partial_update

        

        :param writable_vm_interface: (required)
        :type writable_vm_interface: WritableVMInterface
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_bulk_partial_update_serialize(
            writable_vm_interface=writable_vm_interface,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VMInterface",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_interfaces_bulk_partial_update_without_preload_content(
        self,
        writable_vm_interface: WritableVMInterface,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_interfaces_bulk_partial_update

        

        :param writable_vm_interface: (required)
        :type writable_vm_interface: WritableVMInterface
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_bulk_partial_update_serialize(
            writable_vm_interface=writable_vm_interface,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VMInterface",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_interfaces_bulk_partial_update_serialize(
        self,
        writable_vm_interface,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_vm_interface is not None:
            _body_params = writable_vm_interface


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/virtualization/interfaces/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_interfaces_bulk_update(
        self,
        writable_vm_interface: WritableVMInterface,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VMInterface:
        """virtualization_interfaces_bulk_update

        

        :param writable_vm_interface: (required)
        :type writable_vm_interface: WritableVMInterface
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_bulk_update_serialize(
            writable_vm_interface=writable_vm_interface,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VMInterface",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_interfaces_bulk_update_with_http_info(
        self,
        writable_vm_interface: WritableVMInterface,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VMInterface]:
        """virtualization_interfaces_bulk_update

        

        :param writable_vm_interface: (required)
        :type writable_vm_interface: WritableVMInterface
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_bulk_update_serialize(
            writable_vm_interface=writable_vm_interface,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VMInterface",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_interfaces_bulk_update_without_preload_content(
        self,
        writable_vm_interface: WritableVMInterface,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_interfaces_bulk_update

        

        :param writable_vm_interface: (required)
        :type writable_vm_interface: WritableVMInterface
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_bulk_update_serialize(
            writable_vm_interface=writable_vm_interface,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VMInterface",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_interfaces_bulk_update_serialize(
        self,
        writable_vm_interface,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_vm_interface is not None:
            _body_params = writable_vm_interface


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/virtualization/interfaces/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_interfaces_create(
        self,
        writable_vm_interface: WritableVMInterface,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VMInterface:
        """virtualization_interfaces_create

        

        :param writable_vm_interface: (required)
        :type writable_vm_interface: WritableVMInterface
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_create_serialize(
            writable_vm_interface=writable_vm_interface,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "VMInterface",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_interfaces_create_with_http_info(
        self,
        writable_vm_interface: WritableVMInterface,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VMInterface]:
        """virtualization_interfaces_create

        

        :param writable_vm_interface: (required)
        :type writable_vm_interface: WritableVMInterface
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_create_serialize(
            writable_vm_interface=writable_vm_interface,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "VMInterface",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_interfaces_create_without_preload_content(
        self,
        writable_vm_interface: WritableVMInterface,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_interfaces_create

        

        :param writable_vm_interface: (required)
        :type writable_vm_interface: WritableVMInterface
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_create_serialize(
            writable_vm_interface=writable_vm_interface,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "VMInterface",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_interfaces_create_serialize(
        self,
        writable_vm_interface,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_vm_interface is not None:
            _body_params = writable_vm_interface


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/virtualization/interfaces/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_interfaces_delete(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this interface.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """virtualization_interfaces_delete

        

        :param id: A unique integer value identifying this interface. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_interfaces_delete_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this interface.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """virtualization_interfaces_delete

        

        :param id: A unique integer value identifying this interface. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_interfaces_delete_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this interface.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_interfaces_delete

        

        :param id: A unique integer value identifying this interface. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_interfaces_delete_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/virtualization/interfaces/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_interfaces_list(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        enabled: Optional[StrictStr] = None,
        mtu: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        cluster_id: Optional[StrictStr] = None,
        cluster: Optional[StrictStr] = None,
        virtual_machine_id: Optional[StrictStr] = None,
        virtual_machine: Optional[StrictStr] = None,
        parent_id: Optional[StrictStr] = None,
        bridge_id: Optional[StrictStr] = None,
        mac_address: Optional[StrictStr] = None,
        vrf_id: Optional[StrictStr] = None,
        vrf: Optional[StrictStr] = None,
        l2vpn_id: Optional[StrictStr] = None,
        l2vpn: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        mtu__n: Optional[StrictStr] = None,
        mtu__lte: Optional[StrictStr] = None,
        mtu__lt: Optional[StrictStr] = None,
        mtu__gte: Optional[StrictStr] = None,
        mtu__gt: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        cluster_id__n: Optional[StrictStr] = None,
        cluster__n: Optional[StrictStr] = None,
        virtual_machine_id__n: Optional[StrictStr] = None,
        virtual_machine__n: Optional[StrictStr] = None,
        parent_id__n: Optional[StrictStr] = None,
        bridge_id__n: Optional[StrictStr] = None,
        mac_address__n: Optional[StrictStr] = None,
        mac_address__ic: Optional[StrictStr] = None,
        mac_address__nic: Optional[StrictStr] = None,
        mac_address__iew: Optional[StrictStr] = None,
        mac_address__niew: Optional[StrictStr] = None,
        mac_address__isw: Optional[StrictStr] = None,
        mac_address__nisw: Optional[StrictStr] = None,
        mac_address__ie: Optional[StrictStr] = None,
        mac_address__nie: Optional[StrictStr] = None,
        vrf_id__n: Optional[StrictStr] = None,
        vrf__n: Optional[StrictStr] = None,
        l2vpn_id__n: Optional[StrictStr] = None,
        l2vpn__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VirtualizationInterfacesList200Response:
        """virtualization_interfaces_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param enabled: 
        :type enabled: str
        :param mtu: 
        :type mtu: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param cluster_id: 
        :type cluster_id: str
        :param cluster: 
        :type cluster: str
        :param virtual_machine_id: 
        :type virtual_machine_id: str
        :param virtual_machine: 
        :type virtual_machine: str
        :param parent_id: 
        :type parent_id: str
        :param bridge_id: 
        :type bridge_id: str
        :param mac_address: 
        :type mac_address: str
        :param vrf_id: 
        :type vrf_id: str
        :param vrf: 
        :type vrf: str
        :param l2vpn_id: 
        :type l2vpn_id: str
        :param l2vpn: 
        :type l2vpn: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param mtu__n: 
        :type mtu__n: str
        :param mtu__lte: 
        :type mtu__lte: str
        :param mtu__lt: 
        :type mtu__lt: str
        :param mtu__gte: 
        :type mtu__gte: str
        :param mtu__gt: 
        :type mtu__gt: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param cluster_id__n: 
        :type cluster_id__n: str
        :param cluster__n: 
        :type cluster__n: str
        :param virtual_machine_id__n: 
        :type virtual_machine_id__n: str
        :param virtual_machine__n: 
        :type virtual_machine__n: str
        :param parent_id__n: 
        :type parent_id__n: str
        :param bridge_id__n: 
        :type bridge_id__n: str
        :param mac_address__n: 
        :type mac_address__n: str
        :param mac_address__ic: 
        :type mac_address__ic: str
        :param mac_address__nic: 
        :type mac_address__nic: str
        :param mac_address__iew: 
        :type mac_address__iew: str
        :param mac_address__niew: 
        :type mac_address__niew: str
        :param mac_address__isw: 
        :type mac_address__isw: str
        :param mac_address__nisw: 
        :type mac_address__nisw: str
        :param mac_address__ie: 
        :type mac_address__ie: str
        :param mac_address__nie: 
        :type mac_address__nie: str
        :param vrf_id__n: 
        :type vrf_id__n: str
        :param vrf__n: 
        :type vrf__n: str
        :param l2vpn_id__n: 
        :type l2vpn_id__n: str
        :param l2vpn__n: 
        :type l2vpn__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_list_serialize(
            id=id,
            name=name,
            enabled=enabled,
            mtu=mtu,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            cluster_id=cluster_id,
            cluster=cluster,
            virtual_machine_id=virtual_machine_id,
            virtual_machine=virtual_machine,
            parent_id=parent_id,
            bridge_id=bridge_id,
            mac_address=mac_address,
            vrf_id=vrf_id,
            vrf=vrf,
            l2vpn_id=l2vpn_id,
            l2vpn=l2vpn,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            mtu__n=mtu__n,
            mtu__lte=mtu__lte,
            mtu__lt=mtu__lt,
            mtu__gte=mtu__gte,
            mtu__gt=mtu__gt,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            cluster_id__n=cluster_id__n,
            cluster__n=cluster__n,
            virtual_machine_id__n=virtual_machine_id__n,
            virtual_machine__n=virtual_machine__n,
            parent_id__n=parent_id__n,
            bridge_id__n=bridge_id__n,
            mac_address__n=mac_address__n,
            mac_address__ic=mac_address__ic,
            mac_address__nic=mac_address__nic,
            mac_address__iew=mac_address__iew,
            mac_address__niew=mac_address__niew,
            mac_address__isw=mac_address__isw,
            mac_address__nisw=mac_address__nisw,
            mac_address__ie=mac_address__ie,
            mac_address__nie=mac_address__nie,
            vrf_id__n=vrf_id__n,
            vrf__n=vrf__n,
            l2vpn_id__n=l2vpn_id__n,
            l2vpn__n=l2vpn__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualizationInterfacesList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_interfaces_list_with_http_info(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        enabled: Optional[StrictStr] = None,
        mtu: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        cluster_id: Optional[StrictStr] = None,
        cluster: Optional[StrictStr] = None,
        virtual_machine_id: Optional[StrictStr] = None,
        virtual_machine: Optional[StrictStr] = None,
        parent_id: Optional[StrictStr] = None,
        bridge_id: Optional[StrictStr] = None,
        mac_address: Optional[StrictStr] = None,
        vrf_id: Optional[StrictStr] = None,
        vrf: Optional[StrictStr] = None,
        l2vpn_id: Optional[StrictStr] = None,
        l2vpn: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        mtu__n: Optional[StrictStr] = None,
        mtu__lte: Optional[StrictStr] = None,
        mtu__lt: Optional[StrictStr] = None,
        mtu__gte: Optional[StrictStr] = None,
        mtu__gt: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        cluster_id__n: Optional[StrictStr] = None,
        cluster__n: Optional[StrictStr] = None,
        virtual_machine_id__n: Optional[StrictStr] = None,
        virtual_machine__n: Optional[StrictStr] = None,
        parent_id__n: Optional[StrictStr] = None,
        bridge_id__n: Optional[StrictStr] = None,
        mac_address__n: Optional[StrictStr] = None,
        mac_address__ic: Optional[StrictStr] = None,
        mac_address__nic: Optional[StrictStr] = None,
        mac_address__iew: Optional[StrictStr] = None,
        mac_address__niew: Optional[StrictStr] = None,
        mac_address__isw: Optional[StrictStr] = None,
        mac_address__nisw: Optional[StrictStr] = None,
        mac_address__ie: Optional[StrictStr] = None,
        mac_address__nie: Optional[StrictStr] = None,
        vrf_id__n: Optional[StrictStr] = None,
        vrf__n: Optional[StrictStr] = None,
        l2vpn_id__n: Optional[StrictStr] = None,
        l2vpn__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VirtualizationInterfacesList200Response]:
        """virtualization_interfaces_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param enabled: 
        :type enabled: str
        :param mtu: 
        :type mtu: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param cluster_id: 
        :type cluster_id: str
        :param cluster: 
        :type cluster: str
        :param virtual_machine_id: 
        :type virtual_machine_id: str
        :param virtual_machine: 
        :type virtual_machine: str
        :param parent_id: 
        :type parent_id: str
        :param bridge_id: 
        :type bridge_id: str
        :param mac_address: 
        :type mac_address: str
        :param vrf_id: 
        :type vrf_id: str
        :param vrf: 
        :type vrf: str
        :param l2vpn_id: 
        :type l2vpn_id: str
        :param l2vpn: 
        :type l2vpn: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param mtu__n: 
        :type mtu__n: str
        :param mtu__lte: 
        :type mtu__lte: str
        :param mtu__lt: 
        :type mtu__lt: str
        :param mtu__gte: 
        :type mtu__gte: str
        :param mtu__gt: 
        :type mtu__gt: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param cluster_id__n: 
        :type cluster_id__n: str
        :param cluster__n: 
        :type cluster__n: str
        :param virtual_machine_id__n: 
        :type virtual_machine_id__n: str
        :param virtual_machine__n: 
        :type virtual_machine__n: str
        :param parent_id__n: 
        :type parent_id__n: str
        :param bridge_id__n: 
        :type bridge_id__n: str
        :param mac_address__n: 
        :type mac_address__n: str
        :param mac_address__ic: 
        :type mac_address__ic: str
        :param mac_address__nic: 
        :type mac_address__nic: str
        :param mac_address__iew: 
        :type mac_address__iew: str
        :param mac_address__niew: 
        :type mac_address__niew: str
        :param mac_address__isw: 
        :type mac_address__isw: str
        :param mac_address__nisw: 
        :type mac_address__nisw: str
        :param mac_address__ie: 
        :type mac_address__ie: str
        :param mac_address__nie: 
        :type mac_address__nie: str
        :param vrf_id__n: 
        :type vrf_id__n: str
        :param vrf__n: 
        :type vrf__n: str
        :param l2vpn_id__n: 
        :type l2vpn_id__n: str
        :param l2vpn__n: 
        :type l2vpn__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_list_serialize(
            id=id,
            name=name,
            enabled=enabled,
            mtu=mtu,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            cluster_id=cluster_id,
            cluster=cluster,
            virtual_machine_id=virtual_machine_id,
            virtual_machine=virtual_machine,
            parent_id=parent_id,
            bridge_id=bridge_id,
            mac_address=mac_address,
            vrf_id=vrf_id,
            vrf=vrf,
            l2vpn_id=l2vpn_id,
            l2vpn=l2vpn,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            mtu__n=mtu__n,
            mtu__lte=mtu__lte,
            mtu__lt=mtu__lt,
            mtu__gte=mtu__gte,
            mtu__gt=mtu__gt,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            cluster_id__n=cluster_id__n,
            cluster__n=cluster__n,
            virtual_machine_id__n=virtual_machine_id__n,
            virtual_machine__n=virtual_machine__n,
            parent_id__n=parent_id__n,
            bridge_id__n=bridge_id__n,
            mac_address__n=mac_address__n,
            mac_address__ic=mac_address__ic,
            mac_address__nic=mac_address__nic,
            mac_address__iew=mac_address__iew,
            mac_address__niew=mac_address__niew,
            mac_address__isw=mac_address__isw,
            mac_address__nisw=mac_address__nisw,
            mac_address__ie=mac_address__ie,
            mac_address__nie=mac_address__nie,
            vrf_id__n=vrf_id__n,
            vrf__n=vrf__n,
            l2vpn_id__n=l2vpn_id__n,
            l2vpn__n=l2vpn__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualizationInterfacesList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_interfaces_list_without_preload_content(
        self,
        id: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        enabled: Optional[StrictStr] = None,
        mtu: Optional[StrictStr] = None,
        description: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        cluster_id: Optional[StrictStr] = None,
        cluster: Optional[StrictStr] = None,
        virtual_machine_id: Optional[StrictStr] = None,
        virtual_machine: Optional[StrictStr] = None,
        parent_id: Optional[StrictStr] = None,
        bridge_id: Optional[StrictStr] = None,
        mac_address: Optional[StrictStr] = None,
        vrf_id: Optional[StrictStr] = None,
        vrf: Optional[StrictStr] = None,
        l2vpn_id: Optional[StrictStr] = None,
        l2vpn: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        mtu__n: Optional[StrictStr] = None,
        mtu__lte: Optional[StrictStr] = None,
        mtu__lt: Optional[StrictStr] = None,
        mtu__gte: Optional[StrictStr] = None,
        mtu__gt: Optional[StrictStr] = None,
        description__n: Optional[StrictStr] = None,
        description__ic: Optional[StrictStr] = None,
        description__nic: Optional[StrictStr] = None,
        description__iew: Optional[StrictStr] = None,
        description__niew: Optional[StrictStr] = None,
        description__isw: Optional[StrictStr] = None,
        description__nisw: Optional[StrictStr] = None,
        description__ie: Optional[StrictStr] = None,
        description__nie: Optional[StrictStr] = None,
        description__empty: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        cluster_id__n: Optional[StrictStr] = None,
        cluster__n: Optional[StrictStr] = None,
        virtual_machine_id__n: Optional[StrictStr] = None,
        virtual_machine__n: Optional[StrictStr] = None,
        parent_id__n: Optional[StrictStr] = None,
        bridge_id__n: Optional[StrictStr] = None,
        mac_address__n: Optional[StrictStr] = None,
        mac_address__ic: Optional[StrictStr] = None,
        mac_address__nic: Optional[StrictStr] = None,
        mac_address__iew: Optional[StrictStr] = None,
        mac_address__niew: Optional[StrictStr] = None,
        mac_address__isw: Optional[StrictStr] = None,
        mac_address__nisw: Optional[StrictStr] = None,
        mac_address__ie: Optional[StrictStr] = None,
        mac_address__nie: Optional[StrictStr] = None,
        vrf_id__n: Optional[StrictStr] = None,
        vrf__n: Optional[StrictStr] = None,
        l2vpn_id__n: Optional[StrictStr] = None,
        l2vpn__n: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_interfaces_list

        

        :param id: 
        :type id: str
        :param name: 
        :type name: str
        :param enabled: 
        :type enabled: str
        :param mtu: 
        :type mtu: str
        :param description: 
        :type description: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param cluster_id: 
        :type cluster_id: str
        :param cluster: 
        :type cluster: str
        :param virtual_machine_id: 
        :type virtual_machine_id: str
        :param virtual_machine: 
        :type virtual_machine: str
        :param parent_id: 
        :type parent_id: str
        :param bridge_id: 
        :type bridge_id: str
        :param mac_address: 
        :type mac_address: str
        :param vrf_id: 
        :type vrf_id: str
        :param vrf: 
        :type vrf: str
        :param l2vpn_id: 
        :type l2vpn_id: str
        :param l2vpn: 
        :type l2vpn: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param mtu__n: 
        :type mtu__n: str
        :param mtu__lte: 
        :type mtu__lte: str
        :param mtu__lt: 
        :type mtu__lt: str
        :param mtu__gte: 
        :type mtu__gte: str
        :param mtu__gt: 
        :type mtu__gt: str
        :param description__n: 
        :type description__n: str
        :param description__ic: 
        :type description__ic: str
        :param description__nic: 
        :type description__nic: str
        :param description__iew: 
        :type description__iew: str
        :param description__niew: 
        :type description__niew: str
        :param description__isw: 
        :type description__isw: str
        :param description__nisw: 
        :type description__nisw: str
        :param description__ie: 
        :type description__ie: str
        :param description__nie: 
        :type description__nie: str
        :param description__empty: 
        :type description__empty: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param cluster_id__n: 
        :type cluster_id__n: str
        :param cluster__n: 
        :type cluster__n: str
        :param virtual_machine_id__n: 
        :type virtual_machine_id__n: str
        :param virtual_machine__n: 
        :type virtual_machine__n: str
        :param parent_id__n: 
        :type parent_id__n: str
        :param bridge_id__n: 
        :type bridge_id__n: str
        :param mac_address__n: 
        :type mac_address__n: str
        :param mac_address__ic: 
        :type mac_address__ic: str
        :param mac_address__nic: 
        :type mac_address__nic: str
        :param mac_address__iew: 
        :type mac_address__iew: str
        :param mac_address__niew: 
        :type mac_address__niew: str
        :param mac_address__isw: 
        :type mac_address__isw: str
        :param mac_address__nisw: 
        :type mac_address__nisw: str
        :param mac_address__ie: 
        :type mac_address__ie: str
        :param mac_address__nie: 
        :type mac_address__nie: str
        :param vrf_id__n: 
        :type vrf_id__n: str
        :param vrf__n: 
        :type vrf__n: str
        :param l2vpn_id__n: 
        :type l2vpn_id__n: str
        :param l2vpn__n: 
        :type l2vpn__n: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_list_serialize(
            id=id,
            name=name,
            enabled=enabled,
            mtu=mtu,
            description=description,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            cluster_id=cluster_id,
            cluster=cluster,
            virtual_machine_id=virtual_machine_id,
            virtual_machine=virtual_machine,
            parent_id=parent_id,
            bridge_id=bridge_id,
            mac_address=mac_address,
            vrf_id=vrf_id,
            vrf=vrf,
            l2vpn_id=l2vpn_id,
            l2vpn=l2vpn,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            mtu__n=mtu__n,
            mtu__lte=mtu__lte,
            mtu__lt=mtu__lt,
            mtu__gte=mtu__gte,
            mtu__gt=mtu__gt,
            description__n=description__n,
            description__ic=description__ic,
            description__nic=description__nic,
            description__iew=description__iew,
            description__niew=description__niew,
            description__isw=description__isw,
            description__nisw=description__nisw,
            description__ie=description__ie,
            description__nie=description__nie,
            description__empty=description__empty,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            cluster_id__n=cluster_id__n,
            cluster__n=cluster__n,
            virtual_machine_id__n=virtual_machine_id__n,
            virtual_machine__n=virtual_machine__n,
            parent_id__n=parent_id__n,
            bridge_id__n=bridge_id__n,
            mac_address__n=mac_address__n,
            mac_address__ic=mac_address__ic,
            mac_address__nic=mac_address__nic,
            mac_address__iew=mac_address__iew,
            mac_address__niew=mac_address__niew,
            mac_address__isw=mac_address__isw,
            mac_address__nisw=mac_address__nisw,
            mac_address__ie=mac_address__ie,
            mac_address__nie=mac_address__nie,
            vrf_id__n=vrf_id__n,
            vrf__n=vrf__n,
            l2vpn_id__n=l2vpn_id__n,
            l2vpn__n=l2vpn__n,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualizationInterfacesList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_interfaces_list_serialize(
        self,
        id,
        name,
        enabled,
        mtu,
        description,
        created,
        last_updated,
        q,
        tag,
        cluster_id,
        cluster,
        virtual_machine_id,
        virtual_machine,
        parent_id,
        bridge_id,
        mac_address,
        vrf_id,
        vrf,
        l2vpn_id,
        l2vpn,
        id__n,
        id__lte,
        id__lt,
        id__gte,
        id__gt,
        name__n,
        name__ic,
        name__nic,
        name__iew,
        name__niew,
        name__isw,
        name__nisw,
        name__ie,
        name__nie,
        name__empty,
        mtu__n,
        mtu__lte,
        mtu__lt,
        mtu__gte,
        mtu__gt,
        description__n,
        description__ic,
        description__nic,
        description__iew,
        description__niew,
        description__isw,
        description__nisw,
        description__ie,
        description__nie,
        description__empty,
        created__n,
        created__lte,
        created__lt,
        created__gte,
        created__gt,
        last_updated__n,
        last_updated__lte,
        last_updated__lt,
        last_updated__gte,
        last_updated__gt,
        tag__n,
        cluster_id__n,
        cluster__n,
        virtual_machine_id__n,
        virtual_machine__n,
        parent_id__n,
        bridge_id__n,
        mac_address__n,
        mac_address__ic,
        mac_address__nic,
        mac_address__iew,
        mac_address__niew,
        mac_address__isw,
        mac_address__nisw,
        mac_address__ie,
        mac_address__nie,
        vrf_id__n,
        vrf__n,
        l2vpn_id__n,
        l2vpn__n,
        ordering,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if enabled is not None:
            
            _query_params.append(('enabled', enabled))
            
        if mtu is not None:
            
            _query_params.append(('mtu', mtu))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if created is not None:
            
            _query_params.append(('created', created))
            
        if last_updated is not None:
            
            _query_params.append(('last_updated', last_updated))
            
        if q is not None:
            
            _query_params.append(('q', q))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if cluster_id is not None:
            
            _query_params.append(('cluster_id', cluster_id))
            
        if cluster is not None:
            
            _query_params.append(('cluster', cluster))
            
        if virtual_machine_id is not None:
            
            _query_params.append(('virtual_machine_id', virtual_machine_id))
            
        if virtual_machine is not None:
            
            _query_params.append(('virtual_machine', virtual_machine))
            
        if parent_id is not None:
            
            _query_params.append(('parent_id', parent_id))
            
        if bridge_id is not None:
            
            _query_params.append(('bridge_id', bridge_id))
            
        if mac_address is not None:
            
            _query_params.append(('mac_address', mac_address))
            
        if vrf_id is not None:
            
            _query_params.append(('vrf_id', vrf_id))
            
        if vrf is not None:
            
            _query_params.append(('vrf', vrf))
            
        if l2vpn_id is not None:
            
            _query_params.append(('l2vpn_id', l2vpn_id))
            
        if l2vpn is not None:
            
            _query_params.append(('l2vpn', l2vpn))
            
        if id__n is not None:
            
            _query_params.append(('id__n', id__n))
            
        if id__lte is not None:
            
            _query_params.append(('id__lte', id__lte))
            
        if id__lt is not None:
            
            _query_params.append(('id__lt', id__lt))
            
        if id__gte is not None:
            
            _query_params.append(('id__gte', id__gte))
            
        if id__gt is not None:
            
            _query_params.append(('id__gt', id__gt))
            
        if name__n is not None:
            
            _query_params.append(('name__n', name__n))
            
        if name__ic is not None:
            
            _query_params.append(('name__ic', name__ic))
            
        if name__nic is not None:
            
            _query_params.append(('name__nic', name__nic))
            
        if name__iew is not None:
            
            _query_params.append(('name__iew', name__iew))
            
        if name__niew is not None:
            
            _query_params.append(('name__niew', name__niew))
            
        if name__isw is not None:
            
            _query_params.append(('name__isw', name__isw))
            
        if name__nisw is not None:
            
            _query_params.append(('name__nisw', name__nisw))
            
        if name__ie is not None:
            
            _query_params.append(('name__ie', name__ie))
            
        if name__nie is not None:
            
            _query_params.append(('name__nie', name__nie))
            
        if name__empty is not None:
            
            _query_params.append(('name__empty', name__empty))
            
        if mtu__n is not None:
            
            _query_params.append(('mtu__n', mtu__n))
            
        if mtu__lte is not None:
            
            _query_params.append(('mtu__lte', mtu__lte))
            
        if mtu__lt is not None:
            
            _query_params.append(('mtu__lt', mtu__lt))
            
        if mtu__gte is not None:
            
            _query_params.append(('mtu__gte', mtu__gte))
            
        if mtu__gt is not None:
            
            _query_params.append(('mtu__gt', mtu__gt))
            
        if description__n is not None:
            
            _query_params.append(('description__n', description__n))
            
        if description__ic is not None:
            
            _query_params.append(('description__ic', description__ic))
            
        if description__nic is not None:
            
            _query_params.append(('description__nic', description__nic))
            
        if description__iew is not None:
            
            _query_params.append(('description__iew', description__iew))
            
        if description__niew is not None:
            
            _query_params.append(('description__niew', description__niew))
            
        if description__isw is not None:
            
            _query_params.append(('description__isw', description__isw))
            
        if description__nisw is not None:
            
            _query_params.append(('description__nisw', description__nisw))
            
        if description__ie is not None:
            
            _query_params.append(('description__ie', description__ie))
            
        if description__nie is not None:
            
            _query_params.append(('description__nie', description__nie))
            
        if description__empty is not None:
            
            _query_params.append(('description__empty', description__empty))
            
        if created__n is not None:
            
            _query_params.append(('created__n', created__n))
            
        if created__lte is not None:
            
            _query_params.append(('created__lte', created__lte))
            
        if created__lt is not None:
            
            _query_params.append(('created__lt', created__lt))
            
        if created__gte is not None:
            
            _query_params.append(('created__gte', created__gte))
            
        if created__gt is not None:
            
            _query_params.append(('created__gt', created__gt))
            
        if last_updated__n is not None:
            
            _query_params.append(('last_updated__n', last_updated__n))
            
        if last_updated__lte is not None:
            
            _query_params.append(('last_updated__lte', last_updated__lte))
            
        if last_updated__lt is not None:
            
            _query_params.append(('last_updated__lt', last_updated__lt))
            
        if last_updated__gte is not None:
            
            _query_params.append(('last_updated__gte', last_updated__gte))
            
        if last_updated__gt is not None:
            
            _query_params.append(('last_updated__gt', last_updated__gt))
            
        if tag__n is not None:
            
            _query_params.append(('tag__n', tag__n))
            
        if cluster_id__n is not None:
            
            _query_params.append(('cluster_id__n', cluster_id__n))
            
        if cluster__n is not None:
            
            _query_params.append(('cluster__n', cluster__n))
            
        if virtual_machine_id__n is not None:
            
            _query_params.append(('virtual_machine_id__n', virtual_machine_id__n))
            
        if virtual_machine__n is not None:
            
            _query_params.append(('virtual_machine__n', virtual_machine__n))
            
        if parent_id__n is not None:
            
            _query_params.append(('parent_id__n', parent_id__n))
            
        if bridge_id__n is not None:
            
            _query_params.append(('bridge_id__n', bridge_id__n))
            
        if mac_address__n is not None:
            
            _query_params.append(('mac_address__n', mac_address__n))
            
        if mac_address__ic is not None:
            
            _query_params.append(('mac_address__ic', mac_address__ic))
            
        if mac_address__nic is not None:
            
            _query_params.append(('mac_address__nic', mac_address__nic))
            
        if mac_address__iew is not None:
            
            _query_params.append(('mac_address__iew', mac_address__iew))
            
        if mac_address__niew is not None:
            
            _query_params.append(('mac_address__niew', mac_address__niew))
            
        if mac_address__isw is not None:
            
            _query_params.append(('mac_address__isw', mac_address__isw))
            
        if mac_address__nisw is not None:
            
            _query_params.append(('mac_address__nisw', mac_address__nisw))
            
        if mac_address__ie is not None:
            
            _query_params.append(('mac_address__ie', mac_address__ie))
            
        if mac_address__nie is not None:
            
            _query_params.append(('mac_address__nie', mac_address__nie))
            
        if vrf_id__n is not None:
            
            _query_params.append(('vrf_id__n', vrf_id__n))
            
        if vrf__n is not None:
            
            _query_params.append(('vrf__n', vrf__n))
            
        if l2vpn_id__n is not None:
            
            _query_params.append(('l2vpn_id__n', l2vpn_id__n))
            
        if l2vpn__n is not None:
            
            _query_params.append(('l2vpn__n', l2vpn__n))
            
        if ordering is not None:
            
            _query_params.append(('ordering', ordering))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/virtualization/interfaces/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_interfaces_partial_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this interface.")],
        writable_vm_interface: WritableVMInterface,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VMInterface:
        """virtualization_interfaces_partial_update

        

        :param id: A unique integer value identifying this interface. (required)
        :type id: int
        :param writable_vm_interface: (required)
        :type writable_vm_interface: WritableVMInterface
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_partial_update_serialize(
            id=id,
            writable_vm_interface=writable_vm_interface,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VMInterface",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_interfaces_partial_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this interface.")],
        writable_vm_interface: WritableVMInterface,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VMInterface]:
        """virtualization_interfaces_partial_update

        

        :param id: A unique integer value identifying this interface. (required)
        :type id: int
        :param writable_vm_interface: (required)
        :type writable_vm_interface: WritableVMInterface
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_partial_update_serialize(
            id=id,
            writable_vm_interface=writable_vm_interface,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VMInterface",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_interfaces_partial_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this interface.")],
        writable_vm_interface: WritableVMInterface,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_interfaces_partial_update

        

        :param id: A unique integer value identifying this interface. (required)
        :type id: int
        :param writable_vm_interface: (required)
        :type writable_vm_interface: WritableVMInterface
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_partial_update_serialize(
            id=id,
            writable_vm_interface=writable_vm_interface,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VMInterface",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_interfaces_partial_update_serialize(
        self,
        id,
        writable_vm_interface,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_vm_interface is not None:
            _body_params = writable_vm_interface


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/virtualization/interfaces/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_interfaces_read(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this interface.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VMInterface:
        """virtualization_interfaces_read

        

        :param id: A unique integer value identifying this interface. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VMInterface",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_interfaces_read_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this interface.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VMInterface]:
        """virtualization_interfaces_read

        

        :param id: A unique integer value identifying this interface. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VMInterface",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_interfaces_read_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this interface.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_interfaces_read

        

        :param id: A unique integer value identifying this interface. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VMInterface",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_interfaces_read_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/virtualization/interfaces/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_interfaces_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this interface.")],
        writable_vm_interface: WritableVMInterface,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VMInterface:
        """virtualization_interfaces_update

        

        :param id: A unique integer value identifying this interface. (required)
        :type id: int
        :param writable_vm_interface: (required)
        :type writable_vm_interface: WritableVMInterface
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_update_serialize(
            id=id,
            writable_vm_interface=writable_vm_interface,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VMInterface",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_interfaces_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this interface.")],
        writable_vm_interface: WritableVMInterface,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VMInterface]:
        """virtualization_interfaces_update

        

        :param id: A unique integer value identifying this interface. (required)
        :type id: int
        :param writable_vm_interface: (required)
        :type writable_vm_interface: WritableVMInterface
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_update_serialize(
            id=id,
            writable_vm_interface=writable_vm_interface,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VMInterface",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_interfaces_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this interface.")],
        writable_vm_interface: WritableVMInterface,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_interfaces_update

        

        :param id: A unique integer value identifying this interface. (required)
        :type id: int
        :param writable_vm_interface: (required)
        :type writable_vm_interface: WritableVMInterface
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_interfaces_update_serialize(
            id=id,
            writable_vm_interface=writable_vm_interface,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VMInterface",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_interfaces_update_serialize(
        self,
        id,
        writable_vm_interface,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_vm_interface is not None:
            _body_params = writable_vm_interface


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/virtualization/interfaces/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_virtual_machines_bulk_delete(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """virtualization_virtual_machines_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_virtual_machines_bulk_delete_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """virtualization_virtual_machines_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_virtual_machines_bulk_delete_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_virtual_machines_bulk_delete

        

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_bulk_delete_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_virtual_machines_bulk_delete_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/virtualization/virtual-machines/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_virtual_machines_bulk_partial_update(
        self,
        writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VirtualMachineWithConfigContext:
        """virtualization_virtual_machines_bulk_partial_update

        

        :param writable_virtual_machine_with_config_context: (required)
        :type writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_bulk_partial_update_serialize(
            writable_virtual_machine_with_config_context=writable_virtual_machine_with_config_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualMachineWithConfigContext",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_virtual_machines_bulk_partial_update_with_http_info(
        self,
        writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VirtualMachineWithConfigContext]:
        """virtualization_virtual_machines_bulk_partial_update

        

        :param writable_virtual_machine_with_config_context: (required)
        :type writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_bulk_partial_update_serialize(
            writable_virtual_machine_with_config_context=writable_virtual_machine_with_config_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualMachineWithConfigContext",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_virtual_machines_bulk_partial_update_without_preload_content(
        self,
        writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_virtual_machines_bulk_partial_update

        

        :param writable_virtual_machine_with_config_context: (required)
        :type writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_bulk_partial_update_serialize(
            writable_virtual_machine_with_config_context=writable_virtual_machine_with_config_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualMachineWithConfigContext",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_virtual_machines_bulk_partial_update_serialize(
        self,
        writable_virtual_machine_with_config_context,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_virtual_machine_with_config_context is not None:
            _body_params = writable_virtual_machine_with_config_context


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/virtualization/virtual-machines/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_virtual_machines_bulk_update(
        self,
        writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VirtualMachineWithConfigContext:
        """virtualization_virtual_machines_bulk_update

        

        :param writable_virtual_machine_with_config_context: (required)
        :type writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_bulk_update_serialize(
            writable_virtual_machine_with_config_context=writable_virtual_machine_with_config_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualMachineWithConfigContext",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_virtual_machines_bulk_update_with_http_info(
        self,
        writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VirtualMachineWithConfigContext]:
        """virtualization_virtual_machines_bulk_update

        

        :param writable_virtual_machine_with_config_context: (required)
        :type writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_bulk_update_serialize(
            writable_virtual_machine_with_config_context=writable_virtual_machine_with_config_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualMachineWithConfigContext",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_virtual_machines_bulk_update_without_preload_content(
        self,
        writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_virtual_machines_bulk_update

        

        :param writable_virtual_machine_with_config_context: (required)
        :type writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_bulk_update_serialize(
            writable_virtual_machine_with_config_context=writable_virtual_machine_with_config_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualMachineWithConfigContext",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_virtual_machines_bulk_update_serialize(
        self,
        writable_virtual_machine_with_config_context,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_virtual_machine_with_config_context is not None:
            _body_params = writable_virtual_machine_with_config_context


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/virtualization/virtual-machines/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_virtual_machines_create(
        self,
        writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VirtualMachineWithConfigContext:
        """virtualization_virtual_machines_create

        

        :param writable_virtual_machine_with_config_context: (required)
        :type writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_create_serialize(
            writable_virtual_machine_with_config_context=writable_virtual_machine_with_config_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "VirtualMachineWithConfigContext",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_virtual_machines_create_with_http_info(
        self,
        writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VirtualMachineWithConfigContext]:
        """virtualization_virtual_machines_create

        

        :param writable_virtual_machine_with_config_context: (required)
        :type writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_create_serialize(
            writable_virtual_machine_with_config_context=writable_virtual_machine_with_config_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "VirtualMachineWithConfigContext",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_virtual_machines_create_without_preload_content(
        self,
        writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_virtual_machines_create

        

        :param writable_virtual_machine_with_config_context: (required)
        :type writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_create_serialize(
            writable_virtual_machine_with_config_context=writable_virtual_machine_with_config_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "VirtualMachineWithConfigContext",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_virtual_machines_create_serialize(
        self,
        writable_virtual_machine_with_config_context,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_virtual_machine_with_config_context is not None:
            _body_params = writable_virtual_machine_with_config_context


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/virtualization/virtual-machines/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_virtual_machines_delete(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this virtual machine.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """virtualization_virtual_machines_delete

        

        :param id: A unique integer value identifying this virtual machine. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_virtual_machines_delete_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this virtual machine.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """virtualization_virtual_machines_delete

        

        :param id: A unique integer value identifying this virtual machine. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_virtual_machines_delete_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this virtual machine.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_virtual_machines_delete

        

        :param id: A unique integer value identifying this virtual machine. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_virtual_machines_delete_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/virtualization/virtual-machines/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_virtual_machines_list(
        self,
        id: Optional[StrictStr] = None,
        cluster: Optional[StrictStr] = None,
        vcpus: Optional[StrictStr] = None,
        memory: Optional[StrictStr] = None,
        disk: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        tenant_group_id: Optional[StrictStr] = None,
        tenant_group: Optional[StrictStr] = None,
        tenant_id: Optional[StrictStr] = None,
        tenant: Optional[StrictStr] = None,
        contact: Optional[StrictStr] = None,
        contact_role: Optional[StrictStr] = None,
        contact_group: Optional[StrictStr] = None,
        local_context_data: Optional[StrictStr] = None,
        status: Optional[StrictStr] = None,
        cluster_group_id: Optional[StrictStr] = None,
        cluster_group: Optional[StrictStr] = None,
        cluster_type_id: Optional[StrictStr] = None,
        cluster_type: Optional[StrictStr] = None,
        cluster_id: Optional[StrictStr] = None,
        device_id: Optional[StrictStr] = None,
        device: Optional[StrictStr] = None,
        region_id: Optional[StrictStr] = None,
        region: Optional[StrictStr] = None,
        site_group_id: Optional[StrictStr] = None,
        site_group: Optional[StrictStr] = None,
        site_id: Optional[StrictStr] = None,
        site: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        role_id: Optional[StrictStr] = None,
        role: Optional[StrictStr] = None,
        platform_id: Optional[StrictStr] = None,
        platform: Optional[StrictStr] = None,
        mac_address: Optional[StrictStr] = None,
        has_primary_ip: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        cluster__n: Optional[StrictStr] = None,
        vcpus__n: Optional[StrictStr] = None,
        vcpus__lte: Optional[StrictStr] = None,
        vcpus__lt: Optional[StrictStr] = None,
        vcpus__gte: Optional[StrictStr] = None,
        vcpus__gt: Optional[StrictStr] = None,
        memory__n: Optional[StrictStr] = None,
        memory__lte: Optional[StrictStr] = None,
        memory__lt: Optional[StrictStr] = None,
        memory__gte: Optional[StrictStr] = None,
        memory__gt: Optional[StrictStr] = None,
        disk__n: Optional[StrictStr] = None,
        disk__lte: Optional[StrictStr] = None,
        disk__lt: Optional[StrictStr] = None,
        disk__gte: Optional[StrictStr] = None,
        disk__gt: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        tenant_group_id__n: Optional[StrictStr] = None,
        tenant_group__n: Optional[StrictStr] = None,
        tenant_id__n: Optional[StrictStr] = None,
        tenant__n: Optional[StrictStr] = None,
        contact__n: Optional[StrictStr] = None,
        contact_role__n: Optional[StrictStr] = None,
        contact_group__n: Optional[StrictStr] = None,
        status__n: Optional[StrictStr] = None,
        cluster_group_id__n: Optional[StrictStr] = None,
        cluster_group__n: Optional[StrictStr] = None,
        cluster_type_id__n: Optional[StrictStr] = None,
        cluster_type__n: Optional[StrictStr] = None,
        cluster_id__n: Optional[StrictStr] = None,
        device_id__n: Optional[StrictStr] = None,
        device__n: Optional[StrictStr] = None,
        region_id__n: Optional[StrictStr] = None,
        region__n: Optional[StrictStr] = None,
        site_group_id__n: Optional[StrictStr] = None,
        site_group__n: Optional[StrictStr] = None,
        site_id__n: Optional[StrictStr] = None,
        site__n: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        role_id__n: Optional[StrictStr] = None,
        role__n: Optional[StrictStr] = None,
        platform_id__n: Optional[StrictStr] = None,
        platform__n: Optional[StrictStr] = None,
        mac_address__n: Optional[StrictStr] = None,
        mac_address__ic: Optional[StrictStr] = None,
        mac_address__nic: Optional[StrictStr] = None,
        mac_address__iew: Optional[StrictStr] = None,
        mac_address__niew: Optional[StrictStr] = None,
        mac_address__isw: Optional[StrictStr] = None,
        mac_address__nisw: Optional[StrictStr] = None,
        mac_address__ie: Optional[StrictStr] = None,
        mac_address__nie: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VirtualizationVirtualMachinesList200Response:
        """virtualization_virtual_machines_list

        

        :param id: 
        :type id: str
        :param cluster: 
        :type cluster: str
        :param vcpus: 
        :type vcpus: str
        :param memory: 
        :type memory: str
        :param disk: 
        :type disk: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param tenant_group_id: 
        :type tenant_group_id: str
        :param tenant_group: 
        :type tenant_group: str
        :param tenant_id: 
        :type tenant_id: str
        :param tenant: 
        :type tenant: str
        :param contact: 
        :type contact: str
        :param contact_role: 
        :type contact_role: str
        :param contact_group: 
        :type contact_group: str
        :param local_context_data: 
        :type local_context_data: str
        :param status: 
        :type status: str
        :param cluster_group_id: 
        :type cluster_group_id: str
        :param cluster_group: 
        :type cluster_group: str
        :param cluster_type_id: 
        :type cluster_type_id: str
        :param cluster_type: 
        :type cluster_type: str
        :param cluster_id: 
        :type cluster_id: str
        :param device_id: 
        :type device_id: str
        :param device: 
        :type device: str
        :param region_id: 
        :type region_id: str
        :param region: 
        :type region: str
        :param site_group_id: 
        :type site_group_id: str
        :param site_group: 
        :type site_group: str
        :param site_id: 
        :type site_id: str
        :param site: 
        :type site: str
        :param name: 
        :type name: str
        :param role_id: 
        :type role_id: str
        :param role: 
        :type role: str
        :param platform_id: 
        :type platform_id: str
        :param platform: 
        :type platform: str
        :param mac_address: 
        :type mac_address: str
        :param has_primary_ip: 
        :type has_primary_ip: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param cluster__n: 
        :type cluster__n: str
        :param vcpus__n: 
        :type vcpus__n: str
        :param vcpus__lte: 
        :type vcpus__lte: str
        :param vcpus__lt: 
        :type vcpus__lt: str
        :param vcpus__gte: 
        :type vcpus__gte: str
        :param vcpus__gt: 
        :type vcpus__gt: str
        :param memory__n: 
        :type memory__n: str
        :param memory__lte: 
        :type memory__lte: str
        :param memory__lt: 
        :type memory__lt: str
        :param memory__gte: 
        :type memory__gte: str
        :param memory__gt: 
        :type memory__gt: str
        :param disk__n: 
        :type disk__n: str
        :param disk__lte: 
        :type disk__lte: str
        :param disk__lt: 
        :type disk__lt: str
        :param disk__gte: 
        :type disk__gte: str
        :param disk__gt: 
        :type disk__gt: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param tenant_group_id__n: 
        :type tenant_group_id__n: str
        :param tenant_group__n: 
        :type tenant_group__n: str
        :param tenant_id__n: 
        :type tenant_id__n: str
        :param tenant__n: 
        :type tenant__n: str
        :param contact__n: 
        :type contact__n: str
        :param contact_role__n: 
        :type contact_role__n: str
        :param contact_group__n: 
        :type contact_group__n: str
        :param status__n: 
        :type status__n: str
        :param cluster_group_id__n: 
        :type cluster_group_id__n: str
        :param cluster_group__n: 
        :type cluster_group__n: str
        :param cluster_type_id__n: 
        :type cluster_type_id__n: str
        :param cluster_type__n: 
        :type cluster_type__n: str
        :param cluster_id__n: 
        :type cluster_id__n: str
        :param device_id__n: 
        :type device_id__n: str
        :param device__n: 
        :type device__n: str
        :param region_id__n: 
        :type region_id__n: str
        :param region__n: 
        :type region__n: str
        :param site_group_id__n: 
        :type site_group_id__n: str
        :param site_group__n: 
        :type site_group__n: str
        :param site_id__n: 
        :type site_id__n: str
        :param site__n: 
        :type site__n: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param role_id__n: 
        :type role_id__n: str
        :param role__n: 
        :type role__n: str
        :param platform_id__n: 
        :type platform_id__n: str
        :param platform__n: 
        :type platform__n: str
        :param mac_address__n: 
        :type mac_address__n: str
        :param mac_address__ic: 
        :type mac_address__ic: str
        :param mac_address__nic: 
        :type mac_address__nic: str
        :param mac_address__iew: 
        :type mac_address__iew: str
        :param mac_address__niew: 
        :type mac_address__niew: str
        :param mac_address__isw: 
        :type mac_address__isw: str
        :param mac_address__nisw: 
        :type mac_address__nisw: str
        :param mac_address__ie: 
        :type mac_address__ie: str
        :param mac_address__nie: 
        :type mac_address__nie: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_list_serialize(
            id=id,
            cluster=cluster,
            vcpus=vcpus,
            memory=memory,
            disk=disk,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            tenant_group_id=tenant_group_id,
            tenant_group=tenant_group,
            tenant_id=tenant_id,
            tenant=tenant,
            contact=contact,
            contact_role=contact_role,
            contact_group=contact_group,
            local_context_data=local_context_data,
            status=status,
            cluster_group_id=cluster_group_id,
            cluster_group=cluster_group,
            cluster_type_id=cluster_type_id,
            cluster_type=cluster_type,
            cluster_id=cluster_id,
            device_id=device_id,
            device=device,
            region_id=region_id,
            region=region,
            site_group_id=site_group_id,
            site_group=site_group,
            site_id=site_id,
            site=site,
            name=name,
            role_id=role_id,
            role=role,
            platform_id=platform_id,
            platform=platform,
            mac_address=mac_address,
            has_primary_ip=has_primary_ip,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            cluster__n=cluster__n,
            vcpus__n=vcpus__n,
            vcpus__lte=vcpus__lte,
            vcpus__lt=vcpus__lt,
            vcpus__gte=vcpus__gte,
            vcpus__gt=vcpus__gt,
            memory__n=memory__n,
            memory__lte=memory__lte,
            memory__lt=memory__lt,
            memory__gte=memory__gte,
            memory__gt=memory__gt,
            disk__n=disk__n,
            disk__lte=disk__lte,
            disk__lt=disk__lt,
            disk__gte=disk__gte,
            disk__gt=disk__gt,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            tenant_group_id__n=tenant_group_id__n,
            tenant_group__n=tenant_group__n,
            tenant_id__n=tenant_id__n,
            tenant__n=tenant__n,
            contact__n=contact__n,
            contact_role__n=contact_role__n,
            contact_group__n=contact_group__n,
            status__n=status__n,
            cluster_group_id__n=cluster_group_id__n,
            cluster_group__n=cluster_group__n,
            cluster_type_id__n=cluster_type_id__n,
            cluster_type__n=cluster_type__n,
            cluster_id__n=cluster_id__n,
            device_id__n=device_id__n,
            device__n=device__n,
            region_id__n=region_id__n,
            region__n=region__n,
            site_group_id__n=site_group_id__n,
            site_group__n=site_group__n,
            site_id__n=site_id__n,
            site__n=site__n,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            role_id__n=role_id__n,
            role__n=role__n,
            platform_id__n=platform_id__n,
            platform__n=platform__n,
            mac_address__n=mac_address__n,
            mac_address__ic=mac_address__ic,
            mac_address__nic=mac_address__nic,
            mac_address__iew=mac_address__iew,
            mac_address__niew=mac_address__niew,
            mac_address__isw=mac_address__isw,
            mac_address__nisw=mac_address__nisw,
            mac_address__ie=mac_address__ie,
            mac_address__nie=mac_address__nie,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualizationVirtualMachinesList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_virtual_machines_list_with_http_info(
        self,
        id: Optional[StrictStr] = None,
        cluster: Optional[StrictStr] = None,
        vcpus: Optional[StrictStr] = None,
        memory: Optional[StrictStr] = None,
        disk: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        tenant_group_id: Optional[StrictStr] = None,
        tenant_group: Optional[StrictStr] = None,
        tenant_id: Optional[StrictStr] = None,
        tenant: Optional[StrictStr] = None,
        contact: Optional[StrictStr] = None,
        contact_role: Optional[StrictStr] = None,
        contact_group: Optional[StrictStr] = None,
        local_context_data: Optional[StrictStr] = None,
        status: Optional[StrictStr] = None,
        cluster_group_id: Optional[StrictStr] = None,
        cluster_group: Optional[StrictStr] = None,
        cluster_type_id: Optional[StrictStr] = None,
        cluster_type: Optional[StrictStr] = None,
        cluster_id: Optional[StrictStr] = None,
        device_id: Optional[StrictStr] = None,
        device: Optional[StrictStr] = None,
        region_id: Optional[StrictStr] = None,
        region: Optional[StrictStr] = None,
        site_group_id: Optional[StrictStr] = None,
        site_group: Optional[StrictStr] = None,
        site_id: Optional[StrictStr] = None,
        site: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        role_id: Optional[StrictStr] = None,
        role: Optional[StrictStr] = None,
        platform_id: Optional[StrictStr] = None,
        platform: Optional[StrictStr] = None,
        mac_address: Optional[StrictStr] = None,
        has_primary_ip: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        cluster__n: Optional[StrictStr] = None,
        vcpus__n: Optional[StrictStr] = None,
        vcpus__lte: Optional[StrictStr] = None,
        vcpus__lt: Optional[StrictStr] = None,
        vcpus__gte: Optional[StrictStr] = None,
        vcpus__gt: Optional[StrictStr] = None,
        memory__n: Optional[StrictStr] = None,
        memory__lte: Optional[StrictStr] = None,
        memory__lt: Optional[StrictStr] = None,
        memory__gte: Optional[StrictStr] = None,
        memory__gt: Optional[StrictStr] = None,
        disk__n: Optional[StrictStr] = None,
        disk__lte: Optional[StrictStr] = None,
        disk__lt: Optional[StrictStr] = None,
        disk__gte: Optional[StrictStr] = None,
        disk__gt: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        tenant_group_id__n: Optional[StrictStr] = None,
        tenant_group__n: Optional[StrictStr] = None,
        tenant_id__n: Optional[StrictStr] = None,
        tenant__n: Optional[StrictStr] = None,
        contact__n: Optional[StrictStr] = None,
        contact_role__n: Optional[StrictStr] = None,
        contact_group__n: Optional[StrictStr] = None,
        status__n: Optional[StrictStr] = None,
        cluster_group_id__n: Optional[StrictStr] = None,
        cluster_group__n: Optional[StrictStr] = None,
        cluster_type_id__n: Optional[StrictStr] = None,
        cluster_type__n: Optional[StrictStr] = None,
        cluster_id__n: Optional[StrictStr] = None,
        device_id__n: Optional[StrictStr] = None,
        device__n: Optional[StrictStr] = None,
        region_id__n: Optional[StrictStr] = None,
        region__n: Optional[StrictStr] = None,
        site_group_id__n: Optional[StrictStr] = None,
        site_group__n: Optional[StrictStr] = None,
        site_id__n: Optional[StrictStr] = None,
        site__n: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        role_id__n: Optional[StrictStr] = None,
        role__n: Optional[StrictStr] = None,
        platform_id__n: Optional[StrictStr] = None,
        platform__n: Optional[StrictStr] = None,
        mac_address__n: Optional[StrictStr] = None,
        mac_address__ic: Optional[StrictStr] = None,
        mac_address__nic: Optional[StrictStr] = None,
        mac_address__iew: Optional[StrictStr] = None,
        mac_address__niew: Optional[StrictStr] = None,
        mac_address__isw: Optional[StrictStr] = None,
        mac_address__nisw: Optional[StrictStr] = None,
        mac_address__ie: Optional[StrictStr] = None,
        mac_address__nie: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VirtualizationVirtualMachinesList200Response]:
        """virtualization_virtual_machines_list

        

        :param id: 
        :type id: str
        :param cluster: 
        :type cluster: str
        :param vcpus: 
        :type vcpus: str
        :param memory: 
        :type memory: str
        :param disk: 
        :type disk: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param tenant_group_id: 
        :type tenant_group_id: str
        :param tenant_group: 
        :type tenant_group: str
        :param tenant_id: 
        :type tenant_id: str
        :param tenant: 
        :type tenant: str
        :param contact: 
        :type contact: str
        :param contact_role: 
        :type contact_role: str
        :param contact_group: 
        :type contact_group: str
        :param local_context_data: 
        :type local_context_data: str
        :param status: 
        :type status: str
        :param cluster_group_id: 
        :type cluster_group_id: str
        :param cluster_group: 
        :type cluster_group: str
        :param cluster_type_id: 
        :type cluster_type_id: str
        :param cluster_type: 
        :type cluster_type: str
        :param cluster_id: 
        :type cluster_id: str
        :param device_id: 
        :type device_id: str
        :param device: 
        :type device: str
        :param region_id: 
        :type region_id: str
        :param region: 
        :type region: str
        :param site_group_id: 
        :type site_group_id: str
        :param site_group: 
        :type site_group: str
        :param site_id: 
        :type site_id: str
        :param site: 
        :type site: str
        :param name: 
        :type name: str
        :param role_id: 
        :type role_id: str
        :param role: 
        :type role: str
        :param platform_id: 
        :type platform_id: str
        :param platform: 
        :type platform: str
        :param mac_address: 
        :type mac_address: str
        :param has_primary_ip: 
        :type has_primary_ip: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param cluster__n: 
        :type cluster__n: str
        :param vcpus__n: 
        :type vcpus__n: str
        :param vcpus__lte: 
        :type vcpus__lte: str
        :param vcpus__lt: 
        :type vcpus__lt: str
        :param vcpus__gte: 
        :type vcpus__gte: str
        :param vcpus__gt: 
        :type vcpus__gt: str
        :param memory__n: 
        :type memory__n: str
        :param memory__lte: 
        :type memory__lte: str
        :param memory__lt: 
        :type memory__lt: str
        :param memory__gte: 
        :type memory__gte: str
        :param memory__gt: 
        :type memory__gt: str
        :param disk__n: 
        :type disk__n: str
        :param disk__lte: 
        :type disk__lte: str
        :param disk__lt: 
        :type disk__lt: str
        :param disk__gte: 
        :type disk__gte: str
        :param disk__gt: 
        :type disk__gt: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param tenant_group_id__n: 
        :type tenant_group_id__n: str
        :param tenant_group__n: 
        :type tenant_group__n: str
        :param tenant_id__n: 
        :type tenant_id__n: str
        :param tenant__n: 
        :type tenant__n: str
        :param contact__n: 
        :type contact__n: str
        :param contact_role__n: 
        :type contact_role__n: str
        :param contact_group__n: 
        :type contact_group__n: str
        :param status__n: 
        :type status__n: str
        :param cluster_group_id__n: 
        :type cluster_group_id__n: str
        :param cluster_group__n: 
        :type cluster_group__n: str
        :param cluster_type_id__n: 
        :type cluster_type_id__n: str
        :param cluster_type__n: 
        :type cluster_type__n: str
        :param cluster_id__n: 
        :type cluster_id__n: str
        :param device_id__n: 
        :type device_id__n: str
        :param device__n: 
        :type device__n: str
        :param region_id__n: 
        :type region_id__n: str
        :param region__n: 
        :type region__n: str
        :param site_group_id__n: 
        :type site_group_id__n: str
        :param site_group__n: 
        :type site_group__n: str
        :param site_id__n: 
        :type site_id__n: str
        :param site__n: 
        :type site__n: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param role_id__n: 
        :type role_id__n: str
        :param role__n: 
        :type role__n: str
        :param platform_id__n: 
        :type platform_id__n: str
        :param platform__n: 
        :type platform__n: str
        :param mac_address__n: 
        :type mac_address__n: str
        :param mac_address__ic: 
        :type mac_address__ic: str
        :param mac_address__nic: 
        :type mac_address__nic: str
        :param mac_address__iew: 
        :type mac_address__iew: str
        :param mac_address__niew: 
        :type mac_address__niew: str
        :param mac_address__isw: 
        :type mac_address__isw: str
        :param mac_address__nisw: 
        :type mac_address__nisw: str
        :param mac_address__ie: 
        :type mac_address__ie: str
        :param mac_address__nie: 
        :type mac_address__nie: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_list_serialize(
            id=id,
            cluster=cluster,
            vcpus=vcpus,
            memory=memory,
            disk=disk,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            tenant_group_id=tenant_group_id,
            tenant_group=tenant_group,
            tenant_id=tenant_id,
            tenant=tenant,
            contact=contact,
            contact_role=contact_role,
            contact_group=contact_group,
            local_context_data=local_context_data,
            status=status,
            cluster_group_id=cluster_group_id,
            cluster_group=cluster_group,
            cluster_type_id=cluster_type_id,
            cluster_type=cluster_type,
            cluster_id=cluster_id,
            device_id=device_id,
            device=device,
            region_id=region_id,
            region=region,
            site_group_id=site_group_id,
            site_group=site_group,
            site_id=site_id,
            site=site,
            name=name,
            role_id=role_id,
            role=role,
            platform_id=platform_id,
            platform=platform,
            mac_address=mac_address,
            has_primary_ip=has_primary_ip,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            cluster__n=cluster__n,
            vcpus__n=vcpus__n,
            vcpus__lte=vcpus__lte,
            vcpus__lt=vcpus__lt,
            vcpus__gte=vcpus__gte,
            vcpus__gt=vcpus__gt,
            memory__n=memory__n,
            memory__lte=memory__lte,
            memory__lt=memory__lt,
            memory__gte=memory__gte,
            memory__gt=memory__gt,
            disk__n=disk__n,
            disk__lte=disk__lte,
            disk__lt=disk__lt,
            disk__gte=disk__gte,
            disk__gt=disk__gt,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            tenant_group_id__n=tenant_group_id__n,
            tenant_group__n=tenant_group__n,
            tenant_id__n=tenant_id__n,
            tenant__n=tenant__n,
            contact__n=contact__n,
            contact_role__n=contact_role__n,
            contact_group__n=contact_group__n,
            status__n=status__n,
            cluster_group_id__n=cluster_group_id__n,
            cluster_group__n=cluster_group__n,
            cluster_type_id__n=cluster_type_id__n,
            cluster_type__n=cluster_type__n,
            cluster_id__n=cluster_id__n,
            device_id__n=device_id__n,
            device__n=device__n,
            region_id__n=region_id__n,
            region__n=region__n,
            site_group_id__n=site_group_id__n,
            site_group__n=site_group__n,
            site_id__n=site_id__n,
            site__n=site__n,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            role_id__n=role_id__n,
            role__n=role__n,
            platform_id__n=platform_id__n,
            platform__n=platform__n,
            mac_address__n=mac_address__n,
            mac_address__ic=mac_address__ic,
            mac_address__nic=mac_address__nic,
            mac_address__iew=mac_address__iew,
            mac_address__niew=mac_address__niew,
            mac_address__isw=mac_address__isw,
            mac_address__nisw=mac_address__nisw,
            mac_address__ie=mac_address__ie,
            mac_address__nie=mac_address__nie,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualizationVirtualMachinesList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_virtual_machines_list_without_preload_content(
        self,
        id: Optional[StrictStr] = None,
        cluster: Optional[StrictStr] = None,
        vcpus: Optional[StrictStr] = None,
        memory: Optional[StrictStr] = None,
        disk: Optional[StrictStr] = None,
        created: Optional[StrictStr] = None,
        last_updated: Optional[StrictStr] = None,
        q: Optional[StrictStr] = None,
        tag: Optional[StrictStr] = None,
        tenant_group_id: Optional[StrictStr] = None,
        tenant_group: Optional[StrictStr] = None,
        tenant_id: Optional[StrictStr] = None,
        tenant: Optional[StrictStr] = None,
        contact: Optional[StrictStr] = None,
        contact_role: Optional[StrictStr] = None,
        contact_group: Optional[StrictStr] = None,
        local_context_data: Optional[StrictStr] = None,
        status: Optional[StrictStr] = None,
        cluster_group_id: Optional[StrictStr] = None,
        cluster_group: Optional[StrictStr] = None,
        cluster_type_id: Optional[StrictStr] = None,
        cluster_type: Optional[StrictStr] = None,
        cluster_id: Optional[StrictStr] = None,
        device_id: Optional[StrictStr] = None,
        device: Optional[StrictStr] = None,
        region_id: Optional[StrictStr] = None,
        region: Optional[StrictStr] = None,
        site_group_id: Optional[StrictStr] = None,
        site_group: Optional[StrictStr] = None,
        site_id: Optional[StrictStr] = None,
        site: Optional[StrictStr] = None,
        name: Optional[StrictStr] = None,
        role_id: Optional[StrictStr] = None,
        role: Optional[StrictStr] = None,
        platform_id: Optional[StrictStr] = None,
        platform: Optional[StrictStr] = None,
        mac_address: Optional[StrictStr] = None,
        has_primary_ip: Optional[StrictStr] = None,
        id__n: Optional[StrictStr] = None,
        id__lte: Optional[StrictStr] = None,
        id__lt: Optional[StrictStr] = None,
        id__gte: Optional[StrictStr] = None,
        id__gt: Optional[StrictStr] = None,
        cluster__n: Optional[StrictStr] = None,
        vcpus__n: Optional[StrictStr] = None,
        vcpus__lte: Optional[StrictStr] = None,
        vcpus__lt: Optional[StrictStr] = None,
        vcpus__gte: Optional[StrictStr] = None,
        vcpus__gt: Optional[StrictStr] = None,
        memory__n: Optional[StrictStr] = None,
        memory__lte: Optional[StrictStr] = None,
        memory__lt: Optional[StrictStr] = None,
        memory__gte: Optional[StrictStr] = None,
        memory__gt: Optional[StrictStr] = None,
        disk__n: Optional[StrictStr] = None,
        disk__lte: Optional[StrictStr] = None,
        disk__lt: Optional[StrictStr] = None,
        disk__gte: Optional[StrictStr] = None,
        disk__gt: Optional[StrictStr] = None,
        created__n: Optional[StrictStr] = None,
        created__lte: Optional[StrictStr] = None,
        created__lt: Optional[StrictStr] = None,
        created__gte: Optional[StrictStr] = None,
        created__gt: Optional[StrictStr] = None,
        last_updated__n: Optional[StrictStr] = None,
        last_updated__lte: Optional[StrictStr] = None,
        last_updated__lt: Optional[StrictStr] = None,
        last_updated__gte: Optional[StrictStr] = None,
        last_updated__gt: Optional[StrictStr] = None,
        tag__n: Optional[StrictStr] = None,
        tenant_group_id__n: Optional[StrictStr] = None,
        tenant_group__n: Optional[StrictStr] = None,
        tenant_id__n: Optional[StrictStr] = None,
        tenant__n: Optional[StrictStr] = None,
        contact__n: Optional[StrictStr] = None,
        contact_role__n: Optional[StrictStr] = None,
        contact_group__n: Optional[StrictStr] = None,
        status__n: Optional[StrictStr] = None,
        cluster_group_id__n: Optional[StrictStr] = None,
        cluster_group__n: Optional[StrictStr] = None,
        cluster_type_id__n: Optional[StrictStr] = None,
        cluster_type__n: Optional[StrictStr] = None,
        cluster_id__n: Optional[StrictStr] = None,
        device_id__n: Optional[StrictStr] = None,
        device__n: Optional[StrictStr] = None,
        region_id__n: Optional[StrictStr] = None,
        region__n: Optional[StrictStr] = None,
        site_group_id__n: Optional[StrictStr] = None,
        site_group__n: Optional[StrictStr] = None,
        site_id__n: Optional[StrictStr] = None,
        site__n: Optional[StrictStr] = None,
        name__n: Optional[StrictStr] = None,
        name__ic: Optional[StrictStr] = None,
        name__nic: Optional[StrictStr] = None,
        name__iew: Optional[StrictStr] = None,
        name__niew: Optional[StrictStr] = None,
        name__isw: Optional[StrictStr] = None,
        name__nisw: Optional[StrictStr] = None,
        name__ie: Optional[StrictStr] = None,
        name__nie: Optional[StrictStr] = None,
        name__empty: Optional[StrictStr] = None,
        role_id__n: Optional[StrictStr] = None,
        role__n: Optional[StrictStr] = None,
        platform_id__n: Optional[StrictStr] = None,
        platform__n: Optional[StrictStr] = None,
        mac_address__n: Optional[StrictStr] = None,
        mac_address__ic: Optional[StrictStr] = None,
        mac_address__nic: Optional[StrictStr] = None,
        mac_address__iew: Optional[StrictStr] = None,
        mac_address__niew: Optional[StrictStr] = None,
        mac_address__isw: Optional[StrictStr] = None,
        mac_address__nisw: Optional[StrictStr] = None,
        mac_address__ie: Optional[StrictStr] = None,
        mac_address__nie: Optional[StrictStr] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The initial index from which to return the results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_virtual_machines_list

        

        :param id: 
        :type id: str
        :param cluster: 
        :type cluster: str
        :param vcpus: 
        :type vcpus: str
        :param memory: 
        :type memory: str
        :param disk: 
        :type disk: str
        :param created: 
        :type created: str
        :param last_updated: 
        :type last_updated: str
        :param q: 
        :type q: str
        :param tag: 
        :type tag: str
        :param tenant_group_id: 
        :type tenant_group_id: str
        :param tenant_group: 
        :type tenant_group: str
        :param tenant_id: 
        :type tenant_id: str
        :param tenant: 
        :type tenant: str
        :param contact: 
        :type contact: str
        :param contact_role: 
        :type contact_role: str
        :param contact_group: 
        :type contact_group: str
        :param local_context_data: 
        :type local_context_data: str
        :param status: 
        :type status: str
        :param cluster_group_id: 
        :type cluster_group_id: str
        :param cluster_group: 
        :type cluster_group: str
        :param cluster_type_id: 
        :type cluster_type_id: str
        :param cluster_type: 
        :type cluster_type: str
        :param cluster_id: 
        :type cluster_id: str
        :param device_id: 
        :type device_id: str
        :param device: 
        :type device: str
        :param region_id: 
        :type region_id: str
        :param region: 
        :type region: str
        :param site_group_id: 
        :type site_group_id: str
        :param site_group: 
        :type site_group: str
        :param site_id: 
        :type site_id: str
        :param site: 
        :type site: str
        :param name: 
        :type name: str
        :param role_id: 
        :type role_id: str
        :param role: 
        :type role: str
        :param platform_id: 
        :type platform_id: str
        :param platform: 
        :type platform: str
        :param mac_address: 
        :type mac_address: str
        :param has_primary_ip: 
        :type has_primary_ip: str
        :param id__n: 
        :type id__n: str
        :param id__lte: 
        :type id__lte: str
        :param id__lt: 
        :type id__lt: str
        :param id__gte: 
        :type id__gte: str
        :param id__gt: 
        :type id__gt: str
        :param cluster__n: 
        :type cluster__n: str
        :param vcpus__n: 
        :type vcpus__n: str
        :param vcpus__lte: 
        :type vcpus__lte: str
        :param vcpus__lt: 
        :type vcpus__lt: str
        :param vcpus__gte: 
        :type vcpus__gte: str
        :param vcpus__gt: 
        :type vcpus__gt: str
        :param memory__n: 
        :type memory__n: str
        :param memory__lte: 
        :type memory__lte: str
        :param memory__lt: 
        :type memory__lt: str
        :param memory__gte: 
        :type memory__gte: str
        :param memory__gt: 
        :type memory__gt: str
        :param disk__n: 
        :type disk__n: str
        :param disk__lte: 
        :type disk__lte: str
        :param disk__lt: 
        :type disk__lt: str
        :param disk__gte: 
        :type disk__gte: str
        :param disk__gt: 
        :type disk__gt: str
        :param created__n: 
        :type created__n: str
        :param created__lte: 
        :type created__lte: str
        :param created__lt: 
        :type created__lt: str
        :param created__gte: 
        :type created__gte: str
        :param created__gt: 
        :type created__gt: str
        :param last_updated__n: 
        :type last_updated__n: str
        :param last_updated__lte: 
        :type last_updated__lte: str
        :param last_updated__lt: 
        :type last_updated__lt: str
        :param last_updated__gte: 
        :type last_updated__gte: str
        :param last_updated__gt: 
        :type last_updated__gt: str
        :param tag__n: 
        :type tag__n: str
        :param tenant_group_id__n: 
        :type tenant_group_id__n: str
        :param tenant_group__n: 
        :type tenant_group__n: str
        :param tenant_id__n: 
        :type tenant_id__n: str
        :param tenant__n: 
        :type tenant__n: str
        :param contact__n: 
        :type contact__n: str
        :param contact_role__n: 
        :type contact_role__n: str
        :param contact_group__n: 
        :type contact_group__n: str
        :param status__n: 
        :type status__n: str
        :param cluster_group_id__n: 
        :type cluster_group_id__n: str
        :param cluster_group__n: 
        :type cluster_group__n: str
        :param cluster_type_id__n: 
        :type cluster_type_id__n: str
        :param cluster_type__n: 
        :type cluster_type__n: str
        :param cluster_id__n: 
        :type cluster_id__n: str
        :param device_id__n: 
        :type device_id__n: str
        :param device__n: 
        :type device__n: str
        :param region_id__n: 
        :type region_id__n: str
        :param region__n: 
        :type region__n: str
        :param site_group_id__n: 
        :type site_group_id__n: str
        :param site_group__n: 
        :type site_group__n: str
        :param site_id__n: 
        :type site_id__n: str
        :param site__n: 
        :type site__n: str
        :param name__n: 
        :type name__n: str
        :param name__ic: 
        :type name__ic: str
        :param name__nic: 
        :type name__nic: str
        :param name__iew: 
        :type name__iew: str
        :param name__niew: 
        :type name__niew: str
        :param name__isw: 
        :type name__isw: str
        :param name__nisw: 
        :type name__nisw: str
        :param name__ie: 
        :type name__ie: str
        :param name__nie: 
        :type name__nie: str
        :param name__empty: 
        :type name__empty: str
        :param role_id__n: 
        :type role_id__n: str
        :param role__n: 
        :type role__n: str
        :param platform_id__n: 
        :type platform_id__n: str
        :param platform__n: 
        :type platform__n: str
        :param mac_address__n: 
        :type mac_address__n: str
        :param mac_address__ic: 
        :type mac_address__ic: str
        :param mac_address__nic: 
        :type mac_address__nic: str
        :param mac_address__iew: 
        :type mac_address__iew: str
        :param mac_address__niew: 
        :type mac_address__niew: str
        :param mac_address__isw: 
        :type mac_address__isw: str
        :param mac_address__nisw: 
        :type mac_address__nisw: str
        :param mac_address__ie: 
        :type mac_address__ie: str
        :param mac_address__nie: 
        :type mac_address__nie: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param limit: Number of results to return per page.
        :type limit: int
        :param offset: The initial index from which to return the results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_list_serialize(
            id=id,
            cluster=cluster,
            vcpus=vcpus,
            memory=memory,
            disk=disk,
            created=created,
            last_updated=last_updated,
            q=q,
            tag=tag,
            tenant_group_id=tenant_group_id,
            tenant_group=tenant_group,
            tenant_id=tenant_id,
            tenant=tenant,
            contact=contact,
            contact_role=contact_role,
            contact_group=contact_group,
            local_context_data=local_context_data,
            status=status,
            cluster_group_id=cluster_group_id,
            cluster_group=cluster_group,
            cluster_type_id=cluster_type_id,
            cluster_type=cluster_type,
            cluster_id=cluster_id,
            device_id=device_id,
            device=device,
            region_id=region_id,
            region=region,
            site_group_id=site_group_id,
            site_group=site_group,
            site_id=site_id,
            site=site,
            name=name,
            role_id=role_id,
            role=role,
            platform_id=platform_id,
            platform=platform,
            mac_address=mac_address,
            has_primary_ip=has_primary_ip,
            id__n=id__n,
            id__lte=id__lte,
            id__lt=id__lt,
            id__gte=id__gte,
            id__gt=id__gt,
            cluster__n=cluster__n,
            vcpus__n=vcpus__n,
            vcpus__lte=vcpus__lte,
            vcpus__lt=vcpus__lt,
            vcpus__gte=vcpus__gte,
            vcpus__gt=vcpus__gt,
            memory__n=memory__n,
            memory__lte=memory__lte,
            memory__lt=memory__lt,
            memory__gte=memory__gte,
            memory__gt=memory__gt,
            disk__n=disk__n,
            disk__lte=disk__lte,
            disk__lt=disk__lt,
            disk__gte=disk__gte,
            disk__gt=disk__gt,
            created__n=created__n,
            created__lte=created__lte,
            created__lt=created__lt,
            created__gte=created__gte,
            created__gt=created__gt,
            last_updated__n=last_updated__n,
            last_updated__lte=last_updated__lte,
            last_updated__lt=last_updated__lt,
            last_updated__gte=last_updated__gte,
            last_updated__gt=last_updated__gt,
            tag__n=tag__n,
            tenant_group_id__n=tenant_group_id__n,
            tenant_group__n=tenant_group__n,
            tenant_id__n=tenant_id__n,
            tenant__n=tenant__n,
            contact__n=contact__n,
            contact_role__n=contact_role__n,
            contact_group__n=contact_group__n,
            status__n=status__n,
            cluster_group_id__n=cluster_group_id__n,
            cluster_group__n=cluster_group__n,
            cluster_type_id__n=cluster_type_id__n,
            cluster_type__n=cluster_type__n,
            cluster_id__n=cluster_id__n,
            device_id__n=device_id__n,
            device__n=device__n,
            region_id__n=region_id__n,
            region__n=region__n,
            site_group_id__n=site_group_id__n,
            site_group__n=site_group__n,
            site_id__n=site_id__n,
            site__n=site__n,
            name__n=name__n,
            name__ic=name__ic,
            name__nic=name__nic,
            name__iew=name__iew,
            name__niew=name__niew,
            name__isw=name__isw,
            name__nisw=name__nisw,
            name__ie=name__ie,
            name__nie=name__nie,
            name__empty=name__empty,
            role_id__n=role_id__n,
            role__n=role__n,
            platform_id__n=platform_id__n,
            platform__n=platform__n,
            mac_address__n=mac_address__n,
            mac_address__ic=mac_address__ic,
            mac_address__nic=mac_address__nic,
            mac_address__iew=mac_address__iew,
            mac_address__niew=mac_address__niew,
            mac_address__isw=mac_address__isw,
            mac_address__nisw=mac_address__nisw,
            mac_address__ie=mac_address__ie,
            mac_address__nie=mac_address__nie,
            ordering=ordering,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualizationVirtualMachinesList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_virtual_machines_list_serialize(
        self,
        id,
        cluster,
        vcpus,
        memory,
        disk,
        created,
        last_updated,
        q,
        tag,
        tenant_group_id,
        tenant_group,
        tenant_id,
        tenant,
        contact,
        contact_role,
        contact_group,
        local_context_data,
        status,
        cluster_group_id,
        cluster_group,
        cluster_type_id,
        cluster_type,
        cluster_id,
        device_id,
        device,
        region_id,
        region,
        site_group_id,
        site_group,
        site_id,
        site,
        name,
        role_id,
        role,
        platform_id,
        platform,
        mac_address,
        has_primary_ip,
        id__n,
        id__lte,
        id__lt,
        id__gte,
        id__gt,
        cluster__n,
        vcpus__n,
        vcpus__lte,
        vcpus__lt,
        vcpus__gte,
        vcpus__gt,
        memory__n,
        memory__lte,
        memory__lt,
        memory__gte,
        memory__gt,
        disk__n,
        disk__lte,
        disk__lt,
        disk__gte,
        disk__gt,
        created__n,
        created__lte,
        created__lt,
        created__gte,
        created__gt,
        last_updated__n,
        last_updated__lte,
        last_updated__lt,
        last_updated__gte,
        last_updated__gt,
        tag__n,
        tenant_group_id__n,
        tenant_group__n,
        tenant_id__n,
        tenant__n,
        contact__n,
        contact_role__n,
        contact_group__n,
        status__n,
        cluster_group_id__n,
        cluster_group__n,
        cluster_type_id__n,
        cluster_type__n,
        cluster_id__n,
        device_id__n,
        device__n,
        region_id__n,
        region__n,
        site_group_id__n,
        site_group__n,
        site_id__n,
        site__n,
        name__n,
        name__ic,
        name__nic,
        name__iew,
        name__niew,
        name__isw,
        name__nisw,
        name__ie,
        name__nie,
        name__empty,
        role_id__n,
        role__n,
        platform_id__n,
        platform__n,
        mac_address__n,
        mac_address__ic,
        mac_address__nic,
        mac_address__iew,
        mac_address__niew,
        mac_address__isw,
        mac_address__nisw,
        mac_address__ie,
        mac_address__nie,
        ordering,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if cluster is not None:
            
            _query_params.append(('cluster', cluster))
            
        if vcpus is not None:
            
            _query_params.append(('vcpus', vcpus))
            
        if memory is not None:
            
            _query_params.append(('memory', memory))
            
        if disk is not None:
            
            _query_params.append(('disk', disk))
            
        if created is not None:
            
            _query_params.append(('created', created))
            
        if last_updated is not None:
            
            _query_params.append(('last_updated', last_updated))
            
        if q is not None:
            
            _query_params.append(('q', q))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if tenant_group_id is not None:
            
            _query_params.append(('tenant_group_id', tenant_group_id))
            
        if tenant_group is not None:
            
            _query_params.append(('tenant_group', tenant_group))
            
        if tenant_id is not None:
            
            _query_params.append(('tenant_id', tenant_id))
            
        if tenant is not None:
            
            _query_params.append(('tenant', tenant))
            
        if contact is not None:
            
            _query_params.append(('contact', contact))
            
        if contact_role is not None:
            
            _query_params.append(('contact_role', contact_role))
            
        if contact_group is not None:
            
            _query_params.append(('contact_group', contact_group))
            
        if local_context_data is not None:
            
            _query_params.append(('local_context_data', local_context_data))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if cluster_group_id is not None:
            
            _query_params.append(('cluster_group_id', cluster_group_id))
            
        if cluster_group is not None:
            
            _query_params.append(('cluster_group', cluster_group))
            
        if cluster_type_id is not None:
            
            _query_params.append(('cluster_type_id', cluster_type_id))
            
        if cluster_type is not None:
            
            _query_params.append(('cluster_type', cluster_type))
            
        if cluster_id is not None:
            
            _query_params.append(('cluster_id', cluster_id))
            
        if device_id is not None:
            
            _query_params.append(('device_id', device_id))
            
        if device is not None:
            
            _query_params.append(('device', device))
            
        if region_id is not None:
            
            _query_params.append(('region_id', region_id))
            
        if region is not None:
            
            _query_params.append(('region', region))
            
        if site_group_id is not None:
            
            _query_params.append(('site_group_id', site_group_id))
            
        if site_group is not None:
            
            _query_params.append(('site_group', site_group))
            
        if site_id is not None:
            
            _query_params.append(('site_id', site_id))
            
        if site is not None:
            
            _query_params.append(('site', site))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if role_id is not None:
            
            _query_params.append(('role_id', role_id))
            
        if role is not None:
            
            _query_params.append(('role', role))
            
        if platform_id is not None:
            
            _query_params.append(('platform_id', platform_id))
            
        if platform is not None:
            
            _query_params.append(('platform', platform))
            
        if mac_address is not None:
            
            _query_params.append(('mac_address', mac_address))
            
        if has_primary_ip is not None:
            
            _query_params.append(('has_primary_ip', has_primary_ip))
            
        if id__n is not None:
            
            _query_params.append(('id__n', id__n))
            
        if id__lte is not None:
            
            _query_params.append(('id__lte', id__lte))
            
        if id__lt is not None:
            
            _query_params.append(('id__lt', id__lt))
            
        if id__gte is not None:
            
            _query_params.append(('id__gte', id__gte))
            
        if id__gt is not None:
            
            _query_params.append(('id__gt', id__gt))
            
        if cluster__n is not None:
            
            _query_params.append(('cluster__n', cluster__n))
            
        if vcpus__n is not None:
            
            _query_params.append(('vcpus__n', vcpus__n))
            
        if vcpus__lte is not None:
            
            _query_params.append(('vcpus__lte', vcpus__lte))
            
        if vcpus__lt is not None:
            
            _query_params.append(('vcpus__lt', vcpus__lt))
            
        if vcpus__gte is not None:
            
            _query_params.append(('vcpus__gte', vcpus__gte))
            
        if vcpus__gt is not None:
            
            _query_params.append(('vcpus__gt', vcpus__gt))
            
        if memory__n is not None:
            
            _query_params.append(('memory__n', memory__n))
            
        if memory__lte is not None:
            
            _query_params.append(('memory__lte', memory__lte))
            
        if memory__lt is not None:
            
            _query_params.append(('memory__lt', memory__lt))
            
        if memory__gte is not None:
            
            _query_params.append(('memory__gte', memory__gte))
            
        if memory__gt is not None:
            
            _query_params.append(('memory__gt', memory__gt))
            
        if disk__n is not None:
            
            _query_params.append(('disk__n', disk__n))
            
        if disk__lte is not None:
            
            _query_params.append(('disk__lte', disk__lte))
            
        if disk__lt is not None:
            
            _query_params.append(('disk__lt', disk__lt))
            
        if disk__gte is not None:
            
            _query_params.append(('disk__gte', disk__gte))
            
        if disk__gt is not None:
            
            _query_params.append(('disk__gt', disk__gt))
            
        if created__n is not None:
            
            _query_params.append(('created__n', created__n))
            
        if created__lte is not None:
            
            _query_params.append(('created__lte', created__lte))
            
        if created__lt is not None:
            
            _query_params.append(('created__lt', created__lt))
            
        if created__gte is not None:
            
            _query_params.append(('created__gte', created__gte))
            
        if created__gt is not None:
            
            _query_params.append(('created__gt', created__gt))
            
        if last_updated__n is not None:
            
            _query_params.append(('last_updated__n', last_updated__n))
            
        if last_updated__lte is not None:
            
            _query_params.append(('last_updated__lte', last_updated__lte))
            
        if last_updated__lt is not None:
            
            _query_params.append(('last_updated__lt', last_updated__lt))
            
        if last_updated__gte is not None:
            
            _query_params.append(('last_updated__gte', last_updated__gte))
            
        if last_updated__gt is not None:
            
            _query_params.append(('last_updated__gt', last_updated__gt))
            
        if tag__n is not None:
            
            _query_params.append(('tag__n', tag__n))
            
        if tenant_group_id__n is not None:
            
            _query_params.append(('tenant_group_id__n', tenant_group_id__n))
            
        if tenant_group__n is not None:
            
            _query_params.append(('tenant_group__n', tenant_group__n))
            
        if tenant_id__n is not None:
            
            _query_params.append(('tenant_id__n', tenant_id__n))
            
        if tenant__n is not None:
            
            _query_params.append(('tenant__n', tenant__n))
            
        if contact__n is not None:
            
            _query_params.append(('contact__n', contact__n))
            
        if contact_role__n is not None:
            
            _query_params.append(('contact_role__n', contact_role__n))
            
        if contact_group__n is not None:
            
            _query_params.append(('contact_group__n', contact_group__n))
            
        if status__n is not None:
            
            _query_params.append(('status__n', status__n))
            
        if cluster_group_id__n is not None:
            
            _query_params.append(('cluster_group_id__n', cluster_group_id__n))
            
        if cluster_group__n is not None:
            
            _query_params.append(('cluster_group__n', cluster_group__n))
            
        if cluster_type_id__n is not None:
            
            _query_params.append(('cluster_type_id__n', cluster_type_id__n))
            
        if cluster_type__n is not None:
            
            _query_params.append(('cluster_type__n', cluster_type__n))
            
        if cluster_id__n is not None:
            
            _query_params.append(('cluster_id__n', cluster_id__n))
            
        if device_id__n is not None:
            
            _query_params.append(('device_id__n', device_id__n))
            
        if device__n is not None:
            
            _query_params.append(('device__n', device__n))
            
        if region_id__n is not None:
            
            _query_params.append(('region_id__n', region_id__n))
            
        if region__n is not None:
            
            _query_params.append(('region__n', region__n))
            
        if site_group_id__n is not None:
            
            _query_params.append(('site_group_id__n', site_group_id__n))
            
        if site_group__n is not None:
            
            _query_params.append(('site_group__n', site_group__n))
            
        if site_id__n is not None:
            
            _query_params.append(('site_id__n', site_id__n))
            
        if site__n is not None:
            
            _query_params.append(('site__n', site__n))
            
        if name__n is not None:
            
            _query_params.append(('name__n', name__n))
            
        if name__ic is not None:
            
            _query_params.append(('name__ic', name__ic))
            
        if name__nic is not None:
            
            _query_params.append(('name__nic', name__nic))
            
        if name__iew is not None:
            
            _query_params.append(('name__iew', name__iew))
            
        if name__niew is not None:
            
            _query_params.append(('name__niew', name__niew))
            
        if name__isw is not None:
            
            _query_params.append(('name__isw', name__isw))
            
        if name__nisw is not None:
            
            _query_params.append(('name__nisw', name__nisw))
            
        if name__ie is not None:
            
            _query_params.append(('name__ie', name__ie))
            
        if name__nie is not None:
            
            _query_params.append(('name__nie', name__nie))
            
        if name__empty is not None:
            
            _query_params.append(('name__empty', name__empty))
            
        if role_id__n is not None:
            
            _query_params.append(('role_id__n', role_id__n))
            
        if role__n is not None:
            
            _query_params.append(('role__n', role__n))
            
        if platform_id__n is not None:
            
            _query_params.append(('platform_id__n', platform_id__n))
            
        if platform__n is not None:
            
            _query_params.append(('platform__n', platform__n))
            
        if mac_address__n is not None:
            
            _query_params.append(('mac_address__n', mac_address__n))
            
        if mac_address__ic is not None:
            
            _query_params.append(('mac_address__ic', mac_address__ic))
            
        if mac_address__nic is not None:
            
            _query_params.append(('mac_address__nic', mac_address__nic))
            
        if mac_address__iew is not None:
            
            _query_params.append(('mac_address__iew', mac_address__iew))
            
        if mac_address__niew is not None:
            
            _query_params.append(('mac_address__niew', mac_address__niew))
            
        if mac_address__isw is not None:
            
            _query_params.append(('mac_address__isw', mac_address__isw))
            
        if mac_address__nisw is not None:
            
            _query_params.append(('mac_address__nisw', mac_address__nisw))
            
        if mac_address__ie is not None:
            
            _query_params.append(('mac_address__ie', mac_address__ie))
            
        if mac_address__nie is not None:
            
            _query_params.append(('mac_address__nie', mac_address__nie))
            
        if ordering is not None:
            
            _query_params.append(('ordering', ordering))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/virtualization/virtual-machines/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_virtual_machines_partial_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this virtual machine.")],
        writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VirtualMachineWithConfigContext:
        """virtualization_virtual_machines_partial_update

        

        :param id: A unique integer value identifying this virtual machine. (required)
        :type id: int
        :param writable_virtual_machine_with_config_context: (required)
        :type writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_partial_update_serialize(
            id=id,
            writable_virtual_machine_with_config_context=writable_virtual_machine_with_config_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualMachineWithConfigContext",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_virtual_machines_partial_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this virtual machine.")],
        writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VirtualMachineWithConfigContext]:
        """virtualization_virtual_machines_partial_update

        

        :param id: A unique integer value identifying this virtual machine. (required)
        :type id: int
        :param writable_virtual_machine_with_config_context: (required)
        :type writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_partial_update_serialize(
            id=id,
            writable_virtual_machine_with_config_context=writable_virtual_machine_with_config_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualMachineWithConfigContext",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_virtual_machines_partial_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this virtual machine.")],
        writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_virtual_machines_partial_update

        

        :param id: A unique integer value identifying this virtual machine. (required)
        :type id: int
        :param writable_virtual_machine_with_config_context: (required)
        :type writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_partial_update_serialize(
            id=id,
            writable_virtual_machine_with_config_context=writable_virtual_machine_with_config_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualMachineWithConfigContext",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_virtual_machines_partial_update_serialize(
        self,
        id,
        writable_virtual_machine_with_config_context,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_virtual_machine_with_config_context is not None:
            _body_params = writable_virtual_machine_with_config_context


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/virtualization/virtual-machines/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_virtual_machines_read(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this virtual machine.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VirtualMachineWithConfigContext:
        """virtualization_virtual_machines_read

        

        :param id: A unique integer value identifying this virtual machine. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualMachineWithConfigContext",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_virtual_machines_read_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this virtual machine.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VirtualMachineWithConfigContext]:
        """virtualization_virtual_machines_read

        

        :param id: A unique integer value identifying this virtual machine. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualMachineWithConfigContext",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_virtual_machines_read_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this virtual machine.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_virtual_machines_read

        

        :param id: A unique integer value identifying this virtual machine. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualMachineWithConfigContext",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_virtual_machines_read_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/virtualization/virtual-machines/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def virtualization_virtual_machines_update(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this virtual machine.")],
        writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VirtualMachineWithConfigContext:
        """virtualization_virtual_machines_update

        

        :param id: A unique integer value identifying this virtual machine. (required)
        :type id: int
        :param writable_virtual_machine_with_config_context: (required)
        :type writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_update_serialize(
            id=id,
            writable_virtual_machine_with_config_context=writable_virtual_machine_with_config_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualMachineWithConfigContext",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def virtualization_virtual_machines_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this virtual machine.")],
        writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VirtualMachineWithConfigContext]:
        """virtualization_virtual_machines_update

        

        :param id: A unique integer value identifying this virtual machine. (required)
        :type id: int
        :param writable_virtual_machine_with_config_context: (required)
        :type writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_update_serialize(
            id=id,
            writable_virtual_machine_with_config_context=writable_virtual_machine_with_config_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualMachineWithConfigContext",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def virtualization_virtual_machines_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this virtual machine.")],
        writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """virtualization_virtual_machines_update

        

        :param id: A unique integer value identifying this virtual machine. (required)
        :type id: int
        :param writable_virtual_machine_with_config_context: (required)
        :type writable_virtual_machine_with_config_context: WritableVirtualMachineWithConfigContext
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._virtualization_virtual_machines_update_serialize(
            id=id,
            writable_virtual_machine_with_config_context=writable_virtual_machine_with_config_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VirtualMachineWithConfigContext",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _virtualization_virtual_machines_update_serialize(
        self,
        id,
        writable_virtual_machine_with_config_context,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if writable_virtual_machine_with_config_context is not None:
            _body_params = writable_virtual_machine_with_config_context


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/virtualization/virtual-machines/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



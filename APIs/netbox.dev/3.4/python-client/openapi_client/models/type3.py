# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class Type3(BaseModel):
    """
    Type3
    """ # noqa: E501
    label: StrictStr
    value: StrictStr
    __properties: ClassVar[List[str]] = ["label", "value"]

    @field_validator('label')
    def label_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Virtual', 'Bridge', 'Link Aggregation Group (LAG)', '100BASE-FX (10/100ME FIBER)', '100BASE-LFX (10/100ME FIBER)', '100BASE-TX (10/100ME)', '100BASE-T1 (10/100ME Single Pair)', '1000BASE-T (1GE)', '2.5GBASE-T (2.5GE)', '5GBASE-T (5GE)', '10GBASE-T (10GE)', '10GBASE-CX4 (10GE)', 'GBIC (1GE)', 'SFP (1GE)', 'SFP+ (10GE)', 'XFP (10GE)', 'XENPAK (10GE)', 'X2 (10GE)', 'SFP28 (25GE)', 'SFP56 (50GE)', 'QSFP+ (40GE)', 'QSFP28 (50GE)', 'CFP (100GE)', 'CFP2 (100GE)', 'CFP2 (200GE)', 'CFP4 (100GE)', 'Cisco CPAK (100GE)', 'QSFP28 (100GE)', 'QSFP56 (200GE)', 'QSFP-DD (400GE)', 'OSFP (400GE)', 'QSFP-DD (800GE)', 'OSFP (800GE)', '1000BASE-KX (1GE)', '10GBASE-KR (10GE)', '10GBASE-KX4 (10GE)', '25GBASE-KR (25GE)', '40GBASE-KR4 (40GE)', '50GBASE-KR (50GE)', '100GBASE-KP4 (100GE)', '100GBASE-KR2 (100GE)', '100GBASE-KR4 (100GE)', 'IEEE 802.11a', 'IEEE 802.11b/g', 'IEEE 802.11n', 'IEEE 802.11ac', 'IEEE 802.11ad', 'IEEE 802.11ax', 'IEEE 802.11ay', 'IEEE 802.15.1 (Bluetooth)', 'Other (Wireless)', 'GSM', 'CDMA', 'LTE', 'OC-3/STM-1', 'OC-12/STM-4', 'OC-48/STM-16', 'OC-192/STM-64', 'OC-768/STM-256', 'OC-1920/STM-640', 'OC-3840/STM-1234', 'SFP (1GFC)', 'SFP (2GFC)', 'SFP (4GFC)', 'SFP+ (8GFC)', 'SFP+ (16GFC)', 'SFP28 (32GFC)', 'QSFP+ (64GFC)', 'QSFP28 (128GFC)', 'SDR (2 Gbps)', 'DDR (4 Gbps)', 'QDR (8 Gbps)', 'FDR10 (10 Gbps)', 'FDR (13.5 Gbps)', 'EDR (25 Gbps)', 'HDR (50 Gbps)', 'NDR (100 Gbps)', 'XDR (250 Gbps)', 'T1 (1.544 Mbps)', 'E1 (2.048 Mbps)', 'T3 (45 Mbps)', 'E3 (34 Mbps)', 'xDSL', 'DOCSIS', 'GPON (2.5 Gbps / 1.25 Gps)', 'XG-PON (10 Gbps / 2.5 Gbps)', 'XGS-PON (10 Gbps)', 'NG-PON2 (TWDM-PON) (4x10 Gbps)', 'EPON (1 Gbps)', '10G-EPON (10 Gbps)', 'Cisco StackWise', 'Cisco StackWise Plus', 'Cisco FlexStack', 'Cisco FlexStack Plus', 'Cisco StackWise-80', 'Cisco StackWise-160', 'Cisco StackWise-320', 'Cisco StackWise-480', 'Cisco StackWise-1T', 'Juniper VCP', 'Extreme SummitStack', 'Extreme SummitStack-128', 'Extreme SummitStack-256', 'Extreme SummitStack-512', 'Other']):
            raise ValueError("must be one of enum values ('Virtual', 'Bridge', 'Link Aggregation Group (LAG)', '100BASE-FX (10/100ME FIBER)', '100BASE-LFX (10/100ME FIBER)', '100BASE-TX (10/100ME)', '100BASE-T1 (10/100ME Single Pair)', '1000BASE-T (1GE)', '2.5GBASE-T (2.5GE)', '5GBASE-T (5GE)', '10GBASE-T (10GE)', '10GBASE-CX4 (10GE)', 'GBIC (1GE)', 'SFP (1GE)', 'SFP+ (10GE)', 'XFP (10GE)', 'XENPAK (10GE)', 'X2 (10GE)', 'SFP28 (25GE)', 'SFP56 (50GE)', 'QSFP+ (40GE)', 'QSFP28 (50GE)', 'CFP (100GE)', 'CFP2 (100GE)', 'CFP2 (200GE)', 'CFP4 (100GE)', 'Cisco CPAK (100GE)', 'QSFP28 (100GE)', 'QSFP56 (200GE)', 'QSFP-DD (400GE)', 'OSFP (400GE)', 'QSFP-DD (800GE)', 'OSFP (800GE)', '1000BASE-KX (1GE)', '10GBASE-KR (10GE)', '10GBASE-KX4 (10GE)', '25GBASE-KR (25GE)', '40GBASE-KR4 (40GE)', '50GBASE-KR (50GE)', '100GBASE-KP4 (100GE)', '100GBASE-KR2 (100GE)', '100GBASE-KR4 (100GE)', 'IEEE 802.11a', 'IEEE 802.11b/g', 'IEEE 802.11n', 'IEEE 802.11ac', 'IEEE 802.11ad', 'IEEE 802.11ax', 'IEEE 802.11ay', 'IEEE 802.15.1 (Bluetooth)', 'Other (Wireless)', 'GSM', 'CDMA', 'LTE', 'OC-3/STM-1', 'OC-12/STM-4', 'OC-48/STM-16', 'OC-192/STM-64', 'OC-768/STM-256', 'OC-1920/STM-640', 'OC-3840/STM-1234', 'SFP (1GFC)', 'SFP (2GFC)', 'SFP (4GFC)', 'SFP+ (8GFC)', 'SFP+ (16GFC)', 'SFP28 (32GFC)', 'QSFP+ (64GFC)', 'QSFP28 (128GFC)', 'SDR (2 Gbps)', 'DDR (4 Gbps)', 'QDR (8 Gbps)', 'FDR10 (10 Gbps)', 'FDR (13.5 Gbps)', 'EDR (25 Gbps)', 'HDR (50 Gbps)', 'NDR (100 Gbps)', 'XDR (250 Gbps)', 'T1 (1.544 Mbps)', 'E1 (2.048 Mbps)', 'T3 (45 Mbps)', 'E3 (34 Mbps)', 'xDSL', 'DOCSIS', 'GPON (2.5 Gbps / 1.25 Gps)', 'XG-PON (10 Gbps / 2.5 Gbps)', 'XGS-PON (10 Gbps)', 'NG-PON2 (TWDM-PON) (4x10 Gbps)', 'EPON (1 Gbps)', '10G-EPON (10 Gbps)', 'Cisco StackWise', 'Cisco StackWise Plus', 'Cisco FlexStack', 'Cisco FlexStack Plus', 'Cisco StackWise-80', 'Cisco StackWise-160', 'Cisco StackWise-320', 'Cisco StackWise-480', 'Cisco StackWise-1T', 'Juniper VCP', 'Extreme SummitStack', 'Extreme SummitStack-128', 'Extreme SummitStack-256', 'Extreme SummitStack-512', 'Other')")
        return value

    @field_validator('value')
    def value_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['virtual', 'bridge', 'lag', '100base-fx', '100base-lfx', '100base-tx', '100base-t1', '1000base-t', '2.5gbase-t', '5gbase-t', '10gbase-t', '10gbase-cx4', '1000base-x-gbic', '1000base-x-sfp', '10gbase-x-sfpp', '10gbase-x-xfp', '10gbase-x-xenpak', '10gbase-x-x2', '25gbase-x-sfp28', '50gbase-x-sfp56', '40gbase-x-qsfpp', '50gbase-x-sfp28', '100gbase-x-cfp', '100gbase-x-cfp2', '200gbase-x-cfp2', '100gbase-x-cfp4', '100gbase-x-cpak', '100gbase-x-qsfp28', '200gbase-x-qsfp56', '400gbase-x-qsfpdd', '400gbase-x-osfp', '800gbase-x-qsfpdd', '800gbase-x-osfp', '1000base-kx', '10gbase-kr', '10gbase-kx4', '25gbase-kr', '40gbase-kr4', '50gbase-kr', '100gbase-kp4', '100gbase-kr2', '100gbase-kr4', 'ieee802.11a', 'ieee802.11g', 'ieee802.11n', 'ieee802.11ac', 'ieee802.11ad', 'ieee802.11ax', 'ieee802.11ay', 'ieee802.15.1', 'other-wireless', 'gsm', 'cdma', 'lte', 'sonet-oc3', 'sonet-oc12', 'sonet-oc48', 'sonet-oc192', 'sonet-oc768', 'sonet-oc1920', 'sonet-oc3840', '1gfc-sfp', '2gfc-sfp', '4gfc-sfp', '8gfc-sfpp', '16gfc-sfpp', '32gfc-sfp28', '64gfc-qsfpp', '128gfc-qsfp28', 'infiniband-sdr', 'infiniband-ddr', 'infiniband-qdr', 'infiniband-fdr10', 'infiniband-fdr', 'infiniband-edr', 'infiniband-hdr', 'infiniband-ndr', 'infiniband-xdr', 't1', 'e1', 't3', 'e3', 'xdsl', 'docsis', 'gpon', 'xg-pon', 'xgs-pon', 'ng-pon2', 'epon', '10g-epon', 'cisco-stackwise', 'cisco-stackwise-plus', 'cisco-flexstack', 'cisco-flexstack-plus', 'cisco-stackwise-80', 'cisco-stackwise-160', 'cisco-stackwise-320', 'cisco-stackwise-480', 'cisco-stackwise-1t', 'juniper-vcp', 'extreme-summitstack', 'extreme-summitstack-128', 'extreme-summitstack-256', 'extreme-summitstack-512', 'other']):
            raise ValueError("must be one of enum values ('virtual', 'bridge', 'lag', '100base-fx', '100base-lfx', '100base-tx', '100base-t1', '1000base-t', '2.5gbase-t', '5gbase-t', '10gbase-t', '10gbase-cx4', '1000base-x-gbic', '1000base-x-sfp', '10gbase-x-sfpp', '10gbase-x-xfp', '10gbase-x-xenpak', '10gbase-x-x2', '25gbase-x-sfp28', '50gbase-x-sfp56', '40gbase-x-qsfpp', '50gbase-x-sfp28', '100gbase-x-cfp', '100gbase-x-cfp2', '200gbase-x-cfp2', '100gbase-x-cfp4', '100gbase-x-cpak', '100gbase-x-qsfp28', '200gbase-x-qsfp56', '400gbase-x-qsfpdd', '400gbase-x-osfp', '800gbase-x-qsfpdd', '800gbase-x-osfp', '1000base-kx', '10gbase-kr', '10gbase-kx4', '25gbase-kr', '40gbase-kr4', '50gbase-kr', '100gbase-kp4', '100gbase-kr2', '100gbase-kr4', 'ieee802.11a', 'ieee802.11g', 'ieee802.11n', 'ieee802.11ac', 'ieee802.11ad', 'ieee802.11ax', 'ieee802.11ay', 'ieee802.15.1', 'other-wireless', 'gsm', 'cdma', 'lte', 'sonet-oc3', 'sonet-oc12', 'sonet-oc48', 'sonet-oc192', 'sonet-oc768', 'sonet-oc1920', 'sonet-oc3840', '1gfc-sfp', '2gfc-sfp', '4gfc-sfp', '8gfc-sfpp', '16gfc-sfpp', '32gfc-sfp28', '64gfc-qsfpp', '128gfc-qsfp28', 'infiniband-sdr', 'infiniband-ddr', 'infiniband-qdr', 'infiniband-fdr10', 'infiniband-fdr', 'infiniband-edr', 'infiniband-hdr', 'infiniband-ndr', 'infiniband-xdr', 't1', 'e1', 't3', 'e3', 'xdsl', 'docsis', 'gpon', 'xg-pon', 'xgs-pon', 'ng-pon2', 'epon', '10g-epon', 'cisco-stackwise', 'cisco-stackwise-plus', 'cisco-flexstack', 'cisco-flexstack-plus', 'cisco-stackwise-80', 'cisco-stackwise-160', 'cisco-stackwise-320', 'cisco-stackwise-480', 'cisco-stackwise-1t', 'juniper-vcp', 'extreme-summitstack', 'extreme-summitstack-128', 'extreme-summitstack-256', 'extreme-summitstack-512', 'other')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Type3 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Type3 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "label": obj.get("label"),
            "value": obj.get("value")
        })
        return _obj



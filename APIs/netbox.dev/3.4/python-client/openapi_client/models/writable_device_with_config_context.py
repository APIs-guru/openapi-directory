# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.nested_device import NestedDevice
from openapi_client.models.nested_tag import NestedTag
from typing import Optional, Set
from typing_extensions import Self

class WritableDeviceWithConfigContext(BaseModel):
    """
    WritableDeviceWithConfigContext
    """ # noqa: E501
    airflow: Optional[StrictStr] = None
    asset_tag: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="A unique tag used to identify this device")
    cluster: Optional[StrictInt] = None
    comments: Optional[StrictStr] = None
    config_context: Optional[Dict[str, Any]] = None
    created: Optional[datetime] = None
    custom_fields: Optional[Dict[str, Any]] = None
    description: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    device_role: StrictInt
    device_type: StrictInt
    display: Optional[StrictStr] = None
    face: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    last_updated: Optional[datetime] = None
    local_context_data: Optional[Dict[str, Any]] = None
    location: Optional[StrictInt] = None
    name: Optional[Annotated[str, Field(strict=True, max_length=64)]] = None
    parent_device: Optional[NestedDevice] = None
    platform: Optional[StrictInt] = None
    position: Optional[Union[Annotated[float, Field(strict=True, ge=0.5)], Annotated[int, Field(strict=True, ge=1)]]] = None
    primary_ip: Optional[StrictStr] = None
    primary_ip4: Optional[StrictInt] = None
    primary_ip6: Optional[StrictInt] = None
    rack: Optional[StrictInt] = None
    serial: Optional[Annotated[str, Field(strict=True, max_length=50)]] = None
    site: StrictInt
    status: Optional[StrictStr] = None
    tags: Optional[List[NestedTag]] = None
    tenant: Optional[StrictInt] = None
    url: Optional[StrictStr] = None
    vc_position: Optional[Annotated[int, Field(le=255, strict=True, ge=0)]] = None
    vc_priority: Optional[Annotated[int, Field(le=255, strict=True, ge=0)]] = None
    virtual_chassis: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["airflow", "asset_tag", "cluster", "comments", "config_context", "created", "custom_fields", "description", "device_role", "device_type", "display", "face", "id", "last_updated", "local_context_data", "location", "name", "parent_device", "platform", "position", "primary_ip", "primary_ip4", "primary_ip6", "rack", "serial", "site", "status", "tags", "tenant", "url", "vc_position", "vc_priority", "virtual_chassis"]

    @field_validator('airflow')
    def airflow_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['front-to-rear', 'rear-to-front', 'left-to-right', 'right-to-left', 'side-to-rear', 'passive', 'mixed']):
            raise ValueError("must be one of enum values ('front-to-rear', 'rear-to-front', 'left-to-right', 'right-to-left', 'side-to-rear', 'passive', 'mixed')")
        return value

    @field_validator('face')
    def face_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['front', 'rear']):
            raise ValueError("must be one of enum values ('front', 'rear')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['offline', 'active', 'planned', 'staged', 'failed', 'inventory', 'decommissioning']):
            raise ValueError("must be one of enum values ('offline', 'active', 'planned', 'staged', 'failed', 'inventory', 'decommissioning')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WritableDeviceWithConfigContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "config_context",
            "created",
            "display",
            "id",
            "last_updated",
            "primary_ip",
            "url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parent_device
        if self.parent_device:
            _dict['parent_device'] = self.parent_device.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # set to None if asset_tag (nullable) is None
        # and model_fields_set contains the field
        if self.asset_tag is None and "asset_tag" in self.model_fields_set:
            _dict['asset_tag'] = None

        # set to None if cluster (nullable) is None
        # and model_fields_set contains the field
        if self.cluster is None and "cluster" in self.model_fields_set:
            _dict['cluster'] = None

        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['last_updated'] = None

        # set to None if local_context_data (nullable) is None
        # and model_fields_set contains the field
        if self.local_context_data is None and "local_context_data" in self.model_fields_set:
            _dict['local_context_data'] = None

        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict['location'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if platform (nullable) is None
        # and model_fields_set contains the field
        if self.platform is None and "platform" in self.model_fields_set:
            _dict['platform'] = None

        # set to None if position (nullable) is None
        # and model_fields_set contains the field
        if self.position is None and "position" in self.model_fields_set:
            _dict['position'] = None

        # set to None if primary_ip4 (nullable) is None
        # and model_fields_set contains the field
        if self.primary_ip4 is None and "primary_ip4" in self.model_fields_set:
            _dict['primary_ip4'] = None

        # set to None if primary_ip6 (nullable) is None
        # and model_fields_set contains the field
        if self.primary_ip6 is None and "primary_ip6" in self.model_fields_set:
            _dict['primary_ip6'] = None

        # set to None if rack (nullable) is None
        # and model_fields_set contains the field
        if self.rack is None and "rack" in self.model_fields_set:
            _dict['rack'] = None

        # set to None if tenant (nullable) is None
        # and model_fields_set contains the field
        if self.tenant is None and "tenant" in self.model_fields_set:
            _dict['tenant'] = None

        # set to None if vc_position (nullable) is None
        # and model_fields_set contains the field
        if self.vc_position is None and "vc_position" in self.model_fields_set:
            _dict['vc_position'] = None

        # set to None if vc_priority (nullable) is None
        # and model_fields_set contains the field
        if self.vc_priority is None and "vc_priority" in self.model_fields_set:
            _dict['vc_priority'] = None

        # set to None if virtual_chassis (nullable) is None
        # and model_fields_set contains the field
        if self.virtual_chassis is None and "virtual_chassis" in self.model_fields_set:
            _dict['virtual_chassis'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WritableDeviceWithConfigContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "airflow": obj.get("airflow"),
            "asset_tag": obj.get("asset_tag"),
            "cluster": obj.get("cluster"),
            "comments": obj.get("comments"),
            "config_context": obj.get("config_context"),
            "created": obj.get("created"),
            "custom_fields": obj.get("custom_fields"),
            "description": obj.get("description"),
            "device_role": obj.get("device_role"),
            "device_type": obj.get("device_type"),
            "display": obj.get("display"),
            "face": obj.get("face"),
            "id": obj.get("id"),
            "last_updated": obj.get("last_updated"),
            "local_context_data": obj.get("local_context_data"),
            "location": obj.get("location"),
            "name": obj.get("name"),
            "parent_device": NestedDevice.from_dict(obj["parent_device"]) if obj.get("parent_device") is not None else None,
            "platform": obj.get("platform"),
            "position": obj.get("position"),
            "primary_ip": obj.get("primary_ip"),
            "primary_ip4": obj.get("primary_ip4"),
            "primary_ip6": obj.get("primary_ip6"),
            "rack": obj.get("rack"),
            "serial": obj.get("serial"),
            "site": obj.get("site"),
            "status": obj.get("status"),
            "tags": [NestedTag.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "tenant": obj.get("tenant"),
            "url": obj.get("url"),
            "vc_position": obj.get("vc_position"),
            "vc_priority": obj.get("vc_priority"),
            "virtual_chassis": obj.get("virtual_chassis")
        })
        return _obj



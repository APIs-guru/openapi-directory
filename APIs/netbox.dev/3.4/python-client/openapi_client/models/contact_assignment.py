# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.nested_contact import NestedContact
from openapi_client.models.nested_contact_role import NestedContactRole
from openapi_client.models.priority import Priority
from typing import Optional, Set
from typing_extensions import Self

class ContactAssignment(BaseModel):
    """
    ContactAssignment
    """ # noqa: E501
    contact: NestedContact
    content_type: StrictStr
    created: Optional[datetime] = None
    display: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    last_updated: Optional[datetime] = None
    object: Optional[Dict[str, Any]] = None
    object_id: Annotated[int, Field(le=-9223372036854775616, strict=True, ge=0)]
    priority: Optional[Priority] = None
    role: Optional[NestedContactRole] = None
    url: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["contact", "content_type", "created", "display", "id", "last_updated", "object", "object_id", "priority", "role", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContactAssignment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "display",
            "id",
            "last_updated",
            "object",
            "url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contact
        if self.contact:
            _dict['contact'] = self.contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of priority
        if self.priority:
            _dict['priority'] = self.priority.to_dict()
        # override the default output from pydantic by calling `to_dict()` of role
        if self.role:
            _dict['role'] = self.role.to_dict()
        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['last_updated'] = None

        # set to None if role (nullable) is None
        # and model_fields_set contains the field
        if self.role is None and "role" in self.model_fields_set:
            _dict['role'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContactAssignment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contact": NestedContact.from_dict(obj["contact"]) if obj.get("contact") is not None else None,
            "content_type": obj.get("content_type"),
            "created": obj.get("created"),
            "display": obj.get("display"),
            "id": obj.get("id"),
            "last_updated": obj.get("last_updated"),
            "object": obj.get("object"),
            "object_id": obj.get("object_id"),
            "priority": Priority.from_dict(obj["priority"]) if obj.get("priority") is not None else None,
            "role": NestedContactRole.from_dict(obj["role"]) if obj.get("role") is not None else None,
            "url": obj.get("url")
        })
        return _obj



# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class WritableToken(BaseModel):
    """
    WritableToken
    """ # noqa: E501
    allowed_ips: Optional[List[Dict[str, Any]]] = None
    created: Optional[datetime] = None
    description: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    display: Optional[StrictStr] = None
    expires: Optional[datetime] = None
    id: Optional[StrictInt] = None
    key: Optional[Annotated[str, Field(min_length=40, strict=True, max_length=40)]] = None
    last_used: Optional[datetime] = None
    url: Optional[StrictStr] = None
    user: StrictInt
    write_enabled: Optional[StrictBool] = Field(default=None, description="Permit create/update/delete operations using this key")
    __properties: ClassVar[List[str]] = ["allowed_ips", "created", "description", "display", "expires", "id", "key", "last_used", "url", "user", "write_enabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WritableToken from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "display",
            "id",
            "url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if expires (nullable) is None
        # and model_fields_set contains the field
        if self.expires is None and "expires" in self.model_fields_set:
            _dict['expires'] = None

        # set to None if last_used (nullable) is None
        # and model_fields_set contains the field
        if self.last_used is None and "last_used" in self.model_fields_set:
            _dict['last_used'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WritableToken from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowed_ips": obj.get("allowed_ips"),
            "created": obj.get("created"),
            "description": obj.get("description"),
            "display": obj.get("display"),
            "expires": obj.get("expires"),
            "id": obj.get("id"),
            "key": obj.get("key"),
            "last_used": obj.get("last_used"),
            "url": obj.get("url"),
            "user": obj.get("user"),
            "write_enabled": obj.get("write_enabled")
        })
        return _obj



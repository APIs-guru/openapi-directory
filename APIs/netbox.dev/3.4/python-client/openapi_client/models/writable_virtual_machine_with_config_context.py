# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.nested_tag import NestedTag
from typing import Optional, Set
from typing_extensions import Self

class WritableVirtualMachineWithConfigContext(BaseModel):
    """
    WritableVirtualMachineWithConfigContext
    """ # noqa: E501
    cluster: Optional[StrictInt] = None
    comments: Optional[StrictStr] = None
    config_context: Optional[Dict[str, Any]] = None
    created: Optional[datetime] = None
    custom_fields: Optional[Dict[str, Any]] = None
    description: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    device: Optional[StrictInt] = None
    disk: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None
    display: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    last_updated: Optional[datetime] = None
    local_context_data: Optional[Dict[str, Any]] = None
    memory: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None
    name: Annotated[str, Field(min_length=1, strict=True, max_length=64)]
    platform: Optional[StrictInt] = None
    primary_ip: Optional[StrictStr] = None
    primary_ip4: Optional[StrictInt] = None
    primary_ip6: Optional[StrictInt] = None
    role: Optional[StrictInt] = None
    site: Optional[StrictInt] = None
    status: Optional[StrictStr] = None
    tags: Optional[List[NestedTag]] = None
    tenant: Optional[StrictInt] = None
    url: Optional[StrictStr] = None
    vcpus: Optional[Union[Annotated[float, Field(strict=True, ge=0.01)], Annotated[int, Field(strict=True, ge=1)]]] = None
    __properties: ClassVar[List[str]] = ["cluster", "comments", "config_context", "created", "custom_fields", "description", "device", "disk", "display", "id", "last_updated", "local_context_data", "memory", "name", "platform", "primary_ip", "primary_ip4", "primary_ip6", "role", "site", "status", "tags", "tenant", "url", "vcpus"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['offline', 'active', 'planned', 'staged', 'failed', 'decommissioning']):
            raise ValueError("must be one of enum values ('offline', 'active', 'planned', 'staged', 'failed', 'decommissioning')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WritableVirtualMachineWithConfigContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "config_context",
            "created",
            "display",
            "id",
            "last_updated",
            "primary_ip",
            "url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # set to None if cluster (nullable) is None
        # and model_fields_set contains the field
        if self.cluster is None and "cluster" in self.model_fields_set:
            _dict['cluster'] = None

        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if device (nullable) is None
        # and model_fields_set contains the field
        if self.device is None and "device" in self.model_fields_set:
            _dict['device'] = None

        # set to None if disk (nullable) is None
        # and model_fields_set contains the field
        if self.disk is None and "disk" in self.model_fields_set:
            _dict['disk'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['last_updated'] = None

        # set to None if local_context_data (nullable) is None
        # and model_fields_set contains the field
        if self.local_context_data is None and "local_context_data" in self.model_fields_set:
            _dict['local_context_data'] = None

        # set to None if memory (nullable) is None
        # and model_fields_set contains the field
        if self.memory is None and "memory" in self.model_fields_set:
            _dict['memory'] = None

        # set to None if platform (nullable) is None
        # and model_fields_set contains the field
        if self.platform is None and "platform" in self.model_fields_set:
            _dict['platform'] = None

        # set to None if primary_ip4 (nullable) is None
        # and model_fields_set contains the field
        if self.primary_ip4 is None and "primary_ip4" in self.model_fields_set:
            _dict['primary_ip4'] = None

        # set to None if primary_ip6 (nullable) is None
        # and model_fields_set contains the field
        if self.primary_ip6 is None and "primary_ip6" in self.model_fields_set:
            _dict['primary_ip6'] = None

        # set to None if role (nullable) is None
        # and model_fields_set contains the field
        if self.role is None and "role" in self.model_fields_set:
            _dict['role'] = None

        # set to None if site (nullable) is None
        # and model_fields_set contains the field
        if self.site is None and "site" in self.model_fields_set:
            _dict['site'] = None

        # set to None if tenant (nullable) is None
        # and model_fields_set contains the field
        if self.tenant is None and "tenant" in self.model_fields_set:
            _dict['tenant'] = None

        # set to None if vcpus (nullable) is None
        # and model_fields_set contains the field
        if self.vcpus is None and "vcpus" in self.model_fields_set:
            _dict['vcpus'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WritableVirtualMachineWithConfigContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cluster": obj.get("cluster"),
            "comments": obj.get("comments"),
            "config_context": obj.get("config_context"),
            "created": obj.get("created"),
            "custom_fields": obj.get("custom_fields"),
            "description": obj.get("description"),
            "device": obj.get("device"),
            "disk": obj.get("disk"),
            "display": obj.get("display"),
            "id": obj.get("id"),
            "last_updated": obj.get("last_updated"),
            "local_context_data": obj.get("local_context_data"),
            "memory": obj.get("memory"),
            "name": obj.get("name"),
            "platform": obj.get("platform"),
            "primary_ip": obj.get("primary_ip"),
            "primary_ip4": obj.get("primary_ip4"),
            "primary_ip6": obj.get("primary_ip6"),
            "role": obj.get("role"),
            "site": obj.get("site"),
            "status": obj.get("status"),
            "tags": [NestedTag.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "tenant": obj.get("tenant"),
            "url": obj.get("url"),
            "vcpus": obj.get("vcpus")
        })
        return _obj



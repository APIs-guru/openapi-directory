# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class RfChannel(BaseModel):
    """
    RfChannel
    """ # noqa: E501
    label: StrictStr
    value: StrictStr
    __properties: ClassVar[List[str]] = ["label", "value"]

    @field_validator('label')
    def label_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['1 (2412 MHz)', '2 (2417 MHz)', '3 (2422 MHz)', '4 (2427 MHz)', '5 (2432 MHz)', '6 (2437 MHz)', '7 (2442 MHz)', '8 (2447 MHz)', '9 (2452 MHz)', '10 (2457 MHz)', '11 (2462 MHz)', '12 (2467 MHz)', '13 (2472 MHz)', '32 (5160/20 MHz)', '34 (5170/40 MHz)', '36 (5180/20 MHz)', '38 (5190/40 MHz)', '40 (5200/20 MHz)', '42 (5210/80 MHz)', '44 (5220/20 MHz)', '46 (5230/40 MHz)', '48 (5240/20 MHz)', '50 (5250/160 MHz)', '52 (5260/20 MHz)', '54 (5270/40 MHz)', '56 (5280/20 MHz)', '58 (5290/80 MHz)', '60 (5300/20 MHz)', '62 (5310/40 MHz)', '64 (5320/20 MHz)', '100 (5500/20 MHz)', '102 (5510/40 MHz)', '104 (5520/20 MHz)', '106 (5530/80 MHz)', '108 (5540/20 MHz)', '110 (5550/40 MHz)', '112 (5560/20 MHz)', '114 (5570/160 MHz)', '116 (5580/20 MHz)', '118 (5590/40 MHz)', '120 (5600/20 MHz)', '122 (5610/80 MHz)', '124 (5620/20 MHz)', '126 (5630/40 MHz)', '128 (5640/20 MHz)', '132 (5660/20 MHz)', '134 (5670/40 MHz)', '136 (5680/20 MHz)', '138 (5690/80 MHz)', '140 (5700/20 MHz)', '142 (5710/40 MHz)', '144 (5720/20 MHz)', '149 (5745/20 MHz)', '151 (5755/40 MHz)', '153 (5765/20 MHz)', '155 (5775/80 MHz)', '157 (5785/20 MHz)', '159 (5795/40 MHz)', '161 (5805/20 MHz)', '163 (5815/160 MHz)', '165 (5825/20 MHz)', '167 (5835/40 MHz)', '169 (5845/20 MHz)', '171 (5855/80 MHz)', '173 (5865/20 MHz)', '175 (5875/40 MHz)', '177 (5885/20 MHz)', '1 (5955/20 MHz)', '3 (5965/40 MHz)', '5 (5975/20 MHz)', '7 (5985/80 MHz)', '9 (5995/20 MHz)', '11 (6005/40 MHz)', '13 (6015/20 MHz)', '15 (6025/160 MHz)', '17 (6035/20 MHz)', '19 (6045/40 MHz)', '21 (6055/20 MHz)', '23 (6065/80 MHz)', '25 (6075/20 MHz)', '27 (6085/40 MHz)', '29 (6095/20 MHz)', '31 (6105/320 MHz)', '33 (6115/20 MHz)', '35 (6125/40 MHz)', '37 (6135/20 MHz)', '39 (6145/80 MHz)', '41 (6155/20 MHz)', '43 (6165/40 MHz)', '45 (6175/20 MHz)', '47 (6185/160 MHz)', '49 (6195/20 MHz)', '51 (6205/40 MHz)', '53 (6215/20 MHz)', '55 (6225/80 MHz)', '57 (6235/20 MHz)', '59 (6245/40 MHz)', '61 (6255/20 MHz)', '65 (6275/20 MHz)', '67 (6285/40 MHz)', '69 (6295/20 MHz)', '71 (6305/80 MHz)', '73 (6315/20 MHz)', '75 (6325/40 MHz)', '77 (6335/20 MHz)', '79 (6345/160 MHz)', '81 (6355/20 MHz)', '83 (6365/40 MHz)', '85 (6375/20 MHz)', '87 (6385/80 MHz)', '89 (6395/20 MHz)', '91 (6405/40 MHz)', '93 (6415/20 MHz)', '95 (6425/320 MHz)', '97 (6435/20 MHz)', '99 (6445/40 MHz)', '101 (6455/20 MHz)', '103 (6465/80 MHz)', '105 (6475/20 MHz)', '107 (6485/40 MHz)', '109 (6495/20 MHz)', '111 (6505/160 MHz)', '113 (6515/20 MHz)', '115 (6525/40 MHz)', '117 (6535/20 MHz)', '119 (6545/80 MHz)', '121 (6555/20 MHz)', '123 (6565/40 MHz)', '125 (6575/20 MHz)', '129 (6595/20 MHz)', '131 (6605/40 MHz)', '133 (6615/20 MHz)', '135 (6625/80 MHz)', '137 (6635/20 MHz)', '139 (6645/40 MHz)', '141 (6655/20 MHz)', '143 (6665/160 MHz)', '145 (6675/20 MHz)', '147 (6685/40 MHz)', '149 (6695/20 MHz)', '151 (6705/80 MHz)', '153 (6715/20 MHz)', '155 (6725/40 MHz)', '157 (6735/20 MHz)', '159 (6745/320 MHz)', '161 (6755/20 MHz)', '163 (6765/40 MHz)', '165 (6775/20 MHz)', '167 (6785/80 MHz)', '169 (6795/20 MHz)', '171 (6805/40 MHz)', '173 (6815/20 MHz)', '175 (6825/160 MHz)', '177 (6835/20 MHz)', '179 (6845/40 MHz)', '181 (6855/20 MHz)', '183 (6865/80 MHz)', '185 (6875/20 MHz)', '187 (6885/40 MHz)', '189 (6895/20 MHz)', '193 (6915/20 MHz)', '195 (6925/40 MHz)', '197 (6935/20 MHz)', '199 (6945/80 MHz)', '201 (6955/20 MHz)', '203 (6965/40 MHz)', '205 (6975/20 MHz)', '207 (6985/160 MHz)', '209 (6995/20 MHz)', '211 (7005/40 MHz)', '213 (7015/20 MHz)', '215 (7025/80 MHz)', '217 (7035/20 MHz)', '219 (7045/40 MHz)', '221 (7055/20 MHz)', '225 (7075/20 MHz)', '227 (7085/40 MHz)', '229 (7095/20 MHz)', '233 (7115/20 MHz)', '1 (58.32/2.16 GHz)', '2 (60.48/2.16 GHz)', '3 (62.64/2.16 GHz)', '4 (64.80/2.16 GHz)', '5 (66.96/2.16 GHz)', '6 (69.12/2.16 GHz)', '9 (59.40/4.32 GHz)', '10 (61.56/4.32 GHz)', '11 (63.72/4.32 GHz)', '12 (65.88/4.32 GHz)', '13 (68.04/4.32 GHz)', '17 (60.48/6.48 GHz)', '18 (62.64/6.48 GHz)', '19 (64.80/6.48 GHz)', '20 (66.96/6.48 GHz)', '25 (61.56/8.64 GHz)', '26 (63.72/8.64 GHz)', '27 (65.88/8.64 GHz)']):
            raise ValueError("must be one of enum values ('1 (2412 MHz)', '2 (2417 MHz)', '3 (2422 MHz)', '4 (2427 MHz)', '5 (2432 MHz)', '6 (2437 MHz)', '7 (2442 MHz)', '8 (2447 MHz)', '9 (2452 MHz)', '10 (2457 MHz)', '11 (2462 MHz)', '12 (2467 MHz)', '13 (2472 MHz)', '32 (5160/20 MHz)', '34 (5170/40 MHz)', '36 (5180/20 MHz)', '38 (5190/40 MHz)', '40 (5200/20 MHz)', '42 (5210/80 MHz)', '44 (5220/20 MHz)', '46 (5230/40 MHz)', '48 (5240/20 MHz)', '50 (5250/160 MHz)', '52 (5260/20 MHz)', '54 (5270/40 MHz)', '56 (5280/20 MHz)', '58 (5290/80 MHz)', '60 (5300/20 MHz)', '62 (5310/40 MHz)', '64 (5320/20 MHz)', '100 (5500/20 MHz)', '102 (5510/40 MHz)', '104 (5520/20 MHz)', '106 (5530/80 MHz)', '108 (5540/20 MHz)', '110 (5550/40 MHz)', '112 (5560/20 MHz)', '114 (5570/160 MHz)', '116 (5580/20 MHz)', '118 (5590/40 MHz)', '120 (5600/20 MHz)', '122 (5610/80 MHz)', '124 (5620/20 MHz)', '126 (5630/40 MHz)', '128 (5640/20 MHz)', '132 (5660/20 MHz)', '134 (5670/40 MHz)', '136 (5680/20 MHz)', '138 (5690/80 MHz)', '140 (5700/20 MHz)', '142 (5710/40 MHz)', '144 (5720/20 MHz)', '149 (5745/20 MHz)', '151 (5755/40 MHz)', '153 (5765/20 MHz)', '155 (5775/80 MHz)', '157 (5785/20 MHz)', '159 (5795/40 MHz)', '161 (5805/20 MHz)', '163 (5815/160 MHz)', '165 (5825/20 MHz)', '167 (5835/40 MHz)', '169 (5845/20 MHz)', '171 (5855/80 MHz)', '173 (5865/20 MHz)', '175 (5875/40 MHz)', '177 (5885/20 MHz)', '1 (5955/20 MHz)', '3 (5965/40 MHz)', '5 (5975/20 MHz)', '7 (5985/80 MHz)', '9 (5995/20 MHz)', '11 (6005/40 MHz)', '13 (6015/20 MHz)', '15 (6025/160 MHz)', '17 (6035/20 MHz)', '19 (6045/40 MHz)', '21 (6055/20 MHz)', '23 (6065/80 MHz)', '25 (6075/20 MHz)', '27 (6085/40 MHz)', '29 (6095/20 MHz)', '31 (6105/320 MHz)', '33 (6115/20 MHz)', '35 (6125/40 MHz)', '37 (6135/20 MHz)', '39 (6145/80 MHz)', '41 (6155/20 MHz)', '43 (6165/40 MHz)', '45 (6175/20 MHz)', '47 (6185/160 MHz)', '49 (6195/20 MHz)', '51 (6205/40 MHz)', '53 (6215/20 MHz)', '55 (6225/80 MHz)', '57 (6235/20 MHz)', '59 (6245/40 MHz)', '61 (6255/20 MHz)', '65 (6275/20 MHz)', '67 (6285/40 MHz)', '69 (6295/20 MHz)', '71 (6305/80 MHz)', '73 (6315/20 MHz)', '75 (6325/40 MHz)', '77 (6335/20 MHz)', '79 (6345/160 MHz)', '81 (6355/20 MHz)', '83 (6365/40 MHz)', '85 (6375/20 MHz)', '87 (6385/80 MHz)', '89 (6395/20 MHz)', '91 (6405/40 MHz)', '93 (6415/20 MHz)', '95 (6425/320 MHz)', '97 (6435/20 MHz)', '99 (6445/40 MHz)', '101 (6455/20 MHz)', '103 (6465/80 MHz)', '105 (6475/20 MHz)', '107 (6485/40 MHz)', '109 (6495/20 MHz)', '111 (6505/160 MHz)', '113 (6515/20 MHz)', '115 (6525/40 MHz)', '117 (6535/20 MHz)', '119 (6545/80 MHz)', '121 (6555/20 MHz)', '123 (6565/40 MHz)', '125 (6575/20 MHz)', '129 (6595/20 MHz)', '131 (6605/40 MHz)', '133 (6615/20 MHz)', '135 (6625/80 MHz)', '137 (6635/20 MHz)', '139 (6645/40 MHz)', '141 (6655/20 MHz)', '143 (6665/160 MHz)', '145 (6675/20 MHz)', '147 (6685/40 MHz)', '149 (6695/20 MHz)', '151 (6705/80 MHz)', '153 (6715/20 MHz)', '155 (6725/40 MHz)', '157 (6735/20 MHz)', '159 (6745/320 MHz)', '161 (6755/20 MHz)', '163 (6765/40 MHz)', '165 (6775/20 MHz)', '167 (6785/80 MHz)', '169 (6795/20 MHz)', '171 (6805/40 MHz)', '173 (6815/20 MHz)', '175 (6825/160 MHz)', '177 (6835/20 MHz)', '179 (6845/40 MHz)', '181 (6855/20 MHz)', '183 (6865/80 MHz)', '185 (6875/20 MHz)', '187 (6885/40 MHz)', '189 (6895/20 MHz)', '193 (6915/20 MHz)', '195 (6925/40 MHz)', '197 (6935/20 MHz)', '199 (6945/80 MHz)', '201 (6955/20 MHz)', '203 (6965/40 MHz)', '205 (6975/20 MHz)', '207 (6985/160 MHz)', '209 (6995/20 MHz)', '211 (7005/40 MHz)', '213 (7015/20 MHz)', '215 (7025/80 MHz)', '217 (7035/20 MHz)', '219 (7045/40 MHz)', '221 (7055/20 MHz)', '225 (7075/20 MHz)', '227 (7085/40 MHz)', '229 (7095/20 MHz)', '233 (7115/20 MHz)', '1 (58.32/2.16 GHz)', '2 (60.48/2.16 GHz)', '3 (62.64/2.16 GHz)', '4 (64.80/2.16 GHz)', '5 (66.96/2.16 GHz)', '6 (69.12/2.16 GHz)', '9 (59.40/4.32 GHz)', '10 (61.56/4.32 GHz)', '11 (63.72/4.32 GHz)', '12 (65.88/4.32 GHz)', '13 (68.04/4.32 GHz)', '17 (60.48/6.48 GHz)', '18 (62.64/6.48 GHz)', '19 (64.80/6.48 GHz)', '20 (66.96/6.48 GHz)', '25 (61.56/8.64 GHz)', '26 (63.72/8.64 GHz)', '27 (65.88/8.64 GHz)')")
        return value

    @field_validator('value')
    def value_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['2.4g-1-2412-22', '2.4g-2-2417-22', '2.4g-3-2422-22', '2.4g-4-2427-22', '2.4g-5-2432-22', '2.4g-6-2437-22', '2.4g-7-2442-22', '2.4g-8-2447-22', '2.4g-9-2452-22', '2.4g-10-2457-22', '2.4g-11-2462-22', '2.4g-12-2467-22', '2.4g-13-2472-22', '5g-32-5160-20', '5g-34-5170-40', '5g-36-5180-20', '5g-38-5190-40', '5g-40-5200-20', '5g-42-5210-80', '5g-44-5220-20', '5g-46-5230-40', '5g-48-5240-20', '5g-50-5250-160', '5g-52-5260-20', '5g-54-5270-40', '5g-56-5280-20', '5g-58-5290-80', '5g-60-5300-20', '5g-62-5310-40', '5g-64-5320-20', '5g-100-5500-20', '5g-102-5510-40', '5g-104-5520-20', '5g-106-5530-80', '5g-108-5540-20', '5g-110-5550-40', '5g-112-5560-20', '5g-114-5570-160', '5g-116-5580-20', '5g-118-5590-40', '5g-120-5600-20', '5g-122-5610-80', '5g-124-5620-20', '5g-126-5630-40', '5g-128-5640-20', '5g-132-5660-20', '5g-134-5670-40', '5g-136-5680-20', '5g-138-5690-80', '5g-140-5700-20', '5g-142-5710-40', '5g-144-5720-20', '5g-149-5745-20', '5g-151-5755-40', '5g-153-5765-20', '5g-155-5775-80', '5g-157-5785-20', '5g-159-5795-40', '5g-161-5805-20', '5g-163-5815-160', '5g-165-5825-20', '5g-167-5835-40', '5g-169-5845-20', '5g-171-5855-80', '5g-173-5865-20', '5g-175-5875-40', '5g-177-5885-20', '6g-1-5955-20', '6g-3-5965-40', '6g-5-5975-20', '6g-7-5985-80', '6g-9-5995-20', '6g-11-6005-40', '6g-13-6015-20', '6g-15-6025-160', '6g-17-6035-20', '6g-19-6045-40', '6g-21-6055-20', '6g-23-6065-80', '6g-25-6075-20', '6g-27-6085-40', '6g-29-6095-20', '6g-31-6105-320', '6g-33-6115-20', '6g-35-6125-40', '6g-37-6135-20', '6g-39-6145-80', '6g-41-6155-20', '6g-43-6165-40', '6g-45-6175-20', '6g-47-6185-160', '6g-49-6195-20', '6g-51-6205-40', '6g-53-6215-20', '6g-55-6225-80', '6g-57-6235-20', '6g-59-6245-40', '6g-61-6255-20', '6g-65-6275-20', '6g-67-6285-40', '6g-69-6295-20', '6g-71-6305-80', '6g-73-6315-20', '6g-75-6325-40', '6g-77-6335-20', '6g-79-6345-160', '6g-81-6355-20', '6g-83-6365-40', '6g-85-6375-20', '6g-87-6385-80', '6g-89-6395-20', '6g-91-6405-40', '6g-93-6415-20', '6g-95-6425-320', '6g-97-6435-20', '6g-99-6445-40', '6g-101-6455-20', '6g-103-6465-80', '6g-105-6475-20', '6g-107-6485-40', '6g-109-6495-20', '6g-111-6505-160', '6g-113-6515-20', '6g-115-6525-40', '6g-117-6535-20', '6g-119-6545-80', '6g-121-6555-20', '6g-123-6565-40', '6g-125-6575-20', '6g-129-6595-20', '6g-131-6605-40', '6g-133-6615-20', '6g-135-6625-80', '6g-137-6635-20', '6g-139-6645-40', '6g-141-6655-20', '6g-143-6665-160', '6g-145-6675-20', '6g-147-6685-40', '6g-149-6695-20', '6g-151-6705-80', '6g-153-6715-20', '6g-155-6725-40', '6g-157-6735-20', '6g-159-6745-320', '6g-161-6755-20', '6g-163-6765-40', '6g-165-6775-20', '6g-167-6785-80', '6g-169-6795-20', '6g-171-6805-40', '6g-173-6815-20', '6g-175-6825-160', '6g-177-6835-20', '6g-179-6845-40', '6g-181-6855-20', '6g-183-6865-80', '6g-185-6875-20', '6g-187-6885-40', '6g-189-6895-20', '6g-193-6915-20', '6g-195-6925-40', '6g-197-6935-20', '6g-199-6945-80', '6g-201-6955-20', '6g-203-6965-40', '6g-205-6975-20', '6g-207-6985-160', '6g-209-6995-20', '6g-211-7005-40', '6g-213-7015-20', '6g-215-7025-80', '6g-217-7035-20', '6g-219-7045-40', '6g-221-7055-20', '6g-225-7075-20', '6g-227-7085-40', '6g-229-7095-20', '6g-233-7115-20', '60g-1-58320-2160', '60g-2-60480-2160', '60g-3-62640-2160', '60g-4-64800-2160', '60g-5-66960-2160', '60g-6-69120-2160', '60g-9-59400-4320', '60g-10-61560-4320', '60g-11-63720-4320', '60g-12-65880-4320', '60g-13-68040-4320', '60g-17-60480-6480', '60g-18-62640-6480', '60g-19-64800-6480', '60g-20-66960-6480', '60g-25-61560-6480', '60g-26-63720-6480', '60g-27-65880-6480']):
            raise ValueError("must be one of enum values ('2.4g-1-2412-22', '2.4g-2-2417-22', '2.4g-3-2422-22', '2.4g-4-2427-22', '2.4g-5-2432-22', '2.4g-6-2437-22', '2.4g-7-2442-22', '2.4g-8-2447-22', '2.4g-9-2452-22', '2.4g-10-2457-22', '2.4g-11-2462-22', '2.4g-12-2467-22', '2.4g-13-2472-22', '5g-32-5160-20', '5g-34-5170-40', '5g-36-5180-20', '5g-38-5190-40', '5g-40-5200-20', '5g-42-5210-80', '5g-44-5220-20', '5g-46-5230-40', '5g-48-5240-20', '5g-50-5250-160', '5g-52-5260-20', '5g-54-5270-40', '5g-56-5280-20', '5g-58-5290-80', '5g-60-5300-20', '5g-62-5310-40', '5g-64-5320-20', '5g-100-5500-20', '5g-102-5510-40', '5g-104-5520-20', '5g-106-5530-80', '5g-108-5540-20', '5g-110-5550-40', '5g-112-5560-20', '5g-114-5570-160', '5g-116-5580-20', '5g-118-5590-40', '5g-120-5600-20', '5g-122-5610-80', '5g-124-5620-20', '5g-126-5630-40', '5g-128-5640-20', '5g-132-5660-20', '5g-134-5670-40', '5g-136-5680-20', '5g-138-5690-80', '5g-140-5700-20', '5g-142-5710-40', '5g-144-5720-20', '5g-149-5745-20', '5g-151-5755-40', '5g-153-5765-20', '5g-155-5775-80', '5g-157-5785-20', '5g-159-5795-40', '5g-161-5805-20', '5g-163-5815-160', '5g-165-5825-20', '5g-167-5835-40', '5g-169-5845-20', '5g-171-5855-80', '5g-173-5865-20', '5g-175-5875-40', '5g-177-5885-20', '6g-1-5955-20', '6g-3-5965-40', '6g-5-5975-20', '6g-7-5985-80', '6g-9-5995-20', '6g-11-6005-40', '6g-13-6015-20', '6g-15-6025-160', '6g-17-6035-20', '6g-19-6045-40', '6g-21-6055-20', '6g-23-6065-80', '6g-25-6075-20', '6g-27-6085-40', '6g-29-6095-20', '6g-31-6105-320', '6g-33-6115-20', '6g-35-6125-40', '6g-37-6135-20', '6g-39-6145-80', '6g-41-6155-20', '6g-43-6165-40', '6g-45-6175-20', '6g-47-6185-160', '6g-49-6195-20', '6g-51-6205-40', '6g-53-6215-20', '6g-55-6225-80', '6g-57-6235-20', '6g-59-6245-40', '6g-61-6255-20', '6g-65-6275-20', '6g-67-6285-40', '6g-69-6295-20', '6g-71-6305-80', '6g-73-6315-20', '6g-75-6325-40', '6g-77-6335-20', '6g-79-6345-160', '6g-81-6355-20', '6g-83-6365-40', '6g-85-6375-20', '6g-87-6385-80', '6g-89-6395-20', '6g-91-6405-40', '6g-93-6415-20', '6g-95-6425-320', '6g-97-6435-20', '6g-99-6445-40', '6g-101-6455-20', '6g-103-6465-80', '6g-105-6475-20', '6g-107-6485-40', '6g-109-6495-20', '6g-111-6505-160', '6g-113-6515-20', '6g-115-6525-40', '6g-117-6535-20', '6g-119-6545-80', '6g-121-6555-20', '6g-123-6565-40', '6g-125-6575-20', '6g-129-6595-20', '6g-131-6605-40', '6g-133-6615-20', '6g-135-6625-80', '6g-137-6635-20', '6g-139-6645-40', '6g-141-6655-20', '6g-143-6665-160', '6g-145-6675-20', '6g-147-6685-40', '6g-149-6695-20', '6g-151-6705-80', '6g-153-6715-20', '6g-155-6725-40', '6g-157-6735-20', '6g-159-6745-320', '6g-161-6755-20', '6g-163-6765-40', '6g-165-6775-20', '6g-167-6785-80', '6g-169-6795-20', '6g-171-6805-40', '6g-173-6815-20', '6g-175-6825-160', '6g-177-6835-20', '6g-179-6845-40', '6g-181-6855-20', '6g-183-6865-80', '6g-185-6875-20', '6g-187-6885-40', '6g-189-6895-20', '6g-193-6915-20', '6g-195-6925-40', '6g-197-6935-20', '6g-199-6945-80', '6g-201-6955-20', '6g-203-6965-40', '6g-205-6975-20', '6g-207-6985-160', '6g-209-6995-20', '6g-211-7005-40', '6g-213-7015-20', '6g-215-7025-80', '6g-217-7035-20', '6g-219-7045-40', '6g-221-7055-20', '6g-225-7075-20', '6g-227-7085-40', '6g-229-7095-20', '6g-233-7115-20', '60g-1-58320-2160', '60g-2-60480-2160', '60g-3-62640-2160', '60g-4-64800-2160', '60g-5-66960-2160', '60g-6-69120-2160', '60g-9-59400-4320', '60g-10-61560-4320', '60g-11-63720-4320', '60g-12-65880-4320', '60g-13-68040-4320', '60g-17-60480-6480', '60g-18-62640-6480', '60g-19-64800-6480', '60g-20-66960-6480', '60g-25-61560-6480', '60g-26-63720-6480', '60g-27-65880-6480')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RfChannel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RfChannel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "label": obj.get("label"),
            "value": obj.get("value")
        })
        return _obj



# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.airflow import Airflow
from openapi_client.models.nested_manufacturer import NestedManufacturer
from openapi_client.models.nested_tag import NestedTag
from openapi_client.models.subdevice_role import SubdeviceRole
from openapi_client.models.weight_unit import WeightUnit
from typing import Optional, Set
from typing_extensions import Self

class DeviceType(BaseModel):
    """
    DeviceType
    """ # noqa: E501
    airflow: Optional[Airflow] = None
    comments: Optional[StrictStr] = None
    created: Optional[datetime] = None
    custom_fields: Optional[Dict[str, Any]] = None
    description: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    device_count: Optional[StrictInt] = None
    display: Optional[StrictStr] = None
    front_image: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    is_full_depth: Optional[StrictBool] = Field(default=None, description="Device consumes both front and rear rack faces")
    last_updated: Optional[datetime] = None
    manufacturer: NestedManufacturer
    model: Annotated[str, Field(min_length=1, strict=True, max_length=100)]
    part_number: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Discrete part number (optional)")
    rear_image: Optional[StrictStr] = None
    slug: Annotated[str, Field(min_length=1, strict=True, max_length=100)]
    subdevice_role: Optional[SubdeviceRole] = None
    tags: Optional[List[NestedTag]] = None
    u_height: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = 1
    url: Optional[StrictStr] = None
    weight: Optional[Union[StrictFloat, StrictInt]] = None
    weight_unit: Optional[WeightUnit] = None
    __properties: ClassVar[List[str]] = ["airflow", "comments", "created", "custom_fields", "description", "device_count", "display", "front_image", "id", "is_full_depth", "last_updated", "manufacturer", "model", "part_number", "rear_image", "slug", "subdevice_role", "tags", "u_height", "url", "weight", "weight_unit"]

    @field_validator('slug')
    def slug_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[-a-zA-Z0-9_]+$", value):
            raise ValueError(r"must validate the regular expression /^[-a-zA-Z0-9_]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "device_count",
            "display",
            "front_image",
            "id",
            "last_updated",
            "rear_image",
            "url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of airflow
        if self.airflow:
            _dict['airflow'] = self.airflow.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manufacturer
        if self.manufacturer:
            _dict['manufacturer'] = self.manufacturer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subdevice_role
        if self.subdevice_role:
            _dict['subdevice_role'] = self.subdevice_role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of weight_unit
        if self.weight_unit:
            _dict['weight_unit'] = self.weight_unit.to_dict()
        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['last_updated'] = None

        # set to None if weight (nullable) is None
        # and model_fields_set contains the field
        if self.weight is None and "weight" in self.model_fields_set:
            _dict['weight'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "airflow": Airflow.from_dict(obj["airflow"]) if obj.get("airflow") is not None else None,
            "comments": obj.get("comments"),
            "created": obj.get("created"),
            "custom_fields": obj.get("custom_fields"),
            "description": obj.get("description"),
            "device_count": obj.get("device_count"),
            "display": obj.get("display"),
            "front_image": obj.get("front_image"),
            "id": obj.get("id"),
            "is_full_depth": obj.get("is_full_depth"),
            "last_updated": obj.get("last_updated"),
            "manufacturer": NestedManufacturer.from_dict(obj["manufacturer"]) if obj.get("manufacturer") is not None else None,
            "model": obj.get("model"),
            "part_number": obj.get("part_number"),
            "rear_image": obj.get("rear_image"),
            "slug": obj.get("slug"),
            "subdevice_role": SubdeviceRole.from_dict(obj["subdevice_role"]) if obj.get("subdevice_role") is not None else None,
            "tags": [NestedTag.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "u_height": obj.get("u_height") if obj.get("u_height") is not None else 1,
            "url": obj.get("url"),
            "weight": obj.get("weight"),
            "weight_unit": WeightUnit.from_dict(obj["weight_unit"]) if obj.get("weight_unit") is not None else None
        })
        return _obj



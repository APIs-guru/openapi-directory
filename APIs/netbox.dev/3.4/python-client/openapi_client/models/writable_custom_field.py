# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class WritableCustomField(BaseModel):
    """
    WritableCustomField
    """ # noqa: E501
    choices: Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=100)]]] = Field(default=None, description="Comma-separated list of available choices (for selection fields)")
    content_types: List[StrictStr]
    created: Optional[datetime] = None
    data_type: Optional[StrictStr] = None
    default: Optional[Dict[str, Any]] = Field(default=None, description="Default value for the field (must be a JSON value). Encapsulate strings with double quotes (e.g. \"Foo\").")
    description: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    display: Optional[StrictStr] = None
    filter_logic: Optional[StrictStr] = Field(default=None, description="Loose matches any instance of a given string; exact matches the entire field.")
    group_name: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Custom fields within the same group will be displayed together")
    id: Optional[StrictInt] = None
    label: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Name of the field as displayed to users (if not provided, the field's name will be used)")
    last_updated: Optional[datetime] = None
    name: Annotated[str, Field(min_length=1, strict=True, max_length=50)] = Field(description="Internal field name")
    object_type: Optional[StrictStr] = None
    required: Optional[StrictBool] = Field(default=None, description="If true, this field is required when creating new objects or editing an existing object.")
    search_weight: Optional[Annotated[int, Field(le=32767, strict=True, ge=0)]] = Field(default=None, description="Weighting for search. Lower values are considered more important. Fields with a search weight of zero will be ignored.")
    type: Optional[StrictStr] = Field(default=None, description="The type of data this custom field holds")
    ui_visibility: Optional[StrictStr] = Field(default=None, description="Specifies the visibility of custom field in the UI")
    url: Optional[StrictStr] = None
    validation_maximum: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = Field(default=None, description="Maximum allowed value (for numeric fields)")
    validation_minimum: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = Field(default=None, description="Minimum allowed value (for numeric fields)")
    validation_regex: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="Regular expression to enforce on text field values. Use ^ and $ to force matching of entire string. For example, <code>^[A-Z]{3}$</code> will limit values to exactly three uppercase letters.")
    weight: Optional[Annotated[int, Field(le=32767, strict=True, ge=0)]] = Field(default=None, description="Fields with higher weights appear lower in a form.")
    __properties: ClassVar[List[str]] = ["choices", "content_types", "created", "data_type", "default", "description", "display", "filter_logic", "group_name", "id", "label", "last_updated", "name", "object_type", "required", "search_weight", "type", "ui_visibility", "url", "validation_maximum", "validation_minimum", "validation_regex", "weight"]

    @field_validator('filter_logic')
    def filter_logic_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['disabled', 'loose', 'exact']):
            raise ValueError("must be one of enum values ('disabled', 'loose', 'exact')")
        return value

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z0-9_]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-z0-9_]+$/")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['text', 'longtext', 'integer', 'decimal', 'boolean', 'date', 'url', 'json', 'select', 'multiselect', 'object', 'multiobject']):
            raise ValueError("must be one of enum values ('text', 'longtext', 'integer', 'decimal', 'boolean', 'date', 'url', 'json', 'select', 'multiselect', 'object', 'multiobject')")
        return value

    @field_validator('ui_visibility')
    def ui_visibility_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['read-write', 'read-only', 'hidden']):
            raise ValueError("must be one of enum values ('read-write', 'read-only', 'hidden')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WritableCustomField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "data_type",
            "display",
            "id",
            "last_updated",
            "url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if choices (nullable) is None
        # and model_fields_set contains the field
        if self.choices is None and "choices" in self.model_fields_set:
            _dict['choices'] = None

        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if default (nullable) is None
        # and model_fields_set contains the field
        if self.default is None and "default" in self.model_fields_set:
            _dict['default'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['last_updated'] = None

        # set to None if validation_maximum (nullable) is None
        # and model_fields_set contains the field
        if self.validation_maximum is None and "validation_maximum" in self.model_fields_set:
            _dict['validation_maximum'] = None

        # set to None if validation_minimum (nullable) is None
        # and model_fields_set contains the field
        if self.validation_minimum is None and "validation_minimum" in self.model_fields_set:
            _dict['validation_minimum'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WritableCustomField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "choices": obj.get("choices"),
            "content_types": obj.get("content_types"),
            "created": obj.get("created"),
            "data_type": obj.get("data_type"),
            "default": obj.get("default"),
            "description": obj.get("description"),
            "display": obj.get("display"),
            "filter_logic": obj.get("filter_logic"),
            "group_name": obj.get("group_name"),
            "id": obj.get("id"),
            "label": obj.get("label"),
            "last_updated": obj.get("last_updated"),
            "name": obj.get("name"),
            "object_type": obj.get("object_type"),
            "required": obj.get("required"),
            "search_weight": obj.get("search_weight"),
            "type": obj.get("type"),
            "ui_visibility": obj.get("ui_visibility"),
            "url": obj.get("url"),
            "validation_maximum": obj.get("validation_maximum"),
            "validation_minimum": obj.get("validation_minimum"),
            "validation_regex": obj.get("validation_regex"),
            "weight": obj.get("weight")
        })
        return _obj



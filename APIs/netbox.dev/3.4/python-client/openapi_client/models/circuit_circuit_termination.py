# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.nested_provider_network import NestedProviderNetwork
from openapi_client.models.nested_site import NestedSite
from typing import Optional, Set
from typing_extensions import Self

class CircuitCircuitTermination(BaseModel):
    """
    CircuitCircuitTermination
    """ # noqa: E501
    description: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    display: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    port_speed: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None
    provider_network: Optional[NestedProviderNetwork]
    site: Optional[NestedSite]
    upstream_speed: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="Upstream speed, if different from port speed")
    url: Optional[StrictStr] = None
    xconnect_id: Optional[Annotated[str, Field(strict=True, max_length=50)]] = None
    __properties: ClassVar[List[str]] = ["description", "display", "id", "port_speed", "provider_network", "site", "upstream_speed", "url", "xconnect_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CircuitCircuitTermination from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "display",
            "id",
            "url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of provider_network
        if self.provider_network:
            _dict['provider_network'] = self.provider_network.to_dict()
        # override the default output from pydantic by calling `to_dict()` of site
        if self.site:
            _dict['site'] = self.site.to_dict()
        # set to None if port_speed (nullable) is None
        # and model_fields_set contains the field
        if self.port_speed is None and "port_speed" in self.model_fields_set:
            _dict['port_speed'] = None

        # set to None if provider_network (nullable) is None
        # and model_fields_set contains the field
        if self.provider_network is None and "provider_network" in self.model_fields_set:
            _dict['provider_network'] = None

        # set to None if site (nullable) is None
        # and model_fields_set contains the field
        if self.site is None and "site" in self.model_fields_set:
            _dict['site'] = None

        # set to None if upstream_speed (nullable) is None
        # and model_fields_set contains the field
        if self.upstream_speed is None and "upstream_speed" in self.model_fields_set:
            _dict['upstream_speed'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CircuitCircuitTermination from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "display": obj.get("display"),
            "id": obj.get("id"),
            "port_speed": obj.get("port_speed"),
            "provider_network": NestedProviderNetwork.from_dict(obj["provider_network"]) if obj.get("provider_network") is not None else None,
            "site": NestedSite.from_dict(obj["site"]) if obj.get("site") is not None else None,
            "upstream_speed": obj.get("upstream_speed"),
            "url": obj.get("url"),
            "xconnect_id": obj.get("xconnect_id")
        })
        return _obj



# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.nested_user import NestedUser
from openapi_client.models.status6 import Status6
from typing import Optional, Set
from typing_extensions import Self

class JobResult(BaseModel):
    """
    JobResult
    """ # noqa: E501
    completed: Optional[datetime] = None
    created: Optional[datetime] = None
    data: Optional[Dict[str, Any]] = None
    display: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    interval: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=1)]] = Field(default=None, description="Recurrence interval (in minutes)")
    job_id: StrictStr
    name: Annotated[str, Field(min_length=1, strict=True, max_length=255)]
    obj_type: Optional[StrictStr] = None
    scheduled: Optional[datetime] = None
    started: Optional[datetime] = None
    status: Optional[Status6] = None
    url: Optional[StrictStr] = None
    user: Optional[NestedUser] = None
    __properties: ClassVar[List[str]] = ["completed", "created", "data", "display", "id", "interval", "job_id", "name", "obj_type", "scheduled", "started", "status", "url", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "display",
            "id",
            "obj_type",
            "url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # set to None if completed (nullable) is None
        # and model_fields_set contains the field
        if self.completed is None and "completed" in self.model_fields_set:
            _dict['completed'] = None

        # set to None if data (nullable) is None
        # and model_fields_set contains the field
        if self.data is None and "data" in self.model_fields_set:
            _dict['data'] = None

        # set to None if interval (nullable) is None
        # and model_fields_set contains the field
        if self.interval is None and "interval" in self.model_fields_set:
            _dict['interval'] = None

        # set to None if scheduled (nullable) is None
        # and model_fields_set contains the field
        if self.scheduled is None and "scheduled" in self.model_fields_set:
            _dict['scheduled'] = None

        # set to None if started (nullable) is None
        # and model_fields_set contains the field
        if self.started is None and "started" in self.model_fields_set:
            _dict['started'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "completed": obj.get("completed"),
            "created": obj.get("created"),
            "data": obj.get("data"),
            "display": obj.get("display"),
            "id": obj.get("id"),
            "interval": obj.get("interval"),
            "job_id": obj.get("job_id"),
            "name": obj.get("name"),
            "obj_type": obj.get("obj_type"),
            "scheduled": obj.get("scheduled"),
            "started": obj.get("started"),
            "status": Status6.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "url": obj.get("url"),
            "user": NestedUser.from_dict(obj["user"]) if obj.get("user") is not None else None
        })
        return _obj



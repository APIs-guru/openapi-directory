# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.component_nested_module import ComponentNestedModule
from openapi_client.models.duplex import Duplex
from openapi_client.models.mode import Mode
from openapi_client.models.nested_cable import NestedCable
from openapi_client.models.nested_device import NestedDevice
from openapi_client.models.nested_interface import NestedInterface
from openapi_client.models.nested_l2_vpn_termination import NestedL2VPNTermination
from openapi_client.models.nested_tag import NestedTag
from openapi_client.models.nested_virtual_device_context import NestedVirtualDeviceContext
from openapi_client.models.nested_vlan import NestedVLAN
from openapi_client.models.nested_vrf import NestedVRF
from openapi_client.models.nested_wireless_lan import NestedWirelessLAN
from openapi_client.models.nested_wireless_link import NestedWirelessLink
from openapi_client.models.poe_mode import PoeMode
from openapi_client.models.poe_type import PoeType
from openapi_client.models.rf_channel import RfChannel
from openapi_client.models.rf_role import RfRole
from openapi_client.models.type3 import Type3
from typing import Optional, Set
from typing_extensions import Self

class Interface(BaseModel):
    """
    Interface
    """ # noqa: E501
    occupied: Optional[StrictBool] = Field(default=None, alias="_occupied")
    bridge: Optional[NestedInterface] = None
    cable: Optional[NestedCable] = None
    cable_end: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    connected_endpoints: Optional[List[Optional[StrictStr]]] = Field(default=None, description=" Return the appropriate serializer for the type of connected object. ")
    connected_endpoints_reachable: Optional[StrictBool] = None
    connected_endpoints_type: Optional[StrictStr] = None
    count_fhrp_groups: Optional[StrictInt] = None
    count_ipaddresses: Optional[StrictInt] = None
    created: Optional[datetime] = None
    custom_fields: Optional[Dict[str, Any]] = None
    description: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    device: NestedDevice
    display: Optional[StrictStr] = None
    duplex: Optional[Duplex] = None
    enabled: Optional[StrictBool] = None
    id: Optional[StrictInt] = None
    l2vpn_termination: Optional[NestedL2VPNTermination] = None
    label: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="Physical label")
    lag: Optional[NestedInterface] = None
    last_updated: Optional[datetime] = None
    link_peers: Optional[List[Optional[StrictStr]]] = Field(default=None, description=" Return the appropriate serializer for the link termination model. ")
    link_peers_type: Optional[StrictStr] = None
    mac_address: Optional[StrictStr] = None
    mark_connected: Optional[StrictBool] = Field(default=None, description="Treat as if a cable is connected")
    mgmt_only: Optional[StrictBool] = Field(default=None, description="This interface is used only for out-of-band management")
    mode: Optional[Mode] = None
    module: Optional[ComponentNestedModule] = None
    mtu: Optional[Annotated[int, Field(le=65536, strict=True, ge=1)]] = None
    name: Annotated[str, Field(min_length=1, strict=True, max_length=64)]
    parent: Optional[NestedInterface] = None
    poe_mode: Optional[PoeMode] = None
    poe_type: Optional[PoeType] = None
    rf_channel: Optional[RfChannel] = None
    rf_channel_frequency: Optional[Union[StrictFloat, StrictInt]] = None
    rf_channel_width: Optional[Union[StrictFloat, StrictInt]] = None
    rf_role: Optional[RfRole] = None
    speed: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None
    tagged_vlans: Optional[List[Optional[NestedVLAN]]] = None
    tags: Optional[List[NestedTag]] = None
    tx_power: Optional[Annotated[int, Field(le=127, strict=True, ge=0)]] = None
    type: Type3
    untagged_vlan: Optional[NestedVLAN] = None
    url: Optional[StrictStr] = None
    vdcs: Optional[List[NestedVirtualDeviceContext]] = None
    vrf: Optional[NestedVRF] = None
    wireless_lans: Optional[List[NestedWirelessLAN]] = None
    wireless_link: Optional[NestedWirelessLink] = None
    wwn: Optional[StrictStr] = Field(default=None, description="64-bit World Wide Name")
    __properties: ClassVar[List[str]] = ["_occupied", "bridge", "cable", "cable_end", "connected_endpoints", "connected_endpoints_reachable", "connected_endpoints_type", "count_fhrp_groups", "count_ipaddresses", "created", "custom_fields", "description", "device", "display", "duplex", "enabled", "id", "l2vpn_termination", "label", "lag", "last_updated", "link_peers", "link_peers_type", "mac_address", "mark_connected", "mgmt_only", "mode", "module", "mtu", "name", "parent", "poe_mode", "poe_type", "rf_channel", "rf_channel_frequency", "rf_channel_width", "rf_role", "speed", "tagged_vlans", "tags", "tx_power", "type", "untagged_vlan", "url", "vdcs", "vrf", "wireless_lans", "wireless_link", "wwn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Interface from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "occupied",
            "cable_end",
            "connected_endpoints",
            "connected_endpoints_reachable",
            "connected_endpoints_type",
            "count_fhrp_groups",
            "count_ipaddresses",
            "created",
            "display",
            "id",
            "last_updated",
            "link_peers",
            "link_peers_type",
            "url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bridge
        if self.bridge:
            _dict['bridge'] = self.bridge.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cable
        if self.cable:
            _dict['cable'] = self.cable.to_dict()
        # override the default output from pydantic by calling `to_dict()` of device
        if self.device:
            _dict['device'] = self.device.to_dict()
        # override the default output from pydantic by calling `to_dict()` of duplex
        if self.duplex:
            _dict['duplex'] = self.duplex.to_dict()
        # override the default output from pydantic by calling `to_dict()` of l2vpn_termination
        if self.l2vpn_termination:
            _dict['l2vpn_termination'] = self.l2vpn_termination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lag
        if self.lag:
            _dict['lag'] = self.lag.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mode
        if self.mode:
            _dict['mode'] = self.mode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of module
        if self.module:
            _dict['module'] = self.module.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent
        if self.parent:
            _dict['parent'] = self.parent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of poe_mode
        if self.poe_mode:
            _dict['poe_mode'] = self.poe_mode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of poe_type
        if self.poe_type:
            _dict['poe_type'] = self.poe_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rf_channel
        if self.rf_channel:
            _dict['rf_channel'] = self.rf_channel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rf_role
        if self.rf_role:
            _dict['rf_role'] = self.rf_role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tagged_vlans (list)
        _items = []
        if self.tagged_vlans:
            for _item_tagged_vlans in self.tagged_vlans:
                if _item_tagged_vlans:
                    _items.append(_item_tagged_vlans.to_dict())
            _dict['tagged_vlans'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of untagged_vlan
        if self.untagged_vlan:
            _dict['untagged_vlan'] = self.untagged_vlan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in vdcs (list)
        _items = []
        if self.vdcs:
            for _item_vdcs in self.vdcs:
                if _item_vdcs:
                    _items.append(_item_vdcs.to_dict())
            _dict['vdcs'] = _items
        # override the default output from pydantic by calling `to_dict()` of vrf
        if self.vrf:
            _dict['vrf'] = self.vrf.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in wireless_lans (list)
        _items = []
        if self.wireless_lans:
            for _item_wireless_lans in self.wireless_lans:
                if _item_wireless_lans:
                    _items.append(_item_wireless_lans.to_dict())
            _dict['wireless_lans'] = _items
        # override the default output from pydantic by calling `to_dict()` of wireless_link
        if self.wireless_link:
            _dict['wireless_link'] = self.wireless_link.to_dict()
        # set to None if bridge (nullable) is None
        # and model_fields_set contains the field
        if self.bridge is None and "bridge" in self.model_fields_set:
            _dict['bridge'] = None

        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if lag (nullable) is None
        # and model_fields_set contains the field
        if self.lag is None and "lag" in self.model_fields_set:
            _dict['lag'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['last_updated'] = None

        # set to None if mac_address (nullable) is None
        # and model_fields_set contains the field
        if self.mac_address is None and "mac_address" in self.model_fields_set:
            _dict['mac_address'] = None

        # set to None if module (nullable) is None
        # and model_fields_set contains the field
        if self.module is None and "module" in self.model_fields_set:
            _dict['module'] = None

        # set to None if mtu (nullable) is None
        # and model_fields_set contains the field
        if self.mtu is None and "mtu" in self.model_fields_set:
            _dict['mtu'] = None

        # set to None if parent (nullable) is None
        # and model_fields_set contains the field
        if self.parent is None and "parent" in self.model_fields_set:
            _dict['parent'] = None

        # set to None if rf_channel_frequency (nullable) is None
        # and model_fields_set contains the field
        if self.rf_channel_frequency is None and "rf_channel_frequency" in self.model_fields_set:
            _dict['rf_channel_frequency'] = None

        # set to None if rf_channel_width (nullable) is None
        # and model_fields_set contains the field
        if self.rf_channel_width is None and "rf_channel_width" in self.model_fields_set:
            _dict['rf_channel_width'] = None

        # set to None if speed (nullable) is None
        # and model_fields_set contains the field
        if self.speed is None and "speed" in self.model_fields_set:
            _dict['speed'] = None

        # set to None if tx_power (nullable) is None
        # and model_fields_set contains the field
        if self.tx_power is None and "tx_power" in self.model_fields_set:
            _dict['tx_power'] = None

        # set to None if untagged_vlan (nullable) is None
        # and model_fields_set contains the field
        if self.untagged_vlan is None and "untagged_vlan" in self.model_fields_set:
            _dict['untagged_vlan'] = None

        # set to None if vrf (nullable) is None
        # and model_fields_set contains the field
        if self.vrf is None and "vrf" in self.model_fields_set:
            _dict['vrf'] = None

        # set to None if wwn (nullable) is None
        # and model_fields_set contains the field
        if self.wwn is None and "wwn" in self.model_fields_set:
            _dict['wwn'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Interface from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_occupied": obj.get("_occupied"),
            "bridge": NestedInterface.from_dict(obj["bridge"]) if obj.get("bridge") is not None else None,
            "cable": NestedCable.from_dict(obj["cable"]) if obj.get("cable") is not None else None,
            "cable_end": obj.get("cable_end"),
            "connected_endpoints": obj.get("connected_endpoints"),
            "connected_endpoints_reachable": obj.get("connected_endpoints_reachable"),
            "connected_endpoints_type": obj.get("connected_endpoints_type"),
            "count_fhrp_groups": obj.get("count_fhrp_groups"),
            "count_ipaddresses": obj.get("count_ipaddresses"),
            "created": obj.get("created"),
            "custom_fields": obj.get("custom_fields"),
            "description": obj.get("description"),
            "device": NestedDevice.from_dict(obj["device"]) if obj.get("device") is not None else None,
            "display": obj.get("display"),
            "duplex": Duplex.from_dict(obj["duplex"]) if obj.get("duplex") is not None else None,
            "enabled": obj.get("enabled"),
            "id": obj.get("id"),
            "l2vpn_termination": NestedL2VPNTermination.from_dict(obj["l2vpn_termination"]) if obj.get("l2vpn_termination") is not None else None,
            "label": obj.get("label"),
            "lag": NestedInterface.from_dict(obj["lag"]) if obj.get("lag") is not None else None,
            "last_updated": obj.get("last_updated"),
            "link_peers": obj.get("link_peers"),
            "link_peers_type": obj.get("link_peers_type"),
            "mac_address": obj.get("mac_address"),
            "mark_connected": obj.get("mark_connected"),
            "mgmt_only": obj.get("mgmt_only"),
            "mode": Mode.from_dict(obj["mode"]) if obj.get("mode") is not None else None,
            "module": ComponentNestedModule.from_dict(obj["module"]) if obj.get("module") is not None else None,
            "mtu": obj.get("mtu"),
            "name": obj.get("name"),
            "parent": NestedInterface.from_dict(obj["parent"]) if obj.get("parent") is not None else None,
            "poe_mode": PoeMode.from_dict(obj["poe_mode"]) if obj.get("poe_mode") is not None else None,
            "poe_type": PoeType.from_dict(obj["poe_type"]) if obj.get("poe_type") is not None else None,
            "rf_channel": RfChannel.from_dict(obj["rf_channel"]) if obj.get("rf_channel") is not None else None,
            "rf_channel_frequency": obj.get("rf_channel_frequency"),
            "rf_channel_width": obj.get("rf_channel_width"),
            "rf_role": RfRole.from_dict(obj["rf_role"]) if obj.get("rf_role") is not None else None,
            "speed": obj.get("speed"),
            "tagged_vlans": [NestedVLAN.from_dict(_item) for _item in obj["tagged_vlans"]] if obj.get("tagged_vlans") is not None else None,
            "tags": [NestedTag.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "tx_power": obj.get("tx_power"),
            "type": Type3.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "untagged_vlan": NestedVLAN.from_dict(obj["untagged_vlan"]) if obj.get("untagged_vlan") is not None else None,
            "url": obj.get("url"),
            "vdcs": [NestedVirtualDeviceContext.from_dict(_item) for _item in obj["vdcs"]] if obj.get("vdcs") is not None else None,
            "vrf": NestedVRF.from_dict(obj["vrf"]) if obj.get("vrf") is not None else None,
            "wireless_lans": [NestedWirelessLAN.from_dict(_item) for _item in obj["wireless_lans"]] if obj.get("wireless_lans") is not None else None,
            "wireless_link": NestedWirelessLink.from_dict(obj["wireless_link"]) if obj.get("wireless_link") is not None else None,
            "wwn": obj.get("wwn")
        })
        return _obj



# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.nested_cluster import NestedCluster
from openapi_client.models.nested_cluster_group import NestedClusterGroup
from openapi_client.models.nested_cluster_type import NestedClusterType
from openapi_client.models.nested_device_role import NestedDeviceRole
from openapi_client.models.nested_device_type import NestedDeviceType
from openapi_client.models.nested_location import NestedLocation
from openapi_client.models.nested_platform import NestedPlatform
from openapi_client.models.nested_region import NestedRegion
from openapi_client.models.nested_site import NestedSite
from openapi_client.models.nested_site_group import NestedSiteGroup
from openapi_client.models.nested_tenant import NestedTenant
from openapi_client.models.nested_tenant_group import NestedTenantGroup
from typing import Optional, Set
from typing_extensions import Self

class ConfigContext(BaseModel):
    """
    ConfigContext
    """ # noqa: E501
    cluster_groups: Optional[List[NestedClusterGroup]] = None
    cluster_types: Optional[List[NestedClusterType]] = None
    clusters: Optional[List[Optional[NestedCluster]]] = None
    created: Optional[datetime] = None
    data: Dict[str, Any]
    description: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    device_types: Optional[List[NestedDeviceType]] = None
    display: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    is_active: Optional[StrictBool] = None
    last_updated: Optional[datetime] = None
    locations: Optional[List[Optional[NestedLocation]]] = None
    name: Annotated[str, Field(min_length=1, strict=True, max_length=100)]
    platforms: Optional[List[Optional[NestedPlatform]]] = None
    regions: Optional[List[Optional[NestedRegion]]] = None
    roles: Optional[List[NestedDeviceRole]] = None
    site_groups: Optional[List[Optional[NestedSiteGroup]]] = None
    sites: Optional[List[Optional[NestedSite]]] = None
    tags: Optional[List[Annotated[str, Field(strict=True)]]] = None
    tenant_groups: Optional[List[NestedTenantGroup]] = None
    tenants: Optional[List[Optional[NestedTenant]]] = None
    url: Optional[StrictStr] = None
    weight: Optional[Annotated[int, Field(le=32767, strict=True, ge=0)]] = None
    __properties: ClassVar[List[str]] = ["cluster_groups", "cluster_types", "clusters", "created", "data", "description", "device_types", "display", "id", "is_active", "last_updated", "locations", "name", "platforms", "regions", "roles", "site_groups", "sites", "tags", "tenant_groups", "tenants", "url", "weight"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "display",
            "id",
            "last_updated",
            "url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cluster_groups (list)
        _items = []
        if self.cluster_groups:
            for _item_cluster_groups in self.cluster_groups:
                if _item_cluster_groups:
                    _items.append(_item_cluster_groups.to_dict())
            _dict['cluster_groups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cluster_types (list)
        _items = []
        if self.cluster_types:
            for _item_cluster_types in self.cluster_types:
                if _item_cluster_types:
                    _items.append(_item_cluster_types.to_dict())
            _dict['cluster_types'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in clusters (list)
        _items = []
        if self.clusters:
            for _item_clusters in self.clusters:
                if _item_clusters:
                    _items.append(_item_clusters.to_dict())
            _dict['clusters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in device_types (list)
        _items = []
        if self.device_types:
            for _item_device_types in self.device_types:
                if _item_device_types:
                    _items.append(_item_device_types.to_dict())
            _dict['device_types'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in locations (list)
        _items = []
        if self.locations:
            for _item_locations in self.locations:
                if _item_locations:
                    _items.append(_item_locations.to_dict())
            _dict['locations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in platforms (list)
        _items = []
        if self.platforms:
            for _item_platforms in self.platforms:
                if _item_platforms:
                    _items.append(_item_platforms.to_dict())
            _dict['platforms'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in regions (list)
        _items = []
        if self.regions:
            for _item_regions in self.regions:
                if _item_regions:
                    _items.append(_item_regions.to_dict())
            _dict['regions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item_roles in self.roles:
                if _item_roles:
                    _items.append(_item_roles.to_dict())
            _dict['roles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in site_groups (list)
        _items = []
        if self.site_groups:
            for _item_site_groups in self.site_groups:
                if _item_site_groups:
                    _items.append(_item_site_groups.to_dict())
            _dict['site_groups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sites (list)
        _items = []
        if self.sites:
            for _item_sites in self.sites:
                if _item_sites:
                    _items.append(_item_sites.to_dict())
            _dict['sites'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tenant_groups (list)
        _items = []
        if self.tenant_groups:
            for _item_tenant_groups in self.tenant_groups:
                if _item_tenant_groups:
                    _items.append(_item_tenant_groups.to_dict())
            _dict['tenant_groups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tenants (list)
        _items = []
        if self.tenants:
            for _item_tenants in self.tenants:
                if _item_tenants:
                    _items.append(_item_tenants.to_dict())
            _dict['tenants'] = _items
        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['last_updated'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cluster_groups": [NestedClusterGroup.from_dict(_item) for _item in obj["cluster_groups"]] if obj.get("cluster_groups") is not None else None,
            "cluster_types": [NestedClusterType.from_dict(_item) for _item in obj["cluster_types"]] if obj.get("cluster_types") is not None else None,
            "clusters": [NestedCluster.from_dict(_item) for _item in obj["clusters"]] if obj.get("clusters") is not None else None,
            "created": obj.get("created"),
            "data": obj.get("data"),
            "description": obj.get("description"),
            "device_types": [NestedDeviceType.from_dict(_item) for _item in obj["device_types"]] if obj.get("device_types") is not None else None,
            "display": obj.get("display"),
            "id": obj.get("id"),
            "is_active": obj.get("is_active"),
            "last_updated": obj.get("last_updated"),
            "locations": [NestedLocation.from_dict(_item) for _item in obj["locations"]] if obj.get("locations") is not None else None,
            "name": obj.get("name"),
            "platforms": [NestedPlatform.from_dict(_item) for _item in obj["platforms"]] if obj.get("platforms") is not None else None,
            "regions": [NestedRegion.from_dict(_item) for _item in obj["regions"]] if obj.get("regions") is not None else None,
            "roles": [NestedDeviceRole.from_dict(_item) for _item in obj["roles"]] if obj.get("roles") is not None else None,
            "site_groups": [NestedSiteGroup.from_dict(_item) for _item in obj["site_groups"]] if obj.get("site_groups") is not None else None,
            "sites": [NestedSite.from_dict(_item) for _item in obj["sites"]] if obj.get("sites") is not None else None,
            "tags": obj.get("tags"),
            "tenant_groups": [NestedTenantGroup.from_dict(_item) for _item in obj["tenant_groups"]] if obj.get("tenant_groups") is not None else None,
            "tenants": [NestedTenant.from_dict(_item) for _item in obj["tenants"]] if obj.get("tenants") is not None else None,
            "url": obj.get("url"),
            "weight": obj.get("weight")
        })
        return _obj



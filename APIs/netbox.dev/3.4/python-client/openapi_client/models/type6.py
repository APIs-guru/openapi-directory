# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class Type6(BaseModel):
    """
    Type6
    """ # noqa: E501
    label: StrictStr
    value: StrictStr
    __properties: ClassVar[List[str]] = ["label", "value"]

    @field_validator('label')
    def label_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['C5', 'C7', 'C13', 'C15', 'C19', 'C21', 'P+N+E 4H', 'P+N+E 6H', 'P+N+E 9H', '2P+E 4H', '2P+E 6H', '2P+E 9H', '3P+E 4H', '3P+E 6H', '3P+E 9H', '3P+N+E 4H', '3P+N+E 6H', '3P+N+E 9H', 'NEMA 1-15R', 'NEMA 5-15R', 'NEMA 5-20R', 'NEMA 5-30R', 'NEMA 5-50R', 'NEMA 6-15R', 'NEMA 6-20R', 'NEMA 6-30R', 'NEMA 6-50R', 'NEMA 10-30R', 'NEMA 10-50R', 'NEMA 14-20R', 'NEMA 14-30R', 'NEMA 14-50R', 'NEMA 14-60R', 'NEMA 15-15R', 'NEMA 15-20R', 'NEMA 15-30R', 'NEMA 15-50R', 'NEMA 15-60R', 'NEMA L1-15R', 'NEMA L5-15R', 'NEMA L5-20R', 'NEMA L5-30R', 'NEMA L5-50R', 'NEMA L6-15R', 'NEMA L6-20R', 'NEMA L6-30R', 'NEMA L6-50R', 'NEMA L10-30R', 'NEMA L14-20R', 'NEMA L14-30R', 'NEMA L14-50R', 'NEMA L14-60R', 'NEMA L15-20R', 'NEMA L15-30R', 'NEMA L15-50R', 'NEMA L15-60R', 'NEMA L21-20R', 'NEMA L21-30R', 'NEMA L22-30R', 'CS6360C', 'CS6364C', 'CS8164C', 'CS8264C', 'CS8364C', 'CS8464C', 'ITA Type E (CEE 7/5)', 'ITA Type F (CEE 7/3)', 'ITA Type G (BS 1363)', 'ITA Type H', 'ITA Type I', 'ITA Type J', 'ITA Type K', 'ITA Type L (CEI 23-50)', 'ITA Type M (BS 546)', 'ITA Type N', 'ITA Type O', 'ITA Multistandard', 'USB Type A', 'USB Micro B', 'USB Type C', 'DC Terminal', 'HDOT Cx', 'Saf-D-Grid', 'Neutrik powerCON (20A)', 'Neutrik powerCON (32A)', 'Neutrik powerCON TRUE1', 'Neutrik powerCON TRUE1 TOP', 'Ubiquiti SmartPower', 'Hardwired', 'Other']):
            raise ValueError("must be one of enum values ('C5', 'C7', 'C13', 'C15', 'C19', 'C21', 'P+N+E 4H', 'P+N+E 6H', 'P+N+E 9H', '2P+E 4H', '2P+E 6H', '2P+E 9H', '3P+E 4H', '3P+E 6H', '3P+E 9H', '3P+N+E 4H', '3P+N+E 6H', '3P+N+E 9H', 'NEMA 1-15R', 'NEMA 5-15R', 'NEMA 5-20R', 'NEMA 5-30R', 'NEMA 5-50R', 'NEMA 6-15R', 'NEMA 6-20R', 'NEMA 6-30R', 'NEMA 6-50R', 'NEMA 10-30R', 'NEMA 10-50R', 'NEMA 14-20R', 'NEMA 14-30R', 'NEMA 14-50R', 'NEMA 14-60R', 'NEMA 15-15R', 'NEMA 15-20R', 'NEMA 15-30R', 'NEMA 15-50R', 'NEMA 15-60R', 'NEMA L1-15R', 'NEMA L5-15R', 'NEMA L5-20R', 'NEMA L5-30R', 'NEMA L5-50R', 'NEMA L6-15R', 'NEMA L6-20R', 'NEMA L6-30R', 'NEMA L6-50R', 'NEMA L10-30R', 'NEMA L14-20R', 'NEMA L14-30R', 'NEMA L14-50R', 'NEMA L14-60R', 'NEMA L15-20R', 'NEMA L15-30R', 'NEMA L15-50R', 'NEMA L15-60R', 'NEMA L21-20R', 'NEMA L21-30R', 'NEMA L22-30R', 'CS6360C', 'CS6364C', 'CS8164C', 'CS8264C', 'CS8364C', 'CS8464C', 'ITA Type E (CEE 7/5)', 'ITA Type F (CEE 7/3)', 'ITA Type G (BS 1363)', 'ITA Type H', 'ITA Type I', 'ITA Type J', 'ITA Type K', 'ITA Type L (CEI 23-50)', 'ITA Type M (BS 546)', 'ITA Type N', 'ITA Type O', 'ITA Multistandard', 'USB Type A', 'USB Micro B', 'USB Type C', 'DC Terminal', 'HDOT Cx', 'Saf-D-Grid', 'Neutrik powerCON (20A)', 'Neutrik powerCON (32A)', 'Neutrik powerCON TRUE1', 'Neutrik powerCON TRUE1 TOP', 'Ubiquiti SmartPower', 'Hardwired', 'Other')")
        return value

    @field_validator('value')
    def value_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['iec-60320-c5', 'iec-60320-c7', 'iec-60320-c13', 'iec-60320-c15', 'iec-60320-c19', 'iec-60320-c21', 'iec-60309-p-n-e-4h', 'iec-60309-p-n-e-6h', 'iec-60309-p-n-e-9h', 'iec-60309-2p-e-4h', 'iec-60309-2p-e-6h', 'iec-60309-2p-e-9h', 'iec-60309-3p-e-4h', 'iec-60309-3p-e-6h', 'iec-60309-3p-e-9h', 'iec-60309-3p-n-e-4h', 'iec-60309-3p-n-e-6h', 'iec-60309-3p-n-e-9h', 'nema-1-15r', 'nema-5-15r', 'nema-5-20r', 'nema-5-30r', 'nema-5-50r', 'nema-6-15r', 'nema-6-20r', 'nema-6-30r', 'nema-6-50r', 'nema-10-30r', 'nema-10-50r', 'nema-14-20r', 'nema-14-30r', 'nema-14-50r', 'nema-14-60r', 'nema-15-15r', 'nema-15-20r', 'nema-15-30r', 'nema-15-50r', 'nema-15-60r', 'nema-l1-15r', 'nema-l5-15r', 'nema-l5-20r', 'nema-l5-30r', 'nema-l5-50r', 'nema-l6-15r', 'nema-l6-20r', 'nema-l6-30r', 'nema-l6-50r', 'nema-l10-30r', 'nema-l14-20r', 'nema-l14-30r', 'nema-l14-50r', 'nema-l14-60r', 'nema-l15-20r', 'nema-l15-30r', 'nema-l15-50r', 'nema-l15-60r', 'nema-l21-20r', 'nema-l21-30r', 'nema-l22-30r', 'CS6360C', 'CS6364C', 'CS8164C', 'CS8264C', 'CS8364C', 'CS8464C', 'ita-e', 'ita-f', 'ita-g', 'ita-h', 'ita-i', 'ita-j', 'ita-k', 'ita-l', 'ita-m', 'ita-n', 'ita-o', 'ita-multistandard', 'usb-a', 'usb-micro-b', 'usb-c', 'dc-terminal', 'hdot-cx', 'saf-d-grid', 'neutrik-powercon-20a', 'neutrik-powercon-32a', 'neutrik-powercon-true1', 'neutrik-powercon-true1-top', 'ubiquiti-smartpower', 'hardwired', 'other']):
            raise ValueError("must be one of enum values ('iec-60320-c5', 'iec-60320-c7', 'iec-60320-c13', 'iec-60320-c15', 'iec-60320-c19', 'iec-60320-c21', 'iec-60309-p-n-e-4h', 'iec-60309-p-n-e-6h', 'iec-60309-p-n-e-9h', 'iec-60309-2p-e-4h', 'iec-60309-2p-e-6h', 'iec-60309-2p-e-9h', 'iec-60309-3p-e-4h', 'iec-60309-3p-e-6h', 'iec-60309-3p-e-9h', 'iec-60309-3p-n-e-4h', 'iec-60309-3p-n-e-6h', 'iec-60309-3p-n-e-9h', 'nema-1-15r', 'nema-5-15r', 'nema-5-20r', 'nema-5-30r', 'nema-5-50r', 'nema-6-15r', 'nema-6-20r', 'nema-6-30r', 'nema-6-50r', 'nema-10-30r', 'nema-10-50r', 'nema-14-20r', 'nema-14-30r', 'nema-14-50r', 'nema-14-60r', 'nema-15-15r', 'nema-15-20r', 'nema-15-30r', 'nema-15-50r', 'nema-15-60r', 'nema-l1-15r', 'nema-l5-15r', 'nema-l5-20r', 'nema-l5-30r', 'nema-l5-50r', 'nema-l6-15r', 'nema-l6-20r', 'nema-l6-30r', 'nema-l6-50r', 'nema-l10-30r', 'nema-l14-20r', 'nema-l14-30r', 'nema-l14-50r', 'nema-l14-60r', 'nema-l15-20r', 'nema-l15-30r', 'nema-l15-50r', 'nema-l15-60r', 'nema-l21-20r', 'nema-l21-30r', 'nema-l22-30r', 'CS6360C', 'CS6364C', 'CS8164C', 'CS8264C', 'CS8364C', 'CS8464C', 'ita-e', 'ita-f', 'ita-g', 'ita-h', 'ita-i', 'ita-j', 'ita-k', 'ita-l', 'ita-m', 'ita-n', 'ita-o', 'ita-multistandard', 'usb-a', 'usb-micro-b', 'usb-c', 'dc-terminal', 'hdot-cx', 'saf-d-grid', 'neutrik-powercon-20a', 'neutrik-powercon-32a', 'neutrik-powercon-true1', 'neutrik-powercon-true1-top', 'ubiquiti-smartpower', 'hardwired', 'other')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Type6 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Type6 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "label": obj.get("label"),
            "value": obj.get("value")
        })
        return _obj



# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.family import Family
from openapi_client.models.nested_ip_address import NestedIPAddress
from openapi_client.models.nested_tag import NestedTag
from openapi_client.models.nested_tenant import NestedTenant
from openapi_client.models.nested_vrf import NestedVRF
from openapi_client.models.role1 import Role1
from openapi_client.models.status4 import Status4
from typing import Optional, Set
from typing_extensions import Self

class IPAddress(BaseModel):
    """
    IPAddress
    """ # noqa: E501
    address: StrictStr = Field(description="IPv4 or IPv6 address (with mask)")
    assigned_object: Optional[Dict[str, Any]] = None
    assigned_object_id: Optional[Annotated[int, Field(le=-9223372036854775616, strict=True, ge=0)]] = None
    assigned_object_type: Optional[StrictStr] = None
    comments: Optional[StrictStr] = None
    created: Optional[datetime] = None
    custom_fields: Optional[Dict[str, Any]] = None
    description: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    display: Optional[StrictStr] = None
    dns_name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Hostname or FQDN (not case-sensitive)")
    family: Optional[Family] = None
    id: Optional[StrictInt] = None
    last_updated: Optional[datetime] = None
    nat_inside: Optional[NestedIPAddress] = None
    nat_outside: Optional[List[NestedIPAddress]] = None
    role: Optional[Role1] = None
    status: Optional[Status4] = None
    tags: Optional[List[NestedTag]] = None
    tenant: Optional[NestedTenant] = None
    url: Optional[StrictStr] = None
    vrf: Optional[NestedVRF] = None
    __properties: ClassVar[List[str]] = ["address", "assigned_object", "assigned_object_id", "assigned_object_type", "comments", "created", "custom_fields", "description", "display", "dns_name", "family", "id", "last_updated", "nat_inside", "nat_outside", "role", "status", "tags", "tenant", "url", "vrf"]

    @field_validator('dns_name')
    def dns_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([0-9A-Za-z_-]+|\*)(\.[0-9A-Za-z_-]+)*\.?$", value):
            raise ValueError(r"must validate the regular expression /^([0-9A-Za-z_-]+|\*)(\.[0-9A-Za-z_-]+)*\.?$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IPAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "assigned_object",
            "created",
            "display",
            "id",
            "last_updated",
            "nat_outside",
            "url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of family
        if self.family:
            _dict['family'] = self.family.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nat_inside
        if self.nat_inside:
            _dict['nat_inside'] = self.nat_inside.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in nat_outside (list)
        _items = []
        if self.nat_outside:
            for _item_nat_outside in self.nat_outside:
                if _item_nat_outside:
                    _items.append(_item_nat_outside.to_dict())
            _dict['nat_outside'] = _items
        # override the default output from pydantic by calling `to_dict()` of role
        if self.role:
            _dict['role'] = self.role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of tenant
        if self.tenant:
            _dict['tenant'] = self.tenant.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vrf
        if self.vrf:
            _dict['vrf'] = self.vrf.to_dict()
        # set to None if assigned_object_id (nullable) is None
        # and model_fields_set contains the field
        if self.assigned_object_id is None and "assigned_object_id" in self.model_fields_set:
            _dict['assigned_object_id'] = None

        # set to None if assigned_object_type (nullable) is None
        # and model_fields_set contains the field
        if self.assigned_object_type is None and "assigned_object_type" in self.model_fields_set:
            _dict['assigned_object_type'] = None

        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['last_updated'] = None

        # set to None if tenant (nullable) is None
        # and model_fields_set contains the field
        if self.tenant is None and "tenant" in self.model_fields_set:
            _dict['tenant'] = None

        # set to None if vrf (nullable) is None
        # and model_fields_set contains the field
        if self.vrf is None and "vrf" in self.model_fields_set:
            _dict['vrf'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IPAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "assigned_object": obj.get("assigned_object"),
            "assigned_object_id": obj.get("assigned_object_id"),
            "assigned_object_type": obj.get("assigned_object_type"),
            "comments": obj.get("comments"),
            "created": obj.get("created"),
            "custom_fields": obj.get("custom_fields"),
            "description": obj.get("description"),
            "display": obj.get("display"),
            "dns_name": obj.get("dns_name"),
            "family": Family.from_dict(obj["family"]) if obj.get("family") is not None else None,
            "id": obj.get("id"),
            "last_updated": obj.get("last_updated"),
            "nat_inside": NestedIPAddress.from_dict(obj["nat_inside"]) if obj.get("nat_inside") is not None else None,
            "nat_outside": [NestedIPAddress.from_dict(_item) for _item in obj["nat_outside"]] if obj.get("nat_outside") is not None else None,
            "role": Role1.from_dict(obj["role"]) if obj.get("role") is not None else None,
            "status": Status4.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "tags": [NestedTag.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "tenant": NestedTenant.from_dict(obj["tenant"]) if obj.get("tenant") is not None else None,
            "url": obj.get("url"),
            "vrf": NestedVRF.from_dict(obj["vrf"]) if obj.get("vrf") is not None else None
        })
        return _obj



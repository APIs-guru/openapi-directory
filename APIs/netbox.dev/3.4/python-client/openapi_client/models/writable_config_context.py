# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class WritableConfigContext(BaseModel):
    """
    WritableConfigContext
    """ # noqa: E501
    cluster_groups: Optional[List[StrictInt]] = None
    cluster_types: Optional[List[StrictInt]] = None
    clusters: Optional[List[StrictInt]] = None
    created: Optional[datetime] = None
    data: Dict[str, Any]
    description: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    device_types: Optional[List[StrictInt]] = None
    display: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    is_active: Optional[StrictBool] = None
    last_updated: Optional[datetime] = None
    locations: Optional[List[StrictInt]] = None
    name: Annotated[str, Field(min_length=1, strict=True, max_length=100)]
    platforms: Optional[List[StrictInt]] = None
    regions: Optional[List[StrictInt]] = None
    roles: Optional[List[StrictInt]] = None
    site_groups: Optional[List[StrictInt]] = None
    sites: Optional[List[StrictInt]] = None
    tags: Optional[List[Annotated[str, Field(strict=True)]]] = None
    tenant_groups: Optional[List[StrictInt]] = None
    tenants: Optional[List[StrictInt]] = None
    url: Optional[StrictStr] = None
    weight: Optional[Annotated[int, Field(le=32767, strict=True, ge=0)]] = None
    __properties: ClassVar[List[str]] = ["cluster_groups", "cluster_types", "clusters", "created", "data", "description", "device_types", "display", "id", "is_active", "last_updated", "locations", "name", "platforms", "regions", "roles", "site_groups", "sites", "tags", "tenant_groups", "tenants", "url", "weight"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WritableConfigContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "display",
            "id",
            "last_updated",
            "url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['last_updated'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WritableConfigContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cluster_groups": obj.get("cluster_groups"),
            "cluster_types": obj.get("cluster_types"),
            "clusters": obj.get("clusters"),
            "created": obj.get("created"),
            "data": obj.get("data"),
            "description": obj.get("description"),
            "device_types": obj.get("device_types"),
            "display": obj.get("display"),
            "id": obj.get("id"),
            "is_active": obj.get("is_active"),
            "last_updated": obj.get("last_updated"),
            "locations": obj.get("locations"),
            "name": obj.get("name"),
            "platforms": obj.get("platforms"),
            "regions": obj.get("regions"),
            "roles": obj.get("roles"),
            "site_groups": obj.get("site_groups"),
            "sites": obj.get("sites"),
            "tags": obj.get("tags"),
            "tenant_groups": obj.get("tenant_groups"),
            "tenants": obj.get("tenants"),
            "url": obj.get("url"),
            "weight": obj.get("weight")
        })
        return _obj



# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.nested_tag import NestedTag
from typing import Optional, Set
from typing_extensions import Self

class WritableSite(BaseModel):
    """
    WritableSite
    """ # noqa: E501
    asns: Optional[List[StrictInt]] = None
    circuit_count: Optional[StrictInt] = None
    comments: Optional[StrictStr] = None
    created: Optional[datetime] = None
    custom_fields: Optional[Dict[str, Any]] = None
    description: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    device_count: Optional[StrictInt] = None
    display: Optional[StrictStr] = None
    facility: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Local facility ID or description")
    group: Optional[StrictInt] = None
    id: Optional[StrictInt] = None
    last_updated: Optional[datetime] = None
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="GPS coordinate (latitude)")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="GPS coordinate (longitude)")
    name: Annotated[str, Field(min_length=1, strict=True, max_length=100)]
    physical_address: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    prefix_count: Optional[StrictInt] = None
    rack_count: Optional[StrictInt] = None
    region: Optional[StrictInt] = None
    shipping_address: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    slug: Annotated[str, Field(min_length=1, strict=True, max_length=100)]
    status: Optional[StrictStr] = None
    tags: Optional[List[NestedTag]] = None
    tenant: Optional[StrictInt] = None
    time_zone: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    virtualmachine_count: Optional[StrictInt] = None
    vlan_count: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["asns", "circuit_count", "comments", "created", "custom_fields", "description", "device_count", "display", "facility", "group", "id", "last_updated", "latitude", "longitude", "name", "physical_address", "prefix_count", "rack_count", "region", "shipping_address", "slug", "status", "tags", "tenant", "time_zone", "url", "virtualmachine_count", "vlan_count"]

    @field_validator('slug')
    def slug_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[-a-zA-Z0-9_]+$", value):
            raise ValueError(r"must validate the regular expression /^[-a-zA-Z0-9_]+$/")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['planned', 'staging', 'active', 'decommissioning', 'retired']):
            raise ValueError("must be one of enum values ('planned', 'staging', 'active', 'decommissioning', 'retired')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WritableSite from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "circuit_count",
            "created",
            "device_count",
            "display",
            "id",
            "last_updated",
            "prefix_count",
            "rack_count",
            "url",
            "virtualmachine_count",
            "vlan_count",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if group (nullable) is None
        # and model_fields_set contains the field
        if self.group is None and "group" in self.model_fields_set:
            _dict['group'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['last_updated'] = None

        # set to None if latitude (nullable) is None
        # and model_fields_set contains the field
        if self.latitude is None and "latitude" in self.model_fields_set:
            _dict['latitude'] = None

        # set to None if longitude (nullable) is None
        # and model_fields_set contains the field
        if self.longitude is None and "longitude" in self.model_fields_set:
            _dict['longitude'] = None

        # set to None if region (nullable) is None
        # and model_fields_set contains the field
        if self.region is None and "region" in self.model_fields_set:
            _dict['region'] = None

        # set to None if tenant (nullable) is None
        # and model_fields_set contains the field
        if self.tenant is None and "tenant" in self.model_fields_set:
            _dict['tenant'] = None

        # set to None if time_zone (nullable) is None
        # and model_fields_set contains the field
        if self.time_zone is None and "time_zone" in self.model_fields_set:
            _dict['time_zone'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WritableSite from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asns": obj.get("asns"),
            "circuit_count": obj.get("circuit_count"),
            "comments": obj.get("comments"),
            "created": obj.get("created"),
            "custom_fields": obj.get("custom_fields"),
            "description": obj.get("description"),
            "device_count": obj.get("device_count"),
            "display": obj.get("display"),
            "facility": obj.get("facility"),
            "group": obj.get("group"),
            "id": obj.get("id"),
            "last_updated": obj.get("last_updated"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "name": obj.get("name"),
            "physical_address": obj.get("physical_address"),
            "prefix_count": obj.get("prefix_count"),
            "rack_count": obj.get("rack_count"),
            "region": obj.get("region"),
            "shipping_address": obj.get("shipping_address"),
            "slug": obj.get("slug"),
            "status": obj.get("status"),
            "tags": [NestedTag.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "tenant": obj.get("tenant"),
            "time_zone": obj.get("time_zone"),
            "url": obj.get("url"),
            "virtualmachine_count": obj.get("virtualmachine_count"),
            "vlan_count": obj.get("vlan_count")
        })
        return _obj



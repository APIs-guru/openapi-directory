# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.circuit_circuit_termination import CircuitCircuitTermination
from openapi_client.models.nested_circuit_type import NestedCircuitType
from openapi_client.models.nested_provider import NestedProvider
from openapi_client.models.nested_tag import NestedTag
from openapi_client.models.nested_tenant import NestedTenant
from openapi_client.models.status1 import Status1
from typing import Optional, Set
from typing_extensions import Self

class Circuit(BaseModel):
    """
    Circuit
    """ # noqa: E501
    cid: Annotated[str, Field(min_length=1, strict=True, max_length=100)]
    comments: Optional[StrictStr] = None
    commit_rate: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None
    created: Optional[datetime] = None
    custom_fields: Optional[Dict[str, Any]] = None
    description: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    display: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    install_date: Optional[date] = None
    last_updated: Optional[datetime] = None
    provider: NestedProvider
    status: Optional[Status1] = None
    tags: Optional[List[NestedTag]] = None
    tenant: Optional[NestedTenant] = None
    termination_a: Optional[CircuitCircuitTermination] = None
    termination_date: Optional[date] = None
    termination_z: Optional[CircuitCircuitTermination] = None
    type: NestedCircuitType
    url: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["cid", "comments", "commit_rate", "created", "custom_fields", "description", "display", "id", "install_date", "last_updated", "provider", "status", "tags", "tenant", "termination_a", "termination_date", "termination_z", "type", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Circuit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "display",
            "id",
            "last_updated",
            "url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of provider
        if self.provider:
            _dict['provider'] = self.provider.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of tenant
        if self.tenant:
            _dict['tenant'] = self.tenant.to_dict()
        # override the default output from pydantic by calling `to_dict()` of termination_a
        if self.termination_a:
            _dict['termination_a'] = self.termination_a.to_dict()
        # override the default output from pydantic by calling `to_dict()` of termination_z
        if self.termination_z:
            _dict['termination_z'] = self.termination_z.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # set to None if commit_rate (nullable) is None
        # and model_fields_set contains the field
        if self.commit_rate is None and "commit_rate" in self.model_fields_set:
            _dict['commit_rate'] = None

        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if install_date (nullable) is None
        # and model_fields_set contains the field
        if self.install_date is None and "install_date" in self.model_fields_set:
            _dict['install_date'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['last_updated'] = None

        # set to None if tenant (nullable) is None
        # and model_fields_set contains the field
        if self.tenant is None and "tenant" in self.model_fields_set:
            _dict['tenant'] = None

        # set to None if termination_date (nullable) is None
        # and model_fields_set contains the field
        if self.termination_date is None and "termination_date" in self.model_fields_set:
            _dict['termination_date'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Circuit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cid": obj.get("cid"),
            "comments": obj.get("comments"),
            "commit_rate": obj.get("commit_rate"),
            "created": obj.get("created"),
            "custom_fields": obj.get("custom_fields"),
            "description": obj.get("description"),
            "display": obj.get("display"),
            "id": obj.get("id"),
            "install_date": obj.get("install_date"),
            "last_updated": obj.get("last_updated"),
            "provider": NestedProvider.from_dict(obj["provider"]) if obj.get("provider") is not None else None,
            "status": Status1.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "tags": [NestedTag.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "tenant": NestedTenant.from_dict(obj["tenant"]) if obj.get("tenant") is not None else None,
            "termination_a": CircuitCircuitTermination.from_dict(obj["termination_a"]) if obj.get("termination_a") is not None else None,
            "termination_date": obj.get("termination_date"),
            "termination_z": CircuitCircuitTermination.from_dict(obj["termination_z"]) if obj.get("termination_z") is not None else None,
            "type": NestedCircuitType.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "url": obj.get("url")
        })
        return _obj



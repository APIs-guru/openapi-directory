# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.nested_location import NestedLocation
from openapi_client.models.nested_rack_role import NestedRackRole
from openapi_client.models.nested_site import NestedSite
from openapi_client.models.nested_tag import NestedTag
from openapi_client.models.nested_tenant import NestedTenant
from openapi_client.models.outer_unit import OuterUnit
from openapi_client.models.status11 import Status11
from openapi_client.models.type8 import Type8
from openapi_client.models.weight_unit import WeightUnit
from openapi_client.models.width import Width
from typing import Optional, Set
from typing_extensions import Self

class Rack(BaseModel):
    """
    Rack
    """ # noqa: E501
    asset_tag: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="A unique tag used to identify this rack")
    comments: Optional[StrictStr] = None
    created: Optional[datetime] = None
    custom_fields: Optional[Dict[str, Any]] = None
    desc_units: Optional[StrictBool] = Field(default=None, description="Units are numbered top-to-bottom")
    description: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    device_count: Optional[StrictInt] = None
    display: Optional[StrictStr] = None
    facility_id: Optional[Annotated[str, Field(strict=True, max_length=50)]] = None
    id: Optional[StrictInt] = None
    last_updated: Optional[datetime] = None
    location: Optional[NestedLocation] = None
    max_weight: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="Maximum load capacity for the rack")
    mounting_depth: Optional[Annotated[int, Field(le=32767, strict=True, ge=0)]] = Field(default=None, description="Maximum depth of a mounted device, in millimeters. For four-post racks, this is the distance between the front and rear rails.")
    name: Annotated[str, Field(min_length=1, strict=True, max_length=100)]
    outer_depth: Optional[Annotated[int, Field(le=32767, strict=True, ge=0)]] = Field(default=None, description="Outer dimension of rack (depth)")
    outer_unit: Optional[OuterUnit] = None
    outer_width: Optional[Annotated[int, Field(le=32767, strict=True, ge=0)]] = Field(default=None, description="Outer dimension of rack (width)")
    powerfeed_count: Optional[StrictInt] = None
    role: Optional[NestedRackRole] = None
    serial: Optional[Annotated[str, Field(strict=True, max_length=50)]] = None
    site: Optional[NestedSite]
    status: Optional[Status11] = None
    tags: Optional[List[NestedTag]] = None
    tenant: Optional[NestedTenant] = None
    type: Optional[Type8] = None
    u_height: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = Field(default=None, description="Height in rack units")
    url: Optional[StrictStr] = None
    weight: Optional[Union[StrictFloat, StrictInt]] = None
    weight_unit: Optional[WeightUnit] = None
    width: Optional[Width] = None
    __properties: ClassVar[List[str]] = ["asset_tag", "comments", "created", "custom_fields", "desc_units", "description", "device_count", "display", "facility_id", "id", "last_updated", "location", "max_weight", "mounting_depth", "name", "outer_depth", "outer_unit", "outer_width", "powerfeed_count", "role", "serial", "site", "status", "tags", "tenant", "type", "u_height", "url", "weight", "weight_unit", "width"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Rack from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "device_count",
            "display",
            "id",
            "last_updated",
            "powerfeed_count",
            "url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of outer_unit
        if self.outer_unit:
            _dict['outer_unit'] = self.outer_unit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of role
        if self.role:
            _dict['role'] = self.role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of site
        if self.site:
            _dict['site'] = self.site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of tenant
        if self.tenant:
            _dict['tenant'] = self.tenant.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of weight_unit
        if self.weight_unit:
            _dict['weight_unit'] = self.weight_unit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of width
        if self.width:
            _dict['width'] = self.width.to_dict()
        # set to None if asset_tag (nullable) is None
        # and model_fields_set contains the field
        if self.asset_tag is None and "asset_tag" in self.model_fields_set:
            _dict['asset_tag'] = None

        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if facility_id (nullable) is None
        # and model_fields_set contains the field
        if self.facility_id is None and "facility_id" in self.model_fields_set:
            _dict['facility_id'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['last_updated'] = None

        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict['location'] = None

        # set to None if max_weight (nullable) is None
        # and model_fields_set contains the field
        if self.max_weight is None and "max_weight" in self.model_fields_set:
            _dict['max_weight'] = None

        # set to None if mounting_depth (nullable) is None
        # and model_fields_set contains the field
        if self.mounting_depth is None and "mounting_depth" in self.model_fields_set:
            _dict['mounting_depth'] = None

        # set to None if outer_depth (nullable) is None
        # and model_fields_set contains the field
        if self.outer_depth is None and "outer_depth" in self.model_fields_set:
            _dict['outer_depth'] = None

        # set to None if outer_width (nullable) is None
        # and model_fields_set contains the field
        if self.outer_width is None and "outer_width" in self.model_fields_set:
            _dict['outer_width'] = None

        # set to None if role (nullable) is None
        # and model_fields_set contains the field
        if self.role is None and "role" in self.model_fields_set:
            _dict['role'] = None

        # set to None if site (nullable) is None
        # and model_fields_set contains the field
        if self.site is None and "site" in self.model_fields_set:
            _dict['site'] = None

        # set to None if tenant (nullable) is None
        # and model_fields_set contains the field
        if self.tenant is None and "tenant" in self.model_fields_set:
            _dict['tenant'] = None

        # set to None if weight (nullable) is None
        # and model_fields_set contains the field
        if self.weight is None and "weight" in self.model_fields_set:
            _dict['weight'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Rack from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asset_tag": obj.get("asset_tag"),
            "comments": obj.get("comments"),
            "created": obj.get("created"),
            "custom_fields": obj.get("custom_fields"),
            "desc_units": obj.get("desc_units"),
            "description": obj.get("description"),
            "device_count": obj.get("device_count"),
            "display": obj.get("display"),
            "facility_id": obj.get("facility_id"),
            "id": obj.get("id"),
            "last_updated": obj.get("last_updated"),
            "location": NestedLocation.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "max_weight": obj.get("max_weight"),
            "mounting_depth": obj.get("mounting_depth"),
            "name": obj.get("name"),
            "outer_depth": obj.get("outer_depth"),
            "outer_unit": OuterUnit.from_dict(obj["outer_unit"]) if obj.get("outer_unit") is not None else None,
            "outer_width": obj.get("outer_width"),
            "powerfeed_count": obj.get("powerfeed_count"),
            "role": NestedRackRole.from_dict(obj["role"]) if obj.get("role") is not None else None,
            "serial": obj.get("serial"),
            "site": NestedSite.from_dict(obj["site"]) if obj.get("site") is not None else None,
            "status": Status11.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "tags": [NestedTag.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "tenant": NestedTenant.from_dict(obj["tenant"]) if obj.get("tenant") is not None else None,
            "type": Type8.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "u_height": obj.get("u_height"),
            "url": obj.get("url"),
            "weight": obj.get("weight"),
            "weight_unit": WeightUnit.from_dict(obj["weight_unit"]) if obj.get("weight_unit") is not None else None,
            "width": Width.from_dict(obj["width"]) if obj.get("width") is not None else None
        })
        return _obj



# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Webhook(BaseModel):
    """
    Webhook
    """ # noqa: E501
    additional_headers: Optional[StrictStr] = Field(default=None, description="User-supplied HTTP headers to be sent with the request in addition to the HTTP content type. Headers should be defined in the format <code>Name: Value</code>. Jinja2 template processing is supported with the same context as the request body (below).")
    body_template: Optional[StrictStr] = Field(default=None, description="Jinja2 template for a custom request body. If blank, a JSON object representing the change will be included. Available context data includes: <code>event</code>, <code>model</code>, <code>timestamp</code>, <code>username</code>, <code>request_id</code>, and <code>data</code>.")
    ca_file_path: Optional[Annotated[str, Field(strict=True, max_length=4096)]] = Field(default=None, description="The specific CA certificate file to use for SSL verification. Leave blank to use the system defaults.")
    conditions: Optional[Dict[str, Any]] = Field(default=None, description="A set of conditions which determine whether the webhook will be generated.")
    content_types: List[StrictStr]
    created: Optional[datetime] = None
    display: Optional[StrictStr] = None
    enabled: Optional[StrictBool] = None
    http_content_type: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=100)]] = Field(default=None, description="The complete list of official content types is available <a href=\"https://www.iana.org/assignments/media-types/media-types.xhtml\">here</a>.")
    http_method: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    last_updated: Optional[datetime] = None
    name: Annotated[str, Field(min_length=1, strict=True, max_length=150)]
    payload_url: Annotated[str, Field(min_length=1, strict=True, max_length=500)] = Field(description="This URL will be called using the HTTP method defined when the webhook is called. Jinja2 template processing is supported with the same context as the request body.")
    secret: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="When provided, the request will include a 'X-Hook-Signature' header containing a HMAC hex digest of the payload body using the secret as the key. The secret is not transmitted in the request.")
    ssl_verification: Optional[StrictBool] = Field(default=None, description="Enable SSL certificate verification. Disable with caution!")
    type_create: Optional[StrictBool] = Field(default=None, description="Call this webhook when a matching object is created.")
    type_delete: Optional[StrictBool] = Field(default=None, description="Call this webhook when a matching object is deleted.")
    type_update: Optional[StrictBool] = Field(default=None, description="Call this webhook when a matching object is updated.")
    url: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["additional_headers", "body_template", "ca_file_path", "conditions", "content_types", "created", "display", "enabled", "http_content_type", "http_method", "id", "last_updated", "name", "payload_url", "secret", "ssl_verification", "type_create", "type_delete", "type_update", "url"]

    @field_validator('http_method')
    def http_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GET', 'POST', 'PUT', 'PATCH', 'DELETE']):
            raise ValueError("must be one of enum values ('GET', 'POST', 'PUT', 'PATCH', 'DELETE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Webhook from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "display",
            "id",
            "last_updated",
            "url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if ca_file_path (nullable) is None
        # and model_fields_set contains the field
        if self.ca_file_path is None and "ca_file_path" in self.model_fields_set:
            _dict['ca_file_path'] = None

        # set to None if conditions (nullable) is None
        # and model_fields_set contains the field
        if self.conditions is None and "conditions" in self.model_fields_set:
            _dict['conditions'] = None

        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['last_updated'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Webhook from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additional_headers": obj.get("additional_headers"),
            "body_template": obj.get("body_template"),
            "ca_file_path": obj.get("ca_file_path"),
            "conditions": obj.get("conditions"),
            "content_types": obj.get("content_types"),
            "created": obj.get("created"),
            "display": obj.get("display"),
            "enabled": obj.get("enabled"),
            "http_content_type": obj.get("http_content_type"),
            "http_method": obj.get("http_method"),
            "id": obj.get("id"),
            "last_updated": obj.get("last_updated"),
            "name": obj.get("name"),
            "payload_url": obj.get("payload_url"),
            "secret": obj.get("secret"),
            "ssl_verification": obj.get("ssl_verification"),
            "type_create": obj.get("type_create"),
            "type_delete": obj.get("type_delete"),
            "type_update": obj.get("type_update"),
            "url": obj.get("url")
        })
        return _obj



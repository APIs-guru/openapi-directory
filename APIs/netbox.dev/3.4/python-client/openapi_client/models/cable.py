# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.generic_object import GenericObject
from openapi_client.models.length_unit import LengthUnit
from openapi_client.models.nested_tag import NestedTag
from openapi_client.models.nested_tenant import NestedTenant
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class Cable(BaseModel):
    """
    Cable
    """ # noqa: E501
    a_terminations: Optional[List[GenericObject]] = None
    b_terminations: Optional[List[GenericObject]] = None
    color: Optional[Annotated[str, Field(strict=True, max_length=6)]] = None
    comments: Optional[StrictStr] = None
    created: Optional[datetime] = None
    custom_fields: Optional[Dict[str, Any]] = None
    description: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    display: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    label: Optional[Annotated[str, Field(strict=True, max_length=100)]] = None
    last_updated: Optional[datetime] = None
    length: Optional[Union[StrictFloat, StrictInt]] = None
    length_unit: Optional[LengthUnit] = None
    status: Optional[Status] = None
    tags: Optional[List[NestedTag]] = None
    tenant: Optional[NestedTenant] = None
    type: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["a_terminations", "b_terminations", "color", "comments", "created", "custom_fields", "description", "display", "id", "label", "last_updated", "length", "length_unit", "status", "tags", "tenant", "type", "url"]

    @field_validator('color')
    def color_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9a-f]{6}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-f]{6}$/")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['cat3', 'cat5', 'cat5e', 'cat6', 'cat6a', 'cat7', 'cat7a', 'cat8', 'dac-active', 'dac-passive', 'mrj21-trunk', 'coaxial', 'mmf', 'mmf-om1', 'mmf-om2', 'mmf-om3', 'mmf-om4', 'mmf-om5', 'smf', 'smf-os1', 'smf-os2', 'aoc', 'power']):
            raise ValueError("must be one of enum values ('cat3', 'cat5', 'cat5e', 'cat6', 'cat6a', 'cat7', 'cat7a', 'cat8', 'dac-active', 'dac-passive', 'mrj21-trunk', 'coaxial', 'mmf', 'mmf-om1', 'mmf-om2', 'mmf-om3', 'mmf-om4', 'mmf-om5', 'smf', 'smf-os1', 'smf-os2', 'aoc', 'power')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Cable from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "display",
            "id",
            "last_updated",
            "url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in a_terminations (list)
        _items = []
        if self.a_terminations:
            for _item_a_terminations in self.a_terminations:
                if _item_a_terminations:
                    _items.append(_item_a_terminations.to_dict())
            _dict['a_terminations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in b_terminations (list)
        _items = []
        if self.b_terminations:
            for _item_b_terminations in self.b_terminations:
                if _item_b_terminations:
                    _items.append(_item_b_terminations.to_dict())
            _dict['b_terminations'] = _items
        # override the default output from pydantic by calling `to_dict()` of length_unit
        if self.length_unit:
            _dict['length_unit'] = self.length_unit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of tenant
        if self.tenant:
            _dict['tenant'] = self.tenant.to_dict()
        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['last_updated'] = None

        # set to None if length (nullable) is None
        # and model_fields_set contains the field
        if self.length is None and "length" in self.model_fields_set:
            _dict['length'] = None

        # set to None if tenant (nullable) is None
        # and model_fields_set contains the field
        if self.tenant is None and "tenant" in self.model_fields_set:
            _dict['tenant'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Cable from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "a_terminations": [GenericObject.from_dict(_item) for _item in obj["a_terminations"]] if obj.get("a_terminations") is not None else None,
            "b_terminations": [GenericObject.from_dict(_item) for _item in obj["b_terminations"]] if obj.get("b_terminations") is not None else None,
            "color": obj.get("color"),
            "comments": obj.get("comments"),
            "created": obj.get("created"),
            "custom_fields": obj.get("custom_fields"),
            "description": obj.get("description"),
            "display": obj.get("display"),
            "id": obj.get("id"),
            "label": obj.get("label"),
            "last_updated": obj.get("last_updated"),
            "length": obj.get("length"),
            "length_unit": LengthUnit.from_dict(obj["length_unit"]) if obj.get("length_unit") is not None else None,
            "status": Status.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "tags": [NestedTag.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "tenant": NestedTenant.from_dict(obj["tenant"]) if obj.get("tenant") is not None else None,
            "type": obj.get("type"),
            "url": obj.get("url")
        })
        return _obj



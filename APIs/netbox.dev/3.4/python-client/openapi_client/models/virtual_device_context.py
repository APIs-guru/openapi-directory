# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.nested_device import NestedDevice
from openapi_client.models.nested_ip_address import NestedIPAddress
from openapi_client.models.nested_tag import NestedTag
from openapi_client.models.nested_tenant import NestedTenant
from typing import Optional, Set
from typing_extensions import Self

class VirtualDeviceContext(BaseModel):
    """
    VirtualDeviceContext
    """ # noqa: E501
    comments: Optional[StrictStr] = None
    created: Optional[datetime] = None
    custom_fields: Optional[Dict[str, Any]] = None
    description: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    device: NestedDevice
    display: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    identifier: Optional[Annotated[int, Field(le=32767, strict=True, ge=0)]] = Field(default=None, description="Numeric identifier unique to the parent device")
    interface_count: Optional[StrictInt] = None
    last_updated: Optional[datetime] = None
    name: Annotated[str, Field(min_length=1, strict=True, max_length=64)]
    primary_ip: Optional[NestedIPAddress] = None
    primary_ip4: Optional[NestedIPAddress] = None
    primary_ip6: Optional[NestedIPAddress] = None
    status: StrictStr
    tags: Optional[List[NestedTag]] = None
    tenant: Optional[NestedTenant] = None
    url: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["comments", "created", "custom_fields", "description", "device", "display", "id", "identifier", "interface_count", "last_updated", "name", "primary_ip", "primary_ip4", "primary_ip6", "status", "tags", "tenant", "url"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['active', 'planned', 'offline']):
            raise ValueError("must be one of enum values ('active', 'planned', 'offline')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualDeviceContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "display",
            "id",
            "interface_count",
            "last_updated",
            "url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of device
        if self.device:
            _dict['device'] = self.device.to_dict()
        # override the default output from pydantic by calling `to_dict()` of primary_ip
        if self.primary_ip:
            _dict['primary_ip'] = self.primary_ip.to_dict()
        # override the default output from pydantic by calling `to_dict()` of primary_ip4
        if self.primary_ip4:
            _dict['primary_ip4'] = self.primary_ip4.to_dict()
        # override the default output from pydantic by calling `to_dict()` of primary_ip6
        if self.primary_ip6:
            _dict['primary_ip6'] = self.primary_ip6.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of tenant
        if self.tenant:
            _dict['tenant'] = self.tenant.to_dict()
        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if identifier (nullable) is None
        # and model_fields_set contains the field
        if self.identifier is None and "identifier" in self.model_fields_set:
            _dict['identifier'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['last_updated'] = None

        # set to None if tenant (nullable) is None
        # and model_fields_set contains the field
        if self.tenant is None and "tenant" in self.model_fields_set:
            _dict['tenant'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualDeviceContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comments": obj.get("comments"),
            "created": obj.get("created"),
            "custom_fields": obj.get("custom_fields"),
            "description": obj.get("description"),
            "device": NestedDevice.from_dict(obj["device"]) if obj.get("device") is not None else None,
            "display": obj.get("display"),
            "id": obj.get("id"),
            "identifier": obj.get("identifier"),
            "interface_count": obj.get("interface_count"),
            "last_updated": obj.get("last_updated"),
            "name": obj.get("name"),
            "primary_ip": NestedIPAddress.from_dict(obj["primary_ip"]) if obj.get("primary_ip") is not None else None,
            "primary_ip4": NestedIPAddress.from_dict(obj["primary_ip4"]) if obj.get("primary_ip4") is not None else None,
            "primary_ip6": NestedIPAddress.from_dict(obj["primary_ip6"]) if obj.get("primary_ip6") is not None else None,
            "status": obj.get("status"),
            "tags": [NestedTag.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "tenant": NestedTenant.from_dict(obj["tenant"]) if obj.get("tenant") is not None else None,
            "url": obj.get("url")
        })
        return _obj



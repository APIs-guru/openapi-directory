# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.nested_cable import NestedCable
from openapi_client.models.nested_tag import NestedTag
from typing import Optional, Set
from typing_extensions import Self

class WritableInterface(BaseModel):
    """
    WritableInterface
    """ # noqa: E501
    occupied: Optional[StrictBool] = Field(default=None, alias="_occupied")
    bridge: Optional[StrictInt] = None
    cable: Optional[NestedCable] = None
    cable_end: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    connected_endpoints: Optional[List[Optional[StrictStr]]] = Field(default=None, description=" Return the appropriate serializer for the type of connected object. ")
    connected_endpoints_reachable: Optional[StrictBool] = None
    connected_endpoints_type: Optional[StrictStr] = None
    count_fhrp_groups: Optional[StrictInt] = None
    count_ipaddresses: Optional[StrictInt] = None
    created: Optional[datetime] = None
    custom_fields: Optional[Dict[str, Any]] = None
    description: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    device: StrictInt
    display: Optional[StrictStr] = None
    duplex: Optional[StrictStr] = None
    enabled: Optional[StrictBool] = None
    id: Optional[StrictInt] = None
    l2vpn_termination: Optional[StrictStr] = None
    label: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="Physical label")
    lag: Optional[StrictInt] = None
    last_updated: Optional[datetime] = None
    link_peers: Optional[List[Optional[StrictStr]]] = Field(default=None, description=" Return the appropriate serializer for the link termination model. ")
    link_peers_type: Optional[StrictStr] = None
    mac_address: Optional[StrictStr] = None
    mark_connected: Optional[StrictBool] = Field(default=None, description="Treat as if a cable is connected")
    mgmt_only: Optional[StrictBool] = Field(default=None, description="This interface is used only for out-of-band management")
    mode: Optional[StrictStr] = None
    module: Optional[StrictInt] = None
    mtu: Optional[Annotated[int, Field(le=65536, strict=True, ge=1)]] = None
    name: Annotated[str, Field(min_length=1, strict=True, max_length=64)]
    parent: Optional[StrictInt] = None
    poe_mode: Optional[StrictStr] = None
    poe_type: Optional[StrictStr] = None
    rf_channel: Optional[StrictStr] = None
    rf_channel_frequency: Optional[Union[StrictFloat, StrictInt]] = None
    rf_channel_width: Optional[Union[StrictFloat, StrictInt]] = None
    rf_role: Optional[StrictStr] = None
    speed: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None
    tagged_vlans: Optional[List[StrictInt]] = None
    tags: Optional[List[NestedTag]] = None
    tx_power: Optional[Annotated[int, Field(le=127, strict=True, ge=0)]] = None
    type: StrictStr
    untagged_vlan: Optional[StrictInt] = None
    url: Optional[StrictStr] = None
    vdcs: List[StrictInt]
    vrf: Optional[StrictInt] = None
    wireless_lans: Optional[List[StrictInt]] = None
    wireless_link: Optional[StrictInt] = None
    wwn: Optional[StrictStr] = Field(default=None, description="64-bit World Wide Name")
    __properties: ClassVar[List[str]] = ["_occupied", "bridge", "cable", "cable_end", "connected_endpoints", "connected_endpoints_reachable", "connected_endpoints_type", "count_fhrp_groups", "count_ipaddresses", "created", "custom_fields", "description", "device", "display", "duplex", "enabled", "id", "l2vpn_termination", "label", "lag", "last_updated", "link_peers", "link_peers_type", "mac_address", "mark_connected", "mgmt_only", "mode", "module", "mtu", "name", "parent", "poe_mode", "poe_type", "rf_channel", "rf_channel_frequency", "rf_channel_width", "rf_role", "speed", "tagged_vlans", "tags", "tx_power", "type", "untagged_vlan", "url", "vdcs", "vrf", "wireless_lans", "wireless_link", "wwn"]

    @field_validator('duplex')
    def duplex_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['half', 'full', 'auto']):
            raise ValueError("must be one of enum values ('half', 'full', 'auto')")
        return value

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['access', 'tagged', 'tagged-all']):
            raise ValueError("must be one of enum values ('access', 'tagged', 'tagged-all')")
        return value

    @field_validator('poe_mode')
    def poe_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['pd', 'pse']):
            raise ValueError("must be one of enum values ('pd', 'pse')")
        return value

    @field_validator('poe_type')
    def poe_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['type1-ieee802.3af', 'type2-ieee802.3at', 'type2-ieee802.3az', 'type3-ieee802.3bt', 'type4-ieee802.3bt', 'passive-24v-2pair', 'passive-24v-4pair', 'passive-48v-2pair', 'passive-48v-4pair']):
            raise ValueError("must be one of enum values ('type1-ieee802.3af', 'type2-ieee802.3at', 'type2-ieee802.3az', 'type3-ieee802.3bt', 'type4-ieee802.3bt', 'passive-24v-2pair', 'passive-24v-4pair', 'passive-48v-2pair', 'passive-48v-4pair')")
        return value

    @field_validator('rf_channel')
    def rf_channel_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['2.4g-1-2412-22', '2.4g-2-2417-22', '2.4g-3-2422-22', '2.4g-4-2427-22', '2.4g-5-2432-22', '2.4g-6-2437-22', '2.4g-7-2442-22', '2.4g-8-2447-22', '2.4g-9-2452-22', '2.4g-10-2457-22', '2.4g-11-2462-22', '2.4g-12-2467-22', '2.4g-13-2472-22', '5g-32-5160-20', '5g-34-5170-40', '5g-36-5180-20', '5g-38-5190-40', '5g-40-5200-20', '5g-42-5210-80', '5g-44-5220-20', '5g-46-5230-40', '5g-48-5240-20', '5g-50-5250-160', '5g-52-5260-20', '5g-54-5270-40', '5g-56-5280-20', '5g-58-5290-80', '5g-60-5300-20', '5g-62-5310-40', '5g-64-5320-20', '5g-100-5500-20', '5g-102-5510-40', '5g-104-5520-20', '5g-106-5530-80', '5g-108-5540-20', '5g-110-5550-40', '5g-112-5560-20', '5g-114-5570-160', '5g-116-5580-20', '5g-118-5590-40', '5g-120-5600-20', '5g-122-5610-80', '5g-124-5620-20', '5g-126-5630-40', '5g-128-5640-20', '5g-132-5660-20', '5g-134-5670-40', '5g-136-5680-20', '5g-138-5690-80', '5g-140-5700-20', '5g-142-5710-40', '5g-144-5720-20', '5g-149-5745-20', '5g-151-5755-40', '5g-153-5765-20', '5g-155-5775-80', '5g-157-5785-20', '5g-159-5795-40', '5g-161-5805-20', '5g-163-5815-160', '5g-165-5825-20', '5g-167-5835-40', '5g-169-5845-20', '5g-171-5855-80', '5g-173-5865-20', '5g-175-5875-40', '5g-177-5885-20', '6g-1-5955-20', '6g-3-5965-40', '6g-5-5975-20', '6g-7-5985-80', '6g-9-5995-20', '6g-11-6005-40', '6g-13-6015-20', '6g-15-6025-160', '6g-17-6035-20', '6g-19-6045-40', '6g-21-6055-20', '6g-23-6065-80', '6g-25-6075-20', '6g-27-6085-40', '6g-29-6095-20', '6g-31-6105-320', '6g-33-6115-20', '6g-35-6125-40', '6g-37-6135-20', '6g-39-6145-80', '6g-41-6155-20', '6g-43-6165-40', '6g-45-6175-20', '6g-47-6185-160', '6g-49-6195-20', '6g-51-6205-40', '6g-53-6215-20', '6g-55-6225-80', '6g-57-6235-20', '6g-59-6245-40', '6g-61-6255-20', '6g-65-6275-20', '6g-67-6285-40', '6g-69-6295-20', '6g-71-6305-80', '6g-73-6315-20', '6g-75-6325-40', '6g-77-6335-20', '6g-79-6345-160', '6g-81-6355-20', '6g-83-6365-40', '6g-85-6375-20', '6g-87-6385-80', '6g-89-6395-20', '6g-91-6405-40', '6g-93-6415-20', '6g-95-6425-320', '6g-97-6435-20', '6g-99-6445-40', '6g-101-6455-20', '6g-103-6465-80', '6g-105-6475-20', '6g-107-6485-40', '6g-109-6495-20', '6g-111-6505-160', '6g-113-6515-20', '6g-115-6525-40', '6g-117-6535-20', '6g-119-6545-80', '6g-121-6555-20', '6g-123-6565-40', '6g-125-6575-20', '6g-129-6595-20', '6g-131-6605-40', '6g-133-6615-20', '6g-135-6625-80', '6g-137-6635-20', '6g-139-6645-40', '6g-141-6655-20', '6g-143-6665-160', '6g-145-6675-20', '6g-147-6685-40', '6g-149-6695-20', '6g-151-6705-80', '6g-153-6715-20', '6g-155-6725-40', '6g-157-6735-20', '6g-159-6745-320', '6g-161-6755-20', '6g-163-6765-40', '6g-165-6775-20', '6g-167-6785-80', '6g-169-6795-20', '6g-171-6805-40', '6g-173-6815-20', '6g-175-6825-160', '6g-177-6835-20', '6g-179-6845-40', '6g-181-6855-20', '6g-183-6865-80', '6g-185-6875-20', '6g-187-6885-40', '6g-189-6895-20', '6g-193-6915-20', '6g-195-6925-40', '6g-197-6935-20', '6g-199-6945-80', '6g-201-6955-20', '6g-203-6965-40', '6g-205-6975-20', '6g-207-6985-160', '6g-209-6995-20', '6g-211-7005-40', '6g-213-7015-20', '6g-215-7025-80', '6g-217-7035-20', '6g-219-7045-40', '6g-221-7055-20', '6g-225-7075-20', '6g-227-7085-40', '6g-229-7095-20', '6g-233-7115-20', '60g-1-58320-2160', '60g-2-60480-2160', '60g-3-62640-2160', '60g-4-64800-2160', '60g-5-66960-2160', '60g-6-69120-2160', '60g-9-59400-4320', '60g-10-61560-4320', '60g-11-63720-4320', '60g-12-65880-4320', '60g-13-68040-4320', '60g-17-60480-6480', '60g-18-62640-6480', '60g-19-64800-6480', '60g-20-66960-6480', '60g-25-61560-6480', '60g-26-63720-6480', '60g-27-65880-6480']):
            raise ValueError("must be one of enum values ('2.4g-1-2412-22', '2.4g-2-2417-22', '2.4g-3-2422-22', '2.4g-4-2427-22', '2.4g-5-2432-22', '2.4g-6-2437-22', '2.4g-7-2442-22', '2.4g-8-2447-22', '2.4g-9-2452-22', '2.4g-10-2457-22', '2.4g-11-2462-22', '2.4g-12-2467-22', '2.4g-13-2472-22', '5g-32-5160-20', '5g-34-5170-40', '5g-36-5180-20', '5g-38-5190-40', '5g-40-5200-20', '5g-42-5210-80', '5g-44-5220-20', '5g-46-5230-40', '5g-48-5240-20', '5g-50-5250-160', '5g-52-5260-20', '5g-54-5270-40', '5g-56-5280-20', '5g-58-5290-80', '5g-60-5300-20', '5g-62-5310-40', '5g-64-5320-20', '5g-100-5500-20', '5g-102-5510-40', '5g-104-5520-20', '5g-106-5530-80', '5g-108-5540-20', '5g-110-5550-40', '5g-112-5560-20', '5g-114-5570-160', '5g-116-5580-20', '5g-118-5590-40', '5g-120-5600-20', '5g-122-5610-80', '5g-124-5620-20', '5g-126-5630-40', '5g-128-5640-20', '5g-132-5660-20', '5g-134-5670-40', '5g-136-5680-20', '5g-138-5690-80', '5g-140-5700-20', '5g-142-5710-40', '5g-144-5720-20', '5g-149-5745-20', '5g-151-5755-40', '5g-153-5765-20', '5g-155-5775-80', '5g-157-5785-20', '5g-159-5795-40', '5g-161-5805-20', '5g-163-5815-160', '5g-165-5825-20', '5g-167-5835-40', '5g-169-5845-20', '5g-171-5855-80', '5g-173-5865-20', '5g-175-5875-40', '5g-177-5885-20', '6g-1-5955-20', '6g-3-5965-40', '6g-5-5975-20', '6g-7-5985-80', '6g-9-5995-20', '6g-11-6005-40', '6g-13-6015-20', '6g-15-6025-160', '6g-17-6035-20', '6g-19-6045-40', '6g-21-6055-20', '6g-23-6065-80', '6g-25-6075-20', '6g-27-6085-40', '6g-29-6095-20', '6g-31-6105-320', '6g-33-6115-20', '6g-35-6125-40', '6g-37-6135-20', '6g-39-6145-80', '6g-41-6155-20', '6g-43-6165-40', '6g-45-6175-20', '6g-47-6185-160', '6g-49-6195-20', '6g-51-6205-40', '6g-53-6215-20', '6g-55-6225-80', '6g-57-6235-20', '6g-59-6245-40', '6g-61-6255-20', '6g-65-6275-20', '6g-67-6285-40', '6g-69-6295-20', '6g-71-6305-80', '6g-73-6315-20', '6g-75-6325-40', '6g-77-6335-20', '6g-79-6345-160', '6g-81-6355-20', '6g-83-6365-40', '6g-85-6375-20', '6g-87-6385-80', '6g-89-6395-20', '6g-91-6405-40', '6g-93-6415-20', '6g-95-6425-320', '6g-97-6435-20', '6g-99-6445-40', '6g-101-6455-20', '6g-103-6465-80', '6g-105-6475-20', '6g-107-6485-40', '6g-109-6495-20', '6g-111-6505-160', '6g-113-6515-20', '6g-115-6525-40', '6g-117-6535-20', '6g-119-6545-80', '6g-121-6555-20', '6g-123-6565-40', '6g-125-6575-20', '6g-129-6595-20', '6g-131-6605-40', '6g-133-6615-20', '6g-135-6625-80', '6g-137-6635-20', '6g-139-6645-40', '6g-141-6655-20', '6g-143-6665-160', '6g-145-6675-20', '6g-147-6685-40', '6g-149-6695-20', '6g-151-6705-80', '6g-153-6715-20', '6g-155-6725-40', '6g-157-6735-20', '6g-159-6745-320', '6g-161-6755-20', '6g-163-6765-40', '6g-165-6775-20', '6g-167-6785-80', '6g-169-6795-20', '6g-171-6805-40', '6g-173-6815-20', '6g-175-6825-160', '6g-177-6835-20', '6g-179-6845-40', '6g-181-6855-20', '6g-183-6865-80', '6g-185-6875-20', '6g-187-6885-40', '6g-189-6895-20', '6g-193-6915-20', '6g-195-6925-40', '6g-197-6935-20', '6g-199-6945-80', '6g-201-6955-20', '6g-203-6965-40', '6g-205-6975-20', '6g-207-6985-160', '6g-209-6995-20', '6g-211-7005-40', '6g-213-7015-20', '6g-215-7025-80', '6g-217-7035-20', '6g-219-7045-40', '6g-221-7055-20', '6g-225-7075-20', '6g-227-7085-40', '6g-229-7095-20', '6g-233-7115-20', '60g-1-58320-2160', '60g-2-60480-2160', '60g-3-62640-2160', '60g-4-64800-2160', '60g-5-66960-2160', '60g-6-69120-2160', '60g-9-59400-4320', '60g-10-61560-4320', '60g-11-63720-4320', '60g-12-65880-4320', '60g-13-68040-4320', '60g-17-60480-6480', '60g-18-62640-6480', '60g-19-64800-6480', '60g-20-66960-6480', '60g-25-61560-6480', '60g-26-63720-6480', '60g-27-65880-6480')")
        return value

    @field_validator('rf_role')
    def rf_role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ap', 'station']):
            raise ValueError("must be one of enum values ('ap', 'station')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['virtual', 'bridge', 'lag', '100base-fx', '100base-lfx', '100base-tx', '100base-t1', '1000base-t', '2.5gbase-t', '5gbase-t', '10gbase-t', '10gbase-cx4', '1000base-x-gbic', '1000base-x-sfp', '10gbase-x-sfpp', '10gbase-x-xfp', '10gbase-x-xenpak', '10gbase-x-x2', '25gbase-x-sfp28', '50gbase-x-sfp56', '40gbase-x-qsfpp', '50gbase-x-sfp28', '100gbase-x-cfp', '100gbase-x-cfp2', '200gbase-x-cfp2', '100gbase-x-cfp4', '100gbase-x-cpak', '100gbase-x-qsfp28', '200gbase-x-qsfp56', '400gbase-x-qsfpdd', '400gbase-x-osfp', '800gbase-x-qsfpdd', '800gbase-x-osfp', '1000base-kx', '10gbase-kr', '10gbase-kx4', '25gbase-kr', '40gbase-kr4', '50gbase-kr', '100gbase-kp4', '100gbase-kr2', '100gbase-kr4', 'ieee802.11a', 'ieee802.11g', 'ieee802.11n', 'ieee802.11ac', 'ieee802.11ad', 'ieee802.11ax', 'ieee802.11ay', 'ieee802.15.1', 'other-wireless', 'gsm', 'cdma', 'lte', 'sonet-oc3', 'sonet-oc12', 'sonet-oc48', 'sonet-oc192', 'sonet-oc768', 'sonet-oc1920', 'sonet-oc3840', '1gfc-sfp', '2gfc-sfp', '4gfc-sfp', '8gfc-sfpp', '16gfc-sfpp', '32gfc-sfp28', '64gfc-qsfpp', '128gfc-qsfp28', 'infiniband-sdr', 'infiniband-ddr', 'infiniband-qdr', 'infiniband-fdr10', 'infiniband-fdr', 'infiniband-edr', 'infiniband-hdr', 'infiniband-ndr', 'infiniband-xdr', 't1', 'e1', 't3', 'e3', 'xdsl', 'docsis', 'gpon', 'xg-pon', 'xgs-pon', 'ng-pon2', 'epon', '10g-epon', 'cisco-stackwise', 'cisco-stackwise-plus', 'cisco-flexstack', 'cisco-flexstack-plus', 'cisco-stackwise-80', 'cisco-stackwise-160', 'cisco-stackwise-320', 'cisco-stackwise-480', 'cisco-stackwise-1t', 'juniper-vcp', 'extreme-summitstack', 'extreme-summitstack-128', 'extreme-summitstack-256', 'extreme-summitstack-512', 'other']):
            raise ValueError("must be one of enum values ('virtual', 'bridge', 'lag', '100base-fx', '100base-lfx', '100base-tx', '100base-t1', '1000base-t', '2.5gbase-t', '5gbase-t', '10gbase-t', '10gbase-cx4', '1000base-x-gbic', '1000base-x-sfp', '10gbase-x-sfpp', '10gbase-x-xfp', '10gbase-x-xenpak', '10gbase-x-x2', '25gbase-x-sfp28', '50gbase-x-sfp56', '40gbase-x-qsfpp', '50gbase-x-sfp28', '100gbase-x-cfp', '100gbase-x-cfp2', '200gbase-x-cfp2', '100gbase-x-cfp4', '100gbase-x-cpak', '100gbase-x-qsfp28', '200gbase-x-qsfp56', '400gbase-x-qsfpdd', '400gbase-x-osfp', '800gbase-x-qsfpdd', '800gbase-x-osfp', '1000base-kx', '10gbase-kr', '10gbase-kx4', '25gbase-kr', '40gbase-kr4', '50gbase-kr', '100gbase-kp4', '100gbase-kr2', '100gbase-kr4', 'ieee802.11a', 'ieee802.11g', 'ieee802.11n', 'ieee802.11ac', 'ieee802.11ad', 'ieee802.11ax', 'ieee802.11ay', 'ieee802.15.1', 'other-wireless', 'gsm', 'cdma', 'lte', 'sonet-oc3', 'sonet-oc12', 'sonet-oc48', 'sonet-oc192', 'sonet-oc768', 'sonet-oc1920', 'sonet-oc3840', '1gfc-sfp', '2gfc-sfp', '4gfc-sfp', '8gfc-sfpp', '16gfc-sfpp', '32gfc-sfp28', '64gfc-qsfpp', '128gfc-qsfp28', 'infiniband-sdr', 'infiniband-ddr', 'infiniband-qdr', 'infiniband-fdr10', 'infiniband-fdr', 'infiniband-edr', 'infiniband-hdr', 'infiniband-ndr', 'infiniband-xdr', 't1', 'e1', 't3', 'e3', 'xdsl', 'docsis', 'gpon', 'xg-pon', 'xgs-pon', 'ng-pon2', 'epon', '10g-epon', 'cisco-stackwise', 'cisco-stackwise-plus', 'cisco-flexstack', 'cisco-flexstack-plus', 'cisco-stackwise-80', 'cisco-stackwise-160', 'cisco-stackwise-320', 'cisco-stackwise-480', 'cisco-stackwise-1t', 'juniper-vcp', 'extreme-summitstack', 'extreme-summitstack-128', 'extreme-summitstack-256', 'extreme-summitstack-512', 'other')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WritableInterface from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "occupied",
            "cable_end",
            "connected_endpoints",
            "connected_endpoints_reachable",
            "connected_endpoints_type",
            "count_fhrp_groups",
            "count_ipaddresses",
            "created",
            "display",
            "id",
            "l2vpn_termination",
            "last_updated",
            "link_peers",
            "link_peers_type",
            "url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cable
        if self.cable:
            _dict['cable'] = self.cable.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # set to None if bridge (nullable) is None
        # and model_fields_set contains the field
        if self.bridge is None and "bridge" in self.model_fields_set:
            _dict['bridge'] = None

        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if duplex (nullable) is None
        # and model_fields_set contains the field
        if self.duplex is None and "duplex" in self.model_fields_set:
            _dict['duplex'] = None

        # set to None if lag (nullable) is None
        # and model_fields_set contains the field
        if self.lag is None and "lag" in self.model_fields_set:
            _dict['lag'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['last_updated'] = None

        # set to None if mac_address (nullable) is None
        # and model_fields_set contains the field
        if self.mac_address is None and "mac_address" in self.model_fields_set:
            _dict['mac_address'] = None

        # set to None if module (nullable) is None
        # and model_fields_set contains the field
        if self.module is None and "module" in self.model_fields_set:
            _dict['module'] = None

        # set to None if mtu (nullable) is None
        # and model_fields_set contains the field
        if self.mtu is None and "mtu" in self.model_fields_set:
            _dict['mtu'] = None

        # set to None if parent (nullable) is None
        # and model_fields_set contains the field
        if self.parent is None and "parent" in self.model_fields_set:
            _dict['parent'] = None

        # set to None if rf_channel_frequency (nullable) is None
        # and model_fields_set contains the field
        if self.rf_channel_frequency is None and "rf_channel_frequency" in self.model_fields_set:
            _dict['rf_channel_frequency'] = None

        # set to None if rf_channel_width (nullable) is None
        # and model_fields_set contains the field
        if self.rf_channel_width is None and "rf_channel_width" in self.model_fields_set:
            _dict['rf_channel_width'] = None

        # set to None if speed (nullable) is None
        # and model_fields_set contains the field
        if self.speed is None and "speed" in self.model_fields_set:
            _dict['speed'] = None

        # set to None if tx_power (nullable) is None
        # and model_fields_set contains the field
        if self.tx_power is None and "tx_power" in self.model_fields_set:
            _dict['tx_power'] = None

        # set to None if untagged_vlan (nullable) is None
        # and model_fields_set contains the field
        if self.untagged_vlan is None and "untagged_vlan" in self.model_fields_set:
            _dict['untagged_vlan'] = None

        # set to None if vrf (nullable) is None
        # and model_fields_set contains the field
        if self.vrf is None and "vrf" in self.model_fields_set:
            _dict['vrf'] = None

        # set to None if wireless_link (nullable) is None
        # and model_fields_set contains the field
        if self.wireless_link is None and "wireless_link" in self.model_fields_set:
            _dict['wireless_link'] = None

        # set to None if wwn (nullable) is None
        # and model_fields_set contains the field
        if self.wwn is None and "wwn" in self.model_fields_set:
            _dict['wwn'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WritableInterface from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_occupied": obj.get("_occupied"),
            "bridge": obj.get("bridge"),
            "cable": NestedCable.from_dict(obj["cable"]) if obj.get("cable") is not None else None,
            "cable_end": obj.get("cable_end"),
            "connected_endpoints": obj.get("connected_endpoints"),
            "connected_endpoints_reachable": obj.get("connected_endpoints_reachable"),
            "connected_endpoints_type": obj.get("connected_endpoints_type"),
            "count_fhrp_groups": obj.get("count_fhrp_groups"),
            "count_ipaddresses": obj.get("count_ipaddresses"),
            "created": obj.get("created"),
            "custom_fields": obj.get("custom_fields"),
            "description": obj.get("description"),
            "device": obj.get("device"),
            "display": obj.get("display"),
            "duplex": obj.get("duplex"),
            "enabled": obj.get("enabled"),
            "id": obj.get("id"),
            "l2vpn_termination": obj.get("l2vpn_termination"),
            "label": obj.get("label"),
            "lag": obj.get("lag"),
            "last_updated": obj.get("last_updated"),
            "link_peers": obj.get("link_peers"),
            "link_peers_type": obj.get("link_peers_type"),
            "mac_address": obj.get("mac_address"),
            "mark_connected": obj.get("mark_connected"),
            "mgmt_only": obj.get("mgmt_only"),
            "mode": obj.get("mode"),
            "module": obj.get("module"),
            "mtu": obj.get("mtu"),
            "name": obj.get("name"),
            "parent": obj.get("parent"),
            "poe_mode": obj.get("poe_mode"),
            "poe_type": obj.get("poe_type"),
            "rf_channel": obj.get("rf_channel"),
            "rf_channel_frequency": obj.get("rf_channel_frequency"),
            "rf_channel_width": obj.get("rf_channel_width"),
            "rf_role": obj.get("rf_role"),
            "speed": obj.get("speed"),
            "tagged_vlans": obj.get("tagged_vlans"),
            "tags": [NestedTag.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "tx_power": obj.get("tx_power"),
            "type": obj.get("type"),
            "untagged_vlan": obj.get("untagged_vlan"),
            "url": obj.get("url"),
            "vdcs": obj.get("vdcs"),
            "vrf": obj.get("vrf"),
            "wireless_lans": obj.get("wireless_lans"),
            "wireless_link": obj.get("wireless_link"),
            "wwn": obj.get("wwn")
        })
        return _obj



# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.action import Action
from openapi_client.models.nested_user import NestedUser
from typing import Optional, Set
from typing_extensions import Self

class ObjectChange(BaseModel):
    """
    ObjectChange
    """ # noqa: E501
    action: Optional[Action] = None
    changed_object: Optional[Dict[str, Any]] = Field(default=None, description=" Serialize a nested representation of the changed object. ")
    changed_object_id: Annotated[int, Field(le=-9223372036854775616, strict=True, ge=0)]
    changed_object_type: Optional[StrictStr] = None
    display: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    postchange_data: Optional[Dict[str, Any]] = None
    prechange_data: Optional[Dict[str, Any]] = None
    request_id: Optional[StrictStr] = None
    time: Optional[datetime] = None
    url: Optional[StrictStr] = None
    user: Optional[NestedUser] = None
    user_name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    __properties: ClassVar[List[str]] = ["action", "changed_object", "changed_object_id", "changed_object_type", "display", "id", "postchange_data", "prechange_data", "request_id", "time", "url", "user", "user_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObjectChange from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "changed_object",
            "changed_object_type",
            "display",
            "id",
            "postchange_data",
            "prechange_data",
            "request_id",
            "time",
            "url",
            "user_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of action
        if self.action:
            _dict['action'] = self.action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # set to None if postchange_data (nullable) is None
        # and model_fields_set contains the field
        if self.postchange_data is None and "postchange_data" in self.model_fields_set:
            _dict['postchange_data'] = None

        # set to None if prechange_data (nullable) is None
        # and model_fields_set contains the field
        if self.prechange_data is None and "prechange_data" in self.model_fields_set:
            _dict['prechange_data'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObjectChange from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": Action.from_dict(obj["action"]) if obj.get("action") is not None else None,
            "changed_object": obj.get("changed_object"),
            "changed_object_id": obj.get("changed_object_id"),
            "changed_object_type": obj.get("changed_object_type"),
            "display": obj.get("display"),
            "id": obj.get("id"),
            "postchange_data": obj.get("postchange_data"),
            "prechange_data": obj.get("prechange_data"),
            "request_id": obj.get("request_id"),
            "time": obj.get("time"),
            "url": obj.get("url"),
            "user": NestedUser.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "user_name": obj.get("user_name")
        })
        return _obj



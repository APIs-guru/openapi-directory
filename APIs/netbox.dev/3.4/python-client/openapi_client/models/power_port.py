# coding: utf-8

"""
    NetBox API

    API to access NetBox

    The version of the OpenAPI document: 3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.component_nested_module import ComponentNestedModule
from openapi_client.models.nested_cable import NestedCable
from openapi_client.models.nested_device import NestedDevice
from openapi_client.models.nested_tag import NestedTag
from openapi_client.models.type7 import Type7
from typing import Optional, Set
from typing_extensions import Self

class PowerPort(BaseModel):
    """
    PowerPort
    """ # noqa: E501
    occupied: Optional[StrictBool] = Field(default=None, alias="_occupied")
    allocated_draw: Optional[Annotated[int, Field(le=32767, strict=True, ge=1)]] = Field(default=None, description="Allocated power draw (watts)")
    cable: Optional[NestedCable] = None
    cable_end: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    connected_endpoints: Optional[List[Optional[StrictStr]]] = Field(default=None, description=" Return the appropriate serializer for the type of connected object. ")
    connected_endpoints_reachable: Optional[StrictBool] = None
    connected_endpoints_type: Optional[StrictStr] = None
    created: Optional[datetime] = None
    custom_fields: Optional[Dict[str, Any]] = None
    description: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    device: NestedDevice
    display: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    label: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="Physical label")
    last_updated: Optional[datetime] = None
    link_peers: Optional[List[Optional[StrictStr]]] = Field(default=None, description=" Return the appropriate serializer for the link termination model. ")
    link_peers_type: Optional[StrictStr] = None
    mark_connected: Optional[StrictBool] = Field(default=None, description="Treat as if a cable is connected")
    maximum_draw: Optional[Annotated[int, Field(le=32767, strict=True, ge=1)]] = Field(default=None, description="Maximum power draw (watts)")
    module: Optional[ComponentNestedModule] = None
    name: Annotated[str, Field(min_length=1, strict=True, max_length=64)]
    tags: Optional[List[NestedTag]] = None
    type: Optional[Type7] = None
    url: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["_occupied", "allocated_draw", "cable", "cable_end", "connected_endpoints", "connected_endpoints_reachable", "connected_endpoints_type", "created", "custom_fields", "description", "device", "display", "id", "label", "last_updated", "link_peers", "link_peers_type", "mark_connected", "maximum_draw", "module", "name", "tags", "type", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PowerPort from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "occupied",
            "cable_end",
            "connected_endpoints",
            "connected_endpoints_reachable",
            "connected_endpoints_type",
            "created",
            "display",
            "id",
            "last_updated",
            "link_peers",
            "link_peers_type",
            "url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cable
        if self.cable:
            _dict['cable'] = self.cable.to_dict()
        # override the default output from pydantic by calling `to_dict()` of device
        if self.device:
            _dict['device'] = self.device.to_dict()
        # override the default output from pydantic by calling `to_dict()` of module
        if self.module:
            _dict['module'] = self.module.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # set to None if allocated_draw (nullable) is None
        # and model_fields_set contains the field
        if self.allocated_draw is None and "allocated_draw" in self.model_fields_set:
            _dict['allocated_draw'] = None

        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['last_updated'] = None

        # set to None if maximum_draw (nullable) is None
        # and model_fields_set contains the field
        if self.maximum_draw is None and "maximum_draw" in self.model_fields_set:
            _dict['maximum_draw'] = None

        # set to None if module (nullable) is None
        # and model_fields_set contains the field
        if self.module is None and "module" in self.model_fields_set:
            _dict['module'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PowerPort from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_occupied": obj.get("_occupied"),
            "allocated_draw": obj.get("allocated_draw"),
            "cable": NestedCable.from_dict(obj["cable"]) if obj.get("cable") is not None else None,
            "cable_end": obj.get("cable_end"),
            "connected_endpoints": obj.get("connected_endpoints"),
            "connected_endpoints_reachable": obj.get("connected_endpoints_reachable"),
            "connected_endpoints_type": obj.get("connected_endpoints_type"),
            "created": obj.get("created"),
            "custom_fields": obj.get("custom_fields"),
            "description": obj.get("description"),
            "device": NestedDevice.from_dict(obj["device"]) if obj.get("device") is not None else None,
            "display": obj.get("display"),
            "id": obj.get("id"),
            "label": obj.get("label"),
            "last_updated": obj.get("last_updated"),
            "link_peers": obj.get("link_peers"),
            "link_peers_type": obj.get("link_peers_type"),
            "mark_connected": obj.get("mark_connected"),
            "maximum_draw": obj.get("maximum_draw"),
            "module": ComponentNestedModule.from_dict(obj["module"]) if obj.get("module") is not None else None,
            "name": obj.get("name"),
            "tags": [NestedTag.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "type": Type7.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "url": obj.get("url")
        })
        return _obj



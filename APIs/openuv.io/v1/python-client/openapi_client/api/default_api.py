# coding: utf-8

"""
    OpenUV - Global Real-Time UV Index Forecast API

    The missing minimalistic JSON real-time UV Index API for awesome Developers, Innovators and Smart Home Enthusiasts

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictFloat, StrictInt, StrictStr
from typing import Any, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.forecast import Forecast

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def forecast_get(
        self,
        lat: Annotated[Union[StrictFloat, StrictInt], Field(description="latitude, from -90.00 to 90.00")],
        lng: Annotated[Union[StrictFloat, StrictInt], Field(description="longitude, from -180.00 to 180.00")],
        x_access_token: Annotated[StrictStr, Field(description="This header is used to send data that contains your OpenUV API key")],
        alt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Altitude in meters, from 0 to 10000m, 0m by default. If provided the altitude correction factor will be applied to clear sky sea level UV Index value.")] = None,
        ozone: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Ozone in du (Dobson Units), from 100 to 550du, the latest forecast from OMI dataset is used by default.")] = None,
        dt: Annotated[Optional[datetime], Field(description="UTC datetime in ISO-8601 format, now by default. Use that parameter to get UV Index Forecast for any point in time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[List[Forecast]]:
        """forecast_get

        Get hourly UV Index Forecast by location and date. Optional altitude, ozone level and datetime could be provided.

        :param lat: latitude, from -90.00 to 90.00 (required)
        :type lat: float
        :param lng: longitude, from -180.00 to 180.00 (required)
        :type lng: float
        :param x_access_token: This header is used to send data that contains your OpenUV API key (required)
        :type x_access_token: str
        :param alt: Altitude in meters, from 0 to 10000m, 0m by default. If provided the altitude correction factor will be applied to clear sky sea level UV Index value.
        :type alt: float
        :param ozone: Ozone in du (Dobson Units), from 100 to 550du, the latest forecast from OMI dataset is used by default.
        :type ozone: float
        :param dt: UTC datetime in ISO-8601 format, now by default. Use that parameter to get UV Index Forecast for any point in time.
        :type dt: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._forecast_get_serialize(
            lat=lat,
            lng=lng,
            x_access_token=x_access_token,
            alt=alt,
            ozone=ozone,
            dt=dt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[List[Forecast]]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def forecast_get_with_http_info(
        self,
        lat: Annotated[Union[StrictFloat, StrictInt], Field(description="latitude, from -90.00 to 90.00")],
        lng: Annotated[Union[StrictFloat, StrictInt], Field(description="longitude, from -180.00 to 180.00")],
        x_access_token: Annotated[StrictStr, Field(description="This header is used to send data that contains your OpenUV API key")],
        alt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Altitude in meters, from 0 to 10000m, 0m by default. If provided the altitude correction factor will be applied to clear sky sea level UV Index value.")] = None,
        ozone: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Ozone in du (Dobson Units), from 100 to 550du, the latest forecast from OMI dataset is used by default.")] = None,
        dt: Annotated[Optional[datetime], Field(description="UTC datetime in ISO-8601 format, now by default. Use that parameter to get UV Index Forecast for any point in time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[List[Forecast]]]:
        """forecast_get

        Get hourly UV Index Forecast by location and date. Optional altitude, ozone level and datetime could be provided.

        :param lat: latitude, from -90.00 to 90.00 (required)
        :type lat: float
        :param lng: longitude, from -180.00 to 180.00 (required)
        :type lng: float
        :param x_access_token: This header is used to send data that contains your OpenUV API key (required)
        :type x_access_token: str
        :param alt: Altitude in meters, from 0 to 10000m, 0m by default. If provided the altitude correction factor will be applied to clear sky sea level UV Index value.
        :type alt: float
        :param ozone: Ozone in du (Dobson Units), from 100 to 550du, the latest forecast from OMI dataset is used by default.
        :type ozone: float
        :param dt: UTC datetime in ISO-8601 format, now by default. Use that parameter to get UV Index Forecast for any point in time.
        :type dt: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._forecast_get_serialize(
            lat=lat,
            lng=lng,
            x_access_token=x_access_token,
            alt=alt,
            ozone=ozone,
            dt=dt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[List[Forecast]]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def forecast_get_without_preload_content(
        self,
        lat: Annotated[Union[StrictFloat, StrictInt], Field(description="latitude, from -90.00 to 90.00")],
        lng: Annotated[Union[StrictFloat, StrictInt], Field(description="longitude, from -180.00 to 180.00")],
        x_access_token: Annotated[StrictStr, Field(description="This header is used to send data that contains your OpenUV API key")],
        alt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Altitude in meters, from 0 to 10000m, 0m by default. If provided the altitude correction factor will be applied to clear sky sea level UV Index value.")] = None,
        ozone: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Ozone in du (Dobson Units), from 100 to 550du, the latest forecast from OMI dataset is used by default.")] = None,
        dt: Annotated[Optional[datetime], Field(description="UTC datetime in ISO-8601 format, now by default. Use that parameter to get UV Index Forecast for any point in time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """forecast_get

        Get hourly UV Index Forecast by location and date. Optional altitude, ozone level and datetime could be provided.

        :param lat: latitude, from -90.00 to 90.00 (required)
        :type lat: float
        :param lng: longitude, from -180.00 to 180.00 (required)
        :type lng: float
        :param x_access_token: This header is used to send data that contains your OpenUV API key (required)
        :type x_access_token: str
        :param alt: Altitude in meters, from 0 to 10000m, 0m by default. If provided the altitude correction factor will be applied to clear sky sea level UV Index value.
        :type alt: float
        :param ozone: Ozone in du (Dobson Units), from 100 to 550du, the latest forecast from OMI dataset is used by default.
        :type ozone: float
        :param dt: UTC datetime in ISO-8601 format, now by default. Use that parameter to get UV Index Forecast for any point in time.
        :type dt: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._forecast_get_serialize(
            lat=lat,
            lng=lng,
            x_access_token=x_access_token,
            alt=alt,
            ozone=ozone,
            dt=dt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[List[Forecast]]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _forecast_get_serialize(
        self,
        lat,
        lng,
        x_access_token,
        alt,
        ozone,
        dt,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if lat is not None:
            
            _query_params.append(('lat', lat))
            
        if lng is not None:
            
            _query_params.append(('lng', lng))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if ozone is not None:
            
            _query_params.append(('ozone', ozone))
            
        if dt is not None:
            if isinstance(dt, datetime):
                _query_params.append(
                    (
                        'dt',
                        dt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('dt', dt))
            
        # process the header parameters
        if x_access_token is not None:
            _header_params['x-access-token'] = x_access_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/forecast',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def protection_get(
        self,
        lat: Annotated[Union[StrictFloat, StrictInt], Field(description="latitude, from -90.00 to 90.00")],
        lng: Annotated[Union[StrictFloat, StrictInt], Field(description="longitude, from -180.00 to 180.00")],
        var_from: Annotated[Union[StrictFloat, StrictInt], Field(description="UV Index from value for protection datetime lookup. From 0 to 40.")],
        to: Annotated[Union[StrictFloat, StrictInt], Field(description="UV Index to value for protection datetime lookup. From 0 to 40.")],
        x_access_token: Annotated[StrictStr, Field(description="This header is used to send data that contains your OpenUV API key")],
        alt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Altitude in meters, from 0 to 10000m, 0m by default. If provided the altitude correction factor will be applied to clear sky sea level UV Index value.")] = None,
        ozone: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Ozone in du (Dobson Units), from 100 to 550du, the latest forecast from OMI dataset is used by default.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProtectionResult:
        """protection_get

        Get daily protection time by location, UV Index from and UV Index to with 10 minutes accuracy. Optional altitide and ozone level could be provided.

        :param lat: latitude, from -90.00 to 90.00 (required)
        :type lat: float
        :param lng: longitude, from -180.00 to 180.00 (required)
        :type lng: float
        :param var_from: UV Index from value for protection datetime lookup. From 0 to 40. (required)
        :type var_from: float
        :param to: UV Index to value for protection datetime lookup. From 0 to 40. (required)
        :type to: float
        :param x_access_token: This header is used to send data that contains your OpenUV API key (required)
        :type x_access_token: str
        :param alt: Altitude in meters, from 0 to 10000m, 0m by default. If provided the altitude correction factor will be applied to clear sky sea level UV Index value.
        :type alt: float
        :param ozone: Ozone in du (Dobson Units), from 100 to 550du, the latest forecast from OMI dataset is used by default.
        :type ozone: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._protection_get_serialize(
            lat=lat,
            lng=lng,
            var_from=var_from,
            to=to,
            x_access_token=x_access_token,
            alt=alt,
            ozone=ozone,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProtectionResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def protection_get_with_http_info(
        self,
        lat: Annotated[Union[StrictFloat, StrictInt], Field(description="latitude, from -90.00 to 90.00")],
        lng: Annotated[Union[StrictFloat, StrictInt], Field(description="longitude, from -180.00 to 180.00")],
        var_from: Annotated[Union[StrictFloat, StrictInt], Field(description="UV Index from value for protection datetime lookup. From 0 to 40.")],
        to: Annotated[Union[StrictFloat, StrictInt], Field(description="UV Index to value for protection datetime lookup. From 0 to 40.")],
        x_access_token: Annotated[StrictStr, Field(description="This header is used to send data that contains your OpenUV API key")],
        alt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Altitude in meters, from 0 to 10000m, 0m by default. If provided the altitude correction factor will be applied to clear sky sea level UV Index value.")] = None,
        ozone: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Ozone in du (Dobson Units), from 100 to 550du, the latest forecast from OMI dataset is used by default.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProtectionResult]:
        """protection_get

        Get daily protection time by location, UV Index from and UV Index to with 10 minutes accuracy. Optional altitide and ozone level could be provided.

        :param lat: latitude, from -90.00 to 90.00 (required)
        :type lat: float
        :param lng: longitude, from -180.00 to 180.00 (required)
        :type lng: float
        :param var_from: UV Index from value for protection datetime lookup. From 0 to 40. (required)
        :type var_from: float
        :param to: UV Index to value for protection datetime lookup. From 0 to 40. (required)
        :type to: float
        :param x_access_token: This header is used to send data that contains your OpenUV API key (required)
        :type x_access_token: str
        :param alt: Altitude in meters, from 0 to 10000m, 0m by default. If provided the altitude correction factor will be applied to clear sky sea level UV Index value.
        :type alt: float
        :param ozone: Ozone in du (Dobson Units), from 100 to 550du, the latest forecast from OMI dataset is used by default.
        :type ozone: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._protection_get_serialize(
            lat=lat,
            lng=lng,
            var_from=var_from,
            to=to,
            x_access_token=x_access_token,
            alt=alt,
            ozone=ozone,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProtectionResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def protection_get_without_preload_content(
        self,
        lat: Annotated[Union[StrictFloat, StrictInt], Field(description="latitude, from -90.00 to 90.00")],
        lng: Annotated[Union[StrictFloat, StrictInt], Field(description="longitude, from -180.00 to 180.00")],
        var_from: Annotated[Union[StrictFloat, StrictInt], Field(description="UV Index from value for protection datetime lookup. From 0 to 40.")],
        to: Annotated[Union[StrictFloat, StrictInt], Field(description="UV Index to value for protection datetime lookup. From 0 to 40.")],
        x_access_token: Annotated[StrictStr, Field(description="This header is used to send data that contains your OpenUV API key")],
        alt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Altitude in meters, from 0 to 10000m, 0m by default. If provided the altitude correction factor will be applied to clear sky sea level UV Index value.")] = None,
        ozone: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Ozone in du (Dobson Units), from 100 to 550du, the latest forecast from OMI dataset is used by default.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """protection_get

        Get daily protection time by location, UV Index from and UV Index to with 10 minutes accuracy. Optional altitide and ozone level could be provided.

        :param lat: latitude, from -90.00 to 90.00 (required)
        :type lat: float
        :param lng: longitude, from -180.00 to 180.00 (required)
        :type lng: float
        :param var_from: UV Index from value for protection datetime lookup. From 0 to 40. (required)
        :type var_from: float
        :param to: UV Index to value for protection datetime lookup. From 0 to 40. (required)
        :type to: float
        :param x_access_token: This header is used to send data that contains your OpenUV API key (required)
        :type x_access_token: str
        :param alt: Altitude in meters, from 0 to 10000m, 0m by default. If provided the altitude correction factor will be applied to clear sky sea level UV Index value.
        :type alt: float
        :param ozone: Ozone in du (Dobson Units), from 100 to 550du, the latest forecast from OMI dataset is used by default.
        :type ozone: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._protection_get_serialize(
            lat=lat,
            lng=lng,
            var_from=var_from,
            to=to,
            x_access_token=x_access_token,
            alt=alt,
            ozone=ozone,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProtectionResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _protection_get_serialize(
        self,
        lat,
        lng,
        var_from,
        to,
        x_access_token,
        alt,
        ozone,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if lat is not None:
            
            _query_params.append(('lat', lat))
            
        if lng is not None:
            
            _query_params.append(('lng', lng))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if ozone is not None:
            
            _query_params.append(('ozone', ozone))
            
        # process the header parameters
        if x_access_token is not None:
            _header_params['x-access-token'] = x_access_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/protection',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def uv_get(
        self,
        lat: Annotated[Union[StrictFloat, StrictInt], Field(description="latitude, from -90.00 to 90.00")],
        lng: Annotated[Union[StrictFloat, StrictInt], Field(description="longitude, from -180.00 to 180.00")],
        x_access_token: Annotated[StrictStr, Field(description="This header is used to send data that contains your OpenUV API key")],
        alt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Altitude in meters, from 0 to 10000m, 0m by default. If provided the altitude correction factor will be applied to clear sky sea level UV Index value.")] = None,
        ozone: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Ozone in du (Dobson Units), from 100 to 550du, the latest forecast from OMI dataset is used by default.")] = None,
        dt: Annotated[Optional[datetime], Field(description="UTC datetime in ISO-8601 format, now by default. Use that parameter to get UV Index Forecast for any point in time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UvIndexResult:
        """uv_get

        Get real-time UV Index by location. Optional altitude, ozone level and datetime could be provided.

        :param lat: latitude, from -90.00 to 90.00 (required)
        :type lat: float
        :param lng: longitude, from -180.00 to 180.00 (required)
        :type lng: float
        :param x_access_token: This header is used to send data that contains your OpenUV API key (required)
        :type x_access_token: str
        :param alt: Altitude in meters, from 0 to 10000m, 0m by default. If provided the altitude correction factor will be applied to clear sky sea level UV Index value.
        :type alt: float
        :param ozone: Ozone in du (Dobson Units), from 100 to 550du, the latest forecast from OMI dataset is used by default.
        :type ozone: float
        :param dt: UTC datetime in ISO-8601 format, now by default. Use that parameter to get UV Index Forecast for any point in time.
        :type dt: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._uv_get_serialize(
            lat=lat,
            lng=lng,
            x_access_token=x_access_token,
            alt=alt,
            ozone=ozone,
            dt=dt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UvIndexResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def uv_get_with_http_info(
        self,
        lat: Annotated[Union[StrictFloat, StrictInt], Field(description="latitude, from -90.00 to 90.00")],
        lng: Annotated[Union[StrictFloat, StrictInt], Field(description="longitude, from -180.00 to 180.00")],
        x_access_token: Annotated[StrictStr, Field(description="This header is used to send data that contains your OpenUV API key")],
        alt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Altitude in meters, from 0 to 10000m, 0m by default. If provided the altitude correction factor will be applied to clear sky sea level UV Index value.")] = None,
        ozone: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Ozone in du (Dobson Units), from 100 to 550du, the latest forecast from OMI dataset is used by default.")] = None,
        dt: Annotated[Optional[datetime], Field(description="UTC datetime in ISO-8601 format, now by default. Use that parameter to get UV Index Forecast for any point in time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UvIndexResult]:
        """uv_get

        Get real-time UV Index by location. Optional altitude, ozone level and datetime could be provided.

        :param lat: latitude, from -90.00 to 90.00 (required)
        :type lat: float
        :param lng: longitude, from -180.00 to 180.00 (required)
        :type lng: float
        :param x_access_token: This header is used to send data that contains your OpenUV API key (required)
        :type x_access_token: str
        :param alt: Altitude in meters, from 0 to 10000m, 0m by default. If provided the altitude correction factor will be applied to clear sky sea level UV Index value.
        :type alt: float
        :param ozone: Ozone in du (Dobson Units), from 100 to 550du, the latest forecast from OMI dataset is used by default.
        :type ozone: float
        :param dt: UTC datetime in ISO-8601 format, now by default. Use that parameter to get UV Index Forecast for any point in time.
        :type dt: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._uv_get_serialize(
            lat=lat,
            lng=lng,
            x_access_token=x_access_token,
            alt=alt,
            ozone=ozone,
            dt=dt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UvIndexResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def uv_get_without_preload_content(
        self,
        lat: Annotated[Union[StrictFloat, StrictInt], Field(description="latitude, from -90.00 to 90.00")],
        lng: Annotated[Union[StrictFloat, StrictInt], Field(description="longitude, from -180.00 to 180.00")],
        x_access_token: Annotated[StrictStr, Field(description="This header is used to send data that contains your OpenUV API key")],
        alt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Altitude in meters, from 0 to 10000m, 0m by default. If provided the altitude correction factor will be applied to clear sky sea level UV Index value.")] = None,
        ozone: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Ozone in du (Dobson Units), from 100 to 550du, the latest forecast from OMI dataset is used by default.")] = None,
        dt: Annotated[Optional[datetime], Field(description="UTC datetime in ISO-8601 format, now by default. Use that parameter to get UV Index Forecast for any point in time.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """uv_get

        Get real-time UV Index by location. Optional altitude, ozone level and datetime could be provided.

        :param lat: latitude, from -90.00 to 90.00 (required)
        :type lat: float
        :param lng: longitude, from -180.00 to 180.00 (required)
        :type lng: float
        :param x_access_token: This header is used to send data that contains your OpenUV API key (required)
        :type x_access_token: str
        :param alt: Altitude in meters, from 0 to 10000m, 0m by default. If provided the altitude correction factor will be applied to clear sky sea level UV Index value.
        :type alt: float
        :param ozone: Ozone in du (Dobson Units), from 100 to 550du, the latest forecast from OMI dataset is used by default.
        :type ozone: float
        :param dt: UTC datetime in ISO-8601 format, now by default. Use that parameter to get UV Index Forecast for any point in time.
        :type dt: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._uv_get_serialize(
            lat=lat,
            lng=lng,
            x_access_token=x_access_token,
            alt=alt,
            ozone=ozone,
            dt=dt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UvIndexResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _uv_get_serialize(
        self,
        lat,
        lng,
        x_access_token,
        alt,
        ozone,
        dt,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if lat is not None:
            
            _query_params.append(('lat', lat))
            
        if lng is not None:
            
            _query_params.append(('lng', lng))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if ozone is not None:
            
            _query_params.append(('ozone', ozone))
            
        if dt is not None:
            if isinstance(dt, datetime):
                _query_params.append(
                    (
                        'dt',
                        dt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('dt', dt))
            
        # process the header parameters
        if x_access_token is not None:
            _header_params['x-access-token'] = x_access_token
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/uv',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    Intel Product Catalogue Service

    This is the documentation for PIM Micro services. In order to use this tool you need to have Basic Auth credentials and a client id. If you dont have one, please make sure to request one by sending an email to the PIM MS team: [pim.360.team@intel.com](mailto:pim.360.team@intel.com?subject=PIMServices)

    The version of the OpenAPI document: 0.1.0
    Contact: pim.360.team@intel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.detailed_product_information_result_inner import DetailedProductInformationResultInner

class TestDetailedProductInformationResultInner(unittest.TestCase):
    """DetailedProductInformationResultInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DetailedProductInformationResultInner:
        """Test DetailedProductInformationResultInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DetailedProductInformationResultInner`
        """
        model = DetailedProductInformationResultInner()
        if include_optional:
            return DetailedProductInformationResultInner(
                created_date = '2017-12-18T03:40:13:990-0500',
                media_asset = openapi_client.models.detailed_product_information_result_inner_all_of_media_asset.Detailed_product_information_result_inner_allOf_media_asset(
                    picture_1 = '', 
                    picture_2 = '', 
                    picture_3 = '', 
                    picture_4 = '', 
                    picture_5 = '', ),
                mktg_prd_type = '18',
                product_category = [
                    ''
                    ],
                product_description = 'Intel Atom® Processor C2316 (1M Cache, 1.50 GHz)',
                product_id = '123003',
                product_manufacturer = 'Intel',
                product_name = 'Intel Atom® Processor C2316 (1M Cache, 1.50 GHz)',
                product_name_raw = 'Intel Atom® Processor C2316 (1M Cache, 1.50 GHz)',
                product_on_market_date = '2017-07-11T00:00:00:000-0400',
                product_picture = 'https://www.intel.com/content/dam/www/global/ark/badges/36866_128.gif/jcr:content/renditions/_64.gif',
                reference = [
                    openapi_client.models.detailed_product_information_result_inner_all_of_reference_inner.Detailed_product_information_result_inner_allOf_reference_inner(
                        category_id = [
                            ''
                            ], 
                        reference_id = '2345', 
                        reference_type = 'Compatible', )
                    ],
                tech_spec = [
                    openapi_client.models.detailed_product_information_result_inner_all_of_tech_spec_inner.Detailed_product_information_result_inner_allOf_tech_spec_inner(
                        disclaimer = 'Max Turbo Frequency refers to the maximum single-core processor frequency that can be achieved with Intel® Turbo Boost Technology.  See <a href="http://www.intel.com/technology/turboboost/">www.intel.com/technology/turboboost/</a> for more information.', 
                        highlight_key = 'TBTVersion', 
                        label = 'Intel® Turbo Boost Technology <small><sup>‡</sup></small>', 
                        raw_value = '2', 
                        tool_tip = 'Intel® Turbo Boost Technology dynamically increases the processor's frequency as needed by taking advantage of thermal and power headroom to give you a burst of speed when you need it, and increased energy efficiency when you don’t.', 
                        value = '2.0', )
                    ],
                updated_date = '2018-10-15T03:42:52:320-0400'
            )
        else:
            return DetailedProductInformationResultInner(
        )
        """

    def testDetailedProductInformationResultInner(self):
        """Test DetailedProductInformationResultInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    ContentDepot

    ContentDepot hosts a range of APIâ€™s that allow clients to manage, discover, and obtain content. The API spans many parts of the ContentDepot functionality including MetaPub (a.k.a. metadata distribution) and content management.  ## MetaPub  MetaPub collects, normalizes and distributes publicly available program, episode, and piece metadata through the public radio system. Backed by ContentDepot and its data model, MetaPub allows producers to supply metadata through various methods:  1. MetaPub Agents that collect producer metadata by \"crawling\" existing public feeds (e.g. C24, BBC) or the producer's production system (e.g. ATC, ME, TED Radio Hour). 2. Manually enter metadata in the ContentDepot Portal on each program and episode. 3. Publish/push the metadata to the MetaPub upload API and execute an ingest job.  MetaPub then distributes this data to stations through an electronic program guide (EPG model) for display on various listener devices such as smart phones, tablets, web streams, HD radios, RDBS enabled FM radios, and more. The EPG format is based on the RadioDNS specifications.  ### RadioDNS  The RadioDNS Service and Programme Information Specification ([ETSI TS 102 818 v3.4.1](https://www.etsi.org/deliver/etsi_ts/102800_102899/102818/03.04.01_60/ts_102818v030401p.pdf)) defines three primary documents: Service Information, Program Information, and Group Information. These documents, along with the core RadioDNS Hybrid Lookup for Radio Services Specification ([ETSI TS 103 270 v1.4.1](https://www.etsi.org/deliver/etsi_ts/103200_103299/103270/01.04.01_60/ts_103270v010401p.pdf)), define a system where an end listener device can dynamically discover program metadata and fetch the metadata via Internet Protocol (IP) requests. MetaPub's use of RadioDNS differs slightly in that MetaPub (a.k.a PRSS) acts as the \"service provider\" while the stations and related middleware act as the end devices. While this is not the primary use case of RadioDNS, the flexibility in the specification, service definitions, and DNS resolution allows this model to be easily represented. MetaPub provides both _National Metadata_ and _Station Metadata_.  It is strongly recommended that the related [RadioDNS specifications](https://radiodns.org/developers/documentation/) be read for implementation details, definitions, and required XML schemas.  ## ContentDepot Drive  ContentDepot Drive (CD Drive) provides a private, per customer file storage solution similar to other cloud storage solutions such as Google Drive, Box, and Dropbox. The CD Drive is used to stage content uploads such as metadata files, images, or segment audio before associating the content with specific programs or episodes.  CD Drive content can be referenced using a URI by some operations such as synchronizing metadata. There are two possible CD Drive URI formats supported: ID and hierarchical path. The ID reference takes the form ```cddrive:id:{value}``` where value is the integer ID of the file or folder being referenced. The hierarchical path reference takes the form ```cddrive://{path}``` where path is the full, UNIX style path to the file or folder starting with '/'. For example, two CD Drive URIs pointing to the same file may be ```cddrive:id:12345``` and ```cddrive:///show1/episode2/metadata.xml```. More information about URIs can be found at [Wikipedia](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier).  ## Authentication  The API currently uses OAuth 2.0.  All operations require ```cd:full``` access where the client access is only limited by the permissions of the ContentDepot user after authentication. Limiting access scope per client is not currently supported. 

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Segment(BaseModel):
    """
    An audio segment in an episode.
    """ # noqa: E501
    channels: Optional[StrictInt] = Field(default=None, description="The number of audio channels in the segment. Generated at creation.")
    created_date: Optional[datetime] = Field(default=None, description="The date the segment was created. Generated at creation.", alias="createdDate")
    episode_id: Annotated[int, Field(strict=True, ge=0)] = Field(description="The ID of the episode that owns the segment.", alias="episodeId")
    file_name: Optional[StrictStr] = Field(default=None, description="The name of the audio content file. Generated at creation.", alias="fileName")
    file_size: Optional[StrictInt] = Field(default=None, description="The size of the audio content file in bytes. Generated at creation.", alias="fileSize")
    id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The unique ID of the segment. Generated at creation.")
    in_cue: Optional[StrictStr] = Field(default=None, description="The in-cue copy that signals the start of the segment to a board operator.", alias="inCue")
    last_modified_date: Optional[datetime] = Field(default=None, description="The date the segment was last modified/updated. Automatically updated on any write operation.", alias="lastModifiedDate")
    length: Optional[StrictInt] = Field(default=None, description="The length (duration) of the segment in seconds.")
    original_file_name: Optional[StrictStr] = Field(default=None, description="The original name of the audio content file.", alias="originalFileName")
    out_cue: Optional[StrictStr] = Field(default=None, description="The out-cue copy that signals the end of the segment to a board operator.", alias="outCue")
    segment_number: Annotated[int, Field(strict=True, ge=1)] = Field(description="The number of the segment in the episode, starting with 1.", alias="segmentNumber")
    __properties: ClassVar[List[str]] = ["channels", "createdDate", "episodeId", "fileName", "fileSize", "id", "inCue", "lastModifiedDate", "length", "originalFileName", "outCue", "segmentNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Segment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Segment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channels": obj.get("channels"),
            "createdDate": obj.get("createdDate"),
            "episodeId": obj.get("episodeId"),
            "fileName": obj.get("fileName"),
            "fileSize": obj.get("fileSize"),
            "id": obj.get("id"),
            "inCue": obj.get("inCue"),
            "lastModifiedDate": obj.get("lastModifiedDate"),
            "length": obj.get("length"),
            "originalFileName": obj.get("originalFileName"),
            "outCue": obj.get("outCue"),
            "segmentNumber": obj.get("segmentNumber")
        })
        return _obj



# coding: utf-8

"""
    Beanstream Payments

    https://www.beanstream.com/api/v1

    The version of the OpenAPI document: 1.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SearchRecord(BaseModel):
    """
    SearchRecord
    """ # noqa: E501
    b_address1: Optional[StrictStr] = None
    b_address2: Optional[StrictStr] = None
    b_city: Optional[StrictStr] = None
    b_country: Optional[StrictStr] = None
    b_email: Optional[StrictStr] = None
    b_name: Optional[StrictStr] = None
    b_phone: Optional[StrictStr] = None
    b_postal: Optional[StrictStr] = None
    b_province: Optional[StrictStr] = None
    customer_code: Optional[StrictStr] = Field(default=None, description="The PaymentProfile ID used in this transaction, if appropriate.")
    message_id: Optional[Union[StrictFloat, StrictInt]] = None
    message_text: Optional[StrictStr] = None
    product_id: Optional[StrictStr] = None
    product_name: Optional[StrictStr] = None
    ref1: Optional[StrictStr] = None
    ref2: Optional[StrictStr] = None
    ref3: Optional[StrictStr] = None
    ref4: Optional[StrictStr] = None
    ref5: Optional[StrictStr] = None
    row_id: Optional[Union[StrictFloat, StrictInt]] = None
    s_address1: Optional[StrictStr] = None
    s_address2: Optional[StrictStr] = None
    s_city: Optional[StrictStr] = None
    s_country: Optional[StrictStr] = None
    s_email: Optional[StrictStr] = None
    s_name: Optional[StrictStr] = None
    s_phone: Optional[StrictStr] = None
    s_postal: Optional[StrictStr] = None
    s_province: Optional[StrictStr] = None
    trn_amount: Optional[Union[StrictFloat, StrictInt]] = None
    trn_approval_code: Optional[StrictStr] = None
    trn_avs_result: Optional[StrictStr] = Field(default=None, description="Address Verification Service")
    trn_batch_no: Optional[Union[StrictFloat, StrictInt]] = None
    trn_card_expiry: Optional[StrictStr] = None
    trn_card_owner: Optional[StrictStr] = None
    trn_card_type: Optional[StrictStr] = Field(default=None, description="MC VI etc")
    trn_completions: Optional[Union[StrictFloat, StrictInt]] = None
    trn_cvd_result: Optional[Union[StrictFloat, StrictInt]] = None
    trn_date_time: Optional[StrictStr] = Field(default=None, description="2015-04-22T10:03:19.323-07:00")
    trn_id: Optional[Union[StrictFloat, StrictInt]] = None
    trn_ip: Optional[StrictStr] = None
    trn_masked_card: Optional[StrictStr] = Field(default=None, description="The credit card with the middle digits redacted with X's")
    trn_order_number: Optional[StrictStr] = None
    trn_payment_method: Optional[StrictStr] = None
    trn_reference: Optional[Union[StrictFloat, StrictInt]] = None
    trn_response: Optional[Union[StrictFloat, StrictInt]] = None
    trn_returns: Optional[Union[StrictFloat, StrictInt]] = None
    trn_type: Optional[StrictStr] = None
    trn_voided: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["b_address1", "b_address2", "b_city", "b_country", "b_email", "b_name", "b_phone", "b_postal", "b_province", "customer_code", "message_id", "message_text", "product_id", "product_name", "ref1", "ref2", "ref3", "ref4", "ref5", "row_id", "s_address1", "s_address2", "s_city", "s_country", "s_email", "s_name", "s_phone", "s_postal", "s_province", "trn_amount", "trn_approval_code", "trn_avs_result", "trn_batch_no", "trn_card_expiry", "trn_card_owner", "trn_card_type", "trn_completions", "trn_cvd_result", "trn_date_time", "trn_id", "trn_ip", "trn_masked_card", "trn_order_number", "trn_payment_method", "trn_reference", "trn_response", "trn_returns", "trn_type", "trn_voided"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "b_address1": obj.get("b_address1"),
            "b_address2": obj.get("b_address2"),
            "b_city": obj.get("b_city"),
            "b_country": obj.get("b_country"),
            "b_email": obj.get("b_email"),
            "b_name": obj.get("b_name"),
            "b_phone": obj.get("b_phone"),
            "b_postal": obj.get("b_postal"),
            "b_province": obj.get("b_province"),
            "customer_code": obj.get("customer_code"),
            "message_id": obj.get("message_id"),
            "message_text": obj.get("message_text"),
            "product_id": obj.get("product_id"),
            "product_name": obj.get("product_name"),
            "ref1": obj.get("ref1"),
            "ref2": obj.get("ref2"),
            "ref3": obj.get("ref3"),
            "ref4": obj.get("ref4"),
            "ref5": obj.get("ref5"),
            "row_id": obj.get("row_id"),
            "s_address1": obj.get("s_address1"),
            "s_address2": obj.get("s_address2"),
            "s_city": obj.get("s_city"),
            "s_country": obj.get("s_country"),
            "s_email": obj.get("s_email"),
            "s_name": obj.get("s_name"),
            "s_phone": obj.get("s_phone"),
            "s_postal": obj.get("s_postal"),
            "s_province": obj.get("s_province"),
            "trn_amount": obj.get("trn_amount"),
            "trn_approval_code": obj.get("trn_approval_code"),
            "trn_avs_result": obj.get("trn_avs_result"),
            "trn_batch_no": obj.get("trn_batch_no"),
            "trn_card_expiry": obj.get("trn_card_expiry"),
            "trn_card_owner": obj.get("trn_card_owner"),
            "trn_card_type": obj.get("trn_card_type"),
            "trn_completions": obj.get("trn_completions"),
            "trn_cvd_result": obj.get("trn_cvd_result"),
            "trn_date_time": obj.get("trn_date_time"),
            "trn_id": obj.get("trn_id"),
            "trn_ip": obj.get("trn_ip"),
            "trn_masked_card": obj.get("trn_masked_card"),
            "trn_order_number": obj.get("trn_order_number"),
            "trn_payment_method": obj.get("trn_payment_method"),
            "trn_reference": obj.get("trn_reference"),
            "trn_response": obj.get("trn_response"),
            "trn_returns": obj.get("trn_returns"),
            "trn_type": obj.get("trn_type"),
            "trn_voided": obj.get("trn_voided")
        })
        return _obj



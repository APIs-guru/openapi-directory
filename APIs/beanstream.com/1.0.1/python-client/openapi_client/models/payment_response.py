# coding: utf-8

"""
    Beanstream Payments

    https://www.beanstream.com/api/v1

    The version of the OpenAPI document: 1.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.card_purchase_response import CardPurchaseResponse
from openapi_client.models.link import Link
from typing import Optional, Set
from typing_extensions import Self

class PaymentResponse(BaseModel):
    """
    PaymentResponse
    """ # noqa: E501
    approved: Optional[StrictInt] = Field(default=None, description="Approved = 1, declined = 0")
    auth_code: Optional[StrictStr] = Field(default=None, description="alphanumeric (32)")
    card: Optional[CardPurchaseResponse] = None
    created: Optional[StrictStr] = Field(default=None, description="alphanumeric (32)")
    id: Optional[StrictStr] = Field(default=None, description="digits (9)")
    links: Optional[List[Link]] = None
    message: Optional[StrictStr] = Field(default=None, description="alphanumeric (256)")
    message_id: Optional[StrictStr] = Field(default=None, description="digits (3)")
    order_number: Optional[StrictStr] = Field(default=None, description="alphanumeric (32)")
    payment_method: Optional[StrictStr] = Field(default=None, description="characters (16)")
    type: Optional[StrictStr] = Field(default=None, description="characters (16)")
    __properties: ClassVar[List[str]] = ["approved", "auth_code", "card", "created", "id", "links", "message", "message_id", "order_number", "payment_method", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of card
        if self.card:
            _dict['card'] = self.card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "approved": obj.get("approved"),
            "auth_code": obj.get("auth_code"),
            "card": CardPurchaseResponse.from_dict(obj["card"]) if obj.get("card") is not None else None,
            "created": obj.get("created"),
            "id": obj.get("id"),
            "links": [Link.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "message": obj.get("message"),
            "message_id": obj.get("message_id"),
            "order_number": obj.get("order_number"),
            "payment_method": obj.get("payment_method"),
            "type": obj.get("type")
        })
        return _obj



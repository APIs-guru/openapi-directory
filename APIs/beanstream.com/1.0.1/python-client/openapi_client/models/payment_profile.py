# coding: utf-8

"""
    Beanstream Payments

    https://www.beanstream.com/api/v1

    The version of the OpenAPI document: 1.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address import Address
from openapi_client.models.custom import Custom
from openapi_client.models.get_profile_default_card import GetProfileDefaultCard
from typing import Optional, Set
from typing_extensions import Self

class PaymentProfile(BaseModel):
    """
    PaymentProfile
    """ # noqa: E501
    account_ref: Optional[StrictStr] = None
    billing: Optional[Address] = None
    card: Optional[GetProfileDefaultCard] = None
    code: Optional[StrictInt] = Field(default=None, description="digits(2)")
    custom: Optional[Custom] = None
    customer_code: Optional[StrictStr] = Field(default=None, description="alphanumeric(32)")
    language: Optional[StrictStr] = Field(default=None, description="characters(2)")
    last_transaction: Optional[StrictStr] = Field(default=None, description="date and time alphanumeric(24)")
    message: Optional[StrictStr] = Field(default=None, description="alphanumeric(64)")
    modified_date: Optional[StrictStr] = Field(default=None, description="date and time it was last modified alphanumeric(24)")
    profile_group: Optional[StrictStr] = None
    status: Optional[StrictStr] = Field(default=None, description="characters(1)")
    velocity_group: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["account_ref", "billing", "card", "code", "custom", "customer_code", "language", "last_transaction", "message", "modified_date", "profile_group", "status", "velocity_group"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing
        if self.billing:
            _dict['billing'] = self.billing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card
        if self.card:
            _dict['card'] = self.card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom
        if self.custom:
            _dict['custom'] = self.custom.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_ref": obj.get("account_ref"),
            "billing": Address.from_dict(obj["billing"]) if obj.get("billing") is not None else None,
            "card": GetProfileDefaultCard.from_dict(obj["card"]) if obj.get("card") is not None else None,
            "code": obj.get("code"),
            "custom": Custom.from_dict(obj["custom"]) if obj.get("custom") is not None else None,
            "customer_code": obj.get("customer_code"),
            "language": obj.get("language"),
            "last_transaction": obj.get("last_transaction"),
            "message": obj.get("message"),
            "modified_date": obj.get("modified_date"),
            "profile_group": obj.get("profile_group"),
            "status": obj.get("status"),
            "velocity_group": obj.get("velocity_group")
        })
        return _obj



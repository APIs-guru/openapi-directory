# coding: utf-8

"""
    Beanstream Payments

    https://www.beanstream.com/api/v1

    The version of the OpenAPI document: 1.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.address import Address
from openapi_client.models.card import Card
from openapi_client.models.custom import Custom
from openapi_client.models.profile_purchase import ProfilePurchase
from openapi_client.models.token_purchase import TokenPurchase
from typing import Optional, Set
from typing_extensions import Self

class PaymentRequest(BaseModel):
    """
    PaymentRequest
    """ # noqa: E501
    amount: Union[StrictFloat, StrictInt] = Field(description="A decimal value in dollars, or relevant currency. digits(9)")
    billing: Optional[Address] = None
    card: Optional[Card] = None
    comments: Optional[StrictStr] = Field(default=None, description="alphanumeric (256)")
    custom: Optional[Custom] = None
    customer_ip: Optional[StrictStr] = Field(default=None, description="alphanumeric (30)")
    language: Optional[StrictStr] = Field(default=None, description="characters (3)")
    order_number: Optional[StrictStr] = Field(default=None, description="A unique order number. alphanumeric(30)")
    payment_method: StrictStr = Field(description="One of (card, token, payment_profile, cash, cheque). characters(20)")
    payment_profile: Optional[ProfilePurchase] = None
    shipping: Optional[Address] = None
    term_url: Optional[StrictStr] = Field(default=None, description="alphanumeric (256)")
    token: Optional[TokenPurchase] = None
    __properties: ClassVar[List[str]] = ["amount", "billing", "card", "comments", "custom", "customer_ip", "language", "order_number", "payment_method", "payment_profile", "shipping", "term_url", "token"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing
        if self.billing:
            _dict['billing'] = self.billing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card
        if self.card:
            _dict['card'] = self.card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom
        if self.custom:
            _dict['custom'] = self.custom.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_profile
        if self.payment_profile:
            _dict['payment_profile'] = self.payment_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping
        if self.shipping:
            _dict['shipping'] = self.shipping.to_dict()
        # override the default output from pydantic by calling `to_dict()` of token
        if self.token:
            _dict['token'] = self.token.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "billing": Address.from_dict(obj["billing"]) if obj.get("billing") is not None else None,
            "card": Card.from_dict(obj["card"]) if obj.get("card") is not None else None,
            "comments": obj.get("comments"),
            "custom": Custom.from_dict(obj["custom"]) if obj.get("custom") is not None else None,
            "customer_ip": obj.get("customer_ip"),
            "language": obj.get("language"),
            "order_number": obj.get("order_number"),
            "payment_method": obj.get("payment_method"),
            "payment_profile": ProfilePurchase.from_dict(obj["payment_profile"]) if obj.get("payment_profile") is not None else None,
            "shipping": Address.from_dict(obj["shipping"]) if obj.get("shipping") is not None else None,
            "term_url": obj.get("term_url"),
            "token": TokenPurchase.from_dict(obj["token"]) if obj.get("token") is not None else None
        })
        return _obj



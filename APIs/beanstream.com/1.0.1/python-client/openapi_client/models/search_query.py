# coding: utf-8

"""
    Beanstream Payments

    https://www.beanstream.com/api/v1

    The version of the OpenAPI document: 1.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.criteria import Criteria
from typing import Optional, Set
from typing_extensions import Self

class SearchQuery(BaseModel):
    """
    SearchQuery
    """ # noqa: E501
    criteria: Optional[List[Criteria]] = Field(default=None, description="Optional search criteria. All criteria are ANDed together.")
    end_date: StrictStr = Field(description="The end date (inclusive) '2015-04-22T10:03:19' in the timezone of your merchant account.")
    end_row: Union[StrictFloat, StrictInt] = Field(description="Used to page the results. 1-based. This should always be 1 larger than start_row.")
    name: StrictStr = Field(description="Only accepts 2 values. Can be either 'Search' for all fields or 'TransHistoryMinimal' for a subset of the fields returned in the results.")
    start_date: StrictStr = Field(description="The start date (inclusive) '2015-04-22T10:03:19' in the timezone of your merchant account.")
    start_row: Union[StrictFloat, StrictInt] = Field(description="Used to page the results. 1-based")
    __properties: ClassVar[List[str]] = ["criteria", "end_date", "end_row", "name", "start_date", "start_row"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in criteria (list)
        _items = []
        if self.criteria:
            for _item_criteria in self.criteria:
                if _item_criteria:
                    _items.append(_item_criteria.to_dict())
            _dict['criteria'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "criteria": [Criteria.from_dict(_item) for _item in obj["criteria"]] if obj.get("criteria") is not None else None,
            "end_date": obj.get("end_date"),
            "end_row": obj.get("end_row"),
            "name": obj.get("name"),
            "start_date": obj.get("start_date"),
            "start_row": obj.get("start_row")
        })
        return _obj



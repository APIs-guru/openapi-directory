# coding: utf-8

"""
    nFusion Solutions Market Data API

    [nFusion Solutions](https://nfusionsolutions.com) provides [REST APIs](https://nfusionsolutions.com/data-feeds/) that deliver enterprise-grade financial data. Data sets include real-time and historical pricing for Spot prices of precious metals such as Gold, Silver, Platinum, and Palladium, exchange rates for major currency pairs, exchange rates for Crypto Currencies such as BTC, ETH, and LTC. All API access requires authentication. In order to be issued access credentials you must first enter into a service agreement with nFusion Solutions and acquire a commercial license. For information on how to obtain a licence [take a tour of our products](https://nfusionsolutions.com/nfusion-solutions-metals-gold-price-feed-tour/) or email sales@nfusionsolutions.com.

    The version of the OpenAPI document: 1
    Contact: support@nfusionsolutions.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Interval(BaseModel):
    """
    Interval
    """ # noqa: E501
    change: Optional[Union[StrictFloat, StrictInt]] = None
    change_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="changePercent")
    end: Optional[datetime] = None
    high: Optional[Union[StrictFloat, StrictInt]] = None
    last: Optional[Union[StrictFloat, StrictInt]] = None
    low: Optional[Union[StrictFloat, StrictInt]] = None
    open: Optional[Union[StrictFloat, StrictInt]] = None
    start: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["change", "changePercent", "end", "high", "last", "low", "open", "start"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Interval from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if change (nullable) is None
        # and model_fields_set contains the field
        if self.change is None and "change" in self.model_fields_set:
            _dict['change'] = None

        # set to None if change_percent (nullable) is None
        # and model_fields_set contains the field
        if self.change_percent is None and "change_percent" in self.model_fields_set:
            _dict['changePercent'] = None

        # set to None if high (nullable) is None
        # and model_fields_set contains the field
        if self.high is None and "high" in self.model_fields_set:
            _dict['high'] = None

        # set to None if last (nullable) is None
        # and model_fields_set contains the field
        if self.last is None and "last" in self.model_fields_set:
            _dict['last'] = None

        # set to None if low (nullable) is None
        # and model_fields_set contains the field
        if self.low is None and "low" in self.model_fields_set:
            _dict['low'] = None

        # set to None if open (nullable) is None
        # and model_fields_set contains the field
        if self.open is None and "open" in self.model_fields_set:
            _dict['open'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Interval from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "change": obj.get("change"),
            "changePercent": obj.get("changePercent"),
            "end": obj.get("end"),
            "high": obj.get("high"),
            "last": obj.get("last"),
            "low": obj.get("low"),
            "open": obj.get("open"),
            "start": obj.get("start")
        })
        return _obj



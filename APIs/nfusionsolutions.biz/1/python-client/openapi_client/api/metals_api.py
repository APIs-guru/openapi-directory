# coding: utf-8

"""
    nFusion Solutions Market Data API

    [nFusion Solutions](https://nfusionsolutions.com) provides [REST APIs](https://nfusionsolutions.com/data-feeds/) that deliver enterprise-grade financial data. Data sets include real-time and historical pricing for Spot prices of precious metals such as Gold, Silver, Platinum, and Palladium, exchange rates for major currency pairs, exchange rates for Crypto Currencies such as BTC, ETH, and LTC. All API access requires authentication. In order to be issued access credentials you must first enter into a service agreement with nFusion Solutions and acquire a commercial license. For information on how to obtain a licence [take a tour of our products](https://nfusionsolutions.com/nfusion-solutions-metals-gold-price-feed-tour/) or email sales@nfusionsolutions.com.

    The version of the OpenAPI document: 1
    Contact: support@nfusionsolutions.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.interval_collection_response import IntervalCollectionResponse
from openapi_client.models.summary_response import SummaryResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class MetalsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def metals_benchmark_history_get(
        self,
        metals: Annotated[StrictStr, Field(description="comma separated list of metals")],
        start: Annotated[datetime, Field(description="start date of time period. format is <i>yyyy-mm-dd</i>")],
        end: Annotated[Optional[datetime], Field(description="end date of time period. format is <i>yyyy-mm-dd</i>. Default is current date.")] = None,
        interval: Annotated[Optional[StrictStr], Field(description="aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y=year,  m=month,  w=week,  d=day,  h=hour,  mi=minute    For example, a yearly interval can be specified as \"y\" and 6 month interval as \"6m\".     If not specified the interval parameter default is 1 Day.")] = None,
        historicalfx: Annotated[Optional[StrictBool], Field(description="if true use historical currency rates otherwise current currency rates. Defaults to true.")] = None,
        currency: Annotated[Optional[StrictStr], Field(description="comma separated list of conversion currencies, defaults to USD")] = None,
        unitofmeasure: Annotated[Optional[StrictStr], Field(description="unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight")] = None,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[IntervalCollectionResponse]:
        """Get historical benchmark prices for requested metals

        Historical OHLC data for the specified period and interval size    The combination of the interval parameter and start and end dates can result in results  being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.    The historicalfx flag is used to determine whether to apply today's fx rates to a historical period, or to apply the historical rates from that same time frame.

        :param metals: comma separated list of metals (required)
        :type metals: str
        :param start: start date of time period. format is <i>yyyy-mm-dd</i> (required)
        :type start: datetime
        :param end: end date of time period. format is <i>yyyy-mm-dd</i>. Default is current date.
        :type end: datetime
        :param interval: aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y=year,  m=month,  w=week,  d=day,  h=hour,  mi=minute    For example, a yearly interval can be specified as \"y\" and 6 month interval as \"6m\".     If not specified the interval parameter default is 1 Day.
        :type interval: str
        :param historicalfx: if true use historical currency rates otherwise current currency rates. Defaults to true.
        :type historicalfx: bool
        :param currency: comma separated list of conversion currencies, defaults to USD
        :type currency: str
        :param unitofmeasure: unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight
        :type unitofmeasure: str
        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_benchmark_history_get_serialize(
            metals=metals,
            start=start,
            end=end,
            interval=interval,
            historicalfx=historicalfx,
            currency=currency,
            unitofmeasure=unitofmeasure,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IntervalCollectionResponse]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def metals_benchmark_history_get_with_http_info(
        self,
        metals: Annotated[StrictStr, Field(description="comma separated list of metals")],
        start: Annotated[datetime, Field(description="start date of time period. format is <i>yyyy-mm-dd</i>")],
        end: Annotated[Optional[datetime], Field(description="end date of time period. format is <i>yyyy-mm-dd</i>. Default is current date.")] = None,
        interval: Annotated[Optional[StrictStr], Field(description="aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y=year,  m=month,  w=week,  d=day,  h=hour,  mi=minute    For example, a yearly interval can be specified as \"y\" and 6 month interval as \"6m\".     If not specified the interval parameter default is 1 Day.")] = None,
        historicalfx: Annotated[Optional[StrictBool], Field(description="if true use historical currency rates otherwise current currency rates. Defaults to true.")] = None,
        currency: Annotated[Optional[StrictStr], Field(description="comma separated list of conversion currencies, defaults to USD")] = None,
        unitofmeasure: Annotated[Optional[StrictStr], Field(description="unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight")] = None,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[IntervalCollectionResponse]]:
        """Get historical benchmark prices for requested metals

        Historical OHLC data for the specified period and interval size    The combination of the interval parameter and start and end dates can result in results  being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.    The historicalfx flag is used to determine whether to apply today's fx rates to a historical period, or to apply the historical rates from that same time frame.

        :param metals: comma separated list of metals (required)
        :type metals: str
        :param start: start date of time period. format is <i>yyyy-mm-dd</i> (required)
        :type start: datetime
        :param end: end date of time period. format is <i>yyyy-mm-dd</i>. Default is current date.
        :type end: datetime
        :param interval: aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y=year,  m=month,  w=week,  d=day,  h=hour,  mi=minute    For example, a yearly interval can be specified as \"y\" and 6 month interval as \"6m\".     If not specified the interval parameter default is 1 Day.
        :type interval: str
        :param historicalfx: if true use historical currency rates otherwise current currency rates. Defaults to true.
        :type historicalfx: bool
        :param currency: comma separated list of conversion currencies, defaults to USD
        :type currency: str
        :param unitofmeasure: unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight
        :type unitofmeasure: str
        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_benchmark_history_get_serialize(
            metals=metals,
            start=start,
            end=end,
            interval=interval,
            historicalfx=historicalfx,
            currency=currency,
            unitofmeasure=unitofmeasure,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IntervalCollectionResponse]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def metals_benchmark_history_get_without_preload_content(
        self,
        metals: Annotated[StrictStr, Field(description="comma separated list of metals")],
        start: Annotated[datetime, Field(description="start date of time period. format is <i>yyyy-mm-dd</i>")],
        end: Annotated[Optional[datetime], Field(description="end date of time period. format is <i>yyyy-mm-dd</i>. Default is current date.")] = None,
        interval: Annotated[Optional[StrictStr], Field(description="aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y=year,  m=month,  w=week,  d=day,  h=hour,  mi=minute    For example, a yearly interval can be specified as \"y\" and 6 month interval as \"6m\".     If not specified the interval parameter default is 1 Day.")] = None,
        historicalfx: Annotated[Optional[StrictBool], Field(description="if true use historical currency rates otherwise current currency rates. Defaults to true.")] = None,
        currency: Annotated[Optional[StrictStr], Field(description="comma separated list of conversion currencies, defaults to USD")] = None,
        unitofmeasure: Annotated[Optional[StrictStr], Field(description="unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight")] = None,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get historical benchmark prices for requested metals

        Historical OHLC data for the specified period and interval size    The combination of the interval parameter and start and end dates can result in results  being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.    The historicalfx flag is used to determine whether to apply today's fx rates to a historical period, or to apply the historical rates from that same time frame.

        :param metals: comma separated list of metals (required)
        :type metals: str
        :param start: start date of time period. format is <i>yyyy-mm-dd</i> (required)
        :type start: datetime
        :param end: end date of time period. format is <i>yyyy-mm-dd</i>. Default is current date.
        :type end: datetime
        :param interval: aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y=year,  m=month,  w=week,  d=day,  h=hour,  mi=minute    For example, a yearly interval can be specified as \"y\" and 6 month interval as \"6m\".     If not specified the interval parameter default is 1 Day.
        :type interval: str
        :param historicalfx: if true use historical currency rates otherwise current currency rates. Defaults to true.
        :type historicalfx: bool
        :param currency: comma separated list of conversion currencies, defaults to USD
        :type currency: str
        :param unitofmeasure: unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight
        :type unitofmeasure: str
        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_benchmark_history_get_serialize(
            metals=metals,
            start=start,
            end=end,
            interval=interval,
            historicalfx=historicalfx,
            currency=currency,
            unitofmeasure=unitofmeasure,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IntervalCollectionResponse]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _metals_benchmark_history_get_serialize(
        self,
        metals,
        start,
        end,
        interval,
        historicalfx,
        currency,
        unitofmeasure,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if metals is not None:
            
            _query_params.append(('metals', metals))
            
        if start is not None:
            if isinstance(start, datetime):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, datetime):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if interval is not None:
            
            _query_params.append(('interval', interval))
            
        if historicalfx is not None:
            
            _query_params.append(('historicalfx', historicalfx))
            
        if currency is not None:
            
            _query_params.append(('currency', currency))
            
        if unitofmeasure is not None:
            
            _query_params.append(('unitofmeasure', unitofmeasure))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/Metals/benchmark/history',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def metals_benchmark_summary_get(
        self,
        metals: Annotated[StrictStr, Field(description="comma separated list of metals")],
        currency: Annotated[Optional[StrictStr], Field(description="comma separated list of conversion currencies, defaults to USD")] = None,
        unitofmeasure: Annotated[Optional[StrictStr], Field(description="unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight")] = None,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[SummaryResponse]:
        """Get latest Benchmark prices for requested metals

        Benchmark price information

        :param metals: comma separated list of metals (required)
        :type metals: str
        :param currency: comma separated list of conversion currencies, defaults to USD
        :type currency: str
        :param unitofmeasure: unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight
        :type unitofmeasure: str
        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_benchmark_summary_get_serialize(
            metals=metals,
            currency=currency,
            unitofmeasure=unitofmeasure,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SummaryResponse]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def metals_benchmark_summary_get_with_http_info(
        self,
        metals: Annotated[StrictStr, Field(description="comma separated list of metals")],
        currency: Annotated[Optional[StrictStr], Field(description="comma separated list of conversion currencies, defaults to USD")] = None,
        unitofmeasure: Annotated[Optional[StrictStr], Field(description="unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight")] = None,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[SummaryResponse]]:
        """Get latest Benchmark prices for requested metals

        Benchmark price information

        :param metals: comma separated list of metals (required)
        :type metals: str
        :param currency: comma separated list of conversion currencies, defaults to USD
        :type currency: str
        :param unitofmeasure: unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight
        :type unitofmeasure: str
        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_benchmark_summary_get_serialize(
            metals=metals,
            currency=currency,
            unitofmeasure=unitofmeasure,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SummaryResponse]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def metals_benchmark_summary_get_without_preload_content(
        self,
        metals: Annotated[StrictStr, Field(description="comma separated list of metals")],
        currency: Annotated[Optional[StrictStr], Field(description="comma separated list of conversion currencies, defaults to USD")] = None,
        unitofmeasure: Annotated[Optional[StrictStr], Field(description="unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight")] = None,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get latest Benchmark prices for requested metals

        Benchmark price information

        :param metals: comma separated list of metals (required)
        :type metals: str
        :param currency: comma separated list of conversion currencies, defaults to USD
        :type currency: str
        :param unitofmeasure: unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight
        :type unitofmeasure: str
        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_benchmark_summary_get_serialize(
            metals=metals,
            currency=currency,
            unitofmeasure=unitofmeasure,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SummaryResponse]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _metals_benchmark_summary_get_serialize(
        self,
        metals,
        currency,
        unitofmeasure,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if metals is not None:
            
            _query_params.append(('metals', metals))
            
        if currency is not None:
            
            _query_params.append(('currency', currency))
            
        if unitofmeasure is not None:
            
            _query_params.append(('unitofmeasure', unitofmeasure))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/Metals/benchmark/summary',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def metals_benchmark_supported_metals_get(
        self,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[str]:
        """Get list of symbols supported by the benchmark endpoints

        

        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_benchmark_supported_metals_get_serialize(
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def metals_benchmark_supported_metals_get_with_http_info(
        self,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[str]]:
        """Get list of symbols supported by the benchmark endpoints

        

        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_benchmark_supported_metals_get_serialize(
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def metals_benchmark_supported_metals_get_without_preload_content(
        self,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get list of symbols supported by the benchmark endpoints

        

        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_benchmark_supported_metals_get_serialize(
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _metals_benchmark_supported_metals_get_serialize(
        self,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/Metals/benchmark/supported',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def metals_spot_annual_historical_performance_get(
        self,
        metals: Annotated[StrictStr, Field(description="comma separated list of metals")],
        currency: Annotated[Optional[StrictStr], Field(description="comma separated list of conversion currencies, defaults to USD")] = None,
        unitofmeasure: Annotated[Optional[StrictStr], Field(description="unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight")] = None,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        years: Annotated[Optional[StrictInt], Field(description="Number of years of history to return. Defaults to 10.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[IntervalCollectionResponse]:
        """Get Historical Annual Performance for requested metals

        Annual Historical Performance information

        :param metals: comma separated list of metals (required)
        :type metals: str
        :param currency: comma separated list of conversion currencies, defaults to USD
        :type currency: str
        :param unitofmeasure: unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight
        :type unitofmeasure: str
        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param years: Number of years of history to return. Defaults to 10.
        :type years: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_spot_annual_historical_performance_get_serialize(
            metals=metals,
            currency=currency,
            unitofmeasure=unitofmeasure,
            format=format,
            years=years,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IntervalCollectionResponse]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def metals_spot_annual_historical_performance_get_with_http_info(
        self,
        metals: Annotated[StrictStr, Field(description="comma separated list of metals")],
        currency: Annotated[Optional[StrictStr], Field(description="comma separated list of conversion currencies, defaults to USD")] = None,
        unitofmeasure: Annotated[Optional[StrictStr], Field(description="unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight")] = None,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        years: Annotated[Optional[StrictInt], Field(description="Number of years of history to return. Defaults to 10.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[IntervalCollectionResponse]]:
        """Get Historical Annual Performance for requested metals

        Annual Historical Performance information

        :param metals: comma separated list of metals (required)
        :type metals: str
        :param currency: comma separated list of conversion currencies, defaults to USD
        :type currency: str
        :param unitofmeasure: unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight
        :type unitofmeasure: str
        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param years: Number of years of history to return. Defaults to 10.
        :type years: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_spot_annual_historical_performance_get_serialize(
            metals=metals,
            currency=currency,
            unitofmeasure=unitofmeasure,
            format=format,
            years=years,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IntervalCollectionResponse]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def metals_spot_annual_historical_performance_get_without_preload_content(
        self,
        metals: Annotated[StrictStr, Field(description="comma separated list of metals")],
        currency: Annotated[Optional[StrictStr], Field(description="comma separated list of conversion currencies, defaults to USD")] = None,
        unitofmeasure: Annotated[Optional[StrictStr], Field(description="unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight")] = None,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        years: Annotated[Optional[StrictInt], Field(description="Number of years of history to return. Defaults to 10.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Historical Annual Performance for requested metals

        Annual Historical Performance information

        :param metals: comma separated list of metals (required)
        :type metals: str
        :param currency: comma separated list of conversion currencies, defaults to USD
        :type currency: str
        :param unitofmeasure: unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight
        :type unitofmeasure: str
        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param years: Number of years of history to return. Defaults to 10.
        :type years: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_spot_annual_historical_performance_get_serialize(
            metals=metals,
            currency=currency,
            unitofmeasure=unitofmeasure,
            format=format,
            years=years,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IntervalCollectionResponse]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _metals_spot_annual_historical_performance_get_serialize(
        self,
        metals,
        currency,
        unitofmeasure,
        format,
        years,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if metals is not None:
            
            _query_params.append(('metals', metals))
            
        if currency is not None:
            
            _query_params.append(('currency', currency))
            
        if unitofmeasure is not None:
            
            _query_params.append(('unitofmeasure', unitofmeasure))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        if years is not None:
            
            _query_params.append(('years', years))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/Metals/spot/performance/annual',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def metals_spot_historical_performance_get(
        self,
        metals: Annotated[StrictStr, Field(description="comma separated list of metals")],
        currency: Annotated[Optional[StrictStr], Field(description="comma separated list of conversion currencies, defaults to USD")] = None,
        unitofmeasure: Annotated[Optional[StrictStr], Field(description="unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight")] = None,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[IntervalCollectionResponse]:
        """Get Historical Performance for requested metals

        Historical Performance information

        :param metals: comma separated list of metals (required)
        :type metals: str
        :param currency: comma separated list of conversion currencies, defaults to USD
        :type currency: str
        :param unitofmeasure: unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight
        :type unitofmeasure: str
        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_spot_historical_performance_get_serialize(
            metals=metals,
            currency=currency,
            unitofmeasure=unitofmeasure,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IntervalCollectionResponse]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def metals_spot_historical_performance_get_with_http_info(
        self,
        metals: Annotated[StrictStr, Field(description="comma separated list of metals")],
        currency: Annotated[Optional[StrictStr], Field(description="comma separated list of conversion currencies, defaults to USD")] = None,
        unitofmeasure: Annotated[Optional[StrictStr], Field(description="unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight")] = None,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[IntervalCollectionResponse]]:
        """Get Historical Performance for requested metals

        Historical Performance information

        :param metals: comma separated list of metals (required)
        :type metals: str
        :param currency: comma separated list of conversion currencies, defaults to USD
        :type currency: str
        :param unitofmeasure: unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight
        :type unitofmeasure: str
        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_spot_historical_performance_get_serialize(
            metals=metals,
            currency=currency,
            unitofmeasure=unitofmeasure,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IntervalCollectionResponse]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def metals_spot_historical_performance_get_without_preload_content(
        self,
        metals: Annotated[StrictStr, Field(description="comma separated list of metals")],
        currency: Annotated[Optional[StrictStr], Field(description="comma separated list of conversion currencies, defaults to USD")] = None,
        unitofmeasure: Annotated[Optional[StrictStr], Field(description="unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight")] = None,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Historical Performance for requested metals

        Historical Performance information

        :param metals: comma separated list of metals (required)
        :type metals: str
        :param currency: comma separated list of conversion currencies, defaults to USD
        :type currency: str
        :param unitofmeasure: unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight
        :type unitofmeasure: str
        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_spot_historical_performance_get_serialize(
            metals=metals,
            currency=currency,
            unitofmeasure=unitofmeasure,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IntervalCollectionResponse]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _metals_spot_historical_performance_get_serialize(
        self,
        metals,
        currency,
        unitofmeasure,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if metals is not None:
            
            _query_params.append(('metals', metals))
            
        if currency is not None:
            
            _query_params.append(('currency', currency))
            
        if unitofmeasure is not None:
            
            _query_params.append(('unitofmeasure', unitofmeasure))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/Metals/spot/performance',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def metals_spot_history_get(
        self,
        metals: Annotated[StrictStr, Field(description="comma separated list of metals")],
        start: Annotated[datetime, Field(description="start date of time period. format is <i>yyyy-mm-dd</i>")],
        end: Annotated[Optional[datetime], Field(description="end date of time period. format is <i>yyyy-mm-dd</i>. Default is current date.")] = None,
        interval: Annotated[Optional[StrictStr], Field(description="aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y=year,  m=month,  w=week,  d=day,  h=hour,  mi=minute    For example, a yearly interval can be specified as \"y\" and 6 month interval as \"6m\".     If not specified the interval parameter default is 1 Day.")] = None,
        historicalfx: Annotated[Optional[StrictBool], Field(description="if true use historical currency rates otherwise current currency rates. Defaults to true.")] = None,
        currency: Annotated[Optional[StrictStr], Field(description="comma separated list of conversion currencies, defaults to USD")] = None,
        unitofmeasure: Annotated[Optional[StrictStr], Field(description="unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight")] = None,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[IntervalCollectionResponse]:
        """Get historical Spot prices for requested metals

        Historical OHLC data for the specified period and interval size    The combination of the interval parameter and start and end dates can result in results  being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.    The historicalfx flag is used to determine whether to apply today's fx rates to a historical period, or to apply the historical rates from that same time frame.

        :param metals: comma separated list of metals (required)
        :type metals: str
        :param start: start date of time period. format is <i>yyyy-mm-dd</i> (required)
        :type start: datetime
        :param end: end date of time period. format is <i>yyyy-mm-dd</i>. Default is current date.
        :type end: datetime
        :param interval: aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y=year,  m=month,  w=week,  d=day,  h=hour,  mi=minute    For example, a yearly interval can be specified as \"y\" and 6 month interval as \"6m\".     If not specified the interval parameter default is 1 Day.
        :type interval: str
        :param historicalfx: if true use historical currency rates otherwise current currency rates. Defaults to true.
        :type historicalfx: bool
        :param currency: comma separated list of conversion currencies, defaults to USD
        :type currency: str
        :param unitofmeasure: unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight
        :type unitofmeasure: str
        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_spot_history_get_serialize(
            metals=metals,
            start=start,
            end=end,
            interval=interval,
            historicalfx=historicalfx,
            currency=currency,
            unitofmeasure=unitofmeasure,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IntervalCollectionResponse]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def metals_spot_history_get_with_http_info(
        self,
        metals: Annotated[StrictStr, Field(description="comma separated list of metals")],
        start: Annotated[datetime, Field(description="start date of time period. format is <i>yyyy-mm-dd</i>")],
        end: Annotated[Optional[datetime], Field(description="end date of time period. format is <i>yyyy-mm-dd</i>. Default is current date.")] = None,
        interval: Annotated[Optional[StrictStr], Field(description="aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y=year,  m=month,  w=week,  d=day,  h=hour,  mi=minute    For example, a yearly interval can be specified as \"y\" and 6 month interval as \"6m\".     If not specified the interval parameter default is 1 Day.")] = None,
        historicalfx: Annotated[Optional[StrictBool], Field(description="if true use historical currency rates otherwise current currency rates. Defaults to true.")] = None,
        currency: Annotated[Optional[StrictStr], Field(description="comma separated list of conversion currencies, defaults to USD")] = None,
        unitofmeasure: Annotated[Optional[StrictStr], Field(description="unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight")] = None,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[IntervalCollectionResponse]]:
        """Get historical Spot prices for requested metals

        Historical OHLC data for the specified period and interval size    The combination of the interval parameter and start and end dates can result in results  being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.    The historicalfx flag is used to determine whether to apply today's fx rates to a historical period, or to apply the historical rates from that same time frame.

        :param metals: comma separated list of metals (required)
        :type metals: str
        :param start: start date of time period. format is <i>yyyy-mm-dd</i> (required)
        :type start: datetime
        :param end: end date of time period. format is <i>yyyy-mm-dd</i>. Default is current date.
        :type end: datetime
        :param interval: aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y=year,  m=month,  w=week,  d=day,  h=hour,  mi=minute    For example, a yearly interval can be specified as \"y\" and 6 month interval as \"6m\".     If not specified the interval parameter default is 1 Day.
        :type interval: str
        :param historicalfx: if true use historical currency rates otherwise current currency rates. Defaults to true.
        :type historicalfx: bool
        :param currency: comma separated list of conversion currencies, defaults to USD
        :type currency: str
        :param unitofmeasure: unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight
        :type unitofmeasure: str
        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_spot_history_get_serialize(
            metals=metals,
            start=start,
            end=end,
            interval=interval,
            historicalfx=historicalfx,
            currency=currency,
            unitofmeasure=unitofmeasure,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IntervalCollectionResponse]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def metals_spot_history_get_without_preload_content(
        self,
        metals: Annotated[StrictStr, Field(description="comma separated list of metals")],
        start: Annotated[datetime, Field(description="start date of time period. format is <i>yyyy-mm-dd</i>")],
        end: Annotated[Optional[datetime], Field(description="end date of time period. format is <i>yyyy-mm-dd</i>. Default is current date.")] = None,
        interval: Annotated[Optional[StrictStr], Field(description="aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y=year,  m=month,  w=week,  d=day,  h=hour,  mi=minute    For example, a yearly interval can be specified as \"y\" and 6 month interval as \"6m\".     If not specified the interval parameter default is 1 Day.")] = None,
        historicalfx: Annotated[Optional[StrictBool], Field(description="if true use historical currency rates otherwise current currency rates. Defaults to true.")] = None,
        currency: Annotated[Optional[StrictStr], Field(description="comma separated list of conversion currencies, defaults to USD")] = None,
        unitofmeasure: Annotated[Optional[StrictStr], Field(description="unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight")] = None,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get historical Spot prices for requested metals

        Historical OHLC data for the specified period and interval size    The combination of the interval parameter and start and end dates can result in results  being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.    The historicalfx flag is used to determine whether to apply today's fx rates to a historical period, or to apply the historical rates from that same time frame.

        :param metals: comma separated list of metals (required)
        :type metals: str
        :param start: start date of time period. format is <i>yyyy-mm-dd</i> (required)
        :type start: datetime
        :param end: end date of time period. format is <i>yyyy-mm-dd</i>. Default is current date.
        :type end: datetime
        :param interval: aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y=year,  m=month,  w=week,  d=day,  h=hour,  mi=minute    For example, a yearly interval can be specified as \"y\" and 6 month interval as \"6m\".     If not specified the interval parameter default is 1 Day.
        :type interval: str
        :param historicalfx: if true use historical currency rates otherwise current currency rates. Defaults to true.
        :type historicalfx: bool
        :param currency: comma separated list of conversion currencies, defaults to USD
        :type currency: str
        :param unitofmeasure: unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight
        :type unitofmeasure: str
        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_spot_history_get_serialize(
            metals=metals,
            start=start,
            end=end,
            interval=interval,
            historicalfx=historicalfx,
            currency=currency,
            unitofmeasure=unitofmeasure,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IntervalCollectionResponse]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _metals_spot_history_get_serialize(
        self,
        metals,
        start,
        end,
        interval,
        historicalfx,
        currency,
        unitofmeasure,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if metals is not None:
            
            _query_params.append(('metals', metals))
            
        if start is not None:
            if isinstance(start, datetime):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, datetime):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if interval is not None:
            
            _query_params.append(('interval', interval))
            
        if historicalfx is not None:
            
            _query_params.append(('historicalfx', historicalfx))
            
        if currency is not None:
            
            _query_params.append(('currency', currency))
            
        if unitofmeasure is not None:
            
            _query_params.append(('unitofmeasure', unitofmeasure))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/Metals/spot/history',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def metals_spot_ratio_history_get(
        self,
        pairs: Annotated[StrictStr, Field(description="comma separated list of metals")],
        start: Annotated[datetime, Field(description="start date of time period. format is <i>yyyy-mm-dd</i>")],
        end: Annotated[Optional[datetime], Field(description="end date of time period. format is <i>yyyy-mm-dd</i>. Default is current date.")] = None,
        interval: Annotated[Optional[StrictStr], Field(description="aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y=year,  m=month,  w=week,  d=day,  h=hour,  mi=minute    For example, a yearly interval can be specified as \"y\" and 6 month interval as \"6m\".     If not specified the interval parameter default is 1 Day.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[IntervalCollectionResponse]:
        """Get historical Spot Ratio prices for requested metals

        Historical data for the specified period and interval size    The combination of the interval parameter and start and end dates can result in results  being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.

        :param pairs: comma separated list of metals (required)
        :type pairs: str
        :param start: start date of time period. format is <i>yyyy-mm-dd</i> (required)
        :type start: datetime
        :param end: end date of time period. format is <i>yyyy-mm-dd</i>. Default is current date.
        :type end: datetime
        :param interval: aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y=year,  m=month,  w=week,  d=day,  h=hour,  mi=minute    For example, a yearly interval can be specified as \"y\" and 6 month interval as \"6m\".     If not specified the interval parameter default is 1 Day.
        :type interval: str
        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_spot_ratio_history_get_serialize(
            pairs=pairs,
            start=start,
            end=end,
            interval=interval,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IntervalCollectionResponse]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def metals_spot_ratio_history_get_with_http_info(
        self,
        pairs: Annotated[StrictStr, Field(description="comma separated list of metals")],
        start: Annotated[datetime, Field(description="start date of time period. format is <i>yyyy-mm-dd</i>")],
        end: Annotated[Optional[datetime], Field(description="end date of time period. format is <i>yyyy-mm-dd</i>. Default is current date.")] = None,
        interval: Annotated[Optional[StrictStr], Field(description="aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y=year,  m=month,  w=week,  d=day,  h=hour,  mi=minute    For example, a yearly interval can be specified as \"y\" and 6 month interval as \"6m\".     If not specified the interval parameter default is 1 Day.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[IntervalCollectionResponse]]:
        """Get historical Spot Ratio prices for requested metals

        Historical data for the specified period and interval size    The combination of the interval parameter and start and end dates can result in results  being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.

        :param pairs: comma separated list of metals (required)
        :type pairs: str
        :param start: start date of time period. format is <i>yyyy-mm-dd</i> (required)
        :type start: datetime
        :param end: end date of time period. format is <i>yyyy-mm-dd</i>. Default is current date.
        :type end: datetime
        :param interval: aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y=year,  m=month,  w=week,  d=day,  h=hour,  mi=minute    For example, a yearly interval can be specified as \"y\" and 6 month interval as \"6m\".     If not specified the interval parameter default is 1 Day.
        :type interval: str
        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_spot_ratio_history_get_serialize(
            pairs=pairs,
            start=start,
            end=end,
            interval=interval,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IntervalCollectionResponse]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def metals_spot_ratio_history_get_without_preload_content(
        self,
        pairs: Annotated[StrictStr, Field(description="comma separated list of metals")],
        start: Annotated[datetime, Field(description="start date of time period. format is <i>yyyy-mm-dd</i>")],
        end: Annotated[Optional[datetime], Field(description="end date of time period. format is <i>yyyy-mm-dd</i>. Default is current date.")] = None,
        interval: Annotated[Optional[StrictStr], Field(description="aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y=year,  m=month,  w=week,  d=day,  h=hour,  mi=minute    For example, a yearly interval can be specified as \"y\" and 6 month interval as \"6m\".     If not specified the interval parameter default is 1 Day.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get historical Spot Ratio prices for requested metals

        Historical data for the specified period and interval size    The combination of the interval parameter and start and end dates can result in results  being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.

        :param pairs: comma separated list of metals (required)
        :type pairs: str
        :param start: start date of time period. format is <i>yyyy-mm-dd</i> (required)
        :type start: datetime
        :param end: end date of time period. format is <i>yyyy-mm-dd</i>. Default is current date.
        :type end: datetime
        :param interval: aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified),   followed by a type string which must be one of the following values:  y=year,  m=month,  w=week,  d=day,  h=hour,  mi=minute    For example, a yearly interval can be specified as \"y\" and 6 month interval as \"6m\".     If not specified the interval parameter default is 1 Day.
        :type interval: str
        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_spot_ratio_history_get_serialize(
            pairs=pairs,
            start=start,
            end=end,
            interval=interval,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IntervalCollectionResponse]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _metals_spot_ratio_history_get_serialize(
        self,
        pairs,
        start,
        end,
        interval,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if pairs is not None:
            
            _query_params.append(('pairs', pairs))
            
        if start is not None:
            if isinstance(start, datetime):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, datetime):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if interval is not None:
            
            _query_params.append(('interval', interval))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/Metals/spot/ratio/history',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def metals_spot_ratio_summary_get(
        self,
        pairs: Annotated[StrictStr, Field(description="comma separated list of metal pairs. For example: gold/silver,gold/platinum,silver/palladium")],
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[SummaryResponse]:
        """Get latest Spot Summary for requested metal ratios

        Ratios between prices of two metals

        :param pairs: comma separated list of metal pairs. For example: gold/silver,gold/platinum,silver/palladium (required)
        :type pairs: str
        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_spot_ratio_summary_get_serialize(
            pairs=pairs,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SummaryResponse]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def metals_spot_ratio_summary_get_with_http_info(
        self,
        pairs: Annotated[StrictStr, Field(description="comma separated list of metal pairs. For example: gold/silver,gold/platinum,silver/palladium")],
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[SummaryResponse]]:
        """Get latest Spot Summary for requested metal ratios

        Ratios between prices of two metals

        :param pairs: comma separated list of metal pairs. For example: gold/silver,gold/platinum,silver/palladium (required)
        :type pairs: str
        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_spot_ratio_summary_get_serialize(
            pairs=pairs,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SummaryResponse]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def metals_spot_ratio_summary_get_without_preload_content(
        self,
        pairs: Annotated[StrictStr, Field(description="comma separated list of metal pairs. For example: gold/silver,gold/platinum,silver/palladium")],
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get latest Spot Summary for requested metal ratios

        Ratios between prices of two metals

        :param pairs: comma separated list of metal pairs. For example: gold/silver,gold/platinum,silver/palladium (required)
        :type pairs: str
        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_spot_ratio_summary_get_serialize(
            pairs=pairs,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SummaryResponse]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _metals_spot_ratio_summary_get_serialize(
        self,
        pairs,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if pairs is not None:
            
            _query_params.append(('pairs', pairs))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/Metals/spot/ratio/summary',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def metals_spot_summary_get(
        self,
        metals: Annotated[StrictStr, Field(description="comma separated list of metals")],
        currency: Annotated[Optional[StrictStr], Field(description="comma separated list of conversion currencies, defaults to USD")] = None,
        unitofmeasure: Annotated[Optional[StrictStr], Field(description="unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight")] = None,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[SummaryResponse]:
        """Get latest Spot Summary for requested metals

        Current and daily summary information combined into a single quote

        :param metals: comma separated list of metals (required)
        :type metals: str
        :param currency: comma separated list of conversion currencies, defaults to USD
        :type currency: str
        :param unitofmeasure: unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight
        :type unitofmeasure: str
        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_spot_summary_get_serialize(
            metals=metals,
            currency=currency,
            unitofmeasure=unitofmeasure,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SummaryResponse]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def metals_spot_summary_get_with_http_info(
        self,
        metals: Annotated[StrictStr, Field(description="comma separated list of metals")],
        currency: Annotated[Optional[StrictStr], Field(description="comma separated list of conversion currencies, defaults to USD")] = None,
        unitofmeasure: Annotated[Optional[StrictStr], Field(description="unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight")] = None,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[SummaryResponse]]:
        """Get latest Spot Summary for requested metals

        Current and daily summary information combined into a single quote

        :param metals: comma separated list of metals (required)
        :type metals: str
        :param currency: comma separated list of conversion currencies, defaults to USD
        :type currency: str
        :param unitofmeasure: unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight
        :type unitofmeasure: str
        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_spot_summary_get_serialize(
            metals=metals,
            currency=currency,
            unitofmeasure=unitofmeasure,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SummaryResponse]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def metals_spot_summary_get_without_preload_content(
        self,
        metals: Annotated[StrictStr, Field(description="comma separated list of metals")],
        currency: Annotated[Optional[StrictStr], Field(description="comma separated list of conversion currencies, defaults to USD")] = None,
        unitofmeasure: Annotated[Optional[StrictStr], Field(description="unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight")] = None,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get latest Spot Summary for requested metals

        Current and daily summary information combined into a single quote

        :param metals: comma separated list of metals (required)
        :type metals: str
        :param currency: comma separated list of conversion currencies, defaults to USD
        :type currency: str
        :param unitofmeasure: unit of meaure, defaults to troy ounces. allowed values are:  mg=milligram  g=gram  kg=kilogram  gr=grain  oz=ounce  toz=troy ounce  ct=carat  dwt=pennyweight
        :type unitofmeasure: str
        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_spot_summary_get_serialize(
            metals=metals,
            currency=currency,
            unitofmeasure=unitofmeasure,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SummaryResponse]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _metals_spot_summary_get_serialize(
        self,
        metals,
        currency,
        unitofmeasure,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if metals is not None:
            
            _query_params.append(('metals', metals))
            
        if currency is not None:
            
            _query_params.append(('currency', currency))
            
        if unitofmeasure is not None:
            
            _query_params.append(('unitofmeasure', unitofmeasure))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/Metals/spot/summary',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def metals_spot_supported_metals_get(
        self,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[str]:
        """Get list of symbols supported by the spot endpoints

        

        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_spot_supported_metals_get_serialize(
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def metals_spot_supported_metals_get_with_http_info(
        self,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[str]]:
        """Get list of symbols supported by the spot endpoints

        

        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_spot_supported_metals_get_serialize(
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def metals_spot_supported_metals_get_without_preload_content(
        self,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get list of symbols supported by the spot endpoints

        

        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_spot_supported_metals_get_serialize(
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _metals_spot_supported_metals_get_serialize(
        self,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/Metals/spot/supported',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def metals_supported_currencies_metals_get(
        self,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[str]:
        """Get list of currencies supported by metals endpoints for currency conversion

        

        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_supported_currencies_metals_get_serialize(
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def metals_supported_currencies_metals_get_with_http_info(
        self,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[str]]:
        """Get list of currencies supported by metals endpoints for currency conversion

        

        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_supported_currencies_metals_get_serialize(
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def metals_supported_currencies_metals_get_without_preload_content(
        self,
        format: Annotated[Optional[StrictStr], Field(description="to override content negotiation specify a value of json or xml")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get list of currencies supported by metals endpoints for currency conversion

        

        :param format: to override content negotiation specify a value of json or xml
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._metals_supported_currencies_metals_get_serialize(
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
            '400': None,
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _metals_supported_currencies_metals_get_serialize(
        self,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/Metals/supported/currency',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



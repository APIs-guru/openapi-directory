# coding: utf-8

"""
    nFusion Solutions Market Data API

    [nFusion Solutions](https://nfusionsolutions.com) provides [REST APIs](https://nfusionsolutions.com/data-feeds/) that deliver enterprise-grade financial data. Data sets include real-time and historical pricing for Spot prices of precious metals such as Gold, Silver, Platinum, and Palladium, exchange rates for major currency pairs, exchange rates for Crypto Currencies such as BTC, ETH, and LTC. All API access requires authentication. In order to be issued access credentials you must first enter into a service agreement with nFusion Solutions and acquire a commercial license. For information on how to obtain a licence [take a tour of our products](https://nfusionsolutions.com/nfusion-solutions-metals-gold-price-feed-tour/) or email sales@nfusionsolutions.com.

    The version of the OpenAPI document: 1
    Contact: support@nfusionsolutions.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.interval_collection import IntervalCollection

class TestIntervalCollection(unittest.TestCase):
    """IntervalCollection unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IntervalCollection:
        """Test IntervalCollection
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IntervalCollection`
        """
        model = IntervalCollection()
        if include_optional:
            return IntervalCollection(
                base_currency = '',
                intervals = [
                    openapi_client.models.interval.Interval(
                        change = 1.337, 
                        change_percent = 1.337, 
                        end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        high = 1.337, 
                        last = 1.337, 
                        low = 1.337, 
                        open = 1.337, 
                        start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                name = '',
                symbol = ''
            )
        else:
            return IntervalCollection(
        )
        """

    def testIntervalCollection(self):
        """Test IntervalCollection"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

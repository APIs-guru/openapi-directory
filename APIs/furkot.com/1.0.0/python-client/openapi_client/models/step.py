# coding: utf-8

"""
    Furkot Trips

    Furkot provides Rest API to access user trip data. Using Furkot API an application can list user trips and display stops for a specific trip. Furkot API uses OAuth2 protocol to authorize applications to access data on behalf of users. 

    The version of the OpenAPI document: 1.0.0
    Contact: trips@furkot.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.step_coordinates import StepCoordinates
from openapi_client.models.step_route import StepRoute
from typing import Optional, Set
from typing_extensions import Self

class Step(BaseModel):
    """
    Step
    """ # noqa: E501
    address: Optional[StrictStr] = Field(default=None, description="address of the stop")
    arrival: Optional[datetime] = Field(default=None, description="arrival at the stop in its local timezone as YYYY-MM-DDThh:mm")
    coordinates: Optional[StepCoordinates] = None
    departure: Optional[datetime] = Field(default=None, description="departure from the stop in its local timezone as YYYY-MM-DDThh:mm")
    name: Optional[StrictStr] = Field(default=None, description="name of the stop")
    nights: Optional[StrictInt] = Field(default=None, description="number of nights")
    passthru: Optional[StrictBool] = Field(default=None, description="true for pass-through points anchoring route")
    route: Optional[StepRoute] = None
    url: Optional[StrictStr] = Field(default=None, description="url of the page with more information about the stop")
    __properties: ClassVar[List[str]] = ["address", "arrival", "coordinates", "departure", "name", "nights", "passthru", "route", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Step from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of coordinates
        if self.coordinates:
            _dict['coordinates'] = self.coordinates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of route
        if self.route:
            _dict['route'] = self.route.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Step from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "arrival": obj.get("arrival"),
            "coordinates": StepCoordinates.from_dict(obj["coordinates"]) if obj.get("coordinates") is not None else None,
            "departure": obj.get("departure"),
            "name": obj.get("name"),
            "nights": obj.get("nights"),
            "passthru": obj.get("passthru"),
            "route": StepRoute.from_dict(obj["route"]) if obj.get("route") is not None else None,
            "url": obj.get("url")
        })
        return _obj



# coding: utf-8

"""
    Mux API

    Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.

    The version of the OpenAPI document: v1
    Contact: devex@mux.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.upload_response import UploadResponse

class TestUploadResponse(unittest.TestCase):
    """UploadResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UploadResponse:
        """Test UploadResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UploadResponse`
        """
        model = UploadResponse()
        if include_optional:
            return UploadResponse(
                data = openapi_client.models.upload.Upload(
                    asset_id = '', 
                    cors_origin = '', 
                    error = openapi_client.models.upload_error.Upload_error(
                        message = '', 
                        type = '', ), 
                    id = '', 
                    new_asset_settings = openapi_client.models.asset.Asset(
                        aspect_ratio = '', 
                        created_at = '', 
                        duration = 1.337, 
                        encoding_tier = 'smart', 
                        errors = openapi_client.models.asset_errors.Asset_errors(
                            messages = [
                                ''
                                ], 
                            type = '', ), 
                        id = '', 
                        is_live = True, 
                        live_stream_id = '', 
                        master = openapi_client.models.asset_master.Asset_master(
                            status = 'ready', 
                            url = '', ), 
                        master_access = 'none', 
                        max_resolution_tier = '1080p', 
                        max_stored_frame_rate = 1.337, 
                        max_stored_resolution = 'Audio only', 
                        mp4_support = 'none', 
                        non_standard_input_reasons = openapi_client.models.asset_non_standard_input_reasons.Asset_non_standard_input_reasons(
                            audio_codec = '', 
                            audio_edit_list = 'non-standard', 
                            pixel_aspect_ratio = '', 
                            unexpected_media_file_parameters = 'non-standard', 
                            unsupported_pixel_format = '', 
                            video_bitrate = 'high', 
                            video_codec = '', 
                            video_edit_list = 'non-standard', 
                            video_frame_rate = '', 
                            video_gop_size = 'high', 
                            video_resolution = '', ), 
                        normalize_audio = True, 
                        passthrough = '', 
                        per_title_encode = True, 
                        playback_ids = [
                            openapi_client.models.playback_id.PlaybackID(
                                id = '', 
                                policy = 'public', )
                            ], 
                        recording_times = [
                            openapi_client.models.asset_recording_times_inner.Asset_recording_times_inner(
                                duration = 1.337, 
                                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                type = 'content', )
                            ], 
                        resolution_tier = 'audio-only', 
                        source_asset_id = '', 
                        static_renditions = openapi_client.models.asset_static_renditions.Asset_static_renditions(
                            files = [
                                openapi_client.models.asset_static_renditions_files_inner.Asset_static_renditions_files_inner(
                                    bitrate = 56, 
                                    ext = 'mp4', 
                                    filesize = '', 
                                    height = 56, 
                                    name = 'low.mp4', 
                                    width = 56, )
                                ], 
                            status = 'disabled', ), 
                        status = 'preparing', 
                        test = True, 
                        tracks = [
                            openapi_client.models.track.Track(
                                closed_captions = True, 
                                duration = 1.337, 
                                id = '', 
                                language_code = '', 
                                max_channel_layout = '', 
                                max_channels = 56, 
                                max_frame_rate = 1.337, 
                                max_height = 56, 
                                max_width = 56, 
                                name = '', 
                                passthrough = '', 
                                status = 'preparing', 
                                text_source = 'uploaded', 
                                text_type = 'subtitles', 
                                type = 'video', )
                            ], 
                        upload_id = '', ), 
                    status = 'waiting', 
                    test = True, 
                    timeout = 60, 
                    url = '', )
            )
        else:
            return UploadResponse(
        )
        """

    def testUploadResponse(self):
        """Test UploadResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Mux API

    Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.

    The version of the OpenAPI document: v1
    Contact: devex@mux.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_live_streams_response import ListLiveStreamsResponse

class TestListLiveStreamsResponse(unittest.TestCase):
    """ListLiveStreamsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListLiveStreamsResponse:
        """Test ListLiveStreamsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListLiveStreamsResponse`
        """
        model = ListLiveStreamsResponse()
        if include_optional:
            return ListLiveStreamsResponse(
                data = [
                    openapi_client.models.live_stream.LiveStream(
                        active_asset_id = '', 
                        audio_only = True, 
                        created_at = '', 
                        embedded_subtitles = [
                            openapi_client.models.live_stream_embedded_subtitle_settings.LiveStreamEmbeddedSubtitleSettings(
                                language_channel = 'cc1', 
                                language_code = 'en', 
                                name = '', 
                                passthrough = '', )
                            ], 
                        generated_subtitles = [
                            openapi_client.models.live_stream_generated_subtitle_settings.LiveStreamGeneratedSubtitleSettings(
                                language_code = 'en', 
                                name = '', 
                                passthrough = '', 
                                transcription_vocabulary_ids = [
                                    ''
                                    ], )
                            ], 
                        id = '', 
                        latency_mode = 'low', 
                        low_latency = True, 
                        max_continuous_duration = 60, 
                        new_asset_settings = openapi_client.models.create_asset_request.CreateAssetRequest(
                            encoding_tier = 'smart', 
                            input = [
                                openapi_client.models.input_settings.InputSettings(
                                    closed_captions = True, 
                                    end_time = 1.337, 
                                    language_code = '', 
                                    name = '', 
                                    overlay_settings = openapi_client.models.input_settings_overlay_settings.InputSettings_overlay_settings(
                                        height = '', 
                                        horizontal_align = 'left', 
                                        horizontal_margin = '', 
                                        opacity = '', 
                                        vertical_align = 'top', 
                                        vertical_margin = '', 
                                        width = '', ), 
                                    passthrough = '', 
                                    start_time = 1.337, 
                                    text_type = 'subtitles', 
                                    type = 'video', 
                                    url = '', )
                                ], 
                            master_access = 'none', 
                            max_resolution_tier = '1080p', 
                            mp4_support = 'none', 
                            normalize_audio = True, 
                            passthrough = '', 
                            per_title_encode = True, 
                            playback_policy = [
                                'public'
                                ], 
                            test = True, ), 
                        passthrough = '', 
                        playback_ids = [
                            openapi_client.models.playback_id.PlaybackID(
                                id = '', 
                                policy = 'public', )
                            ], 
                        recent_asset_ids = [
                            ''
                            ], 
                        reconnect_slate_url = '', 
                        reconnect_window = 0, 
                        reduced_latency = True, 
                        simulcast_targets = [
                            openapi_client.models.simulcast_target.SimulcastTarget(
                                id = '', 
                                passthrough = '', 
                                status = 'idle', 
                                stream_key = '', 
                                url = '', )
                            ], 
                        status = 'active', 
                        stream_key = '', 
                        test = True, 
                        use_slate_for_standard_latency = True, )
                    ]
            )
        else:
            return ListLiveStreamsResponse(
        )
        """

    def testListLiveStreamsResponse(self):
        """Test ListLiveStreamsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

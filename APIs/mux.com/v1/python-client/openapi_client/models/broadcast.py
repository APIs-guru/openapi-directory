# coding: utf-8

"""
    Mux API

    Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.

    The version of the OpenAPI document: v1
    Contact: devex@mux.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.broadcast_layout import BroadcastLayout
from openapi_client.models.broadcast_resolution import BroadcastResolution
from openapi_client.models.broadcast_status import BroadcastStatus
from typing import Optional, Set
from typing_extensions import Self

class Broadcast(BaseModel):
    """
    Broadcast
    """ # noqa: E501
    background: Optional[StrictStr] = Field(default=None, description="URL of an image to display as the background of the broadcast. Its dimensions should match the provided resolution.")
    id: StrictStr = Field(description="Unique identifier for the broadcast. Max 255 characters.")
    layout: BroadcastLayout
    live_stream_id: StrictStr = Field(description="The ID of the live stream that the broadcast will be sent to.")
    passthrough: Optional[StrictStr] = Field(default=None, description="Arbitrary user-supplied metadata that will be included in the broadcast details and related webhooks. Max: 255 characters.")
    resolution: BroadcastResolution
    status: BroadcastStatus
    __properties: ClassVar[List[str]] = ["background", "id", "layout", "live_stream_id", "passthrough", "resolution", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Broadcast from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Broadcast from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "background": obj.get("background"),
            "id": obj.get("id"),
            "layout": obj.get("layout") if obj.get("layout") is not None else BroadcastLayout.GALLERY,
            "live_stream_id": obj.get("live_stream_id"),
            "passthrough": obj.get("passthrough"),
            "resolution": obj.get("resolution") if obj.get("resolution") is not None else BroadcastResolution.ENUM_1920X1080,
            "status": obj.get("status")
        })
        return _obj



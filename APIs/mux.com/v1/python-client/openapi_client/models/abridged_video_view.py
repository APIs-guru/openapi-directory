# coding: utf-8

"""
    Mux API

    Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.

    The version of the OpenAPI document: v1
    Contact: devex@mux.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AbridgedVideoView(BaseModel):
    """
    AbridgedVideoView
    """ # noqa: E501
    country_code: Optional[StrictStr] = None
    error_type_id: Optional[StrictInt] = None
    id: Optional[StrictStr] = None
    player_error_code: Optional[StrictStr] = None
    player_error_message: Optional[StrictStr] = None
    total_row_count: Optional[StrictInt] = None
    video_title: Optional[StrictStr] = None
    view_end: Optional[StrictStr] = None
    view_start: Optional[StrictStr] = None
    viewer_application_name: Optional[StrictStr] = None
    viewer_os_family: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["country_code", "error_type_id", "id", "player_error_code", "player_error_message", "total_row_count", "video_title", "view_end", "view_start", "viewer_application_name", "viewer_os_family"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AbridgedVideoView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if country_code (nullable) is None
        # and model_fields_set contains the field
        if self.country_code is None and "country_code" in self.model_fields_set:
            _dict['country_code'] = None

        # set to None if error_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.error_type_id is None and "error_type_id" in self.model_fields_set:
            _dict['error_type_id'] = None

        # set to None if player_error_code (nullable) is None
        # and model_fields_set contains the field
        if self.player_error_code is None and "player_error_code" in self.model_fields_set:
            _dict['player_error_code'] = None

        # set to None if player_error_message (nullable) is None
        # and model_fields_set contains the field
        if self.player_error_message is None and "player_error_message" in self.model_fields_set:
            _dict['player_error_message'] = None

        # set to None if video_title (nullable) is None
        # and model_fields_set contains the field
        if self.video_title is None and "video_title" in self.model_fields_set:
            _dict['video_title'] = None

        # set to None if viewer_application_name (nullable) is None
        # and model_fields_set contains the field
        if self.viewer_application_name is None and "viewer_application_name" in self.model_fields_set:
            _dict['viewer_application_name'] = None

        # set to None if viewer_os_family (nullable) is None
        # and model_fields_set contains the field
        if self.viewer_os_family is None and "viewer_os_family" in self.model_fields_set:
            _dict['viewer_os_family'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AbridgedVideoView from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country_code": obj.get("country_code"),
            "error_type_id": obj.get("error_type_id"),
            "id": obj.get("id"),
            "player_error_code": obj.get("player_error_code"),
            "player_error_message": obj.get("player_error_message"),
            "total_row_count": obj.get("total_row_count"),
            "video_title": obj.get("video_title"),
            "view_end": obj.get("view_end"),
            "view_start": obj.get("view_start"),
            "viewer_application_name": obj.get("viewer_application_name"),
            "viewer_os_family": obj.get("viewer_os_family")
        })
        return _obj



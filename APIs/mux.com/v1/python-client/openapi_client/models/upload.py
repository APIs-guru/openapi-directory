# coding: utf-8

"""
    Mux API

    Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.

    The version of the OpenAPI document: v1
    Contact: devex@mux.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.asset import Asset
from openapi_client.models.upload_error import UploadError
from typing import Optional, Set
from typing_extensions import Self

class Upload(BaseModel):
    """
    Upload
    """ # noqa: E501
    asset_id: Optional[StrictStr] = Field(default=None, description="Only set once the upload is in the `asset_created` state.")
    cors_origin: Optional[StrictStr] = Field(default=None, description="If the upload URL will be used in a browser, you must specify the origin in order for the signed URL to have the correct CORS headers.")
    error: Optional[UploadError] = None
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the Direct Upload.")
    new_asset_settings: Optional[Asset] = None
    status: Optional[StrictStr] = None
    test: Optional[StrictBool] = Field(default=None, description="Indicates if this is a test Direct Upload, in which case the Asset that gets created will be a `test` Asset.")
    timeout: Optional[Annotated[int, Field(le=604800, strict=True, ge=60)]] = Field(default=3600, description="Max time in seconds for the signed upload URL to be valid. If a successful upload has not occurred before the timeout limit, the direct upload is marked `timed_out`")
    url: Optional[StrictStr] = Field(default=None, description="The URL to upload the associated source media to.")
    __properties: ClassVar[List[str]] = ["asset_id", "cors_origin", "error", "id", "new_asset_settings", "status", "test", "timeout", "url"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['waiting', 'asset_created', 'errored', 'cancelled', 'timed_out']):
            raise ValueError("must be one of enum values ('waiting', 'asset_created', 'errored', 'cancelled', 'timed_out')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Upload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of new_asset_settings
        if self.new_asset_settings:
            _dict['new_asset_settings'] = self.new_asset_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Upload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asset_id": obj.get("asset_id"),
            "cors_origin": obj.get("cors_origin"),
            "error": UploadError.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "id": obj.get("id"),
            "new_asset_settings": Asset.from_dict(obj["new_asset_settings"]) if obj.get("new_asset_settings") is not None else None,
            "status": obj.get("status"),
            "test": obj.get("test"),
            "timeout": obj.get("timeout") if obj.get("timeout") is not None else 3600,
            "url": obj.get("url")
        })
        return _obj



# coding: utf-8

"""
    Mux API

    Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.

    The version of the OpenAPI document: v1
    Contact: devex@mux.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.delivery_report_delivered_seconds_by_resolution import DeliveryReportDeliveredSecondsByResolution
from typing import Optional, Set
from typing_extensions import Self

class DeliveryReport(BaseModel):
    """
    DeliveryReport
    """ # noqa: E501
    asset_duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The duration of the asset in seconds.")
    asset_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the asset.")
    asset_resolution_tier: Optional[StrictStr] = Field(default=None, description="The resolution tier that the asset was ingested at, affecting billing for ingest & storage")
    asset_state: Optional[StrictStr] = Field(default=None, description="The state of the asset.")
    created_at: Optional[StrictStr] = Field(default=None, description="Time at which the asset was created. Measured in seconds since the Unix epoch.")
    deleted_at: Optional[StrictStr] = Field(default=None, description="If exists, time at which the asset was deleted. Measured in seconds since the Unix epoch.")
    delivered_seconds: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total number of delivered seconds during this time window.")
    delivered_seconds_by_resolution: Optional[DeliveryReportDeliveredSecondsByResolution] = None
    live_stream_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the live stream that created the asset.")
    passthrough: Optional[StrictStr] = Field(default=None, description="The `passthrough` value for the asset.")
    __properties: ClassVar[List[str]] = ["asset_duration", "asset_id", "asset_resolution_tier", "asset_state", "created_at", "deleted_at", "delivered_seconds", "delivered_seconds_by_resolution", "live_stream_id", "passthrough"]

    @field_validator('asset_resolution_tier')
    def asset_resolution_tier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['audio-only', '720p', '1080p', '1440p', '2160p']):
            raise ValueError("must be one of enum values ('audio-only', '720p', '1080p', '1440p', '2160p')")
        return value

    @field_validator('asset_state')
    def asset_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ready', 'errored', 'deleted']):
            raise ValueError("must be one of enum values ('ready', 'errored', 'deleted')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeliveryReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of delivered_seconds_by_resolution
        if self.delivered_seconds_by_resolution:
            _dict['delivered_seconds_by_resolution'] = self.delivered_seconds_by_resolution.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeliveryReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asset_duration": obj.get("asset_duration"),
            "asset_id": obj.get("asset_id"),
            "asset_resolution_tier": obj.get("asset_resolution_tier"),
            "asset_state": obj.get("asset_state"),
            "created_at": obj.get("created_at"),
            "deleted_at": obj.get("deleted_at"),
            "delivered_seconds": obj.get("delivered_seconds"),
            "delivered_seconds_by_resolution": DeliveryReportDeliveredSecondsByResolution.from_dict(obj["delivered_seconds_by_resolution"]) if obj.get("delivered_seconds_by_resolution") is not None else None,
            "live_stream_id": obj.get("live_stream_id"),
            "passthrough": obj.get("passthrough")
        })
        return _obj



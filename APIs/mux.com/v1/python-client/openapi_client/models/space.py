# coding: utf-8

"""
    Mux API

    Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.

    The version of the OpenAPI document: v1
    Contact: devex@mux.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.broadcast import Broadcast
from openapi_client.models.space_status import SpaceStatus
from openapi_client.models.space_type import SpaceType
from typing import Optional, Set
from typing_extensions import Self

class Space(BaseModel):
    """
    Space
    """ # noqa: E501
    active_session_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the current lifecycle of the space. Only set when the space is `active` and is set to a new value each time the space transitions from `idle` to `active`. This value is useful for logging and debugging issues. Max 255 characters.")
    broadcasts: Optional[List[Broadcast]] = Field(default=None, description="An array of broadcast destinations.")
    created_at: StrictStr = Field(description="Time the space was created, defined as a Unix timestamp (seconds since epoch).")
    id: StrictStr = Field(description="Unique identifier for the space. Max 255 characters.")
    passthrough: Optional[StrictStr] = Field(default=None, description="Arbitrary user-supplied metadata that will be included in the space details and related webhooks. Max: 255 characters.")
    status: SpaceStatus
    type: SpaceType
    __properties: ClassVar[List[str]] = ["active_session_id", "broadcasts", "created_at", "id", "passthrough", "status", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Space from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in broadcasts (list)
        _items = []
        if self.broadcasts:
            for _item_broadcasts in self.broadcasts:
                if _item_broadcasts:
                    _items.append(_item_broadcasts.to_dict())
            _dict['broadcasts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Space from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active_session_id": obj.get("active_session_id"),
            "broadcasts": [Broadcast.from_dict(_item) for _item in obj["broadcasts"]] if obj.get("broadcasts") is not None else None,
            "created_at": obj.get("created_at"),
            "id": obj.get("id"),
            "passthrough": obj.get("passthrough"),
            "status": obj.get("status"),
            "type": obj.get("type") if obj.get("type") is not None else SpaceType.SERVER
        })
        return _obj



# coding: utf-8

"""
    Mux API

    Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.

    The version of the OpenAPI document: v1
    Contact: devex@mux.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.incident_breakdown import IncidentBreakdown
from openapi_client.models.incident_notification import IncidentNotification
from openapi_client.models.incident_notification_rule import IncidentNotificationRule
from typing import Optional, Set
from typing_extensions import Self

class Incident(BaseModel):
    """
    Incident
    """ # noqa: E501
    affected_views: Optional[StrictInt] = None
    affected_views_per_hour: Optional[StrictInt] = None
    affected_views_per_hour_on_open: Optional[StrictInt] = None
    breakdowns: Optional[List[IncidentBreakdown]] = None
    description: Optional[StrictStr] = None
    error_description: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    impact: Optional[StrictStr] = None
    incident_key: Optional[StrictStr] = None
    measured_value: Optional[Union[StrictFloat, StrictInt]] = None
    measured_value_on_close: Optional[Union[StrictFloat, StrictInt]] = None
    measurement: Optional[StrictStr] = None
    notification_rules: Optional[List[IncidentNotificationRule]] = None
    notifications: Optional[List[IncidentNotification]] = None
    resolved_at: Optional[StrictStr] = None
    sample_size: Optional[StrictInt] = None
    sample_size_unit: Optional[StrictStr] = None
    severity: Optional[StrictStr] = None
    started_at: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    threshold: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["affected_views", "affected_views_per_hour", "affected_views_per_hour_on_open", "breakdowns", "description", "error_description", "id", "impact", "incident_key", "measured_value", "measured_value_on_close", "measurement", "notification_rules", "notifications", "resolved_at", "sample_size", "sample_size_unit", "severity", "started_at", "status", "threshold"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Incident from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in breakdowns (list)
        _items = []
        if self.breakdowns:
            for _item_breakdowns in self.breakdowns:
                if _item_breakdowns:
                    _items.append(_item_breakdowns.to_dict())
            _dict['breakdowns'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in notification_rules (list)
        _items = []
        if self.notification_rules:
            for _item_notification_rules in self.notification_rules:
                if _item_notification_rules:
                    _items.append(_item_notification_rules.to_dict())
            _dict['notification_rules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in notifications (list)
        _items = []
        if self.notifications:
            for _item_notifications in self.notifications:
                if _item_notifications:
                    _items.append(_item_notifications.to_dict())
            _dict['notifications'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Incident from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "affected_views": obj.get("affected_views"),
            "affected_views_per_hour": obj.get("affected_views_per_hour"),
            "affected_views_per_hour_on_open": obj.get("affected_views_per_hour_on_open"),
            "breakdowns": [IncidentBreakdown.from_dict(_item) for _item in obj["breakdowns"]] if obj.get("breakdowns") is not None else None,
            "description": obj.get("description"),
            "error_description": obj.get("error_description"),
            "id": obj.get("id"),
            "impact": obj.get("impact"),
            "incident_key": obj.get("incident_key"),
            "measured_value": obj.get("measured_value"),
            "measured_value_on_close": obj.get("measured_value_on_close"),
            "measurement": obj.get("measurement"),
            "notification_rules": [IncidentNotificationRule.from_dict(_item) for _item in obj["notification_rules"]] if obj.get("notification_rules") is not None else None,
            "notifications": [IncidentNotification.from_dict(_item) for _item in obj["notifications"]] if obj.get("notifications") is not None else None,
            "resolved_at": obj.get("resolved_at"),
            "sample_size": obj.get("sample_size"),
            "sample_size_unit": obj.get("sample_size_unit"),
            "severity": obj.get("severity"),
            "started_at": obj.get("started_at"),
            "status": obj.get("status"),
            "threshold": obj.get("threshold")
        })
        return _obj



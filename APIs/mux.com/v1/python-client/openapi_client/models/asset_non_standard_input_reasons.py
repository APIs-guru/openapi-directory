# coding: utf-8

"""
    Mux API

    Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.

    The version of the OpenAPI document: v1
    Contact: devex@mux.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AssetNonStandardInputReasons(BaseModel):
    """
    An object containing one or more reasons the input file is non-standard. See [the guide on minimizing processing time](https://docs.mux.com/guides/video/minimize-processing-time) for more information on what a standard input is defined as. This object only exists on on-demand assets that have non-standard inputs, so if missing you can assume the input qualifies as standard.
    """ # noqa: E501
    audio_codec: Optional[StrictStr] = Field(default=None, description="The audio codec used on the input file. Non-AAC audio codecs are non-standard.")
    audio_edit_list: Optional[StrictStr] = Field(default=None, description="Audio Edit List reason indicates that the input file's audio track contains a complex Edit Decision List.")
    pixel_aspect_ratio: Optional[StrictStr] = Field(default=None, description="The video pixel aspect ratio of the input file.")
    unexpected_media_file_parameters: Optional[StrictStr] = Field(default=None, description="A catch-all reason when the input file in created with non-standard encoding parameters.")
    unsupported_pixel_format: Optional[StrictStr] = Field(default=None, description="The video pixel format, as a string, returned by libav. Considered non-standard if not one of yuv420p or yuvj420p.")
    video_bitrate: Optional[StrictStr] = Field(default=None, description="The video bitrate of the input file is `high`. This parameter is present when the average bitrate of any key frame interval (also known as Group of Pictures or GOP) is higher than what's considered standard which typically is 16 Mbps.")
    video_codec: Optional[StrictStr] = Field(default=None, description="The video codec used on the input file. For example, the input file encoded with `hevc` video codec is non-standard and the value of this parameter is `hevc`.")
    video_edit_list: Optional[StrictStr] = Field(default=None, description="Video Edit List reason indicates that the input file's video track contains a complex Edit Decision List.")
    video_frame_rate: Optional[StrictStr] = Field(default=None, description="The video frame rate of the input file. Video with average frames per second (fps) less than 5 or greater than 120 is non-standard. A `-1` frame rate value indicates Mux could not determine the frame rate of the video track.")
    video_gop_size: Optional[StrictStr] = Field(default=None, description="The video key frame Interval (also called as Group of Picture or GOP) of the input file is `high`. This parameter is present when the gop is greater than 20 seconds.")
    video_resolution: Optional[StrictStr] = Field(default=None, description="The video resolution of the input file. Video resolution higher than 2048 pixels on any one dimension (height or width) is considered non-standard, The resolution value is presented as `width` x `height` in pixels.")
    __properties: ClassVar[List[str]] = ["audio_codec", "audio_edit_list", "pixel_aspect_ratio", "unexpected_media_file_parameters", "unsupported_pixel_format", "video_bitrate", "video_codec", "video_edit_list", "video_frame_rate", "video_gop_size", "video_resolution"]

    @field_validator('audio_edit_list')
    def audio_edit_list_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['non-standard']):
            raise ValueError("must be one of enum values ('non-standard')")
        return value

    @field_validator('unexpected_media_file_parameters')
    def unexpected_media_file_parameters_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['non-standard']):
            raise ValueError("must be one of enum values ('non-standard')")
        return value

    @field_validator('video_bitrate')
    def video_bitrate_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['high']):
            raise ValueError("must be one of enum values ('high')")
        return value

    @field_validator('video_edit_list')
    def video_edit_list_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['non-standard']):
            raise ValueError("must be one of enum values ('non-standard')")
        return value

    @field_validator('video_gop_size')
    def video_gop_size_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['high']):
            raise ValueError("must be one of enum values ('high')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssetNonStandardInputReasons from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssetNonStandardInputReasons from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audio_codec": obj.get("audio_codec"),
            "audio_edit_list": obj.get("audio_edit_list"),
            "pixel_aspect_ratio": obj.get("pixel_aspect_ratio"),
            "unexpected_media_file_parameters": obj.get("unexpected_media_file_parameters"),
            "unsupported_pixel_format": obj.get("unsupported_pixel_format"),
            "video_bitrate": obj.get("video_bitrate"),
            "video_codec": obj.get("video_codec"),
            "video_edit_list": obj.get("video_edit_list"),
            "video_frame_rate": obj.get("video_frame_rate"),
            "video_gop_size": obj.get("video_gop_size"),
            "video_resolution": obj.get("video_resolution")
        })
        return _obj



# coding: utf-8

"""
    Mux API

    Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.

    The version of the OpenAPI document: v1
    Contact: devex@mux.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class UpdateLiveStreamRequest(BaseModel):
    """
    UpdateLiveStreamRequest
    """ # noqa: E501
    latency_mode: Optional[StrictStr] = Field(default=None, description="Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Set this as an alternative to setting low latency or reduced latency flags. The Low Latency value is a beta feature. Read more here: https://mux.com/blog/introducing-low-latency-live-streaming/")
    max_continuous_duration: Optional[Annotated[int, Field(le=43200, strict=True, ge=60)]] = Field(default=43200, description="The time in seconds a live stream may be continuously active before being disconnected. Defaults to 12 hours.")
    passthrough: Optional[StrictStr] = Field(default=None, description="Arbitrary user-supplied metadata set for the live stream. Max 255 characters. In order to clear this value, the field should be included with an empty-string value.")
    reconnect_slate_url: Optional[StrictStr] = Field(default=None, description="The URL of the image file that Mux should download and use as slate media during interruptions of the live stream media. This file will be downloaded each time a new recorded asset is created from the live stream. Set this to a blank string to clear the value so that the default slate media will be used.")
    reconnect_window: Optional[Union[Annotated[float, Field(le=1800, strict=True, ge=0)], Annotated[int, Field(le=1800, strict=True, ge=0)]]] = Field(default=60, description="When live streaming software disconnects from Mux, either intentionally or due to a drop in the network, the Reconnect Window is the time in seconds that Mux should wait for the streaming software to reconnect before considering the live stream finished and completing the recorded asset.  If not specified directly, Standard Latency streams have a Reconnect Window of 60 seconds; Reduced and Low Latency streams have a default of 0 seconds, or no Reconnect Window. For that reason, we suggest specifying a value other than zero for Reduced and Low Latency streams.  Reduced and Low Latency streams with a Reconnect Window greater than zero will insert slate media into the recorded asset while waiting for the streaming software to reconnect or when there are brief interruptions in the live stream media. When using a Reconnect Window setting higher than 60 seconds with a Standard Latency stream, we highly recommend enabling slate with the `use_slate_for_standard_latency` option. ")
    use_slate_for_standard_latency: Optional[StrictBool] = Field(default=False, description="By default, Standard Latency live streams do not have slate media inserted while waiting for live streaming software to reconnect to Mux. Setting this to true enables slate insertion on a Standard Latency stream.")
    __properties: ClassVar[List[str]] = ["latency_mode", "max_continuous_duration", "passthrough", "reconnect_slate_url", "reconnect_window", "use_slate_for_standard_latency"]

    @field_validator('latency_mode')
    def latency_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['low', 'reduced', 'standard']):
            raise ValueError("must be one of enum values ('low', 'reduced', 'standard')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateLiveStreamRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateLiveStreamRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "latency_mode": obj.get("latency_mode"),
            "max_continuous_duration": obj.get("max_continuous_duration") if obj.get("max_continuous_duration") is not None else 43200,
            "passthrough": obj.get("passthrough"),
            "reconnect_slate_url": obj.get("reconnect_slate_url"),
            "reconnect_window": obj.get("reconnect_window") if obj.get("reconnect_window") is not None else 60,
            "use_slate_for_standard_latency": obj.get("use_slate_for_standard_latency") if obj.get("use_slate_for_standard_latency") is not None else False
        })
        return _obj



# coding: utf-8

"""
    Mux API

    Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.

    The version of the OpenAPI document: v1
    Contact: devex@mux.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.video_view_event import VideoViewEvent
from typing import Optional, Set
from typing_extensions import Self

class VideoView(BaseModel):
    """
    VideoView
    """ # noqa: E501
    asn: Optional[StrictInt] = None
    asn_name: Optional[StrictStr] = None
    asset_id: Optional[StrictStr] = None
    buffering_count: Optional[StrictInt] = None
    buffering_duration: Optional[StrictInt] = None
    buffering_rate: Optional[StrictStr] = None
    cdn: Optional[StrictStr] = None
    city: Optional[StrictStr] = None
    continent_code: Optional[StrictStr] = None
    country_code: Optional[StrictStr] = None
    country_name: Optional[StrictStr] = None
    custom_1: Optional[StrictStr] = None
    custom_10: Optional[StrictStr] = None
    custom_2: Optional[StrictStr] = None
    custom_3: Optional[StrictStr] = None
    custom_4: Optional[StrictStr] = None
    custom_5: Optional[StrictStr] = None
    custom_6: Optional[StrictStr] = None
    custom_7: Optional[StrictStr] = None
    custom_8: Optional[StrictStr] = None
    custom_9: Optional[StrictStr] = None
    environment_id: Optional[StrictStr] = None
    error_type_id: Optional[StrictInt] = None
    events: Optional[List[VideoViewEvent]] = None
    exit_before_video_start: Optional[StrictBool] = None
    experiment_name: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    inserted_at: Optional[StrictStr] = None
    isp: Optional[StrictStr] = None
    latitude: Optional[StrictStr] = None
    live_stream_id: Optional[StrictStr] = None
    live_stream_latency: Optional[StrictInt] = None
    longitude: Optional[StrictStr] = None
    metro: Optional[StrictStr] = None
    mux_api_version: Optional[StrictStr] = None
    mux_embed: Optional[StrictStr] = None
    mux_embed_version: Optional[StrictStr] = None
    mux_viewer_id: Optional[StrictStr] = None
    page_load_time: Optional[StrictInt] = None
    page_type: Optional[StrictStr] = None
    page_url: Optional[StrictStr] = None
    platform_description: Optional[StrictStr] = None
    platform_summary: Optional[StrictStr] = None
    playback_id: Optional[StrictStr] = None
    playback_score: Optional[StrictStr] = None
    player_autoplay: Optional[StrictBool] = None
    player_error_code: Optional[StrictStr] = None
    player_error_context: Optional[StrictStr] = None
    player_error_message: Optional[StrictStr] = None
    player_height: Optional[StrictInt] = None
    player_instance_id: Optional[StrictStr] = None
    player_language: Optional[StrictStr] = None
    player_load_time: Optional[StrictInt] = None
    player_mux_plugin_name: Optional[StrictStr] = None
    player_mux_plugin_version: Optional[StrictStr] = None
    player_name: Optional[StrictStr] = None
    player_poster: Optional[StrictStr] = None
    player_preload: Optional[StrictBool] = None
    player_remote_played: Optional[StrictBool] = None
    player_software: Optional[StrictStr] = None
    player_software_version: Optional[StrictStr] = None
    player_source_domain: Optional[StrictStr] = None
    player_source_duration: Optional[StrictInt] = None
    player_source_height: Optional[StrictInt] = None
    player_source_host_name: Optional[StrictStr] = None
    player_source_stream_type: Optional[StrictStr] = None
    player_source_type: Optional[StrictStr] = None
    player_source_url: Optional[StrictStr] = None
    player_source_width: Optional[StrictInt] = None
    player_startup_time: Optional[StrictInt] = None
    player_version: Optional[StrictStr] = None
    player_view_count: Optional[StrictInt] = None
    player_width: Optional[StrictInt] = None
    preroll_ad_asset_hostname: Optional[StrictStr] = None
    preroll_ad_tag_hostname: Optional[StrictStr] = None
    preroll_played: Optional[StrictBool] = None
    preroll_requested: Optional[StrictBool] = None
    property_id: Optional[StrictInt] = None
    quality_score: Optional[StrictStr] = None
    rebuffer_percentage: Optional[StrictStr] = None
    rebuffering_score: Optional[StrictStr] = None
    region: Optional[StrictStr] = None
    requests_for_first_preroll: Optional[StrictInt] = None
    session_id: Optional[StrictStr] = None
    short_time: Optional[StrictStr] = None
    startup_score: Optional[StrictStr] = None
    sub_property_id: Optional[StrictStr] = None
    time_to_first_frame: Optional[StrictInt] = None
    updated_at: Optional[StrictStr] = None
    used_fullscreen: Optional[StrictBool] = None
    video_content_type: Optional[StrictStr] = None
    video_duration: Optional[StrictInt] = None
    video_encoding_variant: Optional[StrictStr] = None
    video_id: Optional[StrictStr] = None
    video_language: Optional[StrictStr] = None
    video_producer: Optional[StrictStr] = None
    video_series: Optional[StrictStr] = None
    video_startup_failure: Optional[StrictBool] = None
    video_startup_preroll_load_time: Optional[StrictInt] = None
    video_startup_preroll_request_time: Optional[StrictInt] = None
    video_stream_type: Optional[StrictStr] = None
    video_title: Optional[StrictStr] = None
    video_variant_id: Optional[StrictStr] = None
    video_variant_name: Optional[StrictStr] = None
    view_average_request_latency: Optional[StrictInt] = None
    view_average_request_throughput: Optional[StrictInt] = None
    view_drm_type: Optional[StrictStr] = None
    view_dropped_frame_count: Optional[StrictInt] = None
    view_end: Optional[StrictStr] = None
    view_error_id: Optional[StrictInt] = None
    view_has_ad: Optional[StrictBool] = None
    view_id: Optional[StrictStr] = None
    view_max_downscale_percentage: Optional[StrictStr] = None
    view_max_playhead_position: Optional[StrictStr] = None
    view_max_request_latency: Optional[StrictInt] = None
    view_max_upscale_percentage: Optional[StrictStr] = None
    view_playing_time: Optional[StrictStr] = None
    view_seek_count: Optional[StrictInt] = None
    view_seek_duration: Optional[StrictInt] = None
    view_session_id: Optional[StrictStr] = None
    view_start: Optional[StrictStr] = None
    view_total_content_playback_time: Optional[StrictInt] = None
    view_total_downscaling: Optional[StrictStr] = None
    view_total_upscaling: Optional[StrictStr] = None
    viewer_application_engine: Optional[StrictStr] = None
    viewer_application_name: Optional[StrictStr] = None
    viewer_application_version: Optional[StrictStr] = None
    viewer_connection_type: Optional[StrictStr] = None
    viewer_device_category: Optional[StrictStr] = None
    viewer_device_manufacturer: Optional[StrictStr] = None
    viewer_device_model: Optional[StrictStr] = None
    viewer_device_name: Optional[StrictStr] = None
    viewer_experience_score: Optional[StrictStr] = None
    viewer_os_architecture: Optional[StrictStr] = None
    viewer_os_family: Optional[StrictStr] = None
    viewer_os_version: Optional[StrictStr] = None
    viewer_user_agent: Optional[StrictStr] = None
    viewer_user_id: Optional[StrictStr] = None
    watch_time: Optional[StrictInt] = None
    watched: Optional[StrictBool] = None
    weighted_average_bitrate: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["asn", "asn_name", "asset_id", "buffering_count", "buffering_duration", "buffering_rate", "cdn", "city", "continent_code", "country_code", "country_name", "custom_1", "custom_10", "custom_2", "custom_3", "custom_4", "custom_5", "custom_6", "custom_7", "custom_8", "custom_9", "environment_id", "error_type_id", "events", "exit_before_video_start", "experiment_name", "id", "inserted_at", "isp", "latitude", "live_stream_id", "live_stream_latency", "longitude", "metro", "mux_api_version", "mux_embed", "mux_embed_version", "mux_viewer_id", "page_load_time", "page_type", "page_url", "platform_description", "platform_summary", "playback_id", "playback_score", "player_autoplay", "player_error_code", "player_error_context", "player_error_message", "player_height", "player_instance_id", "player_language", "player_load_time", "player_mux_plugin_name", "player_mux_plugin_version", "player_name", "player_poster", "player_preload", "player_remote_played", "player_software", "player_software_version", "player_source_domain", "player_source_duration", "player_source_height", "player_source_host_name", "player_source_stream_type", "player_source_type", "player_source_url", "player_source_width", "player_startup_time", "player_version", "player_view_count", "player_width", "preroll_ad_asset_hostname", "preroll_ad_tag_hostname", "preroll_played", "preroll_requested", "property_id", "quality_score", "rebuffer_percentage", "rebuffering_score", "region", "requests_for_first_preroll", "session_id", "short_time", "startup_score", "sub_property_id", "time_to_first_frame", "updated_at", "used_fullscreen", "video_content_type", "video_duration", "video_encoding_variant", "video_id", "video_language", "video_producer", "video_series", "video_startup_failure", "video_startup_preroll_load_time", "video_startup_preroll_request_time", "video_stream_type", "video_title", "video_variant_id", "video_variant_name", "view_average_request_latency", "view_average_request_throughput", "view_drm_type", "view_dropped_frame_count", "view_end", "view_error_id", "view_has_ad", "view_id", "view_max_downscale_percentage", "view_max_playhead_position", "view_max_request_latency", "view_max_upscale_percentage", "view_playing_time", "view_seek_count", "view_seek_duration", "view_session_id", "view_start", "view_total_content_playback_time", "view_total_downscaling", "view_total_upscaling", "viewer_application_engine", "viewer_application_name", "viewer_application_version", "viewer_connection_type", "viewer_device_category", "viewer_device_manufacturer", "viewer_device_model", "viewer_device_name", "viewer_experience_score", "viewer_os_architecture", "viewer_os_family", "viewer_os_version", "viewer_user_agent", "viewer_user_id", "watch_time", "watched", "weighted_average_bitrate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VideoView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in events (list)
        _items = []
        if self.events:
            for _item_events in self.events:
                if _item_events:
                    _items.append(_item_events.to_dict())
            _dict['events'] = _items
        # set to None if asn (nullable) is None
        # and model_fields_set contains the field
        if self.asn is None and "asn" in self.model_fields_set:
            _dict['asn'] = None

        # set to None if asn_name (nullable) is None
        # and model_fields_set contains the field
        if self.asn_name is None and "asn_name" in self.model_fields_set:
            _dict['asn_name'] = None

        # set to None if asset_id (nullable) is None
        # and model_fields_set contains the field
        if self.asset_id is None and "asset_id" in self.model_fields_set:
            _dict['asset_id'] = None

        # set to None if buffering_count (nullable) is None
        # and model_fields_set contains the field
        if self.buffering_count is None and "buffering_count" in self.model_fields_set:
            _dict['buffering_count'] = None

        # set to None if buffering_duration (nullable) is None
        # and model_fields_set contains the field
        if self.buffering_duration is None and "buffering_duration" in self.model_fields_set:
            _dict['buffering_duration'] = None

        # set to None if buffering_rate (nullable) is None
        # and model_fields_set contains the field
        if self.buffering_rate is None and "buffering_rate" in self.model_fields_set:
            _dict['buffering_rate'] = None

        # set to None if cdn (nullable) is None
        # and model_fields_set contains the field
        if self.cdn is None and "cdn" in self.model_fields_set:
            _dict['cdn'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if continent_code (nullable) is None
        # and model_fields_set contains the field
        if self.continent_code is None and "continent_code" in self.model_fields_set:
            _dict['continent_code'] = None

        # set to None if country_code (nullable) is None
        # and model_fields_set contains the field
        if self.country_code is None and "country_code" in self.model_fields_set:
            _dict['country_code'] = None

        # set to None if country_name (nullable) is None
        # and model_fields_set contains the field
        if self.country_name is None and "country_name" in self.model_fields_set:
            _dict['country_name'] = None

        # set to None if custom_1 (nullable) is None
        # and model_fields_set contains the field
        if self.custom_1 is None and "custom_1" in self.model_fields_set:
            _dict['custom_1'] = None

        # set to None if custom_10 (nullable) is None
        # and model_fields_set contains the field
        if self.custom_10 is None and "custom_10" in self.model_fields_set:
            _dict['custom_10'] = None

        # set to None if custom_2 (nullable) is None
        # and model_fields_set contains the field
        if self.custom_2 is None and "custom_2" in self.model_fields_set:
            _dict['custom_2'] = None

        # set to None if custom_3 (nullable) is None
        # and model_fields_set contains the field
        if self.custom_3 is None and "custom_3" in self.model_fields_set:
            _dict['custom_3'] = None

        # set to None if custom_4 (nullable) is None
        # and model_fields_set contains the field
        if self.custom_4 is None and "custom_4" in self.model_fields_set:
            _dict['custom_4'] = None

        # set to None if custom_5 (nullable) is None
        # and model_fields_set contains the field
        if self.custom_5 is None and "custom_5" in self.model_fields_set:
            _dict['custom_5'] = None

        # set to None if custom_6 (nullable) is None
        # and model_fields_set contains the field
        if self.custom_6 is None and "custom_6" in self.model_fields_set:
            _dict['custom_6'] = None

        # set to None if custom_7 (nullable) is None
        # and model_fields_set contains the field
        if self.custom_7 is None and "custom_7" in self.model_fields_set:
            _dict['custom_7'] = None

        # set to None if custom_8 (nullable) is None
        # and model_fields_set contains the field
        if self.custom_8 is None and "custom_8" in self.model_fields_set:
            _dict['custom_8'] = None

        # set to None if custom_9 (nullable) is None
        # and model_fields_set contains the field
        if self.custom_9 is None and "custom_9" in self.model_fields_set:
            _dict['custom_9'] = None

        # set to None if error_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.error_type_id is None and "error_type_id" in self.model_fields_set:
            _dict['error_type_id'] = None

        # set to None if experiment_name (nullable) is None
        # and model_fields_set contains the field
        if self.experiment_name is None and "experiment_name" in self.model_fields_set:
            _dict['experiment_name'] = None

        # set to None if isp (nullable) is None
        # and model_fields_set contains the field
        if self.isp is None and "isp" in self.model_fields_set:
            _dict['isp'] = None

        # set to None if latitude (nullable) is None
        # and model_fields_set contains the field
        if self.latitude is None and "latitude" in self.model_fields_set:
            _dict['latitude'] = None

        # set to None if live_stream_id (nullable) is None
        # and model_fields_set contains the field
        if self.live_stream_id is None and "live_stream_id" in self.model_fields_set:
            _dict['live_stream_id'] = None

        # set to None if live_stream_latency (nullable) is None
        # and model_fields_set contains the field
        if self.live_stream_latency is None and "live_stream_latency" in self.model_fields_set:
            _dict['live_stream_latency'] = None

        # set to None if longitude (nullable) is None
        # and model_fields_set contains the field
        if self.longitude is None and "longitude" in self.model_fields_set:
            _dict['longitude'] = None

        # set to None if metro (nullable) is None
        # and model_fields_set contains the field
        if self.metro is None and "metro" in self.model_fields_set:
            _dict['metro'] = None

        # set to None if mux_embed (nullable) is None
        # and model_fields_set contains the field
        if self.mux_embed is None and "mux_embed" in self.model_fields_set:
            _dict['mux_embed'] = None

        # set to None if mux_embed_version (nullable) is None
        # and model_fields_set contains the field
        if self.mux_embed_version is None and "mux_embed_version" in self.model_fields_set:
            _dict['mux_embed_version'] = None

        # set to None if page_load_time (nullable) is None
        # and model_fields_set contains the field
        if self.page_load_time is None and "page_load_time" in self.model_fields_set:
            _dict['page_load_time'] = None

        # set to None if page_type (nullable) is None
        # and model_fields_set contains the field
        if self.page_type is None and "page_type" in self.model_fields_set:
            _dict['page_type'] = None

        # set to None if page_url (nullable) is None
        # and model_fields_set contains the field
        if self.page_url is None and "page_url" in self.model_fields_set:
            _dict['page_url'] = None

        # set to None if platform_description (nullable) is None
        # and model_fields_set contains the field
        if self.platform_description is None and "platform_description" in self.model_fields_set:
            _dict['platform_description'] = None

        # set to None if platform_summary (nullable) is None
        # and model_fields_set contains the field
        if self.platform_summary is None and "platform_summary" in self.model_fields_set:
            _dict['platform_summary'] = None

        # set to None if playback_id (nullable) is None
        # and model_fields_set contains the field
        if self.playback_id is None and "playback_id" in self.model_fields_set:
            _dict['playback_id'] = None

        # set to None if playback_score (nullable) is None
        # and model_fields_set contains the field
        if self.playback_score is None and "playback_score" in self.model_fields_set:
            _dict['playback_score'] = None

        # set to None if player_error_code (nullable) is None
        # and model_fields_set contains the field
        if self.player_error_code is None and "player_error_code" in self.model_fields_set:
            _dict['player_error_code'] = None

        # set to None if player_error_context (nullable) is None
        # and model_fields_set contains the field
        if self.player_error_context is None and "player_error_context" in self.model_fields_set:
            _dict['player_error_context'] = None

        # set to None if player_error_message (nullable) is None
        # and model_fields_set contains the field
        if self.player_error_message is None and "player_error_message" in self.model_fields_set:
            _dict['player_error_message'] = None

        # set to None if player_height (nullable) is None
        # and model_fields_set contains the field
        if self.player_height is None and "player_height" in self.model_fields_set:
            _dict['player_height'] = None

        # set to None if player_instance_id (nullable) is None
        # and model_fields_set contains the field
        if self.player_instance_id is None and "player_instance_id" in self.model_fields_set:
            _dict['player_instance_id'] = None

        # set to None if player_language (nullable) is None
        # and model_fields_set contains the field
        if self.player_language is None and "player_language" in self.model_fields_set:
            _dict['player_language'] = None

        # set to None if player_load_time (nullable) is None
        # and model_fields_set contains the field
        if self.player_load_time is None and "player_load_time" in self.model_fields_set:
            _dict['player_load_time'] = None

        # set to None if player_mux_plugin_name (nullable) is None
        # and model_fields_set contains the field
        if self.player_mux_plugin_name is None and "player_mux_plugin_name" in self.model_fields_set:
            _dict['player_mux_plugin_name'] = None

        # set to None if player_mux_plugin_version (nullable) is None
        # and model_fields_set contains the field
        if self.player_mux_plugin_version is None and "player_mux_plugin_version" in self.model_fields_set:
            _dict['player_mux_plugin_version'] = None

        # set to None if player_name (nullable) is None
        # and model_fields_set contains the field
        if self.player_name is None and "player_name" in self.model_fields_set:
            _dict['player_name'] = None

        # set to None if player_poster (nullable) is None
        # and model_fields_set contains the field
        if self.player_poster is None and "player_poster" in self.model_fields_set:
            _dict['player_poster'] = None

        # set to None if player_remote_played (nullable) is None
        # and model_fields_set contains the field
        if self.player_remote_played is None and "player_remote_played" in self.model_fields_set:
            _dict['player_remote_played'] = None

        # set to None if player_software (nullable) is None
        # and model_fields_set contains the field
        if self.player_software is None and "player_software" in self.model_fields_set:
            _dict['player_software'] = None

        # set to None if player_software_version (nullable) is None
        # and model_fields_set contains the field
        if self.player_software_version is None and "player_software_version" in self.model_fields_set:
            _dict['player_software_version'] = None

        # set to None if player_source_domain (nullable) is None
        # and model_fields_set contains the field
        if self.player_source_domain is None and "player_source_domain" in self.model_fields_set:
            _dict['player_source_domain'] = None

        # set to None if player_source_duration (nullable) is None
        # and model_fields_set contains the field
        if self.player_source_duration is None and "player_source_duration" in self.model_fields_set:
            _dict['player_source_duration'] = None

        # set to None if player_source_height (nullable) is None
        # and model_fields_set contains the field
        if self.player_source_height is None and "player_source_height" in self.model_fields_set:
            _dict['player_source_height'] = None

        # set to None if player_source_host_name (nullable) is None
        # and model_fields_set contains the field
        if self.player_source_host_name is None and "player_source_host_name" in self.model_fields_set:
            _dict['player_source_host_name'] = None

        # set to None if player_source_stream_type (nullable) is None
        # and model_fields_set contains the field
        if self.player_source_stream_type is None and "player_source_stream_type" in self.model_fields_set:
            _dict['player_source_stream_type'] = None

        # set to None if player_source_type (nullable) is None
        # and model_fields_set contains the field
        if self.player_source_type is None and "player_source_type" in self.model_fields_set:
            _dict['player_source_type'] = None

        # set to None if player_source_url (nullable) is None
        # and model_fields_set contains the field
        if self.player_source_url is None and "player_source_url" in self.model_fields_set:
            _dict['player_source_url'] = None

        # set to None if player_source_width (nullable) is None
        # and model_fields_set contains the field
        if self.player_source_width is None and "player_source_width" in self.model_fields_set:
            _dict['player_source_width'] = None

        # set to None if player_startup_time (nullable) is None
        # and model_fields_set contains the field
        if self.player_startup_time is None and "player_startup_time" in self.model_fields_set:
            _dict['player_startup_time'] = None

        # set to None if player_version (nullable) is None
        # and model_fields_set contains the field
        if self.player_version is None and "player_version" in self.model_fields_set:
            _dict['player_version'] = None

        # set to None if player_view_count (nullable) is None
        # and model_fields_set contains the field
        if self.player_view_count is None and "player_view_count" in self.model_fields_set:
            _dict['player_view_count'] = None

        # set to None if player_width (nullable) is None
        # and model_fields_set contains the field
        if self.player_width is None and "player_width" in self.model_fields_set:
            _dict['player_width'] = None

        # set to None if preroll_ad_asset_hostname (nullable) is None
        # and model_fields_set contains the field
        if self.preroll_ad_asset_hostname is None and "preroll_ad_asset_hostname" in self.model_fields_set:
            _dict['preroll_ad_asset_hostname'] = None

        # set to None if preroll_ad_tag_hostname (nullable) is None
        # and model_fields_set contains the field
        if self.preroll_ad_tag_hostname is None and "preroll_ad_tag_hostname" in self.model_fields_set:
            _dict['preroll_ad_tag_hostname'] = None

        # set to None if preroll_played (nullable) is None
        # and model_fields_set contains the field
        if self.preroll_played is None and "preroll_played" in self.model_fields_set:
            _dict['preroll_played'] = None

        # set to None if preroll_requested (nullable) is None
        # and model_fields_set contains the field
        if self.preroll_requested is None and "preroll_requested" in self.model_fields_set:
            _dict['preroll_requested'] = None

        # set to None if quality_score (nullable) is None
        # and model_fields_set contains the field
        if self.quality_score is None and "quality_score" in self.model_fields_set:
            _dict['quality_score'] = None

        # set to None if rebuffer_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.rebuffer_percentage is None and "rebuffer_percentage" in self.model_fields_set:
            _dict['rebuffer_percentage'] = None

        # set to None if rebuffering_score (nullable) is None
        # and model_fields_set contains the field
        if self.rebuffering_score is None and "rebuffering_score" in self.model_fields_set:
            _dict['rebuffering_score'] = None

        # set to None if region (nullable) is None
        # and model_fields_set contains the field
        if self.region is None and "region" in self.model_fields_set:
            _dict['region'] = None

        # set to None if requests_for_first_preroll (nullable) is None
        # and model_fields_set contains the field
        if self.requests_for_first_preroll is None and "requests_for_first_preroll" in self.model_fields_set:
            _dict['requests_for_first_preroll'] = None

        # set to None if startup_score (nullable) is None
        # and model_fields_set contains the field
        if self.startup_score is None and "startup_score" in self.model_fields_set:
            _dict['startup_score'] = None

        # set to None if sub_property_id (nullable) is None
        # and model_fields_set contains the field
        if self.sub_property_id is None and "sub_property_id" in self.model_fields_set:
            _dict['sub_property_id'] = None

        # set to None if time_to_first_frame (nullable) is None
        # and model_fields_set contains the field
        if self.time_to_first_frame is None and "time_to_first_frame" in self.model_fields_set:
            _dict['time_to_first_frame'] = None

        # set to None if video_content_type (nullable) is None
        # and model_fields_set contains the field
        if self.video_content_type is None and "video_content_type" in self.model_fields_set:
            _dict['video_content_type'] = None

        # set to None if video_duration (nullable) is None
        # and model_fields_set contains the field
        if self.video_duration is None and "video_duration" in self.model_fields_set:
            _dict['video_duration'] = None

        # set to None if video_encoding_variant (nullable) is None
        # and model_fields_set contains the field
        if self.video_encoding_variant is None and "video_encoding_variant" in self.model_fields_set:
            _dict['video_encoding_variant'] = None

        # set to None if video_id (nullable) is None
        # and model_fields_set contains the field
        if self.video_id is None and "video_id" in self.model_fields_set:
            _dict['video_id'] = None

        # set to None if video_language (nullable) is None
        # and model_fields_set contains the field
        if self.video_language is None and "video_language" in self.model_fields_set:
            _dict['video_language'] = None

        # set to None if video_producer (nullable) is None
        # and model_fields_set contains the field
        if self.video_producer is None and "video_producer" in self.model_fields_set:
            _dict['video_producer'] = None

        # set to None if video_series (nullable) is None
        # and model_fields_set contains the field
        if self.video_series is None and "video_series" in self.model_fields_set:
            _dict['video_series'] = None

        # set to None if video_startup_preroll_load_time (nullable) is None
        # and model_fields_set contains the field
        if self.video_startup_preroll_load_time is None and "video_startup_preroll_load_time" in self.model_fields_set:
            _dict['video_startup_preroll_load_time'] = None

        # set to None if video_startup_preroll_request_time (nullable) is None
        # and model_fields_set contains the field
        if self.video_startup_preroll_request_time is None and "video_startup_preroll_request_time" in self.model_fields_set:
            _dict['video_startup_preroll_request_time'] = None

        # set to None if video_stream_type (nullable) is None
        # and model_fields_set contains the field
        if self.video_stream_type is None and "video_stream_type" in self.model_fields_set:
            _dict['video_stream_type'] = None

        # set to None if video_title (nullable) is None
        # and model_fields_set contains the field
        if self.video_title is None and "video_title" in self.model_fields_set:
            _dict['video_title'] = None

        # set to None if video_variant_id (nullable) is None
        # and model_fields_set contains the field
        if self.video_variant_id is None and "video_variant_id" in self.model_fields_set:
            _dict['video_variant_id'] = None

        # set to None if video_variant_name (nullable) is None
        # and model_fields_set contains the field
        if self.video_variant_name is None and "video_variant_name" in self.model_fields_set:
            _dict['video_variant_name'] = None

        # set to None if view_average_request_latency (nullable) is None
        # and model_fields_set contains the field
        if self.view_average_request_latency is None and "view_average_request_latency" in self.model_fields_set:
            _dict['view_average_request_latency'] = None

        # set to None if view_average_request_throughput (nullable) is None
        # and model_fields_set contains the field
        if self.view_average_request_throughput is None and "view_average_request_throughput" in self.model_fields_set:
            _dict['view_average_request_throughput'] = None

        # set to None if view_drm_type (nullable) is None
        # and model_fields_set contains the field
        if self.view_drm_type is None and "view_drm_type" in self.model_fields_set:
            _dict['view_drm_type'] = None

        # set to None if view_dropped_frame_count (nullable) is None
        # and model_fields_set contains the field
        if self.view_dropped_frame_count is None and "view_dropped_frame_count" in self.model_fields_set:
            _dict['view_dropped_frame_count'] = None

        # set to None if view_error_id (nullable) is None
        # and model_fields_set contains the field
        if self.view_error_id is None and "view_error_id" in self.model_fields_set:
            _dict['view_error_id'] = None

        # set to None if view_max_downscale_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.view_max_downscale_percentage is None and "view_max_downscale_percentage" in self.model_fields_set:
            _dict['view_max_downscale_percentage'] = None

        # set to None if view_max_playhead_position (nullable) is None
        # and model_fields_set contains the field
        if self.view_max_playhead_position is None and "view_max_playhead_position" in self.model_fields_set:
            _dict['view_max_playhead_position'] = None

        # set to None if view_max_request_latency (nullable) is None
        # and model_fields_set contains the field
        if self.view_max_request_latency is None and "view_max_request_latency" in self.model_fields_set:
            _dict['view_max_request_latency'] = None

        # set to None if view_max_upscale_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.view_max_upscale_percentage is None and "view_max_upscale_percentage" in self.model_fields_set:
            _dict['view_max_upscale_percentage'] = None

        # set to None if view_playing_time (nullable) is None
        # and model_fields_set contains the field
        if self.view_playing_time is None and "view_playing_time" in self.model_fields_set:
            _dict['view_playing_time'] = None

        # set to None if view_seek_count (nullable) is None
        # and model_fields_set contains the field
        if self.view_seek_count is None and "view_seek_count" in self.model_fields_set:
            _dict['view_seek_count'] = None

        # set to None if view_seek_duration (nullable) is None
        # and model_fields_set contains the field
        if self.view_seek_duration is None and "view_seek_duration" in self.model_fields_set:
            _dict['view_seek_duration'] = None

        # set to None if view_session_id (nullable) is None
        # and model_fields_set contains the field
        if self.view_session_id is None and "view_session_id" in self.model_fields_set:
            _dict['view_session_id'] = None

        # set to None if view_total_content_playback_time (nullable) is None
        # and model_fields_set contains the field
        if self.view_total_content_playback_time is None and "view_total_content_playback_time" in self.model_fields_set:
            _dict['view_total_content_playback_time'] = None

        # set to None if view_total_downscaling (nullable) is None
        # and model_fields_set contains the field
        if self.view_total_downscaling is None and "view_total_downscaling" in self.model_fields_set:
            _dict['view_total_downscaling'] = None

        # set to None if view_total_upscaling (nullable) is None
        # and model_fields_set contains the field
        if self.view_total_upscaling is None and "view_total_upscaling" in self.model_fields_set:
            _dict['view_total_upscaling'] = None

        # set to None if viewer_application_engine (nullable) is None
        # and model_fields_set contains the field
        if self.viewer_application_engine is None and "viewer_application_engine" in self.model_fields_set:
            _dict['viewer_application_engine'] = None

        # set to None if viewer_application_name (nullable) is None
        # and model_fields_set contains the field
        if self.viewer_application_name is None and "viewer_application_name" in self.model_fields_set:
            _dict['viewer_application_name'] = None

        # set to None if viewer_application_version (nullable) is None
        # and model_fields_set contains the field
        if self.viewer_application_version is None and "viewer_application_version" in self.model_fields_set:
            _dict['viewer_application_version'] = None

        # set to None if viewer_connection_type (nullable) is None
        # and model_fields_set contains the field
        if self.viewer_connection_type is None and "viewer_connection_type" in self.model_fields_set:
            _dict['viewer_connection_type'] = None

        # set to None if viewer_device_category (nullable) is None
        # and model_fields_set contains the field
        if self.viewer_device_category is None and "viewer_device_category" in self.model_fields_set:
            _dict['viewer_device_category'] = None

        # set to None if viewer_device_manufacturer (nullable) is None
        # and model_fields_set contains the field
        if self.viewer_device_manufacturer is None and "viewer_device_manufacturer" in self.model_fields_set:
            _dict['viewer_device_manufacturer'] = None

        # set to None if viewer_device_model (nullable) is None
        # and model_fields_set contains the field
        if self.viewer_device_model is None and "viewer_device_model" in self.model_fields_set:
            _dict['viewer_device_model'] = None

        # set to None if viewer_device_name (nullable) is None
        # and model_fields_set contains the field
        if self.viewer_device_name is None and "viewer_device_name" in self.model_fields_set:
            _dict['viewer_device_name'] = None

        # set to None if viewer_experience_score (nullable) is None
        # and model_fields_set contains the field
        if self.viewer_experience_score is None and "viewer_experience_score" in self.model_fields_set:
            _dict['viewer_experience_score'] = None

        # set to None if viewer_os_architecture (nullable) is None
        # and model_fields_set contains the field
        if self.viewer_os_architecture is None and "viewer_os_architecture" in self.model_fields_set:
            _dict['viewer_os_architecture'] = None

        # set to None if viewer_os_family (nullable) is None
        # and model_fields_set contains the field
        if self.viewer_os_family is None and "viewer_os_family" in self.model_fields_set:
            _dict['viewer_os_family'] = None

        # set to None if viewer_os_version (nullable) is None
        # and model_fields_set contains the field
        if self.viewer_os_version is None and "viewer_os_version" in self.model_fields_set:
            _dict['viewer_os_version'] = None

        # set to None if viewer_user_agent (nullable) is None
        # and model_fields_set contains the field
        if self.viewer_user_agent is None and "viewer_user_agent" in self.model_fields_set:
            _dict['viewer_user_agent'] = None

        # set to None if viewer_user_id (nullable) is None
        # and model_fields_set contains the field
        if self.viewer_user_id is None and "viewer_user_id" in self.model_fields_set:
            _dict['viewer_user_id'] = None

        # set to None if watch_time (nullable) is None
        # and model_fields_set contains the field
        if self.watch_time is None and "watch_time" in self.model_fields_set:
            _dict['watch_time'] = None

        # set to None if weighted_average_bitrate (nullable) is None
        # and model_fields_set contains the field
        if self.weighted_average_bitrate is None and "weighted_average_bitrate" in self.model_fields_set:
            _dict['weighted_average_bitrate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VideoView from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asn": obj.get("asn"),
            "asn_name": obj.get("asn_name"),
            "asset_id": obj.get("asset_id"),
            "buffering_count": obj.get("buffering_count"),
            "buffering_duration": obj.get("buffering_duration"),
            "buffering_rate": obj.get("buffering_rate"),
            "cdn": obj.get("cdn"),
            "city": obj.get("city"),
            "continent_code": obj.get("continent_code"),
            "country_code": obj.get("country_code"),
            "country_name": obj.get("country_name"),
            "custom_1": obj.get("custom_1"),
            "custom_10": obj.get("custom_10"),
            "custom_2": obj.get("custom_2"),
            "custom_3": obj.get("custom_3"),
            "custom_4": obj.get("custom_4"),
            "custom_5": obj.get("custom_5"),
            "custom_6": obj.get("custom_6"),
            "custom_7": obj.get("custom_7"),
            "custom_8": obj.get("custom_8"),
            "custom_9": obj.get("custom_9"),
            "environment_id": obj.get("environment_id"),
            "error_type_id": obj.get("error_type_id"),
            "events": [VideoViewEvent.from_dict(_item) for _item in obj["events"]] if obj.get("events") is not None else None,
            "exit_before_video_start": obj.get("exit_before_video_start"),
            "experiment_name": obj.get("experiment_name"),
            "id": obj.get("id"),
            "inserted_at": obj.get("inserted_at"),
            "isp": obj.get("isp"),
            "latitude": obj.get("latitude"),
            "live_stream_id": obj.get("live_stream_id"),
            "live_stream_latency": obj.get("live_stream_latency"),
            "longitude": obj.get("longitude"),
            "metro": obj.get("metro"),
            "mux_api_version": obj.get("mux_api_version"),
            "mux_embed": obj.get("mux_embed"),
            "mux_embed_version": obj.get("mux_embed_version"),
            "mux_viewer_id": obj.get("mux_viewer_id"),
            "page_load_time": obj.get("page_load_time"),
            "page_type": obj.get("page_type"),
            "page_url": obj.get("page_url"),
            "platform_description": obj.get("platform_description"),
            "platform_summary": obj.get("platform_summary"),
            "playback_id": obj.get("playback_id"),
            "playback_score": obj.get("playback_score"),
            "player_autoplay": obj.get("player_autoplay"),
            "player_error_code": obj.get("player_error_code"),
            "player_error_context": obj.get("player_error_context"),
            "player_error_message": obj.get("player_error_message"),
            "player_height": obj.get("player_height"),
            "player_instance_id": obj.get("player_instance_id"),
            "player_language": obj.get("player_language"),
            "player_load_time": obj.get("player_load_time"),
            "player_mux_plugin_name": obj.get("player_mux_plugin_name"),
            "player_mux_plugin_version": obj.get("player_mux_plugin_version"),
            "player_name": obj.get("player_name"),
            "player_poster": obj.get("player_poster"),
            "player_preload": obj.get("player_preload"),
            "player_remote_played": obj.get("player_remote_played"),
            "player_software": obj.get("player_software"),
            "player_software_version": obj.get("player_software_version"),
            "player_source_domain": obj.get("player_source_domain"),
            "player_source_duration": obj.get("player_source_duration"),
            "player_source_height": obj.get("player_source_height"),
            "player_source_host_name": obj.get("player_source_host_name"),
            "player_source_stream_type": obj.get("player_source_stream_type"),
            "player_source_type": obj.get("player_source_type"),
            "player_source_url": obj.get("player_source_url"),
            "player_source_width": obj.get("player_source_width"),
            "player_startup_time": obj.get("player_startup_time"),
            "player_version": obj.get("player_version"),
            "player_view_count": obj.get("player_view_count"),
            "player_width": obj.get("player_width"),
            "preroll_ad_asset_hostname": obj.get("preroll_ad_asset_hostname"),
            "preroll_ad_tag_hostname": obj.get("preroll_ad_tag_hostname"),
            "preroll_played": obj.get("preroll_played"),
            "preroll_requested": obj.get("preroll_requested"),
            "property_id": obj.get("property_id"),
            "quality_score": obj.get("quality_score"),
            "rebuffer_percentage": obj.get("rebuffer_percentage"),
            "rebuffering_score": obj.get("rebuffering_score"),
            "region": obj.get("region"),
            "requests_for_first_preroll": obj.get("requests_for_first_preroll"),
            "session_id": obj.get("session_id"),
            "short_time": obj.get("short_time"),
            "startup_score": obj.get("startup_score"),
            "sub_property_id": obj.get("sub_property_id"),
            "time_to_first_frame": obj.get("time_to_first_frame"),
            "updated_at": obj.get("updated_at"),
            "used_fullscreen": obj.get("used_fullscreen"),
            "video_content_type": obj.get("video_content_type"),
            "video_duration": obj.get("video_duration"),
            "video_encoding_variant": obj.get("video_encoding_variant"),
            "video_id": obj.get("video_id"),
            "video_language": obj.get("video_language"),
            "video_producer": obj.get("video_producer"),
            "video_series": obj.get("video_series"),
            "video_startup_failure": obj.get("video_startup_failure"),
            "video_startup_preroll_load_time": obj.get("video_startup_preroll_load_time"),
            "video_startup_preroll_request_time": obj.get("video_startup_preroll_request_time"),
            "video_stream_type": obj.get("video_stream_type"),
            "video_title": obj.get("video_title"),
            "video_variant_id": obj.get("video_variant_id"),
            "video_variant_name": obj.get("video_variant_name"),
            "view_average_request_latency": obj.get("view_average_request_latency"),
            "view_average_request_throughput": obj.get("view_average_request_throughput"),
            "view_drm_type": obj.get("view_drm_type"),
            "view_dropped_frame_count": obj.get("view_dropped_frame_count"),
            "view_end": obj.get("view_end"),
            "view_error_id": obj.get("view_error_id"),
            "view_has_ad": obj.get("view_has_ad"),
            "view_id": obj.get("view_id"),
            "view_max_downscale_percentage": obj.get("view_max_downscale_percentage"),
            "view_max_playhead_position": obj.get("view_max_playhead_position"),
            "view_max_request_latency": obj.get("view_max_request_latency"),
            "view_max_upscale_percentage": obj.get("view_max_upscale_percentage"),
            "view_playing_time": obj.get("view_playing_time"),
            "view_seek_count": obj.get("view_seek_count"),
            "view_seek_duration": obj.get("view_seek_duration"),
            "view_session_id": obj.get("view_session_id"),
            "view_start": obj.get("view_start"),
            "view_total_content_playback_time": obj.get("view_total_content_playback_time"),
            "view_total_downscaling": obj.get("view_total_downscaling"),
            "view_total_upscaling": obj.get("view_total_upscaling"),
            "viewer_application_engine": obj.get("viewer_application_engine"),
            "viewer_application_name": obj.get("viewer_application_name"),
            "viewer_application_version": obj.get("viewer_application_version"),
            "viewer_connection_type": obj.get("viewer_connection_type"),
            "viewer_device_category": obj.get("viewer_device_category"),
            "viewer_device_manufacturer": obj.get("viewer_device_manufacturer"),
            "viewer_device_model": obj.get("viewer_device_model"),
            "viewer_device_name": obj.get("viewer_device_name"),
            "viewer_experience_score": obj.get("viewer_experience_score"),
            "viewer_os_architecture": obj.get("viewer_os_architecture"),
            "viewer_os_family": obj.get("viewer_os_family"),
            "viewer_os_version": obj.get("viewer_os_version"),
            "viewer_user_agent": obj.get("viewer_user_agent"),
            "viewer_user_id": obj.get("viewer_user_id"),
            "watch_time": obj.get("watch_time"),
            "watched": obj.get("watched"),
            "weighted_average_bitrate": obj.get("weighted_average_bitrate")
        })
        return _obj



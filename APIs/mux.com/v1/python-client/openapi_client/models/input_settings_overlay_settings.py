# coding: utf-8

"""
    Mux API

    Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.

    The version of the OpenAPI document: v1
    Contact: devex@mux.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class InputSettingsOverlaySettings(BaseModel):
    """
    An object that describes how the image file referenced in URL should be placed over the video (i.e. watermarking). Ensure that the URL is active and persists the entire lifespan of the video object.
    """ # noqa: E501
    height: Optional[StrictStr] = Field(default=None, description="How tall the overlay should appear. Can be expressed as a percent (\"10%\") or as a pixel value (\"100px\"). If both width and height are left blank the height will be the true pixels of the image, applied as if the video has been scaled to fit a 1920x1080 frame. If width is supplied with no height, the height will scale proportionally to the width.")
    horizontal_align: Optional[StrictStr] = Field(default=None, description="Where the horizontal positioning of the overlay/watermark should begin from.")
    horizontal_margin: Optional[StrictStr] = Field(default=None, description="The distance from the horizontal_align starting point and the image's closest edge. Can be expressed as a percent (\"10%\") or as a pixel value (\"100px\"). Negative values will move the overlay offscreen. In the case of 'center', a positive value will shift the image towards the right and and a negative value will shift it towards the left.")
    opacity: Optional[StrictStr] = Field(default=None, description="How opaque the overlay should appear, expressed as a percent. (Default 100%)")
    vertical_align: Optional[StrictStr] = Field(default=None, description="Where the vertical positioning of the overlay/watermark should begin from. Defaults to `\"top\"`")
    vertical_margin: Optional[StrictStr] = Field(default=None, description="The distance from the vertical_align starting point and the image's closest edge. Can be expressed as a percent (\"10%\") or as a pixel value (\"100px\"). Negative values will move the overlay offscreen. In the case of 'middle', a positive value will shift the overlay towards the bottom and and a negative value will shift it towards the top.")
    width: Optional[StrictStr] = Field(default=None, description="How wide the overlay should appear. Can be expressed as a percent (\"10%\") or as a pixel value (\"100px\"). If both width and height are left blank the width will be the true pixels of the image, applied as if the video has been scaled to fit a 1920x1080 frame. If height is supplied with no width, the width will scale proportionally to the height.")
    __properties: ClassVar[List[str]] = ["height", "horizontal_align", "horizontal_margin", "opacity", "vertical_align", "vertical_margin", "width"]

    @field_validator('horizontal_align')
    def horizontal_align_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['left', 'center', 'right']):
            raise ValueError("must be one of enum values ('left', 'center', 'right')")
        return value

    @field_validator('vertical_align')
    def vertical_align_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['top', 'middle', 'bottom']):
            raise ValueError("must be one of enum values ('top', 'middle', 'bottom')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InputSettingsOverlaySettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InputSettingsOverlaySettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "height": obj.get("height"),
            "horizontal_align": obj.get("horizontal_align"),
            "horizontal_margin": obj.get("horizontal_margin"),
            "opacity": obj.get("opacity"),
            "vertical_align": obj.get("vertical_align"),
            "vertical_margin": obj.get("vertical_margin"),
            "width": obj.get("width")
        })
        return _obj



# coding: utf-8

"""
    StackExchange

    Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.inbox_items_inner_site_styling import InboxItemsInnerSiteStyling
from typing import Optional, Set
from typing_extensions import Self

class InboxItemsInnerSite(BaseModel):
    """
    InboxItemsInnerSite
    """ # noqa: E501
    aliases: Optional[List[Any]] = None
    api_site_parameter: Optional[StrictStr] = None
    audience: Optional[StrictStr] = None
    closed_beta_date: Optional[StrictInt] = None
    favicon_url: Optional[StrictStr] = None
    high_resolution_icon_url: Optional[StrictStr] = None
    icon_url: Optional[StrictStr] = None
    launch_date: Optional[StrictInt] = None
    logo_url: Optional[StrictStr] = None
    markdown_extensions: Optional[List[Any]] = None
    name: Optional[StrictStr] = None
    open_beta_date: Optional[StrictInt] = None
    related_sites: Optional[List[Any]] = None
    site_state: Optional[StrictStr] = None
    site_type: Optional[StrictStr] = None
    site_url: Optional[StrictStr] = None
    styling: Optional[InboxItemsInnerSiteStyling] = None
    twitter_account: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["aliases", "api_site_parameter", "audience", "closed_beta_date", "favicon_url", "high_resolution_icon_url", "icon_url", "launch_date", "logo_url", "markdown_extensions", "name", "open_beta_date", "related_sites", "site_state", "site_type", "site_url", "styling", "twitter_account"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InboxItemsInnerSite from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of styling
        if self.styling:
            _dict['styling'] = self.styling.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InboxItemsInnerSite from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aliases": obj.get("aliases"),
            "api_site_parameter": obj.get("api_site_parameter"),
            "audience": obj.get("audience"),
            "closed_beta_date": obj.get("closed_beta_date"),
            "favicon_url": obj.get("favicon_url"),
            "high_resolution_icon_url": obj.get("high_resolution_icon_url"),
            "icon_url": obj.get("icon_url"),
            "launch_date": obj.get("launch_date"),
            "logo_url": obj.get("logo_url"),
            "markdown_extensions": obj.get("markdown_extensions"),
            "name": obj.get("name"),
            "open_beta_date": obj.get("open_beta_date"),
            "related_sites": obj.get("related_sites"),
            "site_state": obj.get("site_state"),
            "site_type": obj.get("site_type"),
            "site_url": obj.get("site_url"),
            "styling": InboxItemsInnerSiteStyling.from_dict(obj["styling"]) if obj.get("styling") is not None else None,
            "twitter_account": obj.get("twitter_account")
        })
        return _obj



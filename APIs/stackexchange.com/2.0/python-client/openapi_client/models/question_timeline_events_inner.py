# coding: utf-8

"""
    StackExchange

    Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.answers_inner_last_editor import AnswersInnerLastEditor
from typing import Optional, Set
from typing_extensions import Self

class QuestionTimelineEventsInner(BaseModel):
    """
    QuestionTimelineEventsInner
    """ # noqa: E501
    comment_id: Optional[StrictInt] = None
    creation_date: Optional[StrictInt] = None
    down_vote_count: Optional[StrictInt] = None
    owner: Optional[AnswersInnerLastEditor] = None
    post_id: Optional[StrictInt] = None
    question_id: Optional[StrictInt] = None
    revision_guid: Optional[StrictStr] = None
    timeline_type: Optional[StrictStr] = None
    up_vote_count: Optional[StrictInt] = None
    user: Optional[AnswersInnerLastEditor] = None
    __properties: ClassVar[List[str]] = ["comment_id", "creation_date", "down_vote_count", "owner", "post_id", "question_id", "revision_guid", "timeline_type", "up_vote_count", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QuestionTimelineEventsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QuestionTimelineEventsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comment_id": obj.get("comment_id"),
            "creation_date": obj.get("creation_date"),
            "down_vote_count": obj.get("down_vote_count"),
            "owner": AnswersInnerLastEditor.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "post_id": obj.get("post_id"),
            "question_id": obj.get("question_id"),
            "revision_guid": obj.get("revision_guid"),
            "timeline_type": obj.get("timeline_type"),
            "up_vote_count": obj.get("up_vote_count"),
            "user": AnswersInnerLastEditor.from_dict(obj["user"]) if obj.get("user") is not None else None
        })
        return _obj



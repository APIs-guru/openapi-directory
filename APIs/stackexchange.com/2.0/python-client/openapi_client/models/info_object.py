# coding: utf-8

"""
    StackExchange

    Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.inbox_items_inner_site import InboxItemsInnerSite
from typing import Optional, Set
from typing_extensions import Self

class InfoObject(BaseModel):
    """
    InfoObject
    """ # noqa: E501
    answers_per_minute: Optional[Union[StrictFloat, StrictInt]] = None
    api_revision: Optional[StrictStr] = None
    badges_per_minute: Optional[Union[StrictFloat, StrictInt]] = None
    new_active_users: Optional[StrictInt] = None
    questions_per_minute: Optional[Union[StrictFloat, StrictInt]] = None
    site: Optional[InboxItemsInnerSite] = None
    total_accepted: Optional[StrictInt] = None
    total_answers: Optional[StrictInt] = None
    total_badges: Optional[StrictInt] = None
    total_comments: Optional[StrictInt] = None
    total_questions: Optional[StrictInt] = None
    total_unanswered: Optional[StrictInt] = None
    total_users: Optional[StrictInt] = None
    total_votes: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["answers_per_minute", "api_revision", "badges_per_minute", "new_active_users", "questions_per_minute", "site", "total_accepted", "total_answers", "total_badges", "total_comments", "total_questions", "total_unanswered", "total_users", "total_votes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InfoObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of site
        if self.site:
            _dict['site'] = self.site.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InfoObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "answers_per_minute": obj.get("answers_per_minute"),
            "api_revision": obj.get("api_revision"),
            "badges_per_minute": obj.get("badges_per_minute"),
            "new_active_users": obj.get("new_active_users"),
            "questions_per_minute": obj.get("questions_per_minute"),
            "site": InboxItemsInnerSite.from_dict(obj["site"]) if obj.get("site") is not None else None,
            "total_accepted": obj.get("total_accepted"),
            "total_answers": obj.get("total_answers"),
            "total_badges": obj.get("total_badges"),
            "total_comments": obj.get("total_comments"),
            "total_questions": obj.get("total_questions"),
            "total_unanswered": obj.get("total_unanswered"),
            "total_users": obj.get("total_users"),
            "total_votes": obj.get("total_votes")
        })
        return _obj



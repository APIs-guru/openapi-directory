# coding: utf-8

"""
    StackExchange

    Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.answers_inner_last_editor_badge_counts import AnswersInnerLastEditorBadgeCounts
from typing import Optional, Set
from typing_extensions import Self

class AnswersInnerLastEditor(BaseModel):
    """
    AnswersInnerLastEditor
    """ # noqa: E501
    accept_rate: Optional[StrictInt] = None
    badge_counts: Optional[AnswersInnerLastEditorBadgeCounts] = None
    display_name: Optional[StrictStr] = None
    link: Optional[StrictStr] = None
    profile_image: Optional[StrictStr] = None
    reputation: Optional[StrictInt] = None
    user_id: Optional[StrictInt] = None
    user_type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["accept_rate", "badge_counts", "display_name", "link", "profile_image", "reputation", "user_id", "user_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnswersInnerLastEditor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of badge_counts
        if self.badge_counts:
            _dict['badge_counts'] = self.badge_counts.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnswersInnerLastEditor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accept_rate": obj.get("accept_rate"),
            "badge_counts": AnswersInnerLastEditorBadgeCounts.from_dict(obj["badge_counts"]) if obj.get("badge_counts") is not None else None,
            "display_name": obj.get("display_name"),
            "link": obj.get("link"),
            "profile_image": obj.get("profile_image"),
            "reputation": obj.get("reputation"),
            "user_id": obj.get("user_id"),
            "user_type": obj.get("user_type")
        })
        return _obj



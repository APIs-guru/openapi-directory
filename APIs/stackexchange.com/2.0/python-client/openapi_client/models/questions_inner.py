# coding: utf-8

"""
    StackExchange

    Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.answers_inner_last_editor import AnswersInnerLastEditor
from openapi_client.models.questions_inner_closed_details import QuestionsInnerClosedDetails
from openapi_client.models.questions_inner_migrated_from import QuestionsInnerMigratedFrom
from openapi_client.models.questions_inner_notice import QuestionsInnerNotice
from typing import Optional, Set
from typing_extensions import Self

class QuestionsInner(BaseModel):
    """
    QuestionsInner
    """ # noqa: E501
    accepted_answer_id: Optional[StrictInt] = None
    answer_count: Optional[StrictInt] = None
    answers: Optional[List[Any]] = None
    body: Optional[StrictStr] = None
    body_markdown: Optional[StrictStr] = None
    bounty_amount: Optional[StrictInt] = None
    bounty_closes_date: Optional[StrictInt] = None
    bounty_user: Optional[AnswersInnerLastEditor] = None
    can_close: Optional[StrictBool] = None
    can_flag: Optional[StrictBool] = None
    close_vote_count: Optional[StrictInt] = None
    closed_date: Optional[StrictInt] = None
    closed_details: Optional[QuestionsInnerClosedDetails] = None
    closed_reason: Optional[StrictStr] = None
    comment_count: Optional[StrictInt] = None
    comments: Optional[List[Any]] = None
    community_owned_date: Optional[StrictInt] = None
    creation_date: Optional[StrictInt] = None
    delete_vote_count: Optional[StrictInt] = None
    down_vote_count: Optional[StrictInt] = None
    downvoted: Optional[StrictBool] = None
    favorite_count: Optional[StrictInt] = None
    favorited: Optional[StrictBool] = None
    is_answered: Optional[StrictBool] = None
    last_activity_date: Optional[StrictInt] = None
    last_edit_date: Optional[StrictInt] = None
    last_editor: Optional[AnswersInnerLastEditor] = None
    link: Optional[StrictStr] = None
    locked_date: Optional[StrictInt] = None
    migrated_from: Optional[QuestionsInnerMigratedFrom] = None
    migrated_to: Optional[QuestionsInnerMigratedFrom] = None
    notice: Optional[QuestionsInnerNotice] = None
    owner: Optional[AnswersInnerLastEditor] = None
    protected_date: Optional[StrictInt] = None
    question_id: Optional[StrictInt] = None
    reopen_vote_count: Optional[StrictInt] = None
    score: Optional[StrictInt] = None
    share_link: Optional[StrictStr] = None
    tags: Optional[List[Any]] = None
    title: Optional[StrictStr] = None
    up_vote_count: Optional[StrictInt] = None
    upvoted: Optional[StrictBool] = None
    view_count: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["accepted_answer_id", "answer_count", "answers", "body", "body_markdown", "bounty_amount", "bounty_closes_date", "bounty_user", "can_close", "can_flag", "close_vote_count", "closed_date", "closed_details", "closed_reason", "comment_count", "comments", "community_owned_date", "creation_date", "delete_vote_count", "down_vote_count", "downvoted", "favorite_count", "favorited", "is_answered", "last_activity_date", "last_edit_date", "last_editor", "link", "locked_date", "migrated_from", "migrated_to", "notice", "owner", "protected_date", "question_id", "reopen_vote_count", "score", "share_link", "tags", "title", "up_vote_count", "upvoted", "view_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QuestionsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bounty_user
        if self.bounty_user:
            _dict['bounty_user'] = self.bounty_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of closed_details
        if self.closed_details:
            _dict['closed_details'] = self.closed_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_editor
        if self.last_editor:
            _dict['last_editor'] = self.last_editor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of migrated_from
        if self.migrated_from:
            _dict['migrated_from'] = self.migrated_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of migrated_to
        if self.migrated_to:
            _dict['migrated_to'] = self.migrated_to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notice
        if self.notice:
            _dict['notice'] = self.notice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QuestionsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accepted_answer_id": obj.get("accepted_answer_id"),
            "answer_count": obj.get("answer_count"),
            "answers": obj.get("answers"),
            "body": obj.get("body"),
            "body_markdown": obj.get("body_markdown"),
            "bounty_amount": obj.get("bounty_amount"),
            "bounty_closes_date": obj.get("bounty_closes_date"),
            "bounty_user": AnswersInnerLastEditor.from_dict(obj["bounty_user"]) if obj.get("bounty_user") is not None else None,
            "can_close": obj.get("can_close"),
            "can_flag": obj.get("can_flag"),
            "close_vote_count": obj.get("close_vote_count"),
            "closed_date": obj.get("closed_date"),
            "closed_details": QuestionsInnerClosedDetails.from_dict(obj["closed_details"]) if obj.get("closed_details") is not None else None,
            "closed_reason": obj.get("closed_reason"),
            "comment_count": obj.get("comment_count"),
            "comments": obj.get("comments"),
            "community_owned_date": obj.get("community_owned_date"),
            "creation_date": obj.get("creation_date"),
            "delete_vote_count": obj.get("delete_vote_count"),
            "down_vote_count": obj.get("down_vote_count"),
            "downvoted": obj.get("downvoted"),
            "favorite_count": obj.get("favorite_count"),
            "favorited": obj.get("favorited"),
            "is_answered": obj.get("is_answered"),
            "last_activity_date": obj.get("last_activity_date"),
            "last_edit_date": obj.get("last_edit_date"),
            "last_editor": AnswersInnerLastEditor.from_dict(obj["last_editor"]) if obj.get("last_editor") is not None else None,
            "link": obj.get("link"),
            "locked_date": obj.get("locked_date"),
            "migrated_from": QuestionsInnerMigratedFrom.from_dict(obj["migrated_from"]) if obj.get("migrated_from") is not None else None,
            "migrated_to": QuestionsInnerMigratedFrom.from_dict(obj["migrated_to"]) if obj.get("migrated_to") is not None else None,
            "notice": QuestionsInnerNotice.from_dict(obj["notice"]) if obj.get("notice") is not None else None,
            "owner": AnswersInnerLastEditor.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "protected_date": obj.get("protected_date"),
            "question_id": obj.get("question_id"),
            "reopen_vote_count": obj.get("reopen_vote_count"),
            "score": obj.get("score"),
            "share_link": obj.get("share_link"),
            "tags": obj.get("tags"),
            "title": obj.get("title"),
            "up_vote_count": obj.get("up_vote_count"),
            "upvoted": obj.get("upvoted"),
            "view_count": obj.get("view_count")
        })
        return _obj



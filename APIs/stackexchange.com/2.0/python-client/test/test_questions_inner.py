# coding: utf-8

"""
    StackExchange

    Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.questions_inner import QuestionsInner

class TestQuestionsInner(unittest.TestCase):
    """QuestionsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> QuestionsInner:
        """Test QuestionsInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `QuestionsInner`
        """
        model = QuestionsInner()
        if include_optional:
            return QuestionsInner(
                accepted_answer_id = 56,
                answer_count = 56,
                answers = [
                    null
                    ],
                body = '',
                body_markdown = '',
                bounty_amount = 56,
                bounty_closes_date = 56,
                bounty_user = openapi_client.models.answers_inner_last_editor.answers_inner_last_editor(
                    accept_rate = 56, 
                    badge_counts = openapi_client.models.answers_inner_last_editor_badge_counts.answers_inner_last_editor_badge_counts(
                        bronze = 56, 
                        gold = 56, 
                        silver = 56, ), 
                    display_name = '', 
                    link = '', 
                    profile_image = '', 
                    reputation = 56, 
                    user_id = 56, 
                    user_type = '', ),
                can_close = True,
                can_flag = True,
                close_vote_count = 56,
                closed_date = 56,
                closed_details = openapi_client.models.questions_inner_closed_details.questions_inner_closed_details(
                    by_users = [
                        null
                        ], 
                    description = '', 
                    on_hold = True, 
                    original_questions = [
                        null
                        ], 
                    reason = '', ),
                closed_reason = '',
                comment_count = 56,
                comments = [
                    null
                    ],
                community_owned_date = 56,
                creation_date = 56,
                delete_vote_count = 56,
                down_vote_count = 56,
                downvoted = True,
                favorite_count = 56,
                favorited = True,
                is_answered = True,
                last_activity_date = 56,
                last_edit_date = 56,
                last_editor = openapi_client.models.answers_inner_last_editor.answers_inner_last_editor(
                    accept_rate = 56, 
                    badge_counts = openapi_client.models.answers_inner_last_editor_badge_counts.answers_inner_last_editor_badge_counts(
                        bronze = 56, 
                        gold = 56, 
                        silver = 56, ), 
                    display_name = '', 
                    link = '', 
                    profile_image = '', 
                    reputation = 56, 
                    user_id = 56, 
                    user_type = '', ),
                link = '',
                locked_date = 56,
                migrated_from = openapi_client.models.questions_inner_migrated_from.questions_inner_migrated_from(
                    on_date = 56, 
                    other_site = openapi_client.models.inbox_items_inner_site.inbox_items_inner_site(
                        aliases = [
                            null
                            ], 
                        api_site_parameter = '', 
                        audience = '', 
                        closed_beta_date = 56, 
                        favicon_url = '', 
                        high_resolution_icon_url = '', 
                        icon_url = '', 
                        launch_date = 56, 
                        logo_url = '', 
                        markdown_extensions = [
                            null
                            ], 
                        name = '', 
                        open_beta_date = 56, 
                        related_sites = [
                            null
                            ], 
                        site_state = '', 
                        site_type = '', 
                        site_url = '', 
                        styling = openapi_client.models.inbox_items_inner_site_styling.inbox_items_inner_site_styling(
                            link_color = '', 
                            tag_background_color = '', 
                            tag_foreground_color = '', ), 
                        twitter_account = '', ), 
                    question_id = 56, ),
                migrated_to = openapi_client.models.questions_inner_migrated_from.questions_inner_migrated_from(
                    on_date = 56, 
                    other_site = openapi_client.models.inbox_items_inner_site.inbox_items_inner_site(
                        aliases = [
                            null
                            ], 
                        api_site_parameter = '', 
                        audience = '', 
                        closed_beta_date = 56, 
                        favicon_url = '', 
                        high_resolution_icon_url = '', 
                        icon_url = '', 
                        launch_date = 56, 
                        logo_url = '', 
                        markdown_extensions = [
                            null
                            ], 
                        name = '', 
                        open_beta_date = 56, 
                        related_sites = [
                            null
                            ], 
                        site_state = '', 
                        site_type = '', 
                        site_url = '', 
                        styling = openapi_client.models.inbox_items_inner_site_styling.inbox_items_inner_site_styling(
                            link_color = '', 
                            tag_background_color = '', 
                            tag_foreground_color = '', ), 
                        twitter_account = '', ), 
                    question_id = 56, ),
                notice = openapi_client.models.questions_inner_notice.questions_inner_notice(
                    body = '', 
                    creation_date = 56, 
                    owner_user_id = 56, ),
                owner = openapi_client.models.answers_inner_last_editor.answers_inner_last_editor(
                    accept_rate = 56, 
                    badge_counts = openapi_client.models.answers_inner_last_editor_badge_counts.answers_inner_last_editor_badge_counts(
                        bronze = 56, 
                        gold = 56, 
                        silver = 56, ), 
                    display_name = '', 
                    link = '', 
                    profile_image = '', 
                    reputation = 56, 
                    user_id = 56, 
                    user_type = '', ),
                protected_date = 56,
                question_id = 56,
                reopen_vote_count = 56,
                score = 56,
                share_link = '',
                tags = [
                    null
                    ],
                title = '',
                up_vote_count = 56,
                upvoted = True,
                view_count = 56
            )
        else:
            return QuestionsInner(
        )
        """

    def testQuestionsInner(self):
        """Test QuestionsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

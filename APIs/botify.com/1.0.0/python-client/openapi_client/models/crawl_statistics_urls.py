# coding: utf-8

"""
    Botify API

    Botify Saas API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CrawlStatisticsUrls(BaseModel):
    """
    CrawlStatisticsUrls
    """ # noqa: E501
    content_type: StrictStr
    var_date: StrictStr = Field(alias="date")
    delay_first_byte: StrictInt
    delay_last_byte: StrictInt
    gzip: StrictBool
    http: StrictInt
    length: StrictInt
    redirects_to: Optional[StrictStr] = None
    url: StrictStr
    __properties: ClassVar[List[str]] = ["content_type", "date", "delay_first_byte", "delay_last_byte", "gzip", "http", "length", "redirects_to", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CrawlStatisticsUrls from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CrawlStatisticsUrls from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content_type": obj.get("content_type"),
            "date": obj.get("date"),
            "delay_first_byte": obj.get("delay_first_byte"),
            "delay_last_byte": obj.get("delay_last_byte"),
            "gzip": obj.get("gzip"),
            "http": obj.get("http"),
            "length": obj.get("length"),
            "redirects_to": obj.get("redirects_to"),
            "url": obj.get("url")
        })
        return _obj



# coding: utf-8

"""
    Botify API

    Botify Saas API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ProjectSettingsSerializer(BaseModel):
    """
    ProjectSettingsSerializer
    """ # noqa: E501
    allowed_domains: List[StrictStr]
    blacklisted_domains: List[StrictStr]
    compare_crawl: Optional[StrictBool] = None
    crawl_gzip: Optional[StrictBool] = None
    extra_headers: Optional[StrictStr] = None
    google_analytics_account_email: Optional[StrictStr] = Field(default=None, description="Keep email in case user delete his social auth connection")
    google_analytics_nb_days: Optional[Annotated[int, Field(le=90, strict=True, ge=1)]] = None
    google_analytics_site_id: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    google_social_auth_id: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    has_robots_txt: Optional[StrictStr] = None
    header_settings: List[StrictStr]
    max_depth: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None
    max_nb_pages: Annotated[int, Field(le=2147483647, strict=True, ge=1)]
    max_pages_per_sec: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=1)]] = None
    respect_nofollow: Optional[StrictBool] = None
    sitemaps: List[StrictStr]
    start_urls: List[StrictStr]
    user_agent: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["allowed_domains", "blacklisted_domains", "compare_crawl", "crawl_gzip", "extra_headers", "google_analytics_account_email", "google_analytics_nb_days", "google_analytics_site_id", "google_social_auth_id", "has_robots_txt", "header_settings", "max_depth", "max_nb_pages", "max_pages_per_sec", "respect_nofollow", "sitemaps", "start_urls", "user_agent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectSettingsSerializer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "has_robots_txt",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectSettingsSerializer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowed_domains": obj.get("allowed_domains"),
            "blacklisted_domains": obj.get("blacklisted_domains"),
            "compare_crawl": obj.get("compare_crawl"),
            "crawl_gzip": obj.get("crawl_gzip"),
            "extra_headers": obj.get("extra_headers"),
            "google_analytics_account_email": obj.get("google_analytics_account_email"),
            "google_analytics_nb_days": obj.get("google_analytics_nb_days"),
            "google_analytics_site_id": obj.get("google_analytics_site_id"),
            "google_social_auth_id": obj.get("google_social_auth_id"),
            "has_robots_txt": obj.get("has_robots_txt"),
            "header_settings": obj.get("header_settings"),
            "max_depth": obj.get("max_depth"),
            "max_nb_pages": obj.get("max_nb_pages"),
            "max_pages_per_sec": obj.get("max_pages_per_sec"),
            "respect_nofollow": obj.get("respect_nofollow"),
            "sitemaps": obj.get("sitemaps"),
            "start_urls": obj.get("start_urls"),
            "user_agent": obj.get("user_agent")
        })
        return _obj



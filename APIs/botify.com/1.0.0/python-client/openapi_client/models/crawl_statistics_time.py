# coding: utf-8

"""
    Botify API

    Botify Saas API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.crawl_statistics_time_point import CrawlStatisticsTimePoint
from typing import Optional, Set
from typing_extensions import Self

class CrawlStatisticsTime(BaseModel):
    """
    CrawlStatisticsTime
    """ # noqa: E501
    avg_delay: List[CrawlStatisticsTimePoint]
    avg_size: List[CrawlStatisticsTimePoint]
    frequency: StrictStr
    http_code_2xx: List[CrawlStatisticsTimePoint]
    http_code_3xx: List[CrawlStatisticsTimePoint]
    http_code_4xx: List[CrawlStatisticsTimePoint]
    http_code_5xx: List[CrawlStatisticsTimePoint]
    http_code_xxx: List[CrawlStatisticsTimePoint]
    last_update_date: datetime
    new_urls: List[CrawlStatisticsTimePoint]
    __properties: ClassVar[List[str]] = ["avg_delay", "avg_size", "frequency", "http_code_2xx", "http_code_3xx", "http_code_4xx", "http_code_5xx", "http_code_xxx", "last_update_date", "new_urls"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CrawlStatisticsTime from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in avg_delay (list)
        _items = []
        if self.avg_delay:
            for _item_avg_delay in self.avg_delay:
                if _item_avg_delay:
                    _items.append(_item_avg_delay.to_dict())
            _dict['avg_delay'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in avg_size (list)
        _items = []
        if self.avg_size:
            for _item_avg_size in self.avg_size:
                if _item_avg_size:
                    _items.append(_item_avg_size.to_dict())
            _dict['avg_size'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in http_code_2xx (list)
        _items = []
        if self.http_code_2xx:
            for _item_http_code_2xx in self.http_code_2xx:
                if _item_http_code_2xx:
                    _items.append(_item_http_code_2xx.to_dict())
            _dict['http_code_2xx'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in http_code_3xx (list)
        _items = []
        if self.http_code_3xx:
            for _item_http_code_3xx in self.http_code_3xx:
                if _item_http_code_3xx:
                    _items.append(_item_http_code_3xx.to_dict())
            _dict['http_code_3xx'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in http_code_4xx (list)
        _items = []
        if self.http_code_4xx:
            for _item_http_code_4xx in self.http_code_4xx:
                if _item_http_code_4xx:
                    _items.append(_item_http_code_4xx.to_dict())
            _dict['http_code_4xx'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in http_code_5xx (list)
        _items = []
        if self.http_code_5xx:
            for _item_http_code_5xx in self.http_code_5xx:
                if _item_http_code_5xx:
                    _items.append(_item_http_code_5xx.to_dict())
            _dict['http_code_5xx'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in http_code_xxx (list)
        _items = []
        if self.http_code_xxx:
            for _item_http_code_xxx in self.http_code_xxx:
                if _item_http_code_xxx:
                    _items.append(_item_http_code_xxx.to_dict())
            _dict['http_code_xxx'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in new_urls (list)
        _items = []
        if self.new_urls:
            for _item_new_urls in self.new_urls:
                if _item_new_urls:
                    _items.append(_item_new_urls.to_dict())
            _dict['new_urls'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CrawlStatisticsTime from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "avg_delay": [CrawlStatisticsTimePoint.from_dict(_item) for _item in obj["avg_delay"]] if obj.get("avg_delay") is not None else None,
            "avg_size": [CrawlStatisticsTimePoint.from_dict(_item) for _item in obj["avg_size"]] if obj.get("avg_size") is not None else None,
            "frequency": obj.get("frequency"),
            "http_code_2xx": [CrawlStatisticsTimePoint.from_dict(_item) for _item in obj["http_code_2xx"]] if obj.get("http_code_2xx") is not None else None,
            "http_code_3xx": [CrawlStatisticsTimePoint.from_dict(_item) for _item in obj["http_code_3xx"]] if obj.get("http_code_3xx") is not None else None,
            "http_code_4xx": [CrawlStatisticsTimePoint.from_dict(_item) for _item in obj["http_code_4xx"]] if obj.get("http_code_4xx") is not None else None,
            "http_code_5xx": [CrawlStatisticsTimePoint.from_dict(_item) for _item in obj["http_code_5xx"]] if obj.get("http_code_5xx") is not None else None,
            "http_code_xxx": [CrawlStatisticsTimePoint.from_dict(_item) for _item in obj["http_code_xxx"]] if obj.get("http_code_xxx") is not None else None,
            "last_update_date": obj.get("last_update_date"),
            "new_urls": [CrawlStatisticsTimePoint.from_dict(_item) for _item in obj["new_urls"]] if obj.get("new_urls") is not None else None
        })
        return _obj



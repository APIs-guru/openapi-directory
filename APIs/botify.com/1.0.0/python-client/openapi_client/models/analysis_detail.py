# coding: utf-8

"""
    Botify API

    Botify Saas API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class AnalysisDetail(BaseModel):
    """
    AnalysisDetail
    """ # noqa: E501
    config: Optional[StrictStr] = None
    date_finished: Optional[datetime] = None
    date_last_modified: Optional[datetime] = Field(default=None, description="Date of last modified analysis")
    date_launched: Optional[datetime] = None
    failures: Optional[StrictStr] = None
    features: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    red_button_domain: Optional[StrictStr] = None
    slug: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    urls_done: Optional[StrictStr] = None
    urls_in_queue: Optional[StrictStr] = None
    user: User
    __properties: ClassVar[List[str]] = ["config", "date_finished", "date_last_modified", "date_launched", "failures", "features", "id", "name", "red_button_domain", "slug", "url", "urls_done", "urls_in_queue", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnalysisDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "config",
            "failures",
            "features",
            "id",
            "name",
            "slug",
            "url",
            "urls_done",
            "urls_in_queue",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnalysisDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "config": obj.get("config"),
            "date_finished": obj.get("date_finished"),
            "date_last_modified": obj.get("date_last_modified"),
            "date_launched": obj.get("date_launched"),
            "failures": obj.get("failures"),
            "features": obj.get("features"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "red_button_domain": obj.get("red_button_domain"),
            "slug": obj.get("slug"),
            "url": obj.get("url"),
            "urls_done": obj.get("urls_done"),
            "urls_in_queue": obj.get("urls_in_queue"),
            "user": User.from_dict(obj["user"]) if obj.get("user") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Botify API

    Botify Saas API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class CrawlStatistics(BaseModel):
    """
    CrawlStatistics
    """ # noqa: E501
    depth_current: StrictInt
    last_upd_dt: datetime
    pages_dones: StrictInt
    pages_dones_2xx: StrictInt
    pages_dones_3xx: StrictInt
    pages_dones_4xx: StrictInt
    pages_dones_5xx: StrictInt
    pages_dones_networkerror: StrictInt
    pages_dones_xxx: StrictInt
    pages_known: StrictInt
    __properties: ClassVar[List[str]] = ["depth_current", "last_upd_dt", "pages_dones", "pages_dones_2xx", "pages_dones_3xx", "pages_dones_4xx", "pages_dones_5xx", "pages_dones_networkerror", "pages_dones_xxx", "pages_known"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CrawlStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CrawlStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "depth_current": obj.get("depth_current"),
            "last_upd_dt": obj.get("last_upd_dt"),
            "pages_dones": obj.get("pages_dones"),
            "pages_dones_2xx": obj.get("pages_dones_2xx"),
            "pages_dones_3xx": obj.get("pages_dones_3xx"),
            "pages_dones_4xx": obj.get("pages_dones_4xx"),
            "pages_dones_5xx": obj.get("pages_dones_5xx"),
            "pages_dones_networkerror": obj.get("pages_dones_networkerror"),
            "pages_dones_xxx": obj.get("pages_dones_xxx"),
            "pages_known": obj.get("pages_known")
        })
        return _obj



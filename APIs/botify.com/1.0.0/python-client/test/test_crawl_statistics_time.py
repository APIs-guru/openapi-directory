# coding: utf-8

"""
    Botify API

    Botify Saas API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.crawl_statistics_time import CrawlStatisticsTime

class TestCrawlStatisticsTime(unittest.TestCase):
    """CrawlStatisticsTime unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CrawlStatisticsTime:
        """Test CrawlStatisticsTime
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CrawlStatisticsTime`
        """
        model = CrawlStatisticsTime()
        if include_optional:
            return CrawlStatisticsTime(
                avg_delay = [
                    openapi_client.models.crawl_statistics_time_point.CrawlStatisticsTimePoint(
                        count = 56, 
                        datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                avg_size = [
                    openapi_client.models.crawl_statistics_time_point.CrawlStatisticsTimePoint(
                        count = 56, 
                        datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                frequency = '',
                http_code_2xx = [
                    openapi_client.models.crawl_statistics_time_point.CrawlStatisticsTimePoint(
                        count = 56, 
                        datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                http_code_3xx = [
                    openapi_client.models.crawl_statistics_time_point.CrawlStatisticsTimePoint(
                        count = 56, 
                        datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                http_code_4xx = [
                    openapi_client.models.crawl_statistics_time_point.CrawlStatisticsTimePoint(
                        count = 56, 
                        datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                http_code_5xx = [
                    openapi_client.models.crawl_statistics_time_point.CrawlStatisticsTimePoint(
                        count = 56, 
                        datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                http_code_xxx = [
                    openapi_client.models.crawl_statistics_time_point.CrawlStatisticsTimePoint(
                        count = 56, 
                        datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                last_update_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                new_urls = [
                    openapi_client.models.crawl_statistics_time_point.CrawlStatisticsTimePoint(
                        count = 56, 
                        datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ]
            )
        else:
            return CrawlStatisticsTime(
                avg_delay = [
                    openapi_client.models.crawl_statistics_time_point.CrawlStatisticsTimePoint(
                        count = 56, 
                        datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                avg_size = [
                    openapi_client.models.crawl_statistics_time_point.CrawlStatisticsTimePoint(
                        count = 56, 
                        datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                frequency = '',
                http_code_2xx = [
                    openapi_client.models.crawl_statistics_time_point.CrawlStatisticsTimePoint(
                        count = 56, 
                        datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                http_code_3xx = [
                    openapi_client.models.crawl_statistics_time_point.CrawlStatisticsTimePoint(
                        count = 56, 
                        datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                http_code_4xx = [
                    openapi_client.models.crawl_statistics_time_point.CrawlStatisticsTimePoint(
                        count = 56, 
                        datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                http_code_5xx = [
                    openapi_client.models.crawl_statistics_time_point.CrawlStatisticsTimePoint(
                        count = 56, 
                        datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                http_code_xxx = [
                    openapi_client.models.crawl_statistics_time_point.CrawlStatisticsTimePoint(
                        count = 56, 
                        datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                last_update_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                new_urls = [
                    openapi_client.models.crawl_statistics_time_point.CrawlStatisticsTimePoint(
                        count = 56, 
                        datetime = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
        )
        """

    def testCrawlStatisticsTime(self):
        """Test CrawlStatisticsTime"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

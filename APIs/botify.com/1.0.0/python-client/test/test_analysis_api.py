# coding: utf-8

"""
    Botify API

    Botify Saas API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.analysis_api import AnalysisApi


class TestAnalysisApi(unittest.TestCase):
    """AnalysisApi unit test stubs"""

    def setUp(self) -> None:
        self.api = AnalysisApi()

    def tearDown(self) -> None:
        pass

    def test_create_urls_export(self) -> None:
        """Test case for create_urls_export

        Creates a new UrlExport object and starts a task that will export the results into a csv
        """
        pass

    def test_get_analysis_summary(self) -> None:
        """Test case for get_analysis_summary

        Get an Analysis detail
        """
        pass

    def test_get_crawl_statistics(self) -> None:
        """Test case for get_crawl_statistics

        Return global statistics for an analysis
        """
        pass

    def test_get_crawl_statistics_by_frequency(self) -> None:
        """Test case for get_crawl_statistics_by_frequency

        Return crawl statistics grouped by time frequency (1 min, 5 mins or 60 min)
        """
        pass

    def test_get_crawl_statistics_urls(self) -> None:
        """Test case for get_crawl_statistics_urls

        Return a list of 1000 latest URLs crawled (all crawled URLs or only URLS with HTTP errors)
        """
        pass

    def test_get_ganalytics_orphan_urls(self) -> None:
        """Test case for get_ganalytics_orphan_urls

        List of Orphan URLs
        """
        pass

    def test_get_links_percentiles(self) -> None:
        """Test case for get_links_percentiles

        Get inlinks percentiles
        """
        pass

    def test_get_links_top_domains(self) -> None:
        """Test case for get_links_top_domains

        Top domains
        """
        pass

    def test_get_links_top_subdomains(self) -> None:
        """Test case for get_links_top_subdomains

        Top subddomains
        """
        pass

    def test_get_page_rank_lost(self) -> None:
        """Test case for get_page_rank_lost

        Lost pagerank
        """
        pass

    def test_get_sitemaps_report(self) -> None:
        """Test case for get_sitemaps_report

        Get global information of the sitemaps found (sitemaps indexes, invalid sitemaps urls, etc
        """
        pass

    def test_get_sitemaps_samples_out_of_config(self) -> None:
        """Test case for get_sitemaps_samples_out_of_config

        Sample list of URLs which were found in your sitemaps but outside of the
        """
        pass

    def test_get_sitemaps_samples_sitemaps_only(self) -> None:
        """Test case for get_sitemaps_samples_sitemaps_only

        Sample list of URLs which were found in your sitemaps, within the project
        """
        pass

    def test_get_url_detail(self) -> None:
        """Test case for get_url_detail

        Gets the detail of an URL for an analysis
        """
        pass

    def test_get_urls(self) -> None:
        """Test case for get_urls

        Executes a query and returns a paginated response
        """
        pass

    def test_get_urls_aggs(self) -> None:
        """Test case for get_urls_aggs

        Query aggregator
        """
        pass

    def test_get_urls_datamodel(self) -> None:
        """Test case for get_urls_datamodel

        Gets an Analysis datamodel
        """
        pass

    def test_get_urls_export_status(self) -> None:
        """Test case for get_urls_export_status

        Checks the status of an CSVUrlExportJob object
        """
        pass

    def test_get_urls_exports(self) -> None:
        """Test case for get_urls_exports

        A list of the CSV Exports requests and their current status
        """
        pass

    def test_get_urls_suggested_filters(self) -> None:
        """Test case for get_urls_suggested_filters

        Return most frequent segments (= suggested patterns in the previous version)
        """
        pass


if __name__ == '__main__':
    unittest.main()

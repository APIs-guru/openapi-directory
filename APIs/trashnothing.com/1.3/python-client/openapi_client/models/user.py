# coding: utf-8

"""
    trash nothing

    This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 

    The version of the OpenAPI document: 1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user_feedback import UserFeedback
from typing import Optional, Set
from typing_extensions import Self

class User(BaseModel):
    """
    User
    """ # noqa: E501
    about_me: Optional[StrictStr] = Field(default=None, description="A short bio a user has written about themselves to help other members get to know them better. May be null if the user has not written anything about themselves. ")
    country: Optional[StrictStr] = Field(default=None, description="A 2 letter country code for the country that has been automatically detected for the user (see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ). May be null if no country has been set. ")
    feedback: Optional[UserFeedback] = None
    firstname: Optional[StrictStr] = Field(default=None, description="The first name of the user (may be null).")
    lastname: Optional[StrictStr] = Field(default=None, description="The last name of the user (may be null).")
    member_since: Optional[StrictStr] = Field(default=None, description="The date and time when the user first became publicly active on a group (the date may be older than when the user signed up).")
    profile_image: Optional[StrictStr] = Field(default=None, description="A URL to a profile image for the user.  Profile images sizes vary based on the source (Google, Facebook, Gravatar, etc) and some can be as small as 64px by 64px.  Will be null for api key requests and requests where the oauth user doesn't belong to any of the same groups as this user. ")
    reply_time: Optional[StrictInt] = Field(default=None, description="An estimate of how many seconds it takes this user to reply to messages. May be null when there is not enough data to calculate an estimate. ")
    user_id: Optional[StrictStr] = None
    username: Optional[StrictStr] = Field(default=None, description="A username that can be displayed for the user (the username is NOT guaranteed to be unique). Will be null for api key requests and requests where the oauth user doesn't belong to any of the same groups as this user. ")
    __properties: ClassVar[List[str]] = ["about_me", "country", "feedback", "firstname", "lastname", "member_since", "profile_image", "reply_time", "user_id", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of feedback
        if self.feedback:
            _dict['feedback'] = self.feedback.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "about_me": obj.get("about_me"),
            "country": obj.get("country"),
            "feedback": UserFeedback.from_dict(obj["feedback"]) if obj.get("feedback") is not None else None,
            "firstname": obj.get("firstname"),
            "lastname": obj.get("lastname"),
            "member_since": obj.get("member_since"),
            "profile_image": obj.get("profile_image"),
            "reply_time": obj.get("reply_time"),
            "user_id": obj.get("user_id"),
            "username": obj.get("username")
        })
        return _obj



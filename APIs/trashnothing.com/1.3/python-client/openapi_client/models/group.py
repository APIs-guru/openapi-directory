# coding: utf-8

"""
    trash nothing

    This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 

    The version of the OpenAPI document: 1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.group_country import GroupCountry
from openapi_client.models.group_membership import GroupMembership
from openapi_client.models.group_region import GroupRegion
from typing import Optional, Set
from typing_extensions import Self

class Group(BaseModel):
    """
    Groups are run by volunteer moderators and provide a way to group activity in a specific location. Because each group is usually run by different people, there can be variations in rules from group to group (eg. who is allowed to join, what is allowed to be posted, how often reposts are allowed). 
    """ # noqa: E501
    country: Optional[GroupCountry] = None
    group_id: Optional[StrictStr] = None
    has_questions: Optional[StrictBool] = Field(default=None, description="When true, anyone requesting membership to this group will be required to answer a new membership questionnaire.")
    homepage: Optional[StrictStr] = Field(default=None, description="A URL to the group homepage.")
    identifier: Optional[StrictStr] = Field(default=None, description="A unique identifier for the group that is used in URLs.")
    latitude: Optional[Union[StrictFloat, StrictInt]] = None
    longitude: Optional[Union[StrictFloat, StrictInt]] = None
    member_count: Optional[StrictInt] = Field(default=None, description="The number of members who belong to the group.")
    membership: Optional[GroupMembership] = None
    name: Optional[StrictStr] = Field(default=None, description="The name of the group (not guaranteed to be unique).")
    open_archives: Optional[StrictBool] = Field(default=None, description="When true, the group posts are viewable by anyone.  When false, the group posts can only be viewed by members of the group.")
    open_membership: Optional[StrictBool] = Field(default=None, description="When true, the group allows anyone to join.  When false, the group moderators review and approve applicants.")
    region: Optional[GroupRegion] = None
    timezone: Optional[StrictStr] = Field(default=None, description="The timezone that the group is in (eg. America/New_York).")
    __properties: ClassVar[List[str]] = ["country", "group_id", "has_questions", "homepage", "identifier", "latitude", "longitude", "member_count", "membership", "name", "open_archives", "open_membership", "region", "timezone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Group from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of country
        if self.country:
            _dict['country'] = self.country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of membership
        if self.membership:
            _dict['membership'] = self.membership.to_dict()
        # override the default output from pydantic by calling `to_dict()` of region
        if self.region:
            _dict['region'] = self.region.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Group from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country": GroupCountry.from_dict(obj["country"]) if obj.get("country") is not None else None,
            "group_id": obj.get("group_id"),
            "has_questions": obj.get("has_questions"),
            "homepage": obj.get("homepage"),
            "identifier": obj.get("identifier"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "member_count": obj.get("member_count"),
            "membership": GroupMembership.from_dict(obj["membership"]) if obj.get("membership") is not None else None,
            "name": obj.get("name"),
            "open_archives": obj.get("open_archives"),
            "open_membership": obj.get("open_membership"),
            "region": GroupRegion.from_dict(obj["region"]) if obj.get("region") is not None else None,
            "timezone": obj.get("timezone")
        })
        return _obj



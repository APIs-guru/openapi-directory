# coding: utf-8

"""
    trash nothing

    This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 

    The version of the OpenAPI document: 1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.post_search_result import PostSearchResult
from typing import Optional, Set
from typing_extensions import Self

class SearchPosts200Response(BaseModel):
    """
    SearchPosts200Response
    """ # noqa: E501
    end_index: Optional[StrictInt] = Field(default=None, description="The index of the last post being returned (an integer between start_index and num_posts).")
    group_ids: Optional[List[StrictStr]] = Field(default=None, description="The IDs of the groups that the posts were retrieved from (will be null when no group IDs were used). These IDs may be a subset of the requested group IDs when a request includes group IDs for groups that are not open archives and that the current user is not a member of.  If the open_archive_groups source is used, these IDs may include the IDs of open archive groups that weren't present in the group_ids parameter of the request. ")
    num_pages: Optional[StrictInt] = Field(default=None, description="The total number of pages available.")
    num_posts: Optional[StrictInt] = Field(default=None, description="The total number of posts available.")
    page: Optional[StrictInt] = Field(default=None, description="The page number of the posts being returned.")
    per_page: Optional[StrictInt] = Field(default=None, description="The number of posts being returned per page.")
    posts: Optional[List[PostSearchResult]] = None
    start_index: Optional[StrictInt] = Field(default=None, description="The index of the first post being returned (an integer between 1 and num_posts).")
    __properties: ClassVar[List[str]] = ["end_index", "group_ids", "num_pages", "num_posts", "page", "per_page", "posts", "start_index"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchPosts200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in posts (list)
        _items = []
        if self.posts:
            for _item_posts in self.posts:
                if _item_posts:
                    _items.append(_item_posts.to_dict())
            _dict['posts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchPosts200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "end_index": obj.get("end_index"),
            "group_ids": obj.get("group_ids"),
            "num_pages": obj.get("num_pages"),
            "num_posts": obj.get("num_posts"),
            "page": obj.get("page"),
            "per_page": obj.get("per_page"),
            "posts": [PostSearchResult.from_dict(_item) for _item in obj["posts"]] if obj.get("posts") is not None else None,
            "start_index": obj.get("start_index")
        })
        return _obj



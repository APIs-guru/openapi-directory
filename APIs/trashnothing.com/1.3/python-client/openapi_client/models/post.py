# coding: utf-8

"""
    trash nothing

    This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 

    The version of the OpenAPI document: 1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.photo import Photo
from typing import Optional, Set
from typing_extensions import Self

class Post(BaseModel):
    """
    An offer, wanted, admin, taken or received post.
    """ # noqa: E501
    content: Optional[StrictStr] = None
    var_date: Optional[datetime] = Field(default=None, description="The UTC date and time when the post was published.", alias="date")
    expiration: Optional[datetime] = Field(default=None, description="The UTC date and time when the post will expire.   Currently only offer and wanted posts expire.  For all other posts, expiration is always null. ")
    footer: Optional[StrictStr] = Field(default=None, description="Some groups add footers to posts that are separate and sometimes unrelated to the post itself - such as reminders about group rules or features (may be null).")
    group_id: Optional[StrictStr] = Field(default=None, description="The group ID of the post.  For public posts, this is always null. ")
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="May be null if a post hasn't been mapped.")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="May be null if a post hasn't been mapped.")
    outcome: Optional[StrictStr] = Field(default=None, description="For offer and wanted posts, this indicates the outcome of the post which is null if no outcome has been set yet.   <br /><br /> Offer post outcomes will be one of: satisfied, withdrawn, promised, expired <br /><br /> Wanted post outcomes will be one of: satisfied, withdrawn, expired <br /><br /> For all other posts, outcome is always null. ")
    photos: Optional[List[Photo]] = Field(default=None, description="Details about the photos associated with this post (may be null if there are no photos).")
    post_id: Optional[StrictStr] = None
    repost_count: Optional[StrictInt] = Field(default=None, description="The count of how many times this post has been reposted in the last 90 days. A value of zero is used to indicate that the post is not a repost. The count is specific to the source of the post (eg. the specific group the post is on). If a post is crossposted to multiple groups, the repost_count of the post on each group may be different for each group depending on how many times the post has been posted on that group in the last 90 days. ")
    reselling: Optional[StrictBool] = Field(default=None, description="For wanted posts, whether the item is being requested in order to resell it or not. Will be null for all posts that are not wanted posts and for wanted posts where the poster hasn't indicated whether or not they intend to resell the item they are requesting. ")
    source: Optional[StrictStr] = Field(default=None, description="The source of the post.  One of: groups, trashnothing, open_archive_groups.  A value of groups or open_archive_groups indicates the post is from a group and the group_id field will contain the ID of the group. A value of trashnothing indicates the post is a public post not associated with any group. ")
    title: Optional[StrictStr] = None
    type: Optional[StrictStr] = Field(default=None, description="The type of post.  One of: offer, taken, wanted, received, admin ")
    url: Optional[StrictStr] = Field(default=None, description="The link to use to view the post on the trash nothing site.")
    user_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["content", "date", "expiration", "footer", "group_id", "latitude", "longitude", "outcome", "photos", "post_id", "repost_count", "reselling", "source", "title", "type", "url", "user_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Post from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in photos (list)
        _items = []
        if self.photos:
            for _item_photos in self.photos:
                if _item_photos:
                    _items.append(_item_photos.to_dict())
            _dict['photos'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Post from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": obj.get("content"),
            "date": obj.get("date"),
            "expiration": obj.get("expiration"),
            "footer": obj.get("footer"),
            "group_id": obj.get("group_id"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "outcome": obj.get("outcome"),
            "photos": [Photo.from_dict(_item) for _item in obj["photos"]] if obj.get("photos") is not None else None,
            "post_id": obj.get("post_id"),
            "repost_count": obj.get("repost_count"),
            "reselling": obj.get("reselling"),
            "source": obj.get("source"),
            "title": obj.get("title"),
            "type": obj.get("type"),
            "url": obj.get("url"),
            "user_id": obj.get("user_id")
        })
        return _obj



# coding: utf-8

"""
    trash nothing

    This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 

    The version of the OpenAPI document: 1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.feedback import Feedback
from openapi_client.models.group import Group
from openapi_client.models.post import Post
from openapi_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class GetPostAndRelatedData200Response(BaseModel):
    """
    GetPostAndRelatedData200Response
    """ # noqa: E501
    author: Optional[User] = None
    author_offer_count: Optional[StrictInt] = Field(default=None, description="Count of offer posts made by the post author in the last 90 days.")
    author_posts: Optional[List[Post]] = Field(default=None, description="Other active posts from the post author in the last 90 days. A maximum of 30 posts will be returned. ")
    author_wanted_count: Optional[StrictInt] = Field(default=None, description="Count of wanted posts made by the post author in the last 90 days.")
    bookmarked: Optional[StrictBool] = Field(default=None, description="Whether or not the current user has bookmarked this post.  Will be null for api key requests and for the current users' posts.")
    feedback: Optional[List[Feedback]] = Field(default=None, description="Feedback the current user has left on the post author.")
    groups: Optional[List[Group]] = Field(default=None, description="The groups the post is published on.")
    post: Optional[Post] = None
    replied: Optional[StrictBool] = Field(default=None, description="Whether or not the current user has replied to this post.  Will be null for api key requests and for the current users' posts.")
    user_can_reply: Optional[StrictBool] = Field(default=None, description="Whether or not the current user (if any) can reply to this post. Unverified users cannot reply to posts until they verify their account. ")
    viewed: Optional[StrictBool] = Field(default=None, description="Whether or not the current user has previously viewed this post.  Will be null for api key requests and for the current users' posts.")
    __properties: ClassVar[List[str]] = ["author", "author_offer_count", "author_posts", "author_wanted_count", "bookmarked", "feedback", "groups", "post", "replied", "user_can_reply", "viewed"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetPostAndRelatedData200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in author_posts (list)
        _items = []
        if self.author_posts:
            for _item_author_posts in self.author_posts:
                if _item_author_posts:
                    _items.append(_item_author_posts.to_dict())
            _dict['author_posts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in feedback (list)
        _items = []
        if self.feedback:
            for _item_feedback in self.feedback:
                if _item_feedback:
                    _items.append(_item_feedback.to_dict())
            _dict['feedback'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in groups (list)
        _items = []
        if self.groups:
            for _item_groups in self.groups:
                if _item_groups:
                    _items.append(_item_groups.to_dict())
            _dict['groups'] = _items
        # override the default output from pydantic by calling `to_dict()` of post
        if self.post:
            _dict['post'] = self.post.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetPostAndRelatedData200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "author": User.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "author_offer_count": obj.get("author_offer_count"),
            "author_posts": [Post.from_dict(_item) for _item in obj["author_posts"]] if obj.get("author_posts") is not None else None,
            "author_wanted_count": obj.get("author_wanted_count"),
            "bookmarked": obj.get("bookmarked"),
            "feedback": [Feedback.from_dict(_item) for _item in obj["feedback"]] if obj.get("feedback") is not None else None,
            "groups": [Group.from_dict(_item) for _item in obj["groups"]] if obj.get("groups") is not None else None,
            "post": Post.from_dict(obj["post"]) if obj.get("post") is not None else None,
            "replied": obj.get("replied"),
            "user_can_reply": obj.get("user_can_reply"),
            "viewed": obj.get("viewed")
        })
        return _obj



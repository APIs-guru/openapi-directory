# coding: utf-8

"""
    trash nothing

    This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 

    The version of the OpenAPI document: 1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictFloat, StrictInt, StrictStr
from typing import Optional, Union
from typing_extensions import Annotated
from openapi_client.models.get_posts200_response import GetPosts200Response
from openapi_client.models.search_posts200_response import SearchPosts200Response

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class UsersApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_user_posts(
        self,
        user_id: Annotated[StrictStr, Field(description="The user ID of the user whose posts will be retrieved. Using 'me' as the user_id will return the posts for the current user. ")],
        types: Annotated[StrictStr, Field(description="A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin ")],
        sources: Annotated[StrictStr, Field(description="A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or all the open archive groups the requested user has posted to if latitude, longitude and radius aren't passed). <br /><br /> NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required. ")],
        sort_by: Annotated[Optional[StrictStr], Field(description="How to sort the posts that are returned.  One of: date, active, distance <br /><br /> Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first. ")] = None,
        group_ids: Annotated[Optional[StrictStr], Field(description="A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). <br /><br/> *To determine which group IDs were used and which were discarded, use the group_ids field in the response. ")] = None,
        per_page: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of posts to return per page (must be >= 1 and <= 100).")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of posts to return.")] = None,
        device_pixel_ratio: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Client device pixel ratio used to determine thumbnail size (default 1.0).")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The latitude of a point around which to return posts. ")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The longitude of a point around which to return posts. ")] = None,
        radius: Annotated[Optional[Union[Annotated[float, Field(le=257500, strict=True, ge=0)], Annotated[int, Field(le=257500, strict=True, ge=0)]]], Field(description="The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned. ")] = None,
        date_min: Annotated[Optional[datetime], Field(description="Only posts newer than or equal to this UTC date and time will be returned. ")] = None,
        date_max: Annotated[Optional[datetime], Field(description="Only posts older than this UTC date and time will be returned.")] = None,
        outcomes: Annotated[Optional[StrictStr], Field(description="A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn <br /><br /> There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to 'all', all posts will be returned no matter what outcome the posts have. If set to 'not-promised', only posts that are not satisfied ant not withdrawn and not expired and not promised are returned. ")] = None,
        include_reposts: Annotated[Optional[Annotated[int, Field(le=1, strict=True, ge=0)]], Field(description="If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetPosts200Response:
        """List posts by a user

        

        :param user_id: The user ID of the user whose posts will be retrieved. Using 'me' as the user_id will return the posts for the current user.  (required)
        :type user_id: str
        :param types: A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin  (required)
        :type types: str
        :param sources: A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or all the open archive groups the requested user has posted to if latitude, longitude and radius aren't passed). <br /><br /> NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.  (required)
        :type sources: str
        :param sort_by: How to sort the posts that are returned.  One of: date, active, distance <br /><br /> Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first. 
        :type sort_by: str
        :param group_ids: A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). <br /><br/> *To determine which group IDs were used and which were discarded, use the group_ids field in the response. 
        :type group_ids: str
        :param per_page: The number of posts to return per page (must be >= 1 and <= 100).
        :type per_page: int
        :param page: The page of posts to return.
        :type page: int
        :param device_pixel_ratio: Client device pixel ratio used to determine thumbnail size (default 1.0).
        :type device_pixel_ratio: float
        :param latitude: The latitude of a point around which to return posts. 
        :type latitude: float
        :param longitude: The longitude of a point around which to return posts. 
        :type longitude: float
        :param radius: The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned. 
        :type radius: float
        :param date_min: Only posts newer than or equal to this UTC date and time will be returned. 
        :type date_min: datetime
        :param date_max: Only posts older than this UTC date and time will be returned.
        :type date_max: datetime
        :param outcomes: A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn <br /><br /> There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to 'all', all posts will be returned no matter what outcome the posts have. If set to 'not-promised', only posts that are not satisfied ant not withdrawn and not expired and not promised are returned. 
        :type outcomes: str
        :param include_reposts: If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified. 
        :type include_reposts: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_user_posts_serialize(
            user_id=user_id,
            types=types,
            sources=sources,
            sort_by=sort_by,
            group_ids=group_ids,
            per_page=per_page,
            page=page,
            device_pixel_ratio=device_pixel_ratio,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            date_min=date_min,
            date_max=date_max,
            outcomes=outcomes,
            include_reposts=include_reposts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPosts200Response",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_user_posts_with_http_info(
        self,
        user_id: Annotated[StrictStr, Field(description="The user ID of the user whose posts will be retrieved. Using 'me' as the user_id will return the posts for the current user. ")],
        types: Annotated[StrictStr, Field(description="A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin ")],
        sources: Annotated[StrictStr, Field(description="A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or all the open archive groups the requested user has posted to if latitude, longitude and radius aren't passed). <br /><br /> NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required. ")],
        sort_by: Annotated[Optional[StrictStr], Field(description="How to sort the posts that are returned.  One of: date, active, distance <br /><br /> Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first. ")] = None,
        group_ids: Annotated[Optional[StrictStr], Field(description="A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). <br /><br/> *To determine which group IDs were used and which were discarded, use the group_ids field in the response. ")] = None,
        per_page: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of posts to return per page (must be >= 1 and <= 100).")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of posts to return.")] = None,
        device_pixel_ratio: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Client device pixel ratio used to determine thumbnail size (default 1.0).")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The latitude of a point around which to return posts. ")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The longitude of a point around which to return posts. ")] = None,
        radius: Annotated[Optional[Union[Annotated[float, Field(le=257500, strict=True, ge=0)], Annotated[int, Field(le=257500, strict=True, ge=0)]]], Field(description="The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned. ")] = None,
        date_min: Annotated[Optional[datetime], Field(description="Only posts newer than or equal to this UTC date and time will be returned. ")] = None,
        date_max: Annotated[Optional[datetime], Field(description="Only posts older than this UTC date and time will be returned.")] = None,
        outcomes: Annotated[Optional[StrictStr], Field(description="A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn <br /><br /> There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to 'all', all posts will be returned no matter what outcome the posts have. If set to 'not-promised', only posts that are not satisfied ant not withdrawn and not expired and not promised are returned. ")] = None,
        include_reposts: Annotated[Optional[Annotated[int, Field(le=1, strict=True, ge=0)]], Field(description="If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetPosts200Response]:
        """List posts by a user

        

        :param user_id: The user ID of the user whose posts will be retrieved. Using 'me' as the user_id will return the posts for the current user.  (required)
        :type user_id: str
        :param types: A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin  (required)
        :type types: str
        :param sources: A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or all the open archive groups the requested user has posted to if latitude, longitude and radius aren't passed). <br /><br /> NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.  (required)
        :type sources: str
        :param sort_by: How to sort the posts that are returned.  One of: date, active, distance <br /><br /> Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first. 
        :type sort_by: str
        :param group_ids: A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). <br /><br/> *To determine which group IDs were used and which were discarded, use the group_ids field in the response. 
        :type group_ids: str
        :param per_page: The number of posts to return per page (must be >= 1 and <= 100).
        :type per_page: int
        :param page: The page of posts to return.
        :type page: int
        :param device_pixel_ratio: Client device pixel ratio used to determine thumbnail size (default 1.0).
        :type device_pixel_ratio: float
        :param latitude: The latitude of a point around which to return posts. 
        :type latitude: float
        :param longitude: The longitude of a point around which to return posts. 
        :type longitude: float
        :param radius: The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned. 
        :type radius: float
        :param date_min: Only posts newer than or equal to this UTC date and time will be returned. 
        :type date_min: datetime
        :param date_max: Only posts older than this UTC date and time will be returned.
        :type date_max: datetime
        :param outcomes: A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn <br /><br /> There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to 'all', all posts will be returned no matter what outcome the posts have. If set to 'not-promised', only posts that are not satisfied ant not withdrawn and not expired and not promised are returned. 
        :type outcomes: str
        :param include_reposts: If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified. 
        :type include_reposts: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_user_posts_serialize(
            user_id=user_id,
            types=types,
            sources=sources,
            sort_by=sort_by,
            group_ids=group_ids,
            per_page=per_page,
            page=page,
            device_pixel_ratio=device_pixel_ratio,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            date_min=date_min,
            date_max=date_max,
            outcomes=outcomes,
            include_reposts=include_reposts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPosts200Response",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_user_posts_without_preload_content(
        self,
        user_id: Annotated[StrictStr, Field(description="The user ID of the user whose posts will be retrieved. Using 'me' as the user_id will return the posts for the current user. ")],
        types: Annotated[StrictStr, Field(description="A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin ")],
        sources: Annotated[StrictStr, Field(description="A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or all the open archive groups the requested user has posted to if latitude, longitude and radius aren't passed). <br /><br /> NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required. ")],
        sort_by: Annotated[Optional[StrictStr], Field(description="How to sort the posts that are returned.  One of: date, active, distance <br /><br /> Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first. ")] = None,
        group_ids: Annotated[Optional[StrictStr], Field(description="A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). <br /><br/> *To determine which group IDs were used and which were discarded, use the group_ids field in the response. ")] = None,
        per_page: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of posts to return per page (must be >= 1 and <= 100).")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of posts to return.")] = None,
        device_pixel_ratio: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Client device pixel ratio used to determine thumbnail size (default 1.0).")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The latitude of a point around which to return posts. ")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The longitude of a point around which to return posts. ")] = None,
        radius: Annotated[Optional[Union[Annotated[float, Field(le=257500, strict=True, ge=0)], Annotated[int, Field(le=257500, strict=True, ge=0)]]], Field(description="The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned. ")] = None,
        date_min: Annotated[Optional[datetime], Field(description="Only posts newer than or equal to this UTC date and time will be returned. ")] = None,
        date_max: Annotated[Optional[datetime], Field(description="Only posts older than this UTC date and time will be returned.")] = None,
        outcomes: Annotated[Optional[StrictStr], Field(description="A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn <br /><br /> There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to 'all', all posts will be returned no matter what outcome the posts have. If set to 'not-promised', only posts that are not satisfied ant not withdrawn and not expired and not promised are returned. ")] = None,
        include_reposts: Annotated[Optional[Annotated[int, Field(le=1, strict=True, ge=0)]], Field(description="If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List posts by a user

        

        :param user_id: The user ID of the user whose posts will be retrieved. Using 'me' as the user_id will return the posts for the current user.  (required)
        :type user_id: str
        :param types: A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin  (required)
        :type types: str
        :param sources: A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or all the open archive groups the requested user has posted to if latitude, longitude and radius aren't passed). <br /><br /> NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.  (required)
        :type sources: str
        :param sort_by: How to sort the posts that are returned.  One of: date, active, distance <br /><br /> Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first. 
        :type sort_by: str
        :param group_ids: A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). <br /><br/> *To determine which group IDs were used and which were discarded, use the group_ids field in the response. 
        :type group_ids: str
        :param per_page: The number of posts to return per page (must be >= 1 and <= 100).
        :type per_page: int
        :param page: The page of posts to return.
        :type page: int
        :param device_pixel_ratio: Client device pixel ratio used to determine thumbnail size (default 1.0).
        :type device_pixel_ratio: float
        :param latitude: The latitude of a point around which to return posts. 
        :type latitude: float
        :param longitude: The longitude of a point around which to return posts. 
        :type longitude: float
        :param radius: The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned. 
        :type radius: float
        :param date_min: Only posts newer than or equal to this UTC date and time will be returned. 
        :type date_min: datetime
        :param date_max: Only posts older than this UTC date and time will be returned.
        :type date_max: datetime
        :param outcomes: A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn <br /><br /> There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to 'all', all posts will be returned no matter what outcome the posts have. If set to 'not-promised', only posts that are not satisfied ant not withdrawn and not expired and not promised are returned. 
        :type outcomes: str
        :param include_reposts: If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified. 
        :type include_reposts: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_user_posts_serialize(
            user_id=user_id,
            types=types,
            sources=sources,
            sort_by=sort_by,
            group_ids=group_ids,
            per_page=per_page,
            page=page,
            device_pixel_ratio=device_pixel_ratio,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            date_min=date_min,
            date_max=date_max,
            outcomes=outcomes,
            include_reposts=include_reposts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPosts200Response",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_user_posts_serialize(
        self,
        user_id,
        types,
        sources,
        sort_by,
        group_ids,
        per_page,
        page,
        device_pixel_ratio,
        latitude,
        longitude,
        radius,
        date_min,
        date_max,
        outcomes,
        include_reposts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user_id is not None:
            _path_params['user_id'] = user_id
        # process the query parameters
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if types is not None:
            
            _query_params.append(('types', types))
            
        if sources is not None:
            
            _query_params.append(('sources', sources))
            
        if group_ids is not None:
            
            _query_params.append(('group_ids', group_ids))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if device_pixel_ratio is not None:
            
            _query_params.append(('device_pixel_ratio', device_pixel_ratio))
            
        if latitude is not None:
            
            _query_params.append(('latitude', latitude))
            
        if longitude is not None:
            
            _query_params.append(('longitude', longitude))
            
        if radius is not None:
            
            _query_params.append(('radius', radius))
            
        if date_min is not None:
            if isinstance(date_min, datetime):
                _query_params.append(
                    (
                        'date_min',
                        date_min.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('date_min', date_min))
            
        if date_max is not None:
            if isinstance(date_max, datetime):
                _query_params.append(
                    (
                        'date_max',
                        date_max.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('date_max', date_max))
            
        if outcomes is not None:
            
            _query_params.append(('outcomes', outcomes))
            
        if include_reposts is not None:
            
            _query_params.append(('include_reposts', include_reposts))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/users/{user_id}/posts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_user_posts(
        self,
        user_id: Annotated[StrictStr, Field(description="The user ID of the user whose posts will be retrieved. Using 'me' as the user_id will return the posts for the current user. ")],
        search: Annotated[StrictStr, Field(description="The search query used to find posts.")],
        types: Annotated[StrictStr, Field(description="A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin ")],
        sources: Annotated[StrictStr, Field(description="A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or all the open archive groups the requested user has posted to if latitude, longitude and radius aren't passed). <br /><br /> NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required. ")],
        sort_by: Annotated[Optional[StrictStr], Field(description="How to sort the posts that are returned.  One of: relevance, date, active, distance <br /><br /> Relevance sorting will sort the posts that best match the search query first. Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first. ")] = None,
        group_ids: Annotated[Optional[StrictStr], Field(description="A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). <br /><br/> *To determine which group IDs were used and which were discarded, use the group_ids field in the response. ")] = None,
        per_page: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of posts to return per page (must be >= 1 and <= 100).")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of posts to return.")] = None,
        device_pixel_ratio: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Client device pixel ratio used to determine thumbnail size (default 1.0).")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The latitude of a point around which to return posts. ")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The longitude of a point around which to return posts. ")] = None,
        radius: Annotated[Optional[Union[Annotated[float, Field(le=257500, strict=True, ge=0)], Annotated[int, Field(le=257500, strict=True, ge=0)]]], Field(description="The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned. ")] = None,
        date_min: Annotated[Optional[datetime], Field(description="Only posts newer than or equal to this UTC date and time will be returned. ")] = None,
        date_max: Annotated[Optional[datetime], Field(description="Only posts older than this UTC date and time will be returned.")] = None,
        outcomes: Annotated[Optional[StrictStr], Field(description="A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn <br /><br /> There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to 'all', all posts will be returned no matter what outcome the posts have. If set to 'not-promised', only posts that are not satisfied ant not withdrawn and not expired and not promised are returned. ")] = None,
        include_reposts: Annotated[Optional[Annotated[int, Field(le=1, strict=True, ge=0)]], Field(description="If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchPosts200Response:
        """Search posts by a user

        Searching posts takes the same arguments as listing posts except for the addition of the search and sort_by parameters. 

        :param user_id: The user ID of the user whose posts will be retrieved. Using 'me' as the user_id will return the posts for the current user.  (required)
        :type user_id: str
        :param search: The search query used to find posts. (required)
        :type search: str
        :param types: A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin  (required)
        :type types: str
        :param sources: A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or all the open archive groups the requested user has posted to if latitude, longitude and radius aren't passed). <br /><br /> NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.  (required)
        :type sources: str
        :param sort_by: How to sort the posts that are returned.  One of: relevance, date, active, distance <br /><br /> Relevance sorting will sort the posts that best match the search query first. Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first. 
        :type sort_by: str
        :param group_ids: A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). <br /><br/> *To determine which group IDs were used and which were discarded, use the group_ids field in the response. 
        :type group_ids: str
        :param per_page: The number of posts to return per page (must be >= 1 and <= 100).
        :type per_page: int
        :param page: The page of posts to return.
        :type page: int
        :param device_pixel_ratio: Client device pixel ratio used to determine thumbnail size (default 1.0).
        :type device_pixel_ratio: float
        :param latitude: The latitude of a point around which to return posts. 
        :type latitude: float
        :param longitude: The longitude of a point around which to return posts. 
        :type longitude: float
        :param radius: The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned. 
        :type radius: float
        :param date_min: Only posts newer than or equal to this UTC date and time will be returned. 
        :type date_min: datetime
        :param date_max: Only posts older than this UTC date and time will be returned.
        :type date_max: datetime
        :param outcomes: A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn <br /><br /> There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to 'all', all posts will be returned no matter what outcome the posts have. If set to 'not-promised', only posts that are not satisfied ant not withdrawn and not expired and not promised are returned. 
        :type outcomes: str
        :param include_reposts: If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified. 
        :type include_reposts: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_user_posts_serialize(
            user_id=user_id,
            search=search,
            types=types,
            sources=sources,
            sort_by=sort_by,
            group_ids=group_ids,
            per_page=per_page,
            page=page,
            device_pixel_ratio=device_pixel_ratio,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            date_min=date_min,
            date_max=date_max,
            outcomes=outcomes,
            include_reposts=include_reposts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchPosts200Response",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_user_posts_with_http_info(
        self,
        user_id: Annotated[StrictStr, Field(description="The user ID of the user whose posts will be retrieved. Using 'me' as the user_id will return the posts for the current user. ")],
        search: Annotated[StrictStr, Field(description="The search query used to find posts.")],
        types: Annotated[StrictStr, Field(description="A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin ")],
        sources: Annotated[StrictStr, Field(description="A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or all the open archive groups the requested user has posted to if latitude, longitude and radius aren't passed). <br /><br /> NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required. ")],
        sort_by: Annotated[Optional[StrictStr], Field(description="How to sort the posts that are returned.  One of: relevance, date, active, distance <br /><br /> Relevance sorting will sort the posts that best match the search query first. Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first. ")] = None,
        group_ids: Annotated[Optional[StrictStr], Field(description="A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). <br /><br/> *To determine which group IDs were used and which were discarded, use the group_ids field in the response. ")] = None,
        per_page: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of posts to return per page (must be >= 1 and <= 100).")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of posts to return.")] = None,
        device_pixel_ratio: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Client device pixel ratio used to determine thumbnail size (default 1.0).")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The latitude of a point around which to return posts. ")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The longitude of a point around which to return posts. ")] = None,
        radius: Annotated[Optional[Union[Annotated[float, Field(le=257500, strict=True, ge=0)], Annotated[int, Field(le=257500, strict=True, ge=0)]]], Field(description="The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned. ")] = None,
        date_min: Annotated[Optional[datetime], Field(description="Only posts newer than or equal to this UTC date and time will be returned. ")] = None,
        date_max: Annotated[Optional[datetime], Field(description="Only posts older than this UTC date and time will be returned.")] = None,
        outcomes: Annotated[Optional[StrictStr], Field(description="A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn <br /><br /> There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to 'all', all posts will be returned no matter what outcome the posts have. If set to 'not-promised', only posts that are not satisfied ant not withdrawn and not expired and not promised are returned. ")] = None,
        include_reposts: Annotated[Optional[Annotated[int, Field(le=1, strict=True, ge=0)]], Field(description="If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchPosts200Response]:
        """Search posts by a user

        Searching posts takes the same arguments as listing posts except for the addition of the search and sort_by parameters. 

        :param user_id: The user ID of the user whose posts will be retrieved. Using 'me' as the user_id will return the posts for the current user.  (required)
        :type user_id: str
        :param search: The search query used to find posts. (required)
        :type search: str
        :param types: A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin  (required)
        :type types: str
        :param sources: A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or all the open archive groups the requested user has posted to if latitude, longitude and radius aren't passed). <br /><br /> NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.  (required)
        :type sources: str
        :param sort_by: How to sort the posts that are returned.  One of: relevance, date, active, distance <br /><br /> Relevance sorting will sort the posts that best match the search query first. Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first. 
        :type sort_by: str
        :param group_ids: A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). <br /><br/> *To determine which group IDs were used and which were discarded, use the group_ids field in the response. 
        :type group_ids: str
        :param per_page: The number of posts to return per page (must be >= 1 and <= 100).
        :type per_page: int
        :param page: The page of posts to return.
        :type page: int
        :param device_pixel_ratio: Client device pixel ratio used to determine thumbnail size (default 1.0).
        :type device_pixel_ratio: float
        :param latitude: The latitude of a point around which to return posts. 
        :type latitude: float
        :param longitude: The longitude of a point around which to return posts. 
        :type longitude: float
        :param radius: The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned. 
        :type radius: float
        :param date_min: Only posts newer than or equal to this UTC date and time will be returned. 
        :type date_min: datetime
        :param date_max: Only posts older than this UTC date and time will be returned.
        :type date_max: datetime
        :param outcomes: A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn <br /><br /> There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to 'all', all posts will be returned no matter what outcome the posts have. If set to 'not-promised', only posts that are not satisfied ant not withdrawn and not expired and not promised are returned. 
        :type outcomes: str
        :param include_reposts: If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified. 
        :type include_reposts: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_user_posts_serialize(
            user_id=user_id,
            search=search,
            types=types,
            sources=sources,
            sort_by=sort_by,
            group_ids=group_ids,
            per_page=per_page,
            page=page,
            device_pixel_ratio=device_pixel_ratio,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            date_min=date_min,
            date_max=date_max,
            outcomes=outcomes,
            include_reposts=include_reposts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchPosts200Response",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_user_posts_without_preload_content(
        self,
        user_id: Annotated[StrictStr, Field(description="The user ID of the user whose posts will be retrieved. Using 'me' as the user_id will return the posts for the current user. ")],
        search: Annotated[StrictStr, Field(description="The search query used to find posts.")],
        types: Annotated[StrictStr, Field(description="A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin ")],
        sources: Annotated[StrictStr, Field(description="A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or all the open archive groups the requested user has posted to if latitude, longitude and radius aren't passed). <br /><br /> NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required. ")],
        sort_by: Annotated[Optional[StrictStr], Field(description="How to sort the posts that are returned.  One of: relevance, date, active, distance <br /><br /> Relevance sorting will sort the posts that best match the search query first. Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first. ")] = None,
        group_ids: Annotated[Optional[StrictStr], Field(description="A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). <br /><br/> *To determine which group IDs were used and which were discarded, use the group_ids field in the response. ")] = None,
        per_page: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of posts to return per page (must be >= 1 and <= 100).")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The page of posts to return.")] = None,
        device_pixel_ratio: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Client device pixel ratio used to determine thumbnail size (default 1.0).")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The latitude of a point around which to return posts. ")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The longitude of a point around which to return posts. ")] = None,
        radius: Annotated[Optional[Union[Annotated[float, Field(le=257500, strict=True, ge=0)], Annotated[int, Field(le=257500, strict=True, ge=0)]]], Field(description="The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned. ")] = None,
        date_min: Annotated[Optional[datetime], Field(description="Only posts newer than or equal to this UTC date and time will be returned. ")] = None,
        date_max: Annotated[Optional[datetime], Field(description="Only posts older than this UTC date and time will be returned.")] = None,
        outcomes: Annotated[Optional[StrictStr], Field(description="A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn <br /><br /> There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to 'all', all posts will be returned no matter what outcome the posts have. If set to 'not-promised', only posts that are not satisfied ant not withdrawn and not expired and not promised are returned. ")] = None,
        include_reposts: Annotated[Optional[Annotated[int, Field(le=1, strict=True, ge=0)]], Field(description="If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search posts by a user

        Searching posts takes the same arguments as listing posts except for the addition of the search and sort_by parameters. 

        :param user_id: The user ID of the user whose posts will be retrieved. Using 'me' as the user_id will return the posts for the current user.  (required)
        :type user_id: str
        :param search: The search query used to find posts. (required)
        :type search: str
        :param types: A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin  (required)
        :type types: str
        :param sources: A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or all the open archive groups the requested user has posted to if latitude, longitude and radius aren't passed). <br /><br /> NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.  (required)
        :type sources: str
        :param sort_by: How to sort the posts that are returned.  One of: relevance, date, active, distance <br /><br /> Relevance sorting will sort the posts that best match the search query first. Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first. 
        :type sort_by: str
        :param group_ids: A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). <br /><br/> *To determine which group IDs were used and which were discarded, use the group_ids field in the response. 
        :type group_ids: str
        :param per_page: The number of posts to return per page (must be >= 1 and <= 100).
        :type per_page: int
        :param page: The page of posts to return.
        :type page: int
        :param device_pixel_ratio: Client device pixel ratio used to determine thumbnail size (default 1.0).
        :type device_pixel_ratio: float
        :param latitude: The latitude of a point around which to return posts. 
        :type latitude: float
        :param longitude: The longitude of a point around which to return posts. 
        :type longitude: float
        :param radius: The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned. 
        :type radius: float
        :param date_min: Only posts newer than or equal to this UTC date and time will be returned. 
        :type date_min: datetime
        :param date_max: Only posts older than this UTC date and time will be returned.
        :type date_max: datetime
        :param outcomes: A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn <br /><br /> There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to 'all', all posts will be returned no matter what outcome the posts have. If set to 'not-promised', only posts that are not satisfied ant not withdrawn and not expired and not promised are returned. 
        :type outcomes: str
        :param include_reposts: If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified. 
        :type include_reposts: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_user_posts_serialize(
            user_id=user_id,
            search=search,
            types=types,
            sources=sources,
            sort_by=sort_by,
            group_ids=group_ids,
            per_page=per_page,
            page=page,
            device_pixel_ratio=device_pixel_ratio,
            latitude=latitude,
            longitude=longitude,
            radius=radius,
            date_min=date_min,
            date_max=date_max,
            outcomes=outcomes,
            include_reposts=include_reposts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchPosts200Response",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_user_posts_serialize(
        self,
        user_id,
        search,
        types,
        sources,
        sort_by,
        group_ids,
        per_page,
        page,
        device_pixel_ratio,
        latitude,
        longitude,
        radius,
        date_min,
        date_max,
        outcomes,
        include_reposts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user_id is not None:
            _path_params['user_id'] = user_id
        # process the query parameters
        if search is not None:
            
            _query_params.append(('search', search))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if types is not None:
            
            _query_params.append(('types', types))
            
        if sources is not None:
            
            _query_params.append(('sources', sources))
            
        if group_ids is not None:
            
            _query_params.append(('group_ids', group_ids))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if device_pixel_ratio is not None:
            
            _query_params.append(('device_pixel_ratio', device_pixel_ratio))
            
        if latitude is not None:
            
            _query_params.append(('latitude', latitude))
            
        if longitude is not None:
            
            _query_params.append(('longitude', longitude))
            
        if radius is not None:
            
            _query_params.append(('radius', radius))
            
        if date_min is not None:
            if isinstance(date_min, datetime):
                _query_params.append(
                    (
                        'date_min',
                        date_min.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('date_min', date_min))
            
        if date_max is not None:
            if isinstance(date_max, datetime):
                _query_params.append(
                    (
                        'date_max',
                        date_max.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('date_max', date_max))
            
        if outcomes is not None:
            
            _query_params.append(('outcomes', outcomes))
            
        if include_reposts is not None:
            
            _query_params.append(('include_reposts', include_reposts))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/users/{user_id}/posts/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



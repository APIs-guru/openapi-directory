openapi: 3.0.0
info:
  version: '2014-03-28'
  x-release: v4
  title: Amazon CloudWatch Logs
  description: '<p>You can use Amazon CloudWatch Logs to monitor, store, and access your log files from EC2 instances, CloudTrail, and other sources. You can then retrieve the associated log data from CloudWatch Logs using the CloudWatch console, CloudWatch Logs commands in the Amazon Web Services CLI, CloudWatch Logs API, or CloudWatch Logs SDK.</p> <p>You can use CloudWatch Logs to:</p> <ul> <li> <p> <b>Monitor logs from EC2 instances in real-time</b>: You can use CloudWatch Logs to monitor applications and systems using log data. For example, CloudWatch Logs can track the number of errors that occur in your application logs and send you a notification whenever the rate of errors exceeds a threshold that you specify. CloudWatch Logs uses your log data for monitoring so no code changes are required. For example, you can monitor application logs for specific literal terms (such as "NullReferenceException") or count the number of occurrences of a literal term at a particular position in log data (such as "404" status codes in an Apache access log). When the term you are searching for is found, CloudWatch Logs reports the data to a CloudWatch metric that you specify.</p> </li> <li> <p> <b>Monitor CloudTrail logged events</b>: You can create alarms in CloudWatch and receive notifications of particular API activity as captured by CloudTrail. You can use the notification to perform troubleshooting.</p> </li> <li> <p> <b>Archive log data</b>: You can use CloudWatch Logs to store your log data in highly durable storage. You can change the log retention setting so that any log events older than this setting are automatically deleted. The CloudWatch Logs agent makes it easy to quickly send both rotated and non-rotated log data off of a host and into the log service. You can then access the raw log data when you need it.</p> </li> </ul>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: logs
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/logs-2014-03-28.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/logs/'
servers:
  - url: 'http://logs.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon CloudWatch Logs multi-region endpoint
  - url: 'https://logs.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon CloudWatch Logs multi-region endpoint
  - url: 'http://logs.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon CloudWatch Logs endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://logs.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon CloudWatch Logs endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  /#X-Amz-Target=Logs_20140328.AssociateKmsKey:
    post:
      operationId: AssociateKmsKey
      description: '<p>Associates the specified Key Management Service customer master key (CMK) with the specified log group.</p> <p>Associating an KMS CMK with a log group overrides any existing associations between the log group and a CMK. After a CMK is associated with a log group, all newly ingested data for the log group is encrypted using the CMK. This association is stored as long as the data encrypted with the CMK is still within CloudWatch Logs. This enables CloudWatch Logs to decrypt this data whenever it is requested.</p> <important> <p>CloudWatch Logs supports only symmetric CMKs. Do not use an associate an asymmetric CMK with your log group. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Using Symmetric and Asymmetric Keys</a>.</p> </important> <p>It can take up to 5 minutes for this operation to take effect.</p> <p>If you attempt to associate a CMK with a log group but the CMK does not exist or the CMK is disabled, you receive an <code>InvalidParameterException</code> error. </p>'
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociateKmsKeyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.AssociateKmsKey
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.CancelExportTask:
    post:
      operationId: CancelExportTask
      description: <p>Cancels the specified export task.</p> <p>The task must be in the <code>PENDING</code> or <code>RUNNING</code> state.</p>
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InvalidOperationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidOperationException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelExportTaskRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.CancelExportTask
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.CreateExportTask:
    post:
      operationId: CreateExportTask
      description: '<p>Creates an export task, which allows you to efficiently export data from a log group to an Amazon S3 bucket. When you perform a <code>CreateExportTask</code> operation, you must use credentials that have permission to write to the S3 bucket that you specify as the destination.</p> <p>This is an asynchronous call. If all the required information is provided, this operation initiates an export task and responds with the ID of the task. After the task has started, you can use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeExportTasks.html">DescribeExportTasks</a> to get the status of the export task. Each account can only have one active (<code>RUNNING</code> or <code>PENDING</code>) export task at a time. To cancel an export task, use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CancelExportTask.html">CancelExportTask</a>.</p> <p>You can export logs from multiple log groups or multiple time ranges to the same S3 bucket. To separate out log data for each export task, you can specify a prefix to be used as the Amazon S3 key prefix for all exported objects.</p> <p>Exporting to S3 buckets that are encrypted with AES-256 is supported. Exporting to S3 buckets encrypted with SSE-KMS is not supported. </p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateExportTaskResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAlreadyExistsException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExportTaskRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.CreateExportTask
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.CreateLogGroup:
    post:
      operationId: CreateLogGroup
      description: '<p>Creates a log group with the specified name. You can create up to 20,000 log groups per account.</p> <p>You must use the following guidelines when naming a log group:</p> <ul> <li> <p>Log group names must be unique within a region for an Amazon Web Services account.</p> </li> <li> <p>Log group names can be between 1 and 512 characters long.</p> </li> <li> <p>Log group names consist of the following characters: a-z, A-Z, 0-9, ''_'' (underscore), ''-'' (hyphen), ''/'' (forward slash), ''.'' (period), and ''#'' (number sign)</p> </li> </ul> <p>When you create a log group, by default the log events in the log group never expire. To set a retention policy so that events expire and are deleted after a specified time, use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutRetentionPolicy.html">PutRetentionPolicy</a>.</p> <p>If you associate a Key Management Service customer master key (CMK) with the log group, ingested data is encrypted using the CMK. This association is stored as long as the data encrypted with the CMK is still within CloudWatch Logs. This enables CloudWatch Logs to decrypt this data whenever it is requested.</p> <p>If you attempt to associate a CMK with the log group but the CMK does not exist or the CMK is disabled, you receive an <code>InvalidParameterException</code> error. </p> <important> <p>CloudWatch Logs supports only symmetric CMKs. Do not associate an asymmetric CMK with your log group. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Using Symmetric and Asymmetric Keys</a>.</p> </important>'
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAlreadyExistsException'
        '482':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLogGroupRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.CreateLogGroup
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.CreateLogStream:
    post:
      operationId: CreateLogStream
      description: '<p>Creates a log stream for the specified log group. A log stream is a sequence of log events that originate from a single source, such as an application instance or a resource that is being monitored.</p> <p>There is no limit on the number of log streams that you can create for a log group. There is a limit of 50 TPS on <code>CreateLogStream</code> operations, after which transactions are throttled.</p> <p>You must use the following guidelines when naming a log stream:</p> <ul> <li> <p>Log stream names must be unique within the log group.</p> </li> <li> <p>Log stream names can be between 1 and 512 characters long.</p> </li> <li> <p>The '':'' (colon) and ''*'' (asterisk) characters are not allowed.</p> </li> </ul>'
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAlreadyExistsException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLogStreamRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.CreateLogStream
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.DeleteDestination:
    post:
      operationId: DeleteDestination
      description: 'Deletes the specified destination, and eventually disables all the subscription filters that publish to it. This operation does not delete the physical resource encapsulated by the destination.'
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteDestinationRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DeleteDestination
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.DeleteLogGroup:
    post:
      operationId: DeleteLogGroup
      description: Deletes the specified log group and permanently deletes all the archived log events associated with the log group.
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLogGroupRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DeleteLogGroup
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.DeleteLogStream:
    post:
      operationId: DeleteLogStream
      description: Deletes the specified log stream and permanently deletes all the archived log events associated with the log stream.
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLogStreamRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DeleteLogStream
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.DeleteMetricFilter:
    post:
      operationId: DeleteMetricFilter
      description: Deletes the specified metric filter.
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteMetricFilterRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DeleteMetricFilter
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.DeleteQueryDefinition:
    post:
      operationId: DeleteQueryDefinition
      description: '<p>Deletes a saved CloudWatch Logs Insights query definition. A query definition contains details about a saved CloudWatch Logs Insights query.</p> <p>Each <code>DeleteQueryDefinition</code> operation can delete one query definition.</p> <p>You must have the <code>logs:DeleteQueryDefinition</code> permission to be able to perform this operation.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteQueryDefinitionResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteQueryDefinitionRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DeleteQueryDefinition
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.DeleteResourcePolicy:
    post:
      operationId: DeleteResourcePolicy
      description: Deletes a resource policy from this account. This revokes the access of the identities in that policy to put log events to this account.
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteResourcePolicyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DeleteResourcePolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.DeleteRetentionPolicy:
    post:
      operationId: DeleteRetentionPolicy
      description: <p>Deletes the specified retention policy.</p> <p>Log events do not expire if they belong to log groups without a retention policy.</p>
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRetentionPolicyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DeleteRetentionPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.DeleteSubscriptionFilter:
    post:
      operationId: DeleteSubscriptionFilter
      description: Deletes the specified subscription filter.
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSubscriptionFilterRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DeleteSubscriptionFilter
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.DescribeDestinations:
    post:
      operationId: DescribeDestinations
      description: Lists all your destinations. The results are ASCII-sorted by destination name.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeDestinationsResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeDestinationsRequest'
      parameters:
        - name: limit
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DescribeDestinations
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.DescribeExportTasks:
    post:
      operationId: DescribeExportTasks
      description: Lists the specified export tasks. You can list all your export tasks or filter the results based on task ID or task status.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeExportTasksResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeExportTasksRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DescribeExportTasks
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.DescribeLogGroups:
    post:
      operationId: DescribeLogGroups
      description: '<p>Lists the specified log groups. You can list all your log groups or filter the results by prefix. The results are ASCII-sorted by log group name.</p> <p>CloudWatch Logs doesn’t support IAM policies that control access to the <code>DescribeLogGroups</code> action by using the <code>aws:ResourceTag/<i>key-name</i> </code> condition key. Other CloudWatch Logs actions do support the use of the <code>aws:ResourceTag/<i>key-name</i> </code> condition key to control access. For more information about using tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Controlling access to Amazon Web Services resources using tags</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeLogGroupsResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeLogGroupsRequest'
      parameters:
        - name: limit
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DescribeLogGroups
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.DescribeLogStreams:
    post:
      operationId: DescribeLogStreams
      description: '<p>Lists the log streams for the specified log group. You can list all the log streams or filter the results by prefix. You can also control how the results are ordered.</p> <p>This operation has a limit of five transactions per second, after which transactions are throttled.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeLogStreamsResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeLogStreamsRequest'
      parameters:
        - name: limit
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DescribeLogStreams
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.DescribeMetricFilters:
    post:
      operationId: DescribeMetricFilters
      description: 'Lists the specified metric filters. You can list all of the metric filters or filter the results by log name, prefix, metric name, or metric namespace. The results are ASCII-sorted by filter name.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeMetricFiltersResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeMetricFiltersRequest'
      parameters:
        - name: limit
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DescribeMetricFilters
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.DescribeQueries:
    post:
      operationId: DescribeQueries
      description: 'Returns a list of CloudWatch Logs Insights queries that are scheduled, executing, or have been executed recently in this account. You can request all queries or limit it to queries of a specific log group or queries with a certain status.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeQueriesResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeQueriesRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DescribeQueries
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.DescribeQueryDefinitions:
    post:
      operationId: DescribeQueryDefinitions
      description: <p>This operation returns a paginated list of your saved CloudWatch Logs Insights query definitions.</p> <p>You can use the <code>queryDefinitionNamePrefix</code> parameter to limit the results to only the query definitions that have names that start with a certain string.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeQueryDefinitionsResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeQueryDefinitionsRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DescribeQueryDefinitions
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.DescribeResourcePolicies:
    post:
      operationId: DescribeResourcePolicies
      description: Lists the resource policies in this account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeResourcePoliciesResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeResourcePoliciesRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DescribeResourcePolicies
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.DescribeSubscriptionFilters:
    post:
      operationId: DescribeSubscriptionFilters
      description: Lists the subscription filters for the specified log group. You can list all the subscription filters or filter the results by prefix. The results are ASCII-sorted by filter name.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeSubscriptionFiltersResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeSubscriptionFiltersRequest'
      parameters:
        - name: limit
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DescribeSubscriptionFilters
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.DisassociateKmsKey:
    post:
      operationId: DisassociateKmsKey
      description: '<p>Disassociates the associated Key Management Service customer master key (CMK) from the specified log group.</p> <p>After the KMS CMK is disassociated from the log group, CloudWatch Logs stops encrypting newly ingested data for the log group. All previously ingested data remains encrypted, and CloudWatch Logs requires permissions for the CMK whenever the encrypted data is requested.</p> <p>Note that it can take up to 5 minutes for this operation to take effect.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisassociateKmsKeyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.DisassociateKmsKey
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.FilterLogEvents:
    post:
      operationId: FilterLogEvents
      description: '<p>Lists log events from the specified log group. You can list all the log events or filter the results using a filter pattern, a time range, and the name of the log stream.</p> <p>By default, this operation returns as many log events as can fit in 1 MB (up to 10,000 log events) or all the events found within the time range that you specify. If the results include a token, then there are more log events available, and you can get additional results by specifying the token in a subsequent call. This operation can return empty results while there are more log events available through the token.</p> <p>The returned log events are sorted by event timestamp, the timestamp when the event was ingested by CloudWatch Logs, and the ID of the <code>PutLogEvents</code> request.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterLogEventsResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterLogEventsRequest'
      parameters:
        - name: limit
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.FilterLogEvents
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.GetLogEvents:
    post:
      operationId: GetLogEvents
      description: '<p>Lists log events from the specified log stream. You can list all of the log events or filter using a time range.</p> <p>By default, this operation returns as many log events as can fit in a response size of 1MB (up to 10,000 log events). You can get additional log events by specifying one of the tokens in a subsequent call. This operation can return empty results while there are more log events available through the token.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLogEventsResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetLogEventsRequest'
      parameters:
        - name: limit
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.GetLogEvents
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.GetLogGroupFields:
    post:
      operationId: GetLogGroupFields
      description: '<p>Returns a list of the fields that are included in log events in the specified log group, along with the percentage of log events that contain each field. The search is limited to a time period that you specify.</p> <p>In the results, fields that start with @ are fields generated by CloudWatch Logs. For example, <code>@timestamp</code> is the timestamp of each log event. For more information about the fields that are generated by CloudWatch logs, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_AnalyzeLogData-discoverable-fields.html">Supported Logs and Discovered Fields</a>.</p> <p>The response results are sorted by the frequency percentage, starting with the highest percentage.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLogGroupFieldsResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetLogGroupFieldsRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.GetLogGroupFields
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.GetLogRecord:
    post:
      operationId: GetLogRecord
      description: '<p>Retrieves all of the fields and values of a single log event. All fields are retrieved, even if the original query that produced the <code>logRecordPointer</code> retrieved only a subset of fields. Fields are returned as field name/field value pairs.</p> <p>The full unparsed log event is returned within <code>@message</code>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLogRecordResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetLogRecordRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.GetLogRecord
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.GetQueryResults:
    post:
      operationId: GetQueryResults
      description: '<p>Returns the results from the specified query.</p> <p>Only the fields requested in the query are returned, along with a <code>@ptr</code> field, which is the identifier for the log record. You can use the value of <code>@ptr</code> in a <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_GetLogRecord.html">GetLogRecord</a> operation to get the full log record.</p> <p> <code>GetQueryResults</code> does not start a query execution. To run a query, use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_StartQuery.html">StartQuery</a>.</p> <p>If the value of the <code>Status</code> field in the output is <code>Running</code>, this operation returns only partial results. If you see a value of <code>Scheduled</code> or <code>Running</code> for the status, you can retry the operation later to see the final results. </p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetQueryResultsResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetQueryResultsRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.GetQueryResults
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.ListTagsLogGroup:
    post:
      operationId: ListTagsLogGroup
      description: Lists the tags for the specified log group.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsLogGroupResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTagsLogGroupRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.ListTagsLogGroup
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.PutDestination:
    post:
      operationId: PutDestination
      description: '<p>Creates or updates a destination. This operation is used only to create destinations for cross-account subscriptions.</p> <p>A destination encapsulates a physical resource (such as an Amazon Kinesis stream) and enables you to subscribe to a real-time stream of log events for a different account, ingested using <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html">PutLogEvents</a>.</p> <p>Through an access policy, a destination controls what is written to it. By default, <code>PutDestination</code> does not set any access policy with the destination, which means a cross-account user cannot call <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutSubscriptionFilter.html">PutSubscriptionFilter</a> against this destination. To enable this, the destination owner must call <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDestinationPolicy.html">PutDestinationPolicy</a> after <code>PutDestination</code>.</p> <p>To perform a <code>PutDestination</code> operation, you must also have the <code>iam:PassRole</code> permission.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutDestinationResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDestinationRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.PutDestination
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.PutDestinationPolicy:
    post:
      operationId: PutDestinationPolicy
      description: '<p>Creates or updates an access policy associated with an existing destination. An access policy is an <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies_overview.html">IAM policy document</a> that is used to authorize claims to register a subscription filter against a given destination.</p> <p>If multiple Amazon Web Services accounts are sending logs to this destination, each sender account must be listed separately in the policy. The policy does not support specifying <code>*</code> as the Principal or the use of the <code>aws:PrincipalOrgId</code> global key.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDestinationPolicyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.PutDestinationPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.PutLogEvents:
    post:
      operationId: PutLogEvents
      description: '<p>Uploads a batch of log events to the specified log stream.</p> <p>You must include the sequence token obtained from the response of the previous call. An upload in a newly created log stream does not require a sequence token. You can also get the sequence token in the <code>expectedSequenceToken</code> field from <code>InvalidSequenceTokenException</code>. If you call <code>PutLogEvents</code> twice within a narrow time period using the same value for <code>sequenceToken</code>, both calls might be successful or one might be rejected.</p> <p>The batch of events must satisfy the following constraints:</p> <ul> <li> <p>The maximum batch size is 1,048,576 bytes. This size is calculated as the sum of all event messages in UTF-8, plus 26 bytes for each log event.</p> </li> <li> <p>None of the log events in the batch can be more than 2 hours in the future.</p> </li> <li> <p>None of the log events in the batch can be older than 14 days or older than the retention period of the log group.</p> </li> <li> <p>The log events in the batch must be in chronological order by their timestamp. The timestamp is the time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. (In Amazon Web Services Tools for PowerShell and the Amazon Web Services SDK for .NET, the timestamp is specified in .NET format: yyyy-mm-ddThh:mm:ss. For example, 2017-09-15T13:45:30.) </p> </li> <li> <p>A batch of log events in a single request cannot span more than 24 hours. Otherwise, the operation fails.</p> </li> <li> <p>The maximum number of log events in a batch is 10,000.</p> </li> <li> <p>There is a quota of 5 requests per second per log stream. Additional requests are throttled. This quota can''t be changed.</p> </li> </ul> <p>If a call to <code>PutLogEvents</code> returns "UnrecognizedClientException" the most likely cause is an invalid Amazon Web Services access key ID or secret key. </p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutLogEventsResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: InvalidSequenceTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSequenceTokenException'
        '482':
          description: DataAlreadyAcceptedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataAlreadyAcceptedException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: UnrecognizedClientException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnrecognizedClientException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutLogEventsRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.PutLogEvents
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.PutMetricFilter:
    post:
      operationId: PutMetricFilter
      description: '<p>Creates or updates a metric filter and associates it with the specified log group. Metric filters allow you to configure rules to extract metric data from log events ingested through <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html">PutLogEvents</a>.</p> <p>The maximum number of metric filters that can be associated with a log group is 100.</p> <p>When you create a metric filter, you can also optionally assign a unit and dimensions to the metric that is created.</p> <important> <p>Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not specify high-cardinality fields such as <code>IPAddress</code> or <code>requestID</code> as dimensions. Each different value found for a dimension is treated as a separate metric and accrues charges as a separate custom metric. </p> <p>To help prevent accidental high charges, Amazon disables a metric filter if it generates 1000 different name/value pairs for the dimensions that you have specified within a certain amount of time.</p> <p>You can also set up a billing alarm to alert you if your charges are higher than expected. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html"> Creating a Billing Alarm to Monitor Your Estimated Amazon Web Services Charges</a>. </p> </important>'
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
        '483':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutMetricFilterRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.PutMetricFilter
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.PutQueryDefinition:
    post:
      operationId: PutQueryDefinition
      description: '<p>Creates or updates a query definition for CloudWatch Logs Insights. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AnalyzingLogData.html">Analyzing Log Data with CloudWatch Logs Insights</a>.</p> <p>To update a query definition, specify its <code>queryDefinitionId</code> in your request. The values of <code>name</code>, <code>queryString</code>, and <code>logGroupNames</code> are changed to the values that you specify in your update operation. No current values are retained from the current query definition. For example, if you update a current query definition that includes log groups, and you don''t specify the <code>logGroupNames</code> parameter in your update operation, the query definition changes to contain no log groups.</p> <p>You must have the <code>logs:PutQueryDefinition</code> permission to be able to perform this operation.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutQueryDefinitionResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutQueryDefinitionRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.PutQueryDefinition
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.PutResourcePolicy:
    post:
      operationId: PutResourcePolicy
      description: 'Creates or updates a resource policy allowing other Amazon Web Services services to put log events to this account, such as Amazon Route 53. An account can have up to 10 resource policies per Amazon Web Services Region.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutResourcePolicyResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutResourcePolicyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.PutResourcePolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.PutRetentionPolicy:
    post:
      operationId: PutRetentionPolicy
      description: Sets the retention of the specified log group. A retention policy allows you to configure the number of days for which to retain log events in the specified log group.
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutRetentionPolicyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.PutRetentionPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.PutSubscriptionFilter:
    post:
      operationId: PutSubscriptionFilter
      description: '<p>Creates or updates a subscription filter and associates it with the specified log group. Subscription filters allow you to subscribe to a real-time stream of log events ingested through <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html">PutLogEvents</a> and have them delivered to a specific destination. When log events are sent to the receiving service, they are Base64 encoded and compressed with the gzip format.</p> <p>The following destinations are supported for subscription filters:</p> <ul> <li> <p>An Amazon Kinesis stream belonging to the same account as the subscription filter, for same-account delivery.</p> </li> <li> <p>A logical destination that belongs to a different account, for cross-account delivery.</p> </li> <li> <p>An Amazon Kinesis Firehose delivery stream that belongs to the same account as the subscription filter, for same-account delivery.</p> </li> <li> <p>An Lambda function that belongs to the same account as the subscription filter, for same-account delivery.</p> </li> </ul> <p>Each log group can have up to two subscription filters associated with it. If you are updating an existing filter, you must specify the correct name in <code>filterName</code>. </p> <p>To perform a <code>PutSubscriptionFilter</code> operation, you must also have the <code>iam:PassRole</code> permission.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: OperationAbortedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
        '483':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutSubscriptionFilterRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.PutSubscriptionFilter
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.StartQuery:
    post:
      operationId: StartQuery
      description: '<p>Schedules a query of a log group using CloudWatch Logs Insights. You specify the log group and time range to query and the query string to use.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html">CloudWatch Logs Insights Query Syntax</a>.</p> <p>Queries time out after 15 minutes of execution. If your queries are timing out, reduce the time range being searched or partition your query into a number of queries.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartQueryResponse'
        '480':
          description: MalformedQueryException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MalformedQueryException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartQueryRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.StartQuery
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.StopQuery:
    post:
      operationId: StopQuery
      description: 'Stops a CloudWatch Logs Insights query that is in progress. If the query has already ended, the operation returns an error indicating that the specified query is not running.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopQueryResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopQueryRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.StopQuery
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.TagLogGroup:
    post:
      operationId: TagLogGroup
      description: '<p>Adds or updates the specified tags for the specified log group.</p> <p>To list the tags for a log group, use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_ListTagsLogGroup.html">ListTagsLogGroup</a>. To remove tags, use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UntagLogGroup.html">UntagLogGroup</a>.</p> <p>For more information about tags, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html#log-group-tagging">Tag Log Groups in Amazon CloudWatch Logs</a> in the <i>Amazon CloudWatch Logs User Guide</i>.</p> <p>CloudWatch Logs doesn’t support IAM policies that prevent users from assigning specified tags to log groups using the <code>aws:Resource/<i>key-name</i> </code> or <code>aws:TagKeys</code> condition keys. For more information about using tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Controlling access to Amazon Web Services resources using tags</a>.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagLogGroupRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.TagLogGroup
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.TestMetricFilter:
    post:
      operationId: TestMetricFilter
      description: Tests the filter pattern of a metric filter against a sample of log event messages. You can use this operation to validate the correctness of a metric filter pattern.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestMetricFilterResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestMetricFilterRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.TestMetricFilter
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=Logs_20140328.UntagLogGroup:
    post:
      operationId: UntagLogGroup
      description: '<p>Removes the specified tags from the specified log group.</p> <p>To list the tags for a log group, use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_ListTagsLogGroup.html">ListTagsLogGroup</a>. To add tags, use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_TagLogGroup.html">TagLogGroup</a>.</p> <p>CloudWatch Logs doesn’t support IAM policies that prevent users from assigning specified tags to log groups using the <code>aws:Resource/<i>key-name</i> </code> or <code>aws:TagKeys</code> condition keys. </p>'
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UntagLogGroupRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Logs_20140328.UntagLogGroup
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    AssociateKmsKeyRequest:
      type: object
      required:
        - logGroupName
        - kmsKeyId
      title: AssociateKmsKeyRequest
      properties:
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group.
        kmsKeyId:
          $ref: '#/components/schemas/KmsKeyId'
          description: 'The Amazon Resource Name (ARN) of the CMK to use when encrypting log data. This must be a symmetric CMK. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms">Amazon Resource Names - Key Management Service</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Using Symmetric and Asymmetric Keys</a>.'
    InvalidParameterException: {}
    ResourceNotFoundException: {}
    OperationAbortedException: {}
    ServiceUnavailableException: {}
    CancelExportTaskRequest:
      type: object
      required:
        - taskId
      title: CancelExportTaskRequest
      properties:
        taskId:
          $ref: '#/components/schemas/ExportTaskId'
          description: The ID of the export task.
    InvalidOperationException: {}
    CreateExportTaskResponse:
      type: object
      properties:
        taskId:
          $ref: '#/components/schemas/ExportTaskId'
          description: The ID of the export task.
    CreateExportTaskRequest:
      type: object
      required:
        - logGroupName
        - from
        - to
        - destination
      title: CreateExportTaskRequest
      properties:
        taskName:
          $ref: '#/components/schemas/ExportTaskName'
          description: The name of the export task.
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group.
        logStreamNamePrefix:
          $ref: '#/components/schemas/LogStreamName'
          description: 'Export only log streams that match the provided prefix. If you don''t specify a value, no prefix filter is applied.'
        from:
          $ref: '#/components/schemas/Timestamp'
          description: 'The start time of the range for the request, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp earlier than this time are not exported.'
        to:
          $ref: '#/components/schemas/Timestamp'
          description: 'The end time of the range for the request, expreswatchlogsdocused as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not exported.'
        destination:
          $ref: '#/components/schemas/ExportDestinationBucket'
          description: The name of S3 bucket for the exported log data. The bucket must be in the same Amazon Web Services region.
        destinationPrefix:
          $ref: '#/components/schemas/ExportDestinationPrefix'
          description: 'The prefix used as the start of the key for every object exported. If you don''t specify a value, the default is <code>exportedlogs</code>.'
    LimitExceededException: {}
    ResourceAlreadyExistsException: {}
    CreateLogGroupRequest:
      type: object
      required:
        - logGroupName
      title: CreateLogGroupRequest
      properties:
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group.
        kmsKeyId:
          $ref: '#/components/schemas/KmsKeyId'
          description: 'The Amazon Resource Name (ARN) of the CMK to use when encrypting log data. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms">Amazon Resource Names - Key Management Service</a>.'
        tags:
          $ref: '#/components/schemas/Tags'
          description: '<p>The key-value pairs to use for the tags.</p> <p>CloudWatch Logs doesn’t support IAM policies that prevent users from assigning specified tags to log groups using the <code>aws:Resource/<i>key-name</i> </code> or <code>aws:TagKeys</code> condition keys. For more information about using tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Controlling access to Amazon Web Services resources using tags</a>.</p>'
    CreateLogStreamRequest:
      type: object
      required:
        - logGroupName
        - logStreamName
      title: CreateLogStreamRequest
      properties:
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group.
        logStreamName:
          $ref: '#/components/schemas/LogStreamName'
          description: The name of the log stream.
    DeleteDestinationRequest:
      type: object
      required:
        - destinationName
      title: DeleteDestinationRequest
      properties:
        destinationName:
          $ref: '#/components/schemas/DestinationName'
          description: The name of the destination.
    DeleteLogGroupRequest:
      type: object
      required:
        - logGroupName
      title: DeleteLogGroupRequest
      properties:
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group.
    DeleteLogStreamRequest:
      type: object
      required:
        - logGroupName
        - logStreamName
      title: DeleteLogStreamRequest
      properties:
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group.
        logStreamName:
          $ref: '#/components/schemas/LogStreamName'
          description: The name of the log stream.
    DeleteMetricFilterRequest:
      type: object
      required:
        - logGroupName
        - filterName
      title: DeleteMetricFilterRequest
      properties:
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group.
        filterName:
          $ref: '#/components/schemas/FilterName'
          description: The name of the metric filter.
    DeleteQueryDefinitionResponse:
      type: object
      properties:
        success:
          $ref: '#/components/schemas/Success'
          description: A value of TRUE indicates that the operation succeeded. FALSE indicates that the operation failed.
    DeleteQueryDefinitionRequest:
      type: object
      required:
        - queryDefinitionId
      title: DeleteQueryDefinitionRequest
      properties:
        queryDefinitionId:
          $ref: '#/components/schemas/QueryId'
          description: 'The ID of the query definition that you want to delete. You can use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeQueryDefinitions.html">DescribeQueryDefinitions</a> to retrieve the IDs of your saved query definitions.'
    DeleteResourcePolicyRequest:
      type: object
      title: DeleteResourcePolicyRequest
      properties:
        policyName:
          $ref: '#/components/schemas/PolicyName'
          description: The name of the policy to be revoked. This parameter is required.
    DeleteRetentionPolicyRequest:
      type: object
      required:
        - logGroupName
      title: DeleteRetentionPolicyRequest
      properties:
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group.
    DeleteSubscriptionFilterRequest:
      type: object
      required:
        - logGroupName
        - filterName
      title: DeleteSubscriptionFilterRequest
      properties:
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group.
        filterName:
          $ref: '#/components/schemas/FilterName'
          description: The name of the subscription filter.
    DescribeDestinationsResponse:
      type: object
      properties:
        destinations:
          $ref: '#/components/schemas/Destinations'
          description: The destinations.
        nextToken:
          $ref: '#/components/schemas/NextToken'
    DescribeDestinationsRequest:
      type: object
      title: DescribeDestinationsRequest
      properties:
        DestinationNamePrefix:
          $ref: '#/components/schemas/DestinationName'
          description: 'The prefix to match. If you don''t specify a value, no prefix filter is applied.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: The token for the next set of items to return. (You received this token from a previous call.)
        limit:
          $ref: '#/components/schemas/DescribeLimit'
          description: 'The maximum number of items returned. If you don''t specify a value, the default is up to 50 items.'
    DescribeExportTasksResponse:
      type: object
      properties:
        exportTasks:
          $ref: '#/components/schemas/ExportTasks'
          description: The export tasks.
        nextToken:
          $ref: '#/components/schemas/NextToken'
    DescribeExportTasksRequest:
      type: object
      title: DescribeExportTasksRequest
      properties:
        taskId:
          $ref: '#/components/schemas/ExportTaskId'
          description: The ID of the export task. Specifying a task ID filters the results to zero or one export tasks.
        statusCode:
          $ref: '#/components/schemas/ExportTaskStatusCode'
          description: The status code of the export task. Specifying a status code filters the results to zero or more export tasks.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: The token for the next set of items to return. (You received this token from a previous call.)
        limit:
          $ref: '#/components/schemas/DescribeLimit'
          description: 'The maximum number of items returned. If you don''t specify a value, the default is up to 50 items.'
    DescribeLogGroupsResponse:
      type: object
      properties:
        logGroups:
          $ref: '#/components/schemas/LogGroups'
          description: '<p>The log groups.</p> <p>If the <code>retentionInDays</code> value if not included for a log group, then that log group is set to have its events never expire.</p>'
        nextToken:
          $ref: '#/components/schemas/NextToken'
    DescribeLogGroupsRequest:
      type: object
      title: DescribeLogGroupsRequest
      properties:
        logGroupNamePrefix:
          $ref: '#/components/schemas/LogGroupName'
          description: The prefix to match.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: The token for the next set of items to return. (You received this token from a previous call.)
        limit:
          $ref: '#/components/schemas/DescribeLimit'
          description: 'The maximum number of items returned. If you don''t specify a value, the default is up to 50 items.'
    DescribeLogStreamsResponse:
      type: object
      properties:
        logStreams:
          $ref: '#/components/schemas/LogStreams'
          description: The log streams.
        nextToken:
          $ref: '#/components/schemas/NextToken'
    DescribeLogStreamsRequest:
      type: object
      required:
        - logGroupName
      title: DescribeLogStreamsRequest
      properties:
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group.
        logStreamNamePrefix:
          $ref: '#/components/schemas/LogStreamName'
          description: '<p>The prefix to match.</p> <p>If <code>orderBy</code> is <code>LastEventTime</code>, you cannot specify this parameter.</p>'
        orderBy:
          $ref: '#/components/schemas/OrderBy'
          description: '<p>If the value is <code>LogStreamName</code>, the results are ordered by log stream name. If the value is <code>LastEventTime</code>, the results are ordered by the event time. The default value is <code>LogStreamName</code>.</p> <p>If you order the results by event time, you cannot specify the <code>logStreamNamePrefix</code> parameter.</p> <p> <code>lastEventTimestamp</code> represents the time of the most recent log event in the log stream in CloudWatch Logs. This number is expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. <code>lastEventTimestamp</code> updates on an eventual consistency basis. It typically updates in less than an hour from ingestion, but in rare situations might take longer.</p>'
        descending:
          $ref: '#/components/schemas/Descending'
          description: 'If the value is true, results are returned in descending order. If the value is to false, results are returned in ascending order. The default value is false.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: The token for the next set of items to return. (You received this token from a previous call.)
        limit:
          $ref: '#/components/schemas/DescribeLimit'
          description: 'The maximum number of items returned. If you don''t specify a value, the default is up to 50 items.'
    DescribeMetricFiltersResponse:
      type: object
      properties:
        metricFilters:
          $ref: '#/components/schemas/MetricFilters'
          description: The metric filters.
        nextToken:
          $ref: '#/components/schemas/NextToken'
    DescribeMetricFiltersRequest:
      type: object
      title: DescribeMetricFiltersRequest
      properties:
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group.
        filterNamePrefix:
          $ref: '#/components/schemas/FilterName'
          description: The prefix to match. CloudWatch Logs uses the value you set here only if you also include the <code>logGroupName</code> parameter in your request.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: The token for the next set of items to return. (You received this token from a previous call.)
        limit:
          $ref: '#/components/schemas/DescribeLimit'
          description: 'The maximum number of items returned. If you don''t specify a value, the default is up to 50 items.'
        metricName:
          $ref: '#/components/schemas/MetricName'
          description: 'Filters results to include only those with the specified metric name. If you include this parameter in your request, you must also include the <code>metricNamespace</code> parameter.'
        metricNamespace:
          $ref: '#/components/schemas/MetricNamespace'
          description: 'Filters results to include only those in the specified namespace. If you include this parameter in your request, you must also include the <code>metricName</code> parameter.'
    DescribeQueriesResponse:
      type: object
      properties:
        queries:
          $ref: '#/components/schemas/QueryInfoList'
          description: The list of queries that match the request.
        nextToken:
          $ref: '#/components/schemas/NextToken'
    DescribeQueriesRequest:
      type: object
      title: DescribeQueriesRequest
      properties:
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: Limits the returned queries to only those for the specified log group.
        status:
          $ref: '#/components/schemas/QueryStatus'
          description: 'Limits the returned queries to only those that have the specified status. Valid values are <code>Cancelled</code>, <code>Complete</code>, <code>Failed</code>, <code>Running</code>, and <code>Scheduled</code>.'
        maxResults:
          $ref: '#/components/schemas/DescribeQueriesMaxResults'
          description: Limits the number of returned queries to the specified number.
        nextToken:
          $ref: '#/components/schemas/NextToken'
    DescribeQueryDefinitionsResponse:
      type: object
      properties:
        queryDefinitions:
          $ref: '#/components/schemas/QueryDefinitionList'
          description: The list of query definitions that match your request.
        nextToken:
          $ref: '#/components/schemas/NextToken'
    DescribeQueryDefinitionsRequest:
      type: object
      title: DescribeQueryDefinitionsRequest
      properties:
        queryDefinitionNamePrefix:
          $ref: '#/components/schemas/QueryDefinitionName'
          description: Use this parameter to filter your results to only the query definitions that have names that start with the prefix you specify.
        maxResults:
          $ref: '#/components/schemas/QueryListMaxResults'
          description: Limits the number of returned query definitions to the specified number.
        nextToken:
          $ref: '#/components/schemas/NextToken'
    DescribeResourcePoliciesResponse:
      type: object
      properties:
        resourcePolicies:
          $ref: '#/components/schemas/ResourcePolicies'
          description: The resource policies that exist in this account.
        nextToken:
          $ref: '#/components/schemas/NextToken'
    DescribeResourcePoliciesRequest:
      type: object
      title: DescribeResourcePoliciesRequest
      properties:
        nextToken:
          $ref: '#/components/schemas/NextToken'
        limit:
          $ref: '#/components/schemas/DescribeLimit'
          description: The maximum number of resource policies to be displayed with one call of this API.
    DescribeSubscriptionFiltersResponse:
      type: object
      properties:
        subscriptionFilters:
          $ref: '#/components/schemas/SubscriptionFilters'
          description: The subscription filters.
        nextToken:
          $ref: '#/components/schemas/NextToken'
    DescribeSubscriptionFiltersRequest:
      type: object
      required:
        - logGroupName
      title: DescribeSubscriptionFiltersRequest
      properties:
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group.
        filterNamePrefix:
          $ref: '#/components/schemas/FilterName'
          description: 'The prefix to match. If you don''t specify a value, no prefix filter is applied.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: The token for the next set of items to return. (You received this token from a previous call.)
        limit:
          $ref: '#/components/schemas/DescribeLimit'
          description: 'The maximum number of items returned. If you don''t specify a value, the default is up to 50 items.'
    DisassociateKmsKeyRequest:
      type: object
      required:
        - logGroupName
      title: DisassociateKmsKeyRequest
      properties:
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group.
    FilterLogEventsResponse:
      type: object
      properties:
        events:
          $ref: '#/components/schemas/FilteredLogEvents'
          description: The matched events.
        searchedLogStreams:
          $ref: '#/components/schemas/SearchedLogStreams'
          description: '<p> <b>IMPORTANT</b> Starting on May 15, 2020, this parameter will be deprecated. This parameter will be an empty list after the deprecation occurs.</p> <p>Indicates which log streams have been searched and whether each has been searched completely.</p>'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: The token to use when requesting the next set of items. The token expires after 24 hours.
    FilterLogEventsRequest:
      type: object
      required:
        - logGroupName
      title: FilterLogEventsRequest
      properties:
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group to search.
        logStreamNames:
          $ref: '#/components/schemas/InputLogStreamNames'
          description: '<p>Filters the results to only logs from the log streams in this list.</p> <p>If you specify a value for both <code>logStreamNamePrefix</code> and <code>logStreamNames</code>, the action returns an <code>InvalidParameterException</code> error.</p>'
        logStreamNamePrefix:
          $ref: '#/components/schemas/LogStreamName'
          description: '<p>Filters the results to include only events from log streams that have names starting with this prefix.</p> <p>If you specify a value for both <code>logStreamNamePrefix</code> and <code>logStreamNames</code>, but the value for <code>logStreamNamePrefix</code> does not match any log stream names specified in <code>logStreamNames</code>, the action returns an <code>InvalidParameterException</code> error.</p>'
        startTime:
          $ref: '#/components/schemas/Timestamp'
          description: 'The start of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp before this time are not returned.'
        endTime:
          $ref: '#/components/schemas/Timestamp'
          description: 'The end of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not returned.'
        filterPattern:
          $ref: '#/components/schemas/FilterPattern'
          description: '<p>The filter pattern to use. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html">Filter and Pattern Syntax</a>.</p> <p>If not provided, all the events are matched.</p>'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: The token for the next set of events to return. (You received this token from a previous call.)
        limit:
          $ref: '#/components/schemas/EventsLimit'
          description: 'The maximum number of events to return. The default is 10,000 events.'
        interleaved:
          allOf:
            - $ref: '#/components/schemas/Interleaved'
            - deprecated: true
              description: '<p>If the value is true, the operation makes a best effort to provide responses that contain events from multiple log streams within the log group, interleaved in a single response. If the value is false, all the matched log events in the first log stream are searched first, then those in the next log stream, and so on. The default is false.</p> <p> <b>Important:</b> Starting on June 17, 2019, this parameter is ignored and the value is assumed to be true. The response from this operation always interleaves events from multiple log streams within a log group.</p>Starting on June 17, 2019, this parameter will be ignored and the value will be assumed to be true. The response from this operation will always interleave events from multiple log streams within a log group.'
    GetLogEventsResponse:
      type: object
      properties:
        events:
          $ref: '#/components/schemas/OutputLogEvents'
          description: The events.
        nextForwardToken:
          $ref: '#/components/schemas/NextToken'
          description: 'The token for the next set of items in the forward direction. The token expires after 24 hours. If you have reached the end of the stream, it returns the same token you passed in.'
        nextBackwardToken:
          $ref: '#/components/schemas/NextToken'
          description: 'The token for the next set of items in the backward direction. The token expires after 24 hours. This token is never null. If you have reached the end of the stream, it returns the same token you passed in.'
    GetLogEventsRequest:
      type: object
      required:
        - logGroupName
        - logStreamName
      title: GetLogEventsRequest
      properties:
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group.
        logStreamName:
          $ref: '#/components/schemas/LogStreamName'
          description: The name of the log stream.
        startTime:
          $ref: '#/components/schemas/Timestamp'
          description: 'The start of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp equal to this time or later than this time are included. Events with a timestamp earlier than this time are not included.'
        endTime:
          $ref: '#/components/schemas/Timestamp'
          description: 'The end of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp equal to or later than this time are not included.'
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: The token for the next set of items to return. (You received this token from a previous call.)
        limit:
          $ref: '#/components/schemas/EventsLimit'
          description: 'The maximum number of log events returned. If you don''t specify a value, the maximum is as many log events as can fit in a response size of 1 MB, up to 10,000 log events.'
        startFromHead:
          $ref: '#/components/schemas/StartFromHead'
          description: '<p>If the value is true, the earliest log events are returned first. If the value is false, the latest log events are returned first. The default value is false.</p> <p>If you are using a previous <code>nextForwardToken</code> value as the <code>nextToken</code> in this operation, you must specify <code>true</code> for <code>startFromHead</code>.</p>'
    GetLogGroupFieldsResponse:
      type: object
      properties:
        logGroupFields:
          $ref: '#/components/schemas/LogGroupFieldList'
          description: 'The array of fields found in the query. Each object in the array contains the name of the field, along with the percentage of time it appeared in the log events that were queried.'
    GetLogGroupFieldsRequest:
      type: object
      required:
        - logGroupName
      title: GetLogGroupFieldsRequest
      properties:
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group to search.
        time:
          $ref: '#/components/schemas/Timestamp'
          description: '<p>The time to set as the center of the query. If you specify <code>time</code>, the 15 minutes before this time are queries. If you omit <code>time</code> the 8 minutes before and 8 minutes after this time are searched.</p> <p>The <code>time</code> value is specified as epoch time, the number of seconds since January 1, 1970, 00:00:00 UTC.</p>'
    GetLogRecordResponse:
      type: object
      properties:
        logRecord:
          $ref: '#/components/schemas/LogRecord'
          description: 'The requested log event, as a JSON string.'
    GetLogRecordRequest:
      type: object
      required:
        - logRecordPointer
      title: GetLogRecordRequest
      properties:
        logRecordPointer:
          $ref: '#/components/schemas/LogRecordPointer'
          description: 'The pointer corresponding to the log event record you want to retrieve. You get this from the response of a <code>GetQueryResults</code> operation. In that response, the value of the <code>@ptr</code> field for a log event is the value to use as <code>logRecordPointer</code> to retrieve that complete log event record.'
    GetQueryResultsResponse:
      type: object
      properties:
        results:
          $ref: '#/components/schemas/QueryResults'
          description: <p>The log events that matched the query criteria during the most recent time it ran.</p> <p>The <code>results</code> value is an array of arrays. Each log event is one object in the top-level array. Each of these log event objects is an array of <code>field</code>/<code>value</code> pairs.</p>
        statistics:
          $ref: '#/components/schemas/QueryStatistics'
          description: 'Includes the number of log events scanned by the query, the number of log events that matched the query criteria, and the total number of bytes in the log events that were scanned. These values reflect the full raw results of the query.'
        status:
          $ref: '#/components/schemas/QueryStatus'
          description: '<p>The status of the most recent running of the query. Possible values are <code>Cancelled</code>, <code>Complete</code>, <code>Failed</code>, <code>Running</code>, <code>Scheduled</code>, <code>Timeout</code>, and <code>Unknown</code>.</p> <p>Queries time out after 15 minutes of execution. To avoid having your queries time out, reduce the time range being searched or partition your query into a number of queries.</p>'
    GetQueryResultsRequest:
      type: object
      required:
        - queryId
      title: GetQueryResultsRequest
      properties:
        queryId:
          $ref: '#/components/schemas/QueryId'
          description: The ID number of the query.
    ListTagsLogGroupResponse:
      type: object
      properties:
        tags:
          $ref: '#/components/schemas/Tags'
          description: The tags for the log group.
    ListTagsLogGroupRequest:
      type: object
      required:
        - logGroupName
      title: ListTagsLogGroupRequest
      properties:
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group.
    PutDestinationResponse:
      type: object
      properties:
        destination:
          $ref: '#/components/schemas/Destination'
          description: The destination.
    PutDestinationRequest:
      type: object
      required:
        - destinationName
        - targetArn
        - roleArn
      title: PutDestinationRequest
      properties:
        destinationName:
          $ref: '#/components/schemas/DestinationName'
          description: A name for the destination.
        targetArn:
          $ref: '#/components/schemas/TargetArn'
          description: The ARN of an Amazon Kinesis stream to which to deliver matching log events.
        roleArn:
          $ref: '#/components/schemas/RoleArn'
          description: The ARN of an IAM role that grants CloudWatch Logs permissions to call the Amazon Kinesis <code>PutRecord</code> operation on the destination stream.
    PutDestinationPolicyRequest:
      type: object
      required:
        - destinationName
        - accessPolicy
      title: PutDestinationPolicyRequest
      properties:
        destinationName:
          $ref: '#/components/schemas/DestinationName'
          description: A name for an existing destination.
        accessPolicy:
          $ref: '#/components/schemas/AccessPolicy'
          description: An IAM policy document that authorizes cross-account users to deliver their log events to the associated destination. This can be up to 5120 bytes.
    PutLogEventsResponse:
      type: object
      properties:
        nextSequenceToken:
          $ref: '#/components/schemas/SequenceToken'
          description: The next sequence token.
        rejectedLogEventsInfo:
          $ref: '#/components/schemas/RejectedLogEventsInfo'
          description: The rejected events.
    PutLogEventsRequest:
      type: object
      required:
        - logGroupName
        - logStreamName
        - logEvents
      title: PutLogEventsRequest
      properties:
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group.
        logStreamName:
          $ref: '#/components/schemas/LogStreamName'
          description: The name of the log stream.
        logEvents:
          $ref: '#/components/schemas/InputLogEvents'
          description: The log events.
        sequenceToken:
          $ref: '#/components/schemas/SequenceToken'
          description: 'The sequence token obtained from the response of the previous <code>PutLogEvents</code> call. An upload in a newly created log stream does not require a sequence token. You can also get the sequence token using <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeLogStreams.html">DescribeLogStreams</a>. If you call <code>PutLogEvents</code> twice within a narrow time period using the same value for <code>sequenceToken</code>, both calls might be successful or one might be rejected.'
    InvalidSequenceTokenException: {}
    DataAlreadyAcceptedException: {}
    UnrecognizedClientException: {}
    PutMetricFilterRequest:
      type: object
      required:
        - logGroupName
        - filterName
        - filterPattern
        - metricTransformations
      title: PutMetricFilterRequest
      properties:
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group.
        filterName:
          $ref: '#/components/schemas/FilterName'
          description: A name for the metric filter.
        filterPattern:
          $ref: '#/components/schemas/FilterPattern'
          description: A filter pattern for extracting metric data out of ingested log events.
        metricTransformations:
          $ref: '#/components/schemas/MetricTransformations'
          description: A collection of information that defines how metric data gets emitted.
    PutQueryDefinitionResponse:
      type: object
      properties:
        queryDefinitionId:
          $ref: '#/components/schemas/QueryId'
          description: The ID of the query definition.
    PutQueryDefinitionRequest:
      type: object
      required:
        - name
        - queryString
      title: PutQueryDefinitionRequest
      properties:
        name:
          $ref: '#/components/schemas/QueryDefinitionName'
          description: 'A name for the query definition. If you are saving a lot of query definitions, we recommend that you name them so that you can easily find the ones you want by using the first part of the name as a filter in the <code>queryDefinitionNamePrefix</code> parameter of <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeQueryDefinitions.html">DescribeQueryDefinitions</a>.'
        queryDefinitionId:
          $ref: '#/components/schemas/QueryId'
          description: '<p>If you are updating a query definition, use this parameter to specify the ID of the query definition that you want to update. You can use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeQueryDefinitions.html">DescribeQueryDefinitions</a> to retrieve the IDs of your saved query definitions.</p> <p>If you are creating a query definition, do not specify this parameter. CloudWatch generates a unique ID for the new query definition and include it in the response to this operation.</p>'
        logGroupNames:
          $ref: '#/components/schemas/LogGroupNames'
          description: '<p>Use this parameter to include specific log groups as part of your query definition.</p> <p>If you are updating a query definition and you omit this parameter, then the updated definition will contain no log groups.</p>'
        queryString:
          $ref: '#/components/schemas/QueryDefinitionString'
          description: 'The query string to use for this definition. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html">CloudWatch Logs Insights Query Syntax</a>.'
    PutResourcePolicyResponse:
      type: object
      properties:
        resourcePolicy:
          $ref: '#/components/schemas/ResourcePolicy'
          description: The new policy.
    PutResourcePolicyRequest:
      type: object
      title: PutResourcePolicyRequest
      properties:
        policyName:
          $ref: '#/components/schemas/PolicyName'
          description: Name of the new policy. This parameter is required.
        policyDocument:
          $ref: '#/components/schemas/PolicyDocument'
          description: '<p>Details of the new policy, including the identity of the principal that is enabled to put logs to this account. This is formatted as a JSON string. This parameter is required.</p> <p>The following example creates a resource policy enabling the Route 53 service to put DNS query logs in to the specified log group. Replace <code>"logArn"</code> with the ARN of your CloudWatch Logs resource, such as a log group or log stream.</p> <p>CloudWatch Logs also supports <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html#condition-keys-sourcearn">aws:SourceArn</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html#condition-keys-sourceaccount">aws:SourceAccount</a> condition context keys.</p> <p>In the example resource policy, you would replace the value of <code>SourceArn</code> with the resource making the call from Route 53 to CloudWatch Logs and replace the value of <code>SourceAccount</code> with the Amazon Web Services account ID making that call.</p> <p/> <p> <code>{ "Version": "2012-10-17", "Statement": [ { "Sid": "Route53LogsToCloudWatchLogs", "Effect": "Allow", "Principal": { "Service": [ "route53.amazonaws.com" ] }, "Action": "logs:PutLogEvents", "Resource": "logArn", "Condition": { "ArnLike": { "aws:SourceArn": "myRoute53ResourceArn" }, "StringEquals": { "aws:SourceAccount": "myAwsAccountId" } } } ] }</code> </p>'
    PutRetentionPolicyRequest:
      type: object
      required:
        - logGroupName
        - retentionInDays
      title: PutRetentionPolicyRequest
      properties:
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group.
        retentionInDays:
          $ref: '#/components/schemas/Days'
    PutSubscriptionFilterRequest:
      type: object
      required:
        - logGroupName
        - filterName
        - filterPattern
        - destinationArn
      title: PutSubscriptionFilterRequest
      properties:
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group.
        filterName:
          $ref: '#/components/schemas/FilterName'
          description: 'A name for the subscription filter. If you are updating an existing filter, you must specify the correct name in <code>filterName</code>. To find the name of the filter currently associated with a log group, use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeSubscriptionFilters.html">DescribeSubscriptionFilters</a>.'
        filterPattern:
          $ref: '#/components/schemas/FilterPattern'
          description: A filter pattern for subscribing to a filtered stream of log events.
        destinationArn:
          $ref: '#/components/schemas/DestinationArn'
          description: '<p>The ARN of the destination to deliver matching log events to. Currently, the supported destinations are:</p> <ul> <li> <p>An Amazon Kinesis stream belonging to the same account as the subscription filter, for same-account delivery.</p> </li> <li> <p>A logical destination (specified using an ARN) belonging to a different account, for cross-account delivery.</p> <p>If you are setting up a cross-account subscription, the destination must have an IAM policy associated with it that allows the sender to send logs to the destination. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDestinationPolicy.html">PutDestinationPolicy</a>.</p> </li> <li> <p>An Amazon Kinesis Firehose delivery stream belonging to the same account as the subscription filter, for same-account delivery.</p> </li> <li> <p>A Lambda function belonging to the same account as the subscription filter, for same-account delivery.</p> </li> </ul>'
        roleArn:
          $ref: '#/components/schemas/RoleArn'
          description: The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
        distribution:
          $ref: '#/components/schemas/Distribution'
          description: 'The method used to distribute log data to the destination. By default, log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis stream. '
    StartQueryResponse:
      type: object
      properties:
        queryId:
          $ref: '#/components/schemas/QueryId'
          description: 'The unique ID of the query. '
    StartQueryRequest:
      type: object
      required:
        - startTime
        - endTime
        - queryString
      title: StartQueryRequest
      properties:
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: '<p>The log group on which to perform the query.</p> <p>A <code>StartQuery</code> operation must include a <code>logGroupNames</code> or a <code>logGroupName</code> parameter, but not both.</p>'
        logGroupNames:
          $ref: '#/components/schemas/LogGroupNames'
          description: '<p>The list of log groups to be queried. You can include up to 20 log groups.</p> <p>A <code>StartQuery</code> operation must include a <code>logGroupNames</code> or a <code>logGroupName</code> parameter, but not both.</p>'
        startTime:
          $ref: '#/components/schemas/Timestamp'
          description: 'The beginning of the time range to query. The range is inclusive, so the specified start time is included in the query. Specified as epoch time, the number of seconds since January 1, 1970, 00:00:00 UTC.'
        endTime:
          $ref: '#/components/schemas/Timestamp'
          description: 'The end of the time range to query. The range is inclusive, so the specified end time is included in the query. Specified as epoch time, the number of seconds since January 1, 1970, 00:00:00 UTC.'
        queryString:
          $ref: '#/components/schemas/QueryString'
          description: 'The query string to use. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html">CloudWatch Logs Insights Query Syntax</a>.'
        limit:
          $ref: '#/components/schemas/EventsLimit'
          description: 'The maximum number of log events to return in the query. If the query string uses the <code>fields</code> command, only the specified fields and their values are returned. The default is 1000.'
    MalformedQueryException: {}
    StopQueryResponse:
      type: object
      properties:
        success:
          $ref: '#/components/schemas/Success'
          description: This is true if the query was stopped by the <code>StopQuery</code> operation.
    StopQueryRequest:
      type: object
      required:
        - queryId
      title: StopQueryRequest
      properties:
        queryId:
          $ref: '#/components/schemas/QueryId'
          description: 'The ID number of the query to stop. To find this ID number, use <code>DescribeQueries</code>.'
    TagLogGroupRequest:
      type: object
      required:
        - logGroupName
        - tags
      title: TagLogGroupRequest
      properties:
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group.
        tags:
          $ref: '#/components/schemas/Tags'
          description: The key-value pairs to use for the tags.
    TestMetricFilterResponse:
      type: object
      properties:
        matches:
          $ref: '#/components/schemas/MetricFilterMatches'
          description: The matched events.
    TestMetricFilterRequest:
      type: object
      required:
        - filterPattern
        - logEventMessages
      title: TestMetricFilterRequest
      properties:
        filterPattern:
          $ref: '#/components/schemas/FilterPattern'
        logEventMessages:
          $ref: '#/components/schemas/TestEventMessages'
          description: The log event messages to test.
    UntagLogGroupRequest:
      type: object
      required:
        - logGroupName
        - tags
      title: UntagLogGroupRequest
      properties:
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group.
        tags:
          $ref: '#/components/schemas/TagList'
          description: The tag keys. The corresponding tags are removed from the log group.
    AccessPolicy:
      type: string
      minLength: 1
    Arn:
      type: string
    LogGroupName:
      type: string
      pattern: '[\.\-_/#A-Za-z0-9]+'
      minLength: 1
      maxLength: 512
    KmsKeyId:
      type: string
      maxLength: 256
    ExportTaskId:
      type: string
      minLength: 1
      maxLength: 512
    ExportTaskName:
      type: string
      minLength: 1
      maxLength: 512
    LogStreamName:
      type: string
      pattern: '[^:*]*'
      minLength: 1
      maxLength: 512
    Timestamp:
      type: integer
      minimum: 0
    ExportDestinationBucket:
      type: string
      minLength: 1
      maxLength: 512
    ExportDestinationPrefix:
      type: string
    Tags:
      type: object
      minProperties: 1
      maxProperties: 50
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    Days:
      type: integer
      description: '<p>The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, and 3653.</p> <p>To set a log group to never have log events expire, use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeleteRetentionPolicy.html">DeleteRetentionPolicy</a>. </p>'
    DefaultValue:
      type: number
      format: double
    DestinationName:
      type: string
      pattern: '[^:*]*'
      minLength: 1
      maxLength: 512
    FilterName:
      type: string
      pattern: '[^:*]*'
      minLength: 1
      maxLength: 512
    QueryId:
      type: string
      minLength: 0
      maxLength: 256
    Success:
      type: boolean
    PolicyName:
      type: string
    Descending:
      type: boolean
    NextToken:
      type: string
      description: The token for the next set of items to return. The token expires after 24 hours.
      minLength: 1
    DescribeLimit:
      type: integer
      minimum: 1
      maximum: 50
    Destinations:
      type: array
      items:
        $ref: '#/components/schemas/Destination'
    ExportTaskStatusCode:
      type: string
      enum:
        - CANCELLED
        - COMPLETED
        - FAILED
        - PENDING
        - PENDING_CANCEL
        - RUNNING
    ExportTasks:
      type: array
      items:
        $ref: '#/components/schemas/ExportTask'
    LogGroups:
      type: array
      items:
        $ref: '#/components/schemas/LogGroup'
    OrderBy:
      type: string
      enum:
        - LogStreamName
        - LastEventTime
    LogStreams:
      type: array
      items:
        $ref: '#/components/schemas/LogStream'
    MetricName:
      type: string
      pattern: '[^:*$]*'
      description: 'The name of the CloudWatch metric to which the monitored log information should be published. For example, you might publish to a metric named ErrorCount.'
      maxLength: 255
    MetricNamespace:
      type: string
      pattern: '[^:*$]*'
      maxLength: 255
    MetricFilters:
      type: array
      items:
        $ref: '#/components/schemas/MetricFilter'
    DescribeQueriesMaxResults:
      type: integer
      minimum: 1
      maximum: 1000
    QueryStatus:
      type: string
      enum:
        - Scheduled
        - Running
        - Complete
        - Failed
        - Cancelled
        - Timeout
        - Unknown
    QueryInfoList:
      type: array
      items:
        $ref: '#/components/schemas/QueryInfo'
    QueryDefinitionName:
      type: string
      pattern: '^([^:*\/]+\/?)*[^:*\/]+$'
      minLength: 1
      maxLength: 255
    QueryListMaxResults:
      type: integer
      minimum: 1
      maximum: 1000
    QueryDefinitionList:
      type: array
      items:
        $ref: '#/components/schemas/QueryDefinition'
    ResourcePolicies:
      type: array
      items:
        $ref: '#/components/schemas/ResourcePolicy'
    SubscriptionFilters:
      type: array
      items:
        $ref: '#/components/schemas/SubscriptionFilter'
    TargetArn:
      type: string
      minLength: 1
    RoleArn:
      type: string
      minLength: 1
    Destination:
      type: object
      properties:
        destinationName:
          $ref: '#/components/schemas/DestinationName'
          description: The name of the destination.
        targetArn:
          $ref: '#/components/schemas/TargetArn'
          description: 'The Amazon Resource Name (ARN) of the physical target where the log events are delivered (for example, a Kinesis stream).'
        roleArn:
          $ref: '#/components/schemas/RoleArn'
          description: 'A role for impersonation, used when delivering log events to the target.'
        accessPolicy:
          $ref: '#/components/schemas/AccessPolicy'
          description: An IAM policy document that governs which Amazon Web Services accounts can create subscription filters against this destination.
        arn:
          $ref: '#/components/schemas/Arn'
          description: The ARN of this destination.
        creationTime:
          $ref: '#/components/schemas/Timestamp'
          description: 'The creation time of the destination, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.'
      description: Represents a cross-account destination that receives subscription log events.
    DestinationArn:
      type: string
      minLength: 1
    DimensionsValue:
      type: string
      maxLength: 255
    Dimensions:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/DimensionsValue'
    DimensionsKey:
      type: string
      maxLength: 255
    Distribution:
      type: string
      enum:
        - Random
        - ByLogStream
      description: 'The method used to distribute log data to the destination, which can be either random or grouped by log stream.'
    EventId:
      type: string
    EventMessage:
      type: string
      minLength: 1
    EventNumber:
      type: integer
    EventsLimit:
      type: integer
      minimum: 1
      maximum: 10000
    ExportTaskStatus:
      type: object
      properties:
        code:
          $ref: '#/components/schemas/ExportTaskStatusCode'
          description: The status code of the export task.
        message:
          $ref: '#/components/schemas/ExportTaskStatusMessage'
          description: The status message related to the status code.
      description: Represents the status of an export task.
    ExportTaskExecutionInfo:
      type: object
      properties:
        creationTime:
          $ref: '#/components/schemas/Timestamp'
          description: 'The creation time of the export task, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.'
        completionTime:
          $ref: '#/components/schemas/Timestamp'
          description: 'The completion time of the export task, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.'
      description: Represents the status of an export task.
    ExportTask:
      type: object
      properties:
        taskId:
          $ref: '#/components/schemas/ExportTaskId'
          description: The ID of the export task.
        taskName:
          $ref: '#/components/schemas/ExportTaskName'
          description: The name of the export task.
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group from which logs data was exported.
        from:
          $ref: '#/components/schemas/Timestamp'
          description: 'The start time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp before this time are not exported.'
        to:
          $ref: '#/components/schemas/Timestamp'
          description: 'The end time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not exported.'
        destination:
          $ref: '#/components/schemas/ExportDestinationBucket'
          description: The name of the S3 bucket to which the log data was exported.
        destinationPrefix:
          $ref: '#/components/schemas/ExportDestinationPrefix'
          description: The prefix that was used as the start of Amazon S3 key for every object exported.
        status:
          $ref: '#/components/schemas/ExportTaskStatus'
          description: The status of the export task.
        executionInfo:
          $ref: '#/components/schemas/ExportTaskExecutionInfo'
          description: Execution information about the export task.
      description: Represents an export task.
    ExportTaskStatusMessage:
      type: string
    Value:
      type: string
    ExtractedValues:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Value'
    Field:
      type: string
    FilterCount:
      type: integer
    InputLogStreamNames:
      type: array
      items:
        $ref: '#/components/schemas/LogStreamName'
      minItems: 1
      maxItems: 100
    FilterPattern:
      type: string
      description: 'A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.'
      minLength: 0
      maxLength: 1024
    Interleaved:
      type: boolean
    FilteredLogEvents:
      type: array
      items:
        $ref: '#/components/schemas/FilteredLogEvent'
    SearchedLogStreams:
      type: array
      items:
        $ref: '#/components/schemas/SearchedLogStream'
    FilteredLogEvent:
      type: object
      properties:
        logStreamName:
          $ref: '#/components/schemas/LogStreamName'
          description: The name of the log stream to which this event belongs.
        timestamp:
          $ref: '#/components/schemas/Timestamp'
          description: 'The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.'
        message:
          $ref: '#/components/schemas/EventMessage'
          description: The data contained in the log event.
        ingestionTime:
          $ref: '#/components/schemas/Timestamp'
          description: 'The time the event was ingested, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.'
        eventId:
          $ref: '#/components/schemas/EventId'
          description: The ID of the event.
      description: Represents a matched event.
    StartFromHead:
      type: boolean
    OutputLogEvents:
      type: array
      items:
        $ref: '#/components/schemas/OutputLogEvent'
    LogGroupFieldList:
      type: array
      items:
        $ref: '#/components/schemas/LogGroupField'
    LogRecordPointer:
      type: string
    LogRecord:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Value'
    QueryResults:
      type: array
      items:
        $ref: '#/components/schemas/ResultRows'
    QueryStatistics:
      type: object
      properties:
        recordsMatched:
          $ref: '#/components/schemas/StatsValue'
          description: The number of log events that matched the query string.
        recordsScanned:
          $ref: '#/components/schemas/StatsValue'
          description: The total number of log events scanned during the query.
        bytesScanned:
          $ref: '#/components/schemas/StatsValue'
          description: The total number of bytes in the log events scanned during the query.
      description: 'Contains the number of log events scanned by the query, the number of log events that matched the query criteria, and the total number of bytes in the log events that were scanned.'
    InputLogEvent:
      type: object
      required:
        - timestamp
        - message
      properties:
        timestamp:
          $ref: '#/components/schemas/Timestamp'
          description: 'The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.'
        message:
          $ref: '#/components/schemas/EventMessage'
          description: The raw event message.
      description: 'Represents a log event, which is a record of activity that was recorded by the application or resource being monitored.'
    InputLogEvents:
      type: array
      items:
        $ref: '#/components/schemas/InputLogEvent'
      minItems: 1
      maxItems: 10000
    LogEventIndex:
      type: integer
    StoredBytes:
      type: integer
      minimum: 0
    LogGroup:
      type: object
      properties:
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group.
        creationTime:
          $ref: '#/components/schemas/Timestamp'
          description: 'The creation time of the log group, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.'
        retentionInDays:
          $ref: '#/components/schemas/Days'
        metricFilterCount:
          $ref: '#/components/schemas/FilterCount'
          description: The number of metric filters.
        arn:
          $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the log group.
        storedBytes:
          $ref: '#/components/schemas/StoredBytes'
          description: The number of bytes stored.
        kmsKeyId:
          $ref: '#/components/schemas/KmsKeyId'
          description: The Amazon Resource Name (ARN) of the CMK to use when encrypting log data.
      description: Represents a log group.
    Percentage:
      type: integer
      minimum: 0
      maximum: 100
    LogGroupField:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Field'
          description: The name of a log field.
        percent:
          $ref: '#/components/schemas/Percentage'
          description: The percentage of log events queried that contained the field.
      description: 'The fields contained in log events found by a <code>GetLogGroupFields</code> operation, along with the percentage of queried log events in which each field appears.'
    LogGroupNames:
      type: array
      items:
        $ref: '#/components/schemas/LogGroupName'
    SequenceToken:
      type: string
      minLength: 1
    LogStream:
      type: object
      properties:
        logStreamName:
          $ref: '#/components/schemas/LogStreamName'
          description: The name of the log stream.
        creationTime:
          $ref: '#/components/schemas/Timestamp'
          description: 'The creation time of the stream, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.'
        firstEventTimestamp:
          $ref: '#/components/schemas/Timestamp'
          description: 'The time of the first event, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.'
        lastEventTimestamp:
          $ref: '#/components/schemas/Timestamp'
          description: 'The time of the most recent log event in the log stream in CloudWatch Logs. This number is expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. The <code>lastEventTime</code> value updates on an eventual consistency basis. It typically updates in less than an hour from ingestion, but in rare situations might take longer.'
        lastIngestionTime:
          $ref: '#/components/schemas/Timestamp'
          description: 'The ingestion time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.'
        uploadSequenceToken:
          $ref: '#/components/schemas/SequenceToken'
          description: The sequence token.
        arn:
          $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the log stream.
        storedBytes:
          allOf:
            - $ref: '#/components/schemas/StoredBytes'
            - deprecated: true
              description: '<p>The number of bytes stored.</p> <p> <b>Important:</b> On June 17, 2019, this parameter was deprecated for log streams, and is always reported as zero. This change applies only to log streams. The <code>storedBytes</code> parameter for log groups is not affected.</p>Starting on June 17, 2019, this parameter will be deprecated for log streams, and will be reported as zero. This change applies only to log streams. The storedBytes parameter for log groups is not affected.'
      description: 'Represents a log stream, which is a sequence of log events from a single emitter of logs.'
    LogStreamSearchedCompletely:
      type: boolean
    MetricTransformations:
      type: array
      items:
        $ref: '#/components/schemas/MetricTransformation'
      minItems: 1
      maxItems: 1
    MetricFilter:
      type: object
      properties:
        filterName:
          $ref: '#/components/schemas/FilterName'
          description: The name of the metric filter.
        filterPattern:
          $ref: '#/components/schemas/FilterPattern'
        metricTransformations:
          $ref: '#/components/schemas/MetricTransformations'
          description: The metric transformations.
        creationTime:
          $ref: '#/components/schemas/Timestamp'
          description: 'The creation time of the metric filter, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.'
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group.
      description: Metric filters express how CloudWatch Logs would extract metric observations from ingested log events and transform them into metric data in a CloudWatch metric.
    MetricFilterMatchRecord:
      type: object
      properties:
        eventNumber:
          $ref: '#/components/schemas/EventNumber'
          description: The event number.
        eventMessage:
          $ref: '#/components/schemas/EventMessage'
          description: The raw event data.
        extractedValues:
          $ref: '#/components/schemas/ExtractedValues'
          description: The values extracted from the event data by the filter.
      description: Represents a matched event.
    MetricFilterMatches:
      type: array
      items:
        $ref: '#/components/schemas/MetricFilterMatchRecord'
    MetricValue:
      type: string
      description: 'The value to publish to the CloudWatch metric. For example, if you''re counting the occurrences of a term like "Error", the value is "1" for each occurrence. If you''re counting the bytes transferred, the value is the value in the log event.'
      maxLength: 100
    StandardUnit:
      type: string
      enum:
        - Seconds
        - Microseconds
        - Milliseconds
        - Bytes
        - Kilobytes
        - Megabytes
        - Gigabytes
        - Terabytes
        - Bits
        - Kilobits
        - Megabits
        - Gigabits
        - Terabits
        - Percent
        - Count
        - Bytes/Second
        - Kilobytes/Second
        - Megabytes/Second
        - Gigabytes/Second
        - Terabytes/Second
        - Bits/Second
        - Kilobits/Second
        - Megabits/Second
        - Gigabits/Second
        - Terabits/Second
        - Count/Second
        - None
    MetricTransformation:
      type: object
      required:
        - metricName
        - metricNamespace
        - metricValue
      properties:
        metricName:
          $ref: '#/components/schemas/MetricName'
          description: The name of the CloudWatch metric.
        metricNamespace:
          $ref: '#/components/schemas/MetricNamespace'
          description: 'A custom namespace to contain your metric in CloudWatch. Use namespaces to group together metrics that are similar. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace">Namespaces</a>.'
        metricValue:
          $ref: '#/components/schemas/MetricValue'
          description: The value to publish to the CloudWatch metric when a filter pattern matches a log event.
        defaultValue:
          $ref: '#/components/schemas/DefaultValue'
          description: (Optional) The value to emit when a filter pattern does not match a log event. This value can be null.
        dimensions:
          $ref: '#/components/schemas/Dimensions'
          description: '<p>The fields to use as dimensions for the metric. One metric filter can include as many as three dimensions.</p> <important> <p>Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not specify high-cardinality fields such as <code>IPAddress</code> or <code>requestID</code> as dimensions. Each different value found for a dimension is treated as a separate metric and accrues charges as a separate custom metric. </p> <p>To help prevent accidental high charges, Amazon disables a metric filter if it generates 1000 different name/value pairs for the dimensions that you have specified within a certain amount of time.</p> <p>You can also set up a billing alarm to alert you if your charges are higher than expected. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html"> Creating a Billing Alarm to Monitor Your Estimated Amazon Web Services Charges</a>. </p> </important>'
        unit:
          $ref: '#/components/schemas/StandardUnit'
          description: 'The unit to assign to the metric. If you omit this, the unit is set as <code>None</code>.'
      description: Indicates how to transform ingested log events to metric data in a CloudWatch metric.
    OutputLogEvent:
      type: object
      properties:
        timestamp:
          $ref: '#/components/schemas/Timestamp'
          description: 'The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.'
        message:
          $ref: '#/components/schemas/EventMessage'
          description: The data contained in the log event.
        ingestionTime:
          $ref: '#/components/schemas/Timestamp'
          description: 'The time the event was ingested, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.'
      description: Represents a log event.
    PolicyDocument:
      type: string
      minLength: 1
      maxLength: 5120
    RejectedLogEventsInfo:
      type: object
      properties:
        tooNewLogEventStartIndex:
          $ref: '#/components/schemas/LogEventIndex'
          description: The log events that are too new.
        tooOldLogEventEndIndex:
          $ref: '#/components/schemas/LogEventIndex'
          description: The log events that are too old.
        expiredLogEventEndIndex:
          $ref: '#/components/schemas/LogEventIndex'
          description: The expired log events.
      description: Represents the rejected events.
    QueryDefinitionString:
      type: string
      minLength: 1
      maxLength: 10000
    ResourcePolicy:
      type: object
      properties:
        policyName:
          $ref: '#/components/schemas/PolicyName'
          description: The name of the resource policy.
        policyDocument:
          $ref: '#/components/schemas/PolicyDocument'
          description: The details of the policy.
        lastUpdatedTime:
          $ref: '#/components/schemas/Timestamp'
          description: 'Timestamp showing when this policy was last updated, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.'
      description: A policy enabling one or more entities to put logs to a log group in this account.
    QueryDefinition:
      type: object
      properties:
        queryDefinitionId:
          $ref: '#/components/schemas/QueryId'
          description: The unique ID of the query definition.
        name:
          $ref: '#/components/schemas/QueryDefinitionName'
          description: The name of the query definition.
        queryString:
          $ref: '#/components/schemas/QueryDefinitionString'
          description: 'The query string to use for this definition. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html">CloudWatch Logs Insights Query Syntax</a>.'
        lastModified:
          $ref: '#/components/schemas/Timestamp'
          description: The date that the query definition was most recently modified.
        logGroupNames:
          $ref: '#/components/schemas/LogGroupNames'
          description: 'If this query definition contains a list of log groups that it is limited to, that list appears here.'
      description: This structure contains details about a saved CloudWatch Logs Insights query definition.
    QueryString:
      type: string
      minLength: 0
      maxLength: 10000
    QueryInfo:
      type: object
      properties:
        queryId:
          $ref: '#/components/schemas/QueryId'
          description: The unique ID number of this query.
        queryString:
          $ref: '#/components/schemas/QueryString'
          description: The query string used in this query.
        status:
          $ref: '#/components/schemas/QueryStatus'
          description: 'The status of this query. Possible values are <code>Cancelled</code>, <code>Complete</code>, <code>Failed</code>, <code>Running</code>, <code>Scheduled</code>, and <code>Unknown</code>.'
        createTime:
          $ref: '#/components/schemas/Timestamp'
          description: The date and time that this query was created.
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group scanned by this query.
      description: 'Information about one CloudWatch Logs Insights query that matches the request in a <code>DescribeQueries</code> operation. '
    ResultRows:
      type: array
      items:
        $ref: '#/components/schemas/ResultField'
    StatsValue:
      type: number
      format: double
    ResultField:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/Field'
          description: The log event field.
        value:
          $ref: '#/components/schemas/Value'
          description: The value of this field.
      description: '<p>Contains one field from one log event returned by a CloudWatch Logs Insights query, along with the value of that field.</p> <p>For more information about the fields that are generated by CloudWatch logs, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_AnalyzeLogData-discoverable-fields.html">Supported Logs and Discovered Fields</a>.</p>'
    SearchedLogStream:
      type: object
      properties:
        logStreamName:
          $ref: '#/components/schemas/LogStreamName'
          description: The name of the log stream.
        searchedCompletely:
          $ref: '#/components/schemas/LogStreamSearchedCompletely'
          description: Indicates whether all the events in this log stream were searched.
      description: Represents the search status of a log stream.
    SubscriptionFilter:
      type: object
      properties:
        filterName:
          $ref: '#/components/schemas/FilterName'
          description: The name of the subscription filter.
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group.
        filterPattern:
          $ref: '#/components/schemas/FilterPattern'
        destinationArn:
          $ref: '#/components/schemas/DestinationArn'
          description: The Amazon Resource Name (ARN) of the destination.
        roleArn:
          $ref: '#/components/schemas/RoleArn'
          description: <p/>
        distribution:
          $ref: '#/components/schemas/Distribution'
        creationTime:
          $ref: '#/components/schemas/Timestamp'
          description: 'The creation time of the subscription filter, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.'
      description: Represents a subscription filter.
    TagKey:
      type: string
      pattern: '^([\p{L}\p{Z}\p{N}_.:/=+\-@]+)$'
      minLength: 1
      maxLength: 128
    TagList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
      minItems: 1
    TagValue:
      type: string
      pattern: '^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$'
      maxLength: 256
    TestEventMessages:
      type: array
      items:
        $ref: '#/components/schemas/EventMessage'
      minItems: 1
      maxItems: 50
    Token:
      type: string
security:
  - hmac: []

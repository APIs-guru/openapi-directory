openapi: 3.0.0
info:
  version: '2020-10-01'
  x-release: v4
  title: Amazon EMR Containers
  description: '<p>Amazon EMR on EKS provides a deployment option for Amazon EMR that allows you to run open-source big data frameworks on Amazon Elastic Kubernetes Service (Amazon EKS). With this deployment option, you can focus on running analytics workloads while Amazon EMR on EKS builds, configures, and manages containers for open-source applications. For more information about Amazon EMR on EKS concepts and tasks, see <a href="https://docs.aws.amazon.com/emr/latest/EMR-on-EKS-DevelopmentGuide/emr-eks.html">What is Amazon EMR on EKS</a>.</p> <p> <i>Amazon EMR containers</i> is the API name for Amazon EMR on EKS. The <code>emr-containers</code> prefix is used in the following scenarios: </p> <ul> <li> <p>It is the prefix in the CLI commands for Amazon EMR on EKS. For example, <code>aws emr-containers start-job-run</code>.</p> </li> <li> <p>It is the prefix before IAM policy actions for Amazon EMR on EKS. For example, <code>"Action": [ "emr-containers:StartJobRun"]</code>. For more information, see <a href="https://docs.aws.amazon.com/emr/latest/EMR-on-EKS-DevelopmentGuide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-actions">Policy actions for Amazon EMR on EKS</a>.</p> </li> <li> <p>It is the prefix used in Amazon EMR on EKS service endpoints. For example, <code>emr-containers.us-east-2.amazonaws.com</code>. For more information, see <a href="https://docs.aws.amazon.com/emr/latest/EMR-on-EKS-DevelopmentGuide/service-quotas.html#service-endpoints">Amazon EMR on EKS Service Endpoints</a>.</p> </li> </ul>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: emr-containers
  x-aws-signingName: emr-containers
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/emr-containers-2020-10-01.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/emr-containers/'
servers:
  - url: 'http://emr-containers.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon EMR Containers multi-region endpoint
  - url: 'https://emr-containers.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon EMR Containers multi-region endpoint
  - url: 'http://emr-containers.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon EMR Containers endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://emr-containers.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon EMR Containers endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  '/virtualclusters/{virtualClusterId}/jobruns/{jobRunId}':
    delete:
      operationId: CancelJobRun
      description: 'Cancels a job run. A job run is a unit of work, such as a Spark jar, PySpark script, or SparkSQL query, that you submit to Amazon EMR on EKS.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelJobRunResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: jobRunId
          in: path
          required: true
          description: The ID of the job run to cancel.
          schema:
            type: string
            pattern: '[0-9a-z]+'
            minLength: 1
            maxLength: 64
        - name: virtualClusterId
          in: path
          required: true
          description: The ID of the virtual cluster for which the job run will be canceled.
          schema:
            type: string
            pattern: '[0-9a-z]+'
            minLength: 1
            maxLength: 64
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeJobRun
      description: 'Displays detailed information about a job run. A job run is a unit of work, such as a Spark jar, PySpark script, or SparkSQL query, that you submit to Amazon EMR on EKS.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeJobRunResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: jobRunId
          in: path
          required: true
          description: 'The ID of the job run request. '
          schema:
            type: string
            pattern: '[0-9a-z]+'
            minLength: 1
            maxLength: 64
        - name: virtualClusterId
          in: path
          required: true
          description: The ID of the virtual cluster for which the job run is submitted.
          schema:
            type: string
            pattern: '[0-9a-z]+'
            minLength: 1
            maxLength: 64
  '/virtualclusters/{virtualClusterId}/endpoints':
    post:
      operationId: CreateManagedEndpoint
      description: Creates a managed endpoint. A managed endpoint is a gateway that connects EMR Studio to Amazon EMR on EKS so that EMR Studio can communicate with your virtual cluster.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateManagedEndpointResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: virtualClusterId
          in: path
          required: true
          description: The ID of the virtual cluster for which a managed endpoint is created.
          schema:
            type: string
            pattern: '[0-9a-z]+'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - type
                - releaseLabel
                - executionRoleArn
                - certificateArn
                - clientToken
              properties:
                name:
                  description: The name of the managed endpoint.
                  type: string
                  pattern: '[\.\-_/#A-Za-z0-9]+'
                  minLength: 1
                  maxLength: 64
                type:
                  description: The type of the managed endpoint.
                  type: string
                  pattern: .*\S.*
                  minLength: 1
                  maxLength: 64
                releaseLabel:
                  description: The Amazon EMR release version.
                  type: string
                  pattern: '[\.\-_/A-Za-z0-9]+'
                  minLength: 1
                  maxLength: 64
                executionRoleArn:
                  description: The ARN of the execution role.
                  type: string
                  pattern: '^arn:(aws[a-zA-Z0-9-]*):iam::(\d{12})?:(role((\u002F)|(\u002F[\u0021-\u007F]+\u002F))[\w+=,.@-]+)$'
                  minLength: 20
                  maxLength: 2048
                certificateArn:
                  description: The certificate ARN of the managed endpoint.
                  type: string
                  pattern: '^arn:(aws[a-zA-Z0-9-]*):acm:.+:(\d{12}):certificate/.+$'
                  minLength: 44
                  maxLength: 2048
                configurationOverrides:
                  description: A configuration specification to be used to override existing configurations.
                  type: object
                  properties:
                    applicationConfiguration:
                      $ref: '#/components/schemas/ConfigurationList'
                      description: 'The configurations for the application running by the job run. '
                    monitoringConfiguration:
                      $ref: '#/components/schemas/MonitoringConfiguration'
                      description: The configurations for monitoring.
                clientToken:
                  description: The client idempotency token for this create call.
                  type: string
                  pattern: .*\S.*
                  minLength: 1
                  maxLength: 64
                tags:
                  description: 'The tags of the managed endpoint. '
                  type: object
                  minProperties: 0
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/StringEmpty256'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListManagedEndpoints
      description: Lists managed endpoints based on a set of parameters. A managed endpoint is a gateway that connects EMR Studio to Amazon EMR on EKS so that EMR Studio can communicate with your virtual cluster.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListManagedEndpointsResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: virtualClusterId
          in: path
          required: true
          description: The ID of the virtual cluster.
          schema:
            type: string
            pattern: '[0-9a-z]+'
            minLength: 1
            maxLength: 64
        - name: createdBefore
          in: query
          required: false
          description: The date and time before which the endpoints are created.
          schema:
            type: string
            format: date-time
        - name: createdAfter
          in: query
          required: false
          description: ' The date and time after which the endpoints are created.'
          schema:
            type: string
            format: date-time
        - name: types
          in: query
          required: false
          description: The types of the managed endpoints.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/EndpointType'
            maxItems: 10
        - name: states
          in: query
          required: false
          description: The states of the managed endpoints.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/EndpointState'
            maxItems: 10
        - name: maxResults
          in: query
          required: false
          description: The maximum number of managed endpoints that can be listed.
          schema:
            type: integer
        - name: nextToken
          in: query
          required: false
          description: ' The token for the next set of managed endpoints to return. '
          schema:
            type: string
            pattern: .*\S.*
            minLength: 1
            maxLength: 1024
  /virtualclusters:
    post:
      operationId: CreateVirtualCluster
      description: 'Creates a virtual cluster. Virtual cluster is a managed entity on Amazon EMR on EKS. You can create, describe, list and delete virtual clusters. They do not consume any additional resource in your system. A single virtual cluster maps to a single Kubernetes namespace. Given this relationship, you can model virtual clusters the same way you model Kubernetes namespaces to meet your requirements.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVirtualClusterResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - containerProvider
                - clientToken
              properties:
                name:
                  description: The specified name of the virtual cluster.
                  type: string
                  pattern: '[\.\-_/#A-Za-z0-9]+'
                  minLength: 1
                  maxLength: 64
                containerProvider:
                  description: The information about the container provider.
                  type: object
                  properties:
                    type:
                      $ref: '#/components/schemas/ContainerProviderType'
                      description: The type of the container provider. EKS is the only supported type as of now.
                    id:
                      $ref: '#/components/schemas/ClusterId'
                      description: The ID of the container cluster.
                    info:
                      $ref: '#/components/schemas/ContainerInfo'
                      description: The information about the container cluster.
                clientToken:
                  description: The client token of the virtual cluster.
                  type: string
                  pattern: .*\S.*
                  minLength: 1
                  maxLength: 64
                tags:
                  description: The tags assigned to the virtual cluster.
                  type: object
                  minProperties: 0
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/StringEmpty256'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListVirtualClusters
      description: 'Lists information about the specified virtual cluster. Virtual cluster is a managed entity on Amazon EMR on EKS. You can create, describe, list and delete virtual clusters. They do not consume any additional resource in your system. A single virtual cluster maps to a single Kubernetes namespace. Given this relationship, you can model virtual clusters the same way you model Kubernetes namespaces to meet your requirements.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVirtualClustersResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: containerProviderId
          in: query
          required: false
          description: The container provider ID of the virtual cluster.
          schema:
            type: string
            pattern: .*\S.*
            minLength: 1
            maxLength: 1024
        - name: containerProviderType
          in: query
          required: false
          description: The container provider type of the virtual cluster. EKS is the only supported type as of now.
          schema:
            type: string
            enum:
              - EKS
        - name: createdAfter
          in: query
          required: false
          description: The date and time after which the virtual clusters are created.
          schema:
            type: string
            format: date-time
        - name: createdBefore
          in: query
          required: false
          description: The date and time before which the virtual clusters are created.
          schema:
            type: string
            format: date-time
        - name: states
          in: query
          required: false
          description: The states of the requested virtual clusters.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/VirtualClusterState'
            maxItems: 10
        - name: maxResults
          in: query
          required: false
          description: The maximum number of virtual clusters that can be listed.
          schema:
            type: integer
        - name: nextToken
          in: query
          required: false
          description: 'The token for the next set of virtual clusters to return. '
          schema:
            type: string
            pattern: .*\S.*
            minLength: 1
            maxLength: 1024
  '/virtualclusters/{virtualClusterId}/endpoints/{endpointId}':
    delete:
      operationId: DeleteManagedEndpoint
      description: Deletes a managed endpoint. A managed endpoint is a gateway that connects EMR Studio to Amazon EMR on EKS so that EMR Studio can communicate with your virtual cluster.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteManagedEndpointResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: endpointId
          in: path
          required: true
          description: The ID of the managed endpoint.
          schema:
            type: string
            pattern: '[0-9a-z]+'
            minLength: 1
            maxLength: 64
        - name: virtualClusterId
          in: path
          required: true
          description: The ID of the endpoint's virtual cluster.
          schema:
            type: string
            pattern: '[0-9a-z]+'
            minLength: 1
            maxLength: 64
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeManagedEndpoint
      description: Displays detailed information about a managed endpoint. A managed endpoint is a gateway that connects EMR Studio to Amazon EMR on EKS so that EMR Studio can communicate with your virtual cluster.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeManagedEndpointResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: endpointId
          in: path
          required: true
          description: This output displays ID of the managed endpoint.
          schema:
            type: string
            pattern: '[0-9a-z]+'
            minLength: 1
            maxLength: 64
        - name: virtualClusterId
          in: path
          required: true
          description: The ID of the endpoint's virtual cluster.
          schema:
            type: string
            pattern: '[0-9a-z]+'
            minLength: 1
            maxLength: 64
  '/virtualclusters/{virtualClusterId}':
    delete:
      operationId: DeleteVirtualCluster
      description: 'Deletes a virtual cluster. Virtual cluster is a managed entity on Amazon EMR on EKS. You can create, describe, list and delete virtual clusters. They do not consume any additional resource in your system. A single virtual cluster maps to a single Kubernetes namespace. Given this relationship, you can model virtual clusters the same way you model Kubernetes namespaces to meet your requirements.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVirtualClusterResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: virtualClusterId
          in: path
          required: true
          description: The ID of the virtual cluster that will be deleted.
          schema:
            type: string
            pattern: '[0-9a-z]+'
            minLength: 1
            maxLength: 64
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeVirtualCluster
      description: 'Displays detailed information about a specified virtual cluster. Virtual cluster is a managed entity on Amazon EMR on EKS. You can create, describe, list and delete virtual clusters. They do not consume any additional resource in your system. A single virtual cluster maps to a single Kubernetes namespace. Given this relationship, you can model virtual clusters the same way you model Kubernetes namespaces to meet your requirements.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeVirtualClusterResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: virtualClusterId
          in: path
          required: true
          description: The ID of the virtual cluster that will be described.
          schema:
            type: string
            pattern: '[0-9a-z]+'
            minLength: 1
            maxLength: 64
  '/virtualclusters/{virtualClusterId}/jobruns':
    get:
      operationId: ListJobRuns
      description: 'Lists job runs based on a set of parameters. A job run is a unit of work, such as a Spark jar, PySpark script, or SparkSQL query, that you submit to Amazon EMR on EKS.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListJobRunsResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: virtualClusterId
          in: path
          required: true
          description: 'The ID of the virtual cluster for which to list the job run. '
          schema:
            type: string
            pattern: '[0-9a-z]+'
            minLength: 1
            maxLength: 64
        - name: createdBefore
          in: query
          required: false
          description: The date and time before which the job runs were submitted.
          schema:
            type: string
            format: date-time
        - name: createdAfter
          in: query
          required: false
          description: The date and time after which the job runs were submitted.
          schema:
            type: string
            format: date-time
        - name: name
          in: query
          required: false
          description: The name of the job run.
          schema:
            type: string
            pattern: '[\.\-_/#A-Za-z0-9]+'
            minLength: 1
            maxLength: 64
        - name: states
          in: query
          required: false
          description: The states of the job run.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/JobRunState'
            maxItems: 10
        - name: maxResults
          in: query
          required: false
          description: The maximum number of job runs that can be listed.
          schema:
            type: integer
        - name: nextToken
          in: query
          required: false
          description: The token for the next set of job runs to return.
          schema:
            type: string
            pattern: .*\S.*
            minLength: 1
            maxLength: 1024
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: StartJobRun
      description: 'Starts a job run. A job run is a unit of work, such as a Spark jar, PySpark script, or SparkSQL query, that you submit to Amazon EMR on EKS.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartJobRunResponse'
        '480':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: virtualClusterId
          in: path
          required: true
          description: The virtual cluster ID for which the job run request is submitted.
          schema:
            type: string
            pattern: '[0-9a-z]+'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - clientToken
                - executionRoleArn
                - releaseLabel
                - jobDriver
              properties:
                name:
                  description: The name of the job run.
                  type: string
                  pattern: '[\.\-_/#A-Za-z0-9]+'
                  minLength: 1
                  maxLength: 64
                clientToken:
                  description: 'The client idempotency token of the job run request. '
                  type: string
                  pattern: .*\S.*
                  minLength: 1
                  maxLength: 64
                executionRoleArn:
                  description: The execution role ARN for the job run.
                  type: string
                  pattern: '^arn:(aws[a-zA-Z0-9-]*):iam::(\d{12})?:(role((\u002F)|(\u002F[\u0021-\u007F]+\u002F))[\w+=,.@-]+)$'
                  minLength: 20
                  maxLength: 2048
                releaseLabel:
                  description: The Amazon EMR release version to use for the job run.
                  type: string
                  pattern: '[\.\-_/A-Za-z0-9]+'
                  minLength: 1
                  maxLength: 64
                jobDriver:
                  description: Specify the driver that the job runs on.
                  type: object
                  properties:
                    sparkSubmitJobDriver:
                      $ref: '#/components/schemas/SparkSubmitJobDriver'
                      description: The job driver parameters specified for spark submit.
                configurationOverrides:
                  description: A configuration specification to be used to override existing configurations.
                  type: object
                  properties:
                    applicationConfiguration:
                      $ref: '#/components/schemas/ConfigurationList'
                      description: 'The configurations for the application running by the job run. '
                    monitoringConfiguration:
                      $ref: '#/components/schemas/MonitoringConfiguration'
                      description: The configurations for monitoring.
                tags:
                  description: The tags assigned to job runs.
                  type: object
                  minProperties: 0
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/StringEmpty256'
  '/tags/{resourceArn}':
    get:
      operationId: ListTagsForResource
      description: Lists the tags assigned to the resources.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The ARN of tagged resources.
          schema:
            type: string
            pattern: '^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\d{12}):/virtualclusters/.+$'
            minLength: 60
            maxLength: 500
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: TagResource
      description: 'Assigns tags to resources. A tag is a label that you assign to an AWS resource. Each tag consists of a key and an optional value, both of which you define. Tags enable you to categorize your AWS resources by attributes such as purpose, owner, or environment. When you have many resources of the same type, you can quickly identify a specific resource based on the tags you''ve assigned to it. For example, you can define a set of tags for your Amazon EMR on EKS clusters to help you track each cluster''s owner and stack level. We recommend that you devise a consistent set of tag keys for each resource type. You can then search and filter the resources based on the tags that you add.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The ARN of resources.
          schema:
            type: string
            pattern: '^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\d{12}):/virtualclusters/.+$'
            minLength: 60
            maxLength: 500
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tags
              properties:
                tags:
                  description: The tags assigned to resources.
                  type: object
                  minProperties: 0
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/StringEmpty256'
  '/tags/{resourceArn}#tagKeys':
    delete:
      operationId: UntagResource
      description: Removes tags from resources.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The ARN of resources.
          schema:
            type: string
            pattern: '^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\d{12}):/virtualclusters/.+$'
            minLength: 60
            maxLength: 500
        - name: tagKeys
          in: query
          required: true
          description: The tag keys of the resources.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/String128'
            minItems: 0
            maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    CancelJobRunResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceIdString'
          description: The output contains the ID of the cancelled job run.
        virtualClusterId:
          $ref: '#/components/schemas/ResourceIdString'
          description: The output contains the virtual cluster ID for which the job run is cancelled.
    ValidationException: {}
    InternalServerException: {}
    CreateManagedEndpointResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceIdString'
          description: The output contains the ID of the managed endpoint.
        name:
          $ref: '#/components/schemas/ResourceNameString'
          description: The output contains the name of the managed endpoint.
        arn:
          $ref: '#/components/schemas/EndpointArn'
          description: The output contains the ARN of the managed endpoint.
        virtualClusterId:
          $ref: '#/components/schemas/ResourceIdString'
          description: The output contains the ID of the virtual cluster.
    ConfigurationList:
      type: array
      items:
        $ref: '#/components/schemas/Configuration'
      maxItems: 100
    MonitoringConfiguration:
      type: object
      properties:
        persistentAppUI:
          $ref: '#/components/schemas/PersistentAppUI'
          description: 'Monitoring configurations for the persistent application UI. '
        cloudWatchMonitoringConfiguration:
          $ref: '#/components/schemas/CloudWatchMonitoringConfiguration'
          description: Monitoring configurations for CloudWatch.
        s3MonitoringConfiguration:
          $ref: '#/components/schemas/S3MonitoringConfiguration'
          description: Amazon S3 configuration for monitoring log publishing.
      description: Configuration setting for monitoring.
    StringEmpty256:
      type: string
      pattern: .*\S.*
      minLength: 0
      maxLength: 256
    ResourceNotFoundException: {}
    CreateVirtualClusterResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceIdString'
          description: This output contains the virtual cluster ID.
        name:
          $ref: '#/components/schemas/ResourceNameString'
          description: This output contains the name of the virtual cluster.
        arn:
          $ref: '#/components/schemas/VirtualClusterArn'
          description: This output contains the ARN of virtual cluster.
    ContainerProviderType:
      type: string
      enum:
        - EKS
    ClusterId:
      type: string
      pattern: '^[0-9A-Za-z][A-Za-z0-9\-_]*'
      minLength: 1
      maxLength: 100
    ContainerInfo:
      type: object
      properties:
        eksInfo:
          $ref: '#/components/schemas/EksInfo'
          description: The information about the EKS cluster.
      description: The information about the container used for a job run or a managed endpoint.
    DeleteManagedEndpointResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceIdString'
          description: The output displays the ID of the managed endpoint.
        virtualClusterId:
          $ref: '#/components/schemas/ResourceIdString'
          description: The output displays the ID of the endpoint's virtual cluster.
    DeleteVirtualClusterResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceIdString'
          description: 'This output contains the ID of the virtual cluster that will be deleted. '
    DescribeJobRunResponse:
      type: object
      properties:
        jobRun:
          $ref: '#/components/schemas/JobRun'
          description: The output displays information about a job run.
    DescribeManagedEndpointResponse:
      type: object
      properties:
        endpoint:
          $ref: '#/components/schemas/Endpoint'
          description: This output displays information about a managed endpoint.
    DescribeVirtualClusterResponse:
      type: object
      properties:
        virtualCluster:
          $ref: '#/components/schemas/VirtualCluster'
          description: This output displays information about the specified virtual cluster.
    ListJobRunsResponse:
      type: object
      properties:
        jobRuns:
          $ref: '#/components/schemas/JobRuns'
          description: This output lists information about the specified job runs.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: This output displays the token for the next set of job runs.
    JobRunState:
      type: string
      enum:
        - PENDING
        - SUBMITTED
        - RUNNING
        - FAILED
        - CANCELLED
        - CANCEL_PENDING
        - COMPLETED
    ListManagedEndpointsResponse:
      type: object
      properties:
        endpoints:
          $ref: '#/components/schemas/Endpoints'
          description: The managed endpoints to be listed.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: ' The token for the next set of endpoints to return. '
    EndpointType:
      type: string
      pattern: .*\S.*
      minLength: 1
      maxLength: 64
    EndpointState:
      type: string
      enum:
        - CREATING
        - ACTIVE
        - TERMINATING
        - TERMINATED
        - TERMINATED_WITH_ERRORS
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          $ref: '#/components/schemas/TagMap'
          description: The tags assigned to resources.
    ListVirtualClustersResponse:
      type: object
      properties:
        virtualClusters:
          $ref: '#/components/schemas/VirtualClusters'
          description: This output lists the specified virtual clusters.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: This output displays the token for the next set of virtual clusters.
    VirtualClusterState:
      type: string
      enum:
        - RUNNING
        - TERMINATING
        - TERMINATED
        - ARRESTED
    StartJobRunResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceIdString'
          description: This output displays the started job run ID.
        name:
          $ref: '#/components/schemas/ResourceNameString'
          description: This output displays the name of the started job run.
        arn:
          $ref: '#/components/schemas/JobArn'
          description: This output lists the ARN of job run.
        virtualClusterId:
          $ref: '#/components/schemas/ResourceIdString'
          description: This output displays the virtual cluster ID for which the job run was submitted.
    SparkSubmitJobDriver:
      type: object
      required:
        - entryPoint
      properties:
        entryPoint:
          $ref: '#/components/schemas/EntryPointPath'
          description: The entry point of job application.
        entryPointArguments:
          $ref: '#/components/schemas/EntryPointArguments'
          description: The arguments for job application.
        sparkSubmitParameters:
          $ref: '#/components/schemas/SparkSubmitParameters'
          description: The Spark submit parameters that are used for job runs.
      description: The information about job driver for Spark submit.
    TagResourceResponse:
      type: object
      properties: {}
    UntagResourceResponse:
      type: object
      properties: {}
    String128:
      type: string
      pattern: .*\S.*
      minLength: 1
      maxLength: 128
    ACMCertArn:
      type: string
      pattern: '^arn:(aws[a-zA-Z0-9-]*):acm:.+:(\d{12}):certificate/.+$'
      minLength: 44
      maxLength: 2048
    ResourceIdString:
      type: string
      pattern: '[0-9a-z]+'
      minLength: 1
      maxLength: 64
    CancelJobRunRequest:
      type: object
      title: CancelJobRunRequest
      properties: {}
    ClientToken:
      type: string
      pattern: .*\S.*
      minLength: 1
      maxLength: 64
    LogGroupName:
      type: string
      pattern: '[\.\-_/#A-Za-z0-9]+'
      minLength: 1
      maxLength: 512
    String256:
      type: string
      pattern: .*\S.*
      minLength: 1
      maxLength: 256
    CloudWatchMonitoringConfiguration:
      type: object
      required:
        - logGroupName
      properties:
        logGroupName:
          $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group for log publishing.
        logStreamNamePrefix:
          $ref: '#/components/schemas/String256'
          description: The specified name prefix for log streams.
      description: A configuration for CloudWatch monitoring. You can configure your jobs to send log information to CloudWatch Logs.
    String1024:
      type: string
      pattern: .*\S.*
      minLength: 1
      maxLength: 1024
    Configuration:
      type: object
      required:
        - classification
      properties:
        classification:
          $ref: '#/components/schemas/String1024'
          description: The classification within a configuration.
        properties:
          description: A set of properties specified within a configuration classification.
        configurations:
          $ref: '#/components/schemas/ConfigurationList'
          description: A list of additional configurations to apply within a configuration object.
      description: 'A configuration specification to be used when provisioning virtual clusters, which can include configurations for applications and software bundled with Amazon EMR on EKS. A configuration consists of a classification, properties, and optional nested configurations. A classification refers to an application-specific configuration file. Properties are the settings you want to change in that file.'
    ConfigurationOverrides:
      type: object
      properties:
        applicationConfiguration:
          $ref: '#/components/schemas/ConfigurationList'
          description: 'The configurations for the application running by the job run. '
        monitoringConfiguration:
          $ref: '#/components/schemas/MonitoringConfiguration'
          description: The configurations for monitoring.
      description: A configuration specification to be used to override existing configurations.
    EksInfo:
      type: object
      properties:
        namespace:
          $ref: '#/components/schemas/KubernetesNamespace'
          description: The namespaces of the EKS cluster.
      description: The information about the EKS cluster.
    ContainerProvider:
      type: object
      required:
        - type
        - id
      properties:
        type:
          $ref: '#/components/schemas/ContainerProviderType'
          description: The type of the container provider. EKS is the only supported type as of now.
        id:
          $ref: '#/components/schemas/ClusterId'
          description: The ID of the container cluster.
        info:
          $ref: '#/components/schemas/ContainerInfo'
          description: The information about the container cluster.
      description: The information about the container provider.
    ResourceNameString:
      type: string
      pattern: '[\.\-_/#A-Za-z0-9]+'
      minLength: 1
      maxLength: 64
    ReleaseLabel:
      type: string
      pattern: '[\.\-_/A-Za-z0-9]+'
      minLength: 1
      maxLength: 64
    IAMRoleArn:
      type: string
      pattern: '^arn:(aws[a-zA-Z0-9-]*):iam::(\d{12})?:(role((\u002F)|(\u002F[\u0021-\u007F]+\u002F))[\w+=,.@-]+)$'
      minLength: 20
      maxLength: 2048
    TagMap:
      type: object
      minProperties: 0
      maxProperties: 50
      additionalProperties:
        $ref: '#/components/schemas/StringEmpty256'
    CreateManagedEndpointRequest:
      type: object
      required:
        - name
        - type
        - releaseLabel
        - executionRoleArn
        - certificateArn
        - clientToken
      title: CreateManagedEndpointRequest
      properties:
        name:
          $ref: '#/components/schemas/ResourceNameString'
          description: The name of the managed endpoint.
        type:
          $ref: '#/components/schemas/EndpointType'
          description: The type of the managed endpoint.
        releaseLabel:
          $ref: '#/components/schemas/ReleaseLabel'
          description: The Amazon EMR release version.
        executionRoleArn:
          $ref: '#/components/schemas/IAMRoleArn'
          description: The ARN of the execution role.
        certificateArn:
          $ref: '#/components/schemas/ACMCertArn'
          description: The certificate ARN of the managed endpoint.
        configurationOverrides:
          $ref: '#/components/schemas/ConfigurationOverrides'
          description: The configuration settings that will be used to override existing configurations.
        clientToken:
          $ref: '#/components/schemas/ClientToken'
          description: The client idempotency token for this create call.
        tags:
          $ref: '#/components/schemas/TagMap'
          description: 'The tags of the managed endpoint. '
    EndpointArn:
      type: string
      pattern: '^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\d{12}):\/virtualclusters\/[0-9a-zA-Z]+\/endpoints\/[0-9a-zA-Z]+$'
      minLength: 60
      maxLength: 1024
    CreateVirtualClusterRequest:
      type: object
      required:
        - name
        - containerProvider
        - clientToken
      title: CreateVirtualClusterRequest
      properties:
        name:
          $ref: '#/components/schemas/ResourceNameString'
          description: The specified name of the virtual cluster.
        containerProvider:
          $ref: '#/components/schemas/ContainerProvider'
          description: The container provider of the virtual cluster.
        clientToken:
          $ref: '#/components/schemas/ClientToken'
          description: The client token of the virtual cluster.
        tags:
          $ref: '#/components/schemas/TagMap'
          description: The tags assigned to the virtual cluster.
    VirtualClusterArn:
      type: string
      pattern: '^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\d{12}):\/virtualclusters\/[0-9a-zA-Z]+$'
      minLength: 60
      maxLength: 1024
    Date:
      type: string
      format: date-time
    DeleteManagedEndpointRequest:
      type: object
      title: DeleteManagedEndpointRequest
      properties: {}
    DeleteVirtualClusterRequest:
      type: object
      title: DeleteVirtualClusterRequest
      properties: {}
    DescribeJobRunRequest:
      type: object
      title: DescribeJobRunRequest
      properties: {}
    JobRun:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the job run.
        name:
          $ref: '#/components/schemas/ResourceNameString'
          description: The name of the job run.
        virtualClusterId:
          $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the job run's virtual cluster.
        arn:
          $ref: '#/components/schemas/JobArn'
          description: The ARN of job run.
        state:
          $ref: '#/components/schemas/JobRunState'
          description: 'The state of the job run. '
        clientToken:
          $ref: '#/components/schemas/ClientToken'
          description: The client token used to start a job run.
        executionRoleArn:
          $ref: '#/components/schemas/IAMRoleArn'
          description: The execution role ARN of the job run.
        releaseLabel:
          $ref: '#/components/schemas/ReleaseLabel'
          description: The release version of Amazon EMR.
        configurationOverrides:
          $ref: '#/components/schemas/ConfigurationOverrides'
          description: The configuration settings that are used to override default configuration.
        jobDriver:
          $ref: '#/components/schemas/JobDriver'
          description: Parameters of job driver for the job run.
        createdAt:
          $ref: '#/components/schemas/Date'
          description: The date and time when the job run was created.
        createdBy:
          $ref: '#/components/schemas/RequestIdentityUserArn'
          description: The user who created the job run.
        finishedAt:
          $ref: '#/components/schemas/Date'
          description: The date and time when the job run has finished.
        stateDetails:
          $ref: '#/components/schemas/String256'
          description: Additional details of the job run state.
        failureReason:
          $ref: '#/components/schemas/FailureReason'
          description: The reasons why the job run has failed.
        tags:
          $ref: '#/components/schemas/TagMap'
          description: The assigned tags of the job run.
      description: 'This entity describes a job run. A job run is a unit of work, such as a Spark jar, PySpark script, or SparkSQL query, that you submit to Amazon EMR on EKS. '
    DescribeManagedEndpointRequest:
      type: object
      title: DescribeManagedEndpointRequest
      properties: {}
    Endpoint:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the endpoint.
        name:
          $ref: '#/components/schemas/ResourceNameString'
          description: The name of the endpoint.
        arn:
          $ref: '#/components/schemas/EndpointArn'
          description: The ARN of the endpoint.
        virtualClusterId:
          $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the endpoint's virtual cluster.
        type:
          $ref: '#/components/schemas/EndpointType'
          description: The type of the endpoint.
        state:
          $ref: '#/components/schemas/EndpointState'
          description: The state of the endpoint.
        releaseLabel:
          $ref: '#/components/schemas/ReleaseLabel'
          description: The EMR release version to be used for the endpoint.
        executionRoleArn:
          $ref: '#/components/schemas/IAMRoleArn'
          description: The execution role ARN of the endpoint.
        certificateArn:
          $ref: '#/components/schemas/ACMCertArn'
          description: The certificate ARN of the endpoint.
        configurationOverrides:
          $ref: '#/components/schemas/ConfigurationOverrides'
          description: The configuration settings that are used to override existing configurations for endpoints.
        serverUrl:
          $ref: '#/components/schemas/UriString'
          description: The server URL of the endpoint.
        createdAt:
          $ref: '#/components/schemas/Date'
          description: The date and time when the endpoint was created.
        securityGroup:
          $ref: '#/components/schemas/String256'
          description: 'The security group configuration of the endpoint. '
        subnetIds:
          $ref: '#/components/schemas/SubnetIds'
          description: 'The subnet IDs of the endpoint. '
        stateDetails:
          $ref: '#/components/schemas/String256'
          description: ' Additional details of the endpoint state. '
        failureReason:
          $ref: '#/components/schemas/FailureReason'
          description: ' The reasons why the endpoint has failed. '
        tags:
          $ref: '#/components/schemas/TagMap'
          description: 'The tags of the endpoint. '
      description: This entity represents the endpoint that is managed by Amazon EMR on EKS.
    DescribeVirtualClusterRequest:
      type: object
      title: DescribeVirtualClusterRequest
      properties: {}
    VirtualCluster:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the virtual cluster.
        name:
          $ref: '#/components/schemas/ResourceNameString'
          description: The name of the virtual cluster.
        arn:
          $ref: '#/components/schemas/VirtualClusterArn'
          description: The ARN of the virtual cluster.
        state:
          $ref: '#/components/schemas/VirtualClusterState'
          description: The state of the virtual cluster.
        containerProvider:
          $ref: '#/components/schemas/ContainerProvider'
          description: The container provider of the virtual cluster.
        createdAt:
          $ref: '#/components/schemas/Date'
          description: The date and time when the virtual cluster is created.
        tags:
          $ref: '#/components/schemas/TagMap'
          description: The assigned tags of the virtual cluster.
      description: 'This entity describes a virtual cluster. A virtual cluster is a Kubernetes namespace that Amazon EMR is registered with. Amazon EMR uses virtual clusters to run jobs and host endpoints. Multiple virtual clusters can be backed by the same physical cluster. However, each virtual cluster maps to one namespace on an EKS cluster. Virtual clusters do not create any active resources that contribute to your bill or that require lifecycle management outside the service.'
    KubernetesNamespace:
      type: string
      pattern: '[a-z0-9]([-a-z0-9]*[a-z0-9])?'
      minLength: 1
      maxLength: 63
    UriString:
      type: string
      pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDBFF-\uDC00\uDFFF\r\n\t]*'
      minLength: 1
      maxLength: 10280
    SubnetIds:
      type: array
      items:
        $ref: '#/components/schemas/String256'
    FailureReason:
      type: string
      enum:
        - INTERNAL_ERROR
        - USER_ERROR
        - VALIDATION_ERROR
        - CLUSTER_UNAVAILABLE
    EndpointStates:
      type: array
      items:
        $ref: '#/components/schemas/EndpointState'
      maxItems: 10
    EndpointTypes:
      type: array
      items:
        $ref: '#/components/schemas/EndpointType'
      maxItems: 10
    Endpoints:
      type: array
      items:
        $ref: '#/components/schemas/Endpoint'
    EntryPointArgument:
      type: string
      pattern: '(?!\s*$)(^[^'';|\u0026\u003C\u003E*?`$(){}\[\]!#\\]*$)'
      minLength: 1
      maxLength: 10280
      format: password
    EntryPointArguments:
      type: array
      items:
        $ref: '#/components/schemas/EntryPointArgument'
    EntryPointPath:
      type: string
      pattern: '(?!\s*$)(^[^'';|\u0026\u003C\u003E*?`$(){}\[\]!#\\]*$)'
      minLength: 1
      maxLength: 256
      format: password
    JavaInteger:
      type: integer
    JobArn:
      type: string
      pattern: '^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\d{12}):\/virtualclusters\/[0-9a-zA-Z]+\/jobruns\/[0-9a-zA-Z]+$'
      minLength: 60
      maxLength: 1024
    JobDriver:
      type: object
      properties:
        sparkSubmitJobDriver:
          $ref: '#/components/schemas/SparkSubmitJobDriver'
          description: The job driver parameters specified for spark submit.
      description: Specify the driver that the job runs on.
    RequestIdentityUserArn:
      type: string
      pattern: '^arn:(aws[a-zA-Z0-9-]*):(iam|sts)::(\d{12})?:[\w/+=,.@-]+$'
      minLength: 20
      maxLength: 2048
    JobRunStates:
      type: array
      items:
        $ref: '#/components/schemas/JobRunState'
      maxItems: 10
    JobRuns:
      type: array
      items:
        $ref: '#/components/schemas/JobRun'
    NextToken:
      type: string
      pattern: .*\S.*
      minLength: 1
      maxLength: 1024
    ListJobRunsRequest:
      type: object
      title: ListJobRunsRequest
      properties: {}
    ListManagedEndpointsRequest:
      type: object
      title: ListManagedEndpointsRequest
      properties: {}
    RsiArn:
      type: string
      pattern: '^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\d{12}):/virtualclusters/.+$'
      minLength: 60
      maxLength: 500
    ListTagsForResourceRequest:
      type: object
      title: ListTagsForResourceRequest
      properties: {}
    VirtualClusterStates:
      type: array
      items:
        $ref: '#/components/schemas/VirtualClusterState'
      maxItems: 10
    ListVirtualClustersRequest:
      type: object
      title: ListVirtualClustersRequest
      properties: {}
    VirtualClusters:
      type: array
      items:
        $ref: '#/components/schemas/VirtualCluster'
    PersistentAppUI:
      type: string
      enum:
        - ENABLED
        - DISABLED
    S3MonitoringConfiguration:
      type: object
      required:
        - logUri
      properties:
        logUri:
          $ref: '#/components/schemas/UriString'
          description: Amazon S3 destination URI for log publishing.
      description: ' Amazon S3 configuration for monitoring log publishing. You can configure your jobs to send log information to Amazon S3.'
    SensitivePropertiesMap:
      type: object
      maxProperties: 100
      additionalProperties:
        $ref: '#/components/schemas/String1024'
    SparkSubmitParameters:
      type: string
      pattern: '(?!\s*$)(^[^'';|\u0026\u003C\u003E*?`$(){}\[\]!#\\]*$)'
      minLength: 1
      maxLength: 102400
      format: password
    StartJobRunRequest:
      type: object
      required:
        - clientToken
        - executionRoleArn
        - releaseLabel
        - jobDriver
      title: StartJobRunRequest
      properties:
        name:
          $ref: '#/components/schemas/ResourceNameString'
          description: The name of the job run.
        clientToken:
          $ref: '#/components/schemas/ClientToken'
          description: 'The client idempotency token of the job run request. '
        executionRoleArn:
          $ref: '#/components/schemas/IAMRoleArn'
          description: The execution role ARN for the job run.
        releaseLabel:
          $ref: '#/components/schemas/ReleaseLabel'
          description: The Amazon EMR release version to use for the job run.
        jobDriver:
          $ref: '#/components/schemas/JobDriver'
          description: The job driver for the job run.
        configurationOverrides:
          $ref: '#/components/schemas/ConfigurationOverrides'
          description: The configuration overrides for the job run.
        tags:
          $ref: '#/components/schemas/TagMap'
          description: The tags assigned to job runs.
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/String128'
      minItems: 0
      maxItems: 50
    TagResourceRequest:
      type: object
      required:
        - tags
      title: TagResourceRequest
      properties:
        tags:
          $ref: '#/components/schemas/TagMap'
          description: The tags assigned to resources.
    UntagResourceRequest:
      type: object
      title: UntagResourceRequest
      properties: {}
security:
  - hmac: []
